- en: 'Chapter 2: Understanding Data Types and Variables'
  id: totrans-0
  prefs:
  - PREF_H1
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：理解数据类型和变量
- en: In Chapter 1, we got a glimpse of JavaScript's syntax and how to write simple
    programs. Now, let's take a deeper dive into the world of data types and variables
    in JavaScript. Understanding data types is essential as it forms the foundation
    for how information is stored, manipulated, and processed within a program. Additionally,
    variables enable us to assign values to memory locations and use those values
    throughout our code. By the end of this chapter, you'll have a solid grasp of
    JavaScript's data types and how to work with variables effectively.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一章，我们简要了解了 JavaScript 的语法以及如何编写简单的程序。现在，让我们更深入地探索 JavaScript 中的数据类型和变量的世界。理解数据类型至关重要，因为它构成了信息在程序中如何存储、操作和处理的基础。此外，变量使我们能够将值分配给内存位置，并在代码中使用这些值。到本章结束时，你将对
    JavaScript 的数据类型以及如何有效地使用变量有一个扎实的掌握。
- en: Data Types in JavaScript
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript 中的数据类型
- en: 'In JavaScript, data types define the nature of values that variables can hold.
    JavaScript is a dynamically typed language, meaning that variables can change
    their data type during the execution of the program. There are two main categories
    of data types in JavaScript: primitive data types and reference data types.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，数据类型定义了变量可以持有的值的性质。JavaScript 是一种动态类型语言，这意味着变量在程序执行过程中可以更改其数据类型。JavaScript
    中的数据类型主要分为两大类：原始数据类型和引用数据类型。
- en: Primitive Data Types
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 原始数据类型
- en: 'Primitive data types are simple, immutable values that represent basic building
    blocks in JavaScript. There are six primitive data types:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 原始数据类型是简单的、不可变的值，代表 JavaScript 中的基本构建块。共有六种原始数据类型：
- en: '1\. **Number:** Represents numeric values, including integers and floating-point
    numbers. For example:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. **数字：** 表示数值，包括整数和浮动点数。例如：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '2\. **String:** Represents textual data and is enclosed in single ('''') or
    double ("") quotes. For example:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. **字符串：** 表示文本数据，用单引号（''）或双引号（""）括起来。例如：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '3\. **Boolean:** Represents a logical value that can be either `true` or `false`.
    For example:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. **布尔值：** 表示一个逻辑值，可以是 `true` 或 `false`。例如：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '4\. **Null:** Represents the intentional absence of any value. For example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. **空：** 表示故意没有任何值。例如：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '5\. **Undefined:** Represents a declared variable with no assigned value. For
    example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. **未定义：** 表示已声明但未赋值的变量。例如：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '6\. **Symbol:** Introduced in ECMAScript 6 (ES6), symbols are unique and immutable
    data types often used as property keys in objects. For example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. **符号：** 在 ECMAScript 6 (ES6) 中引入，符号是独特且不可变的数据类型，通常用作对象中的属性键。例如：
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Primitive data types are passed by value, meaning that when you assign a primitive
    value to a variable or pass it as an argument to a function, a copy of the value
    is created. Any changes made to the variable or the argument do not affect the
    original value.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 原始数据类型是按值传递的，这意味着当你将一个原始值赋给变量或将其作为参数传递给函数时，会创建该值的副本。对变量或参数所做的任何更改不会影响原始值。
- en: Reference Data Types
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引用数据类型
- en: 'Reference data types are more complex and mutable data types that hold references
    to memory locations where their values are stored. There are three primary reference
    data types in JavaScript:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 引用数据类型是更复杂且可变的数据类型，它们持有指向存储值的内存位置的引用。在 JavaScript 中有三种主要的引用数据类型：
- en: '1\. **Object:** Represents a collection of key-value pairs or properties. Objects
    can store various data types and even other objects. For example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. **对象：** 表示一组键值对或属性。对象可以存储各种数据类型，甚至是其他对象。例如：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '2\. **Array:** Represents a list-like collection of elements. Arrays can store
    multiple values, and each value is accessible using an index starting from 0\.
    For example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. **数组：** 表示一个类似列表的元素集合。数组可以存储多个值，每个值可以通过从 0 开始的索引来访问。例如：
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '3\. **Function:** Represents reusable blocks of code that perform a specific
    task. Functions are fundamental in JavaScript as they enable code modularity and
    reusability. For example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. **函数：** 表示可重用的代码块，用于执行特定任务。函数在 JavaScript 中是非常基础的，它们使得代码具有模块化和可重用性。例如：
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Reference data types are passed by reference, meaning that when you assign a
    reference value (such as an object or an array) to a variable or pass it as an
    argument to a function, you are actually assigning a pointer to the memory location
    where the value is stored. As a result, changes made to the variable or the argument
    can affect the original value since they both point to the same memory location.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 引用数据类型是通过引用传递的，这意味着当你将一个引用值（如对象或数组）赋给一个变量，或者将其作为参数传递给函数时，实际上是将指向值存储位置的指针赋给了变量或参数。因此，对变量或参数所做的修改可能会影响原始值，因为它们指向的是同一内存位置。
- en: Variables in JavaScript
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript 中的变量
- en: 'Variables are essential in any programming language as they allow us to store
    and manipulate data. In JavaScript, variables serve as placeholders to hold different
    types of values. To declare a variable, we use the `var`, `let`, or `const` keyword,
    followed by the variable name. Here''s a brief explanation of each:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 变量在任何编程语言中都是必不可少的，因为它们允许我们存储和操作数据。在 JavaScript 中，变量充当占位符，用于存储不同类型的值。声明变量时，我们使用
    `var`、`let` 或 `const` 关键字，后面跟着变量名。以下是每个关键字的简要说明：
- en: var Keyword (Legacy Approach)
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: var 关键字（传统方法）
- en: In older versions of JavaScript, the `var` keyword was commonly used to declare
    variables. However, it has some limitations, such as hoisting and scope-related
    issues. Hoisting is a behavior where variable declarations are moved to the top
    of their scope during the code execution, which might lead to unexpected results.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 的早期版本中，通常使用 `var` 关键字来声明变量。然而，它有一些局限性，例如提升（hoisting）和作用域相关的问题。提升是指变量声明在代码执行时被移动到作用域的顶部，这可能导致意外的结果。
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: let and const Keywords (Modern Approach)
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: let 和 const 关键字（现代方法）
- en: With the introduction of ECMAScript 6 (ES6) in 2015, two new keywords, `let`
    and `const`, were added to declare variables. These keywords provide block-scoping,
    which addresses the scope-related problems of `var`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 随着2015年ECMAScript 6（ES6）的引入，添加了两个新的关键字`let`和`const`来声明变量。这些关键字提供了块级作用域，解决了`var`作用域相关的问题。
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In Example 2, we use `let` to declare a variable `name` and `const` to declare
    a constant `PI`. The value of a variable declared with `let` can be changed, while
    the value of a constant declared with `const` remains fixed throughout the program
    execution.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例2中，我们使用`let`声明变量`name`，并使用`const`声明常量`PI`。使用`let`声明的变量的值可以改变，而使用`const`声明的常量值在程序执行过程中保持不变。
- en: Rules for Naming Variables
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量命名规则
- en: 'When naming variables in JavaScript, adhere to the following rules:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在命名JavaScript变量时，请遵循以下规则：
- en: '- Variable names cannot start with a number.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '- 变量名不能以数字开头。'
- en: '- Variable names can only contain letters, numbers, underscores (_), or dollar
    signs ($).'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '- 变量名只能包含字母、数字、下划线（_）或美元符号（$）。'
- en: '- Variable names are case-sensitive, meaning `age`, `Age`, and `AGE` are considered
    different variables.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '- 变量名区分大小写，这意味着`age`、`Age`和`AGE`被视为不同的变量。'
- en: '- Avoid using reserved keywords (e.g., `let`, `if`, `else`, `function`, etc.)
    as variable names.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '- 避免使用保留关键字（例如，`let`、`if`、`else`、`function`等）作为变量名。'
- en: Assigning Values to Variables
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 给变量赋值
- en: You can assign values to variables using the assignment operator (=). This assigns
    the value on the right-hand side of the operator to the variable on the left-hand
    side.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用赋值操作符（=）给变量赋值。这样会将操作符右边的值赋给左边的变量。
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Reassigning Variables
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重新赋值变量
- en: Variables declared with `let` can be reassigned new values, while variables
    declared with `const` cannot be reassigned. Attempting to reassign a `const` variable
    will result in an error.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`let`声明的变量可以重新赋值，而使用`const`声明的变量不能重新赋值。尝试重新赋值给`const`变量将导致错误。
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Variable Scope
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量作用域
- en: 'Scope refers to the visibility or accessibility of variables within different
    parts of the code. In JavaScript, there are two main types of scope: global scope
    and local scope.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 范围指的是变量在代码不同部分的可见性或可访问性。在JavaScript中，主要有两种范围：全局范围和局部范围。
- en: Global Scope
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 全局范围
- en: Variables declared outside any function or block have global scope, which means
    they can be accessed from anywhere within the code, including inside functions
    and blocks.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何函数或代码块外部声明的变量具有全局范围，这意味着它们可以在代码的任何地方访问，包括函数和代码块内部。
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In Example 6, the variable `globalVar` has global scope and can be accessed
    from within the `myFunction` function.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例6中，变量`globalVar`具有全局范围，可以在`myFunction`函数内部访问。
- en: Local Scope
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 局部范围
- en: Variables declared inside a function or block have local scope, which means
    they are only accessible within that specific function or block.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数或代码块内部声明的变量具有局部范围，这意味着它们只能在该特定函数或代码块内访问。
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In Example 7, the variable `localVar` has local scope and can only be accessed
    from within the `myFunction` function. Attempting to access it outside the function
    will result in a `ReferenceError`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 7 中，变量 `localVar` 具有局部作用域，只能在 `myFunction` 函数内访问。尝试在函数外部访问它将导致 `ReferenceError`
    错误。
- en: Hoisting
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量提升
- en: Hoisting is a behavior in JavaScript where variable declarations (not the assignments)
    are moved to the top of their scope during the code execution. This means that
    you can use a variable before it's declared without causing an error.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 变量提升是 JavaScript 中的一种行为，变量声明（而非赋值）在代码执行过程中会被提升到作用域的顶部。这意味着你可以在声明之前使用变量而不会引发错误。
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In Example 8, the first `console.log` statement outputs `undefined` because
    the variable `name` is hoisted to the top of the scope, but its assignment (`name
    = 'John Doe'`) is not hoisted. Therefore, the variable exists but has no value
    until it's assigned.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 8 中，第一个 `console.log` 语句输出 `undefined`，因为变量 `name` 被提升到了作用域的顶部，但它的赋值（`name
    = 'John Doe'`）没有被提升。因此，变量存在但没有值，直到它被赋值。
- en: Constants
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常量
- en: Constants, declared using the `const` keyword, are variables whose values cannot
    be changed once assigned. They have block scope, like variables declared with
    `let`, but are immutable.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 常量是使用 `const` 关键字声明的变量，一旦赋值后其值不能更改。它们具有块级作用域，像使用 `let` 声明的变量一样，但它们是不可变的。
- en: '[PRE16]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In Example 9, `PI` is a constant with a value of `3.14`. Any attempt to reassign
    a new value to `PI` will result in a `TypeError`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 9 中，`PI` 是一个常量，值为 `3.14`。任何尝试重新赋值给 `PI` 的操作都会导致 `TypeError` 错误。
- en: Best Practices for Using Variables
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用变量的最佳实践
- en: 'To write clean and maintainable code, follow these best practices when using
    variables:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编写干净且易于维护的代码，在使用变量时，请遵循以下最佳实践：
- en: 1\. **Use Descriptive Names:** Choose meaningful names for variables that convey
    their purpose and content.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. **使用描述性名称：** 为变量选择有意义的名称，传达其目的和内容。
- en: 2\. **Declare Variables Before Use:** Always declare variables before using
    them to avoid hoisting-related issues.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. **在使用前声明变量：** 始终在使用变量之前声明它们，以避免与提升相关的问题。
- en: 3\. **Use `const` for Constants:** Prefer using `const` for variables whose
    values won't change.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. **使用 `const` 声明常量：** 对于值不会改变的变量，优先使用 `const`。
- en: 4\. **Use `let` for Mutable Variables:** Use `let` for variables that might
    change during the program execution.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. **使用 `let` 声明可变变量：** 对于在程序执行过程中可能会改变的变量，使用 `let`。
- en: 5\. **Avoid Global Variables:** Minimize the use of global variables to prevent
    unintended side effects and maintain code modularity.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. **避免全局变量：** 尽量减少全局变量的使用，以防止意外副作用并保持代码的模块化。
- en: 6\. **Initialize Variables:** Initialize variables with default values when
    declaring them to avoid unexpected behaviors.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. **初始化变量：** 在声明变量时为其赋予默认值，以避免意外行为。
- en: Working with Data Types and Variables
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据类型和变量的使用
- en: Now that we understand the basics of data types and variables in JavaScript,
    let's explore how to work with them effectively.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 JavaScript 中数据类型和变量的基础知识，让我们深入探讨如何有效地使用它们。
- en: Type Conversion
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型转换
- en: 'Type conversion, also known as type casting, is the process of converting one
    data type to another. JavaScript provides several methods to convert data types:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 类型转换，也称为类型转换强制，是将一种数据类型转换为另一种数据类型的过程。JavaScript 提供了多种方法来转换数据类型：
- en: 1\. **String Conversion:** You can convert any data type to a string using the
    `toString()` method or the `String()` function.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. **字符串转换：** 你可以使用 `toString()` 方法或 `String()` 函数将任何数据类型转换为字符串。
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 2\. **Number Conversion:** You can convert a string or a boolean value to a
    number using the `parseInt()` or `parseFloat()` methods, or the `Number()` function.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. **数字转换：** 你可以使用 `parseInt()` 或 `parseFloat()` 方法，或者 `Number()` 函数将字符串或布尔值转换为数字。
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 3\. **Boolean Conversion:** You can convert any value to a boolean using the
    `Boolean()` function.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. **布尔转换：** 你可以使用 `Boolean()` 函数将任何值转换为布尔值。
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Type Coercion
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型强制转换
- en: Type coercion is the process of automatically converting one data type to another
    when performing operations or comparisons. JavaScript performs type coercion in
    certain situations to ensure that the operation can be completed.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 类型强制转换是在执行操作或比较时自动将一种数据类型转换为另一种数据类型的过程。JavaScript 在某些情况下会执行类型强制转换，以确保操作能够完成。
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In Example 13, the addition operation involves a number and a string. JavaScript
    performs type coercion and converts the number `10` to a string,
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 13 中，加法操作涉及一个数字和一个字符串。JavaScript 会执行类型强制转换，将数字 `10` 转换为字符串，
- en: resulting in the concatenation of `"10"` and `"5"`, which gives `"105"`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这会导致 `"10"` 和 `"5"` 的连接，结果是 `"105"`。
- en: Understanding NaN and Type Checking
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解 NaN 和类型检查
- en: NaN (Not-a-Number) is a special value representing the result of an invalid
    or undefined mathematical operation. It is considered a numeric data type but
    behaves differently than regular numbers.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: NaN（非数字）是一个特殊值，表示无效或未定义的数学运算结果。它被认为是一个数值数据类型，但与普通数字的行为不同。
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In Example 14, `"hello" - 5` is an invalid operation, and the result is `NaN`.
    The `typeof` operator incorrectly reports `NaN` as `"number"`, but the `isNaN()`
    function correctly identifies `NaN` as a special value.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 14 中，`"hello" - 5` 是一个无效操作，结果是 `NaN`。`typeof` 运算符错误地将 `NaN` 报告为 `"number"`，但
    `isNaN()` 函数正确地识别 `NaN` 为一个特殊值。
- en: The typeof Operator
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`typeof` 运算符'
- en: The `typeof` operator is used to determine the data type of a value or a variable.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`typeof` 运算符用于确定值或变量的数据类型。'
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In Example 15, we use the `typeof` operator to determine the data types of variables
    `age`, `name`, `isStudent`, and `user`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 15 中，我们使用 `typeof` 运算符来确定变量 `age`、`name`、`isStudent` 和 `user` 的数据类型。
- en: Working with Strings
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 操作字符串
- en: Strings are one of the most common data types in JavaScript, and there are several
    built-in methods that allow you to manipulate and work with strings effectively.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串是 JavaScript 中最常见的数据类型之一，并且有许多内建方法可以帮助你有效地操作和处理字符串。
- en: '[PRE23]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In Example 16, we use various string methods, such as `length`, `toUpperCase`,
    `toLowerCase`, `indexOf`, `lastIndexOf`, `slice`, `substring`, and `substr`, to
    manipulate the `message` string.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 16 中，我们使用了多种字符串方法，例如 `length`、`toUpperCase`、`toLowerCase`、`indexOf`、`lastIndexOf`、`slice`、`substring`
    和 `substr`，来操作 `message` 字符串。
- en: Working with Numbers
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 操作数字
- en: Numbers are another fundamental data type in JavaScript, and there are several
    built-in methods for working with numbers effectively.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 数字是 JavaScript 中的另一种基本数据类型，并且有多种内建方法可以帮助我们有效地操作数字。
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In Example 17, we use various number methods, such as `toFixed`, `toPrecision`,
    `Math.round`, `Math.floor`, `Math.ceil`, and `Math.random`, to manipulate the
    `num` variable and generate random numbers.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 17 中，我们使用了多种数字方法，例如 `toFixed`、`toPrecision`、`Math.round`、`Math.floor`、`Math.ceil`
    和 `Math.random`，来操作 `num` 变量并生成随机数。
- en: Working with Arrays
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 操作数组
- en: Arrays are used to store multiple values in a single variable. JavaScript provides
    various methods for working with arrays effectively.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 数组用于在一个变量中存储多个值。JavaScript 提供了多种方法来有效地操作数组。
- en: '[PRE25]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In Example 18, we use various array methods, such as `length`, `push`, `pop`,
    `unshift`, `shift`, `indexOf`, `includes`, and `slice`, to manipulate the `fruits`
    array.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 18 中，我们使用了多种数组方法，例如 `length`、`push`、`pop`、`unshift`、`shift`、`indexOf`、`includes`
    和 `slice`，来操作 `fruits` 数组。
- en: Working with Objects
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 操作对象
- en: Objects are used to store key-value pairs and represent complex data structures.
    Objects play a crucial role in JavaScript, and there are various techniques to
    work with them.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对象用于存储键值对并表示复杂的数据结构。对象在 JavaScript 中起着至关重要的作用，并且有多种技巧可以用来操作它们。
- en: '[PRE26]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In Example 19, we work with an object named `person`, access its properties
    using dot notation, add a new property, remove a property, and obtain arrays of
    its keys and values using `Object.keys` and `Object.values`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 19 中，我们操作了一个名为 `person` 的对象，使用点表示法访问其属性，添加新属性，删除属性，并使用 `Object.keys` 和 `Object.values`
    获取其键值对的数组。
- en: Conclusion
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter, we delved into the fascinating world of data types and variables
    in JavaScript. We explored primitive and reference data types, learned how to
    declare and use variables effectively, and discovered methods to work with strings,
    numbers, arrays, and objects. Understanding data types and variables is fundamental
    to becoming proficient in JavaScript programming.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入探讨了 JavaScript 中数据类型和变量的迷人世界。我们了解了原始数据类型和引用数据类型，学习了如何有效声明和使用变量，并发现了处理字符串、数字、数组和对象的方法。理解数据类型和变量是成为
    JavaScript 编程高手的基础。
