- en: Debugging JavaScript
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 调试 JavaScript
- en: Debugging is the process of finding and fixing problems or errors in code. Most
    software developers, if not all, spend more time debugging code than writing it.
    Therefore, debugging is a must-have skill for any software developer. It is impossible
    to write bug-free code, so learning to debug your own or someone else’s code effectively
    can greatly enhance your productivity as a software developer. We can’t escape
    debugging as software developers, so we might as well learn to do it effectively.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 调试是查找和修复代码中问题或错误的过程。大多数软件开发者（如果不是全部的话）花在调试代码上的时间比写代码的时间还要多。因此，调试是任何软件开发者必备的技能。编写无错误代码是不可能的，因此有效地学习调试自己的或他人的代码可以大大提高您的工作效率。作为软件开发者，我们无法逃避调试，因此不如学会有效地进行调试。
- en: 'In this module, we will learn different ways to debug JavaScript code. Every
    JavaScript developer uses the `console.log` and `alert` functions to debug their
    code, and it is fine to do so, but there are other ways to debug JavaScript. The
    goal of this module is to introduce the following three ways that can help us
    debug JavaScript code effectively:'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在本模块中，我们将学习不同的调试 JavaScript 代码的方法。每个 JavaScript 开发者都会使用 `console.log` 和 `alert`
    函数来调试他们的代码，这样做是可以的，但还有其他调试 JavaScript 的方法。本模块的目标是介绍以下三种可以帮助我们有效调试 JavaScript 代码的方法：
- en: Using the `debugger` statement
  id: totrans-3
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 使用 `debugger` 语句
- en: Using breakpoints in browser developer tools
  id: totrans-4
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 使用浏览器开发工具中的断点
- en: Using `VS Code` debugger
  id: totrans-5
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 使用 `VS Code` 调试器
- en: :::note
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: :::note
- en: The debugging strategies mentioned above depend on the [debugger](https://en.wikipedia.org/wiki/Debugger)
    to help us debug our code effectively.
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 上述提到的调试策略依赖于 [调试器](https://en.wikipedia.org/wiki/Debugger) 来帮助我们有效地调试代码。
- en: ':::'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: ':::'
- en: The next few lessons introduce each of the above-mentioned methods.
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 接下来的几节课将介绍上述每种方法。
- en: The `debugger` statement allows us to set up a point in our code where the debugger
    can pause the execution of our code. This is like setting up breakpoints in our
    code where the code execution can be paused, allowing us to inspect the values
    of different variables in our code.
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`debugger` 语句允许我们在代码中设置一个点，调试器可以在此暂停代码的执行。这就像在代码中设置断点一样，可以暂停代码的执行，从而检查代码中不同变量的值。'
- en: Run the following code example in the browser and enter the value `“18”`. The
    code below works fine but gives incorrect output for the value `“18”`.
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在浏览器中运行以下代码示例并输入值 `“18”`。下面的代码可以正常工作，但对于值 `“18”` 给出了错误的输出。
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here’s a `Replit` of the above code in action:'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是上述代码在操作中的 `Replit`：
- en: '`<ReplitEmbed src=”https://replit.com/@newlineauthors/debugger-statement-example1”
    />`'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<ReplitEmbed src=”https://replit.com/@newlineauthors/debugger-statement-example1”
    />`'
- en: :::info
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: :::info
- en: You can open the above code example in the browser using the `VS Code`’s [live
    server](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer)
    extension.
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 您可以使用 `VS Code` 的 [实时服务器](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer)
    扩展在浏览器中打开上述代码示例。
- en: ':::'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: ':::'
- en: The value `“18”` is a valid value, but we get `“invalid age value provided”`
    as an output. Why is that? Let us debug that using the `debugger` statement.
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 值 `“18”` 是一个有效值，但我们得到了 `“提供的年龄值无效”` 的输出。这是为什么呢？让我们使用 `debugger` 语句来调试一下。
- en: :::note
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: :::note
- en: The `Firefox` browser was used to show different debugging strategies in this
    module. You can follow along using `Firefox`, `Microsoft Edge`, or the `Chrome`
    browser.
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在本模块中，使用 `Firefox` 浏览器展示了不同的调试策略。您可以使用 `Firefox`、`Microsoft Edge` 或 `Chrome`
    浏览器进行跟随。
- en: ':::'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: ':::'
- en: You might have noticed the `debugger` statement already added to the code. It
    is only needed when debugging the code and can be removed after you’re done debugging
    the code. But it didn’t do anything in the code; our code didn’t pause at the
    `debugger` statement. Why is that? For the `debugger` statement to pause the code
    execution, we need to have the browser developer tools opened. Just open the [browser’s
    developer tools](https://balsamiq.com/support/faqs/browserconsole/).
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 您可能已经注意到 `debugger` 语句已经添加到代码中。它仅在调试代码时需要，完成调试后可以移除。但它在代码中并没有任何作用；我们的代码没有在 `debugger`
    语句处暂停。为什么会这样？为了让 `debugger` 语句暂停代码执行，我们需要打开浏览器的开发工具。只需打开 [浏览器的开发工具](https://balsamiq.com/support/faqs/browserconsole/)。
- en: 'Once opened, refresh the browser window, and you will notice the paused code
    execution, as shown in the image below:'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 打开后，刷新浏览器窗口，您会注意到代码执行已暂停，如下图所示：
- en: '![screenshot of code paused on debugger statement](images/module_11----lesson_11.02----public----assets----debugger-screenshot.png)'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![调试器语句暂停时的代码截图](images/module_11----lesson_11.02----public----assets----debugger-screenshot.png)'
- en: screenshot of code paused on `debugger` statement
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`debugger`语句暂停时的代码截图'
- en: ':::info You might need to drag the developer tools window to increase its width
    in order to match the layout shown in the image above. The narrow width of the
    window can show a different layout of the different areas highlighted in the image
    above. :::'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: ':::info 你可能需要拖动开发者工具窗口以增加其宽度，以匹配上面图像中的布局。窗口的窄宽度可能会显示上面图像中不同区域的不同布局。:::'
- en: 'Now that the code execution is paused，we can focus on two areas of the debugger:
    the debugger controls and the values of different variables in the current scope；both
    areas are highlighted in the image above。'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在代码执行已暂停，我们可以关注调试器的两个区域：调试器控制和当前作用域中不同变量的值；这两个区域在上面的图像中都有高亮显示。
- en: The debugger controls allow us to execute the code one line at a time，making
    it easier for us to see how each line of code executes and how it affects the
    values of different variables。
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 调试器控制允许我们逐行执行代码，使我们更容易看到每一行代码的执行情况以及它如何影响不同变量的值。
- en: ':::info You can hover over each button in the debugger controls to know what
    it does. :::'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: ':::info 你可以悬停在调试器控制中的每个按钮上，以了解它的功能。:::'
- en: You can also see the call stack above the “Scopes” section in the image above。This
    allows us to view how the current function was called。We can also hover over different
    variables in our code to view their values。
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你还可以在上面的图像中看到“Scopes”部分上方的调用栈。这使我们能够查看当前函数是如何被调用的。我们还可以悬停在代码中的不同变量上，以查看它们的值。
- en: ':::info You can change the values of different variables in the “Scopes” section
    by double-clicking on the value. This allows us to see how our code behaves if
    the values of variables in the current scope are changed. :::'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: ':::info 你可以通过双击“Scopes”部分中不同变量的值来更改它们的值。这使我们能够查看如果当前作用域中的变量值发生变化，代码的行为会如何。:::'
- en: Let us debug why our code doesn’t work when the value is `"18"`。Note the value
    of the `age`变量（hover over it or look at the “Scopes” section）；you will see that
    its value is a string and not a number。That means the `prompt`函数，which takes the
    user’s input，returns a string。所以当我们到达第一个`if`条件，即`age === 18`时，它并不会评估为`true`。Can
    you guess why？Because comparing a string with a number using the triple equals
    (strict equality) operator always evaluates to `false` and you probably knew that，but
    if you didn’t，the debugger helped you know that the value of `age` is a string
    and you are comparing it to a number，所以它确实帮助你更好地理解了你的代码。
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们调试一下为什么当值为`"18"`时我们的代码不工作。注意`age`变量的值（悬停或查看“Scopes”部分）；你会看到它的值是字符串而不是数字。这意味着`prompt`函数（获取用户输入）返回的是一个字符串。所以当我们到达第一个`if`条件，即`age
    === 18`时，它并不会评估为`true`。你能猜到为什么吗？因为使用三重等号（严格相等）运算符比较字符串和数字总是评估为`false`，你可能知道这一点，但如果你不知道，调试器帮助你知道`age`的值是字符串，并且你正在将其与数字进行比较，所以它确实帮助你更好地理解了你的代码。
- en: Now that we know the problem，we can fix it by converting `age` to a number before
    comparing it：
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在我们知道问题所在，我们可以通过在比较之前将`age`转换为数字来修复它：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This was a simple example to show you how the `debugger`语句可以用于调试我们的代码。The debuggers
    built into browsers are really powerful，and it is worth exploring every feature
    of them to enhance your debugging skills。
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是一个简单的示例，向你展示如何使用`debugger`语句来调试我们的代码。浏览器内置的调试器非常强大，值得探索其每一个功能，以提升你的调试技能。
- en: In the previous lesson，we used the `debugger`语句来暂停代码执行并调试我们的代码。There’s another
    way to pause the code execution，and that is by using breakpoints。A breakpoint
    acts just like the `debugger`语句，但不同的是，我们不必在代码中写任何特殊的关键字。相反，我们在浏览器的开发者工具中打开JavaScript代码，并在浏览器的开发者工具中设置断点。
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在上一课中，我们使用`debugger`语句来暂停代码执行并调试我们的代码。还有另一种暂停代码执行的方法，那就是使用断点。断点的作用就像`debugger`语句，但不同的是，我们不必在代码中写任何特殊的关键字。相反，我们在浏览器的开发者工具中打开JavaScript代码，并在开发者工具中设置断点。
- en: 如前一课所示，我们的`JavaScript`代码在“Debugger”选项卡中打开。在`Chrome`中，相应的选项卡名为“Sources”。这两个浏览器的调试器的整体功能或多或少是相同的。以下是包含我们`JavaScript`代码的`Chrome`浏览器中“Sources”选项卡的截图：
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如前一课所示，我们的`JavaScript`代码在“Debugger”选项卡中打开。在`Chrome`中，相应的选项卡名为“Sources”。这两个浏览器的调试器的整体功能或多或少是相同的。以下是包含我们`JavaScript`代码的`Chrome`浏览器中“Sources”选项卡的截图：
- en: '![screenshot of sources tab in chrome dev tools](images/module_11----lesson_11.03----public----assets----chrome-sources-tab-screenshot.png)'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![Chrome开发者工具中的sources选项卡截图](images/module_11----lesson_11.03----public----assets----chrome-sources-tab-screenshot.png)'
- en: '`screenshot of sources tab in chrome dev tools`'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Chrome开发者工具中的sources选项卡截图`'
- en: 现在，我们不使用`debugger`语句来暂停代码执行，而是使用断点。我们将使用与前一课相同的示例，但不使用`debugger`语句。要设置断点，我们首先需要在浏览器中打开我们的代码，打开开发者工具，并在使用`Firefox`浏览器或`Chrome`时打开“Sources”或“Debugger”选项卡（其他浏览器也会有类似的选项卡）。
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: :::info
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 如果您在上一课中跟随操作，您可能已经在浏览器中打开了代码；如果没有，您可以在浏览器中打开上一课的代码示例。您可以使用`VS Code`的[live server](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer)扩展来打开代码示例。
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: ':::'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 一旦代码在浏览器的开发者工具中打开，设置断点就像点击代码中的行号一样简单。以下图片显示了在代码中设置的两个断点：
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![screenshot of breakpoints in browser dev tools](images/module_11----lesson_11.03----public----assets----breakpoint-screenshot.png)'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '`screenshot of breakpoints in browser dev tools`'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 只需点击要设置断点的行号，然后刷新浏览器窗口。就像使用`debugger`语句一样，当执行到达我们代码中设置的断点时，代码执行将被暂停，从此我们可以使用浏览器调试器提供的不同功能来调试我们的代码。
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 进一步阅读
  id: totrans-49
  prefs:
  - PREF_H4
  stylish: true
  type: TYPE_NORMAL
- en: '[Debug JavaScript (chrome devtools docs)](https://developer.chrome.com/docs/devtools/javascript/)'
  id: totrans-50
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`Visual Studio Code` (`VS Code`)是现在最常用的编辑器之一，因其提供的功能和灵活性以及许多可用扩展的帮助而备受欢迎。在`VS
    Code`提供的众多功能中，有一个内置调试器，允许我们在`VS Code`中调试代码。除了内置调试器，还有许多可用于调试不同语言编写的代码的扩展。'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 要使用`VS Code`调试我们的代码，请在`VS Code`中打开我们在过去两课中一直在使用的相同代码示例。打开后，在包含我们代码（HTML和JavaScript文件）的文件夹中创建一个名为`.vscode`的文件夹。在`.vscode`文件夹中，创建一个名为`launch.json`的文件，并将以下JSON粘贴到该文件中：
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Before we can run the debugger, we need to setup breakpoints. We can either
    use the `debugger` statement in the code or set breakpoints by clicking on the
    line number in the JavaScript code file opened in `VS Code`. The following image
    shows a breakpoint added in the JavaScript code file that is opened in `VS Code`:'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![screenshot of breakpoint added in VS Code](images/module_11----lesson_11.04----public----assets----vscode-breakpoint.png)'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: screenshot of breakpoint added in `VS Code`
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The red dot in the image above is a breakpoint added by clicking on line number
    `5`.
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'After this, open the “Run and Debug” option in `VS Code` as shown in the image
    below:'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![screenshot of Run and Debug option in VS Code](images/module_11----lesson_11.04----public----assets----run-debug-option-vscode.png)'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: screenshot of Run and Debug option in `VS Code`
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Once the “Run and Debug” window opens, as shown in the image above, click on
    the green play button at the top in the image above. This will open up the `Chrome`
    browser, and the debugger will pause the code execution when it reaches the breakpoint.
    As shown in the image above, the breakpoint is added at line `5`, so the debugger
    will pause the execution after taking user input. Depending on where you added
    the breakpoint, the code execution will be paused whenever it reaches that point.
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The following image shows the state of `VS code` when code execution is paused
    at the breakpoint:'
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![screenshot of VS code debugger](images/module_11----lesson_11.04----public----assets----vscode-debugger.png)'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: screenshot of `VS code` debugger
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: You can see the debugger controls at the top, which works similarly to the debugger
    controls in the browser. The highlighted line shows the point where the code execution
    paused, and there is a call stack and the variables in the current scope in the
    left sidebar. We can advance the debugger forward or resume it using the debugger
    controls and see the flow of execution and values of different variables in the
    scope to debug our code.
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你可以在顶部看到调试器控制，这与浏览器中的调试器控制类似。高亮显示的行表示代码执行暂停的点，左侧边栏中有调用栈和当前作用域内的变量。我们可以使用调试器控制向前推进调试器或恢复它，并查看执行流程及作用域内不同变量的值，以调试我们的代码。
- en: 'Further reading:'
  id: totrans-66
  prefs:
  - PREF_H4
  stylish: true
  type: TYPE_NORMAL
  zh: 进一步阅读：
- en: 'There is a lot more that you can do with the debugger in `VS Code`. The “launch.json”
    file that we created manually can be created automatically by `VS Code` with the
    click of a button. This and other things possible with the `VS Code` debugger
    are explained in the `VS Code` documentation:'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在`VS Code`中，你可以用调试器做很多事情。我们手动创建的“launch.json”文件可以通过`VS Code`一键自动生成。关于这一点以及`VS
    Code`调试器的其他功能在`VS Code`文档中都有说明：
- en: '[Debugging (VS Code docs)](https://code.visualstudio.com/docs/editor/debugging)'
  id: totrans-68
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '[调试（VS Code 文档）](https://code.visualstudio.com/docs/editor/debugging)'
