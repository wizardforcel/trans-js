- en: Debugging JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Debugging is the process of finding and fixing problems or errors in code. Most
    software developers, if not all, spend more time debugging code than writing it.
    Therefore, debugging is a must-have skill for any software developer. It is impossible
    to write bug-free code, so learning to debug your own or someone else’s code effectively
    can greatly enhance your productivity as a software developer. We can’t escape
    debugging as software developers, so we might as well learn to do it effectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this module, we will learn different ways to debug JavaScript code. Every
    JavaScript developer uses the `console.log` and `alert` functions to debug their
    code, and it is fine to do so, but there are other ways to debug JavaScript. The
    goal of this module is to introduce the following three ways that can help us
    debug JavaScript code effectively:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the `debugger` statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using breakpoints in browser developer tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using VS Code debugger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: :::note
  prefs: []
  type: TYPE_NORMAL
- en: The debugging strategies mentioned above depend on the [debugger](https://en.wikipedia.org/wiki/Debugger)
    to help us debug our code effectively.
  prefs: []
  type: TYPE_NORMAL
- en: ':::'
  prefs: []
  type: TYPE_NORMAL
- en: The next few lessons introduce each of the above-mentioned methods.
  prefs: []
  type: TYPE_NORMAL
- en: The `debugger` statement allows us to set up a point in our code where the debugger
    can pause the execution of our code. This is like setting up breakpoints in our
    code where the code execution can be paused, allowing us to inspect the values
    of different variables in our code.
  prefs: []
  type: TYPE_NORMAL
- en: Run the following code example in the browser and enter the value “18”. The
    code below works fine but gives incorrect output for the value “18”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s a Replit of the above code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: <ReplitEmbed src=”https://replit.com/@newlineauthors/debugger-statement-example1”
    />
  prefs: []
  type: TYPE_NORMAL
- en: :::info
  prefs: []
  type: TYPE_NORMAL
- en: You can open the above code example in the browser using the VS Code’s [live
    server](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer)
    extension.
  prefs: []
  type: TYPE_NORMAL
- en: ':::'
  prefs: []
  type: TYPE_NORMAL
- en: The value “18” is a valid value, but we get “invalid age value provided” as
    an output. Why is that? Let us debug that using the `debugger` statement.
  prefs: []
  type: TYPE_NORMAL
- en: :::note
  prefs: []
  type: TYPE_NORMAL
- en: The Firefox browser was used to show different debugging strategies in this
    module. You can follow along using Firefox, Microsoft Edge, or the Chrome browser.
  prefs: []
  type: TYPE_NORMAL
- en: ':::'
  prefs: []
  type: TYPE_NORMAL
- en: You might have noticed the `debugger` statement already added to the code. It
    is only needed when debugging the code and can be removed after you’re done debugging
    the code. But it didn’t do anything in the code; our code didn’t pause at the
    `debugger` statement. Why is that? For the `debugger` statement to pause the code
    execution, we need to have the browser developer tools opened. Just open the [browser’s
    developer tools](https://balsamiq.com/support/faqs/browserconsole/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once opened, refresh the browser window, and you will notice the paused code
    execution, as shown in the image below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![screenshot of code paused on debugger statement](images/module_11----lesson_11.02----public----assets----debugger-screenshot.png)'
  prefs: []
  type: TYPE_IMG
- en: screenshot of code paused on debugger statement
  prefs: []
  type: TYPE_NORMAL
- en: ':::info You might need to drag the developer tools window to increase its width
    in order to match the layout shown in the image above. The narrow width of the
    window can show a different layout of the different areas highlighted in the image
    above. :::'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the code execution is paused, we can focus on two areas of the debugger:
    the debugger controls and the values of different variables in the current scope;
    both areas are highlighted in the image above.'
  prefs: []
  type: TYPE_NORMAL
- en: The debugger controls allow us to execute the code one line at a time, making
    it easier for us to see how each line of code executes and how it affects the
    values of different variables.
  prefs: []
  type: TYPE_NORMAL
- en: ':::info You can hover over each button in the debugger controls to know what
    it does. :::'
  prefs: []
  type: TYPE_NORMAL
- en: You can also see the call stack above the “Scopes” section in the image above.
    This allows us to view how the current function was called. We can also hover
    over different variables in our code to view their values.
  prefs: []
  type: TYPE_NORMAL
- en: ':::info You can change the values of different variables in the “Scopes” section
    by double-clicking on the value. This allows us to see how our code behaves if
    the values of variables in the current scope are changed. :::'
  prefs: []
  type: TYPE_NORMAL
- en: Let us debug why our code doesn’t work when the value is “18”. Note the value
    of the `age` variable (hover over it or look at the “Scopes” section); you will
    see that its value is a string and not a number. That means the `prompt` function,
    which takes the user’s input, returns a string. So when we get to the first `if`
    condition, i.e., `age === 18`, it doesn’t evaluate to `true`. Can you guess why?
    Because comparing a string with a number using the triple equals (strict equality)
    operator always evaluates to `false` and you probably knew that, but if you didn’t,
    the debugger helped you know that the value of `age` is a string and you are comparing
    it to a number, so it did help you better understand your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we know the problem, we can fix it by converting `age` to a number
    before comparing it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This was a simple example to show you how the `debugger` statement can be used
    to debug our code. The debuggers built into browsers are really powerful, and
    it is worth exploring every feature of them to enhance your debugging skills.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous lesson, we used the `debugger` statement to pause the code execution
    and debug our code. There’s another way to pause the code execution, and that
    is by using breakpoints. A breakpoint acts just like the `debugger` statement,
    but the difference is that we don’t have to write any special keywords in our
    code. Instead, we open the JavaScript code in the browser’s developer tools and
    set breakpoints in the browser’s developer tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the previous lesson, our JavaScript code was opened in the “Debugger”
    tab. In Chrome, the corresponding tab is named “Sources”. The overall functionality
    of the debugger is more or less the same for both browsers. The following is a
    screenshot of the “Sources” tab in the Chrome browser containing our JavaScript
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![screenshot of sources tab in chrome dev tools](images/module_11----lesson_11.03----public----assets----chrome-sources-tab-screenshot.png)'
  prefs: []
  type: TYPE_IMG
- en: screenshot of sources tab in chrome dev tools
  prefs: []
  type: TYPE_NORMAL
- en: Now, instead of using the `debugger` statement to pause the code execution,
    let us use the breakpoints. We will use the same example as in the previous lesson
    but without the `debugger` statement. To set breakpoints, we first need to open
    our code in the browser, open the developer tools, and open the “Sources” or “Debugger”
    tab if you are using the Firefox browser or Chrome (other browsers will also have
    a similar tab).
  prefs: []
  type: TYPE_NORMAL
- en: :::info
  prefs: []
  type: TYPE_NORMAL
- en: If you are following along from the previous lesson, you probably already have
    the code opened in the browser; if not, you can open the code example in the previous
    lesson in the browser. You can use VS Code’s [live server](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer)
    extension to open the code example.
  prefs: []
  type: TYPE_NORMAL
- en: ':::'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the code is opened in the browser’s developer tools, setting up a breakpoint
    is as simple as clicking on the line number in the code. The following image shows
    two breakpoints set up in the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![screenshot of breakpoints in browser dev tools](images/module_11----lesson_11.03----public----assets----breakpoint-screenshot.png)'
  prefs: []
  type: TYPE_IMG
- en: screenshot of breakpoints in browser dev tools
  prefs: []
  type: TYPE_NORMAL
- en: Just click on the line number at which you want to set the breakpoint and refresh
    the browser window. Just like with the `debugger` statement, when the execution
    reaches the breakpoint set in our code, the code execution will be paused, and
    from there on, we can use the different features provided by the browser debugger
    to debug our code.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Debug JavaScript (chrome devtools docs)](https://developer.chrome.com/docs/devtools/javascript/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio Code (VS Code) is one of the most commonly used editors these
    days due to the features and flexibility that it provides with the help of the
    many extensions that are available to use with it. Among the many features that
    VS Code provides, one is the built-in debugger that allows us to debug our code
    within VS Code. Apart from the built-in debugger, there are many extensions available
    for debugging code written in different languages.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use VS Code to debug our code, open the same code example in VS Code that
    we have been working on within the last two lessons. Once opened, create a folder
    named “.vscode” in the folder containing our code (HTML and JavaScript files).
    Inside the “.vscode” folder, create a file named “launch.json” and paste the following
    JSON into this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we can run the debugger, we need to setup breakpoints. We can either
    use the `debugger` statement in the code or set breakpoints by clicking on the
    line number in the JavaScript code file opened in VS Code. The following image
    shows a breakpoint added in the JavaScript code file that is opened in VS Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![screenshot of breakpoint added in VS Code](images/module_11----lesson_11.04----public----assets----vscode-breakpoint.png)'
  prefs: []
  type: TYPE_IMG
- en: screenshot of breakpoint added in VS Code
  prefs: []
  type: TYPE_NORMAL
- en: The red dot in the image above is a breakpoint added by clicking on line number
    5.
  prefs: []
  type: TYPE_NORMAL
- en: 'After this, open the “Run and Debug” option in VS Code, as shown in the image
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![screenshot of Run and Debug option in VS Code](images/module_11----lesson_11.04----public----assets----run-debug-option-vscode.png)'
  prefs: []
  type: TYPE_IMG
- en: screenshot of Run and Debug option in VS Code
  prefs: []
  type: TYPE_NORMAL
- en: Once the “Run and Debug” window opens, as shown in the image above, click on
    the green play button at the top in the image above. This will open up the Chrome
    browser, and the debugger will pause the code execution when it reaches the breakpoint.
    As shown in the image above, the breakpoint is added at line 5, so the debugger
    will pause the execution after taking user input. Depending on where you added
    the breakpoint, the code execution will be paused whenever it reaches that point.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows the state of VS code when code execution is paused
    at the breakpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![screenshot of VS code debugger](images/module_11----lesson_11.04----public----assets----vscode-debugger.png)'
  prefs: []
  type: TYPE_IMG
- en: screenshot of VS code debugger
  prefs: []
  type: TYPE_NORMAL
- en: You can see the debugger controls at the top, which works similarly to the debugger
    controls in the browser. The highlighted line shows the point where the code execution
    paused, and there is a call stack and the variables in the current scope in the
    left sidebar. We can advance the debugger forward or resume it using the debugger
    controls and see the flow of execution and values of different variables in the
    scope to debug our code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Further reading:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There is a lot more that you can do with the debugger in VS Code. The “launch.json”
    file that we created manually can be created automatically by VS Code with the
    click of a button. This and other things possible with the VS Code debugger are
    explained in the VS Code documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Debugging (VS Code docs)](https://code.visualstudio.com/docs/editor/debugging)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
