- en: 'Chapter 4: JavaScript Functions'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：JavaScript 函数
- en: In Chapter 3, we explored control flow statements in JavaScript, which allowed
    us to make decisions and repeat code blocks. Now, let's dive into JavaScript functions,
    which are an essential part of building modular and reusable code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三章中，我们探讨了 JavaScript 中的控制流语句，它们使我们能够做出决策并重复代码块。现在，让我们深入了解 JavaScript 函数，它们是构建模块化和可重用代码的关键部分。
- en: 4.1 Introduction to Functions
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.1 函数简介
- en: A function in JavaScript is a block of code that performs a specific task or
    calculates a value. Functions allow us to organize our code into logical and reusable
    units. They help improve code readability, promote code reusability, and make
    our programs more manageable.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中的函数是执行特定任务或计算某个值的代码块。函数使我们能够将代码组织成逻辑清晰、可重用的单元。它们有助于提高代码的可读性，促进代码重用，并使我们的程序更加易于管理。
- en: 4.2 Function Declaration
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.2 函数声明
- en: 'In JavaScript, we can declare a function using the `function` keyword followed
    by the function name, a list of parameters (optional), and the code block enclosed
    in curly braces. Here''s the basic syntax of a function declaration:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，我们可以使用 `function` 关键字声明一个函数，后面跟上函数名、参数列表（可选）以及用大括号括起来的代码块。以下是函数声明的基本语法：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s define a simple function that calculates the square of a number:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一个简单的函数，用来计算一个数字的平方：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, we declare a function called `square` that takes a parameter
    named `number`. Inside the function, we calculate the square of the `number` by
    multiplying it by itself and assign the result to a variable named `result`. Finally,
    we use the `return` statement to return the calculated result.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们声明了一个名为 `square` 的函数，它接受一个名为 `number` 的参数。在函数内部，我们通过将 `number` 乘以自身来计算
    `number` 的平方，并将结果赋值给一个名为 `result` 的变量。最后，我们使用 `return` 语句返回计算结果。
- en: 4.3 Function Invocation
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.3 函数调用
- en: 'To execute a function and get the desired result, we need to invoke or call
    the function by using its name followed by parentheses `()` and passing the necessary
    arguments (if any). Here''s an example of invoking the `square` function:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行一个函数并获得期望的结果，我们需要通过使用函数名后跟圆括号 `()` 并传递必要的参数（如果有的话）来调用或执行该函数。以下是调用 `square`
    函数的示例：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, we assign the value `5` to the variable `number`. Then, we
    invoke the `square` function by passing `number` as an argument. The returned
    result, `25`, is assigned to the variable `squaredNumber`, which we then log to
    the console.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将值 `5` 赋给变量 `number`。然后，我们通过传递 `number` 作为参数来调用 `square` 函数。返回的结果 `25`
    被赋值给变量 `squaredNumber`，然后我们将其输出到控制台。
- en: 4.4 Function Parameters and Arguments
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.4 函数参数和参数值
- en: 'Functions can accept parameters, which act as placeholders for values that
    are passed to the function during invocation. Parameters allow functions to be
    flexible and work with different values. When we invoke a function, we pass arguments,
    which are the actual values that replace the function parameters. Let''s modify
    our `square` function to take advantage of parameters:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 函数可以接受参数，参数充当在调用函数时传递给函数的值的占位符。参数使得函数具有灵活性，可以处理不同的值。当我们调用一个函数时，我们传递实际的值（即参数的值），这些值替代了函数中的参数。让我们修改我们的`square`函数，利用参数的优势：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example, the `number` parameter in the function declaration acts as
    a placeholder for the value we pass when invoking the function (`5` in this case).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，函数声明中的`number`参数充当我们在调用函数时传递的值的占位符（在此情况下是`5`）。
- en: 4.5 Function Return Statement
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.5 函数返回语句
- en: 'The `return` statement in a function is used to specify the value that the
    function should return. It marks the end of the function execution and sends the
    specified value back to the caller. Let''s modify our `square` function to include
    a return statement:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 函数中的`return`语句用于指定函数应返回的值。它标志着函数执行的结束，并将指定的值返回给调用者。让我们修改我们的`square`函数，加入返回语句：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this updated version, the `return` statement directly returns the calculated
    result without using an intermediate variable.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个更新版本中，`return`语句直接返回计算结果，而无需使用中间变量。
- en: 4.6 Function Scope
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.6 函数作用域
- en: 'Functions in JavaScript have their own scope. Variables declared inside a function
    are locally scoped, meaning they can only be accessed within the function. Conversely,
    variables declared outside of any function have global scope and can be accessed
    from anywhere in the code. Let''s examine the concept of function scope with an
    example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的函数有它们自己的作用域。函数内部声明的变量是局部作用域的，这意味着它们只能在函数内部访问。相反，函数外部声明的变量具有全局作用域，可以在代码的任何地方访问。让我们通过一个例子来检查函数作用域的概念：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this example, we have a global variable named `globalVariable` that is accessible
    from anywhere in the code. Inside the `myFunction` function, we declare a local
    variable named `localVariable`, which is only accessible within the function itself.
    When we call `myFunction`, it prints the value of `localVariable` and `globalVariable`
    correctly. However, if we try to access `localVariable` outside the function,
    an error will occur because it is not defined in the global scope.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们有一个名为`globalVariable`的全局变量，它可以在代码的任何地方访问。在`myFunction`函数内部，我们声明了一个名为`localVariable`的局部变量，它只能在函数内部访问。当我们调用`myFunction`时，它会正确地打印`localVariable`和`globalVariable`的值。然而，如果我们尝试在函数外部访问`localVariable`，将会发生错误，因为它没有在全局作用域中定义。
- en: 4.7 Function Expressions
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.7 函数表达式
- en: 'In addition to function declarations, JavaScript also supports function expressions.
    A function expression involves assigning a function to a variable, making it an
    object that can be passed around and invoked. Here''s an example of a function
    expression:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除了函数声明，JavaScript 还支持函数表达式。函数表达式涉及将一个函数赋值给变量，使其成为一个可以传递和调用的对象。以下是一个函数表达式的示例：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this example, we create a function expression by assigning an anonymous function
    to the variable `greet`. The function takes a `name` parameter and logs a greeting
    to the console. We can then invoke the function by calling `greet` and passing
    an argument.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们通过将一个匿名函数赋值给变量 `greet` 来创建一个函数表达式。该函数接受一个 `name` 参数并将问候语输出到控制台。然后我们可以通过调用
    `greet` 并传递参数来执行该函数。
- en: 4.8 Arrow Functions
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.8 箭头函数
- en: 'ES6 introduced arrow functions, which provide a concise syntax for writing
    functions. Arrow functions are especially useful for writing shorter and more
    readable code. Here''s an example of an arrow function:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: ES6 引入了箭头函数，它提供了一种简洁的语法来编写函数。箭头函数特别适用于编写简短且可读性更强的代码。以下是一个箭头函数的示例：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this example, we define an arrow function called `double` that takes a `number`
    parameter and returns the doubled value of that number. The arrow function syntax
    `(number) => number * 2` represents a compact way of writing the function.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们定义了一个名为 `double` 的箭头函数，该函数接受一个 `number` 参数并返回该数字的双倍值。箭头函数语法 `(number)
    => number * 2` 代表了一种简洁的函数编写方式。
- en: 4.9 Conclusion
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 4.9 结论
- en: In this chapter, we explored JavaScript functions, which allow us to organize
    code into reusable blocks and perform specific tasks. We learned about function
    declaration, invocation, parameters, return statements, function scope, function
    expressions, and arrow functions. Functions are a fundamental building block of
    JavaScript programming, enabling us to write modular, reusable, and efficient
    code.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 JavaScript 函数，它允许我们将代码组织成可重用的块并执行特定任务。我们学习了函数声明、调用、参数、返回语句、函数作用域、函数表达式和箭头函数。函数是
    JavaScript 编程的基础构建块，使我们能够编写模块化、可重用和高效的代码。
- en: In the next chapter, we will delve into JavaScript arrays, a powerful data structure
    that allows us to store and manipulate collections of elements. Get ready to explore
    the world of arrays and unleash their full potential!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将深入探讨 JavaScript 数组，这是一个强大的数据结构，允许我们存储和操作元素集合。准备好探索数组的世界，释放它们的全部潜力吧！
