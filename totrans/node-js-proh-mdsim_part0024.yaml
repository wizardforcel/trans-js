- en: 'Chapter 4: JavaScript Functions'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Chapter 3, we explored control flow statements in JavaScript, which allowed
    us to make decisions and repeat code blocks. Now, let's dive into JavaScript functions,
    which are an essential part of building modular and reusable code.
  prefs: []
  type: TYPE_NORMAL
- en: 4.1 Introduction to Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A function in JavaScript is a block of code that performs a specific task or
    calculates a value. Functions allow us to organize our code into logical and reusable
    units. They help improve code readability, promote code reusability, and make
    our programs more manageable.
  prefs: []
  type: TYPE_NORMAL
- en: 4.2 Function Declaration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In JavaScript, we can declare a function using the `function` keyword followed
    by the function name, a list of parameters (optional), and the code block enclosed
    in curly braces. Here''s the basic syntax of a function declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s define a simple function that calculates the square of a number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we declare a function called `square` that takes a parameter
    named `number`. Inside the function, we calculate the square of the `number` by
    multiplying it by itself and assign the result to a variable named `result`. Finally,
    we use the `return` statement to return the calculated result.
  prefs: []
  type: TYPE_NORMAL
- en: 4.3 Function Invocation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To execute a function and get the desired result, we need to invoke or call
    the function by using its name followed by parentheses `()` and passing the necessary
    arguments (if any). Here''s an example of invoking the `square` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we assign the value `5` to the variable `number`. Then, we
    invoke the `square` function by passing `number` as an argument. The returned
    result, `25`, is assigned to the variable `squaredNumber`, which we then log to
    the console.
  prefs: []
  type: TYPE_NORMAL
- en: 4.4 Function Parameters and Arguments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Functions can accept parameters, which act as placeholders for values that
    are passed to the function during invocation. Parameters allow functions to be
    flexible and work with different values. When we invoke a function, we pass arguments,
    which are the actual values that replace the function parameters. Let''s modify
    our `square` function to take advantage of parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `number` parameter in the function declaration acts as
    a placeholder for the value we pass when invoking the function (`5` in this case).
  prefs: []
  type: TYPE_NORMAL
- en: 4.5 Function Return Statement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `return` statement in a function is used to specify the value that the
    function should return. It marks the end of the function execution and sends the
    specified value back to the caller. Let''s modify our `square` function to include
    a return statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this updated version, the `return` statement directly returns the calculated
    result without using an intermediate variable.
  prefs: []
  type: TYPE_NORMAL
- en: 4.6 Function Scope
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Functions in JavaScript have their own scope. Variables declared inside a function
    are locally scoped, meaning they can only be accessed within the function. Conversely,
    variables declared outside of any function have global scope and can be accessed
    from anywhere in the code. Let''s examine the concept of function scope with an
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we have a global variable named `globalVariable` that is accessible
    from anywhere in the code. Inside the `myFunction` function, we declare a local
    variable named `localVariable`, which is only accessible within the function itself.
    When we call `myFunction`, it prints the value of `localVariable` and `globalVariable`
    correctly. However, if we try to access `localVariable` outside the function,
    an error will occur because it is not defined in the global scope.
  prefs: []
  type: TYPE_NORMAL
- en: 4.7 Function Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In addition to function declarations, JavaScript also supports function expressions.
    A function expression involves assigning a function to a variable, making it an
    object that can be passed around and invoked. Here''s an example of a function
    expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we create a function expression by assigning an anonymous function
    to the variable `greet`. The function takes a `name` parameter and logs a greeting
    to the console. We can then invoke the function by calling `greet` and passing
    an argument.
  prefs: []
  type: TYPE_NORMAL
- en: 4.8 Arrow Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ES6 introduced arrow functions, which provide a concise syntax for writing
    functions. Arrow functions are especially useful for writing shorter and more
    readable code. Here''s an example of an arrow function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we define an arrow function called `double` that takes a `number`
    parameter and returns the doubled value of that number. The arrow function syntax
    `(number) => number * 2` represents a compact way of writing the function.
  prefs: []
  type: TYPE_NORMAL
- en: 4.9 Conclusion
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we explored JavaScript functions, which allow us to organize
    code into reusable blocks and perform specific tasks. We learned about function
    declaration, invocation, parameters, return statements, function scope, function
    expressions, and arrow functions. Functions are a fundamental building block of
    JavaScript programming, enabling us to write modular, reusable, and efficient
    code.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will delve into JavaScript arrays, a powerful data structure
    that allows us to store and manipulate collections of elements. Get ready to explore
    the world of arrays and unleash their full potential!
  prefs: []
  type: TYPE_NORMAL
