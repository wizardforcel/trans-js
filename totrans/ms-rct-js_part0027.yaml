- en: 'Chapter 6: Arrays and Array Methods'
  prefs:
  - PREF_H1
  - PREF_H1
  type: TYPE_NORMAL
- en: In Chapter 5, we explored objects and prototypes, which allowed us to represent
    and organize data and behavior effectively. Now, we will dive into arrays, another
    essential data structure in JavaScript. Arrays are collections of elements that
    can hold different data types, enabling us to work with lists of items efficiently.
    JavaScript provides a variety of array methods that make it easy to manipulate
    and transform array data. Understanding arrays and their methods is crucial for
    becoming a proficient JavaScript developer. Let's dive in and explore the world
    of arrays and array methods!
  prefs: []
  type: TYPE_NORMAL
- en: 'Arrays: Collections of Elements'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In JavaScript, arrays are used to store multiple values in a single variable.
    Arrays can hold elements of different data types, including numbers, strings,
    objects, and even other arrays. Arrays are versatile and provide numerous ways
    to access, modify, and manipulate their elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating Arrays:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Arrays can be created using array literals, denoted by square brackets `[]`,
    or the `Array` constructor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In Example 1, we create arrays `fruits` and `numbers` using both array literals
    and the `Array` constructor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Accessing Array Elements:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Array elements can be accessed using their index, with the index starting from
    0 for the first element.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In Example 2, we access the elements of the `fruits` array using their respective
    indices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modifying Array Elements:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Array elements can be modified using their index.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In Example 3, we modify the second element of the `fruits` array from "banana"
    to "grape".
  prefs: []
  type: TYPE_NORMAL
- en: 'Array Length:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `length` property of an array gives the number of elements in the array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In Example 4, we get the length of the `fruits` array, which is 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'Iterating through Arrays:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Arrays can be iterated using loops, such as `for` loop or `for...of` loop.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In Example 5, we use a `for` loop to iterate through the `fruits` array, while
    in Example 6, we use a `for...of` loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Array Methods: Manipulating Arrays'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScript provides a variety of built-in array methods that allow us to manipulate
    array elements easily. These methods enable us to add, remove, search, and modify
    array elements efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding Elements:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '- `push()`: Adds one or more elements to the end of the array.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '- `unshift()`: Adds one or more elements to the beginning of the array.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In Examples 7 and 8, we use `push()` and `unshift()` to add elements to the
    `fruits` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Removing Elements:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '- `pop()`: Removes the last element from the array and returns it.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '- `shift()`: Removes the first element from the array and returns it.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In Examples 9 and 10, we use `pop()` and `shift()` to remove elements from the
    `fruits` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modifying Elements:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '- `splice()`: Adds or removes elements from the array at a specific index.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In Example 11, we use `splice()` to remove one element at index 1 and add "grape"
    and "kiwi" at that index.
  prefs: []
  type: TYPE_NORMAL
- en: 'Searching for Elements:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '- `indexOf()`: Returns the index of the first occurrence of a specified element
    in the array.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '- `lastIndexOf()`: Returns the index of the last occurrence of a specified
    element in the array.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In Examples 12 and 13, we use `indexOf()` and `lastIndexOf()` to search for
    elements in the `fruits` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Slicing Arrays:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '- `slice()`: Returns a new array containing elements from the original array,
    specified by a start and end index (end index not included).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In Example 14, we use `slice()` to create a new array containing elements from
    index 1 to index 3 (end index not included).
  prefs: []
  type: TYPE_NORMAL
- en: 'Concatenating Arrays:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '- `concat()`: Concatenates two or more arrays, returning a new array.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In Example 15, we use `concat()` to combine the `fruits` and `vegetables` arrays
    into a new array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Mapping Array Elements:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '- `map()`: Creates a new array with the results of calling a provided function
    on every element in the array.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In Example 16, we use `map()` to create a new array containing the square of
    each element in the `numbers` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Filtering Array Elements:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '- `filter()`: Creates a new array with all elements that pass the test implemented
    by the provided function.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In Example 17, we use `filter()` to create a new array containing only the even
    numbers from the `numbers` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Reducing Array Elements:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '- `reduce()`: Executes a reducer function on each element of the array, resulting
    in a single output value.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In Example 18, we use `reduce()` to calculate the sum of all elements in the
    `numbers` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Conclusion:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we explored arrays and array methods in JavaScript. Arrays
    are collections of elements that can hold different data types, providing a versatile
    way to work with lists of items. We learned how to create arrays, access and modify
    their elements, and iterate through them using loops. Additionally, we explored
    various array methods, including adding and removing elements, searching for elements,
    slicing arrays, concatenating arrays, mapping and filtering array elements, and
    reducing array elements.
  prefs: []
  type: TYPE_NORMAL
- en: Arrays and array methods are powerful tools in JavaScript that allow us to handle
    and manipulate data efficiently. With arrays, we can organize data in structured
    lists, making it easier to work with collections of items. The array methods enable
    us to perform complex operations on arrays and transform data to meet our specific
    needs.
  prefs: []
  type: TYPE_NORMAL
