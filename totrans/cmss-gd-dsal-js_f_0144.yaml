- en: Trees
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: You were introduced to node-based data structures in the previous chapter with
    linked lists. In a classic linked list, each node contains a link that connects
    the node to a single other node. A tree is also a node-based data structure, but
    within a tree each node can have links to multiple nodes.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here is a visualization of a simple tree:'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/binary_trees/bst_1.png`](images/binary_trees/bst_1.png)'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'In this example, each node has links that lead to two other nodes. For the
    sake of simplicity, we can represent this tree visually without showing all the
    memory addresses:'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/binary_trees/bst_2.png`](images/binary_trees/bst_2.png)'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'Trees come with their own unique nomenclature:'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The uppermost node (in our example, `"j"`) is called the root. Yes, in our picture
    the root is at the top of the tree; it’s how trees are typically depicted.
  id: totrans-7
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: In our example, we’d say that `"j"` is a parent to `"m"` and `"b"` . Conversely,
    `"m"` and `"b"` are children of `"j"` . Similarly, `"m"` is a parent of `"q"`
    and `"z"` , and `"q"` and `"z"` are children of `"m"` .
  id: totrans-8
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: As in a family tree, a node can have descendants and ancestors. A node’s descendants
    are all the nodes that stem from a node, while a node’s ancestors are all the
    nodes that it stems from. In our example, `"j"` is the ancestor of all the other
    nodes in the tree, and all the other nodes are, therefore, descendants of `"j"`
    .
  id: totrans-9
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 'Trees are said to have levels. Each level is a row within the tree. Our example
    tree has three levels:'
  id: totrans-10
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/binary_trees/bst_3.png`](images/binary_trees/bst_3.png)'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: One property of a tree is how balanced it is. A tree is balanced when its nodes’
    subtrees have the same number of nodes in it.
  id: totrans-12
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: For instance, the preceding tree is said to be perfectly balanced. If you look
    at each node, its two subtrees have the same number of nodes. The root node (`"j"`)
    has two subtrees, which each contain three nodes. You’ll see that the same is
    also true for every node in the tree. For example, the node (`"m"`) also has two
    subtrees where the two subtrees each contain one node.
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The following tree, on the other hand, is imbalanced:'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/binary_trees/imbalanced_tree.png`](images/binary_trees/imbalanced_tree.png)'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: As you can see, the root’s right subtree contains more nodes than its left subtree,
    causing an imbalance.
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
