- en: 有序数组
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: 有序数组几乎与我们在上一章看到的经典数组相同。唯一的区别是有序数组要求值始终保持——没错——有序；也就是说，每次添加一个值时，它都被放置在适当的单元格中，以保持数组中的值排序。
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 例如，我们取数组`[3, 17, 80, 202]`：
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/binary_search/binary_search_1.png](images/binary_search/binary_search_1.png)'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 假设我们想将值`75`插入数组。如果这个数组是经典数组，我们可以将`75`插入到末尾，如下所示：
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/binary_search/binary_search_2.png](images/binary_search/binary_search_2.png)'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 正如我们在上一章看到的，计算机可以在一步之内完成这个。
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 另一方面，如果这是一个有序数组，我们就不得不将`75`插入到正确的位置，以使值保持升序：
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/binary_search/binary_search_3.png](images/binary_search/binary_search_3.png)'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 现在，这说起来容易做起来难。计算机不能简单地将`75`一次性放入正确的插槽，因为它首先需要找到插入`75`的正确位置，然后移动其他值以腾出空间。让我们逐步解析这个过程。
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 让我们从原始有序数组重新开始：
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/binary_search/binary_search_1.png](images/binary_search/binary_search_1.png)'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 第1步：我们检查索引`0`的值，以确定我们要插入的值`75`应该放在左边还是右边：
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/binary_search/binary_search_4.png](images/binary_search/binary_search_4.png)'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 因为`75`大于`3`，我们知道`75`将被插入到`3`的右侧。然而，我们尚不知道它应该插入哪个单元格，因此我们需要检查下一个单元格。
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 我们将这种步骤称为比较，其中我们将要插入的值与已存在于有序数组中的数字进行比较。
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 第2步：我们检查下一个单元格的值：
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/binary_search/binary_search_5.png](images/binary_search/binary_search_5.png)'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 由于`75`大于`17`，我们需要继续前进。
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 第3步：我们检查下一个单元格的值：
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/binary_search/binary_search_6.png](images/binary_search/binary_search_6.png)'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 我们遇到了值`80`，它大于我们希望插入的`75`。由于我们已经到达第一个大于`75`的值，我们可以得出结论，`75`必须放在`80`的左侧，以保持这个有序数组的顺序。为此，我们需要移动数据以为`75`腾出空间。
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 第4步：将最后一个值向右移动：
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/binary_search/binary_search_7.png](images/binary_search/binary_search_7.png)'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 第5步：将倒数第二个值向右移动：
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/binary_search/binary_search_8.png](images/binary_search/binary_search_8.png)'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 第6步：我们终于可以将`75`插入到正确的位置：
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/binary_search/binary_search_9.png`](images/binary_search/binary_search_9.png)'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: It emerges that when inserting into an ordered array, we need to always conduct
    a search before the actual insertion to determine the correct spot for the insertion.
    This is one difference in performance between a classic array and an ordered array.
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: We can see in this example that there were initially four elements and that
    insertion took six steps. In terms of `N`, we’d say that for `N` elements in an
    ordered array, the insertion took `N + 2` steps in total.
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Interestingly, the number of steps for insertion remains similar no matter where
    in the ordered array our new value ends up. If our value ends up toward the beginning
    of the ordered array, we have fewer comparisons and more shifts. If our value
    ends up toward the end, we get more comparisons but fewer shifts. The fewest steps
    occur when the new value winds up at the very end, since no shifts are necessary.
    In this case, we take `N` steps to compare the new value with all `N` existing
    values, plus one step for the insertion itself, yielding a total of `N + 1` steps.
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: While insertion is less efficient for an ordered array than for a classic array,
    the ordered array has a secret superpower when it comes to searching.
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
