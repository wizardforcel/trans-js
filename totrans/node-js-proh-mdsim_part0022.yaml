- en: 'Chapter 2: JavaScript Syntax, Operators, and Expressions'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Chapter 1, we gained an understanding of the basics of JavaScript, including
    its history, role in web development, and how to set up a development environment.
    Now, let's dive deeper into JavaScript syntax, operators, and expressions. These
    foundational concepts will pave the way for writing more complex and interactive
    JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1 JavaScript Syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Syntax refers to the set of rules that govern how code should be written in
    a programming language. Proper syntax ensures that the code is structured correctly
    and can be understood by both humans and machines. Let's explore some essential
    aspects of JavaScript syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1.1 Statements and Semicolons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In JavaScript, statements are the building blocks of code. A statement is an
    instruction that performs a specific action. Each statement in JavaScript ends
    with a semicolon (;), indicating the completion of the statement. While semicolons
    are not always mandatory in JavaScript, it is considered good practice to use
    them consistently to avoid potential issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following statements assign values to variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 2.1.2 Comments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Comments are used to add explanatory notes within the code. They are ignored
    by the JavaScript engine and are intended for developers to provide context and
    make their code more readable. There are two types of comments in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '- Single-line comments: denoted by two forward slashes (//). Anything after
    the // is considered a comment and will not be executed by the browser.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '- Multi-line comments: enclosed between /* and */. Multi-line comments can
    span multiple lines and are useful for providing longer explanations or commenting
    out sections of code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 2.2 JavaScript Operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Operators in JavaScript are symbols that perform operations on operands (values
    or variables). They allow us to perform mathematical computations, compare values,
    assign values, and more. Let's explore some commonly used operators in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2.1 Arithmetic Operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Arithmetic operators are used to perform mathematical calculations. JavaScript
    includes the following arithmetic operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '- Addition (+): Adds two numbers or concatenates two strings.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Subtraction (-): Subtracts one number from another.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Multiplication (*): Multiplies two numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Division (/): Divides one number by another.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Modulus (%): Returns the remainder after division.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Increment (++): Increments a value by 1.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Decrement (--): Decrements a value by 1.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example demonstrating the use of arithmetic operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 2.2.2 Assignment Operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Assignment operators are used to assign values to variables. They combine the
    assignment (=) operator with other arithmetic or logical operators. The most common
    assignment operators are:'
  prefs: []
  type: TYPE_NORMAL
- en: '- `=`: Assigns a value to a variable.'
  prefs: []
  type: TYPE_NORMAL
- en: '- `+=`: Adds a value to the current value of a variable and assigns the result.'
  prefs: []
  type: TYPE_NORMAL
- en: '- `-=`: Subtracts a value from the current value of a variable and assigns
    the result.'
  prefs: []
  type: TYPE_NORMAL
- en: '- `*=`: Multiplies the current value of a variable by a value and assigns the
    result.'
  prefs: []
  type: TYPE_NORMAL
- en: '- `/=`: Divides the current value of a variable by a value and assigns the
    result.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example illustrating the use of assignment operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 2.2.3 Comparison Operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Comparison operators are used to compare values and return a Boolean result
    (true or false). They are commonly used in conditional statements and loops. Here
    are some of the comparison operators in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '- `==`: Checks if two values are equal.'
  prefs: []
  type: TYPE_NORMAL
- en: '- `!=`: Checks if two values are not equal.'
  prefs: []
  type: TYPE_NORMAL
- en: '- `>`: Checks if the value on the left is greater than the value on the right.'
  prefs: []
  type: TYPE_NORMAL
- en: '- `<`: Checks if the value on the left is less than the value on the right.'
  prefs: []
  type: TYPE_NORMAL
- en: '- `>=`: Checks if the value on the left is greater than or equal to the value
    on the right.'
  prefs: []
  type: TYPE_NORMAL
- en: '- `<=`: Checks if the value on the left is less than or equal to the value
    on the right.'
  prefs: []
  type: TYPE_NORMAL
- en: '- `===`: Checks if two values are strictly equal (both value and type).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example demonstrating the use of comparison operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 2.3 JavaScript Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Expressions are combinations of values, variables, and operators that produce
    a result. They can be as simple as a single value or as complex as a combination
    of multiple operators and variables. Understanding expressions is essential for
    writing dynamic and interactive JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: 2.3.1 Arithmetic Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Arithmetic expressions involve mathematical calculations using arithmetic operators.
    Here''s an example of an arithmetic expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the expression `(x + y) * 3` performs addition and multiplication
    to produce the result 21.
  prefs: []
  type: TYPE_NORMAL
- en: 2.3.2 String Concatenation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In JavaScript, the `+` operator is also used for string concatenation. It allows
    you to combine two or more strings into a single string. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the `+` operator concatenates the values of the `firstName`, a
    space character, and the `lastName` to form the full name.
  prefs: []
  type: TYPE_NORMAL
- en: 2.3.3 Logical Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Logical expressions involve logical operators (`&&`, `||`, `!`) to perform
    logical operations. They are often used in conditional statements to evaluate
    multiple conditions. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the logical expression `(x > 3) && (y < 15)` evaluates whether
    both conditions are true and returns `true`.
  prefs: []
  type: TYPE_NORMAL
- en: 2.4 Conclusion
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we delved deeper into JavaScript syntax, operators, and expressions.
    We learned about statements, semicolons, and comments, which help structure and
    document our code. We explored various types of operators, including arithmetic,
    assignment, and comparison operators, and how they can be used in JavaScript code.
    Finally, we examined expressions and how they can be used to perform mathematical
    calculations, concatenate strings, and evaluate logical conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding JavaScript syntax, operators, and expressions is crucial for writing
    effective and meaningful code. With these foundational concepts in place, you'll
    be able to tackle more complex programming tasks and build interactive applications.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore JavaScript control flow statements, such
    as conditional statements and loops. These control flow statements enable us to
    make decisions and repeat actions based on different conditions. Get ready to
    take your JavaScript skills to the next level as we dive into the world of control
    flow!
  prefs: []
  type: TYPE_NORMAL
