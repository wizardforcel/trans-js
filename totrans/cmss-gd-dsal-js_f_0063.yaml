- en: Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following exercises provide you with the opportunity to practice with optimizing
    for best- and worst-case scenarios. The solutions to these exercises are found
    in the section [​*Chapter 6*​](f_0211.xhtml#optimizing.for.optimistic.scenarios.solutions).
  prefs: []
  type: TYPE_NORMAL
- en: Use Big O notation to describe the efficiency of an algorithm that takes 3N²
    + 2N + 1 steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use Big O notation to describe the efficiency of an algorithm that takes N +
    log N steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following function checks whether an array of numbers contains a pair of
    two numbers that add up to 10.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ​  | ​**function**​ twoSum(array) { |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**for**​ (​**const**​ [indexI, i] ​**of**​ array.entries()) { |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**for**​ (​**const**​ [indexJ, j] ​**of**​ array.entries()) { |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**if**​ ((indexI !== indexJ) && (i + j === 10)) { |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**return**​ ​**true**​; |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | } |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | } |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | } |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  |  |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**return**​ ​**false**​; |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | } |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: What are the best-, average-, and worst-case scenarios? Then, express the worst-case
    scenario in terms of Big O notation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The following function returns whether or not a capital “X” is present within
    a string.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ​  | ​**function**​ containsX(string) { |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**let**​ foundX = ​**false**​; |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  |  |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**for**​ (​**const**​ ​**char**​ ​**of**​ string) { |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**if**​ (​**char**​ === ​*''X''*​) { foundX = ​**true**​; } |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | } |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**return**​ foundX; |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | } |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: What is this function’s time complexity in terms of Big O notation?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, modify the code to improve the algorithm’s efficiency for best- and average-case
    scenarios.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Copyright © 2024, The Pragmatic Bookshelf.
  prefs: []
  type: TYPE_NORMAL
