- en: © The Author(s), under exclusive license to Springer Fachmedien Wiesbaden GmbH,
    part of Springer Nature 2024J. L. ZuckarelliLearn coding with Python and JavaScript
    [https://doi.org/10.1007/978-3-658-42912-6_2](https://doi.org/10.1007/978-3-658-42912-6_2)
  prefs: []
  type: TYPE_NORMAL
- en: 2. Why Learn Programming?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Joachim L. Zuckarelli^([1](#Aff2)  )(1)München, GermanyOverview
  prefs: []
  type: TYPE_NORMAL
- en: You’ve decided to read this book, so you obviously don’t need any more convincing
    to get into programming. Nevertheless, it is worthwhile to take a clear look at
    why it makes sense to learn programming in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Even though (professional) programmers may sometimes seem like the superstars
    among knowledge workers in our modern world, they are often met with prejudices
    that are frequently characterized by overdrawn clichés. You encounter some of
    these prejudices even as an amateur programmer. We will deal with such prejudices
    and stereotypes in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1 Many Good Reasons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some reasons that learning programming is worthwhile are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 2.1.1 Make Your Everyday Life Easier!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Being able to program allows you to automate things that you would otherwise
    have to do in a laborious and error-prone way by hand. This not only increases
    your productivity, but also makes work more relaxed, because it is of course especially
    the boring, monotonous, repetitive, in short: annoying tasks that can be automated
    particularly well by programs.'
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Excel is the Swiss army knife of the office worker today. With a few
    exceptions, such as law firms whose business model consists mainly of writing
    elaborate briefs, contracts and other legal documents, Excel (and to a much lesser
    extent spreadsheets from other vendors, such as Google) is now used virtually
    everywhere and for a wide variety of purposes, from budget planning and business
    cases to project plans and to-do lists. Many users are unaware that Excel (like
    the other Microsoft Office applications) comes with a powerful programming language,
    *Visual Basic for Applications*, or *VBA* for short. This programming language
    allows you to automate even complicated processes. Let’s assume, for example,
    that you have several questionnaires of a customer or employee survey in different
    Excel files and now want to consolidate them into a single workbook. Of course,
    you can do this manually by opening each file, reading, or copying the values
    and pasting them back into your consolidated workbook. A faster and safer way
    (i.e., with less risk of error) is to write a small VBA program that simply performs
    the task automatically. Now you may object that it takes time to develop and test
    the VBA program until it works properly. And indeed, developing such a small macro,
    as VBA programs are also called, often takes longer than you originally estimated.
    Nevertheless, the challenge of automating the task is far more exciting than the
    dull, manual copying of data back and forth. The advantage of the VBA program
    becomes fully apparent when you have to repeat the task later, for example, because
    new survey results are available.
  prefs: []
  type: TYPE_NORMAL
- en: Try impressing your colleagues, not to mention your boss, with how quickly and
    effortlessly you complete many tasks that seem like time-consuming horror projects
    to most. Drew Houston, one of the founders of the cloud service *Dropbox* once
    said, “Programming is the closest thing we have to a superpower.” The motif that
    there is something magical about programming can also be found in the statements
    of many other programmers. But of course, it only seems magical to the uninitiated.
    The “magicians” themselves know how the “magic” works and that their “powers”
    are anything but supernatural.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft founder Bill Gates proved at a young age that knowing how to program
    can sometimes make life a little more pleasant. He and his friend and later Microsoft
    co-founder Paul Allen intervened in the timetable software of Gates’ high school
    in such a way that he suddenly found himself in a class that consisted almost
    exclusively of girls. The fact that he couldn’t really get along with any of the
    female classmates, as he himself reports, was at least not due to his programming
    skills.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1.2 Speak “IT”!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is an observation that has been repeated a thousand times, but is no less
    true because of this, that IT is becoming increasingly important in companies
    and other organizations, including the public sector. There is hardly a modern
    organization whose way of doing business is not affected by the advance of digitalization.
    Sometimes even the business model itself is changing in the process. The consequence,
    of course, is that the IT department becomes more important internally, precisely
    because there are more and more issues and problems that can only be dealt with
    in collaboration with internal IT or external IT consultants brought on board
    for this purpose. Even if you do not work in the IT department yourself, but in
    a classic “specialist department,” in Sales, for example, or in Finance, you will
    come into contact with projects and plans in which IT makes a significant contribution.
    Therefore, an understanding of how “IT” basically works, what is technically solvable
    and what is not, and which steps are roughly necessary to solve a problem, is
    of immense advantage. This is especially true if you are closely involved in projects
    that have an IT component. Gone are the days of writing hundreds of pages of complicated
    business concepts, which were then interpreted by the IT department more or less
    poorly and translated into a technical solution. On the rise are agile methods
    such as SCRUM, in which the development cycles are shorter and the (internal)
    “customers,” i.e., the those who define the business requirements of a technical
    solution, are much more closely involved in its design, implementation and testing
    than in the past. In other words, collaboration with IT is becoming more intensive
    and important, and so is mutual understanding. As a programming expert, you will
    bring much more of this with you than others, and with this understanding it will
    be much easier for you to discuss things with your IT colleagues on an equal footing,
    even if you have no idea whatsoever about the specific technologies they are using.
    In fact, much more important than mastering a particular technology is recognizing
    what is solvable (in terms of automation, for example) and what is not, understanding
    the approach to problem solving, and being able to think ahead about the most
    important steps. In this way, you become a valued technical partner to your IT
    colleagues and effectively advance your technical issues!
  prefs: []
  type: TYPE_NORMAL
- en: 'And by the way, if you aspire to higher orders: The time when management up
    to and including the executive board, could be ignorant regarding IT topics because
    of the operational unimportance of IT, are ending. In the future, few people will
    get away with putting wild strategies on fancy presentation slides if they have
    no understanding of how to implement them IT-wise.'
  prefs: []
  type: TYPE_NORMAL
- en: 2.1.3 Make Money!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have just argued that IT is becoming increasingly important and is already
    of immense significance today.
  prefs: []
  type: TYPE_NORMAL
- en: This is also reflected in the labor market data. According to the *Occupational
    Outlook Handbook* of the *U.S. Bureau of Labor Statistics*, in 2021 there were
    1,425,900 people employed as software developers in the United States. With a
    median annual pay of USD 120,730 employees in this occupational group are significantly
    better paid than US employees on average (USD 45,760). If you have not yet decided
    on a career, or if you want to reorient yourself, this is obviously an attractive
    field of activity. The Bureau of Labor Statistics expects employment here to increase
    by 26% in the period 2021–2031.
  prefs: []
  type: TYPE_NORMAL
- en: But of course, you don’t have to aim for a permanent position to turn your programming
    skills into money. Freelancers offer their services on various Internet platforms.
    The popular website *Upwork*, for example, shows at the time of writing 27,333
    projects in the categories “Desktop Software Development,” “Mobile Development”
    and “Web Development,” which are to be awarded to freelancers by the respective
    clients. Naturally, many software developers from countries with lower wage levels
    trade on these platforms, and are prepared to accept lower remuneration, even
    though they are often well trained and skilled workers. To be successful on platforms
    like Upwork, you need to build a good reputation, because you acquire new clients
    partly with the help of reviews you have received from previous clients. Of course,
    this makes things difficult, especially in the beginning. Here, however, one approach
    may be to initially accept lower fees and to demonstrate your skills in ways other
    than past client projects, such as private programming projects that you can publish
    via platforms like *GitHub to* show to your potential clients. Despite all the
    difficulties that freelancing via such internet platforms may bring with it, especially
    at the beginning, it is still an excellent opportunity to try yourself out and
    test your newly acquired skills on the market, practically risk-free and without
    having to leave your main job.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you can also break away from contract work for individual customers
    and develop your own software or web service that you offer to a broader audience.
    Whether this is still possible (both practically and legally) alongside your day
    job can only be decided on a case-by-case basis and will surely require some reflection
    on your risk preference. However, several examples show that it is possible to
    be successful with entrepreneurial activity in the software and internet business,
    even within a limited timeframe. After all, your product doesn’t have to be the
    next Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1.4 Understand What Holds the World Together At Its Core!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So far, we’ve talked more about the mundane things in life. About how you can
    make your life easier, advance your professional projects and earn money with
    programming. If you’re not really interested in all that, and instead have the
    noble goal of learning more about how our complex world works, you can’t avoid
    programming.
  prefs: []
  type: TYPE_NORMAL
- en: If Goethe’s Dr. Faust lived in our time, he would not make a pact with the devil.
    He would learn to program.
  prefs: []
  type: TYPE_NORMAL
- en: Our world is increasingly governed by the supposedly mysterious power of algorithms.
    Despite this being the case, many people lack an understanding of what algorithms
    are and how they work, an understanding that hopefully you have already built
    up after reading the last chapter. According to the 2018 study *What Europe Knows
    and Thinks About Algorithms* published by the *Bertelsmann Foundation*, 48% of
    10,960 European survey respondents admit they either haven’t heard of algorithms
    (15%) or don’t know what they are (33%). Interestingly, the study finds that the
    opportunities offered by algorithms are seen more by those who state that they
    have a good knowledge of what algorithms are.
  prefs: []
  type: TYPE_NORMAL
- en: So, we live in a world increasingly shaped by technologies and problem-solving
    approaches that many don’t understand. It used to be different. School gave everyone
    a more or less solid knowledge of how the major technologies of the day worked.
    Anyone who paid attention in school knew the basics of what powered a car, where
    electricity came from, and why industrial production based on the division of
    labor offered efficiency advantages. By now, however, public education has lost
    its way. We’ll return to this topic below.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to form an informed opinion about the opportunities and risks of
    algorithms and participate in the social discussions around this topic, you need
    to understand more about algorithms than many Europeans do, according to the Bertelsmann
    survey. Is it necessary for you to be able to program yourself? No, certainly
    not. But anyone who has ever developed a small program themselves will have a
    far better understanding.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1.5 Train Your Logical, Problem-Solving Thinking!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is often said that one develops a better understanding of grammar by studying
    Latin at school, the purely communicative utility of which (except perhaps in
    the Vatican, where you can probably get away with Italian as well) is rather limited.
    That the study of Latin implies a better understanding of grammar is because if
    you want to translate Latin texts, you must deal with grammar more than in other
    languages, such as English. In this way, you learn the basic concepts of grammar,
    for example, the different cases and their uses, which can then be applied to
    other languages. Thus, learning Latin has a benefit even if you are not one of
    those who must have at least a minimum knowledge of Latin for professional reasons,
    such as historians or medical doctors.
  prefs: []
  type: TYPE_NORMAL
- en: It is similar with programming. In few other pursuits will you learn how to
    approach problems systematically, to break them down into simpler sub-problems,
    to develop an approach to each of the sub-problems, and finally to assemble the
    solution to your original problem from the solutions to the sub-problems. The
    ability to approach problems systematically will help you not only in programming
    itself, but *everywhere* in life. If you learn to program, you will see the world
    differently and approach problems of whatever kind in a more structured and solution-oriented
    way. Perhaps this school of logical thinking is the most important reason of all
    to get involved with programming.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 Clichés and Prejudices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we’ve discussed some good reasons why it makes sense to get into programming,
    let’s take a moment to clear up some of the clichés and prejudices that many people
    have about programming.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2.1 Programming is Only for Nerds
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some people still have the image of the pimply, glasses-wearing, male teenager,
    whose staple food is pizza and coke, who hammers his keyboard obsessively and
    without stopping all night. Yes, those kinds of programmers certainly exist. And
    it’s not hard to see why there is some truth to this exaggerated stereotype. For
    one thing, there’s the “addictive potential.” If you are so inclined, you can
    quickly get completely “sucked into” a programming problem and forget everything
    around you, because you are completely focused on solving this one problem that
    just won’t go away. In this situation, time can quickly become secondary. You
    simply want to solve it, because it would be completely unsatisfactory to leave
    the problem unsolved, although, as experience shows, it would often be better
    to rest first and to tackle the problem again the following day with a fresh mind.
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides the addictive potential, there is a second aspect implicit in the above
    cliché: programming as a substitute for real social interaction. The great thing
    about programming is that you develop something and then get feedback from the
    computer: the program runs, or it doesn’t run. It’s easy to imagine that this
    is an interesting incentive for people who are introverted and reserved in social
    situations. Add to this the perfect controllability: if you write the program
    correctly, the computer will do exactly what you tell it to do, and nothing else.
    Social interactions are considerably less controllable, always having elements
    of the unexpected, the surprising, perhaps even the random. These core elements
    of social interaction can be easily eliminated in programming. You find yourself
    in a perfectly controllable situation.'
  prefs: []
  type: TYPE_NORMAL
- en: The aspects of addiction potential and controllability only play a role for
    a small portion of all programmers. Most programmers are completely normal people.
    The commercial employee who automates some work steps in Excel with the help of
    VBA to simplify his daily work routine is in the middle of life and may hardly
    differ from you. The same applies to those who are professionally involved in
    software development. So, you don’t have to worry at all about becoming a member
    of a social fringe group if you get more intensively involved with programming.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2.2 Software and Its Programming Are Just a Fashion, a Hype
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some may think that the software industry is just the spawn of a modern hype.
    In the end, it’s not programs that count, but a good, usable physical product,
    or so the argument goes. But those who think this way underestimate the important
    role that software now plays in all our lives. Not only have many products emerged
    that are entirely software (office applications and social networks are examples),
    but the way physical products are designed, manufactured, distributed, and monetized
    is changing in profound ways because of software. Think, for example, of the effects
    that *Amazon* has on the book trade. In some industries, such as automotive, there
    are strong indications that software is becoming significantly more important
    as part of the overall product relative to its physical components. Perhaps in
    the future, what your car can do, because of the software that runs it, will be
    more interesting than whether it has alloy wheels and sports seats. Especially
    for those for whom the car is primarily a means of transportation, the physical
    car may become more and more interchangeable as a platform on which the really
    interesting features run in the form of software.
  prefs: []
  type: TYPE_NORMAL
- en: Yes, physical products and non-software services will continue to be important,
    but they will become more dependent on software, and thus be able to offer their
    users more features and benefits. The way physical products are created and distributed
    will also change, sometimes radically, just as the importance of pure software
    and internet products will increase significantly.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2.3 Programming is Only for Men
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It may well be that men are, on average, more interested in technical subjects
    than women. But in the case of programming, there is no reason to believe that
    women cannot be equally gifted programmers, or that it would be less useful for
    a woman’s career development to be proficient in programming.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, women have always played a special role in the history of software
    programming. In the nineteenth century, the English mathematician *Augusta Ada
    Byron* was the first person to describe a complete program for the punched-card
    machine devised by *Charles Babbage*. For this, she is widely considered the world’s
    first female programmer. (Babbage’s *Analytical Machine,* however, was never built
    during Byron’s and Babbage’s lifetimes due to funding difficulties). She also
    realized—and this is probably far more significant—that analytic machines like
    Babbage’s system were fundamentally capable of more than just dealing with numbers,
    and could instead work with other types of symbols, such as letters. Further,
    she devised concepts such as the loop (repetitions of program statements), which
    are now standard in virtually all modern programming languages. As a tribute,
    the *Ada* programming language bears her name.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to Augusta Ada Byron, other women have made important contributions
    to the development of programming. One example is the computer pioneer *Grace
    Hopper*, who as early as the 1940s had the groundbreaking idea of writing programs
    in a language that was directly understandable to humans and who played a major
    role in the development of *COBOL* (*Common Business Oriented Language*), one
    of the first modern high-level languages. She is also considered to be the inventor
    of the compiler, which translates the program written in a programming language
    (which is understandable to humans) into the machine language that the computer
    can execute directly (more on this in the next chapter).
  prefs: []
  type: TYPE_NORMAL
- en: Or the American mathematician *Margaret Hamilton*, who together with her team
    developed the control software for the Apollo 11 program and in a sense invented
    the assistance system with which *Neil Armstrong* and *Buzz Aldrin* landed on
    the moon in 1969 and returned home safely.
  prefs: []
  type: TYPE_NORMAL
- en: Women have made a decisive contribution to the development of programming and
    made much of what we now accept as normal possible in the first place. Throughout
    history, programming has always been a women’s world. Why should it be any different
    today?
  prefs: []
  type: TYPE_NORMAL
