- en: '`Filesystem Traversal`'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: Now that you’ve seen how recursion works, we can use it to solve certain problems
    that would otherwise be uncrackable.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: One type of problem in which recursion is a natural fit is when we need to delve
    into multiple layers of a problem without knowing how many layers there are.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Take the example of traversing through a filesystem. Let’s say you have a script
    that does something with all the contents inside a directory, such as printing
    all the subdirectory names. However, you don’t want the script to only handle
    the immediate subdirectories—you want it to act on all the subdirectories within
    the subdirectories of the directory and all of their subdirectories, and so on.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Let’s create a simple script that prints the names of all subdirectories within
    a given directory:'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `import` { `readdirSync`, `lstatSync` } `from` `fs`; |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `import` { `join` } `from` `path`; |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `function` printSubdirectories(`directoryName`) { |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `for` (`const` `fileName` `of` `readdirSync`(`directoryName`)) { |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (`lstatSync`(`fileName`).isDirectory()) { |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `const` pathName = `join`(`directoryName`, `fileName`); |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `console.log`(`pathName`); |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 'We can call this function by passing in a directory name. If we want to call
    it on the current directory, we could write the following:'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | printSubdirectories(`''.''`); |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
- en: In this script, we look through each file within the given directory. If the
    file is itself a subdirectory, we print the subdirectory name.
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: While this works well, it only prints the names of the subdirectories immediately
    within the current directory. It doesn’t print the names of the subdirectories
    within those subdirectories.
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Let’s update our script so that it can search one level deeper:'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `import` { `readdirSync`, `lstatSync` } `from` `fs`; |'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `import` { `join` } `from` `path`; |'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `function` printSubdirectories(`directoryName`) { |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `for` (`const` `fileName` `of` `readdirSync`(`directoryName`)) { |'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (`lstatSync`(`fileName`).isDirectory()) { |'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `const` pathName = `join`(`directoryName`, `fileName`); |'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `console.log`(`pathName`); |'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `for` (`const` `fileName2` `of` `readdirSync`(`pathName`)) { |'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `const` pathName2 = `join`(`pathName`, `fileName2`); |'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `console.log`(`pathName2`); |'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_TB
- en: Now, every time our script discovers a directory, it then conducts an identical
    loop through the subdirectories of that directory and prints the names of the
    subdirectories. But this script also has its limitations because it’s only searching
    two levels deep. What if we want to search three, four, or five levels deep? We
    would need five levels of nested loops.
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: And what if we want to search as deep as our subdirectories go? That would seem
    to be impossible, as we don’t even know how many levels there are.
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 而这正是递归真正闪光的地方。使用递归，我们可以编写一个可以无限深入的脚本，并且代码量更少！
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `import` { `readdirSync`, `lstatSync` } `from` `''fs'';` |'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `import` { `join` } `from` `''path'';` |'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `function` `printSubdirectories(directoryName) {` |'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `for` (`const` `fileName` `of` `readdirSync(directoryName)) {` |'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `const` `pathName` = `join`(`directoryName`, `fileName`); |'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (`lstatSync(pathName).isDirectory()) {` |'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `console.log(pathName);` |'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `printSubdirectories(pathName);` |'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 当这个脚本遇到文件时，如果它们本身是子目录，它会调用`printSubdirectories`方法来处理那个子目录。因此，脚本可以根据需要深入，不留下任何子目录未处理。
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 为了可视化这个算法如何作用于示例文件系统，请查看以下图示，它指定了脚本遍历子目录的顺序：
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/recursively_recurse_with_recursion/filesystem.png](images/recursively_recurse_with_recursion/filesystem.png)'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_IMG
