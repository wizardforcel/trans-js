- en: 'Module 20:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Deployment Strategies for Vue.js Apps
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the dynamic landscape of web development, deploying Vue.js applications
    efficiently is paramount for delivering a seamless user experience. The module
    "Deployment Strategies for Vue.js Apps" assumes a central role in the book "Vue.js
    Essentials: For Responsive Web Development," guiding readers through the intricate
    process of deploying Vue.js applications. Within these pages, developers will
    gain comprehensive insights into deployment strategies, performance optimization,
    and best practices tailored for ensuring the successful and efficient deployment
    of Vue.js applications.'
  prefs: []
  type: TYPE_NORMAL
- en: The Significance of Deployment in Vue.js Development
  prefs: []
  type: TYPE_NORMAL
- en: Before delving into the specifics of deployment strategies, it is crucial to
    recognize the significance of efficient deployment in modern web development.
    This module initiates by highlighting the challenges associated with transitioning
    Vue.js applications from development environments to production servers. Readers
    will gain an understanding of how deployment strategies impact the accessibility,
    performance, and reliability of Vue.js applications in real-world scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js Production Build and Optimization Techniques
  prefs: []
  type: TYPE_NORMAL
- en: This segment explores techniques for optimizing Vue.js applications for production
    builds, emphasizing strategies to minimize file sizes, reduce unnecessary dependencies,
    and enhance overall performance. Developers will gain insights into leveraging
    Vue CLI's build commands, code splitting, and tree-shaking to create optimized
    production builds. By mastering these techniques, developers can ensure that their
    Vue.js applications are lean, efficient, and capable of delivering optimal performance
    to end-users.
  prefs: []
  type: TYPE_NORMAL
- en: Static Site Generation (SSG) and Server-Side Rendering (SSR) for Vue.js Apps
  prefs: []
  type: TYPE_NORMAL
- en: The module delves into advanced deployment strategies such as Static Site Generation
    (SSG) and Server-Side Rendering (SSR) for Vue.js applications. Readers will explore
    the benefits of pre-rendering static pages and serving dynamic content from the
    server to enhance performance and search engine optimization. Practical insights
    into implementing SSG and SSR with Vue.js frameworks like Nuxt.js provide developers
    with the tools needed to deploy applications that strike a balance between dynamic
    interactivity and optimal load times.
  prefs: []
  type: TYPE_NORMAL
- en: Containerization with Docker and Orchestration with Kubernetes
  prefs: []
  type: TYPE_NORMAL
- en: As modern deployment architectures embrace containerization and orchestration,
    this part of the module addresses strategies for deploying Vue.js applications
    using Docker containers and orchestrating them with Kubernetes. Developers will
    gain practical knowledge of containerizing Vue.js applications, configuring Docker
    images, and deploying them in scalable and manageable Kubernetes clusters. By
    adopting containerization and orchestration, developers can streamline deployment
    processes, ensure consistency across different environments, and enhance the scalability
    of their Vue.js applications.
  prefs: []
  type: TYPE_NORMAL
- en: '"Deployment Strategies for Vue.js Apps" stands as a pivotal module within "Vue.js
    Essentials: For Responsive Web Development," providing readers with a comprehensive
    guide to deploying Vue.js applications effectively. By unraveling the significance
    of deployment, exploring production build optimization, and addressing advanced
    strategies like SSG, SSR, containerization, and orchestration, developers gain
    the knowledge and skills needed to navigate the complexities of deploying Vue.js
    applications in diverse environments. This module serves as an indispensable resource
    for developers committed to delivering Vue.js applications that not only meet
    performance expectations but also seamlessly adapt to the demands of modern deployment
    architectures.'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying to Static Hosts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Within the module "Deployment Strategies for Vue.js Apps" in the book "Vue.js
    Essentials: For Responsive Web Development," the section on deploying to static
    hosts explores the process of deploying Vue.js applications to static hosting
    services. Deploying to static hosts is an efficient strategy for Vue.js apps,
    as it involves pre-rendering the application''s static assets and hosting them
    on platforms designed to serve static content.'
  prefs: []
  type: TYPE_NORMAL
- en: Building the Vue.js Application
  prefs: []
  type: TYPE_NORMAL
- en: The deployment process typically begins with building the Vue.js application
    to generate the optimized and minified assets that will be deployed. The build
    command, often specified in the project's configuration, triggers the compilation
    and bundling of the application's source code.
  prefs: []
  type: TYPE_NORMAL
- en: Run the build command for production
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: npm run build
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the npm run build command executes the build script configured
    in the project, preparing the application for deployment by creating the necessary
    static assets.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Deployment Settings
  prefs: []
  type: TYPE_NORMAL
- en: Before deploying to static hosts, developers need to configure deployment settings,
    specifying the build output directory and other relevant options. The vue.config.js
    file, commonly used in Vue.js projects, allows developers to customize the build
    process and set deployment-related configurations.
  prefs: []
  type: TYPE_NORMAL
- en: // vue.config.js
  prefs: []
  type: TYPE_NORMAL
- en: module.exports = {
  prefs: []
  type: TYPE_NORMAL
- en: // Set the output directory for the build
  prefs: []
  type: TYPE_NORMAL
- en: 'outputDir: ''dist'','
  prefs: []
  type: TYPE_NORMAL
- en: // Additional configurations for deployment
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: Here, the outputDir option in the vue.config.js file specifies the directory
    where the build output will be stored, often named 'dist' for distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a Static Hosting Service
  prefs: []
  type: TYPE_NORMAL
- en: Several static hosting services are suitable for deploying Vue.js applications,
    including Netlify, Vercel, and GitHub Pages. The chosen hosting service will determine
    the deployment process and configuration. For instance, Netlify integrates seamlessly
    with Git repositories, allowing for continuous deployment with each push to the
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: Deploy to Netlify
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: netlify deploy
  prefs: []
  type: TYPE_NORMAL
- en: This hypothetical command represents the deployment process to Netlify, where
    the netlify deploy command uploads the contents of the build directory to the
    Netlify platform.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying to GitHub Pages
  prefs: []
  type: TYPE_NORMAL
- en: For GitHub Pages, a popular static hosting option, the deployment process involves
    pushing the build output to a specific branch (often named 'gh-pages') within
    the project repository. GitHub Pages will then serve the static assets from this
    branch.
  prefs: []
  type: TYPE_NORMAL
- en: Deploy to GitHub Pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: npm run build
  prefs: []
  type: TYPE_NORMAL
- en: git checkout -b gh-pages
  prefs: []
  type: TYPE_NORMAL
- en: git add .
  prefs: []
  type: TYPE_NORMAL
- en: git commit -m "Deploy to GitHub Pages"
  prefs: []
  type: TYPE_NORMAL
- en: git push origin gh-pages
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the build is followed by creating and switching to the 'gh-pages'
    branch, committing the build output, and pushing it to the remote repository.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous Deployment with CI/CD
  prefs: []
  type: TYPE_NORMAL
- en: To streamline the deployment process, developers often leverage Continuous Integration/Continuous
    Deployment (CI/CD) pipelines. CI/CD systems like GitHub Actions or GitLab CI can
    be configured to automatically build and deploy the Vue.js application whenever
    changes are pushed to the repository.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Actions workflow file (.github/workflows/deploy.yml)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'name: Deploy to Netlify'
  prefs: []
  type: TYPE_NORMAL
- en: 'on:'
  prefs: []
  type: TYPE_NORMAL
- en: 'push:'
  prefs: []
  type: TYPE_NORMAL
- en: 'branches:'
  prefs: []
  type: TYPE_NORMAL
- en: '- main'
  prefs: []
  type: TYPE_NORMAL
- en: 'jobs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'deploy:'
  prefs: []
  type: TYPE_NORMAL
- en: 'runs-on: ubuntu-latest'
  prefs: []
  type: TYPE_NORMAL
- en: 'steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Checkout code'
  prefs: []
  type: TYPE_NORMAL
- en: 'uses: actions/checkout@v2'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Install dependencies'
  prefs: []
  type: TYPE_NORMAL
- en: 'run: npm install'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Build and deploy'
  prefs: []
  type: TYPE_NORMAL
- en: 'run: |'
  prefs: []
  type: TYPE_NORMAL
- en: npm run build
  prefs: []
  type: TYPE_NORMAL
- en: npx netlify deploy --prod
  prefs: []
  type: TYPE_NORMAL
- en: 'env:'
  prefs: []
  type: TYPE_NORMAL
- en: 'NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}'
  prefs: []
  type: TYPE_NORMAL
- en: This GitHub Actions workflow demonstrates an automated deployment setup, triggering
    a deployment to Netlify on each push to the 'main' branch.
  prefs: []
  type: TYPE_NORMAL
- en: The "Deploying to Static Hosts" section provides Vue.js developers with insights
    into deploying their applications to static hosting services. By building the
    application, configuring deployment settings, choosing a static hosting service,
    and considering continuous deployment options, developers can efficiently deploy
    and host their Vue.js apps on platforms designed for serving static content.
  prefs: []
  type: TYPE_NORMAL
- en: Serverless Deployments with Firebase
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the module "Deployment Strategies for Vue.js Apps" within the book "Vue.js
    Essentials: For Responsive Web Development," the section on serverless deployments
    with Firebase explores an efficient strategy for deploying Vue.js applications
    using Firebase Hosting. Serverless deployments offer a scalable and cost-effective
    solution, allowing developers to focus on building and deploying applications
    without managing server infrastructure.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up Firebase for Vue.js Deployment
  prefs: []
  type: TYPE_NORMAL
- en: Before deploying a Vue.js application with Firebase, developers need to set
    up a Firebase project and install the Firebase CLI. The Firebase CLI provides
    command-line tools for interacting with Firebase services, including Firebase
    Hosting.
  prefs: []
  type: TYPE_NORMAL
- en: Install the Firebase CLI globally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: npm install -g firebase-tools
  prefs: []
  type: TYPE_NORMAL
- en: Log in to Firebase (authenticate)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: firebase login
  prefs: []
  type: TYPE_NORMAL
- en: Initialize Firebase in the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: firebase init
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the npm install -g firebase-tools command globally installs
    the Firebase CLI, firebase login authenticates the user, and firebase init initializes
    Firebase in the project, prompting the developer to choose services to set up,
    including Firebase Hosting.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Firebase Hosting
  prefs: []
  type: TYPE_NORMAL
- en: After initializing Firebase in the project, developers need to configure Firebase
    Hosting settings, such as the public directory where the build output is located.
    The Firebase CLI provides an interactive setup process, but developers can also
    manually configure the settings in the firebase.json file.
  prefs: []
  type: TYPE_NORMAL
- en: // firebase.json
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"hosting": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"public": "dist",'
  prefs: []
  type: TYPE_NORMAL
- en: '"ignore": ["firebase.json", "**/.*", "**/node_modules/**"],'
  prefs: []
  type: TYPE_NORMAL
- en: // Additional hosting configurations
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: In this configuration, the "public" field specifies the directory containing
    the static assets, often named 'dist' for Vue.js projects.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying Vue.js Application to Firebase
  prefs: []
  type: TYPE_NORMAL
- en: With Firebase configured, deploying the Vue.js application becomes a straightforward
    process. The firebase deploy command uploads the contents of the specified public
    directory to Firebase Hosting, making the application accessible via a unique
    Firebase Hosting URL.
  prefs: []
  type: TYPE_NORMAL
- en: Deploy the Vue.js application to Firebase Hosting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: firebase deploy
  prefs: []
  type: TYPE_NORMAL
- en: This command triggers the deployment process, uploading the static assets to
    Firebase Hosting and providing a deployment URL that developers can use to access
    the live application.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Continuous Deployment
  prefs: []
  type: TYPE_NORMAL
- en: To streamline the deployment process and enable continuous deployment, developers
    can integrate Firebase Hosting with CI/CD platforms like GitHub Actions. This
    allows for automated deployments whenever changes are pushed to the repository.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Actions workflow file (.github/workflows/deploy.yml)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'name: Deploy to Firebase'
  prefs: []
  type: TYPE_NORMAL
- en: 'on:'
  prefs: []
  type: TYPE_NORMAL
- en: 'push:'
  prefs: []
  type: TYPE_NORMAL
- en: 'branches:'
  prefs: []
  type: TYPE_NORMAL
- en: '- main'
  prefs: []
  type: TYPE_NORMAL
- en: 'jobs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'deploy:'
  prefs: []
  type: TYPE_NORMAL
- en: 'runs-on: ubuntu-latest'
  prefs: []
  type: TYPE_NORMAL
- en: 'steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Checkout code'
  prefs: []
  type: TYPE_NORMAL
- en: 'uses: actions/checkout@v2'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Install Firebase CLI'
  prefs: []
  type: TYPE_NORMAL
- en: 'run: npm install -g firebase-tools'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Deploy to Firebase'
  prefs: []
  type: TYPE_NORMAL
- en: 'run: |'
  prefs: []
  type: TYPE_NORMAL
- en: npm install
  prefs: []
  type: TYPE_NORMAL
- en: npm run build
  prefs: []
  type: TYPE_NORMAL
- en: firebase deploy --token ${{ secrets.FIREBASE_AUTH_TOKEN }}
  prefs: []
  type: TYPE_NORMAL
- en: 'env:'
  prefs: []
  type: TYPE_NORMAL
- en: 'CI: false'
  prefs: []
  type: TYPE_NORMAL
- en: This GitHub Actions workflow demonstrates a continuous deployment setup for
    Firebase Hosting, including the installation of the Firebase CLI, building the
    Vue.js application, and deploying it to Firebase Hosting on each push to the 'main'
    branch.
  prefs: []
  type: TYPE_NORMAL
- en: The "Serverless Deployments with Firebase" section provides Vue.js developers
    with a practical guide to deploying applications using Firebase Hosting. By setting
    up Firebase, configuring hosting settings, deploying the application, and enabling
    continuous deployment, developers can leverage the benefits of serverless deployments
    for their Vue.js projects, ensuring scalability, cost-effectiveness, and a streamlined
    deployment workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Containerization with Docker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the module "Deployment Strategies for Vue.js Apps" of the book "Vue.js Essentials:
    For Responsive Web Development," the section on containerization with Docker explores
    the deployment strategy of encapsulating Vue.js applications within Docker containers.
    Containerization provides a consistent and portable environment for deploying
    Vue.js applications, making it easier to manage dependencies and ensuring that
    the application runs consistently across different environments.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Docker and Containers
  prefs: []
  type: TYPE_NORMAL
- en: Docker is a platform that enables developers to package applications and their
    dependencies into lightweight, portable containers. Containers provide an isolated
    and reproducible environment, ensuring that the Vue.js application runs consistently,
    regardless of the host system or dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Dockerfile for Vue.js Applications
  prefs: []
  type: TYPE_NORMAL
- en: To containerize a Vue.js application, developers create a Dockerfile, which
    contains instructions for building a Docker image. The Dockerfile specifies the
    base image, sets up the environment, and defines how the application should be
    run within the container.
  prefs: []
  type: TYPE_NORMAL
- en: Use an official Node.js image as the base image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FROM node:14
  prefs: []
  type: TYPE_NORMAL
- en: Set the working directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WORKDIR /app
  prefs: []
  type: TYPE_NORMAL
- en: Copy package.json and package-lock.json to the working directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: COPY package*.json ./
  prefs: []
  type: TYPE_NORMAL
- en: Install dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RUN npm install
  prefs: []
  type: TYPE_NORMAL
- en: Copy the entire project to the working directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: COPY . .
  prefs: []
  type: TYPE_NORMAL
- en: Build the Vue.js application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RUN npm run build
  prefs: []
  type: TYPE_NORMAL
- en: Expose the port on which the Vue.js app will run
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: EXPOSE 8080
  prefs: []
  type: TYPE_NORMAL
- en: Command to start the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CMD ["npm", "run", "start"]
  prefs: []
  type: TYPE_NORMAL
- en: In this Dockerfile example, it starts with the official Node.js image, sets
    the working directory, copies the package files, installs dependencies, copies
    the entire project, builds the Vue.js application, exposes the necessary port,
    and defines the command to start the application.
  prefs: []
  type: TYPE_NORMAL
- en: Building and Running the Docker Image
  prefs: []
  type: TYPE_NORMAL
- en: Once the Dockerfile is created, developers use the Docker CLI to build a Docker
    image from the instructions provided. Subsequently, they can run a Docker container
    using the created image.
  prefs: []
  type: TYPE_NORMAL
- en: Build the Docker image (run this command in the project directory)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: docker build -t my-vue-app .
  prefs: []
  type: TYPE_NORMAL
- en: Run the Docker container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: docker run -p 8080:8080 my-vue-app
  prefs: []
  type: TYPE_NORMAL
- en: These commands demonstrate building a Docker image named 'my-vue-app' from the
    Dockerfile in the current directory and running a Docker container based on that
    image, mapping port 8080 from the container to the host.
  prefs: []
  type: TYPE_NORMAL
- en: Container Orchestration with Docker Compose
  prefs: []
  type: TYPE_NORMAL
- en: For more complex deployments involving multiple containers, developers can use
    Docker Compose to define and manage multi-container applications. The docker-compose.yml
    file specifies the services, networks, and volumes required for the application.
  prefs: []
  type: TYPE_NORMAL
- en: docker-compose.yml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'version: ''3'''
  prefs: []
  type: TYPE_NORMAL
- en: 'services:'
  prefs: []
  type: TYPE_NORMAL
- en: 'web:'
  prefs: []
  type: TYPE_NORMAL
- en: 'build: .'
  prefs: []
  type: TYPE_NORMAL
- en: 'ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '- "8080:8080"'
  prefs: []
  type: TYPE_NORMAL
- en: This simplified docker-compose.yml file defines a service named 'web,' specifying
    the build context and port mapping.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages of Docker Containerization for Vue.js Apps
  prefs: []
  type: TYPE_NORMAL
- en: Containerization offers several advantages for deploying Vue.js applications.
    It ensures consistency across different environments, simplifies dependency management,
    facilitates easy scaling, and enables efficient resource utilization. Additionally,
    Docker containers can be easily shared and distributed, making it a convenient
    deployment strategy for Vue.js applications.
  prefs: []
  type: TYPE_NORMAL
- en: The "Containerization with Docker" section equips Vue.js developers with the
    knowledge and tools needed to containerize their applications using Docker. By
    creating a Dockerfile, building and running Docker images, and exploring container
    orchestration with Docker Compose, developers can embrace containerization as
    a powerful deployment strategy, enhancing the consistency, portability, and scalability
    of their Vue.js applications.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous Integration and Deployment (CI/CD) for Vue.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the module "Deployment Strategies for Vue.js Apps" within the book "Vue.js
    Essentials: For Responsive Web Development," the section on Continuous Integration
    and Deployment (CI/CD) for Vue.js delves into the essential practices and tools
    for automating the integration and deployment processes. CI/CD ensures that changes
    to the Vue.js application are systematically tested, built, and deployed, facilitating
    a streamlined and reliable development workflow.'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing CI/CD with GitHub Actions
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Actions is a popular CI/CD platform integrated with GitHub repositories.
    Developers can define workflows using YAML files in the .github/workflows directory
    to automate tasks like testing, building, and deploying Vue.js applications.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Actions workflow file (.github/workflows/ci-cd.yml)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'name: CI/CD for Vue.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'on:'
  prefs: []
  type: TYPE_NORMAL
- en: 'push:'
  prefs: []
  type: TYPE_NORMAL
- en: 'branches:'
  prefs: []
  type: TYPE_NORMAL
- en: '- main'
  prefs: []
  type: TYPE_NORMAL
- en: 'jobs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'build:'
  prefs: []
  type: TYPE_NORMAL
- en: 'runs-on: ubuntu-latest'
  prefs: []
  type: TYPE_NORMAL
- en: 'steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Checkout code'
  prefs: []
  type: TYPE_NORMAL
- en: 'uses: actions/checkout@v2'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Setup Node.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'uses: actions/setup-node@v3'
  prefs: []
  type: TYPE_NORMAL
- en: 'with:'
  prefs: []
  type: TYPE_NORMAL
- en: 'node-version: ''14'''
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Install dependencies'
  prefs: []
  type: TYPE_NORMAL
- en: 'run: npm install'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Run tests'
  prefs: []
  type: TYPE_NORMAL
- en: 'run: npm run test'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Build Vue.js app'
  prefs: []
  type: TYPE_NORMAL
- en: 'run: npm run build'
  prefs: []
  type: TYPE_NORMAL
- en: 'deploy:'
  prefs: []
  type: TYPE_NORMAL
- en: 'runs-on: ubuntu-latest'
  prefs: []
  type: TYPE_NORMAL
- en: 'needs: build'
  prefs: []
  type: TYPE_NORMAL
- en: 'steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Deploy to Hosting Service'
  prefs: []
  type: TYPE_NORMAL
- en: 'run: |'
  prefs: []
  type: TYPE_NORMAL
- en: Add commands to deploy to hosting service (e.g., Firebase, Netlify)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'env:'
  prefs: []
  type: TYPE_NORMAL
- en: 'CI: false'
  prefs: []
  type: TYPE_NORMAL
- en: 'This GitHub Actions workflow is triggered on each push to the ''main'' branch.
    It includes two jobs: ''build'' for testing and building the Vue.js app, and ''deploy''
    for deploying the app using commands specific to the chosen hosting service.'
  prefs: []
  type: TYPE_NORMAL
- en: Environment Variables and Secrets
  prefs: []
  type: TYPE_NORMAL
- en: When deploying to hosting services or accessing external services, sensitive
    information such as API keys or authentication tokens is often required. GitHub
    Actions allows developers to store and use secrets securely.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Actions workflow file (.github/workflows/ci-cd.yml)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: 'deploy:'
  prefs: []
  type: TYPE_NORMAL
- en: 'runs-on: ubuntu-latest'
  prefs: []
  type: TYPE_NORMAL
- en: 'needs: build'
  prefs: []
  type: TYPE_NORMAL
- en: 'steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Deploy to Hosting Service'
  prefs: []
  type: TYPE_NORMAL
- en: 'run: |'
  prefs: []
  type: TYPE_NORMAL
- en: Add commands to deploy to hosting service (e.g., Firebase, Netlify)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: echo ${{ secrets.API_KEY }}
  prefs: []
  type: TYPE_NORMAL
- en: 'env:'
  prefs: []
  type: TYPE_NORMAL
- en: 'CI: false'
  prefs: []
  type: TYPE_NORMAL
- en: 'API_KEY: ${{ secrets.API_KEY }}'
  prefs: []
  type: TYPE_NORMAL
- en: In this modified example, the API key is accessed as an environment variable,
    and the actual value is retrieved from GitHub Secrets.
  prefs: []
  type: TYPE_NORMAL
- en: CI/CD with Netlify
  prefs: []
  type: TYPE_NORMAL
- en: For Vue.js applications, Netlify is a hosting service that integrates seamlessly
    with GitHub Actions for CI/CD. Developers can leverage the Netlify CLI to deploy
    the application directly from the GitHub Actions workflow.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Actions workflow file (.github/workflows/ci-cd.yml)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: 'deploy:'
  prefs: []
  type: TYPE_NORMAL
- en: 'runs-on: ubuntu-latest'
  prefs: []
  type: TYPE_NORMAL
- en: 'needs: build'
  prefs: []
  type: TYPE_NORMAL
- en: 'steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Deploy to Netlify'
  prefs: []
  type: TYPE_NORMAL
- en: 'run: npx netlify deploy --prod'
  prefs: []
  type: TYPE_NORMAL
- en: 'env:'
  prefs: []
  type: TYPE_NORMAL
- en: 'CI: false'
  prefs: []
  type: TYPE_NORMAL
- en: 'NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}'
  prefs: []
  type: TYPE_NORMAL
- en: This example demonstrates deploying to Netlify using the Netlify CLI. The NETLIFY_AUTH_TOKEN
    is retrieved from GitHub Secrets to authenticate the deployment.
  prefs: []
  type: TYPE_NORMAL
- en: The "Continuous Integration and Deployment (CI/CD) for Vue.js" section equips
    Vue.js developers with the knowledge and tools to implement automated CI/CD workflows.
    By leveraging GitHub Actions, environment variables, and integrating with hosting
    services like Netlify, developers can ensure consistent testing, building, and
    deployment processes, contributing to a more efficient and reliable Vue.js application
    development lifecycle.
  prefs: []
  type: TYPE_NORMAL
