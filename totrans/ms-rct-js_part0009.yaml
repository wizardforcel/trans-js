- en: 'Chapter 5: Handling Events and User Input'
  id: totrans-0
  prefs:
  - PREF_H1
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章：处理事件和用户输入
- en: One of the key aspects of building interactive and dynamic web applications
    with React is the ability to handle user input and respond to events. In this
    chapter, we will explore how to handle events such as clicks, form submissions,
    and keyboard interactions in React components. You'll learn the fundamentals of
    event handling and discover best practices for creating responsive user interfaces.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 React 构建交互式和动态的 Web 应用程序时，处理用户输入并响应事件是一个关键方面。在本章中，我们将探索如何在 React 组件中处理点击、表单提交和键盘交互等事件。你将学习事件处理的基本知识，并发现创建响应式用户界面的最佳实践。
- en: Understanding Event Handling in React
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 React 中的事件处理
- en: 'Event handling in React is similar to handling events in vanilla JavaScript,
    but with some important differences due to React''s declarative nature. In React,
    events are attached to JSX elements and are specified using camelCase naming conventions,
    such as `onClick` and `onChange`. Here''s an overview of how event handling works
    in React:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 React 中处理事件与在原生 JavaScript 中处理事件类似，但由于 React 的声明式特性，它有一些重要的区别。在 React 中，事件附加到
    JSX 元素上，并使用 camelCase 命名约定来指定，例如 `onClick` 和 `onChange`。以下是 React 中事件处理的概述：
- en: '1\. **Event Propagation**: React uses a synthetic event system that wraps the
    browser''s native events. When an event occurs (e.g., a button click), React''s
    synthetic event is created and passed to the event handler. This allows React
    to handle events consistently across different browsers.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. **事件传播**：React 使用合成事件系统，封装了浏览器的原生事件。当事件发生时（例如，点击按钮），React 的合成事件被创建并传递给事件处理程序。这使得
    React 能在不同浏览器中一致地处理事件。
- en: '2\. **Prevent Default**: React components can call `preventDefault` on the
    synthetic event to prevent the default behavior of HTML elements, such as form
    submission or link navigation.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. **防止默认行为**：React 组件可以在合成事件上调用 `preventDefault` 来阻止 HTML 元素的默认行为，例如表单提交或链接导航。
- en: '3\. **Binding Event Handlers**: In class components, event handlers are usually
    bound to the instance of the component. In functional components, you can use
    closures or the `useCallback` hook to maintain the function''s reference between
    renders.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. **绑定事件处理程序**：在类组件中，事件处理程序通常绑定到组件的实例。在函数组件中，你可以使用闭包或 `useCallback` 钩子来保持函数引用在重新渲染时的一致性。
- en: '4\. **Updating State**: Event handlers often involve updating component state.
    When state changes, React re-renders the component, reflecting the updated UI.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. **更新状态**：事件处理程序通常涉及更新组件状态。当状态发生变化时，React 会重新渲染组件，反映更新后的 UI。
- en: '5\. **Passing Data**: You can pass data or additional information to event
    handlers by using arrow functions or `bind` in class components. This allows you
    to handle events with contextual information.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. **传递数据**：你可以通过使用箭头函数或在类组件中使用 `bind` 来向事件处理程序传递数据或附加信息。这允许你在处理事件时使用上下文信息。
- en: Basic Event Handling Example
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本事件处理示例
- en: Let's start with a basic example of handling a button click event in React.
    We'll create a simple component called `ClickCounter` that displays a button and
    counts the number of times it's clicked.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个处理按钮点击事件的基本示例开始。我们将创建一个简单的组件，名为`ClickCounter`，它显示一个按钮并统计按钮被点击的次数。
- en: 'Step 1: Create a New Component'
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 1 步：创建新组件
- en: In your React project, create a new file called `ClickCounter.js`. This file
    will contain the `ClickCounter` component.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 React 项目中，创建一个名为`ClickCounter.js`的新文件。该文件将包含`ClickCounter`组件。
- en: 'Step 2: Define the Component'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 2 步：定义组件
- en: 'Open the `ClickCounter.js` file and define the `ClickCounter` component as
    follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`ClickCounter.js`文件，并按如下方式定义`ClickCounter`组件：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中：
- en: '- We import `React` and `Component` from ''react''.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '- 我们从''react''导入`React`和`Component`。'
- en: '- We define the `ClickCounter` class component, which initializes its state
    with a `count` property set to 0.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '- 我们定义了`ClickCounter`类组件，并通过初始化一个`count`属性为 0 的状态来定义其初始状态。'
- en: '- The `handleClick` method updates the `count` state when the button is clicked.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '- `handleClick`方法会在按钮点击时更新`count`状态。'
- en: '- In the `render` method, we display the current click count and attach the
    `handleClick` method to the button''s `onClick` event.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '- 在`render`方法中，我们显示当前的点击次数，并将`handleClick`方法绑定到按钮的`onClick`事件。'
- en: 'Step 3: Use the Component'
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 3 步：使用组件
- en: 'To use the `ClickCounter` component, import it in another component (e.g.,
    `App.js`) and render it. Here''s an example of how to use it:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`ClickCounter`组件，在另一个组件中（例如，`App.js`）导入它并进行渲染。以下是如何使用它的示例：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, when you view your React application, you'll see the "Click me" button,
    and each click will increment the count displayed on the page.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你查看你的 React 应用程序时，你将看到“Click me”按钮，每次点击按钮时，页面上显示的计数将增加。
- en: Handling Form Submissions
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理表单提交
- en: Handling form submissions is a common task in web development. React simplifies
    this process by allowing you to create controlled form elements and manage their
    state. Let's create a simple form that allows users to submit their names.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 处理表单提交是 Web 开发中常见的任务。React 简化了这个过程，通过允许你创建受控表单元素并管理它们的状态。让我们创建一个简单的表单，允许用户提交他们的名字。
- en: 'Step 1: Create a New Component'
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 1 步：创建新组件
- en: In your React project, create a new file called `NameForm.js`. This file will
    contain the `NameForm` component.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 React 项目中，创建一个名为`NameForm.js`的新文件。该文件将包含`NameForm`组件。
- en: 'Step 2: Define the Component'
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 2 步：定义组件
- en: 'Open the `NameForm.js` file and define the `NameForm` component as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`NameForm.js`文件，并按如下方式定义`NameForm`组件：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中：
- en: '- We define the `NameForm` class component, which has two state properties:
    `name` (for user input) and `submittedName` (to display the submitted name).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '- 我们定义了`NameForm`类组件，它有两个状态属性：`name`（用于用户输入）和`submittedName`（用于显示提交的名称）。'
- en: '- The `handleNameChange` method updates the `name` state whenever the user
    types in the input field.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '- `handleNameChange`方法会在用户输入字段中输入时更新`name`状态。'
- en: '- The `handleSubmit` method prevents the default form submission behavior,
    updates the `submittedName` state with the current value of `name`, and displays
    the submitted name.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`handleSubmit` 方法阻止了默认的表单提交行为，使用当前的 `name` 值更新了 `submittedName` 状态，并显示了提交的名字。'
- en: '- In the `render` method, we display the submitted name and create a controlled
    form element. The input field''s value is bound to the `name` state, and the `onChange`
    event is used to call `handleNameChange` when the user types.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `render` 方法中，我们显示提交的名字，并创建一个受控表单元素。输入框的值绑定到 `name` 状态，`onChange` 事件用于在用户输入时调用
    `handleNameChange`。
- en: 'Step 3: Use the Component'
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 3：使用组件
- en: 'To use the `NameForm` component, import it in another component (e.g., `App.js`)
    and render it. Here''s an example of how to use it:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `NameForm` 组件，在另一个组件（例如，`App.js`）中导入并渲染它。以下是如何使用它的示例：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, when you view your React application, you'll see a form where you can enter
    your name and submit it. The submitted name will be displayed on the page.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你查看 React 应用时，你会看到一个表单，可以在其中输入你的名字并提交。提交的名字将显示在页面上。
- en: Handling Conditional Rendering
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理条件渲染
- en: Conditional rendering in React involves showing or hiding elements based on
    certain conditions or user interactions. It allows you to create dynamic user
    interfaces that respond to different states and events. Let's explore how to handle
    conditional rendering with a practical example.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: React 中的条件渲染是指根据特定条件或用户交互显示或隐藏元素。它允许你创建响应不同状态和事件的动态用户界面。让我们通过一个实际示例来探索如何处理条件渲染。
- en: 'Step 1: Create a New Component'
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 1：创建新组件
- en: In your React project, create a new file called `Greeting.js`. This file will
    contain the `Greeting` component.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 React 项目中，创建一个名为 `Greeting.js` 的新文件。这个文件将包含 `Greeting` 组件。
- en: 'Step 2: Define the Component'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 2：定义组件
- en: 'Open the `Greeting.js` file and define the `Greeting` component as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `Greeting.js` 文件，并定义 `Greeting` 组件，如下所示：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In this code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中：
- en: '- We define the `Greeting` class component, which has a `isUserLoggedIn` state
    property to track whether the user is logged in.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了 `Greeting` 类组件，该组件具有 `isUserLoggedIn` 状态属性，用于跟踪用户是否已登录。
- en: '- The `toggleUserLogin` method toggles the `isUserLoggedIn` state when the
    button is clicked.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`toggleUserLogin` 方法在按钮被点击时切换 `isUserLoggedIn` 状态。'
- en: '- In the `render` method, we conditionally render a greeting message based
    on the `isUserLoggedIn` state. If the user is logged in, we display a welcome
    message; otherwise, we prompt the user to log in.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `render` 方法中，我们根据 `isUserLoggedIn` 状态条件渲染问候消息。如果用户已登录，我们显示欢迎消息；否则，我们提示用户登录。
- en: 'Step 3: Use the Component'
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 3：使用组件
- en: 'To use the `Greeting` component, import it in another component (e.g., `App.js`)
    and render it. Here''s an example of how to use it:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `Greeting` 组件，在另一个组件（例如，`App.js`）中导入并渲染它。以下是如何使用它的示例：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, when you view your React application, you'll see a "Login" button. Clicking
    the button will toggle the greeting message between "Welcome, User! You are logged
    in." and "Please log in to access your account."
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您查看 React 应用程序时，会看到一个“登录”按钮。点击该按钮将切换问候消息，显示“欢迎，用户！您已登录。”或“请登录以访问您的账户。”
- en: Conclusion and Best Practices
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论与最佳实践
- en: 'In this chapter, you''ve learned how to handle events and user input in React
    components. You''ve explored event handling for common scenarios like button clicks,
    form submissions, and conditional rendering. Here are some best practices to keep
    in mind:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经学习了如何在 React 组件中处理事件和用户输入。您已经探索了常见场景下的事件处理，如按钮点击、表单提交和条件渲染。以下是一些需要记住的最佳实践：
- en: '1\. **Use Synthetic Events**: React''s synthetic event system provides consistent
    event handling across browsers. Always use React''s event handling, such as `onClick`
    and `onChange`, rather than native DOM events.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. **使用合成事件**：React 的合成事件系统在不同浏览器中提供一致的事件处理。始终使用 React 的事件处理方式，如 `onClick`
    和 `onChange`，而不是原生 DOM 事件。
- en: '2\. **Prevent Default**: When handling events like form submissions, call `event.preventDefault()`
    to prevent the default browser behavior. This allows you to handle the submission
    with custom logic.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. **防止默认行为**：在处理事件（如表单提交）时，调用 `event.preventDefault()` 来防止浏览器的默认行为。这允许您用自定义逻辑处理提交。
- en: '3\. **Update State**: Event handlers often involve updating component state.
    Use `setState` to update state properties and trigger re-renders.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. **更新状态**：事件处理器通常涉及更新组件状态。使用 `setState` 来更新状态属性并触发重新渲染。
- en: '4\. **Conditional Rendering**: Conditional rendering is powerful for displaying
    content based on different states or user interactions. Use conditional rendering
    to create dynamic user interfaces.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. **条件渲染**：条件渲染对于根据不同状态或用户交互显示内容非常有效。使用条件渲染来创建动态的用户界面。
- en: '5\. **Controlled Components**: For form elements, create controlled components
    by binding their values to state properties. This ensures that the component reflects
    the current state of the input.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. **受控组件**：对于表单元素，通过将它们的值绑定到状态属性来创建受控组件。这确保了组件反映输入的当前状态。
- en: As you continue to build React applications, event handling and user input will
    be fundamental to creating interactive and responsive user interfaces. Experiment
    with different event types and scenarios to become proficient in React's event
    handling capabilities.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您继续构建 React 应用程序，事件处理和用户输入将是创建互动和响应式用户界面的基础。尝试不同的事件类型和场景，逐步熟练掌握 React 的事件处理能力。
