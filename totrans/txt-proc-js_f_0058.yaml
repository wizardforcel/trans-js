- en: '| Recipe 47 | Testing a Pattern with the Positive Lookahead |'
  prefs: []
  type: TYPE_TB
- en: Task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Suppose your task is to fix a mistake in several documents that inaccurately
    list a company’s revenue in dollars, instead of euros. You need to find all instances
    of “$90.3 million” and replace “$” with “€.”
  prefs: []
  type: TYPE_NORMAL
- en: 'So, what you need is a regex pattern that finds “$90.3 million” in a sentence
    such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | "The Company posted a September quarter record revenue of $90.3 million,
    |'
  prefs: []
  type: TYPE_TB
- en: '|   | up 8 percent year over year." |'
  prefs: []
  type: TYPE_TB
- en: But you want to match and replace only the currency sign, not the entire string.
    You need a way to exclude “90.3 million” from the match result.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use a positive lookahead denoted by (?= ... ) to match the part of the string
    that you don’t want to include in the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/positive_lookahead/positive_lookahead_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/positive_lookahead/positive_lookahead_ex1.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** str = *`The Company posted a September quarter record revenue*
    |'
  prefs: []
  type: TYPE_TB
- en: '|   | *of $90.3 million, up 8 percent year over year.`*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** re = */**\$(?=**90**\.**3**\s**million**)**/ig*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// Replace only $ with €* |'
  prefs: []
  type: TYPE_TB
- en: '|   | str.replace(re, *"€"*); |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// → "The Company posted a September quarter record revenue \n* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// of €90.3 million, up 8 percent year over year."* |'
  prefs: []
  type: TYPE_TB
- en: With the (?= ... ) syntax, you require a pattern to appear after the regex match
    without including it in the match.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Lookaheads are non-capturing groups that allow us to match a pattern based on
    the substring that follows the pattern. For a positive lookahead match to be successful,
    it must match a pattern followed by the pattern in subexpression.
  prefs: []
  type: TYPE_NORMAL
- en: Notice the output of match() in the following code, which is only “$.”
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/positive_lookahead/positive_lookahead_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/positive_lookahead/positive_lookahead_ex2.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** str = *"$90.3 million"*; |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** re = */**\$(?=**90**\.**3**\s**million**)**/*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | str.match(re)[0]; *// → "$"* |'
  prefs: []
  type: TYPE_TB
- en: When using a lookahead, the subexpression is not included in the result. It
    also can’t be referenced with a backreference.
  prefs: []
  type: TYPE_NORMAL
- en: There’s a workaround, though. If you place capturing parentheses around the
    expression in the lookahead like (?=(regex)), you can capture the match in lookarounds,
    too. Wrapping the entire lookahead in parentheses won’t work because when the
    capturing group wants to store the match, the lookahead will already have discarded
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Don’t confuse capturing and matching. The positive lookahead assertion (?=
    ... ) and the non-capturing group (?: ... ) serve different purposes. While both
    don’t capture the substring they match, the non-capturing group includes the substring
    in the overall match, while the positive lookahead assertion does not.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we rewrite the solution in this recipe to substitute a non-capturing
    group for the lookahead assertion, the entire match gets replaced:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/positive_lookahead/positive_lookahead_ex3.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/positive_lookahead/positive_lookahead_ex3.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** str = *`The Company posted a September quarter record revenue*
    |'
  prefs: []
  type: TYPE_TB
- en: '|   | *of $90.3 million, up 8 percent year over year.`*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** re = */**\$(?:**90**\.**3**\s**million**)**/ig*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | str.replace(re, *"€"*); |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// → "The Company posted a September quarter record revenue \n* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// of €, up 8 percent year over year."* |'
  prefs: []
  type: TYPE_TB
- en: For more on non-capturing groups, see Recipe 31, [*Extracting a Matched Value
    with the Capturing Group*](f_0042.xhtml#rcp.capturing_group_p2).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s dig a bit deeper into the regex pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | /\$(?=90\.3\smillion)/ig |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | ● \$ matches the character "$" literally |'
  prefs: []
  type: TYPE_TB
- en: '|   | ● (?=90.3\smillion) positive lookahead |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ 90 matches the characters "90" literally |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ \. matches the character "." literally |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ 3 matches the character "3" literally |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ \s matches any whitespace character |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ million matches the characters "million" literally |'
  prefs: []
  type: TYPE_TB
- en: '|   | Flags |'
  prefs: []
  type: TYPE_TB
- en: '|   | ● i case-insensitive match |'
  prefs: []
  type: TYPE_TB
- en: '|   | ● g global match |'
  prefs: []
  type: TYPE_TB
- en: 'Use a lookahead to inspect whether it’s possible to match a specific string
    without actually matching it. You have two types of lookaheads at your disposal:
    positive lookahead and negative lookahead. The positive lookahead is denoted by
    the (?= ... ) syntax, and it ensures that a pattern is followed by another pattern.
    On the other hand, negative lookahead, which we will focus on in the next recipe,
    is denoted by (?! ... ), and it guarantees that a pattern is not followed by another
    pattern.'
  prefs: []
  type: TYPE_NORMAL
