- en: 'Chapter 7: JavaScript Events and Event Handling'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Chapter 6, we explored JavaScript objects and their properties and methods.
    Now, let's dive into the exciting world of JavaScript events and event handling.
    Events allow us to respond to user interactions and create dynamic and interactive
    web applications.
  prefs: []
  type: TYPE_NORMAL
- en: 7.1 Introduction to Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In web development, events are actions or occurrences that happen in the browser.
    These events can be triggered by user interactions, such as clicking a button,
    hovering over an element, or submitting a form. JavaScript provides a powerful
    mechanism for capturing and handling these events.
  prefs: []
  type: TYPE_NORMAL
- en: 7.2 Event Handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Event handlers are functions that are executed in response to specific events.
    We can attach event handlers to HTML elements to define what should happen when
    an event occurs. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we select an HTML button element with the id "myButton" using
    `document.getElementById()`. We then assign an anonymous function to the `onclick`
    event handler of the button. When the button is clicked, the function is executed,
    and an alert message saying "Button clicked!" is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 7.3 Event Listeners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In addition to event handlers, we can also use event listeners to handle events.
    Event listeners provide a more flexible way of attaching multiple event handlers
    to an element. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we use the `addEventListener()` method to attach a "click"
    event listener to the button element. The listener is defined as an anonymous
    function, which displays the alert message when the button is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 7.4 Event Object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When an event occurs, JavaScript creates an event object that contains information
    about the event. This object can be accessed within the event handler or listener
    function to perform specific actions based on the event details. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we access the `clientX` and `clientY` properties of the event
    object to log the coordinates of the mouse click on the button.
  prefs: []
  type: TYPE_NORMAL
- en: 7.5 Event Propagation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Event propagation refers to the order in which events are handled when an event
    occurs on nested elements. There are two types of event propagation: bubbling
    and capturing.'
  prefs: []
  type: TYPE_NORMAL
- en: In bubbling, the event is first handled by the innermost element and then propagates
    to its parent elements up the DOM tree. This is the default behavior for most
    events.
  prefs: []
  type: TYPE_NORMAL
- en: In capturing, the event is first handled by the outermost ancestor and then
    propagates down the DOM tree to the innermost element.
  prefs: []
  type: TYPE_NORMAL
- en: 7.6 Event Delegation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Event delegation is a technique where we attach a single event handler to a
    parent element and handle events for its child elements. This is useful when dynamically
    adding or removing child elements, as we don't need to attach event handlers individually
    to each element. The event propagates from the child element to the parent, and
    we can identify the specific target of the event using event delegation.
  prefs: []
  type: TYPE_NORMAL
- en: 7.7 Conclusion
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we explored JavaScript events and event handling, which allow
    us to create dynamic and interactive web applications. We learned about event
    handlers and event listeners, how to attach them to HTML elements, and how to
    respond to specific events. We also discovered the event object, which provides
    information about the event. Additionally, we discussed event propagation, including
    bubbling and capturing, and the concept of event delegation.
  prefs: []
  type: TYPE_NORMAL
