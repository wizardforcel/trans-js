- en: 'Chapter 7: JavaScript Events and Event Handling'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章：JavaScript 事件与事件处理
- en: In Chapter 6, we explored JavaScript objects and their properties and methods.
    Now, let's dive into the exciting world of JavaScript events and event handling.
    Events allow us to respond to user interactions and create dynamic and interactive
    web applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在第6章中，我们探讨了 JavaScript 对象及其属性和方法。现在，让我们深入了解 JavaScript 事件和事件处理的精彩世界。事件使我们能够响应用户交互，创建动态和互动的
    web 应用程序。
- en: 7.1 Introduction to Events
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.1 事件简介
- en: In web development, events are actions or occurrences that happen in the browser.
    These events can be triggered by user interactions, such as clicking a button,
    hovering over an element, or submitting a form. JavaScript provides a powerful
    mechanism for capturing and handling these events.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 web 开发中，事件是发生在浏览器中的操作或事件。这些事件可以通过用户的交互触发，例如点击按钮、悬停在某个元素上或提交表单。JavaScript 提供了一个强大的机制来捕获和处理这些事件。
- en: 7.2 Event Handlers
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.2 事件处理程序
- en: 'Event handlers are functions that are executed in response to specific events.
    We can attach event handlers to HTML elements to define what should happen when
    an event occurs. Here''s an example:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理程序是响应特定事件而执行的函数。我们可以将事件处理程序附加到 HTML 元素上，定义当事件发生时应该执行的操作。以下是一个示例：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, we select an HTML button element with the id "myButton" using
    `document.getElementById()`. We then assign an anonymous function to the `onclick`
    event handler of the button. When the button is clicked, the function is executed,
    and an alert message saying "Button clicked!" is displayed.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用 `document.getElementById()` 选择了 id 为 "myButton" 的 HTML 按钮元素。然后，我们将一个匿名函数赋给该按钮的
    `onclick` 事件处理程序。当按钮被点击时，函数被执行，并弹出一个消息框，显示 "按钮被点击！"。
- en: 7.3 Event Listeners
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.3 事件监听器
- en: 'In addition to event handlers, we can also use event listeners to handle events.
    Event listeners provide a more flexible way of attaching multiple event handlers
    to an element. Here''s an example:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 除了事件处理程序，我们还可以使用事件监听器来处理事件。事件监听器提供了一种更灵活的方式，将多个事件处理程序附加到一个元素上。以下是一个示例：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, we use the `addEventListener()` method to attach a "click"
    event listener to the button element. The listener is defined as an anonymous
    function, which displays the alert message when the button is clicked.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用 `addEventListener()` 方法将一个 "click" 事件监听器附加到按钮元素上。监听器定义为一个匿名函数，当按钮被点击时，显示警告消息。
- en: 7.4 Event Object
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.4 事件对象
- en: 'When an event occurs, JavaScript creates an event object that contains information
    about the event. This object can be accessed within the event handler or listener
    function to perform specific actions based on the event details. Here''s an example:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当事件发生时，JavaScript 会创建一个事件对象，该对象包含关于事件的信息。可以在事件处理程序或监听器函数中访问此对象，以根据事件详情执行特定操作。以下是一个示例：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, we access the `clientX` and `clientY` properties of the event
    object to log the coordinates of the mouse click on the button.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们访问事件对象的 `clientX` 和 `clientY` 属性，以记录鼠标点击按钮时的坐标。
- en: 7.5 Event Propagation
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.5 事件传播
- en: 'Event propagation refers to the order in which events are handled when an event
    occurs on nested elements. There are two types of event propagation: bubbling
    and capturing.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 事件传播指的是当事件发生在嵌套元素上时，事件处理的顺序。事件传播有两种类型：冒泡和捕获。
- en: In bubbling, the event is first handled by the innermost element and then propagates
    to its parent elements up the DOM tree. This is the default behavior for most
    events.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在冒泡中，事件首先由最内层的元素处理，然后传播到其父元素，向上遍历 DOM 树。这是大多数事件的默认行为。
- en: In capturing, the event is first handled by the outermost ancestor and then
    propagates down the DOM tree to the innermost element.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在捕获中，事件首先由最外层的祖先元素处理，然后向下传播到 DOM 树的最内层元素。
- en: 7.6 Event Delegation
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.6 事件委托
- en: Event delegation is a technique where we attach a single event handler to a
    parent element and handle events for its child elements. This is useful when dynamically
    adding or removing child elements, as we don't need to attach event handlers individually
    to each element. The event propagates from the child element to the parent, and
    we can identify the specific target of the event using event delegation.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 事件委托是一种技巧，通过将单个事件处理程序附加到父元素上，来处理其子元素的事件。当动态添加或删除子元素时，这种方法非常有用，因为我们无需单独为每个元素附加事件处理程序。事件从子元素传播到父元素，我们可以使用事件委托来识别事件的具体目标。
- en: 7.7 Conclusion
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 7.7 结论
- en: In this chapter, we explored JavaScript events and event handling, which allow
    us to create dynamic and interactive web applications. We learned about event
    handlers and event listeners, how to attach them to HTML elements, and how to
    respond to specific events. We also discovered the event object, which provides
    information about the event. Additionally, we discussed event propagation, including
    bubbling and capturing, and the concept of event delegation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 JavaScript 事件和事件处理，它们使我们能够创建动态和交互式的 Web 应用程序。我们了解了事件处理程序和事件监听器，如何将它们附加到
    HTML 元素上，以及如何响应特定的事件。我们还发现了事件对象，它提供了关于事件的信息。此外，我们讨论了事件传播，包括冒泡和捕获，以及事件委托的概念。
