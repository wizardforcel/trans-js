- en: 'Chapter 7: DOM Manipulation and Events'
  id: totrans-0
  prefs:
  - PREF_H1
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章：DOM操作和事件
- en: In Chapter 6, we explored arrays and array methods, which allowed us to work
    with collections of data effectively. Now, we will dive into DOM (Document Object
    Model) manipulation and events in JavaScript. The DOM is a programming interface
    for HTML and XML documents, representing the structure of a web page as a tree
    of objects. JavaScript enables us to manipulate the DOM, making web pages dynamic
    and interactive. Understanding DOM manipulation and handling events is crucial
    for building interactive and responsive web applications. Let's dive in and explore
    the world of DOM manipulation and events!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在第六章中，我们探讨了数组和数组方法，这使我们能够有效地处理数据集合。现在，我们将深入了解JavaScript中的DOM（文档对象模型）操作和事件。DOM是HTML和XML文档的编程接口，将网页的结构表示为一个对象树。JavaScript使我们能够操作DOM，从而使网页变得动态和互动。理解DOM操作和事件处理对于构建互动性强和响应迅速的网页应用程序至关重要。让我们深入探索DOM操作和事件的世界吧！
- en: 'The DOM: Document Object Model'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DOM：文档对象模型
- en: The Document Object Model (DOM) is a programming interface for HTML and XML
    documents, providing a structured representation of a web page. The DOM represents
    the elements on a web page as objects, allowing us to access, modify, and manipulate
    them using JavaScript.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 文档对象模型（DOM）是用于HTML和XML文档的编程接口，提供了网页的结构化表示。DOM将网页上的元素表示为对象，允许我们使用JavaScript访问、修改和操作这些元素。
- en: 'Accessing DOM Elements:'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问DOM元素：
- en: We can access DOM elements using various methods provided by JavaScript, such
    as `getElementById()`, `getElementsByClassName()`, `getElementsByTagName()`, and
    `querySelector()`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用JavaScript提供的各种方法访问DOM元素，例如`getElementById()`、`getElementsByClassName()`、`getElementsByTagName()`和`querySelector()`。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the above examples, we access DOM elements with the IDs "title," the class
    name "content," the tag name "li," and the first "li" element using different
    DOM methods.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们使用不同的DOM方法访问具有ID为"title"、类名为"content"、标签名为"li"和第一个"li"元素的DOM元素。
- en: 'Modifying DOM Elements:'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改DOM元素：
- en: Once we have accessed DOM elements, we can modify their properties, attributes,
    and content using JavaScript.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦访问到DOM元素，我们就可以使用JavaScript修改它们的属性、属性值和内容。
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the above example, we modify the `innerHTML`, `style.color`, `textContent`,
    and `classList` properties of various DOM elements.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们修改了各种DOM元素的`innerHTML`、`style.color`、`textContent`和`classList`属性。
- en: 'Handling Events:'
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件处理：
- en: Events are actions that occur on a web page, such as clicking a button, hovering
    over an element, or submitting a form. JavaScript allows us to handle these events
    and execute specific code when an event occurs.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 事件是发生在网页上的动作，例如点击按钮、悬停在元素上或提交表单。JavaScript允许我们处理这些事件，并在事件发生时执行特定的代码。
- en: 'Event Listeners:'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 事件监听器：
- en: We can add event listeners to DOM elements to listen for specific events and
    execute corresponding functions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为DOM元素添加事件监听器，以监听特定的事件并执行相应的函数。
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the above example, we add a click event listener to the button element, and
    when the button is clicked, the specified function is executed.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们在按钮元素上添加了点击事件监听器，当按钮被点击时，指定的函数将被执行。
- en: 'Common DOM Events:'
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常见的 DOM 事件：
- en: 'There are many events available to handle different interactions on a web page,
    including:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多事件可用于处理网页上的不同交互，包括：
- en: '- `click`: Occurs when an element is clicked.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '- `click`：当元素被点击时触发。'
- en: '- `mouseover`: Occurs when the mouse pointer is over an element.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '- `mouseover`：当鼠标指针悬停在元素上时触发。'
- en: '- `mouseout`: Occurs when the mouse pointer leaves an element.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '- `mouseout`：当鼠标指针离开元素时触发。'
- en: '- `keyup`: Occurs when a key is released on the keyboard.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '- `keyup`：当键盘上的键被释放时触发。'
- en: '- `submit`: Occurs when a form is submitted.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '- `submit`：当表单被提交时触发。'
- en: '- `change`: Occurs when the value of an input element is changed.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '- `change`：当输入元素的值发生变化时触发。'
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the above example, we add a `keyup` event listener to an input element, and
    when a key is released in the input, the specified function is executed.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们在输入元素上添加了一个 `keyup` 事件监听器，当在输入框中释放一个键时，指定的函数将被执行。
- en: 'Event Propagation: Bubbling and Capturing'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 事件传播：冒泡与捕获
- en: 'Events in the DOM follow a process called event propagation, which includes
    two phases: capturing and bubbling. During the capturing phase, the event is triggered
    on the ancestor elements before reaching the target element. During the bubbling
    phase, the event is triggered on the target element and then propagated to its
    ancestor elements.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: DOM 中的事件遵循一种叫做事件传播的过程，包含两个阶段：捕获阶段和冒泡阶段。在捕获阶段，事件会先在祖先元素上触发，然后才到达目标元素。在冒泡阶段，事件先在目标元素上触发，然后向上传播到祖先元素。
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the above example, we have two nested `div` elements. We add a click event
    listener to both elements, and the outer element listens during the capturing
    phase (`useCapture` set to `true`). When we click on the inner element, the output
    will be:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们有两个嵌套的 `div` 元素。我们在这两个元素上都添加了点击事件监听器，外层元素在捕获阶段监听（`useCapture` 设置为 `true`）。当我们点击内层元素时，输出将是：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Event Delegation:'
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 事件委托：
- en: Event delegation is a technique where we add a single event listener to a parent
    element to handle events for its child elements. It is useful when we have dynamically
    added elements or a large number of elements.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 事件委托是一种技术，通过将单个事件监听器添加到父元素上来处理其子元素的事件。当我们有动态添加的元素或大量元素时，这种方式非常有用。
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the above example, we add a click event listener to the `ul` element (parent).
    When we click on any of the `li` elements (children), the output will be:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们在 `ul` 元素（父元素）上添加了一个点击事件监听器。当我们点击任何一个 `li` 元素（子元素）时，输出将是：
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Conclusion:'
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论：
- en: In this chapter, we explored
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们探讨了
- en: DOM manipulation and events in JavaScript. The DOM allows us to access, modify,
    and manipulate elements on a web page, making it dynamic and interactive. We learned
    how to access DOM elements using different methods, modify their properties and
    content, and handle events using event listeners. Understanding DOM manipulation
    and event handling is essential for building interactive and responsive web applications.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的DOM操作和事件。DOM使我们能够访问、修改和操作网页上的元素，使其变得动态和互动。我们学习了如何使用不同的方法访问DOM元素，修改它们的属性和内容，并通过事件监听器处理事件。理解DOM操作和事件处理对于构建互动性强且响应迅速的Web应用程序至关重要。
- en: By leveraging DOM manipulation and event handling, we can create dynamic user
    interfaces, respond to user interactions, and build feature-rich web applications.
    As you continue your journey in JavaScript, practice these techniques to master
    the art of DOM manipulation and event handling.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用DOM操作和事件处理，我们可以创建动态的用户界面，响应用户的互动，并构建功能丰富的Web应用程序。随着你在JavaScript中的不断深入，练习这些技巧，掌握DOM操作和事件处理的艺术。
