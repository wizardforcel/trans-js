- en: 'Chapter 7: DOM Manipulation and Events'
  prefs:
  - PREF_H1
  - PREF_H1
  type: TYPE_NORMAL
- en: In Chapter 6, we explored arrays and array methods, which allowed us to work
    with collections of data effectively. Now, we will dive into DOM (Document Object
    Model) manipulation and events in JavaScript. The DOM is a programming interface
    for HTML and XML documents, representing the structure of a web page as a tree
    of objects. JavaScript enables us to manipulate the DOM, making web pages dynamic
    and interactive. Understanding DOM manipulation and handling events is crucial
    for building interactive and responsive web applications. Let's dive in and explore
    the world of DOM manipulation and events!
  prefs: []
  type: TYPE_NORMAL
- en: 'The DOM: Document Object Model'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Document Object Model (DOM) is a programming interface for HTML and XML
    documents, providing a structured representation of a web page. The DOM represents
    the elements on a web page as objects, allowing us to access, modify, and manipulate
    them using JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'Accessing DOM Elements:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can access DOM elements using various methods provided by JavaScript, such
    as `getElementById()`, `getElementsByClassName()`, `getElementsByTagName()`, and
    `querySelector()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the above examples, we access DOM elements with the IDs "title," the class
    name "content," the tag name "li," and the first "li" element using different
    DOM methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modifying DOM Elements:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once we have accessed DOM elements, we can modify their properties, attributes,
    and content using JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, we modify the `innerHTML`, `style.color`, `textContent`,
    and `classList` properties of various DOM elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Handling Events:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Events are actions that occur on a web page, such as clicking a button, hovering
    over an element, or submitting a form. JavaScript allows us to handle these events
    and execute specific code when an event occurs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Event Listeners:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can add event listeners to DOM elements to listen for specific events and
    execute corresponding functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, we add a click event listener to the button element, and
    when the button is clicked, the specified function is executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Common DOM Events:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are many events available to handle different interactions on a web page,
    including:'
  prefs: []
  type: TYPE_NORMAL
- en: '- `click`: Occurs when an element is clicked.'
  prefs: []
  type: TYPE_NORMAL
- en: '- `mouseover`: Occurs when the mouse pointer is over an element.'
  prefs: []
  type: TYPE_NORMAL
- en: '- `mouseout`: Occurs when the mouse pointer leaves an element.'
  prefs: []
  type: TYPE_NORMAL
- en: '- `keyup`: Occurs when a key is released on the keyboard.'
  prefs: []
  type: TYPE_NORMAL
- en: '- `submit`: Occurs when a form is submitted.'
  prefs: []
  type: TYPE_NORMAL
- en: '- `change`: Occurs when the value of an input element is changed.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, we add a `keyup` event listener to an input element, and
    when a key is released in the input, the specified function is executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Event Propagation: Bubbling and Capturing'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Events in the DOM follow a process called event propagation, which includes
    two phases: capturing and bubbling. During the capturing phase, the event is triggered
    on the ancestor elements before reaching the target element. During the bubbling
    phase, the event is triggered on the target element and then propagated to its
    ancestor elements.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the above example, we have two nested `div` elements. We add a click event
    listener to both elements, and the outer element listens during the capturing
    phase (`useCapture` set to `true`). When we click on the inner element, the output
    will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Event Delegation:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Event delegation is a technique where we add a single event listener to a parent
    element to handle events for its child elements. It is useful when we have dynamically
    added elements or a large number of elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the above example, we add a click event listener to the `ul` element (parent).
    When we click on any of the `li` elements (children), the output will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Conclusion:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we explored
  prefs: []
  type: TYPE_NORMAL
- en: DOM manipulation and events in JavaScript. The DOM allows us to access, modify,
    and manipulate elements on a web page, making it dynamic and interactive. We learned
    how to access DOM elements using different methods, modify their properties and
    content, and handle events using event listeners. Understanding DOM manipulation
    and event handling is essential for building interactive and responsive web applications.
  prefs: []
  type: TYPE_NORMAL
- en: By leveraging DOM manipulation and event handling, we can create dynamic user
    interfaces, respond to user interactions, and build feature-rich web applications.
    As you continue your journey in JavaScript, practice these techniques to master
    the art of DOM manipulation and event handling.
  prefs: []
  type: TYPE_NORMAL
