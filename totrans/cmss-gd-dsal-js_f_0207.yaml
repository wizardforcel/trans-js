- en: Chapter 2
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 第二章
- en: These are the solutions to the exercises found in the section`[Exercises](f_0030.xhtml#why.algorithms.matter.exercises)`.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这些是位于`[练习](f_0030.xhtml#why.algorithms.matter.exercises)`部分的习题解答。
- en: Linear search on this array would take four steps. We start at the beginning
    of the array and check each element from left to right. Because the`8`is the fourth
    number, we’ll find it in four steps.
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 对这个数组进行线性搜索需要四步。我们从数组的开头开始，从左到右检查每个元素。因为`8`是第四个数字，所以我们将在四步内找到它。
- en: Binary search would take just one step in this case. We start the binary search
    at the middlemost element, and the`8`just happens to be the middlemost element!
  id: totrans-3
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 在这种情况下，二分搜索只需一步。我们从中间元素开始进行二分搜索，而`8`恰好是中间元素！
- en: To solve this, we need to count how many times we halve 100,000 until we get
    down to 1。If we keep dividing 100,000 by 2, we see that it takes us sixteen times
    until we get down to about 1.53。If we halve this a seventeenth time, we get roughly
    0.76, which is already below 1。这 suggests that in a worst-case scenario, it takes
    either sixteen or seventeen steps to perform binary search on 100,000 elements.
    If your answer is either sixteen or seventeen, it means you understand this concept
    well. Nice job!
  id: totrans-4
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们需要计算将100,000减半到1需要多少次。如果我们不断将100,000除以2，可以看到我们需要十六次才能降到大约1.53。如果我们再减半一次，就会得到大约0.76，这已经低于1。这表明在最坏的情况下，对100,000个元素执行二分搜索需要十六或十七步。如果你的答案是十六或十七，说明你很好地理解了这个概念。干得不错！
- en: In practice, binary search takes sixteen steps. We can see this if we (tediously)
    walk through each step.
  id: totrans-5
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 实际上，二分搜索需要十六步。如果我们（冗长地）逐步演练每一步，就能看到这一点。
- en: Let’s start with 100,000 elements. When dealing with an even number of elements,
    there isn’t an exact item in the center. Instead, there are two central elements,
    and we arbitrarily search one of them. By searching this element, we’ve essentially
    taken it out of the picture, leaving behind 50,000 elements on one side of it
    and 49,999 on the other side. In the worst-case scenario, the value we’re searching
    for is among the 50,000 elements.
  id: totrans-6
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们从100,000个元素开始。当处理偶数个元素时，中心没有确切的项目。相反，有两个中心元素，我们任意搜索其中一个。通过搜索这个元素，我们实际上把它排除在外，留下50,000个元素在它的一侧，49,999个在另一侧。在最坏的情况下，我们要寻找的值就在这50,000个元素中。
- en: Let’s perform a few more searches. Our second search leaves us with 25,000 elements.
    Our third search leaves 12,500 elements remaining. Our fourth search whittles
    down the elements to 6,250。The fifth search leaves us with 3,125 elements.
  id: totrans-7
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们再进行几次搜索。我们的第二次搜索剩下25,000个元素。我们的第三次搜索剩下12,500个元素。我们的第四次搜索将元素减少到6,250。第五次搜索剩下3,125个元素。
- en: Now, this is the first time we’re encountering an odd number of elements. Here,
    there’s a single central element, and when we search it, each side will have 1,562
    elements. Therefore, when doing the math for our next search, we can subtract
    1 from 3,125 (since we’ve removed the central element from the picture) and divide
    3,124 by 2。这, as we noted, gives us 1,562.
  id: totrans-8
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，这是我们第一次遇到奇数个元素。这里有一个单一的中心元素，当我们搜索它时，每一侧都有1,562个元素。因此，在进行下一次搜索的数学计算时，我们可以从3,125中减去1（因为我们已经将中心元素排除在外），然后将3,124除以2。这，如我们所述，给我们1,562。
- en: When we continue this pattern, it emerges that it takes sixteen steps to halve
    100,000 until we find the value we’re searching for.
  id: totrans-9
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 当我们继续这个模式时，发现将100,000减半需要十六步，直到找到我们正在寻找的值。
