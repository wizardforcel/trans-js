- en: '| Recipe 17 | Determining Letter Case with charAt() |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: '| 配方 17 | 使用 charAt() 确定字母大小写 |'
- en: Task
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务
- en: Consider a scenario where you have a form that requests the user to enter their
    nickname. Some users may prefer to enter their nickname in lowercase letters,
    so your app shouldn’t automatically capitalize the nickname. But perhaps some
    users are casual about typing and intend for their name to be capitalized.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个表单，要求用户输入他们的昵称。有些用户可能会选择用小写字母输入昵称，所以你的应用程序不应该自动将昵称首字母大写。但也有一些用户可能在输入时比较随意，打算让他们的名字首字母大写。
- en: In such cases, you want to notify the user that their nickname will be stored
    and displayed exactly as entered. So, your app needs to be capable of identifying
    the letter case of the first character of the nickname.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你需要通知用户他们的昵称将按原样存储和显示。因此，您的应用需要能够识别昵称第一个字符的字母大小写。
- en: Solution
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use the strict inequality operator (!==) to compare the first character (index
    0) of the string to its lowercase version. If they are not equal, that means the
    string starts with a capital letter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 使用严格不等于运算符（!==）将字符串的第一个字符（索引 0）与其小写形式进行比较。如果它们不相等，说明字符串以大写字母开头：
- en: '[part_1/determining_letter_case/charAt_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/determining_letter_case/charAt_ex1.js)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_1/determining_letter_case/charAt_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/determining_letter_case/charAt_ex1.js)'
- en: '|   | **function** isCapital(str) { |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '|   | **function** isCapital(str) { |'
- en: '|   | **return** str.charAt(0) !== str.charAt(0).toLowerCase(); |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '|   | **return** str.charAt(0) !== str.charAt(0).toLowerCase(); |'
- en: '|   | } |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '|   | } |'
- en: '|   |  |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | isCapital(*"Dave"*); *// → true* |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '|   | isCapital(*"Dave"*); *// → true* |'
- en: '|   | isCapital(*"dave"*); *// → false* |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '|   | isCapital(*"dave"*); *// → false* |'
- en: Success! You are now able to determine the letter case of the first character
    of a word.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 成功！现在你能够确定一个单词第一个字符的字母大小写了。
- en: Discussion
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论
- en: The function in this recipe returns true if the first character of the input
    string is in uppercase and false otherwise. To get the first letter of the input
    string, we use the charAt() method. This method takes an index number as an argument
    and returns the character at the given position in a string. For instance, "Hello".charAt(1)
    returns the second character of “Hello” which is “e.”
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方中的函数会在输入字符串的第一个字符是大写字母时返回 true，否则返回 false。为了获取输入字符串的第一个字母，我们使用 charAt()
    方法。该方法接受一个索引数字作为参数，并返回字符串中该位置的字符。例如，"Hello".charAt(1) 返回 "Hello" 中的第二个字符 "e"。
- en: You may be wondering why not use the strict equality operator (===) to compare
    the character with its uppercase version.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，为什么不使用严格相等运算符（===）来将字符与其大写形式进行比较呢？
- en: 'To understand why, let’s rewrite the example with ===:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解原因，让我们用 === 重写这个例子：
- en: '[part_1/determining_letter_case/charAt_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/determining_letter_case/charAt_ex2.js)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_1/determining_letter_case/charAt_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/determining_letter_case/charAt_ex2.js)'
- en: '|   | *// Don’t use this code* |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '|   | *// 不要使用此代码* |'
- en: '![images/charAt_ex2.png](images/charAt_ex2.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![images/charAt_ex2.png](images/charAt_ex2.png)'
- en: This version of the function will return true even if the input string starts
    with a number, such as “1990Dave”. toUpperCase() has no effect on the characters
    in the input string that do not have an uppercase version. So, in this example,
    we’re comparing the equality of “1” with the same string “1” after converting
    it to uppercase. As a result, the comparison returns true.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本的函数即使输入字符串以数字开头（例如“1990Dave”），也会返回 `true`。`toUpperCase()` 对于输入字符串中没有大写版本的字符没有影响。因此，在这个示例中，我们将“1”和将其转换为大写后的“1”进行比较。结果，比较返回
    `true`。
- en: The function will also return true for languages like Hebrew and Arabic, which
    don’t have uppercase and lowercase letters.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数对于像希伯来语和阿拉伯语这样的语言也会返回 `true`，因为这些语言没有大写和小写字母。
- en: 'There’s a caveat when using charAt() with specific languages that have supplementary
    characters, such as Chinese. To be able to represent these characters, JavaScript
    has to allocate more “spaces” in a string, which causes charAt() to fail:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 `charAt()` 处理具有补充字符的特定语言（如中文）时，需要注意一些问题。为了能够表示这些字符，JavaScript 必须在字符串中分配更多的“空间”，这会导致
    `charAt()` 失败：
- en: '[part_1/determining_letter_case/charAt_ex3.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/determining_letter_case/charAt_ex3.js)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_1/determining_letter_case/charAt_ex3.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/determining_letter_case/charAt_ex3.js)'
- en: '|   | *// Notice how the return value of charAt() isn’t* |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '|   | *// 注意 charAt() 的返回值并不是* |'
- en: '|   | *// recognizable at index 0 and index 1* |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '|   | *// 在索引 0 和索引 1 处可识别* |'
- en: '![images/charAt_ex3.png](images/charAt_ex3.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![images/charAt_ex3.png](images/charAt_ex3.png)'
- en: JavaScript uses UTF-16 code points to represent characters, and most characters
    require one code point. For example, the character “F” is assigned a code point
    of U+0046.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 使用 UTF-16 编码点来表示字符，大多数字符需要一个编码点。例如，字符“F”被分配了 U+0046 的编码点。
- en: 'However, sometimes a character is made of more than one code point. In this
    case, the Chinese character consists of two Unicode code points. The first one
    has a value of U+d846, while the second one has a value of U+df10\. You can confirm
    that by preceding each code with a \u and putting both pairs in a string like
    this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时一个字符是由多个编码点组成的。在这种情况下，中文字符由两个 Unicode 编码点组成。第一个编码点的值是 U+d846，第二个编码点的值是
    U+df10。你可以通过在每个编码前加上 `\u` 并将两个编码对放在一个字符串中来确认这一点：
- en: '![images/charAt_ex4.png](images/charAt_ex4.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![images/charAt_ex4.png](images/charAt_ex4.png)'
- en: Neither pair corresponds to a printable character on its own, so the charAt()
    method cannot return a valid character at index 0 or index 1\. The fourth console.log()
    method attempts to get the character at index 2, but since there’s no character
    at that position, it returns an empty string.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这对中的任何一对都不能单独对应一个可打印字符，因此 `charAt()` 方法无法在索引 0 或索引 1 处返回有效字符。第四个 `console.log()`
    方法尝试获取索引 2 处的字符，但由于该位置没有字符，它返回了一个空字符串。
- en: Use the charAt() method whenever you need to get a character at a specific index,
    but be wary of languages with supplementary characters as they can break your
    code. Fortunately, JavaScript has another method to help you handle supplementary
    characters, which you’ll learn about in the next recipe. To learn more about Unicode,
    see Appendix 1, [*What Is Unicode?*](f_0088.xhtml#apx1).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要获取特定索引处的字符时，使用`charAt()`方法，但要小心包含补充字符的语言，因为它们可能会导致代码出错。幸运的是，JavaScript还有另一种方法可以帮助你处理补充字符，你将在下一个例子中学习到。要了解更多关于Unicode的信息，请参阅附录1，[*什么是Unicode？*](f_0088.xhtml#apx1)。
