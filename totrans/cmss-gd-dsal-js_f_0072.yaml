- en: Get All the Products
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 获取所有产品
- en: Our next example is an algorithm that accepts an array of numbers and returns
    the product of every combination of two numbers.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们下一个示例是一个接受数字数组并返回每对数字乘积的算法。
- en: 'For example, if we passed in the array `[1, 2, 3, 4, 5]`，the function returns:'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，如果我们传入数组`[1, 2, 3, 4, 5]`，该函数返回：
- en: '| ​  | `[2, 3, 4, 5, 6, 8, 10, 12, 15, 20]` |'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `[2, 3, 4, 5, 6, 8, 10, 12, 15, 20]` |'
- en: This is because we first multiply the `1` by the `2`，`3`，`4`，and `5`。Then we
    multiply the `2` by the `3`，`4`，and `5`。Next, we multiply the `3` by the `4` and
    the `5`。And finally, we multiply the `4` by the `5`。
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是因为我们首先将`1`与`2`，`3`，`4`和`5`相乘。然后我们将`2`与`3`，`4`和`5`相乘。接下来，我们将`3`与`4`和`5`相乘。最后，我们将`4`与`5`相乘。
- en: 'Note something interesting: when we multiply, say, the `2` by the other numbers,
    we only have to multiply it by the numbers that are to the right of it. We don’t
    have to go back and multiply `2` by the `1`, because that was already covered
    back when we multiplied the `1` by the `2`。So each number only needs to be multiplied
    by the remaining numbers to the right of it.'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 注意一些有趣的事情：当我们将`2`与其他数字相乘时，我们只需将其与右边的数字相乘。我们不需要回过头将`2`与`1`相乘，因为那已经在将`1`与`2`相乘时处理过了。所以每个数字只需要与其右侧剩余的数字相乘。
- en: 'Here’s an implementation of this algorithm:'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 下面是这个算法的实现：
- en: '| ​  | ​`function`​ `twoNumberProducts(array) { |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`function`​ `twoNumberProducts(array) { |'
- en: '| ​  | ​`const`​ `products = []; |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`const`​ `products = []; |'
- en: '| ​  |  |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | ​`for`​ (`let`​ `i = 0; i < array.length; i += 1) { |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`for`​ (`let`​ `i = 0; i < array.length; i += 1) { |'
- en: '| ​  | ​`for`​ (`let`​ `j = i + 1; j < array.length; j += 1) { |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`for`​ (`let`​ `j = i + 1; j < array.length; j += 1) { |'
- en: '| ​  | `products.push(array[i] * array[j]); |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `products.push(array[i] * array[j]); |'
- en: '| ​  | } |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | ​`return`​ `products; |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`return`​ `products; |'
- en: '| ​  | } |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: Let’s break this down. `N` is the number of items in the array passed to this
    function.
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们来详细分析一下。`N`是传递给该函数的数组中的项目数量。
- en: We run the outer loop `N` times. (We actually run it `N - 1` times, but we’ll
    drop that constant.) The inner loop, though, is different. Since `j` always begins
    one index to the right of `i`，the inner loop’s number of steps decreases each
    time that it’s launched by the outer loop.
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们外循环运行`N`次。（实际上我们运行了`N - 1`次，但我们将忽略这个常数。）然而，内循环则不同。由于`j`总是从`i`右边一个索引开始，内循环的步数在每次外循环启动时都会减少。
- en: 'Let’s see how many times the inner loop runs for our example array, which contains
    five elements:'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们看看在这个包含五个元素的示例数组中，内循环运行了多少次：
- en: 'When `i` is `0`，the inner loop runs while `j` is `1`，`2`，`3`，and `4`。When `i`
    is `1`，the inner loop runs while `j` is `2`，`3`，and `4`。When `i` is `2`，the inner
    loop runs while `j` is `3`，and `4`。When `i` is `3`，the inner loop runs while `j`
    is `4`。When all is said and done, the inner loop runs:'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当`i`为`0`时，内循环在`j`为`1`，`2`，`3`和`4`时运行。当`i`为`1`时，内循环在`j`为`2`，`3`和`4`时运行。当`i`为`2`时，内循环在`j`为`3`和`4`时运行。当`i`为`3`时，内循环在`j`为`4`时运行。最后，内循环运行：
- en: '`4 + 3 + 2 + 1` times.'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`4 + 3 + 2 + 1` 次。'
- en: 'To put this in terms of `N`，we can say that the inner loop runs approximately:'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 用`N`来表述的话，我们可以说内循环大约运行：
- en: '`N + (N - 1) + (N - 2) + (N - 3) … + 1` times.'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`N + (N - 1) + (N - 2) + (N - 3) … + 1` 次。'
- en: This formula always turns out to compute to about `N² / 2`。You can visualize
    this in the [diagram](#fig.ch7.cascade). For the purposes of the diagram, we’ll
    say that `N` is `8`，so there are `8²`，or `64`，squares.
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这个公式总是计算出大约`N² / 2`。你可以在[图示](#fig.ch7.cascade)中可视化这一点。为了图示的目的，我们将`N`设为`8`，因此有`8²`，即`64`个正方形。
- en: '![images/big_o_in_everyday_code/cascade.png](images/big_o_in_everyday_code/cascade.png)'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/big_o_in_everyday_code/cascade.png](images/big_o_in_everyday_code/cascade.png)'
- en: If you work your way from the top row to the bottom, you’ll see that the top
    row has all `N` squares shaded gray. The next row has `N - 1` squares shaded gray,
    and the one after that has `N - 2` gray squares. This pattern continues until
    the bottom row, which has just one shaded square.
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你从顶部开始往下走，你会看到顶部有所有`N`个正方形被涂成灰色。下一行有`N - 1`个灰色正方形，而下一行则有`N - 2`个灰色正方形。这个模式一直持续到最后一行，只有一个灰色正方形。
- en: You can also see at a glance that approximately half of the squares are shaded.
    This demonstrates that the pattern of `N + (N - 1) + (N - 2) + (N - 3)... + 1`
    is equivalent to `N² / 2`。
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你也可以一目了然地看到大约一半的正方形是涂色的。这表明`N + (N - 1) + (N - 2) + (N - 3)... + 1`的模式等同于`N²
    / 2`。
- en: We’ve figured out, then, that the inner loop runs for `N² / 2` steps. But because
    Big O ignores constants, we express this as `O(N²)`。
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 那么，我们发现内部循环运行`N² / 2`步。但是因为大O符号忽略常数，我们将其表示为`O(N²)`。
- en: Dealing with Multiple Datasets
  id: totrans-30
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 处理多个数据集
- en: Now, what happens if instead of computing the product of every two numbers from
    a single array, we instead compute the product of every number from one array
    by every number of a second array?
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，如果我们不是计算单个数组中每两个数字的乘积，而是计算一个数组中的每个数字与第二个数组中每个数字的乘积，会发生什么呢？
- en: 'For example, if we had the array `[1, 2, 3]` and the array `[10, 100, 1000]`,
    we’d compute the products as follows:'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，如果我们有数组`[1, 2, 3]`和数组`[10, 100, 1000]`，我们将按如下方式计算它们的乘积：
- en: '| ​  | `[10, 100, 1000, 20, 200, 2000, 30, 300, 3000]` |'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `[10, 100, 1000, 20, 200, 2000, 30, 300, 3000]` |'
- en: 'Our code would be similar to the previous snippet, with some slight modifications:'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们的代码将与之前的代码片段类似，只需做一些小的修改：
- en: '| ​  | `function` `twoNumberProducts`(`array1`, `array2`) { |'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` `twoNumberProducts`(`array1`, `array2`) { |'
- en: '| ​  | `const` `products` = []; |'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` `products` = []; |'
- en: '| ​  |  |'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `for` (`const` `i` `of` `array1`) { |'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`const` `i` `of` `array1`) { |'
- en: '| ​  | `for` (`const` `j` `of` `array2`) { |'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`const` `j` `of` `array2`) { |'
- en: '| ​  | `products.push(i * j);` |'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `products.push(i * j);` |'
- en: '| ​  | } |'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return` `products`; |'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` `products`; |'
- en: '| ​  | } |'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: Let’s analyze the time complexity of this function.
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们分析一下这个函数的时间复杂度。
- en: First, what is `N`? This is the first hurdle, as we now have two datasets, namely,
    the two arrays.
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 首先，`N`是什么？这是第一个障碍，因为我们现在有两个数据集，即两个数组。
- en: 'It’s tempting to lump everything together and say `N` is the total number of
    items of both arrays combined. But this is problematic for the following reason:'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 将一切归结为`N`是两个数组合并后的总项数是很有诱惑力的。但这在以下方面存在问题：
- en: Here’s a tale of two scenarios. In Scenario 1, there are two arrays of size
    `5`。 In Scenario 2, there’s one array of size `9` and another of size `1`.
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里有两个场景的故事。在场景1中，有两个大小为`5`的数组。在场景2中，有一个大小为`9`的数组和一个大小为`1`的数组。
- en: In both scenarios, we’d end up saying that `N` is `10`, since `5 + 5 = 10` and
    `9 + 1 = 10`。 However, the efficiency of each scenario is very different.
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这两种场景中，我们最终都会说`N`是`10`，因为`5 + 5 = 10`和`9 + 1 = 10`。然而，每个场景的效率是非常不同的。
- en: In Scenario 1, our code takes twenty-five (`5 * 5`) steps. Because `N` is `10`,
    this is equivalent to (`N / 2`)² steps.
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在场景1中，我们的代码需要二十五步（`5 * 5`）。因为`N`是`10`，这相当于（`N / 2`）²步。
- en: In Scenario 2, though, our code takes nine (`9 * 1`) steps, which is close to
    about `N` steps. This is dramatically faster than Scenario 1!
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在场景2中，我们的代码需要九步（`9 * 1`），这接近大约`N`步。这比场景1快得多！
- en: So, we don’t want to consider `N` to be the total number of integers from both
    arrays, since we’d never be able to pin down the efficiency in terms of Big O
    notation, as it varies based on the different scenarios.
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 所以，我们不想将`N`视为两个数组的整数总数，因为这样我们无法在大O符号中准确地确定效率，因为它会根据不同的场景而变化。
- en: We’re in a bit of a bind here. We have no choice but to express the time complexity
    as `O(N * M)`，where `N` is the size of one array and `M` is the size of the other.
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们处于困境中。我们别无选择，只能将时间复杂度表示为`O(N * M)`，其中`N`是一个数组的大小，`M`是另一个数组的大小。
- en: 'This is a new concept: whenever we have two distinct datasets that have to
    interact with each other through multiplication, we have to identify both sources
    separately when we describe the efficiency in terms of Big O.'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是一个新概念：每当我们有两个不同的数据集需要通过乘法相互作用时，我们在描述大O效率时必须分别识别这两个来源。
- en: While this is the correct way of expressing this algorithm in terms of Big O
    notation, it’s a little less useful than other expressions of Big O. Comparing
    an `O(N * M)` algorithm to algorithms that only have an `N` (and not an `M`) is
    a little like comparing apples to oranges.
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 虽然这是用大O符号表达该算法的正确方式，但它在实用性上比其他大O表达式稍差。将`O(N * M)`算法与仅有`N`（而没有`M`）的算法进行比较，就像将苹果与橙子进行比较一样。
- en: However, we do know that there’s a specific range in which `O(N * M)` lies;
    that is, if `N` and `M` are the same, it’s equivalent to `O(N²)`. And if they’re
    not the same, and we arbitrarily assign the smaller number to be `M`, even if
    `M` is as low as `1`, we end up with `O(N)`. In a sense then, `O(N * M)` can be
    construed as a range between `O(N)` and `O(N²)`.
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，我们确实知道`O(N * M)`在一个特定范围内；也就是说，如果`N`和`M`相同，那么它等价于`O(N²)`。如果它们不相同，并且我们任意将较小的数字赋值为`M`，即使`M`低至`1`，我们最终也得到`O(N)`。从某种意义上说，`O(N
    * M)`可以被理解为在`O(N)`和`O(N²)`之间的一个范围。
- en: Is this great? No, but it’s the best we can do.
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这很伟大吗？不，但这是我们所能做的最好选择。
