- en: © The Author(s), under exclusive license to Springer Fachmedien Wiesbaden GmbH,
    part of Springer Nature 2024 J. L. Zuckarelli Learn coding with Python and JavaScript
    [`https://doi.org/10.1007/978-3-658-42912-6_15`](https://doi.org/10.1007/978-3-658-42912-6_15)
  id: totrans-0
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`15. Loops: How Do I Repeat Program Instructions Efficiently?`'
  id: totrans-1
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: Joachim L. Zuckarelli^([1](#Aff2) )(1) München, Germany Overview
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Practically all programming languages use loops to execute similar parts of
    the code several times in succession. This not only saves a lot of manual and
    error-prone work, but also allows you to write code that you don't know in advance
    how often it will be executed. With the help of loops you can elegantly implement
    the repetition of program statements.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'In this chapter you will learn the following:'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: What loops are, and how they differ from functions, which can also be used to
    execute program code repeatedly
  id: totrans-5
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: What the difference is between counting and conditional loop constructs
  id: totrans-6
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: How to develop a counting loop, and what role the `run variable` plays in it
  id: totrans-7
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: How to program a conditional loop and what the difference is between the condition
    check at the beginning (`head control`) and at the end of the loop (`foot control`)
  id: totrans-8
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: How to end loops prematurely or continue with the next loop pass.
  id: totrans-9
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`15.1 Loops and Their Variants`'
  id: totrans-10
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: '`Loops versus Functions`'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Essentially, there are two ways to repeat program code that you have written
    once: You can swap it out into functions/procedures that can be called again.
    We have already looked at how this works in ► Chap. [`12`](474412_1_En_12_Chapter.xhtml).
    Or you can wrap the code to be repeated in so-called `loops.` This is exactly
    what this chapter is about.'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The difference between the two approaches is that with loops, the same program
    code is run through and executed `directly several times in succession.` For example,
    you could go through a product price list line by line, product by product, and
    increase the price of all products that belong to a certain category by 10%. The
    use case for functions, though, is different; here, it is not a matter of repeating
    a certain part of the program `several times in immediate succession,` but of
    making the program code independent to such an extent that it can be called from
    `different places in the program at` any time.
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这两种重复方法的共同点在于，这样可以避免在程序中多次编写相同的程序代码。这提高了程序的可维护性，因为对要重复的部分只需进行一次更改。另一种选择是在每个需要使用它的地方重复程序代码（而不是调用函数）或多次连续重复（而不是使用循环），结果是你必须在程序中每个出现的地方都对这段代码进行更改。这既繁琐又容易出错。在循环的情况下，另一个问题是，在编写程序时，通常你甚至不知道确切需要多少次重复代码。想想你要遍历的产品列表，以便将特定类别中所有产品的价格提高`10%`。在编写程序时，你可能不知道这个列表将包含多少个产品！如果第`79`个产品因为种类扩展而突然添加到现有的`78`个产品中会发生什么？循环在这里提供了一个解决方案。
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 循环的类型
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 循环基本上有两种变体：要么是`counting loops`，要么是`conditional`循环。对于计数循环，从一开始就很清楚——至少在原则上——它们会被运行多少次。这种循环适合我们处理产品列表的问题。我们应该能够轻松确定此列表上有多少个产品。但我们也知道运行一次完整的产品列表所需的循环次数。
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 对于条件循环，想象以下场景：我们有一个程序，将用户输入的开尔文温度值转换为摄氏度。开尔文的温度始终大于或等于`0`。零开尔文是绝对零度，没有任何热量，它永远不能更冷；这个绝对零度对应于摄氏温度表上的`-273.15
    °C`。用户需要一个接一个地输入开尔文温度。每个开尔文温度都会转换为摄氏度。如果用户在任何时候输入负的开尔文温度，程序应该终止。这里使用循环是个好主意，因为从开尔文到摄氏度的转换过程总是相同的。然而，在这种情况下，我们无法事先知道将会有多少次循环。这取决于用户的输入。这里的选择是一个`conditional`循环，即只要满足某个条件，循环就会继续运行；在我们这里的例子中，条件是用户输入的温度大于或等于`0`。一旦用户输入了一个负温度，条件将不再满足，循环将停止。
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`15.2 Counting Loops`'
  id: totrans-18
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: 带有数字运行变量的循环
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Counting loops are successive repetitions of program code, used where the number
    of repetitions can be determined in advance. But are the repetitions of the program
    code really absolutely identical? Let’s think back to the example of the product
    price list that we want to go through to make all products of a certain category
    10% more expensive. Now, if we found a product in the category and one of the
    previous products already belonged to the same category, is the code that is executed
    in both cases exactly the same? No, apparently not; for the price increase must
    be made once for one product and once for the other. So, the program code, similar
    as it is in both cases, must “refer” to a different product each time. Put another
    way: We need to know where exactly in our loop we currently are, i.e., which product
    is currently being processed.'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: This is exactly what the `run variable` allows us to do. It is incremented by
    a certain value (usually one) with each loop pass. So, you always know which loop
    pass you are currently in. And we can use this variable in the program code that
    is repeated through our loop, for example to address the individual elements of
    a field that represents our product price list.
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Let’s take a closer look at the whole thing as pseudo-code:'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`For p From 1 To length(products) Begin If products[p].category = "Garden Furniture"
    Then products[p].price = products[p].price * 1.1 End`'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In this example, we assume that `products` is a field of instances (i.e., objects)
    of the `Product` class that has the attributes `category` and `price` (scroll
    back to ► Sect. [11.​7](474412_1_En_11_Chapter.xhtml#Sec10) if you have forgotten
    or are vague about the concepts of “fields”, “classes” and “instances/objects”
    from object-oriented programming). The run variable in this example is the (integer)
    variable `p`. It runs, as the line `For p From 1 To length(products)` indicates,
    from the value 1 to the function value `length(products)`, which we want to assume
    represents the length of the field `products`, i.e. the number of products contained.
    With each loop pass, `p` is automatically increased by one. The program code to
    be repeated is located between the `Begin` and `End` keywords in a code block.
    We have already seen code blocks in connection with functions (► Sect. [13.​1](474412_1_En_13_Chapter.xhtml#Sec1))
    and If-Then constructs (► Sect. [14.​3](474412_1_En_14_Chapter.xhtml#Sec3)). The
    code, which is between `Begin` and `End`, is executed as long as the run variable
    `p` is less than or equal to the specified maximum value, in our case `length(products)`.
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 我们现在在循环中使用`run`变量作为索引，访问当前循环周期中要处理的字段元素`products[p]`。在这里，你可以看到，尽管我们总是重复相同的代码，但每次执行的代码却有所不同，因为每个循环周期处理的是不同的产品对象，即相应的元素`products[p]`，因此，第一个循环周期处理的是`products[1]`，第二个处理的是`products[2]`，最后一个处理的是`products[length(products)]`。
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 计数循环的遍历示意图见`◘ Fig. [15.1](#Fig1)`。![](../images/474412_1_En_15_Chapter/474412_1_En_15_Fig1_HTML.jpg)
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 计数循环的流程图。条件下输入一个递增的运行变量。将其分类为未满足和满足。满足的情况后，运行变量递增，循环表达式块，最后结束。
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Fig. 15.1`'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 计数循环的流程图
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 对象运行变量的循环
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 一些编程语言提供了计数循环的特殊变体，使得像我们上面的例子这样的任务变得更加简单。在这里，不是计数一个`run`变量，然后将其用作对象数组的索引，而是循环直接遍历对象数组，逐个处理数组中的每个单独对象。
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这可能看起来像这样：
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`**For Each**` `p` `**In**` `products` `**Begin**` `**If**` `p.category = "Garden
    Furniture"` `**Then**` `p.price = p.price * 1.1` `**End**`'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这个在我们的伪代码中以关键字`**For Each**`引入的循环，简单地按顺序遍历字段`products`中的所有元素。每次循环时，当前字段元素存储在运行变量`p`中。注意与上面例子中的计数循环的区别：在这里，运行变量`p`不是一个表示循环已经运行多少次的数字，而是当前在循环焦点中的字段`products`的当前元素。
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 因此，在循环体内，即在循环重复的代码块中，当前对象`p`可以像产品对象一样被使用，例如，可以调整其属性。此时重要的是要理解，在大多数编程语言中，我们的变量`p`并不是字段`products`相应元素的*副本*，而最终是*元素本身*。听起来有些抽象，但这确实是一个关键区别：毕竟，如果`p`只是当前上升的`products`中特定元素的副本，那么我们对`p`所做的任何更改当然不会影响`products`中的真实元素；毕竟，我们只是在处理副本，而原始元素会保持不受我们更改的影响。但事实并非如此。实际上，`p`*就是*字段`products`中相应的元素。因此，对`p`所做的更改直接改变了我们字段`products`中的相应产品。
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'As you can see, this loop is a bit more elegant than the loop above. The only
    disadvantage here is: Without counting with the help of an extra variable, which
    we manually increase with each loop run, we now do not know how many runs of the
    loop have taken place so far. Our run variable is simply no longer a counter.
    However, if it is simply a matter of passing through the products in our `products`
    field in sequence, this need not be a disadvantage.'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Examples in Different Programming Languages
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Let’s look at it in two concrete programming languages, PHP, which is specifically
    made for server-side programs and is used on most websites, and the Microsoft
    Office macro language VBA.
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'First, here are the two loop variants in PHP:'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`for` (`$p=0; $p <= count($produts)-1; $p++`) `{` `if` (`$products[$p]->category
    == "Garden Furniture"`) `$products[$p]->price = $producte[$p]->price * 1.1` `}`
    `foreach` (`$products` `as` `&$p`) `{` `if` (`$p->category == "Garden Furniture"`)
    `$p->price = $p->price * 1.1` `}`'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The counting loop with numeric run variable is introduced here by the keyword
    `for`, the loop iterating through the field with `foreach`. These are the keywords
    used in most programming languages for these loop types.
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`The` **for` loop contains three specifications in parentheses:'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '1.'
  id: totrans-43
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: What the run variable is called (variable names are always prefixed with a dollar
    sign in PHP) and at what value it should start (fields start at index 0 by default
    in PHP, so the first element would be as `products[0]`).
  id: totrans-44
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: '2.'
  id: totrans-45
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: How long it should run; in our case as long as its value is less than or equal
    to the number of field elements (`count($products)`) minus 1; “minus 1” because
    indexing starts at 0. If the first field element has the index 0, then the last
    field element has the index `count($products)-1` (i.e., with 10 field elements,
    the index of the last one is 9).
  id: totrans-46
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: '3.'
  id: totrans-47
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: How it should be incremented; so far, we have assumed that the run variable
    is incremented by 1 with each loop pass. However, this does not necessarily have
    to be the case. For example, we could also just look at every second product;
    then the last part of the `for` statement would be `$p = $p + 2` (`$p++` is a
    shorthand for `$p = $p + 1`).
  id: totrans-48
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: In PHP, the attributes of an object are accessed with the help of the arrow
    operator (`->`). We had always used the dot for this in our pseudo-code so far.
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Another specific feature is found in the second loop variant, the `foreach`
    loop: Here, the element `$p` currently processed by the loop is named. However,
    this is preceded by an ampersand. This ensures that the variable `$p`, as we discussed
    above, actually represents the corresponding product object and not just a copy
    of the currently processed product object in the `products` field. If we were
    to forgo the ampersand, the assignment `$p->price = $p->price * 1.1` would merely
    process a copy of the object and not the object itself, which is part of our `products`
    field.'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Now the same in VBA:'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`For p = 1 To length(products) Step 1` `If products(p).category = "Garden Furniture"
    Then` `products(p).price = products(p).price * 1.1` `Next` *Rem ATTENTION: This
    loop does not lead to the same result!* `For Each p In products` `If p.category
    = "Garden Furniture" Then` `p.price = p.price * 1.1` `Next`'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'As you can see, the syntax of the `For` loop (and also the field and object
    accesses as well as the if-then conditions) is structured a little differently
    in VBA than in PHP, but the basic concepts are completely identical. However,
    there is one important difference in the `For Each` loop: Unlike in PHP, the run
    variable `p` in VBA is always a *copy of* the respective element from our `products`
    field. There is no way to create the run variable so that changes to it are reflected
    in the original element of our `products` field. If we want to change the `products`
    field itself, we have to use the first variant of the counting loop with a numeric
    run variable.'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Nested Loops
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Loops can also be nested within each other. Imagine you have a two-dimensional
    array whose rows represent the different variants of one and the same product
    and whose columns represent the different warehouses of a company. The values
    in the array represent the number of pieces in each case. For example, if `stock[7,3]
    = 65`，this means that 65 items of the 7th product variant are currently available
    in the 3rd warehouse. If you now want to count how many copies of the product
    (regardless of which variant) are available in total, i.e., across all warehouses,
    a nested, counting loop is suitable for this:'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`total = 0` `For p From 1 To number_variants Begin` `For w From 1 To number_of_warehouses
    Begin` `total = total + stock[p,w]` `End` `End`'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The outer loop goes through the rows of the two-dimensional field, that is,
    the product variants, while the inner loop goes through the warehouses. This means
    that the loop works its way forward by starting a new row, then going through
    all the columns for this row (inner loop) and then switching to the next row (outer
    loop). In this way, the entire field is traversed once. Its individual elements,
    `stock[p,w]`，i.e., the number of product variants in the respective warehouse,
    are added up with the help of the variable `total` by adding the field `total[p,w]`
    just processed by the loops to the current state of this variable; the assignment
    `total = total + total[p,w]` does nothing else: It adds the respective field contents
    to the current value of `total` and again assigns the result to the variable `total`.
    After the nested loops have run through, the variable `total` contains the total
    number of all product variants across all warehouses.'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Exit Loops Prematurely
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Most programming languages provide a way to exit a counting loop early. This
    can be useful if, for example, you are writing a piece of code to check if there
    is a product of a special category, say “garden furniture”, among the products.
    One way to check this is to go through the entire field and check if the current
    field element is a product of that category. Once such a product is found, the
    question of whether there are `any` products in the “Garden Furniture” category
    is answered. The rest of the field doesn’t really need to be run through, it only
    costs unnecessary computing time and of course doesn’t change anything in the
    result. So, it would be appropriate to stop the loop at this point. In our pseudo
    code it could look like this:'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`found = FALSE For Each p In products Begin If p.category = "Garden Furniture"
    Then Begin found = True Break End End`'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Using the variable`found`，we can determine after the loop whether a product
    of the category “garden furniture” has been found. If such a product is found
    during a loop pass, the variable`found`，which we initially initialized with the
    value`FALSE`，is set to`TRUE`and the loop is exited immediately.
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Most programming languages have a statement that causes the current loop pass
    to end and the loop to simply continue with the next pass.
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 15.3 Conditional Loops
  id: totrans-63
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: Functionality and Types of Conditional Loops
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Conditional loops differ from counting loops in that it is not known in advance
    how many times the loop will be run. Instead, the execution depends on whether
    a certain condition, the `run condition`，is met. As long as this is the case,
    the loop runs. If the run condition is no longer fulfilled at some point, the
    loop terminates, and program execution continues behind the loop.
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Let’s take the example from the introduction to this chapter: Here, the user
    is prompted for a temperature in Kelvin and then this temperature is converted
    to degrees Celsius until he enters a negative Kelvin temperature. Then the program
    knows to abort, because negative temperatures in Kelvin are physically impossible
    according to the definition of the Kelvin scale. So, the running condition for
    our conditional loop is that the user enters a positive Kelvin temperature. When
    he does, the program converts the temperature to degrees Celsius and asks him
    for the next Kelvin temperature.'
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'In our pseudo-code, this loop could then look like this:'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`kelvin = input("Please enter temperature in Kelvin: ") While kelvin >=0 Begin
    show(kelvin, " Kelvin are: ", kelvin – 273.15,“ degrees Celsius”) kelvin = input("Please
    enter temperature in Kelvin: ") End`'
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 所以，我们首先在实际循环之前读取一个开尔文温度。这是必要的，以便循环的运行条件可以有意义地进行检查。运行条件在关键字`While`之后定义。接着是当运行条件`kelvin
    >= 0`满足时要执行的代码块。具体来说，输入的温度被转换为开尔文，并显示结果。然后用户输入一个新的开尔文温度。由于循环遇到了关键字`End`，它跳回开始，这导致它在用户输入新的开尔文温度时检查运行条件是否仍然满足。
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在我们的例子中，条件在循环开始时被检查。然而，检查也可以在结束时进行。那我们就会有一个所谓的`foot-controlled`循环，与上述的`head-controlled`循环相对。
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 它看起来是这样的：
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`kelvin = input("Please enter temperature in Kelvin: ")` `Do` `Begin` `If`
    `kelvin >= 0` `Then` `show(kelvin, " Kelvin are: ", kelvin – 273.15, " degrees
    Celsius")` `kelvin = input("Please enter temperature in Kelvin: ")` `End` `End`
    `While` `kelvin >= 0`'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 由于条件在这里仅在最后检查，因此循环在达到条件检查之前总是会运行一次。这种结构在我们的例子中有些复杂，因为我们仍需在循环内检查用户的输入是否是一个有效的开尔文温度（即大于或等于0），或者指示用户希望中止循环。仅在开尔文温度大于或等于0时，转换为摄氏度才会在我们的`foot-controlled`循环中发生。否则，在输入后，循环内部不会发生任何事情。循环接着检查运行条件，确定它不再满足，且不会进入另一个循环迭代，而是继续循环后的程序。
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: ◘ 图 [15.2](#Fig2) 和 [15.3](#Fig3) 各自展示了一个`head-controlled`循环和一个`foot-controlled`循环的顺序示意图。![](../images/474412_1_En_15_Chapter/474412_1_En_15_Fig2_HTML.jpg)
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`head-controlled`条件循环的流程图。输入给定给运行条件，该条件被分类为未满足和已满足。已满足的条件后跟一个表达式循环块并结束。'
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 图 15.2
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`head-controlled`条件循环的流程图'
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![](../images/474412_1_En_15_Chapter/474412_1_En_15_Fig3_HTML.jpg)'
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '`foot-controlled`条件循环的流程图。输入给定给表达式循环块。它后跟一个运行条件，该条件被分类为未满足和已满足。'
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 图 15.3
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`foot-controlled`条件循环的流程图'
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 我们的例子中的循环看起来整体上有点幼稚和牵强。通常在这种情况下，你会使用一个`head-controlled`循环。
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 不同编程语言中的示例
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Here are two implementations of our Kelvin-Celsius conversion program in real
    programming languages, one in Pascal, one in VBA.
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'First the Pascal version:'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`program` temperatureconversion; `var` kelvin: real; `begin` kelvin = `readln`(''Please
    enter temperature in Kelvin: ''); `while` kelvin >= 0 `do` `begin` `writeln`(kelvin,
    '' Kelvin are: '', kelvin - 273.15, '' degrees Celsius''); kelvin = `readln`(''Please
    enter temperature in Kelvin: ''); `end` `end.` '
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Now the whole thing in VBA:'
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Dim` kelvin `As` Double; kelvin = `InputBox`("Please enter temperature in
    Kelvin: ") `While` kelvin >= 0 `MsgBox` (Str(kelvin) & " Kelvin are: " & Str(kelvin
    - 273.15) & " degrees Celsius") kelvin = `InputBox`("Please enter temperature
    in Kelvin: ") `Wend`'
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: As you can see, the keywords for conditional loops in Pascal and VBA are `while...do`
    and `While`，as in most other programming languages. The block of code to be repeated
    is enclosed in Pascal with `begin` and `end`，in VBA it starts directly after the
    run condition and ends with the keyword `Wend`。
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Just as in the case of counting loops, most programming languages also have
    special statements to exit a conditional loop completely (often `break`)，or to
    abort the current run and continue with the next run (often `continue`）。
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The Relationship of Counting and Conditional Loops
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Counting loops can also be written as conditional loops, but not vice versa.
    All we need to do for this is to formulate a condition that is satisfied for as
    long as the counting loop would run. In the example of the previous section, where
    we want to increase the price of all products in the category “garden furniture”
    by 10%, it would look like this in pseudo-code:'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`p = 1` `While` `p <= length(products)` `Begin` `If` products[`p`].category
    = "Garden Furniture" `Then` products[`p`].price = products[`p`].price * 1.1 `p
    = p + 1` `End`'
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Again, similar to the counting loop, we work with a run variable. Only this
    time, we ourselves have to take care of incrementing this variable with each loop
    pass. We do this with the statement `p = p + 1`。The running condition of the loop
    is now that the value of this run variable is at most as large as the length of
    the field `products`。We also have to initialize the run variable ourselves before
    the first loop pass, which the counting loop also did for us. You can see, however,
    that it is quite possible to “convert” counting loops into conditional loops,
    because in the end the counting repetition is also based on a condition. The other
    way round, of course, is not possible, because in the case of a conditional loop
    we do not know how often it will be repeated, which is precisely the prerequisite
    for a counting loop.
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 15.1 [3 min] What is the problem with the following loop? `x = 1` `While` `x
    <> 100` `Begin` `show`("Loop pass no. ", (x + 1) / 2) `x = x + 2` `End` 15.2 [3
    min]
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: What types of loops are there and how do they differ?
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 15.3 [3 min]
  id: totrans-97
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Why can you use a conditional loop to replicate a counting loop, but not the
    other way around?
  id: totrans-98
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '! 15.4 [5 min]'
  id: totrans-99
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Consider how a loop could be used to process user input on a graphical user
    interface.
  id: totrans-100
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 15.4 Your Roadmap to Learning a New Programming Language
  id: totrans-101
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: When you learn a new programming language …
  id: totrans-102
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'you’ll discover:'
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: which forms of counting loops there are and what role the run variable has in
    them (“count variable” or current element of a set of objects that is being run
    through)
  id: totrans-104
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: what forms of conditional loops there are, in particular whether there are only
    head-controlled loops or also foot-controlled loops,
  id: totrans-105
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: what possibilities there are to exit loops prematurely or at least to abort
    the current loop pass and continue the loop with the next pass.
  id: totrans-106
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 15.5 Solutions to the Exercises
  id: totrans-107
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: Exercise 15.1
  id: totrans-108
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The problem with this loop is that it will never end, so it is an infinite loop.
    The variable `x`，whose value is checked before each loop pass, is first initialized
    with the value 1 before the loop and then increased by 2 with each loop pass.
    Its value is therefore always odd. Therefore, the variable will never take the
    value 100, which would cause the loops to terminate. The loop continues to run
    indefinitely (or until the memory is no longer sufficient to hold the high values
    of the variable `x`).
  id: totrans-109
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Exercise 15.2
  id: totrans-110
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: There are counting and conditional loops. In the case of counting loops, the
    number of times the loop will be run is, in principle, known before the first
    loop run. These loops work with a run variable. This run variable is a numerical
    value which, starting from a start value, is changed according to a fixed rule
    (for example, increased by one) until it reaches a fixed end value. Alternatively,
    the loop passes through a set of objects and the run variable represents a different
    object from this set for each pass. In this way, certain definable sets of objects
    (such as customers, products, sales transactions) can be run through in a simple
    manner. Within the loop, you can then work with the respective object that is
    currently in focus and that is represented by the run variable.
  id: totrans-111
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Unlike counting loops, the traversal of a conditional loop depends on whether
    a condition, which is checked before (head-controlled loops) or after each pass
    (foot-controlled loops), is satisfied. This condition can also depend on values
    that arise during the loop passes, such as calculated values or user input. Therefore,
    with conditional loops, it is not necessarily possible to say before the first
    loop pass how many times the loop will be run in total.
  id: totrans-112
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Exercise 15.3
  id: totrans-113
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: A counting loop is ultimately a special case of the conditional loop. The condition
    is that the value of the run variable moves within a certain value range (between
    the start value and the end value) or – if the set of objects is run through and
    the run variable represents the “current” object – that there are still objects
    left in the set of objects being run through that have not yet “had their turn”.
    Because a run condition also comes into play here, a counting loop with its run
    condition can also be formulated as a conditional loop. However, this does not
    work the other way round, because in the case of conditional loops it does not
    have to be clear in advance how often the loop is run, which is a prerequisite
    for a counting loop. Think of a conditional loop whose execution depends on user
    input. Since it is not foreseeable in which loop pass the user will make the crucial
    input that will cause the loop to terminate, we cannot tell how many times the
    loops will be run.
  id: totrans-114
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Of course, there are cases in which the number of runs can be known in advance,
    even for conditional loops, namely when nothing can change during the loop runs
    on those variables that decide in the run condition whether the loop will be run
    a second time or not. Then, even with a conditional loop, it is clear from the
    beginning how often it will run, and it could also be written as a counting loop.
  id: totrans-115
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Exercise 15.4
  id: totrans-116
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'A graphical user interface is normally characterized by the fact that the user
    can choose from different actions. Each of these actions triggers an event to
    which the program can react with a corresponding event handling routine. However,
    this process can also be represented as a loop. To do this, we would read in an
    action from the user again and again in an infinite loop and then process this
    action within the loop. This could look stylized like this:'
  id: totrans-117
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`abort = FALSE` **While** `abort = FALSE` **Begin** `action = read()` **Switch**
    `action` **Begin** **Case** …: … **Case** …: … // Treatment of all possible cases
    **Case** `"Exit"`: `abort = TRUE` **End** **End**'
  id: totrans-118
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: If you are not completely familiar with the `Switch-Case` construct, simply
    go back a few pages to ► Sect. [14.​6](474412_1_En_14_Chapter.xhtml#Sec6).
  id: totrans-119
  prefs: []
  stylish: true
  type: TYPE_NORMAL
