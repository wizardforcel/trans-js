- en: '`Selection Sort` in Action'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: Let’s walk through the steps of `Selection Sort` using the example array `[4,
    2, 7, 1, 3]`。
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'We begin our first pass-through:'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'We set things up by inspecting the value at index `0`。By definition, it’s the
    lowest value in the array we’ve encountered so far (as it’s the only value we’ve
    encountered so far)，so we keep track of its index in a variable:'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/optimizing_code_with_and_without_big_o/selection_sort_1.png`](images/optimizing_code_with_and_without_big_o/selection_sort_1.png)'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'Step `1`: We compare the `2` with the lowest value so far (which happens to
    be `4`):'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/optimizing_code_with_and_without_big_o/selection_sort_2.png`](images/optimizing_code_with_and_without_big_o/selection_sort_2.png)'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'The `2` is even less than the `4`，so it becomes the lowest value so far:'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/optimizing_code_with_and_without_big_o/selection_sort_3.png`](images/optimizing_code_with_and_without_big_o/selection_sort_3.png)'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'Step `2`: We compare the next value—the `7`—with the lowest value so far. The
    `7` is greater than the `2`，so `2` remains our lowest value:'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/optimizing_code_with_and_without_big_o/selection_sort_4.png`](images/optimizing_code_with_and_without_big_o/selection_sort_4.png)'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'Step `3`: We compare the `1` with the lowest value so far:'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/optimizing_code_with_and_without_big_o/selection_sort_5.png`](images/optimizing_code_with_and_without_big_o/selection_sort_5.png)'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'Because the `1` is even less than the `2`，`1` becomes our new lowest value:'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/optimizing_code_with_and_without_big_o/selection_sort_6.png`](images/optimizing_code_with_and_without_big_o/selection_sort_6.png)'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'Step `4`: We compare the `3` to the lowest value so far, which is the `1`。We’ve
    reached the end of the array，and we’ve determined that `1` is the lowest value
    out of the entire array:'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/optimizing_code_with_and_without_big_o/selection_sort_7.png`](images/optimizing_code_with_and_without_big_o/selection_sort_7.png)'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'Step `5`: Because `1` is the lowest value，we swap it with whatever value is
    at index `0`—the index we began this pass-through with:'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/optimizing_code_with_and_without_big_o/selection_sort_8.png`](images/optimizing_code_with_and_without_big_o/selection_sort_8.png)'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'Since we’ve moved the lowest value to the beginning of the array，that means
    the lowest value is now in its correct spot:'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/optimizing_code_with_and_without_big_o/selection_sort_9.png`](images/optimizing_code_with_and_without_big_o/selection_sort_9.png)'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: We’re now ready to begin our second pass-through.
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Setup: The first cell—index `0`—is already sorted, so this pass-through begins
    at the next cell, which is index `1`。The value at index `1` is the number `2`，and
    it’s the lowest value we’ve encountered in this pass-through so far:'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/optimizing_code_with_and_without_big_o/selection_sort_10.png`](images/optimizing_code_with_and_without_big_o/selection_sort_10.png)'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'Step `6`: We compare the `7` with the lowest value so far. The `2` is less
    than the `7`，so `2` remains our lowest value:'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/optimizing_code_with_and_without_big_o/selection_sort_11.png](images/optimizing_code_with_and_without_big_o/selection_sort_11.png)'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'Step 7: We compare the `4` with the lowest value so far. The `2` is less than
    the `4`， so `2` remains our lowest value:'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/optimizing_code_with_and_without_big_o/selection_sort_12.png](images/optimizing_code_with_and_without_big_o/selection_sort_12.png)'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'Step 8: We compare the `3` with the lowest value so far. The `2` is less than
    the `3`, so `2` remains our lowest value:'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/optimizing_code_with_and_without_big_o/selection_sort_13.png](images/optimizing_code_with_and_without_big_o/selection_sort_13.png)'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'We’ve reached the end of the array. Since the lowest value from this pass-through
    was already in its correct spot, we don’t need to perform a swap. This ends our
    second pass-through, leaving us with this:'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/optimizing_code_with_and_without_big_o/selection_sort_14.png](images/optimizing_code_with_and_without_big_o/selection_sort_14.png)'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: We now begin the third pass-through.
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Setup: We begin at index `2`， which contains the value `7`。 The `7` is the
    lowest value we’ve encountered so far in this pass-through:'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/optimizing_code_with_and_without_big_o/selection_sort_15.png](images/optimizing_code_with_and_without_big_o/selection_sort_15.png)'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'Step 9: We compare the `4` with the `7`:'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/optimizing_code_with_and_without_big_o/selection_sort_16.png](images/optimizing_code_with_and_without_big_o/selection_sort_16.png)'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'We note that `4` is our new lowest value:'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/optimizing_code_with_and_without_big_o/selection_sort_17.png](images/optimizing_code_with_and_without_big_o/selection_sort_17.png)'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'Step 10: We encounter the `3` which is even lower than the `4`:'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/optimizing_code_with_and_without_big_o/selection_sort_18.png](images/optimizing_code_with_and_without_big_o/selection_sort_18.png)'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'The `3` becomes our new lowest value:'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/optimizing_code_with_and_without_big_o/selection_sort_19.png](images/optimizing_code_with_and_without_big_o/selection_sort_19.png)'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'Step 11: We’ve reached the end of the array, so we swap the `3` with the value
    we started our pass-through with, which is the `7`:'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/optimizing_code_with_and_without_big_o/selection_sort_20.png](images/optimizing_code_with_and_without_big_o/selection_sort_20.png)'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'We now know that the `3` is in the correct place within the array:'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/optimizing_code_with_and_without_big_o/selection_sort_21.png](images/optimizing_code_with_and_without_big_o/selection_sort_21.png)'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: While you and I can both see that the entire array is correctly sorted at this
    point, the computer doesn’t know this yet, so it must begin a fourth pass-through.
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Setup: We begin the pass-through with index `3`。 The `4` is the lowest value
    so far:'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/optimizing_code_with_and_without_big_o/selection_sort_22.png](images/optimizing_code_with_and_without_big_o/selection_sort_22.png)'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'Step 12: We compare the `7` with the `4`:'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/optimizing_code_with_and_without_big_o/selection_sort_23.png`](images/optimizing_code_with_and_without_big_o/selection_sort_23.png)'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: The 4 remains the lowest value we’ve encountered in this pass-through so far,
    so we don’t need to swap it, since it’s already in the correct place.
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Because all the cells besides the last one are correctly sorted, that must
    mean the last cell is also in the correct order, and our entire array is properly
    sorted:'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/optimizing_code_with_and_without_big_o/selection_sort_24.png`](images/optimizing_code_with_and_without_big_o/selection_sort_24.png)'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'Code Implementation: Selection Sort'
  id: totrans-55
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s an implementation of Selection Sort in JavaScript:'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function` selectionSort(`array`) { |'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `for` (`let` `i` = 0; `i` < `array.length` - 1; `i` += 1) { |'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `let` `lowestNumberIndex` = `i`; |'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `for` (`let` `j` = `i` + 1; `j` < `array.length`; `j` += 1) { |'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (`array[j]` < `array[lowestNumberIndex]`) { |'
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `lowestNumberIndex` = `j`; |'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (`lowestNumberIndex` !== `i`) { |'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | [`array[i]`, `array[lowestNumberIndex]`] = |'
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | [`array[lowestNumberIndex]`, `array[i]`]; |'
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` `array`; |'
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_TB
- en: Let’s break this down line by line.
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'We begin a loop that represents each pass-through. It uses the variable `i`
    to point to each index of the array and goes up through the second-to-last value:'
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `for` (`let` `i` = 0; `i` < `array.length` - 1; `i` += 1) { |'
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_TB
- en: It doesn’t need to run for the last value itself, since the array will be fully
    sorted by that point.
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Next, begin keeping track of the index containing the lowest value we encounter
    so far:'
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `let` `lowestNumberIndex` = `i`; |'
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_TB
- en: This `lowestNumberIndex` will be 0 at the beginning of the first pass-through,
    1 at the beginning of the second, and so on.
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The reason we specifically keep track of the index is because we’ll need access
    to both the lowest value and its index in the rest of our code, and we can use
    the index to reference both. (We can check the lowest value by calling `array[lowestNumberIndex]`).
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Within each pass-through, we check the remaining values of the array to see
    if there might be a lower value than the current lowest value:'
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `for` (`let` `j` = `i` + 1; `j` < `array.length`; `j` += 1) { |'
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 'Indeed, if we find a lower value, we store this new value’s index in `lowestNumberIndex`:'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `if` (`array[j]` < `array[lowestNumberIndex]`) { |'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `lowestNumberIndex` = `j`; |'
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_TB
- en: By the end of the inner loop, we’ll have found the index of the lowest number
    from this pass-through.
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 如果在这一轮遍历中，最低值已经在其正确的位置（当最低值是我们在遍历中遇到的第一个值时会发生这种情况），我们就不需要做任何事情。但如果最低值不在其正确的位置，我们需要进行交换。具体来说，我们将最低值与索引为`i`的值交换，`i`是我们开始遍历时的索引：
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `if` (lowestNumberIndex !== i) { |'
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `[array[i], array[lowestNumberIndex]] = [array[lowestNumberIndex], array[i]];`
    |'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `}` |'
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 最后，我们返回已排序的数组：
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `return` array; |'
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_TB
