- en: Reading Recursive Code
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: 'It takes time and practice to get used to recursion, and you’ll ultimately
    learn two sets of skills: reading recursive code and writing recursive code. Reading
    recursive code is somewhat easier, so let’s get some practice with that first.'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'We’ll do this by looking at another example: calculating factorials.'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: A factorial is best illustrated with some examples.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'This is the factorial of 3:'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 3 * 2 * 1 = 6
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'This is the factorial of 5:'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 5 * 4 * 3 * 2 * 1 = 120
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: And so on and so forth.
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s a recursive implementation that returns a number’s factorial:'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function` `factorial`(number) { |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (number <= 1) { |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` 1; |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } `else` { |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` number * `factorial`(number - 1); |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 'This code can look somewhat confusing at first glance. To walk through the
    code to see what it does, here’s the process I recommend:'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Identify the base case.
  id: totrans-18
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: Walk through the function for the base case.
  id: totrans-19
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: Identify the next-to-last case. This is the case just before the base case,
    as I’ll demonstrate momentarily.
  id: totrans-20
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: Walk through the function for the next-to-last case.
  id: totrans-21
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: Repeat this process by identifying the case before the one you just analyzed
    and walking through the function for that case.
  id: totrans-22
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: 'Let’s apply this process to the preceding code. If we analyze the code, we’ll
    quickly notice that there are two paths. One path is where number is less than
    or equal to 1, and the other path is where number is greater than 1:'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `if` (number <= 1) { `// Path 1` |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ... |'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } `else` { `// Path 2: number is greater than 1` |'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ... |'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 'We can see that the recursion happens inside the `else` path, since `factorial`
    calls itself:'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `else` { |'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` number * `factorial`(number - 1); |'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 'So it must be that the base case is the first path, since it’s the path where
    no recursion is taking place:'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `if` (number <= 1) { |'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` 1; |'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_TB
- en: We can conclude, then, that the base case is when number is less than or equal
    to 1.
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Next, let’s walk through the `factorial` method assuming it’s dealing with
    a base case, such as `factorial`(1). Again, the relevant code from our method
    is the following:'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `if` (number <= 1) { |'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` 1; |'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 'Well, that’s pretty simple—it’s the base case, so no recursion actually happens.
    If we call `factorial`(1), the method simply returns 1. Okay, so grab a napkin
    and write this fact down:'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/recursively_recurse_with_recursion/napkin_1.png](images/recursively_recurse_with_recursion/napkin_1.png)'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'Next, let’s move up to the next case, which would be `factorial`(2). The relevant
    line of code from our method is this:'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `else` { |'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` number * `factorial`(number - 1); |'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 所以调用`factorial(2)`将返回`2 * factorial(1)`。要计算`2 * factorial(1)`，我们需要知道`factorial(1)`返回什么。如果你查看你的便签，你会看到它返回`1`。所以`2
    * factorial(1)`将返回`2 * 1`，正好是`2`。
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 把这个事实添加到你的便签上：
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/recursively_recurse_with_recursion/napkin_2.png](images/recursively_recurse_with_recursion/napkin_2.png)'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 现在，如果我们调用`factorial(3)`会发生什么？再次，这里是相关的代码行：
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `**else**`​ { |'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `**return**`​ `number * factorial(number - 1);` |'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 所以这可以转化为`return 3 * factorial(2)`。`factorial(2)`返回什么？你不必再重新思考，因为它在你的便签上！它返回`2`。所以，`factorial(3)`将返回`6`（因为`3
    * 2 = 6`）。继续将这个精彩的事实添加到你的便签上：
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/recursively_recurse_with_recursion/napkin_3.png](images/recursively_recurse_with_recursion/napkin_3.png)'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 花点时间自己想一想`factorial(4)`将返回什么。
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 正如你所看到的，从基本情况开始分析并逐步构建是一种很好的推理递归代码的方法。
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
