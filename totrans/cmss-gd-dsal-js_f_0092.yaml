- en: 队列
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 队列
- en: 队列是另一种数据结构，旨在处理临时数据。在许多方面，它与栈类似，只是处理数据的顺序不同。与栈一样，队列也是一种抽象数据类型。
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 队列是另一种数据结构，旨在处理临时数据。在许多方面，它与栈类似，只是处理数据的顺序不同。与栈一样，队列也是一种抽象数据类型。
- en: 你可以将队列看作电影剧院排队的人。排在最前面的人是第一个离开队列并进入剧院的人。对于队列来说，最先添加到队列的项是最先被移除的项。这就是计算机科学家将FIFO（先进先出）这个缩写应用于队列的原因。
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你可以将队列看作电影剧院排队的人。排在最前面的人是第一个离开队列并进入剧院的人。对于队列来说，最先添加到队列的项是最先被移除的项。这就是计算机科学家将FIFO（先进先出）这个缩写应用于队列的原因。
- en: 与排队的人一样，队列通常被横向表示。通常也称队列的前端为“前”，队列的末端为“后”。
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 与排队的人一样，队列通常被横向表示。通常也称队列的前端为“前”，队列的末端为“后”。
- en: 像栈一样，队列是具有三项限制的数组（只是一组不同的限制）：
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 像栈一样，队列是具有三项限制的数组（只是一组不同的限制）：
- en: 数据只能在队列的末尾插入。（这与栈的行为相同。）
  id: totrans-5
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 数据只能在队列的末尾插入。（这与栈的行为相同。）
- en: 数据只能从队列的前面删除。（这与栈的行为相反。）
  id: totrans-6
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 数据只能从队列的前面删除。（这与栈的行为相反。）
- en: 只有队列前面的元素可以被读取。（这同样与栈的行为相反。）
  id: totrans-7
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 只有队列前面的元素可以被读取。（这同样与栈的行为相反。）
- en: 让我们看看一个正在运行的队列，从一个空队列开始。
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们看看一个正在运行的队列，从一个空队列开始。
- en: 首先，我们插入一个5（插入到队列中的常用术语是入队，但我们将交替使用插入和入队这两个术语）：
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 首先，我们插入一个5（插入到队列中的常用术语是入队，但我们将交替使用插入和入队这两个术语）：
- en: '![images/stacks_and_queues/insert_5.png](images/stacks_and_queues/insert_5.png)'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/stacks_and_queues/insert_5.png](images/stacks_and_queues/insert_5.png)'
- en: 接下来，我们插入一个9：
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 接下来，我们插入一个9：
- en: '![images/stacks_and_queues/insert_9.png](images/stacks_and_queues/insert_9.png)'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/stacks_and_queues/insert_9.png](images/stacks_and_queues/insert_9.png)'
- en: 接下来，我们插入一个100：
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 接下来，我们插入一个100：
- en: '![images/stacks_and_queues/insert_100.png](images/stacks_and_queues/insert_100.png)'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/stacks_and_queues/insert_100.png](images/stacks_and_queues/insert_100.png)'
- en: 到目前为止，队列的功能就像一个栈。然而，移除数据的顺序是相反的，因为我们是从队列的前面移除数据。（从队列中移除元素也称为出队。）
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 到目前为止，队列的功能就像一个栈。然而，移除数据的顺序是相反的，因为我们是从队列的前面移除数据。（从队列中移除元素也称为出队。）
- en: 如果我们想要移除数据，我们必须从5开始，因为它在队列的前面：
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果我们想要移除数据，我们必须从5开始，因为它在队列的前面：
- en: '![images/stacks_and_queues/remove_5.png](images/stacks_and_queues/remove_5.png)'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/stacks_and_queues/remove_5.png](images/stacks_and_queues/remove_5.png)'
- en: 接下来，我们移除9：
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 接下来，我们移除9：
- en: '![images/stacks_and_queues/remove_9.png](images/stacks_and_queues/remove_9.png)'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/stacks_and_queues/remove_9.png](images/stacks_and_queues/remove_9.png)'
- en: 我们的队列现在只包含一个元素，100。
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们的队列现在只包含一个元素，100。
- en: 队列实现
  id: totrans-21
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 队列实现
- en: 我提到过队列是一种抽象数据类型。与许多其他抽象数据类型一样，它在许多编程语言中并没有实现。以下是队列的一种实现：
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我提到过队列是一种抽象数据类型。与许多其他抽象数据类型一样，它在许多编程语言中并没有实现。以下是队列的一种实现：
- en: '| ​  | ​`class`​ `Queue` { |'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`class`​ `Queue` { |'
- en: '| ​  | ​`constructor`​() { |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`constructor`​() { |'
- en: '| ​  | ​`this`.data = []; |'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`this`.data = []; |'
- en: '| ​  | } |'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `enqueue(element)` { |'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `enqueue(element)` { |'
- en: '| ​  | ​`this`.data.push(element); |'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`this`.data.push(element); |'
- en: '| ​  | } |'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `dequeue()` { |'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `dequeue()` { |'
- en: '| ​  | ​`if`​ (`this`.data.length > 0) { |'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`if`​ (`this`.data.length > 0) { |'
- en: '| ​  | ​`return`​ ​`this`.data.shift(); |'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`return`​ ​`this`.data.shift(); |'
- en: '| ​  | } ​`else`​ { |'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } ​`else`​ { |'
- en: '| ​  | ​`return`​ ​`null`​; |'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`return`​ ​`null`​; |'
- en: '| ​  | } |'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `read()` { |'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `read()` { |'
- en: '| ​  | ​`if`​ (`this`.data.length > 0) { |'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`if`​ (`this`.data.length > 0) { |'
- en: '| ​  | ​`return`​ ​`this`.data[0]; |'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`return`​ ​`this`.data[0]; |'
- en: '| ​  | } ​`else`​ { |'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } ​`else`​ { |'
- en: '| ​  | ​`return`​ ​`null`​; |'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`return`​ ​`null`​; |'
- en: '| ​  | } |'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | ​`export`​ ​`default`​ `Queue`; |'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`export`​ ​`default`​ `Queue`; |'
- en: 再次，我们的`Queue`类用一个接口封装了数组，限制了我们与数据的交互，只允许我们以特定的方式处理数据。`enqueue`方法允许我们在数组的末尾插入数据，而`dequeue`则移除数组中的第一个项目。`read`方法允许我们查看数组的第一个元素。
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 再次，我们的`Queue`类用一个接口封装了数组，限制了我们与数据的交互，只允许我们以特定的方式处理数据。`enqueue`方法允许我们在数组的末尾插入数据，而`dequeue`则移除数组中的第一个项目。`read`方法允许我们查看数组的第一个元素。
