- en: 'Chapter 2: Setting Up a Node.js Project and Exploring JavaScript Fundamentals'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will take the next steps in our Node.js journey by setting
    up a Node.js project and diving deeper into JavaScript fundamentals. By the end
    of this chapter, you will have a solid foundation to start building your own Node.js
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1 Initializing a Node.js Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start a new Node.js project, we will utilize a package manager called npm
    (Node Package Manager), which is bundled with Node.js. Follow these steps to initialize
    a new Node.js project:'
  prefs: []
  type: TYPE_NORMAL
- en: 2.1.1 Creating a Project Directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, create a new directory for your project. Open your command prompt or
    terminal and navigate to the desired location where you want to create the project
    directory. Use the following command to create a new directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This command will create a directory named "my-node-project" in your current
    location.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1.2 Navigating into the Project Directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, navigate into the project directory using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You are now inside the "my-node-project" directory.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1.3 Initializing the Project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To initialize the project and create a "package.json" file, which will store
    project-specific metadata and dependencies, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You will be prompted to provide information about your project, such as the
    project name, version, description, entry point, and more. You can either fill
    in the details or press Enter to accept the default values for each prompt.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have provided the necessary information, npm will generate the "package.json"
    file in your project directory.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 Exploring JavaScript Fundamentals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since Node.js is built on JavaScript, it is crucial to have a solid understanding
    of JavaScript fundamentals. In this section, we will cover some essential concepts
    to get you started.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2.1 Variables and Data Types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In JavaScript, you can declare variables using the "var", "let", or "const"
    keywords. JavaScript supports various data types, including numbers, strings,
    booleans, objects, arrays, and more. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 2.2.2 Control Flow and Looping
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'JavaScript provides control flow statements like "if-else" and "switch" to
    make decisions based on conditions. You can also use looping structures like "for"
    and "while" to repeat code blocks. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 2.2.3 Functions and Modules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Functions in JavaScript allow you to encapsulate reusable code blocks. You
    can define functions using the "function" keyword and call them as needed. Additionally,
    you can modularize your code by organizing functions into separate files and exporting
    them as modules. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '2'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: .3 Summary
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we learned how to set up a new Node.js project using npm and
    initialize a "package.json" file. We also explored some fundamental concepts of
    JavaScript, such as variables, data types, control flow, looping, functions, and
    modules.
  prefs: []
  type: TYPE_NORMAL
- en: By now, you should have a solid understanding of how to start a Node.js project
    and work with JavaScript fundamentals. In the next chapter, we will delve deeper
    into Node.js modules and the Node Package Manager (NPM), which will expand your
    capabilities in building Node.js applications.
  prefs: []
  type: TYPE_NORMAL
