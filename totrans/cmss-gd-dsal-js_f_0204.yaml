- en: Exercises
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: The following exercises provide you with the opportunity to practice with optimizing
    your code. The solutions to these exercises are found in the section `[​Chapter
    20](f_0225.xhtml#tips.for.code.optimization.solutions)` .
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'You’re working on software that analyzes sports players. Following are two
    arrays of players of different sports:'
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `const basketballPlayers = [` |'
  id: totrans-3
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `{ firstName: ''Jill'', lastName: ''Huang'', team: ''Gators'' },` |'
  id: totrans-4
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `{ firstName: ''Janko'', lastName: ''Barton'', team: ''Sharks'' },`
    |'
  id: totrans-5
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `{ firstName: ''Wanda'', lastName: ''Vakulskas'', team: ''Sharks'' },`
    |'
  id: totrans-6
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `{ firstName: ''Jill'', lastName: ''Moloney'', team: ''Gators'' },`
    |'
  id: totrans-7
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `{ firstName: ''Luuk'', lastName: ''Watkins'', team: ''Gators'' },`
    |'
  id: totrans-8
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `];` |'
  id: totrans-9
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-10
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `const footballPlayers = [` |'
  id: totrans-11
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `{ firstName: ''Hanzla'', lastName: ''Radosti'', team: ''32ers'' },`
    |'
  id: totrans-12
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `{ firstName: ''Tina'', lastName: ''Watkins'', team: ''Barleycorns''
    },` |'
  id: totrans-13
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `{ firstName: ''Alex'', lastName: ''Patel'', team: ''32ers'' },` |'
  id: totrans-14
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `{ firstName: ''Jill'', lastName: ''Huang'', team: ''Barleycorns'' },`
    |'
  id: totrans-15
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `{ firstName: ''Wanda'', lastName: ''Vakulskas'', team: ''Barleycorns''
    },` |'
  id: totrans-16
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `];` |'
  id: totrans-17
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: If you look carefully, you’ll see that there are some players who participate
    in more than one kind of sport. `Jill Huang` and `Wanda Vakulskas` play both basketball
    and football.
  id: totrans-18
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: 'You are to write a function that accepts two arrays of players and returns
    an array of the players who play in both sports. In this case, that would be the
    following:'
  id: totrans-19
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `["Jill Huang", "Wanda Vakulskas"]` |'
  id: totrans-20
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: While there are players who share first names and players who share last names,
    we can assume there’s only one person who has a particular full name (meaning
    first and last name).
  id: totrans-21
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: We can use a nested-loops approach, comparing each player from one array against
    each player from the other array, but this would have a runtime of `O(N * M)`
    . Your job is to optimize the function so that it can run in just `O(N + M)` .
  id: totrans-22
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: You’re writing a function that accepts an array of distinct integers from `0`,
    `1`, `2`, `3`…up to `N`. However, the array will be missing one integer, and your
    function is to return the missing one.
  id: totrans-23
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: 'For example, this array has all the integers from `0` to `6` but is missing
    the `4`:'
  id: totrans-24
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `[2, 3, 0, 6, 1, 5]` |'
  id: totrans-25
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: Therefore, the function should return `4` .
  id: totrans-26
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: 'The next example has all the integers from `0` to `9` but is missing the `1`:'
  id: totrans-27
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `[8, 2, 3, 9, 4, 7, 5, 0, 6]` |'
  id: totrans-28
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: In this case, the function should return `1`.
  id: totrans-29
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: Using a nested-loops approach would take up to `O(N²)` . Your job is to optimize
    the code so that it has a runtime of `O(N)` .
  id: totrans-30
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: You’re working on some more stock-prediction software. The function you’re writing
    accepts an array of predicted prices for a particular stock over the course of
    time.
  id: totrans-31
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: 'For example, look at this array of seven prices:'
  id: totrans-32
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `[10, 7, 5, 8, 11, 2, 6]` |'
  id: totrans-33
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: It predicts that a given stock will have these prices over the next seven days.
    (On Day `1` , the stock will close at `$10` ; on Day `2` , the stock will close
    at `$7` ; and so on.)
  id: totrans-34
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: Your function should calculate the greatest profit that could be made from a
    single “buy” transaction followed by a single “sell” transaction.
  id: totrans-35
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: In this example, the most money could be made if we bought the stock when it
    was worth `$5` and sold it when it was worth `$11`\. This yields a profit of `$6`
    per share.
  id: totrans-36
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: Note that we could make even more money if we buy and sell multiple times, but
    for now, this function focuses on the most profit that could be made from just
    one purchase followed by one sale.
  id: totrans-37
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: Now, we could use nested loops to find the profit of every possible buy-and-sell
    combination. However, this would be O(N²) and too slow for our hotshot trading
    platform. Your job is to optimize the code so that the function clocks in at just
    O(N).
  id: totrans-38
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: 'You’re writing a function that accepts an array of numbers and computes the
    highest product of any two numbers in the array. At first glance this is easy,
    as we can just find the two greatest numbers and multiply them. However, our array
    can contain negative numbers and look like this:'
  id: totrans-39
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `[5, -10, -6, 9, 4]` |'
  id: totrans-40
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: In this case, it’s actually the product of the two lowest numbers, `-10` and
    `-6` that yield the highest product of `60`.
  id: totrans-41
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: We could use nested loops to multiply every possible pair of numbers, but this
    would take O(N²) time. Your job is to optimize the function so that it’s a speedy
    O(N).
  id: totrans-42
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: You’re creating software that analyzes the data of body temperature readings
    taken from hundreds of human beings. These readings are taken from both healthy
    and sick people and range from 95 to 105 degrees Fahrenheit.
  id: totrans-43
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s a sample array of temperature readings:'
  id: totrans-44
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `[98, 99, 95, 105, 104, 98, 101, 99, 100, 97]` |'
  id: totrans-45
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: You are to write a function that sorts these readings from lowest to highest.
  id: totrans-46
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: If you used a classic sorting algorithm such as `Quicksort`, this would take
    O(N log N). However, in this case, it’s possible to write a faster sorting algorithm.
  id: totrans-47
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: Yes, that’s right. Even though you’ve learned that the fastest sorts are O(N
    log N), this case is different. Why? In this case, there’s a limited number of
    possibilities of what the readings will be. In such a case, we can sort these
    values in O(N). It may be N multiplied by a constant, but that’s still considered
    O(N).
  id: totrans-48
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: 'You’re writing a function that accepts an array of unsorted integers and returns
    the length of the longest consecutive sequence among them. The sequence is formed
    by integers that increase by 1\. For example, have a look at this array:'
  id: totrans-49
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `[10, 5, 12, 3, 55, 30, 4, 11, 2]` |'
  id: totrans-50
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: The longest consecutive sequence is `2-3-4-5`\. These four integers form an
    increasing sequence because each integer is one greater than the previous one.
    While there’s also a sequence of `10-11-12`, it’s only a sequence of three integers.
    In this case, the function should return `4`, since that’s the length of the longest
    consecutive sequence that can be formed from this array.
  id: totrans-51
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s one more example:'
  id: totrans-52
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `[19, 13, 15, 12, 18, 14, 17, 11]` |'
  id: totrans-53
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: 这个数组的最长序列是`11-12-13-14-15`，所以该函数会返回`5`。
  id: totrans-54
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: 如果我们对数组进行排序，那么我们可以仅遍历一次数组来找到最长的连续序列。然而，排序本身需要`O(N log N)`的时间。你的任务是优化该函数，使其只需`O(N)`的时间。
  id: totrans-55
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: 版权所有 © 2024, The Pragmatic Bookshelf。
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
