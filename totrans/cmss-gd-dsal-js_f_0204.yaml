- en: Exercises
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 练习
- en: The following exercises provide you with the opportunity to practice with optimizing
    your code. The solutions to these exercises are found in the section `[​Chapter
    20](f_0225.xhtml#tips.for.code.optimization.solutions)` .
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下练习为你提供了优化代码的机会。这些练习的解决方案可以在章节`[​第20章](f_0225.xhtml#tips.for.code.optimization.solutions)`中找到。
- en: 'You’re working on software that analyzes sports players. Following are two
    arrays of players of different sports:'
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 你正在开发分析运动员的软件。以下是两个不同运动的玩家数组：
- en: '| ​  | `const basketballPlayers = [` |'
  id: totrans-3
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const basketballPlayers = [` |'
- en: '| ​  | `{ firstName: ''Jill'', lastName: ''Huang'', team: ''Gators'' },` |'
  id: totrans-4
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `{ firstName: ''Jill'', lastName: ''Huang'', team: ''Gators'' },` |'
- en: '| ​  | `{ firstName: ''Janko'', lastName: ''Barton'', team: ''Sharks'' },`
    |'
  id: totrans-5
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `{ firstName: ''Janko'', lastName: ''Barton'', team: ''Sharks'' },`
    |'
- en: '| ​  | `{ firstName: ''Wanda'', lastName: ''Vakulskas'', team: ''Sharks'' },`
    |'
  id: totrans-6
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `{ firstName: ''Wanda'', lastName: ''Vakulskas'', team: ''Sharks'' },`
    |'
- en: '| ​  | `{ firstName: ''Jill'', lastName: ''Moloney'', team: ''Gators'' },`
    |'
  id: totrans-7
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `{ firstName: ''Jill'', lastName: ''Moloney'', team: ''Gators'' },`
    |'
- en: '| ​  | `{ firstName: ''Luuk'', lastName: ''Watkins'', team: ''Gators'' },`
    |'
  id: totrans-8
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `{ firstName: ''Luuk'', lastName: ''Watkins'', team: ''Gators'' },`
    |'
- en: '| ​  | `];` |'
  id: totrans-9
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `];` |'
- en: '| ​  |  |'
  id: totrans-10
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `const footballPlayers = [` |'
  id: totrans-11
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const footballPlayers = [` |'
- en: '| ​  | `{ firstName: ''Hanzla'', lastName: ''Radosti'', team: ''32ers'' },`
    |'
  id: totrans-12
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `{ firstName: ''Hanzla'', lastName: ''Radosti'', team: ''32ers'' },`
    |'
- en: '| ​  | `{ firstName: ''Tina'', lastName: ''Watkins'', team: ''Barleycorns''
    },` |'
  id: totrans-13
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `{ firstName: ''Tina'', lastName: ''Watkins'', team: ''Barleycorns''
    },` |'
- en: '| ​  | `{ firstName: ''Alex'', lastName: ''Patel'', team: ''32ers'' },` |'
  id: totrans-14
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `{ firstName: ''Alex'', lastName: ''Patel'', team: ''32ers'' },` |'
- en: '| ​  | `{ firstName: ''Jill'', lastName: ''Huang'', team: ''Barleycorns'' },`
    |'
  id: totrans-15
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `{ firstName: ''Jill'', lastName: ''Huang'', team: ''Barleycorns'' },`
    |'
- en: '| ​  | `{ firstName: ''Wanda'', lastName: ''Vakulskas'', team: ''Barleycorns''
    },` |'
  id: totrans-16
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `{ firstName: ''Wanda'', lastName: ''Vakulskas'', team: ''Barleycorns''
    },` |'
- en: '| ​  | `];` |'
  id: totrans-17
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `];` |'
- en: If you look carefully, you’ll see that there are some players who participate
    in more than one kind of sport. `Jill Huang` and `Wanda Vakulskas` play both basketball
    and football.
  id: totrans-18
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 如果仔细观察，你会发现有些玩家参与了多种运动。`Jill Huang`和`Wanda Vakulskas`都参与了篮球和足球。
- en: 'You are to write a function that accepts two arrays of players and returns
    an array of the players who play in both sports. In this case, that would be the
    following:'
  id: totrans-19
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 你需要编写一个函数，接受两个玩家数组，并返回同时参与两项运动的玩家数组。在这种情况下，结果将是以下内容：
- en: '| ​  | `["Jill Huang", "Wanda Vakulskas"]` |'
  id: totrans-20
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `["Jill Huang", "Wanda Vakulskas"]` |'
- en: While there are players who share first names and players who share last names,
    we can assume there’s only one person who has a particular full name (meaning
    first and last name).
  id: totrans-21
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 尽管有些玩家的名字和姓氏相同，但我们可以假设只有一个人拥有特定的全名（即名字和姓氏）。
- en: We can use a nested-loops approach, comparing each player from one array against
    each player from the other array, but this would have a runtime of `O(N * M)`
    . Your job is to optimize the function so that it can run in just `O(N + M)` .
  id: totrans-22
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 我们可以使用嵌套循环的方法，将一个数组中的每个玩家与另一个数组中的每个玩家进行比较，但这将导致运行时间为`O(N * M)`。你的任务是优化函数，使其只需运行`O(N
    + M)`。
- en: You’re writing a function that accepts an array of distinct integers from `0`,
    `1`, `2`, `3`…up to `N`. However, the array will be missing one integer, and your
    function is to return the missing one.
  id: totrans-23
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 你正在编写一个函数，该函数接受一个从`0`、`1`、`2`、`3`……直到`N`的不同整数数组。然而，该数组会缺少一个整数，你的函数需要返回缺失的那个。
- en: 'For example, this array has all the integers from `0` to `6` but is missing
    the `4`:'
  id: totrans-24
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，这个数组包含从`0`到`6`的所有整数，但缺少`4`：
- en: '| ​  | `[2, 3, 0, 6, 1, 5]` |'
  id: totrans-25
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `[2, 3, 0, 6, 1, 5]` |'
- en: Therefore, the function should return `4` .
  id: totrans-26
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 因此，函数应该返回`4`。
- en: 'The next example has all the integers from `0` to `9` but is missing the `1`:'
  id: totrans-27
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 下一个例子包含从`0`到`9`的所有整数，但缺少`1`：
- en: '| ​  | `[8, 2, 3, 9, 4, 7, 5, 0, 6]` |'
  id: totrans-28
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `[8, 2, 3, 9, 4, 7, 5, 0, 6]` |'
- en: In this case, the function should return `1`.
  id: totrans-29
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 在这种情况下，函数应该返回`1`。
- en: Using a nested-loops approach would take up to `O(N²)` . Your job is to optimize
    the code so that it has a runtime of `O(N)` .
  id: totrans-30
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 使用嵌套循环的方法将消耗`O(N²)`的时间。你的任务是优化代码，使其运行时间为`O(N)`。
- en: You’re working on some more stock-prediction software. The function you’re writing
    accepts an array of predicted prices for a particular stock over the course of
    time.
  id: totrans-31
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 你正在开发一些股票预测软件。你编写的函数接受一个数组，该数组表示某种股票随时间变化的预测价格。
- en: 'For example, look at this array of seven prices:'
  id: totrans-32
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，看看这个包含七个价格的数组：
- en: '| ​  | `[10, 7, 5, 8, 11, 2, 6]` |'
  id: totrans-33
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `[10, 7, 5, 8, 11, 2, 6]` |'
- en: It predicts that a given stock will have these prices over the next seven days.
    (On Day `1` , the stock will close at `$10` ; on Day `2` , the stock will close
    at `$7` ; and so on.)
  id: totrans-34
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 它预测某只股票在接下来的七天内将有这些价格。（在第`1`天，股票收盘价为`$10`；在第`2`天，股票收盘价为`$7`；依此类推。）
- en: Your function should calculate the greatest profit that could be made from a
    single “buy” transaction followed by a single “sell” transaction.
  id: totrans-35
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 你的函数应该计算出从一次“买入”交易后紧接着进行一次“卖出”交易所能获得的最大利润。
- en: In this example, the most money could be made if we bought the stock when it
    was worth `$5` and sold it when it was worth `$11`\. This yields a profit of `$6`
    per share.
  id: totrans-36
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个例子中，如果我们在股票价值为`$5`时买入，并在其价值为`$11`时卖出，将能赚取最多的钱。这每股带来的利润为`$6`。
- en: Note that we could make even more money if we buy and sell multiple times, but
    for now, this function focuses on the most profit that could be made from just
    one purchase followed by one sale.
  id: totrans-37
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 请注意，如果我们多次买入和卖出，我们可能会赚到更多的钱，但目前这个函数专注于从一次购买后进行一次销售所能获得的最大利润。
- en: Now, we could use nested loops to find the profit of every possible buy-and-sell
    combination. However, this would be O(N²) and too slow for our hotshot trading
    platform. Your job is to optimize the code so that the function clocks in at just
    O(N).
  id: totrans-38
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，我们可以使用嵌套循环来找到每个可能的买入和卖出组合的利润。然而，这将是O(N²)，对我们的高效交易平台来说太慢。你的任务是优化代码，使函数的时间复杂度仅为O(N)。
- en: 'You’re writing a function that accepts an array of numbers and computes the
    highest product of any two numbers in the array. At first glance this is easy,
    as we can just find the two greatest numbers and multiply them. However, our array
    can contain negative numbers and look like this:'
  id: totrans-39
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 你正在编写一个接受数字数组并计算数组中任意两个数字的最高乘积的函数。乍一看这很简单，因为我们只需找到两个最大的数字并将它们相乘。然而，我们的数组可能包含负数，可能看起来像这样：
- en: '| ​  | `[5, -10, -6, 9, 4]` |'
  id: totrans-40
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `[5, -10, -6, 9, 4]` |'
- en: In this case, it’s actually the product of the two lowest numbers, `-10` and
    `-6` that yield the highest product of `60`.
  id: totrans-41
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 在这种情况下，实际上是两个最低数字`-10`和`-6`的乘积产生了最高的乘积`60`。
- en: We could use nested loops to multiply every possible pair of numbers, but this
    would take O(N²) time. Your job is to optimize the function so that it’s a speedy
    O(N).
  id: totrans-42
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 我们可以使用嵌套循环来计算每一对可能的数字乘积，但这将需要O(N²)的时间。你的任务是优化这个函数，使其达到快速的O(N)。
- en: You’re creating software that analyzes the data of body temperature readings
    taken from hundreds of human beings. These readings are taken from both healthy
    and sick people and range from 95 to 105 degrees Fahrenheit.
  id: totrans-43
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 你正在创建一款软件，分析来自数百人身体温度读数的数据。这些读数来自健康和生病的人，范围从95到105华氏度。
- en: 'Here’s a sample array of temperature readings:'
  id: totrans-44
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 这里有一组温度读数的示例数组：
- en: '| ​  | `[98, 99, 95, 105, 104, 98, 101, 99, 100, 97]` |'
  id: totrans-45
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `[98, 99, 95, 105, 104, 98, 101, 99, 100, 97]` |'
- en: You are to write a function that sorts these readings from lowest to highest.
  id: totrans-46
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 你需要编写一个函数，将这些读数从最低到最高进行排序。
- en: If you used a classic sorting algorithm such as `Quicksort`, this would take
    O(N log N). However, in this case, it’s possible to write a faster sorting algorithm.
  id: totrans-47
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你使用经典的排序算法，比如`快速排序`，这将需要O(N log N)。然而，在这种情况下，可以编写一个更快的排序算法。
- en: Yes, that’s right. Even though you’ve learned that the fastest sorts are O(N
    log N), this case is different. Why? In this case, there’s a limited number of
    possibilities of what the readings will be. In such a case, we can sort these
    values in O(N). It may be N multiplied by a constant, but that’s still considered
    O(N).
  id: totrans-48
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 是的，没错。尽管你已经了解到最快的排序算法是O(N log N)，但这个案例不同。为什么？在这种情况下，温度读数的可能性是有限的。在这种情况下，我们可以在O(N)的时间内对这些值进行排序。可能是N乘以一个常数，但这仍然被视为O(N)。
- en: 'You’re writing a function that accepts an array of unsorted integers and returns
    the length of the longest consecutive sequence among them. The sequence is formed
    by integers that increase by 1\. For example, have a look at this array:'
  id: totrans-49
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 你正在编写一个接受无序整数数组并返回其中最长连续序列长度的函数。该序列由逐渐增加1的整数构成。例如，看看这个数组：
- en: '| ​  | `[10, 5, 12, 3, 55, 30, 4, 11, 2]` |'
  id: totrans-50
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `[10, 5, 12, 3, 55, 30, 4, 11, 2]` |'
- en: The longest consecutive sequence is `2-3-4-5`\. These four integers form an
    increasing sequence because each integer is one greater than the previous one.
    While there’s also a sequence of `10-11-12`, it’s only a sequence of three integers.
    In this case, the function should return `4`, since that’s the length of the longest
    consecutive sequence that can be formed from this array.
  id: totrans-51
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 最长的连续序列是`2-3-4-5`。这四个整数形成了一个递增序列，因为每个整数都比前一个大1。虽然还有一个`10-11-12`的序列，但它只有三个整数。在这种情况下，函数应该返回`4`，因为这是从该数组中可以形成的最长连续序列的长度。
- en: 'Here’s one more example:'
  id: totrans-52
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 这里还有一个例子：
- en: '| ​  | `[19, 13, 15, 12, 18, 14, 17, 11]` |'
  id: totrans-53
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `[19, 13, 15, 12, 18, 14, 17, 11]` |'
- en: 这个数组的最长序列是`11-12-13-14-15`，所以该函数会返回`5`。
  id: totrans-54
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 这个数组的最长序列是`11-12-13-14-15`，所以该函数会返回`5`。
- en: 如果我们对数组进行排序，那么我们可以仅遍历一次数组来找到最长的连续序列。然而，排序本身需要`O(N log N)`的时间。你的任务是优化该函数，使其只需`O(N)`的时间。
  id: totrans-55
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 如果我们对数组进行排序，那么我们可以仅遍历一次数组来找到最长的连续序列。然而，排序本身需要`O(N log N)`的时间。你的任务是优化该函数，使其只需`O(N)`的时间。
- en: 版权所有 © 2024, The Pragmatic Bookshelf。
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 版权所有 © 2024, The Pragmatic Bookshelf。
