- en: Heaps vs. Ordered Arrays
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: 现在你知道了堆的效率，让我们看看为什么它是实现优先级队列的一个很好的选择。
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s a side-by-side comparison of ordered arrays versus heaps:'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '|  | Ordered Array | Heap |'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| Insertion | `O(N)` | `O(log N)` |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| Deletion | `O(1)` | `O(log N)` |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
- en: At first glance, it seems that it’s a wash. Ordered arrays are slower than heaps
    when it comes to insertion but faster than heaps for deletion.
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: However, heaps are considered to be the better choice, and here’s why.
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: While `O(1)` is extremely fast, `O(log N)` is still very fast. And `O(N)`，相比之下，是慢的。考虑到这一点，我们可以这样重写之前的表格：
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '|  | Ordered Array | Heap |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| Insertion | Slow | Very fast |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| Deletion | Extremely fast | Very fast |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 在这个背景下，更清楚地理解为什么堆被认为是更好的选择。我们宁愿使用一种始终非常快的数据结构，而不是一种有时极快、有时慢的数据结构。
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: It’s worth pointing out that priority queues generally perform insertions and
    deletions in about equal proportion. Think about the emergency room example, where
    we expect to treat everyone who comes in. So we want both our insertions and deletions
    to be fast. If either operation is slow, our priority queue will be inefficient.
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: With a heap, then, we ensure that both of the priority queue’s primary operations—insertion
    and deletion—perform at a very fast clip.
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
