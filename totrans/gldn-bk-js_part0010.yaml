- en: Chapter 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DOM manipulation
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re about to explore one of the most dynamic and essential areas of web
    development with JavaScript: DOM (Document Object Model) manipulation. This skill
    is crucial for any developer who wants to create interactive and responsive user
    interfaces. We''ll cover how to select and manipulate DOM elements, work with
    events, and finally introduce the concept of Virtual DOM, which has revolutionized
    the way we manage user interface changes.'
  prefs: []
  type: TYPE_NORMAL
- en: Selection and manipulation of DOM elements
  prefs: []
  type: TYPE_NORMAL
- en: The DOM is a tree representation of the structure of your HTML document. Each
    HTML element is a node in the tree, and these nodes can be accessed and manipulated
    using JavaScript to change the content and appearance of the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Selecting elements:  The first step to manipulating the DOM is selecting the
    elements you want to work with. JavaScript offers several ways to do this.'
  prefs: []
  type: TYPE_NORMAL
- en: '`getElementById`:  Selects an element by its ID.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`getElementsByClassName`:  Selects all elements with a given class.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`getElementsByTagName`:  Selects all elements of a given type.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`querySelector` e `querySelectorAll`:  Selects the first element or all elements
    that match a CSS selector.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Manipulating elements:  After selecting elements, you can manipulate their
    properties and content.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changing the text:  Use `innerText` or `textContent` to change the text of
    an element.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Changing the HTML:  Use `innerHTML` to change the inner HTML of an element.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Changing attributes:  Use `setAttribute` to change attributes of an element.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Changing styles:  Modify an element''s style directly through the `style` property.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding and removing classes:  Use `classList` to manipulate classes of an element.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Creating and removing elements: You can create new elements and add them to
    the DOM, as well as remove existing elements.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating elements: Use `createElement` to create new elements and `appendChild`
    or `insertBefore` to add them to the DOM.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Removing elements:  Use `removeChild` to remove elements.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Events and event handling
  prefs: []
  type: TYPE_NORMAL
- en: Events are actions or occurrences that happen in the browser that can be captured
    and handled using JavaScript. Event handling is essential to create interactivity
    on web pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding events:  Use `addEventListener` to add an event to an element.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Event types:  There are several types of events you can capture, such as clicks,
    mouse movements, key presses, among others.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Keyboard Events:  Capture keyboard events to add functionality like keyboard
    shortcuts.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Preventing default behavior: Use `preventDefault` to prevent the default behavior
    of an event.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Event propagation:  Events in JavaScript propagate through the DOM in two phases:
    capture and bubble. Use `stopPropagation` to stop the event from propagating.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Event delegation:  Delegate events to a parent element to capture events from
    its children. This is useful for dynamic elements.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Introduction to Virtual DOM
  prefs: []
  type: TYPE_NORMAL
- en: Virtual DOM is a central concept in modern libraries and frameworks like React.
    It allows you to update the user interface efficiently while minimizing direct
    operations on the actual DOM.
  prefs: []
  type: TYPE_NORMAL
- en: 'How Virtual DOM works: Virtual DOM is an in-memory representation of the real
    DOM. When the application state changes, a new Virtual DOM tree is created and
    compared with the previous one. The differences are then applied to the real DOM
    in an optimized way.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Benefits of Virtual DOM:'
  prefs: []
  type: TYPE_NORMAL
- en: '1\. Performance:  Minimizes direct operations on the DOM, which are costly
    in terms of performance.'
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Simplification:  Abstracts the complexity of DOM updates, making code writing
    easier.'
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Consistency:  Ensures that user interface state is maintained in a predictable
    manner.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example with React:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In this example, React uses Virtual DOM to optimize counter updating. Each time
    the button is clicked, the state changes, which causes the creation of a new Virtual
    DOM. React then applies the necessary changes to the actual DOM efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: We explore DOM manipulation, event capture and handling, and an introduction
    to Virtual DOM. These skills are fundamental to creating interactive and efficient
    web applications. By mastering these techniques, you will be able to build user
    interfaces that respond fluidly and intuitively to users' actions. As we continue
    our journey, these tools will serve as the foundation for even more advanced and
    dynamic JavaScript applications. Stay curious and engaged, and you'll be well
    prepared to face the challenges and seize the opportunities that arise in modern
    web development.
  prefs: []
  type: TYPE_NORMAL
