- en: © 作者（们），独家许可给`Springer Fachmedien Wiesbaden GmbH`，`Springer Nature`的一部分 2024`J.
    L. Zuckarelli` 用`Python`和`JavaScript`学习编码 [https://doi.org/10.1007/978-3-658-42912-6_1](https://doi.org/10.1007/978-3-658-42912-6_1)
  id: totrans-0
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: © 作者（们），独家许可给`Springer Fachmedien Wiesbaden GmbH`，`Springer Nature`的一部分 2024`J.
    L. Zuckarelli` 用`Python`和`JavaScript`学习编码 [https://doi.org/10.1007/978-3-658-42912-6_1](https://doi.org/10.1007/978-3-658-42912-6_1)
- en: 1. 什么是编程？
  id: totrans-1
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 1. 什么是编程？
- en: '`Joachim L. Zuckarelli`^([1](#Aff2)  )(1)慕尼黑，德国概述'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Joachim L. Zuckarelli`^([1](#Aff2)  )(1) 慕尼黑，德国概述'
- en: 在本章中，我们将讨论编程是什么，以及我们为什么需要编程和程序员。我们将看到，编程是关于开发或实现逐步解决问题的策略，称为`算法`。然而，并非所有计算机能够解决的问题都适合使用严格的算法来处理；在`人工智能`（`AI`）领域，使用了其他方法，我们将在本章中也探讨这些方法。
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论编程是什么，以及我们为什么需要编程和程序员。我们将看到，编程是关于开发或实现逐步解决问题的策略，称为`算法`。然而，并非所有计算机能够解决的问题都适合使用严格的算法来处理；在`人工智能`（`AI`）领域，使用了其他方法，我们将在本章中也探讨这些方法。
- en: 1.1 神秘的力量——或：意识决定存在
  id: totrans-4
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 1.1 神秘的力量——或：意识决定存在
- en: 您的汽车、手机和洗衣机有什么共同点？它们当然是技术设备，都是工程的奇迹。但还有什么呢？
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 您的汽车、手机和洗衣机有什么共同点？它们当然是技术设备，都是工程的奇迹。但还有什么呢？
- en: 它们都运行在软件上。正是软件赋予了它们生命，使您能够将这些设备用于它们被设计的目的。没有软件，这些设备只会是没有功能、没有价值的金属和塑料构造。
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 它们都运行在软件上。正是软件赋予了它们生命，使您能够将这些设备用于它们被设计的目的。没有软件，这些设备只会是没有功能、没有价值的金属和塑料构造。
- en: 我们看不见软件，但我们可以看到它的效果，这些效果通过其运行的物理设备，即`硬件`，来介导。如果您的汽车在滑溜的条件下开始打滑，而您能够及时拦住它并将其引导回稳定的方向，那么您就会感受到`电子稳定程序`（`ESP`）的效果。`ESP`不断检查汽车是否朝着您用方向盘设定的方向行驶，必要时进行调整，从而帮助您保持车辆的控制。这是一种您看不见但在需要时存在的强大助手。
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们看不见软件，但我们可以看到它的效果，这些效果通过其运行的物理设备，即`硬件`，来介导。如果您的汽车在滑溜的条件下开始打滑，而您能够及时拦住它并将其引导回稳定的方向，那么您就会感受到`电子稳定程序`（`ESP`）的效果。`ESP`不断检查汽车是否朝着您用方向盘设定的方向行驶，必要时进行调整，从而帮助您保持车辆的控制。这是一种您看不见但在需要时存在的强大助手。
- en: 软件控制物理设备，并告诉它们该做什么。这个原则同样适用于您的汽车、洗衣机和手机。然而，运行在这些设备上的软件在功能上有两个关键的不同点：
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 软件控制物理设备，并告诉它们该做什么。这个原则同样适用于您的汽车、洗衣机和手机。然而，运行在这些设备上的软件在功能上有两个关键的不同点：
- en: '`首先，`控制您的洗衣机或提供汽车辅助功能的软件功能非常有限，因为它只需用于特定目的。您可能不会想在洗衣机上写商业信函或硕士论文，因此没有软件可以让您这样做，而洗衣机缺乏必要的物理输入和输出系统。另一方面，手机、平板电脑和计算机（笔记本、台式机、服务器等）运行着更广泛的不同软件，因为这些设备的功能恰恰是运行程序。'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`首先，`控制您的洗衣机或提供汽车辅助功能的软件功能非常有限，因为它只需用于特定目的。您可能不会想在洗衣机上写商业信函或硕士论文，因此没有软件可以让您这样做，而洗衣机缺乏必要的物理输入和输出系统。另一方面，手机、平板电脑和计算机（笔记本、台式机、服务器等）运行着更广泛的不同软件，因为这些设备的功能恰恰是运行程序。'
- en: '`Secondly,` cars and washing machines once existed without software, functioning
    purely mechanically and electrically. A computer without software, however, would
    make no sense, because its central function is to execute programs.'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`其次，`汽车和洗衣机曾经在没有软件的情况下存在，完全依靠机械和电力运作。然而，没有软件的计算机则毫无意义，因为其核心功能就是执行程序。'
- en: '`The simple examples of the washing machine and the car show that software
    is capturing more and more devices that were previously operated without software.
    This increasing digitalization of the real world not only makes it possible to
    make more and more functions available on the devices or to execute previously
    existing functions more precisely, safely, quickly, or autonomously, but also
    to network different devices with each other. The Internet of Things is the modern
    buzzword here. When your refrigerator recognizes that the milk is about to run
    out and autonomously orders two cartons of milk online, because it knows that
    you need milk every morning to prepare your cereals, or when your house automatically
    raises the shutters because the weather forecast announces strong winds, then
    you get a sense the software working behind the scenes to make different devices
    work together for our benefit.`'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`洗衣机和汽车的简单例子表明，软件正在逐步掌控那些以前无需软件即可操作的设备。这种现实世界的数字化进程，不仅使得在这些设备上提供越来越多的功能，或者更精确、更安全、更快速或更自主地执行原有功能成为可能，还能够使不同设备之间相互联网。物联网就是其中的现代流行词。当您的冰箱识别到牛奶快用完了，并且自主在线订购两盒牛奶，因为它知道您每天早晨需要牛奶来准备麦片，或者当您的房子因为天气预报宣布将有强风而自动升起百叶窗时，您就会感受到背后软件的作用，它让不同的设备协同工作，为我们带来好处。`'
- en: '`Despite all the networking and all the supposed intelligence of everyday devices,
    when we think of “software” we naturally think of the classic computer and the
    software permanently installed on it, such as the operating system, the word processor
    or the web browser. In fact, however, almost everything we encounter on the Internet
    every day is ultimately software. Even static websites, as we know them from the
    early days of the World Wide Web and with which you can do nothing but look at
    them, are ultimately designed with a special, descriptive programming language
    (more on this below). Of course, there is software behind `dynamic` websites that
    respond to user input. When you post a message on Facebook or start a search query
    on Google, software is running, partly on your own computer, partly on the web
    server that provides the page.`'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`尽管所有的联网和日常设备的所谓智能化，我们在想到“软件”时，往往自然而然地会想到经典的计算机和永久安装在其中的软件，例如操作系统、文字处理软件或网页浏览器。实际上，几乎我们每天在互联网上遇到的一切，最终都是软件。即使是静态网站，就像我们在万维网初期所看到的那种，您只能查看而无法进行任何交互，它们也是用一种特殊的描述性编程语言设计的（更多内容见下文）。当然，动态网站背后也有软件在运行，响应用户的输入。当您在Facebook上发布消息或在Google上发起搜索查询时，软件在运行，一部分在您的计算机上，另一部分在提供页面的网络服务器上。`'
- en: 'With its increasing breadth of application and its ability to solve complex
    problems, software has undergone rapid development in recent decades. By contrast,
    things did not happen quite as rapidly in the early days of software: the first
    device on which a real program could run was the `Analytical Engine` of the English
    polymath `Charles Babbage` in the 1830s, a purely mechanical predecessor of the
    computer. The Italian mathematician `Federico Luigi Menabrea` and the British
    scholar `Augusta Ada Byron`, among others, wrote the first programs for this system.
    This activity earned `Byron` a reputation as the world’s first female programmer
    and made her a subject of pop culture. What was most remarkable about the software
    the two were developing at the time was that the hardware to go with it didn’t
    even exist at the time. The work of the two early programmers took place with
    paper and ink, for `Babbage`’s `Analytical Engine` was never built during his
    lifetime because the `British Association for the Advancement of Science`, which
    should have funded the project, found the cost too uncertain and the prospects
    for success too nebulous. In fact, a fully functional `Analytical Engine` was
    not built until the 1990s, when much more powerful computers had been available
    for decades.'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 随着应用范围的不断扩大以及解决复杂问题的能力，软件在近几十年经历了快速的发展。相比之下，软件的早期并未发展得如此迅速：第一个能够运行真实程序的设备是19世纪30年代英籍博学者`Charles
    Babbage`的`分析机`，它是计算机的纯机械前身。意大利数学家`Federico Luigi Menabrea`和英国学者`Augusta Ada Byron`等人，为该系统编写了第一个程序。此举使得`Byron`被誉为世界上第一位女性程序员，并使她成为流行文化的一个话题。当时这两位开发的最显著的软件特性是，配套的硬件在当时根本不存在。两位早期程序员的工作是通过纸和墨水进行的，因为`Babbage`的`分析机`在他有生之年并未建成，因为应该资助该项目的`英国科学促进会`认为该项目的费用过于不确定，且成功的前景模糊。事实上，直到1990年代，才有足够强大的计算机可以用于建造一个功能完备的`分析机`。
- en: Punched cards were used to store the programs (and also the data with which
    they worked). This technique was first used at the beginning of the nineteenth
    century in the `Jacquard loom`, a weaving machine that could be “programmed” to
    weave certain patterns with the help of the punched cards.
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 打孔卡片被用来存储程序（以及它们所处理的数据）。这一技术最早是在19世纪初期在`Jacquard织机`中使用的，这是一种可以通过打孔卡片来“编程”织造特定图案的织布机。
- en: 'Here you can also see the parallel to our discussion about washing machines
    and computers: `Babbage`’s `Analytical Engine` was a system that was developed
    exclusively to run software, whereas the loom of the silk weaver `Joseph-Marie
    Jacquard` was, like the washing machine, a device that can basically fulfill its
    function without software, but which becomes more versatile and easier to use
    through programs.'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里你也可以看到我们关于洗衣机和计算机的讨论的平行之处：`Babbage`的`分析机`是一个完全为运行软件而开发的系统，而丝绸织工`Joseph-Marie
    Jacquard`的织机就像洗衣机一样，是一种基本上可以在没有软件的情况下履行功能的设备，但通过程序，它变得更加多功能并且更易于使用。
- en: 1.2 Algorithms
  id: totrans-16
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 1.2 算法
- en: 'Software is ubiquitous these days. It controls the devices and tells them what
    to do. This is quite obvious with physical devices such as the washing machine,
    which masters a whole range of automatic washing programs, or your car, which
    maneuvers into a parking space completely independently thanks to the corresponding
    assistance function. But it’s the same with computer software: the software instructs
    the computer to display a `YouTube` video on the screen, for example, and play
    the appropriate sound through the speakers. Software allows you to use the keyboard
    to enter your `Twitter` password or click a button in word processing to put some
    words in `bold` type.'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 软件在今天无处不在。它控制着设备并告诉它们该做什么。这在一些物理设备上尤其明显，比如洗衣机，它掌握了多种自动洗涤程序，或者你的汽车，凭借相应的辅助功能能够完全独立地停入停车位。但计算机软件也是如此：例如，软件指示计算机在屏幕上显示一个`YouTube`视频，并通过扬声器播放相应的声音。软件使你能够通过键盘输入你的`Twitter`密码，或者在文字处理软件中点击按钮将一些文字设置为`bold`加粗。
- en: The software thus issues instructions to the devices. A set of several such
    instructions is called an `algorithm`.
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因此，软件向设备发出指令。若干这样的指令集合称为`算法`。
- en: An algorithm is nothing more than a working instruction that explains how to
    achieve a certain goal step by step. We are familiar with algorithms from our
    everyday lives, even if we do not usually refer to the work rules and processes
    we encounter there as algorithms.
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 算法不过是一个工作指令，解释如何一步步达成某个特定目标。我们在日常生活中已经很熟悉算法，即便我们通常不会将遇到的工作规则和流程称为算法。
- en: 'One example of an everyday algorithm is a recipe to make a good basil pesto:'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 一个日常算法的例子是制作一份好吃的香蒜酱的食谱：
- en: '1.'
  id: totrans-21
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '1.'
- en: You need `80 g` of `pine nuts`, `4–5` bunches of `basil` (`pesto alla genovese`)
    and/or `rocket`, a clove of garlic, `50 g` of `Parmesan cheese`, `50 g` of `pecorino
    sardo` or `pecorino romano`, `180 mL` of `olive oil`, and `salt` (preferably coarse).
  id: totrans-22
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 你需要`80 g`的`松子`，`4-5`把`罗勒`（用于制作`热那亚风味酱`）和/或`芝麻菜`，一瓣大蒜，`50 g`的`帕尔马奶酪`，`50 g`的`佩科里诺·萨尔多`或`佩科里诺·罗马诺`，`180
    mL`的`橄榄油`，以及`盐`（最好是粗盐）。
- en: '2.'
  id: totrans-23
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '2.'
- en: Wash the basil, pat dry and pluck off the leaves.
  id: totrans-24
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 洗净罗勒，拍干并摘下叶子。
- en: '3.'
  id: totrans-25
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '3.'
- en: Peel the garlic clove, remove the germ and chop coarsely.
  id: totrans-26
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 剥去大蒜瓣的外皮，去掉芽并粗略切碎。
- en: '4.'
  id: totrans-27
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '4.'
- en: Grate `parmesan` and `pecorino` (do not use cheese that has already been grated).
  id: totrans-28
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 切碎`帕尔马奶酪`和`佩科里诺`（不要使用已经切好的奶酪）。
- en: '5.'
  id: totrans-29
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '5.'
- en: Place the `pine nuts`, `garlic` and `basil leaves` in a mortar with the `salt`
    and crush finely.
  id: totrans-30
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 把`松子`、`大蒜`和`罗勒叶`放入研钵中，加入`盐`并细致地捣碎。
- en: '6.'
  id: totrans-31
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '6.'
- en: Mix in the cheese.
  id: totrans-32
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 加入奶酪。
- en: '7.'
  id: totrans-33
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '7.'
- en: Slowly add the olive oil, not too much at a time so you can work it into the
    mixture well.
  id: totrans-34
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 慢慢地加入橄榄油，每次加入的量不要太多，以便能够充分地将其与混合物搅拌均匀。
- en: 'If you follow these instructions, you will end up with a good pesto made from
    the ingredients mentioned in the first step. Another example of algorithms that
    we encounter in everyday life all the time is the following:'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你按照这些指令操作，你将得到一份由第一步提到的食材制作的美味香蒜酱。我们在日常生活中经常遇到的另一个算法例子是：
- en: '1.'
  id: totrans-36
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '1.'
- en: Head northwest on `W 31st St` toward `8th Ave`。
  id: totrans-37
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 朝西北方向走，在`W 31st St`上朝`8th Ave`前进。
- en: '2.'
  id: totrans-38
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '2.'
- en: Go `184 ft`。
  id: totrans-39
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 走`184 ft`。
- en: '3.'
  id: totrans-40
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '3.'
- en: Turn right onto `8th Ave`。
  id: totrans-41
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 向右转上`8th Ave`。
- en: '4.'
  id: totrans-42
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '4.'
- en: Go `0.7 mi`。
  id: totrans-43
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 向`0.7 mi`方向走。
- en: '5.'
  id: totrans-44
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '5.'
- en: Turn right on `W 44th St`。
  id: totrans-45
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 向右转上`W 44th St`。
- en: '6.'
  id: totrans-46
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '6.'
- en: Go `0.2 mi`。
  id: totrans-47
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 向`0.2 mi`方向走。
- en: 'This algorithm describes how to get from `Penn Station` to `Times Square` in
    `New York`。As a final example, here’s an everyday algorithm that describes getting
    up and getting ready on a normal workday: 1.  1.'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这个算法描述了如何从`Penn Station`走到`Times Square`（纽约）。作为最后一个例子，下面是描述一个正常工作日早晨起床并准备好的日常算法：
    1. 1.
- en: Get up.
  id: totrans-49
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 起床。
- en: '2.'
  id: totrans-50
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '2.'
- en: Brush teeth.
  id: totrans-51
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 刷牙。
- en: '3.'
  id: totrans-52
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '3.'
- en: Shower.
  id: totrans-53
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 洗澡。
- en: '4.'
  id: totrans-54
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '4.'
- en: Get dressed.
  id: totrans-55
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 穿衣服。
- en: '5.'
  id: totrans-56
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '5.'
- en: Stir instant coffee in cup.
  id: totrans-57
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 在杯中搅拌速溶咖啡。
- en: '6.'
  id: totrans-58
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '6.'
- en: Drink from coffee cup until cup is empty.
  id: totrans-59
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 喝完咖啡杯中的咖啡，直到杯子空为止。
- en: '7.'
  id: totrans-60
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '7.'
- en: Put on shoes.
  id: totrans-61
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 穿上鞋子。
- en: '8.'
  id: totrans-62
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '8.'
- en: If it is cold, put on a jacket.
  id: totrans-63
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 如果很冷，穿上外套。
- en: '9.'
  id: totrans-64
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '9.'
- en: Leave apartment.
  id: totrans-65
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 离开公寓。
- en: '10.'
  id: totrans-66
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '10.'
- en: Lock the door.
  id: totrans-67
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 锁门。
- en: 'This algorithm differs from the previous two algorithms in that not all steps
    are always executed. Some steps (“… put on a jacket”) are only executed if certain
    conditions are met (“If it is cold …”). Other steps are repeated: step `6` says
    to drink from the coffee cup until the cup is empty. Conditions and repetitions
    (or “loops，” as the programmer would say) are important concepts of programming,
    which we will deal with in more detail later.'
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这个算法与前两个算法的不同之处在于，并不是所有步骤都会被执行。有些步骤（“...穿上外套”）只有在满足某些条件时才会执行（“如果很冷...”）。其他步骤会被重复执行：第`6`步说要一直喝咖啡杯里的咖啡，直到杯子空为止。条件和重复（或者程序员所说的“循环”）是编程中的重要概念，我们稍后将会更详细地讨论。
- en: You can see from the example of this simple instruction for getting up that
    we often use elements such as conditions and loops in our everyday algorithms,
    which are also used in programming. Basically, everyday algorithms and the algorithms
    that programmers develop are not that different. Nevertheless, there are some
    important differences.
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 从这个简单的起床指令示例中，你可以看到我们在日常算法中经常使用条件和循环元素，这些元素在编程中也会用到。基本上，日常算法和程序员编写的算法并没有太大不同。然而，还是有一些重要的区别。
- en: But what are the differences between these everyday algorithms and the algorithms
    that are processed by computers? We have already said that everyday algorithms
    are not usually called “algorithms”—just look at the face of the chef in a restaurant
    when you compliment him after a delicious meal and let him know that “he really
    used an excellent `Tartufo` algorithm.”
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 但这些日常算法与计算机处理的算法有何不同呢？我们已经说过，日常算法通常不会被称为“算法”——你只要看看餐厅大厨的脸色，当你夸他做出美味的菜肴并告诉他：“他真的用了一个极好的`Tartufo`算法”时，他的反应就知道了。
- en: But the differences between everyday algorithms and computer algorithms are
    even more profound. Computer algorithms run on the device `computer`; Everyday
    algorithms run on the “device human.” The “device human” is an intelligent system
    and automatically fills in gaps that the algorithm may have with what makes sense
    at that point. If, for example, the algorithm omits a trivial but obvious intermediate
    step that is vital, then we recognize this incompleteness and simply execute the
    missing step anyway, even though it is not specified in the algorithm. Computers
    don’t do that. Computers are machines that do exactly what they are told. They
    don’t think for themselves, and they don’t have any intelligence that would allow
    them to independently recognize incomplete instruction sets or errors in the algorithm
    and fill in or replace them with what makes sense at that point. That is why computer
    algorithms must be complete, with no errors. They must be incomparably more precise
    than algorithms designed to run on the “human device.” Everything must be described
    in detail so that the computer can correctly execute the algorithm.
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 但日常算法与计算机算法之间的差异更加深刻。计算机算法运行在设备`计算机`上；而日常算法则运行在“设备人类”上。“设备人类”是一个智能系统，能够自动填补算法可能存在的空白，使用在那个时刻合理的方式。例如，如果算法省略了一个微不足道但显而易见的中间步骤，而这个步骤又至关重要，我们会识别出这种不完整性，并直接执行这个缺失的步骤，即使它没有在算法中明确指定。计算机则做不到这一点。计算机是按照明确指令行事的机器。它们不会自行思考，也没有任何使它们能够独立识别指令集不完整或算法错误的智能，更不能根据当时的情境填补或替换错误的部分。因此，计算机算法必须是完整的，不能有任何错误。它们必须比为“人类设备”设计的算法更加精确。每一个细节都必须描述清楚，以便计算机能够正确执行算法。
- en: 'Although everyday algorithms and computer algorithms are fundamentally different
    in this respect, they have one thing in common: they are ultimately just a sequence
    of steps to achieve a certain goal, regardless of what that goal is—whether it’s
    to make a fabulous `pesto` or to make a `Facebook` post.'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 尽管日常算法和计算机算法在这个方面本质上是不同的，但它们有一个共同点：它们最终都是为了实现某个目标的步骤序列，不管这个目标是什么——无论是制作美味的`香蒜酱`，还是发布`Facebook`动态。
- en: 'This answers the basic question we ask in this chapter: Programming is nothing
    more and nothing less than the process of developing algorithms and writing them
    down so that the computer can execute them.'
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这回答了我们在本章中提出的基本问题：编程不过是开发算法并将其写下来，以便计算机能够执行这些算法的过程。
- en: '1.3`Limits of Classical Algorithms`: The Playing Field of Artificial Intelligence'
  id: totrans-74
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 1.3 `经典算法的局限性`：人工智能的竞技场
- en: 1.3.1`Only Apparently Intelligent`
  id: totrans-75
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 1.3.1 `看似智能`
- en: Computers can do many things very well that we humans find difficult or where
    we quickly reach our limits, as the German-born founder of PayPal, `Peter Thiel`,
    argues. They perform complicated calculations at breathtaking speed for hours
    on end without ever beginning to tire. Yet, `Thiel` continues, computers routinely
    fail at tasks that even toddlers can do effortlessly, such as the task of discerning
    whether or not the animal depicted in a YouTube video is a `cat`. Why is this
    seemingly simple problem so difficult for computers to master?
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 正如出生于德国的PayPal创始人`彼得·蒂尔`所言，计算机能够做许多我们人类觉得困难的事情，或者在我们迅速达到极限时，计算机仍然能够轻松完成。它们能够以惊人的速度进行复杂的计算，连续工作数小时而从不感到疲倦。然而，`蒂尔`继续指出，计算机常常在一些即使是婴儿也能轻松完成的任务上失败，比如判断一段YouTube视频中描绘的动物是否是`猫`。为什么这个看似简单的问题对计算机来说如此难以掌握呢？
- en: Try writing down an algorithm that checks whether a picture shows a cat. You
    will probably start with the obvious features of a cat, such as the ears or whiskers.
    But you can’t just tell the computer, “See if there are pointed ears in the picture!.”
    How is it supposed to know what a pointy ear is? So you’re going to start describing
    pointy ears. You might approach the description problem with the geometric shape
    of a triangle. Color is certainly a good distinguishing characteristic as well.
    However, you will quickly discover that cat ears are not really quite triangular,
    even more so when the cat is filmed from the side. Also, your computer will very
    quickly mistake the gable of a gray and brown house with a thatched roof for a
    cat’s ear. The more you delve into describing what features a cat has and how
    they differ from similar features of other objects that are not cats, you’ll realize
    how incredibly hard it is to develop a real algorithm that can tell whether we’re
    dealing with a cat or not.
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 试着写一个算法，检查一张图片是否展示了猫。你可能会从猫的显著特征开始，比如耳朵或胡须。但你不能仅仅告诉计算机：“看看图片中是否有尖耳朵！”它怎么知道什么是尖耳朵呢？所以你要开始描述尖耳朵。你可能会用三角形的几何形状来描述。颜色显然也是一个很好的区分特征。然而，你很快会发现猫耳朵并不完全是三角形的，尤其是当猫从侧面拍摄时。并且，你的计算机很可能会把一座灰色和棕色的房屋的山墙，尤其是带有茅草屋顶的部分，误认为是猫的耳朵。你越是深入描述猫的特征及其与其他非猫物体相似特征的差异，你会发现开发一个真正能够判断我们是否面对的是一只猫的算法是多么困难。
- en: 'Why is it so easy for us humans to recognize a cat? We always recognize the
    cat, even if we only see it from behind or against the light. The answer is simple:
    our brain does not work algorithmically. It does not execute a series of commands
    step by step to systematically solve the problem of “recognizing a cat.” It works
    completely differently.'
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为什么我们人类这么容易识别一只猫？即使我们只是从背后或逆光看到它，我们也能认出它。答案很简单：我们的脑袋并不是按照算法工作的。它不会一步步执行一系列命令来系统地解决“识别猫”的问题。它的工作方式完全不同。
- en: An entire branch of computer science deals with the abstract reproduction of
    this functioning of the human brain in the computer. The ability of a computer
    to reproduce performances that we typically assume to require intelligence is
    consequently called `artificial intelligence` (AI).
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 计算机科学的一个完整分支致力于在计算机中抽象再现人类大脑的运作。计算机能够重现我们通常认为需要智能的表现，这种能力因此被称为`人工智能`（AI）。
- en: '`Artificial intelligence` has become a buzzword, you hear about it everywhere
    and in all kinds of contexts. Many people are frightened by the idea that computers
    could be “intelligent.” An extensive range of exciting science fiction films teaches
    us that we should be careful what we develop in the field of `artificial intelligence`,
    after all, our creations could one day take control and make us redundant.'
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`人工智能`已经成为一个流行词汇，你在各种场合和背景下都会听到它。许多人对计算机可能变得“智能”这一想法感到害怕。许多精彩的科幻电影教导我们，在`人工智能`领域我们应该谨慎，因为毕竟，我们的创造物有可能有一天会掌控一切，甚至让我们变得多余。'
- en: Recent developments provide reason not to dismiss such fears entirely as the
    pipe dreams of imaginative screenwriters. Until a few years ago, most experts
    assumed that there could only be `weak artificial intelligence` (as did the author
    when he developed an AI strategy for a company a few years ago). `Weak AI` means
    that a machine can perform only in some individual areas like a human. However,
    at the latest since developments such as `ChatGPT` by OpenAI, we have come much
    closer to a `strong` or `general artificial intelligence`，i.e., a system that
    can perform (at least) similarly to humans in practically all areas, and perhaps
    even shows creativity and has self-consciousness (whatever these two concepts
    actually mean). A `strong AI` would pass the famous `Turing Test` (named for British
    mathematician and computer scientist `Alan Turing`，1912–1954), in which human
    jurors were not able to decide if they are talking to a real person or an artificial
    intelligence. Until now, such systems, for which the android `Data` from the popular
    “Star Trek—The Next Generation” TV series is an impressive example, were indeed
    pure science fiction.
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 最近的进展使人们有理由不再完全将这些担忧视为富有想象力的编剧的空想。直到几年前，大多数专家认为只能存在`弱人工智能`（就像作者几年前为一家公司制定AI战略时的看法）。`弱AI`意味着机器只能在某些个别领域像人类一样进行操作。然而，自从像OpenAI的`ChatGPT`这样的发展出现以来，我们已经更接近于`强人工智能`或`通用人工智能`，即一种能够在几乎所有领域（至少）类似人类地执行任务的系统，甚至可能展现创造力并具备自我意识（无论这两个概念实际上意味着什么）。一种`强AI`将通过著名的`图灵测试`（以英国数学家和计算机科学家`艾伦·图灵`（1912–1954）命名），在这个测试中，人类评审员无法判断他们是与一个真人对话，还是与人工智能对话。直到现在，这样的系统——例如流行电视剧《星际迷航：下一代》中的安卓人`数据`（Data）——确实还属于纯粹的科幻小说。
- en: However, applications of `weak artificial intelligence` are still predominant
    at present. Advanced chess or Go computers beat any human player, no matter how
    brilliant, by a mile. (Semi-)autonomous driving would not be possible without
    `AI`-powered image recognition and the recognition of road conditions, road grids
    and any other current road users. Voice recognition, such as that offered by Apple’s
    `Siri` assistance system, is based on artificial intelligence, as is Google’s
    image search, or the mechanism that suggests `YouTube` videos that might interest
    you.
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，`弱人工智能`的应用目前仍占主导地位。先进的国际象棋或围棋计算机轻松战胜任何人类玩家，无论对方多么出色。（半）自动驾驶如果没有`AI`驱动的图像识别、道路状况识别、道路网格及其他当前路况使用者的识别，都无法实现。语音识别，如苹果的`Siri`助手系统，基于人工智能，同样谷歌的图像搜索、以及推荐你可能感兴趣的`YouTube`视频机制，都是基于人工智能的应用。
- en: Some of these applications of artificial intelligence are quite controversial
    in the social debate, even if they do not come with the danger that world domination
    by highly intelligent machines will become a reality the day after tomorrow and
    that humans will be downgraded to useless bio-matter.
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 人工智能的某些应用在社会辩论中颇具争议，即便这些应用并不会带来明天就实现的机器世界统治的危险，更不会使人类沦为无用的生物物质。
- en: 'There are at least five reasons for this:'
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 至少有五个原因：
- en: '1.'
  id: totrans-85
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '1.'
- en: Because artificial intelligence allows us to reproduce human performance, which
    we typically associate with intelligence, it opens up a wide field of applications
    that were previously reserved for human decision-making, evaluation and judgment.
    We do not feel comfortable delegating these decisions to basically unintelligent
    systems that only simulate the workings of human intelligence. After all, it is
    precisely the core idea of weak artificial intelligence that human intelligence
    performances are reproduced in a narrowly limited area, without causing real`thinking`
    in the machine. It is therefore not surprising that people are skeptical when
    they are suddenly expected to entrust their lives to an autonomously driven car,
    to rely on medical diagnoses made by “intelligent” software, or to accept judgments
    written by a specialized program as opposed to a human judge. However, the situation
    is put into perspective when one looks at other situations in history where technology
    suddenly took over the activities of humans. NASA’s Apollo 11 mission in 1969
    saw the first use of a control computer, initially much to the displeasure of
    the astronauts involved, who simply could not imagine putting their lives in the
    hands of the control program developed by the young mathematician, `Margaret Hamilton`
    and her team. In fact, the software did not control the spacecraft fully automatically
    as an autopilot but acted more like an assistance system for the human pilots,
    who were getting used to working with the new technology. So, habituation occurs
    when we realize that the systems are serving their purpose and we develop confidence
    in their`functioning,` even if we don’t really understand how they work.
  id: totrans-86
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 因为人工智能使我们能够再现人类的表现，而这种表现通常与智能相关，它打开了一个广泛的应用领域，这些应用以前通常是由人类进行决策、评估和判断的。我们不太愿意将这些决策交给本质上并不智能的系统，这些系统仅仅是模拟人类智能的运作。毕竟，正是弱人工智能的核心思想是在人类智能的狭窄领域内再现其表现，而不会在机器中引发真正的`思考`。因此，当人们突然被期望将生命托付给自动驾驶汽车，依赖由“智能”软件做出的医学诊断，或接受由专业程序作出的判断而非人类法官时，人们的怀疑也就不足为奇。然而，当我们回顾历史上其他技术突然接管人类活动的情况时，事情就显得相对合理了。1969年，NASA的阿波罗11号任务中首次使用了控制计算机，最初这令参与的宇航员非常不满，他们根本无法想象将自己的生命交给由年轻数学家`玛格丽特·汉密尔顿`及其团队开发的控制程序。事实上，软件并没有像自动驾驶仪那样完全自动控制航天器，而是更多地充当了人类飞行员的辅助系统，飞行员们正在逐渐适应与新技术的配合。因此，当我们意识到这些系统在履行其功能时，我们就会产生习惯，尽管我们不真正理解它们是如何工作的，但我们对其`功能`逐渐建立起信任。
- en: '2.'
  id: totrans-87
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '2.'
- en: In addition to the necessary trust in their functionality, `ethical considerations`
    also pose a problem for applications of artificial intelligence. A classic, hypothetical
    example is the driverless car that, in a critical traffic situation, only has
    the choice between two situations that are, strictly speaking, morally unacceptable,
    either of which would result in the death or serious injury of another road user.
    This case can still be “solved” reasonably well by the car simply choosing the
    variant that gives the “affected” road user the highest chance of survival. In
    case of doubt, the autopilot assesses the situation considerably faster and better
    than the shocked and completely overwhelmed human driver. Nevertheless, there
    are more than a few who postulate, based on fundamental considerations, that such
    decisions should always be reserved for humans. The same is sometimes demanded
    for decisions in a social context, such as court judgments.
  id: totrans-88
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 除了对其功能的必要信任，`伦理考虑`也为人工智能的应用带来了问题。一个经典的假设例子是无人驾驶汽车，在一个关键的交通情境下，汽车只能在两个严格来说都道德上不可接受的选择中做出决策，每个选择都可能导致另一个道路使用者的死亡或重伤。这种情况可以通过让汽车选择一个能给“受影响”道路使用者最大生存机会的选项来“合理”解决。在疑难情况下，自动驾驶系统评估情况的速度和准确性远远超过了震惊和完全不知所措的人类驾驶员。然而，仍然有很多人基于基本的思考认为，这种决策应该始终保留给人类。在社会背景下，例如法院判决，有时也会提出类似的要求。
- en: '3.'
  id: totrans-89
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '3.'
- en: Artificial intelligence allows applications that can be used to exert `control
    over other people`, either through surveillance or by influencing our behavior.
    In the wrong hands, such technologies would be powerful tools for despots, autocrats,
    and even for democratic politicians in democratic political systems. The social
    debate about alleged vote-rigging in the `2016 presidential election` in the `United
    States` and the role of `social media` in democratic contestation are still comparatively
    benign examples of such phenomena.
  id: totrans-90
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 人工智能允许开发出可以用来对`他人进行控制`的应用程序，可能通过监控或通过影响我们的行为来实现。在错误的人手中，这些技术将成为暴君、独裁者，甚至是民主政治体系中的民主政治家，强有力的工具。关于`2016年总统选举`中涉嫌舞弊和`社交媒体`在民主竞选中的角色的社会辩论，仍然是此类现象的相对温和的例子。
- en: '4.'
  id: totrans-91
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '4.'
- en: The results that artificial intelligence produces depend heavily on the inputs
    with which it has been trained. This can lead to artificial intelligence delivering
    incorrect results or presenting facts in a distorted and biased way. The former
    is a problem that, for example, the creators of `ChatGPT` explicitly point out
    to their users. The latter has been criticized in particular in connection with
    (actually or supposedly) racist statements and connotations.
  id: totrans-92
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 人工智能所产生的结果在很大程度上依赖于其训练所使用的输入。这可能导致人工智能给出不正确的结果，或以扭曲和偏见的方式呈现事实。前者是一个问题，例如`ChatGPT`的创建者明确指出的问题。后者则尤其在（实际上或假定的）种族主义言论和暗示的相关背景下受到批评。
- en: '5.'
  id: totrans-93
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '5.'
- en: Finally, not only since the rise of `ChatGPT` and its brethren it is likely
    that artificial intelligence will replace humans in some areas, leading to a social
    problem in that people will no longer be able to perform the work that they have
    been trained to do. This is considered a significant problem mainly because the
    first areas where artificial intelligence will replace humans completely will
    be those that are currently handled by people with rather low skills. These people,
    in turn, will find it more difficult to find alternative employment than higher-skilled
    people.
  id: totrans-94
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 最后，不仅自从`ChatGPT`及其类似工具的兴起，人工智能在某些领域取代人类的可能性越来越大，这导致了一个社会问题，即人们将无法继续从事他们已经接受过训练的工作。这被认为是一个重大问题，主要是因为人工智能首先完全取代人类的领域将是那些目前由低技能人员处理的工作。这些人将比高技能人员更难找到替代性就业。
- en: So even if some applications of artificial intelligence are not without controversy,
    its spread and number of areas of application will continue to grow. The possibilities
    offered by artificial intelligence are simply too interesting and too tempting.
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因此，即使人工智能的一些应用并非没有争议，它的传播和应用领域的数量仍将继续增长。人工智能所提供的可能性实在是太有趣，也太有诱惑力了。
- en: '1.3.2 `Cat or Not Cat`: That Is the Question Here'
  id: totrans-96
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 1.3.2 `猫或非猫`：这就是问题所在
- en: 使用识别图片中猫的例子，我们已经建立了人工智能与传统算法的工作方式截然不同。实际上，许多人工智能方法并不采用算法步骤的序列，而是使用一种模仿人类大脑工作方式的模式识别形式。在这个过程中，信号通过几层人工“神经元”进行传递。由于有“神经元”，人们也称之为`neural
    network`。这些神经元像小网络节点一样相互连接。网络中任何连接的神经元都可以将信号脉冲传递给任何与之相连的其他神经元。是否发生这种传递，以及传递的强度，首先取决于相关神经元之间是否存在连接。如果存在，某个神经元传递给下一个神经元的脉冲强度则取决于这些神经元之间连接的“厚度”以及第一个神经元从其各自的“前身”接收到的信号强度。最后一层神经元是输出层。这是多层处理结果“显示”的地方。
  id: totrans-97
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 使用识别图片中猫的例子，我们已经建立了人工智能与传统算法的工作方式截然不同。实际上，许多人工智能方法并不采用算法步骤的序列，而是使用一种模仿人类大脑工作方式的模式识别形式。在这个过程中，信号通过几层人工“神经元”进行传递。由于有“神经元”，人们也称之为`neural
    network`。这些神经元像小网络节点一样相互连接。网络中任何连接的神经元都可以将信号脉冲传递给任何与之相连的其他神经元。是否发生这种传递，以及传递的强度，首先取决于相关神经元之间是否存在连接。如果存在，某个神经元传递给下一个神经元的脉冲强度则取决于这些神经元之间连接的“厚度”以及第一个神经元从其各自的“前身”接收到的信号强度。最后一层神经元是输出层。这是多层处理结果“显示”的地方。
- en: 在我们的猫的例子中，关于图像的信息，即每个像素的位置和颜色值，首先到达神经元的输入层。这些神经元根据连接的厚度和它们自身接收到的脉冲强度，将脉冲传递到下一层。在最后一层只有两个神经元，分别表示结果“猫”和“非猫”。因此，最终结果，即最终到达两个输出神经元的信号强度，显然取决于输入层（即我们分析的图像）中信号的分布以及神经元之间连接的厚度。但神经网络如何知道这些连接必须多厚才能最终识别出输入层中的图像是否代表一只猫呢？答案是：它不知道。我们必须告诉它。更准确地说，我们用猫的图像和不显示猫的图像“训练”网络。毕竟，我们知道最终哪个结果是正确的。借助于未训练（或至少尚未完全训练）的网络提供的结果和一个特殊的算法，可以对神经元之间的连接厚度进行最佳调整。之后，就进入下一个训练图像。经过时间的推移和数千张图像，神经网络在识别猫的图像方面变得越来越好。
  id: totrans-98
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在我们的猫的例子中，关于图像的信息，即每个像素的位置和颜色值，首先到达神经元的输入层。这些神经元根据连接的厚度和它们自身接收到的脉冲强度，将脉冲传递到下一层。在最后一层只有两个神经元，分别表示结果“猫”和“非猫”。因此，最终结果，即最终到达两个输出神经元的信号强度，显然取决于输入层（即我们分析的图像）中信号的分布以及神经元之间连接的厚度。但神经网络如何知道这些连接必须多厚才能最终识别出输入层中的图像是否代表一只猫呢？答案是：它不知道。我们必须告诉它。更准确地说，我们用猫的图像和不显示猫的图像“训练”网络。毕竟，我们知道最终哪个结果是正确的。借助于未训练（或至少尚未完全训练）的网络提供的结果和一个特殊的算法，可以对神经元之间的连接厚度进行最佳调整。之后，就进入下一个训练图像。经过时间的推移和数千张图像，神经网络在识别猫的图像方面变得越来越好。
- en: The remarkable thing about this technique is that in the end we can’t tell why
    exactly the neural network is able to distinguish the cat images from the non-cat
    images in the first place. The network consists of a huge set of neurons and connections
    between those neurons, as well as the thicknesses of those connections (called
    `weights`). If you look at these parameters, you can’t tell from the neural network
    that it is designed to recognize a cat. In fact, we don’t have the slightest idea
    `why` the network works. The parameters simply emerged from the training sessions,
    they were determined by a very classical algorithm based on the difference between
    the result calculated by the network and the desired, that is, correct result,
    or readjusted step by step with each training image. Thus, the neural network
    is a black box. Whereas with a conventional algorithm we can understand exactly
    how it arrived at this or that result, with the neural network we see only a confusing
    set of parameters that cannot be interpreted in any meaningful way.
  id: totrans-99
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这种技术的一个显著特点是，最终我们无法确切地解释神经网络是如何从一开始就能区分猫的图像与非猫图像的。该网络由大量神经元及其之间的连接组成，还包括这些连接的厚度（称为`权重`）。如果你查看这些参数，你无法从神经网络中看出它是为识别猫而设计的。事实上，我们甚至没有丝毫的头绪，`为什么`这个网络有效。参数仅仅是通过训练过程得出的，它们是由一个非常经典的算法确定的，这个算法基于网络计算出的结果与期望结果之间的差异，也就是正确结果，或者是通过每一张训练图像一步步地重新调整的。因此，神经网络就像一个黑箱。与传统算法不同，我们可以准确地理解它是如何得出某个结果的，而神经网络则只是一个混乱的参数集合，这些参数无法以任何有意义的方式解释。
- en: For the sake of completeness, it should be mentioned that not all artificial
    intelligence approaches work with neural networks. For decades, there have been
    systems that provide the knowledge of an expert in a certain field on the basis
    of `if-then` rules and thus of conventional algorithms, and that practically support
    people in a question-and-answer game, for example in making a complicated medical
    diagnosis or in understanding the malfunction of an engine. These systems are
    also called `expert systems` because they have the knowledge of a human expert
    in this field documented in explicit rules.
  id: totrans-100
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为了完整性，应该提到并非所有的人工智能方法都使用神经网络。几十年来，已经有一些系统利用`if-then`规则和传统算法提供某个领域专家的知识，从而支持人们进行问答游戏，例如在做复杂的医学诊断或理解发动机故障时。这些系统也被称为`专家系统`，因为它们在该领域拥有以显式规则记录的人的专家知识。
