["```jsjsx\n\nclass ConditionalRenderingExample extends React.Component {\n\nrender() {\n\nconst isLoggedIn = this.props.isLoggedIn;\n\nif (isLoggedIn) {\n\nreturn <LoggedInComponent />;\n\n} else {\n\nreturn <LoggedOutComponent />;\n\n}\n\n}\n\n}\n\n```", "```jsjsx\n\nclass ConditionalRenderingExample extends React.Component {\n\nrender() {\n\nconst isLoggedIn = this.props.isLoggedIn;\n\nreturn (\n\n<div>\n\n{isLoggedIn ? <LoggedInComponent /> : <LoggedOutComponent />}\n\n</div>\n\n);\n\n}\n\n}\n\n```", "```jsjsx\n\nclass ConditionalRenderingExample extends React.Component {\n\nrender() {\n\nconst shouldRenderComponent = this.props.shouldRenderComponent;\n\nreturn (\n\n<div>\n\n{shouldRenderComponent && <ConditionalComponent />}\n\n</div>\n\n);\n\n}\n\n}\n\n```", "```jsjsx\n\nclass ConditionalRenderingExample extends React.Component {\n\nrender() {\n\nconst isMobile = this.props.isMobile;\n\nreturn (\n\n<div>\n\n{isMobile ? (\n\n<MobileComponent />\n\n) : (\n\n<DesktopComponent />\n\n)}\n\n</div>\n\n);\n\n}\n\n}\n\n```", "```jsjsx\n\nclass ListRenderingExample extends React.Component {\n\nrender() {\n\nconst names = ['Alice', 'Bob', 'Charlie', 'David'];\n\nconst nameList = names.map((name, index) => (\n\n<li key={index}>{name}</li>\n\n));\n\nreturn (\n\n<div>\n\n<ul>{nameList}</ul>\n\n</div>\n\n);\n\n}\n\n}\n\n```", "```jsjsx\n\nclass ListRenderingExample extends React.Component {\n\nrender() {\n\nconst users = [\n\n{ id: 1, name: 'Alice' },\n\n{ id: 2, name: 'Bob' },\n\n{ id: 3, name: 'Charlie' },\n\n{ id: 4, name: 'David' },\n\n];\n\nconst userList = users.map((user) => (\n\n<li key={user.id}>{user.name}</li>\n\n));\n\nreturn (\n\n<div>\n\n<ul>{userList}</ul>\n\n</div>\n\n);\n\n}\n\n}\n\n```", "```jsjsx\n\nclass ConditionalListRenderingExample extends React.Component {\n\nrender() {\n\nconst tasks = this.props.tasks;\n\nreturn (\n\n<div>\n\n{tasks.length > 0 ? (\n\n<ul>\n\n{tasks.map((task) => (\n\n<li key={task.id}>{task.title}</li>\n\n))}\n\n</ul>\n\n) : (\n\n<p>No tasks to display.</p>\n\n)}\n\n</div>\n\n);\n\n}\n\n}\n\n```", "```jsjsx\n\nclass FilteredListExample extends React.Component {\n\nrender() {\n\nconst users = [\n\n{ id: 1, name: 'Alice', isAdmin: true },\n\n{ id: 2, name: 'Bob', isAdmin: false },\n\n{ id: 3, name: 'Charlie', isAdmin: true },\n\n{ id: 4, name: 'David',\n\nisAdmin: false },\n\n];\n\nconst adminUsers = users.filter((user) => user.isAdmin);\n\nconst userList = adminUsers.map((user) => (\n\n<li key={user.id}>{user.name}</li>\n\n));\n\nreturn (\n\n<div>\n\n<ul>{userList}</ul>\n\n</div>\n\n);\n\n}\n\n}\n\n```", "```jsjsx\n\nclass SortedListExample extends React.Component {\n\nrender() {\n\nconst names = ['Alice', 'David', 'Charlie', 'Bob'];\n\nconst sortedNames = names.slice().sort();\n\nconst nameList = sortedNames.map((name, index) => (\n\n<li key={index}>{name}</li>\n\n));\n\nreturn (\n\n<div>\n\n<ul>{nameList}</ul>\n\n</div>\n\n);\n\n}\n\n}\n\n```", "```jsjsx\n\nclass DynamicListExample extends React.Component {\n\nconstructor(props) {\n\nsuper(props);\n\nthis.state = {\n\ntasks: [],\n\nnewTask: '',\n\n};\n\n}\n\nhandleInputChange = (event) => {\n\nthis.setState({ newTask: event.target.value });\n\n};\n\naddTask = () => {\n\nconst { tasks, newTask } = this.state;\n\nif (newTask.trim() !== '') {\n\nthis.setState({\n\ntasks: [...tasks, { id: Date.now(), title: newTask }],\n\nnewTask: '',\n\n});\n\n}\n\n};\n\nrender() {\n\nconst { tasks, newTask } = this.state;\n\nconst taskList = tasks.map((task) => (\n\n<li key={task.id}>{task.title}</li>\n\n));\n\nreturn (\n\n<div>\n\n<div>\n\n<input\n\ntype=\"text\"\n\nplaceholder=\"Enter a new task\"\n\nvalue={newTask}\n\nonChange={this.handleInputChange}\n\n/>\n\n<button onClick={this.addTask}>Add Task</button>\n\n</div>\n\n{tasks.length > 0 ? (\n\n<ul>{taskList}</ul>\n\n) : (\n\n<p>No tasks to display.</p>\n\n)}\n\n</div>\n\n);\n\n}\n\n}\n\n```"]