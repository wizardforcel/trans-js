["```js\n 1 function block() {\n 2  const start = new Date();\n 3 \n 4  while (new Date() - start < 3000) {\n 5    // simulate long running operation\n 6    // that takes approximately 3 seconds\n 7  }\n 8 }\n 9 \n10 console.log(\"Before long running operation\");\n11 // gets logged immediately\n12 \n13 block();\n14 \n15 console.log(\"After long running operation\");\n16 // gets logged after approximately 3 seconds\n\n```", "```js\n1 <h1>hello world</h1>\n2 <button onclick=\"alert('hello')\">Click</button>\n\n```", "```js\n 1 function fetchUser(url) {\n 2  const xhr = new XMLHttpRequest();\n 3 \n 4  xhr.addEventListener(\"load\", function () {\n 5    // check if the operation is complete\n 6    if (xhr.readyState === 4) {\n 7      if (xhr.status === 200) {\n 8        // Request succeeded\n 9        const data = JSON.parse(xhr.responseText);\n10         console.log(data);\n11       } else {\n12         // Request failed\n13         const error = new Error(\"Failed to fetch todo\");\n14         console.log(error);\n15       }\n16     }\n17   });\n18 \n19   xhr.open(\"GET\", url);\n20   xhr.send();\n21 }\n22 \n23 fetchUser(\"https://jsonplaceholder.typicode.com/todos/1\");\n\n```", "```js\n1 const submitBtn = document.getElementById(\"submit\");\n2 \n3 submitBtn.addEventListener(\"click\", function (event) {\n4   // code to handle the click event\n5 });\n\n```", "```js\n1 setTimeout(function () {\n2   console.log(\"logged after 2 seconds\");\n3 }, 2000);\n\n```", "```js\n1 setTimeout(function () {\n2   console.log(\"logged after approximately 4 seconds instead of 2\");\n3 }, 2000);\n4 \n5 const start = new Date();\n6 \n7 // takes approximately 4 seconds to execute\n8 while (new Date() - start < 4000) {}\n\n```", "```js\n1 asyncOperation1((result1) => {\n2   asyncOperation2(result1, (result2) => {\n3     asyncOperation3(result2, (result3) => {\n4       asyncOperation4(result3, (result4) => {\n5         // ...more nested callbacks and operations\n6       });\n7     });\n8   });\n9 });\n\n```", "```js\n 1 asyncOperation1((error1, result1) => {\n 2  if (error1) {\n 3    // handle error\n 4  } else {\n 5    asyncOperation2(result1, (error2, result2) => {\n 6      if (error2) {\n 7        // handle error\n 8      } else {\n 9        asyncOperation3(result2, (error3, result3) => {\n10           if (error3) {\n11             // handle error\n12           } else {\n13             asyncOperation4(result3, (error4, result4) => {\n14               if (error4) {\n15                 // handle error\n16               } else {\n17                 // ...more nested asynchronous operations and callbacks\n18               }\n19             });\n20           }\n21         });\n22       }\n23     });\n24   }\n25 });\n\n```", "```js\n 1 setTimeout(() => {\n 2  console.log(\"hello world\");\n 3 }, 2000);\n 4 \n 5 console.log(\"after setTimeout\");\n 6 \n 7 // output:\n 8 // ------\n 9 // after setTimeout\n10 // hello world\n\n```", "```js\n1 const p1 = fetch(/* some url */);\n\n```", "```js\n1 const p1 = fetch(/* some url */);\n2 \n3 p1.then((response) => {\n4   // code to execute if the promise fulfills\n5 });\n\n```", "```js\n 1 const p1 = fetch(/* some url */);\n 2 \n 3 p1.then(\n 4  (response) => {\n 5    // code to execute if the promise fulfills\n 6  },\n 7  (error) => {\n 8    // code to execute if the promise is rejected\n 9  }\n10 );\n\n```", "```js\n1 const p1 = fetch(/* some url */);\n2 \n3 p1.then((response) => {\n4   // code to execute if the promise fulfills\n5 });\n6 \n7 p1.catch((error) => {\n8   // code to execute if the promise is rejected\n9 });\n\n```", "```js\n1 p1.then(null, (error) => {\n2   // code to execute if the promise is rejected\n3 });\n\n```", "```js\n 1 const p1 = fetch(/* some url */);\n 2 \n 3 p1.then((response) => {\n 4  // hide the loading spinner\n 5  document.getElementById(\"spinner\").style.display = \"none\";\n 6 });\n 7 \n 8 p1.catch((error) => {\n 9  // hide the loading spinner\n10   document.getElementById(\"spinner\").style.display = \"none\";\n11 });\n\n```", "```js\n 1 const p1 = fetch(/* some url */);\n 2 \n 3 p1.then((response) => {\n 4  // code to execute if the promise fulfills\n 5 });\n 6 \n 7 p1.catch((error) => {\n 8  // code to execute if the promise is rejected\n 9 });\n10 \n11 p1.finally(() => {\n12   // hide the loading spinner\n13   document.getElementById(\"spinner\").style.display = \"none\";\n14 });\n\n```", "```js\n1 const p = new Promise((resolve, reject) => {\n2   // initiate asynchronous operation...\n3 });\n\n```", "```js\n 1 const p = new Promise((resolve, reject) => {\n 2  const xhr = new XMLHttpRequest();\n 3 \n 4  xhr.addEventListener(\"load\", function () {\n 5    // check if operation is complete\n 6    if (xhr.readyState === 4) {\n 7      if (xhr.status === 200) {\n 8        // Request succeeded\n 9        const data = JSON.parse(xhr.responseText);\n10         // call the resolve function with the data\n11         // as an argument to fulfill the promise\n12         // with the data\n13         resolve(data);\n14       } else {\n15         // Request failed\n16         const error = new Error(\"Failed to fetch todo\");\n17         // call the reject function with the rejection\n18         // reason or an error as an argument\n19         reject(error);\n20       }\n21     }\n22   });\n23 \n24   const url = \"https://jsonplaceholder.typicode.com/todos/1\";\n25   xhr.open(\"GET\", url);\n26   xhr.send();\n27 });\n28 \n29 // register fulfillment handler\n30 p.then((todo) => {\n31   console.log(todo);\n32 });\n33 \n34 // register rejection handler\n35 p.catch((error) => {\n36   console.log(error.message);\n37 });\n\n```", "```js\n 1 function timeout(delayInSeconds) {\n 2  const delayInMilliseconds = delayInSeconds * 1000;\n 3 \n 4  return new Promise((resolve) => {\n 5    setTimeout(() => resolve(), delayInMilliseconds);\n 6  });\n 7 }\n 8 \n 9 timeout(2).then(() => {\n10   console.log(\"done\"); // logged after 2 seconds\n11 });\n\n```", "```js\n 1 const p = fetch(/* some url */);\n 2 \n 3 // register a fulfillment handler\n 4 p.then((response) => {\n 5  // code...\n 6 });\n 7 \n 8 // register a rejection handler\n 9 p.catch((error) => {\n10   // code...\n11 });\n\n```", "```js\n1 fetch(/* some url */)\n2   .then((response) => {\n3     // code...\n4   })\n5   .catch((error) => {\n6     // code...\n7   });\n\n```", "```js\n1 const pFetch = fetch(/* some url */);\n2 \n3 const pThen = pFetch.then((response) => {\n4   // code...\n5 });\n6 \n7 const pCatch = pThen.catch((error) => {\n8   // code...\n9 });\n\n```", "```js\n 1 function fakeRequest(isSuccessRequest = true) {\n 2  return new Promise((resolve, reject) => {\n 3    setTimeout(() => {\n 4      if (isSuccessRequest) {\n 5        const data = { name: \"John Doe\", favouriteLanguage: \"JavaScript\" };\n 6        resolve(data);\n 7      } else {\n 8        const error = new Error(\"request failed\");\n 9        reject(error);\n10       }\n11     }, 2000);\n12   });\n13 }\n\n```", "```js\n1 const pRequest = fakeRequest();\n2 \n3 const pThen = pRequest.then((response) => {\n4   console.log(response);\n5 });\n6 \n7 console.log(pThen === pRequest); // false\n\n```", "```js\n     1 // pRequest will be fulfilled\n     2 const pRequest = fakeRequest();\n     3 \n     4 const pThen = pRequest.then((response) => {\n     5  console.log(response);\n     6  return \"success\";\n     7 });\n     8 \n     9 pThen.then((data) => {\n    10   console.log(data); // success\n    11 });\n\n    ```", "```js\n     1 // pRequest will be fulfilled\n     2 const pRequest = fakeRequest();\n     3 \n     4 const pThen = pRequest.then((response) => {\n     5  console.log(response);\n     6 });\n     7 \n     8 pThen.then((data) => {\n     9  console.log(data); // undefined\n    10 });\n\n    ```", "```js\n     1 // pRequest will be fulfilled\n     2 const pRequest = fakeRequest();\n     3 \n     4 // fulfillment handler not provided\n     5 const pThen = pRequest.then();\n     6 \n     7 pThen.then((data) => {\n     8  // logs the value with which pRequest fulfilled\n     9  console.log(data);\n    10 });\n\n    ```", "```js\n     1 // pRequest will be fulfilled\n     2 const pRequest = fakeRequest();\n     3 \n     4 const pThen = pRequest.then((response) => {\n     5  throw new Error(\"something bad happened\");\n     6 });\n     7 \n     8 pThen.catch((error) => {\n     9  console.log(error.message); // something bad happened\n    10 });\n\n    ```", "```js\n     1 // pRequest will be fulfilled\n     2 const pRequest = fakeRequest();\n     3 \n     4 const pThen = pRequest.then((response) => {\n     5  // return a promise that will be fulfilled\n     6  return fakeRequest();\n     7 });\n     8 \n     9 pThen.then((response) => {\n    10   // logs the fulfillment value of\n    11   // promise returned from the fulfillment\n    12   // handler of pRequest promise\n    13   console.log(response);\n    14 });\n\n    ```", "```js\n     1 // pRequest will get rejected\n     2 const pRequest = fakeRequest(false);\n     3 \n     4 const pThen = pRequest.then((response) => {\n     5  console.log(response);\n     6 });\n     7 \n     8 pThen.catch((error) => {\n     9  console.log(error.message); // request failed\n    10 });\n\n    ```", "```js\n 1 // pRequest will be fulfilled\n 2 const pRequest = fakeRequest();\n 3 \n 4 const pCatch = pRequest.catch((error) => {\n 5  console.log(error.message);\n 6 });\n 7 \n 8 pCatch.then((data) => {\n 9  // logs the fulfillment value with\n10   // which pRequest promise fulfilled\n11   console.log(data);\n12 });\n\n```", "```js\n     1 // pRequest will get rejected\n     2 const pRequest = fakeRequest(false);\n     3 \n     4 const pCatch = pRequest.catch((error) => {\n     5  return \"default value\";\n     6 });\n     7 \n     8 pCatch.then((data) => {\n     9  console.log(data); // default value\n    10 });\n\n    ```", "```js\n     1 // pRequest will get rejected\n     2 const pRequest = fakeRequest(false);\n     3 \n     4 const pCatch = pRequest.catch((error) => {\n     5  console.log(error.message); // request failed\n     6 });\n     7 \n     8 pCatch.then((data) => {\n     9  console.log(data); // undefined\n    10 });\n\n    ```", "```js\n     1 // pRequest will get rejected\n     2 const pRequest = fakeRequest(false);\n     3 \n     4 // rejection handler not registered\n     5 const pCatch = pRequest.catch();\n     6 \n     7 pCatch.catch((error) => {\n     8  // logs the rejection value of the\n     9  // original pRequest promise\n    10   console.log(error.message); // request failed\n    11 });\n\n    ```", "```js\n     1 // pRequest will get rejected\n     2 const pRequest = fakeRequest(false);\n     3 \n     4 const pCatch = pRequest.catch((error) => {\n     5  throw error;\n     6 });\n     7 \n     8 pCatch.catch((error) => {\n     9  console.log(error.message); // request failed\n    10 });\n\n    ```", "```js\n     1 // pRequest will get rejected\n     2 const pRequest = fakeRequest(false);\n     3 \n     4 const pCatch = pRequest.catch((error) => {\n     5  // return a promise that will get fulfilled\n     6  return fakeRequest();\n     7 });\n     8 \n     9 pCatch.then((data) => {\n    10   // logs the fulfillment value of\n    11   // promise returned from the rejection\n    12   // handler of pRequest promise\n    13   console.log(data);\n    14 });\n\n    ```", "```js\n 1 // pRequest will get fulfilled\n 2 const pRequest = fakeRequest();\n 3 \n 4 const pFinally = pRequest.finally(() => {\n 5  console.log(\"finally called\");\n 6 });\n 7 \n 8 pFinally.then((data) => {\n 9  // logs the fulfillment value of\n10   // the original pRequest promise\n11   console.log(data);\n12 });\n\n```", "```js\n 1 // pRequest will get rejected\n 2 const pRequest = fakeRequest(false);\n 3 \n 4 const pFinally = pRequest.finally(() => {\n 5  console.log(\"finally called\");\n 6 });\n 7 \n 8 pFinally.catch((error) => {\n 9  // logs the rejection value of\n10   // the original pRequest promise\n11   console.log(error.message);\n12 });\n\n```", "```js\n 1 // pRequest will get rejected\n 2 const pRequest = fakeRequest(false);\n 3 \n 4 const pFinally = pRequest.finally(() => {\n 5  throw new Error(\"finally error\");\n 6 });\n 7 \n 8 pFinally.catch((error) => {\n 9  console.log(error.message); // finally error\n10 });\n\n```", "```js\n 1 // pRequest will get fulfilled\n 2 const pRequest = fakeRequest();\n 3 \n 4 const pFinally = pRequest.finally(() => {\n 5  // return a promise that will get rejected\n 6  return fakeRequest(false);\n 7 });\n 8 \n 9 pFinally.catch((error) => {\n10   // logs the rejection value of the\n11   // promise returned from the finally callback\n12   console.log(error.message); // request failed\n13 });\n\n```", "```js\n 1 fakeRequest()\n 2  .then((response) => {\n 3    console.log(response);\n 4    return \"hello world\";\n 5  })\n 6  .then((data) => {\n 7    console.log(data);\n 8    return \"123\";\n 9  })\n10   .catch((error) => {\n11     console.log(error.message);\n12   });\n\n```", "```js\n    1 {\n    2   favouriteLanguage: \"JavaScript\",\n    3   name: \"John Doe\"\n    4 }\n\n    ```", "```js\n    1 {\n    2  favouriteLanguage: \"JavaScript\",\n    3  name: \"John Doe\"\n    4 }\n    5 \n    6 \"hello world\"\n\n    ```", "```js\n    1 {\n    2  favouriteLanguage: \"JavaScript\",\n    3  name: \"John Doe\"\n    4 }\n    5 \n    6 \"hello world\"\n\n    ```", "```js\n 1 fakeRequest()\n 2  .then((response) => {\n 3    console.log(response);\n 4    return fakeRequest();\n 5  })\n 6  .then((data) => {\n 7    console.log(data);\n 8  })\n 9  .catch((error) => {\n10     console.log(error.message);\n11   });\n\n```", "```js\n    1 {\n    2    favouriteLanguage: \"JavaScript\",\n    3    name: \"John Doe\"\n    4 }\n\n    ```", "```js\n    1 {\n    2    favouriteLanguage: \"JavaScript\",\n    3    name: \"John Doe\"\n    4 }\n    5 \n    6 {\n    7    favouriteLanguage: \"JavaScript\",\n    8    name: \"John Doe\"\n    9 }\n\n    ```", "```js\n    1 {\n    2     favouriteLanguage: \"JavaScript\",\n    3     name: \"John Doe\"\n    4 }\n    5 \n    6 {\n    7     favouriteLanguage: \"JavaScript\",\n    8     name: \"John Doe\"\n    9 }\n\n    ```", "```js\n1 fakeRequest(false)\n2   .then((response) => {\n3     console.log(response);\n4   })\n5   .catch((error) => {\n6     console.log(error.message);\n7   });\n\n```", "```js\n    1 \"request failed\"\n\n    ```", "```js\n    1 \"request failed\"\n\n    ```", "```js\n 1 fakeRequest()\n 2  .then((response) => {\n 3    return fakeRequest(false);\n 4  })\n 5  .catch((error) => {\n 6    return { data: \"default data\" };\n 7  })\n 8  .then((data) => {\n 9    console.log(data);\n10   })\n11   .then(() => {\n12     throw new Error(\"error occurred\");\n13   })\n14   .catch((error) => {\n15     console.log(error.message);\n16   });\n\n```", "```js\n    1 {\n    2   data: \"default data\"\n    3 }\n\n    ```", "```js\n    1 {\n    2   data: \"default data\"\n    3 }\n    4 \n    5 \"error occurred\"\n\n    ```", "```js\n1 fakeRequest().then(null, (error) => {\n2   // handle error\n3 });\n\n```", "```js\n 1 fakeRequest().then(\n 2  (response) => {\n 3    // rejects the promise returned\n 4    // by the \"then\" method\n 5    throw new Error(\"error\");\n 6  },\n 7  (error) => {\n 8    // this callback is not invoked\n 9    console.log(error.message);\n10   }\n11 );\n\n```", "```js\n 1 const url1 = \"https://jsonplaceholder.typicode.com/todos/1\";\n 2 const url2 = \"https://jsonplaceholder.typicode.com/todos/2\";\n 3 const url3 = \"https://jsonplaceholder.typicode.com/todos/3\";\n 4 \n 5 function parseFetchResponse(response) {\n 6  if (response.ok) {\n 7    return response.json(); // returns a promise\n 8  } else {\n 9    throw new Error(\"request failed\");\n10   }\n11 }\n12 \n13 fetch(url1)\n14   .then(parseFetchResponse)\n15   .then((data1) => {\n16     console.log(data1);\n17     // initiate second request\n18     return fetch(url2);\n19   })\n20   .then(parseFetchResponse)\n21   .then((data2) => {\n22     console.log(data2);\n23     // initiate third request\n24     return fetch(url3);\n25   })\n26   .then(parseFetchResponse)\n27   .then((data3) => {\n28     console.log(data3);\n29   })\n30   .catch((error) => {\n31     console.log(error.message);\n32   });\n\n```", "```js\n 1 const url1 = \"https://jsonplaceholder.typicode.com/todos/1\";\n 2 const url2 = \"https://jsonplaceholder.typicode.com/todos/2\";\n 3 const url3 = \"https://jsonplaceholder.typicode.com/todos/3\";\n 4 \n 5 function parseFetchResponse(response) {\n 6  if (response.ok) {\n 7    return response.json();\n 8  } else {\n 9    throw new Error(\"request failed\");\n10   }\n11 }\n12 \n13 Promise.all([\n14   fetch(url1).then(parseFetchResponse),\n15   fetch(url2).then(parseFetchResponse),\n16   fetch(url3).then(parseFetchResponse)\n17 ])\n18   .then((dataArr) => {\n19     console.log(dataArr);\n20   })\n21   .catch((error) => console.log(error.message));\n\n```", "```js\n 1 // simulate a request that takes\n 2 // approximately 8 seconds to complete\n 3 function delayedRequest() {\n 4  return new Promise((resolve, reject) => {\n 5    setTimeout(() => {\n 6      resolve(\"hello world\");\n 7    }, 8000);\n 8  });\n 9 }\n10 \n11 // timeout promise that is rejected\n12 // after approximately 3 seconds\n13 function timeout() {\n14   return new Promise((resolve, reject) => {\n15     setTimeout(() => {\n16       const error = new Error(\"request timed out\");\n17       reject(error);\n18     }, 3000);\n19   });\n20 }\n21 \n22 Promise.race([delayedRequest(), timeout()])\n23   .then((response) => {\n24     console.log(response);\n25   })\n26   .catch((error) => console.log(error.message));\n\n```", "```js\n 1 function fetchTodo(url) {\n 2  fetch(url)\n 3    .then((response) => {\n 4      if (response.ok) {\n 5        return response.json();\n 6      } else {\n 7        throw new Error(\"request failed\");\n 8      }\n 9    })\n10     .then((data) => {\n11       console.log(data);\n12     })\n13     .catch((error) => {\n14       console.log(error.message);\n15     });\n16 }\n17 \n18 const url = \"https://jsonplaceholder.typicode.com/todos/1\";\n19 fetchTodo(url);\n\n```", "```js\n 1 async function fetchTodo(url) {\n 2  try {\n 3    const response = await fetch(url);\n 4 \n 5    if (response.ok) {\n 6      const data = await response.json();\n 7      console.log(data);\n 8    } else {\n 9      throw new Error(\"request failed\");\n10     }\n11   } catch (error) {\n12     console.log(error.message);\n13   }\n14 }\n15 \n16 const url = \"https://jsonplaceholder.typicode.com/todos/1\";\n17 fetchTodo(url);\n\n```", "```js\n1 async function foo() {}\n2 \n3 const result = foo();\n4 console.log(result instanceof Promise); // true\n\n```", "```js\n    1 async function foo() {\n    2   return 123;\n    3 }\n    4 \n    5 foo().then(console.log); // 123\n\n    ```", "```js\n    1 async function foo() {}\n    2 \n    3 foo().then(console.log); // undefined\n\n    ```", "```js\n    1 async function foo() {\n    2   throw new Error(\"some error occurred\");\n    3 }\n    4 \n    5 foo().catch((error) => console.log(error.message)); // some error occurred\n\n    ```", "```js\n     1 // returns a promise that is fulfilled\n     2 // after approximately 2 seconds\n     3 function getPromise() {\n     4  return new Promise((resolve, reject) => {\n     5    setTimeout(() => {\n     6      resolve(\"hello world\");\n     7    }, 2000);\n     8  });\n     9 }\n    10 \n    11 async function foo() {\n    12   return getPromise();\n    13 }\n    14 \n    15 foo().then(console.log); // hello world\n\n    ```", "```js\n1 // assume that the following statement\n2 // is inside an async function\n3 const response = await fetch(url);\n\n```", "```js\n1 async function foo() {\n2   return \"123\";\n3 }\n4 \n5 const result = foo();\n\n```", "```js\n1 async function foo() {\n2   return \"123\";\n3 }\n4 \n5 foo().then(console.log); // \"123\"\n\n```", "```js\n 1 async function foo() {\n 2  return \"123\";\n 3 }\n 4 \n 5 async function bar() {\n 6  const result = await foo();\n 7  console.log(result); // \"123\"\n 8 }\n 9 \n10 bar();\n\n```", "```js\n 1 // returns a promise that is fulfilled\n 2 // after approximately 1 second\n 3 function promisifiedRandomNumber() {\n 4  return new Promise((resolve, reject) => {\n 5    setTimeout(() => {\n 6      // generate a random number within range: 0 - 9\n 7      const randomNum = Math.floor(Math.random() * 10);\n 8      resolve(randomNum);\n 9    }, 1000);\n10   });\n11 }\n12 \n13 async function random() {\n14   const num1 = await promisifiedRandomNumber();\n15   const num2 = await promisifiedRandomNumber();\n16   const num3 = await promisifiedRandomNumber();\n17 \n18   console.log(num1, num2, num3);\n19 }\n20 \n21 random();\n\n```", "```js\n 1 // returns a promise that is fulfilled\n 2 // after approximately 1 second\n 3 function promisifiedRandomNumber() {\n 4  return new Promise((resolve, reject) => {\n 5    setTimeout(() => {\n 6      // generate a random number within range: 0 - 9\n 7      const randomNum = Math.floor(Math.random() * 10);\n 8      resolve(randomNum);\n 9    }, 1000);\n10   });\n11 }\n12 \n13 async function random() {\n14   const randomSum =\n15     (await promisifiedRandomNumber()) + (await promisifiedRandomNumber());\n16   console.log(randomSum);\n17 }\n18 \n19 random();\n\n```", "```js\n 1 // returns a promise that is fulfilled\n 2 // after approximately 1 second\n 3 function promisifiedRandomNumber() {\n 4  return new Promise((resolve, reject) => {\n 5    setTimeout(() => {\n 6      // generate a random number within range: 0 - 9\n 7      const randomNum = Math.floor(Math.random() * 10);\n 8      resolve(randomNum);\n 9    }, 1000);\n10   });\n11 }\n12 \n13 async function random() {\n14   const promiseArr = [\n15     promisifiedRandomNumber(),\n16     promisifiedRandomNumber(),\n17     promisifiedRandomNumber()\n18   ];\n19   const randomNumsArr = await Promise.all(promiseArr);\n20   console.log(randomNumsArr);\n21 }\n22 \n23 random();\n\n```", "```js\n1 async function getUsersAndTasks() {\n2   try {\n3     const users = await fetchUsers();\n4     const tasks = await fetchTasks();\n5   } catch (error) {\n6     // handle the error\n7   }\n8 }\n\n```", "```js\n 1 async function getUsersAndTasks() {\n 2  const users = await fetchUsers();\n 3  const tasks = await fetchTasks();\n 4 \n 5  // do something with users and tasks.\n 6 }\n 7 \n 8 getUsersAndTasks().catch((error) => {\n 9  /* handle the error */\n10 });\n\n```", "```js\n 1 async function getUsersAndTasks() {\n 2  const users = await fetchUsers();\n 3  const tasks = await fetchTasks();\n 4 \n 5  // do something with users and tasks.\n 6 }\n 7 \n 8 async function initApp() {\n 9  try {\n10     await getUsersAndTasks();\n11   } catch (error) {\n12     // handle the error\n13   }\n14 }\n\n```", "```js\n 1 // returns a promise that either\n 2 // fulfills or gets rejected randomly\n 3 function getPromise() {\n 4  return new Promise((resolve, reject) => {\n 5    setTimeout(() => {\n 6      if (Math.random() < 0.5) {\n 7        resolve(\"success\");\n 8      } else {\n 9        reject(new Error(\"failed\"));\n10       }\n11     }, 1000);\n12   });\n13 }\n14 \n15 async function foo() {\n16   getPromise();\n17 }\n18 \n19 foo()\n20   .then(() => console.log(\"foo promise fulfilled\"))\n21   .catch(() => console.log(\"foo promise rejected\"));\n\n```", "```js\n    1 async function foo() {\n    2   return getPromise();\n    3 }\n    4 \n    5 foo()\n    6   .then(() => console.log(\"foo promise fulfilled\"))\n    7   .catch(() => console.log(\"foo promise failed\"));\n\n    ```", "```js\n    1 async function foo() {\n    2   await getPromise();\n    3 }\n    4 \n    5 foo()\n    6   .then(() => console.log(\"foo promise fulfilled\"))\n    7   .catch(() => console.log(\"foo promise failed\"));\n\n    ```", "```js\n     1 async function foo() {\n     2  try {\n     3    await getPromise();\n     4  } catch (error) {\n     5    console.log(\"inside catch block of foo function\");\n     6    return \"error caught in foo\";\n     7  }\n     8 }\n     9 \n    10 foo()\n    11   .then(() => console.log(\"foo promise fulfilled\"))\n    12   .catch(() => console.log(\"foo promise failed\"));\n\n    ```", "```js\n1 const printRandomNumber = async () => {\n2   const randomNum = await Math.floor(Math.random() * 10);\n3   console.log(randomNum);\n4 };\n5 \n6 printRandomNumber();\n7 \n8 console.log(\"before printing random number\");\n\n```", "```js\n 1 console.log(\"start\");\n 2 \n 3 setTimeout(() => {\n 4  console.log(\"setTimeout callback with 500ms delay\");\n 5 }, 500);\n 6 \n 7 Promise.resolve()\n 8  .then(() => {\n 9    console.log(\"first 'then' callback\");\n10   })\n11   .then(() => {\n12     console.log(\"second 'then' callback\");\n13   })\n14   .then(() => {\n15     console.log(\"third 'then' callback\");\n16   });\n17 \n18 setTimeout(() => {\n19   console.log(\"setTimeout callback with 0ms delay\");\n20 }, 0);\n21 \n22 console.log(\"end\");\n23 \n24 /*\n25 start\n26 end\n27 first 'then' callback\n28 second 'then' callback\n29 third 'then' callback\n30 setTimeout callback with 0ms delay\n31 setTimeout callback with 500ms delay\n32 */\n\n```", "```js\n    1 output:\n    2 -------\n    3 start\n\n    ```", "```js\n    1 task queue:\n    2 -----------\n    3 [task(execute setTimeout callback)]\n    4 \n    5 output:\n    6 -------\n    7 start\n\n    ```", "```js\n     1 task queue:\n     2 -----------\n     3 [task(execute setTimeout callback)]\n     4 \n     5 microtask queue:\n     6 ----------------\n     7 [job(execute fulfillment callback)]\n     8 \n     9 output:\n    10 -------\n    11 start\n\n    ```", "```js\n     1 task queue:\n     2 -----------\n     3 [\n     4    task(execute setTimeout callback),\n     5    task(execute setTimeout callback)\n     6 ]\n     7 \n     8 microtask queue:\n     9 ----------------\n    10 [job(execute fulfillment callback)]\n    11 \n    12 output:\n    13 -------\n    14 start\n\n    ```", "```js\n     1 task queue:\n     2 -----------\n     3 [\n     4    task(execute setTimeout callback),\n     5    task(execute setTimeout callback)\n     6 ]\n     7 \n     8 microtask queue:\n     9 ----------------\n    10 [job(execute fulfillment callback)]\n    11 \n    12 output:\n    13 -------\n    14 start\n    15 end\n\n    ```", "```js\n     1 task queue:\n     2 -----------\n     3 [\n     4    task(execute setTimeout callback),\n     5    task(execute setTimeout callback)\n     6 ]\n     7 \n     8 microtask queue:\n     9 ----------------\n    10 []\n    11 \n    12 output:\n    13 -------\n    14 start\n    15 end\n    16 first 'then' callback\n\n    ```", "```js\n     1 task queue:\n     2 -----------\n     3 [\n     4    task(execute setTimeout callback),\n     5    task(execute setTimeout callback)\n     6 ]\n     7 \n     8 microtask queue:\n     9 ----------------\n    10 [job(execute fulfillment callback)]\n    11 \n    12 output:\n    13 -------\n    14 start\n    15 end\n    16 first 'then' callback\n\n    ```", "```js\n     1 task queue:\n     2 -----------\n     3 [\n     4    task(execute setTimeout callback),\n     5    task(execute setTimeout callback)\n     6 ]\n     7 \n     8 microtask queue:\n     9 ----------------\n    10 []\n    11 \n    12 output:\n    13 -------\n    14 start\n    15 end\n    16 first 'then' callback\n    17 second 'then' callback\n\n    ```", "```js\n     1 task queue:\n     2 -----------\n     3 [\n     4    task(execute setTimeout callback),\n     5    task(execute setTimeout callback)\n     6 ]\n     7 \n     8 microtask queue:\n     9 ----------------\n    10 [job(execute fulfillment callback)]\n    11 \n    12 output:\n    13 -------\n    14 start\n    15 end\n    16 first 'then' callback\n    17 second 'then' callback\n\n    ```", "```js\n     1 task queue:\n     2 -----------\n     3 [\n     4    task(execute setTimeout callback),\n     5    task(execute setTimeout callback)\n     6 ]\n     7 \n     8 microtask queue:\n     9 ----------------\n    10 []\n    11 \n    12 output:\n    13 -------\n    14 start\n    15 end\n    16 first 'then' callback\n    17 second 'then' callback\n    18 third 'then' callback\n\n    ```", "```js\n     1 task queue:\n     2 -----------\n     3 [task(execute setTimeout callback)]\n     4 \n     5 microtask queue:\n     6 ----------------\n     7 []\n     8 \n     9 output:\n    10 -------\n    11 start\n    12 end\n    13 first 'then' callback\n    14 second 'then' callback\n    15 third 'then' callback\n    16 setTimeout callback with 0ms delay\n\n    ```", "```js\n     1 task queue:\n     2 -----------\n     3 []\n     4 \n     5 microtask queue:\n     6 ----------------\n     7 []\n     8 \n     9 output:\n    10 -------\n    11 start\n    12 end\n    13 first 'then' callback\n    14 second 'then' callback\n    15 third 'then' callback\n    16 setTimeout callback with 0ms delay\n    17 setTimeout callback with 500ms delay\n\n    ```", "```js\n1 function fetchData(url) {\n2   return new Promise((resolve, reject) => {\n3     fetch(url)\n4       .then((res) => res.json(res))\n5       .then(resolve)\n6       .catch(reject);\n7   });\n8 }\n\n```", "```js\n1 function fetchData(url) {\n2   return fetch(url).then((res) => res.json(res));\n3 }\n\n```", "```js\n1 function fetchData(url) {\n2   fetch(url).then((response) => response.json());\n3 }\n4 \n5 fetchData(\"https://jsonplaceholder.typicode.com/todos/1\")\n6   .then((data) => console.log(data))\n7   .catch((error) => console.log(error));\n\n```", "```js\n    1 function fetchData(url) {\n    2   return fetch(url).then((response) => response.json());\n    3 }\n\n    ```", "```js\n    1 fetchData(/* some url */)\n    2   .then((data) => {\n    3     /* do something with the data */\n    4   })\n    5   .catch((error) => {\n    6     /* handle error */\n    7   });\n\n    ```", "```js\n     1 function fetchData(url) {\n     2  fetch(url)\n     3    .then((response) => response.json())\n     4    .then((data) => {\n     5      /* do something with the data */\n     6    })\n     7    .catch((err) => {\n     8      /* error handling code */\n     9    });\n    10 }\n\n    ```", "```js\n    1 fetchData(/* some url */);\n\n    ```", "```js\n1 function getData(url) {\n2   return Promise.reject(new Error()).catch((err) => {\n3     console.log(\"inside catch block in getData function\");\n4   });\n5 }\n6 \n7 getData()\n8   .then((data) => console.log(\"then block\"))\n9   .catch((error) => console.log(\"catch block\"));\n\n```", "```js\n1 \"inside catch block in getData function\"\n2 \n3 \"then block\"\n\n```", "```js\n    1 function getData(url) {\n    2   return Promise.reject(new Error()).catch((err) => {\n    3     throw err;\n    4   });\n    5 }\n\n    ```", "```js\n    1 function getData(url) {\n    2   return Promise.reject(new Error());\n    3 }\n\n    ```", "```js\n1 const p = new Promise(async (resolve, reject) => {\n2   throw new Error(\"error\");\n3 });\n4 \n5 p.catch((e) => console.log(e.message));\n\n```"]