- en: Chapter 3
  prefs: []
  type: TYPE_NORMAL
- en: Building Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IN THIS CHAPTER
  prefs: []
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) **Understanding what expressions are**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) **Figuring out numeric expressions**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) **Tying up string expressions**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) **Getting the hang of comparison expressions**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) **Learning about logical expressions**'
  prefs: []
  type: TYPE_NORMAL
- en: When coding in JavaScript, you use expressions constantly, so it’s vital to
    understand what they are and to get comfortable with the types of expressions
    that are available to you. Every JavaScript coder is different, but I can say
    without fear of contradiction that every *good* JavaScript coder is fluent in
    expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter takes you through everything you need to know about expressions.
    You discover some expression basics and then explore a number of techniques for
    building powerful expressions using numbers, strings, and Boolean values.  ##
    Understanding How Expressions Are Structured'
  prefs: []
  type: TYPE_NORMAL
- en: A JavaScript *expression* takes one or more inputs, such as a bill total and
    a tip percentage, and combines them in some way — for example, by using multiplication.
    In expression lingo, the inputs are called *operands,* and they’re combined by
    using special symbols called *operators.*
  prefs: []
  type: TYPE_NORMAL
- en: '**operand:** An input value for an expression. It is, in other words, the raw
    data that the expression manipulates to produce its result. It could be a number,
    a string, a variable, a function result (refer to [Chapter 5](c05.xhtml)), or
    an object property (refer to [Chapter 6](c06.xhtml)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**operator:** A symbol that represents a particular action performed on one
    or more operands. For example, the `*` operator represents multiplication, and
    the `+` operator represents addition. I discuss the various JavaScript operators
    throughout this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, here’s an expression that calculates a tip amount and assigns
    the result to a variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '`tipAmount = billTotal * tipPercentage;`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The expression is everything to the right of the equals sign (`=`). Here, `billTotal`
    and `tipPercentage` are the operands, and the multiplication sign (`*`) is the
    operator.  ## Creating Numeric Expressions'
  prefs: []
  type: TYPE_NORMAL
- en: In JavaScript, a mathematical calculation is called a *numeric expression,*
    and it combines numeric operands and arithmetic operators to produce a numeric
    result. This section discusses all the JavaScript arithmetic operators and shows
    you how best to use them to build useful and handy numeric expressions.
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 3-1](#c03-tbl-0001) lists the basic arithmetic operators you can use
    in your JavaScript expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript also comes with a few extra operators that combine some of the arithmetic
    operators and the assignment operator, which is the humble equals sign (`=`) that
    assigns a value to a variable. [Table 3-2](#c03-tbl-0002) lists these so-called
    *arithmetic assignment* operators.
  prefs: []
  type: TYPE_NORMAL
- en: '[TABLE 3-1](#rc03-tbl-0001) The JavaScript Arithmetic Operators'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Operator** | **Name** | **Example** | **Result** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `+` | Addition | `10 + 4` | `14` |'
  prefs: []
  type: TYPE_TB
- en: '| `++` | Increment | `10++` | `11` |'
  prefs: []
  type: TYPE_TB
- en: '| `-` | Subtraction | `10 - 4` | `6` |'
  prefs: []
  type: TYPE_TB
- en: '| `-` | Negation | `-10` | `-10` |'
  prefs: []
  type: TYPE_TB
- en: '| `--` | Decrement | `10--` | `9` |'
  prefs: []
  type: TYPE_TB
- en: '| `*` | Multiplication | `10 * 4` | `40` |'
  prefs: []
  type: TYPE_TB
- en: '| `/` | Division | `10 / 4` | `2.5` |'
  prefs: []
  type: TYPE_TB
- en: '| `%` | Modulus | `10 % 4` | `2` |'
  prefs: []
  type: TYPE_TB
- en: '[TABLE 3-2](#rc03-tbl-0002) The JavaScript Arithmetic Assignment Operators'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Operator** | **Example** | **Equivalent** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `+=` | `x += y` | `x = x + y` |'
  prefs: []
  type: TYPE_TB
- en: '| `-=` | `x -= y` | `x = x - y` |'
  prefs: []
  type: TYPE_TB
- en: '| `*=` | `x *= y` | `x = x * y` |'
  prefs: []
  type: TYPE_TB
- en: '| `/=` | `x /= y` | `x = x / y` |'
  prefs: []
  type: TYPE_TB
- en: '| `^=` | `x ^= y` | `x = x ^ y` |'
  prefs: []
  type: TYPE_TB
- en: '| `%=` | `x %= y` | `x = x % y` |  ## Building String Expressions'
  prefs: []
  type: TYPE_NORMAL
- en: 'A string expression is one where at least one of the operands is a string,
    and the result of the expression is another string. String expressions are straightforward
    in the sense that there is only one operator to deal with: *concatenation* (`+`).
    You use this operator to combine (or *concatenate*) strings within an expression.
    For example, the expression `"Java" + "Script"` returns the string `"JavaScript"`.
    Note, however, that you can also use strings with the comparison operators discussed
    in the next section.  ## Building Comparison Expressions'
  prefs: []
  type: TYPE_NORMAL
- en: You use comparison expressions to compare the values of two or more numbers,
    strings, variables, properties, or function results. If the expression is true,
    the expression result is set to the Boolean value `true`; if the expression is
    false, the expression result is set to the Boolean value `false`. You’ll use comparisons
    with alarming frequency in your JavaScript code, so it’s important to understand
    what they are and how you use them.
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 3-3](#c03-tbl-0003) summarizes JavaScript’s comparison operators.'
  prefs: []
  type: TYPE_NORMAL
- en: '[TABLE 3-3](#rc03-tbl-0003) The JavaScript Comparison Operators'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Operator** | **Name** | **Example** | **Result** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `==` | Equality | `10 == 4` | `false` |'
  prefs: []
  type: TYPE_TB
- en: '| `!=` | Inequality | `10 != 4` | `true` |'
  prefs: []
  type: TYPE_TB
- en: '| `>` | Greater than | `10 > 4` | `true` |'
  prefs: []
  type: TYPE_TB
- en: '| `<` | Less than | `10 < 4` | `false` |'
  prefs: []
  type: TYPE_TB
- en: '| `>=` | Greater than or equal | `10 >= 4` | `true` |'
  prefs: []
  type: TYPE_TB
- en: '| `<=` | Less than or equal | `10 <= 4` | `false` |'
  prefs: []
  type: TYPE_TB
- en: '| `===` | Strict equality | `"10" === 10` | `false` |'
  prefs: []
  type: TYPE_TB
- en: '| `!==` | Strict inequality | `"10" !== 10` | `true` |  ## Building Logical
    Expressions'
  prefs: []
  type: TYPE_NORMAL
- en: You use logical expressions to combine or manipulate Boolean values, particularly
    comparison expressions. For example, if your code needs to test whether two different
    comparison expressions are both `true` before proceeding, you can do that with
    a logical expression.
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 3-4](#c03-tbl-0004) lists JavaScript’s logical operators.'
  prefs: []
  type: TYPE_NORMAL
- en: '[TABLE 3-4](#rc03-tbl-0004) The JavaScript Logical Operators'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Operator** | **Name** | **General Syntax** | **Returned Value** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `&&` | AND | *`expr1`*`&&`*`expr2`* | `true` if both *`expr1`* and *`expr2`*
    are `true`; `false` otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| `&#124;&#124;` | OR | *`expr1`*`&#124;&#124;`*`expr2`* | `true` if one or
    both of *`expr1`* and *`expr2`* are `true`; `false` otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| `!` | NOT | `!*expr*` | `true` if *`expr`* is `false`; `false` if *`expr`*
    is `true`. |  ## Understanding Operator Precedence'
  prefs: []
  type: TYPE_NORMAL
- en: In complex expressions, the order in which the calculations are performed becomes
    crucial. For example, consider the expression `3+5*2`. If you calculate from left
    to right, the answer you get is `16` (`3+5` equals `8`, and `8*2` equals `16`).
    However, if you perform the multiplication first and then the addition, the result
    is `13` (`5*2` equals `10`, and `3+10` equals `13`).
  prefs: []
  type: TYPE_NORMAL
- en: To control this ordering problem, JavaScript evaluates an expression according
    to a predefined *order of precedence.* This order of precedence lets JavaScript
    calculate an expression unambiguously by determining which part of the expression
    it calculates first, which part second, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '### The order of precedence'
  prefs: []
  type: TYPE_NORMAL
- en: The order of precedence that JavaScript uses is determined by the various expression
    operators that I’ve covered so far in this chapter. [Table 3-5](#c03-tbl-0005)
    summarizes the complete order of precedence used by JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: For example, [Table 3-5](#c03-tbl-0005) tells you that JavaScript performs multiplication
    before addition. Therefore, the correct answer for the expression `3+5*2` (just
    discussed) is `13`.
  prefs: []
  type: TYPE_NORMAL
- en: '[TABLE 3-5](#rc03-tbl-0005) The JavaScript Order of Precedence for Operators'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Operator** | **Operation** | **Order of Precedence** | **Order of Evaluation**
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `++` | Increment | First | R -> L |'
  prefs: []
  type: TYPE_TB
- en: '| `--` | Decrement | First | R -> L |'
  prefs: []
  type: TYPE_TB
- en: '| `—` | Negation | First | R -> L |'
  prefs: []
  type: TYPE_TB
- en: '| `!` | NOT | First | R -> L |'
  prefs: []
  type: TYPE_TB
- en: '| `*`, `/`, `%` | Multiplication, division, modulus | Second | L -> R |'
  prefs: []
  type: TYPE_TB
- en: '| `+`, `—` | Addition, subtraction | Third | L -> R |'
  prefs: []
  type: TYPE_TB
- en: '| `+` | Concatenation | Third | L -> R |'
  prefs: []
  type: TYPE_TB
- en: '| `<`, `<=` | Less than, less than or equal | Fourth | L -> R |'
  prefs: []
  type: TYPE_TB
- en: '| `>`, `>=` | Greater than, greater than or equal | Fourth | L -> R |'
  prefs: []
  type: TYPE_TB
- en: '| `==` | Equality | Fifth | L -> R |'
  prefs: []
  type: TYPE_TB
- en: '| `!=` | Inequality | Fifth | L -> R |'
  prefs: []
  type: TYPE_TB
- en: '| `===` | Strict equality | Fifth | L -> R |'
  prefs: []
  type: TYPE_TB
- en: '| `!==` | Strict inequality | Fifth | L -> R |'
  prefs: []
  type: TYPE_TB
- en: '| `&&` | AND | Sixth | L -> R |'
  prefs: []
  type: TYPE_TB
- en: '| `&#124;&#124;` | OR | Sixth | L -> R |'
  prefs: []
  type: TYPE_TB
- en: '| `?:` | Ternary | Seventh | R -> L |'
  prefs: []
  type: TYPE_TB
- en: '| `=` | Assignment | Eighth | R -> L |'
  prefs: []
  type: TYPE_TB
- en: '| `+=`, `-=`, etc. | Arithmetic assignment | Eighth | R -> L |  ### Controlling
    the order of precedence'
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes you want to take control of the situation and override the order of
    precedence. That may seem like a decidedly odd thing to do, so perhaps an example
    is in order. Suppose you know the final price of an item and, given the tax rate,
    you want to know the original (that is, pre-tax) price.
  prefs: []
  type: TYPE_NORMAL
- en: 'A first pass at the JavaScript calculation may look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`retailPrice = totalPrice / 1 + taxRate;`'
  prefs: []
  type: TYPE_NORMAL
- en: This won’t work, though. Why not? Well, according to the rules of precedence,
    JavaScript performs division before addition, so the `totalPrice` value first
    is divided by 1 and then is added to the `taxRate` value, which isn’t the correct
    order.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the correct answer, you have to override the order of precedence so
    that the addition `1 + taxRate` is performed first. You override precedence by
    surrounding that part of the expression with parentheses, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`const retailPrice = totalPrice / (1 + taxRate);`'
  prefs: []
  type: TYPE_NORMAL
- en: In general, you can use parentheses to control the order that JavaScript uses
    to calculate expressions. Terms inside parentheses are always calculated first;
    terms outside parentheses are calculated sequentially (according to the order
    of precedence).
  prefs: []
  type: TYPE_NORMAL
