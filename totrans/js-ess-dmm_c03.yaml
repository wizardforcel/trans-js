- en: 第3章
  id: totrans-0
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第 3 章
- en: '`Building Expressions`'
  id: totrans-1
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: '`构建表达式`'
- en: '`IN THIS CHAPTER`'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`在本章中`'
- en: '![Bullet](images/check.png) `Understanding what expressions are`'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) `理解表达式是什么`'
- en: '![Bullet](images/check.png) `Figuring out numeric expressions`'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) `理解数字表达式`'
- en: '![Bullet](images/check.png) `Tying up string expressions`'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) `连接字符串表达式`'
- en: '![Bullet](images/check.png) `Getting the hang of comparison expressions`'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) `掌握比较表达式`'
- en: '![Bullet](images/check.png) `Learning about logical expressions`'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) `学习逻辑表达式`'
- en: 在JavaScript编码时，你会不断使用表达式，因此了解它们是什么并熟悉可用的表达式类型至关重要。每个JavaScript编码者都不同，但我可以毫不犹豫地说，每个`good`
    JavaScript编码者都流利地使用表达式。
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在 JavaScript 编码时，你会不断使用表达式，因此了解它们是什么并熟悉可用的表达式类型至关重要。每个 JavaScript 编码者都不同，但我可以毫不犹豫地说，每个`good`
    JavaScript 编码者都流利地使用表达式。
- en: 这一章带你了解表达式的所有必要知识。你将发现一些表达式的基础，然后探索使用数字、字符串和布尔值构建强大表达式的多种技巧。## `Understanding
    How Expressions Are Structured`
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这一章带你了解表达式的所有必要知识。你将发现一些表达式的基础，然后探索使用数字、字符串和布尔值构建强大表达式的多种技巧。## `理解表达式的结构`
- en: 一个JavaScript `expression`接受一个或多个输入，例如账单总额和小费百分比，并以某种方式将它们组合在一起——例如，通过使用乘法。在表达式术语中，输入被称为`operands`，它们通过使用称为`operators`的特殊符号组合在一起。
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 一个 JavaScript `expression` 接受一个或多个输入，例如账单总额和小费百分比，并以某种方式将它们组合在一起——例如，通过使用乘法。在表达式术语中，输入被称为
    `operands`，它们通过使用称为 `operators` 的特殊符号组合在一起。
- en: '`operand:` 表达式的输入值。换句话说，它是表达式操作以产生结果的原始数据。它可以是一个数字、一个字符串、一个变量、一个函数结果（参考`[Chapter
    5](c05.xhtml)`），或者一个对象属性（参考`[Chapter 6](c06.xhtml)`）。'
  id: totrans-11
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`操作数:` 表达式的输入值。换句话说，它是表达式操作以产生结果的原始数据。它可以是一个数字、一个字符串、一个变量、一个函数结果（参考`[第 5 章](c05.xhtml)`），或者一个对象属性（参考`[第
    6 章](c06.xhtml)`）。'
- en: '`operator:` 一个表示对一个或多个操作数执行特定操作的符号。例如，`*`操作符表示乘法，而`+`操作符表示加法。我将在本章中讨论各种JavaScript操作符。'
  id: totrans-12
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`操作符:` 一个表示对一个或多个操作数执行特定操作的符号。例如，`*` 操作符表示乘法，而 `+` 操作符表示加法。我将在本章中讨论各种 JavaScript
    操作符。'
- en: 例如，以下是一个计算小费金额并将结果赋值给变量的表达式：
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，以下是一个计算小费金额并将结果赋值给变量的表达式：
- en: '`tipAmount = billTotal * tipPercentage;`'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`tipAmount = billTotal * tipPercentage;`'
- en: 表达式是等号(`=`)右边的所有内容。在这里，`billTotal`和`tipPercentage`是操作数，而乘法符号(`*`)是操作符。## `Creating
    Numeric Expressions`
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 表达式是等号(`=`)右边的所有内容。在这里，`billTotal` 和 `tipPercentage` 是操作数，而乘法符号(`*`)是操作符。##
    `创建数字表达式`
- en: 在JavaScript中，数学计算称为`numeric expression`，它结合数字操作数和算术操作符以产生数字结果。本节讨论所有JavaScript算术操作符，并向你展示如何最好地使用它们来构建有用且方便的数字表达式。
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，数学计算称为`numeric expression`，它结合数字操作数和算术操作符以产生数字结果。本节讨论所有 JavaScript
    算术操作符，并向你展示如何最好地使用它们来构建有用且方便的数字表达式。
- en: '`[Table 3-1](#c03-tbl-0001)`列出了你可以在JavaScript表达式中使用的基本算术操作符。'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`[表 3-1](#c03-tbl-0001)` 列出了你可以在 JavaScript 表达式中使用的基本算术操作符。'
- en: JavaScript还提供了一些额外的操作符，这些操作符结合了一些算术操作符和赋值操作符，即将值赋给变量的谦逊等号(`=`)。`[Table 3-2](#c03-tbl-0002)`列出了这些所谓的`arithmetic
    assignment`操作符。
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: JavaScript 还提供了一些额外的操作符，这些操作符结合了一些算术操作符和赋值操作符，即将值赋给变量的谦逊等号(`=`)。`[表 3-2](#c03-tbl-0002)`
    列出了这些所谓的 `arithmetic assignment` 操作符。
- en: '`[TABLE 3-1](#rc03-tbl-0001)` The JavaScript Arithmetic Operators'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`[表 3-1](#rc03-tbl-0001)` JavaScript 算术操作符'
- en: '| `Operator` | `Name` | `Example` | `Result` |'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `操作符` | `名称` | `示例` | `结果` |'
- en: '| --- | --- | --- | --- |'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `+` | Addition | `10 + 4` | `14` |'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `+` | 加法 | `10 + 4` | `14` |'
- en: '| `++` | Increment | `10++` | `11` |'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `++` | 增加 | `10++` | `11` |'
- en: '| `-` | Subtraction | `10 - 4` | `6` |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `-` | 减法 | `10 - 4` | `6` |'
- en: '| `-` | Negation | `-10` | `-10` |'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `-` | 取反 | `-10` | `-10` |'
- en: '| `--` | Decrement | `10--` | `9` |'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `--` | 减少 | `10--` | `9` |'
- en: '| `*` | Multiplication | `10 * 4` | `40` |'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `*` | 乘法 | `10 * 4` | `40` |'
- en: '| `/` | Division | `10 / 4` | `2.5` |'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `/` | 除法 | `10 / 4` | `2.5` |'
- en: '| `%` | Modulus | `10 % 4` | `2` |'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `%` | 取余 | `10 % 4` | `2` |'
- en: '[TABLE 3-2](#rc03-tbl-0002) The JavaScript Arithmetic Assignment Operators'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[表 3-2](#rc03-tbl-0002) JavaScript 算术赋值操作符'
- en: '| **Operator** | **Example** | **Equivalent** |'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| **操作符** | **示例** | **等价** |'
- en: '| --- | --- | --- |'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `+=` | `x += y` | `x = x + y` |'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `+=` | `x += y` | `x = x + y` |'
- en: '| `-=` | `x -= y` | `x = x - y` |'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `-=` | `x -= y` | `x = x - y` |'
- en: '| `*=` | `x *= y` | `x = x * y` |'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `*=` | `x *= y` | `x = x * y` |'
- en: '| `/=` | `x /= y` | `x = x / y` |'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `/=` | `x /= y` | `x = x / y` |'
- en: '| `^=` | `x ^= y` | `x = x ^ y` |'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `^=` | `x ^= y` | `x = x ^ y` |'
- en: '| `%=` | `x %= y` | `x = x % y` |  ## Building String Expressions'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '| `%=` | `x %= y` | `x = x % y` |  ## 构建字符串表达式'
- en: '字符串表达式是指至少有一个操作数是字符串，并且表达式的结果是另一个字符串。字符串表达式很简单，因为只有一个操作符需要处理：`*concatenation*`(`+`)。你使用这个操作符在表达式中组合（或`*concatenate*`）字符串。例如，表达式`"Java"
    + "Script"`返回字符串`"JavaScript"`。但是请注意，你也可以将字符串与下一节中讨论的比较操作符一起使用。  ## Building Comparison
    Expressions'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '字符串表达式是指至少有一个操作数是字符串，并且表达式的结果是另一个字符串。字符串表达式很简单，因为只有一个操作符需要处理：`*连接*`(`+`)。你使用这个操作符在表达式中组合（或`*连接*`）字符串。例如，表达式`"Java"
    + "Script"`返回字符串`"JavaScript"`。但是请注意，你也可以将字符串与下一节中讨论的比较操作符一起使用。  ## 构建比较表达式'
- en: 你使用比较表达式来比较两个或多个数字、字符串、变量、属性或函数结果的值。如果表达式为真，则表达式结果被设置为布尔值`true`；如果表达式为假，则表达式结果被设置为布尔值`false`。在你的JavaScript代码中，你会频繁使用比较，因此理解它们是什么以及如何使用它们是很重要的。
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你使用比较表达式来比较两个或多个数字、字符串、变量、属性或函数结果的值。如果表达式为真，则表达式结果被设置为布尔值`true`；如果表达式为假，则表达式结果被设置为布尔值`false`。在你的
    JavaScript 代码中，你会频繁使用比较，因此理解它们是什么以及如何使用它们是很重要的。
- en: '[Table 3-3](#c03-tbl-0003) summarizes JavaScript’s comparison operators.'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[表 3-3](#c03-tbl-0003) 总结了 JavaScript 的比较操作符。'
- en: '[TABLE 3-3](#rc03-tbl-0003) The JavaScript Comparison Operators'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[表 3-3](#rc03-tbl-0003) JavaScript 比较操作符'
- en: '| `**Operator**` | `**Name**` | `**Example**` | `**Result**` |'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `**操作符**` | `**名称**` | `**示例**` | `**结果**` |'
- en: '| --- | --- | --- | --- |'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `==` | Equality | `10 == 4` | `false` |'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `==` | 等于 | `10 == 4` | `false` |'
- en: '| `!=` | Inequality | `10 != 4` | `true` |'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `!=` | 不等于 | `10 != 4` | `true` |'
- en: '| `>` | Greater than | `10 > 4` | `true` |'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `>` | 大于 | `10 > 4` | `true` |'
- en: '| `<` | Less than | `10 < 4` | `false` |'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `<` | 小于 | `10 < 4` | `false` |'
- en: '| `>=` | Greater than or equal | `10 >= 4` | `true` |'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `>=` | 大于或等于 | `10 >= 4` | `true` |'
- en: '| `<=` | Less than or equal | `10 <= 4` | `false` |'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `<=` | 小于或等于 | `10 <= 4` | `false` |'
- en: '| `===` | Strict equality | `"10" === 10` | `false` |'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `===` | 严格相等 | `"10" === 10` | `false` |'
- en: '| `!==` | Strict inequality | `"10" !== 10` | `true` |  ## Building Logical
    Expressions'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '| `!==` | 严格不等于 | `"10" !== 10` | `true` |  ## 构建逻辑表达式'
- en: 你使用逻辑表达式来组合或操作布尔值，特别是比较表达式。例如，如果你的代码需要测试两个不同的比较表达式是否都为`true`才能继续，你可以使用逻辑表达式来实现。
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你使用逻辑表达式来组合或操作布尔值，特别是比较表达式。例如，如果你的代码需要测试两个不同的比较表达式是否都为`true`才能继续，你可以使用逻辑表达式来实现。
- en: '[Table 3-4](#c03-tbl-0004) lists JavaScript’s logical operators.'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[表 3-4](#c03-tbl-0004) 列出了 JavaScript 的逻辑运算符。'
- en: '[TABLE 3-4](#rc03-tbl-0004) The JavaScript Logical Operators'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[表 3-4](#rc03-tbl-0004) JavaScript 逻辑运算符'
- en: '| `**Operator**` | `**Name**` | `**General Syntax**` | `**Returned Value**`
    |'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `**Operator**` | `**Name**` | `**General Syntax**` | `**Returned Value**`
    |'
- en: '| --- | --- | --- | --- |'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `&&` | AND | `*expr1* && *expr2*` | `true` if both `expr1` and `expr2` are
    `true`; `false` otherwise. |'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `&&` | 与 | `*expr1* && *expr2*` | 如果 `expr1` 和 `expr2` 都为 `true`，则返回 `true`；否则返回
    `false`。 |'
- en: '| ``&#124;&#124;`` | OR | ``*expr1*`` ``&#124;&#124;`` ``*expr2*`` | ``true``
    if one or both of ``expr1`` and ``expr2`` are ``true``; ``false`` otherwise. |'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``&#124;&#124;`` | 或 | ``*expr1*`` ``&#124;&#124;`` ``*expr2*`` | 如果 ``expr1``
    或 ``expr2`` 中有一个为 ``true``，则返回 ``true``；否则返回 ``false``。 |'
- en: '| ``!`` | NOT | ``!*expr*`` | ``true`` if ``expr`` is ``false``; ``false``
    if ``expr`` is ``true``. |  ## Understanding Operator Precedence'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '| ``!`` | 取反 | ``!*expr*`` | 如果 ``expr`` 为 ``false``，则返回 ``true``；如果 ``expr``
    为 ``true``，则返回 ``false``。 |  ## 理解运算符优先级'
- en: In complex expressions, the order in which the calculations are performed becomes
    crucial. For example, consider the expression ``3+5*2``. If you calculate from
    left to right, the answer you get is ``16`` (``3+5`` equals ``8``, and ``8*2``
    equals ``16``). However, if you perform the multiplication first and then the
    addition, the result is ``13`` (``5*2`` equals ``10``, and ``3+10`` equals ``13``).
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在复杂表达式中，运算顺序变得至关重要。例如，考虑表达式``3+5*2``。如果从左到右计算，得到的结果是``16``（``3+5``等于``8``, ``8*2``等于``16``）。然而，如果先进行乘法，再进行加法，结果是``13``（``5*2``等于``10``,
    ``3+10``等于``13``）。
- en: To control this ordering problem, JavaScript evaluates an expression according
    to a predefined ``order of precedence.`` This order of precedence lets JavaScript
    calculate an expression unambiguously by determining which part of the expression
    it calculates first, which part second, and so on.
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为了控制这一运算顺序问题，JavaScript 会根据预定义的``运算符优先级``规则来求值表达式。这一优先级规则让 JavaScript 能够明确无误地计算一个表达式，决定首先计算表达式的哪一部分，接着哪一部分，依此类推。
- en: '### The order of precedence'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '### 运算符优先级'
- en: The order of precedence that JavaScript uses is determined by the various expression
    operators that I’ve covered so far in this chapter. [Table 3-5](#c03-tbl-0005)
    summarizes the complete order of precedence used by JavaScript.
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: JavaScript 使用的优先级顺序由本章目前为止介绍的各种运算符决定。[表 3-5](#c03-tbl-0005) 总结了 JavaScript 使用的完整运算符优先级顺序。
- en: For example, [Table 3-5](#c03-tbl-0005) tells you that JavaScript performs multiplication
    before addition. Therefore, the correct answer for the expression ``3+5*2`` (just
    discussed) is ``13``.
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，[表 3-5](#c03-tbl-0005) 告诉你，JavaScript 在加法之前会进行乘法运算。因此，表达式``3+5*2``（如上所述）的正确答案是``13``。
- en: '[TABLE 3-5](#rc03-tbl-0005) The JavaScript Order of Precedence for Operators'
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[表 3-5](#rc03-tbl-0005) JavaScript 运算符的优先级顺序'
- en: '| **Operator** | **Operation** | **Order of Precedence** | **Order of Evaluation**
    |'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| **Operator** | **Operation** | **Order of Precedence** | **Order of Evaluation**
    |'
- en: '| --- | --- | --- | --- |'
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| ``++`` | Increment | First | R -> L |'
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``++`` | 自增 | 第一 | 右 -> 左 |'
- en: '| ``--`` | Decrement | First | R -> L |'
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``--`` | 自减 | 第一 | 右 -> 左 |'
- en: '| ``—`` | Negation | First | R -> L |'
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``—`` | 取反 | 第一 | 右 -> 左 |'
- en: '| ``!`` | NOT | First | R -> L |'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``!`` | 取反 | 第一 | 右 -> 左 |'
- en: '| ``*``, ``/``, ``%`` | Multiplication, division, modulus | Second | L -> R
    |'
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``*``, ``/``, ``%`` | 乘法, 除法, 取余 | 第二 | 左 -> 右 |'
- en: '| ``+``, ``—`` | Addition, subtraction | Third | L -> R |'
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``+``, ``—`` | 加法, 减法 | 第三 | 左 -> 右 |'
- en: '| ``+`` | Concatenation | Third | L -> R |'
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``+`` | 字符串连接 | 第三 | 左 -> 右 |'
- en: '| ``<``, ``<=`` | Less than, less than or equal | Fourth | L -> R |'
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``<``, ``<=`` | 小于, 小于或等于 | 第四 | 左 -> 右 |'
- en: '| ``>``, ``>=`` | Greater than, greater than or equal | Fourth | L -> R |'
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``>``, ``>=`` | 大于, 大于或等于 | 第四 | 左 -> 右 |'
- en: '| ``==`` | Equality | Fifth | L -> R |'
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``==`` | 相等 | 第五 | 左 -> 右 |'
- en: '| ``!=`` | Inequality | Fifth | L -> R |'
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``!=`` | 不等于 | 第五 | 左 -> 右 |'
- en: '| ``===`` | Strict equality | Fifth | L -> R |'
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``===`` | 严格相等 | 第五 | 左 -> 右 |'
- en: '| ``!==`` | Strict inequality | Fifth | L -> R |'
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``!==`` | 严格不等于 | 第五 | 左 -> 右 |'
- en: '| ``&&`` | AND | Sixth | L -> R |'
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``&&`` | 逻辑与运算符 | 第六优先级 | 从左到右 |'
- en: '| ``&#124;&#124;`` | OR | Sixth | L -> R |'
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``&#124;&#124;`` | 逻辑或运算符 | 第六优先级 | 从左到右 |'
- en: '| ``?:`` | Ternary | Seventh | R -> L |'
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``?:`` | 三元运算符 | 第七优先级 | 从右到左 |'
- en: '| ``=`` | Assignment | Eighth | R -> L |'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``=`` | 赋值运算符 | 第八优先级 | 从右到左 |'
- en: '| ``+=``, ``-=`` , etc. | Arithmetic assignment | Eighth | R -> L |  ### Controlling
    the order of precedence'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '| ``+=``, ``-=`` , 等等 | 算术赋值运算符 | 第八优先级 | 从右到左 |  ### 控制优先级顺序'
- en: Sometimes you want to take control of the situation and override the order of
    precedence. That may seem like a decidedly odd thing to do, so perhaps an example
    is in order. Suppose you know the final price of an item and, given the tax rate,
    you want to know the original (that is, pre-tax) price.
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 有时候你可能想要控制计算顺序并覆盖优先级顺序。这可能看起来有些奇怪，因此可能需要一个例子来解释。假设你已经知道一个商品的最终价格，并且给定税率，你想要知道原始价格（即税前价格）。
- en: 'A first pass at the JavaScript calculation may look something like this:'
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 对 JavaScript 计算的初步尝试可能如下所示：
- en: '``retailPrice = totalPrice / 1 + taxRate;``'
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '``retailPrice = totalPrice / 1 + taxRate;``'
- en: This won’t work, though. Why not? Well, according to the rules of precedence,
    JavaScript performs division before addition, so the `totalPrice` value first
    is divided by `1` and then is added to the `taxRate` value, which isn’t the correct
    order.
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，这样做并不起作用。为什么呢？根据优先级规则，JavaScript 会先进行除法运算，再进行加法运算，因此 `totalPrice` 的值首先会被
    `1` 除以，然后再加上 `taxRate` 的值，这样就得不到正确的结果。
- en: 'To get the correct answer, you have to override the order of precedence so
    that the addition `1 + taxRate` is performed first. You override precedence by
    surrounding that part of the expression with parentheses, as shown in the following
    code:'
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为了得到正确的答案，你必须覆盖优先级顺序，确保先进行加法运算 `1 + taxRate`。你可以通过在该部分表达式外加上括号来覆盖优先级，如下所示：
- en: '``const retailPrice = totalPrice / (1 + taxRate);``'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '``const retailPrice = totalPrice / (1 + taxRate);``'
- en: In general, you can use parentheses to control the order that JavaScript uses
    to calculate expressions. Terms inside parentheses are always calculated first;
    terms outside parentheses are calculated sequentially (according to the order
    of precedence).
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 一般来说，你可以使用括号来控制 JavaScript 计算表达式的顺序。括号内的项总是优先计算；括号外的项则按优先级顺序依次计算。
