- en: 第3章
  id: totrans-0
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Building Expressions`'
  id: totrans-1
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: '`IN THIS CHAPTER`'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) `Understanding what expressions are`'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) `Figuring out numeric expressions`'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) `Tying up string expressions`'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) `Getting the hang of comparison expressions`'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) `Learning about logical expressions`'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在JavaScript编码时，你会不断使用表达式，因此了解它们是什么并熟悉可用的表达式类型至关重要。每个JavaScript编码者都不同，但我可以毫不犹豫地说，每个`good`
    JavaScript编码者都流利地使用表达式。
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这一章带你了解表达式的所有必要知识。你将发现一些表达式的基础，然后探索使用数字、字符串和布尔值构建强大表达式的多种技巧。## `Understanding
    How Expressions Are Structured`
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 一个JavaScript `expression`接受一个或多个输入，例如账单总额和小费百分比，并以某种方式将它们组合在一起——例如，通过使用乘法。在表达式术语中，输入被称为`operands`，它们通过使用称为`operators`的特殊符号组合在一起。
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`operand:` 表达式的输入值。换句话说，它是表达式操作以产生结果的原始数据。它可以是一个数字、一个字符串、一个变量、一个函数结果（参考`[Chapter
    5](c05.xhtml)`），或者一个对象属性（参考`[Chapter 6](c06.xhtml)`）。'
  id: totrans-11
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`operator:` 一个表示对一个或多个操作数执行特定操作的符号。例如，`*`操作符表示乘法，而`+`操作符表示加法。我将在本章中讨论各种JavaScript操作符。'
  id: totrans-12
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 例如，以下是一个计算小费金额并将结果赋值给变量的表达式：
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`tipAmount = billTotal * tipPercentage;`'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 表达式是等号(`=`)右边的所有内容。在这里，`billTotal`和`tipPercentage`是操作数，而乘法符号(`*`)是操作符。## `Creating
    Numeric Expressions`
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在JavaScript中，数学计算称为`numeric expression`，它结合数字操作数和算术操作符以产生数字结果。本节讨论所有JavaScript算术操作符，并向你展示如何最好地使用它们来构建有用且方便的数字表达式。
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`[Table 3-1](#c03-tbl-0001)`列出了你可以在JavaScript表达式中使用的基本算术操作符。'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: JavaScript还提供了一些额外的操作符，这些操作符结合了一些算术操作符和赋值操作符，即将值赋给变量的谦逊等号(`=`)。`[Table 3-2](#c03-tbl-0002)`列出了这些所谓的`arithmetic
    assignment`操作符。
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`[TABLE 3-1](#rc03-tbl-0001)` The JavaScript Arithmetic Operators'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| `Operator` | `Name` | `Example` | `Result` |'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `+` | Addition | `10 + 4` | `14` |'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `++` | Increment | `10++` | `11` |'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `-` | Subtraction | `10 - 4` | `6` |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `-` | Negation | `-10` | `-10` |'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `--` | Decrement | `10--` | `9` |'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `*` | Multiplication | `10 * 4` | `40` |'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `/` | Division | `10 / 4` | `2.5` |'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `%` | Modulus | `10 % 4` | `2` |'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '[TABLE 3-2](#rc03-tbl-0002) The JavaScript Arithmetic Assignment Operators'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| **Operator** | **Example** | **Equivalent** |'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `+=` | `x += y` | `x = x + y` |'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `-=` | `x -= y` | `x = x - y` |'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `*=` | `x *= y` | `x = x * y` |'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `/=` | `x /= y` | `x = x / y` |'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `^=` | `x ^= y` | `x = x ^ y` |'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `%=` | `x %= y` | `x = x % y` |  ## Building String Expressions'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '字符串表达式是指至少有一个操作数是字符串，并且表达式的结果是另一个字符串。字符串表达式很简单，因为只有一个操作符需要处理：`*concatenation*`(`+`)。你使用这个操作符在表达式中组合（或`*concatenate*`）字符串。例如，表达式`"Java"
    + "Script"`返回字符串`"JavaScript"`。但是请注意，你也可以将字符串与下一节中讨论的比较操作符一起使用。  ## Building Comparison
    Expressions'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 你使用比较表达式来比较两个或多个数字、字符串、变量、属性或函数结果的值。如果表达式为真，则表达式结果被设置为布尔值`true`；如果表达式为假，则表达式结果被设置为布尔值`false`。在你的JavaScript代码中，你会频繁使用比较，因此理解它们是什么以及如何使用它们是很重要的。
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[Table 3-3](#c03-tbl-0003) summarizes JavaScript’s comparison operators.'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[TABLE 3-3](#rc03-tbl-0003) The JavaScript Comparison Operators'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| `**Operator**` | `**Name**` | `**Example**` | `**Result**` |'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `==` | Equality | `10 == 4` | `false` |'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `!=` | Inequality | `10 != 4` | `true` |'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `>` | Greater than | `10 > 4` | `true` |'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `<` | Less than | `10 < 4` | `false` |'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `>=` | Greater than or equal | `10 >= 4` | `true` |'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `<=` | Less than or equal | `10 <= 4` | `false` |'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `===` | Strict equality | `"10" === 10` | `false` |'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `!==` | Strict inequality | `"10" !== 10` | `true` |  ## Building Logical
    Expressions'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 你使用逻辑表达式来组合或操作布尔值，特别是比较表达式。例如，如果你的代码需要测试两个不同的比较表达式是否都为`true`才能继续，你可以使用逻辑表达式来实现。
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[Table 3-4](#c03-tbl-0004) lists JavaScript’s logical operators.'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[TABLE 3-4](#rc03-tbl-0004) The JavaScript Logical Operators'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| `**Operator**` | `**Name**` | `**General Syntax**` | `**Returned Value**`
    |'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `&&` | AND | `*expr1* && *expr2*` | `true` if both `expr1` and `expr2` are
    `true`; `false` otherwise. |'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ``&#124;&#124;`` | OR | ``*expr1*`` ``&#124;&#124;`` ``*expr2*`` | ``true``
    if one or both of ``expr1`` and ``expr2`` are ``true``; ``false`` otherwise. |'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ``!`` | NOT | ``!*expr*`` | ``true`` if ``expr`` is ``false``; ``false``
    if ``expr`` is ``true``. |  ## Understanding Operator Precedence'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In complex expressions, the order in which the calculations are performed becomes
    crucial. For example, consider the expression ``3+5*2``. If you calculate from
    left to right, the answer you get is ``16`` (``3+5`` equals ``8``, and ``8*2``
    equals ``16``). However, if you perform the multiplication first and then the
    addition, the result is ``13`` (``5*2`` equals ``10``, and ``3+10`` equals ``13``).
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: To control this ordering problem, JavaScript evaluates an expression according
    to a predefined ``order of precedence.`` This order of precedence lets JavaScript
    calculate an expression unambiguously by determining which part of the expression
    it calculates first, which part second, and so on.
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '### The order of precedence'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The order of precedence that JavaScript uses is determined by the various expression
    operators that I’ve covered so far in this chapter. [Table 3-5](#c03-tbl-0005)
    summarizes the complete order of precedence used by JavaScript.
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: For example, [Table 3-5](#c03-tbl-0005) tells you that JavaScript performs multiplication
    before addition. Therefore, the correct answer for the expression ``3+5*2`` (just
    discussed) is ``13``.
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[TABLE 3-5](#rc03-tbl-0005) The JavaScript Order of Precedence for Operators'
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| **Operator** | **Operation** | **Order of Precedence** | **Order of Evaluation**
    |'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ``++`` | Increment | First | R -> L |'
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ``--`` | Decrement | First | R -> L |'
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ``—`` | Negation | First | R -> L |'
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ``!`` | NOT | First | R -> L |'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ``*``, ``/``, ``%`` | Multiplication, division, modulus | Second | L -> R
    |'
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ``+``, ``—`` | Addition, subtraction | Third | L -> R |'
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ``+`` | Concatenation | Third | L -> R |'
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ``<``, ``<=`` | Less than, less than or equal | Fourth | L -> R |'
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ``>``, ``>=`` | Greater than, greater than or equal | Fourth | L -> R |'
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ``==`` | Equality | Fifth | L -> R |'
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ``!=`` | Inequality | Fifth | L -> R |'
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ``===`` | Strict equality | Fifth | L -> R |'
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ``!==`` | Strict inequality | Fifth | L -> R |'
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ``&&`` | AND | Sixth | L -> R |'
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ``&#124;&#124;`` | OR | Sixth | L -> R |'
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ``?:`` | Ternary | Seventh | R -> L |'
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ``=`` | Assignment | Eighth | R -> L |'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ``+=``, ``-=`` , etc. | Arithmetic assignment | Eighth | R -> L |  ### Controlling
    the order of precedence'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Sometimes you want to take control of the situation and override the order of
    precedence. That may seem like a decidedly odd thing to do, so perhaps an example
    is in order. Suppose you know the final price of an item and, given the tax rate,
    you want to know the original (that is, pre-tax) price.
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'A first pass at the JavaScript calculation may look something like this:'
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``retailPrice = totalPrice / 1 + taxRate;``'
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: This won’t work, though. Why not? Well, according to the rules of precedence,
    JavaScript performs division before addition, so the `totalPrice` value first
    is divided by `1` and then is added to the `taxRate` value, which isn’t the correct
    order.
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'To get the correct answer, you have to override the order of precedence so
    that the addition `1 + taxRate` is performed first. You override precedence by
    surrounding that part of the expression with parentheses, as shown in the following
    code:'
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``const retailPrice = totalPrice / (1 + taxRate);``'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In general, you can use parentheses to control the order that JavaScript uses
    to calculate expressions. Terms inside parentheses are always calculated first;
    terms outside parentheses are calculated sequentially (according to the order
    of precedence).
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_NORMAL
