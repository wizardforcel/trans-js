- en: Chapter 11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'React: Fundamentals and Applications'
  prefs: []
  type: TYPE_NORMAL
- en: Welcome to the chapter on React, one of the most popular and widely used libraries
    for creating modern user interfaces. Let's explore the basics of React, including
    components and props, state, and component lifecycle. This chapter is essential
    for any developer who wants to create dynamic and reactive web applications.
  prefs: []
  type: TYPE_NORMAL
- en: React Fundamentals
  prefs: []
  type: TYPE_NORMAL
- en: React is a JavaScript library developed by Facebook, launched in 2013\. React's
    main philosophy is to create user interfaces in a declarative way, composing reusable
    components. React uses Virtual DOM to optimize user interface updating, ensuring
    that only the necessary parts of the DOM are updated, resulting in better performance.
  prefs: []
  type: TYPE_NORMAL
- en: Why use React?
  prefs: []
  type: TYPE_NORMAL
- en: '- Componentization:  React allows you to divide the user interface into independent,
    reusable components, each managing its own state.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Performance:  Using Virtual DOM reduces the cost of direct manipulations
    in the real DOM, making updates more efficient.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Unidirectional data flow:  React adopts a unidirectional data flow, making
    it easier to track changes in the application state.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Robust ecosystem:  A large community and rich ecosystem of libraries and
    tools support development with React.'
  prefs: []
  type: TYPE_NORMAL
- en: Components and props
  prefs: []
  type: TYPE_NORMAL
- en: Components are the foundation of React. They can be defined as functions or
    classes and represent independent parts of the user interface. Components can
    receive data through "props" (properties) and maintain their own state.
  prefs: []
  type: TYPE_NORMAL
- en: Function Components
  prefs: []
  type: TYPE_NORMAL
- en: A function component is a JavaScript function that accepts props as an argument
    and returns a React element.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this example, Greetings is a function component that displays a custom greeting.
    The value of `props.nome` is inserted into the component rendering.
  prefs: []
  type: TYPE_NORMAL
- en: Class Components
  prefs: []
  type: TYPE_NORMAL
- en: A class component is an ES6 class that extends `React.Component` and defines
    a `render` method that returns a React element.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, Saudacao is a class component that uses `this.props` to access the properties
    passed to the component.
  prefs: []
  type: TYPE_NORMAL
- en: Props
  prefs: []
  type: TYPE_NORMAL
- en: Props are arguments passed to React components. They allow passing data from
    a parent component to a child component.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the example above, the App component passes the `nome` prop with the value
    "João" to the Greeting component.
  prefs: []
  type: TYPE_NORMAL
- en: Status and life cycle of components
  prefs: []
  type: TYPE_NORMAL
- en: The state of a component is a data structure that stores information that can
    change over time. Unlike props, which are immutable, the state can be changed
    using the `setState` method.
  prefs: []
  type: TYPE_NORMAL
- en: State in class components
  prefs: []
  type: TYPE_NORMAL
- en: Class components use the constructor to initialize state.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the example above, Counter is a class component that manages a counter in
    its state. The `increment` method uses `setState` to update the state and re-render
    the component.
  prefs: []
  type: TYPE_NORMAL
- en: State in Function Components with Hooks
  prefs: []
  type: TYPE_NORMAL
- en: React introduced Hooks in React 16.8, allowing the use of state and other React
    features in function components.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we use the `useState` Hook to add state to the Counter function
    component. The `increment` function updates the state and re-renders the component.
  prefs: []
  type: TYPE_NORMAL
- en: Life cycle two components
  prefs: []
  type: TYPE_NORMAL
- en: 'Class components in React have lifecycle methods that allow code to execute
    at specific points during a component''s existence. Some of the main lifecycle
    methods include:'
  prefs: []
  type: TYPE_NORMAL
- en: '- `componentDidMount`:  Executed after the component is inserted into the DOM.'
  prefs: []
  type: TYPE_NORMAL
- en: '- `componentDidUpdate`:  Executed after the component is updated.'
  prefs: []
  type: TYPE_NORMAL
- en: '- `componentWillUnmount`:  Executed before the component is removed from the
    DOM.'
  prefs: []
  type: TYPE_NORMAL
- en: Example of using lifecycle methods
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the Clock component sets a timer in the `componentDidMount`
    method to update the time every second. The `componentWillUnmount` method clears
    the timer when the component is removed from the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we explore the basics of React, including components and props,
    state, and component lifecycle. React allows you to create dynamic and efficient
    user interfaces by composing reusable components. With an understanding of these
    basic concepts, you will be well positioned to build modern, interactive web applications.
    As we move forward, we will continue to explore more advanced React features and
    how to integrate them into your applications to maximize their potential. Keep
    practicing and applying these concepts to become an expert in the art of programming
    with React.
  prefs: []
  type: TYPE_NORMAL
