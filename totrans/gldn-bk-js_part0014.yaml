- en: '`Chapter 11`'
  id: totrans-0
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: '`React: Fundamentals and Applications`'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Welcome to the chapter on React, one of the most popular and widely used libraries
    for creating modern user interfaces. Let's explore the basics of React, including
    components and props, state, and component lifecycle. This chapter is essential
    for any developer who wants to create dynamic and reactive web applications.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`React Fundamentals`'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: React is a JavaScript library developed by `Facebook`, launched in `2013`. React's
    main philosophy is to create user interfaces in a declarative way, composing reusable
    components. React uses `Virtual DOM` to optimize user interface updating, ensuring
    that only the necessary parts of the DOM are updated, resulting in better performance.
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Why use React?`'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '- `Componentization`:  React allows you to divide the user interface into independent,
    reusable components, each managing its own state.'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '- `Performance`:  Using Virtual DOM reduces the cost of direct manipulations
    in the real DOM, making updates more efficient.'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '- `Unidirectional data flow`:  React adopts a unidirectional data flow, making
    it easier to track changes in the application state.'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '- `Robust ecosystem`:  A large community and rich ecosystem of libraries and
    tools support development with React.'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Components and props`'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Components are the foundation of React. They can be defined as functions or
    classes and represent independent parts of the user interface. Components can
    receive data through `props` (properties) and maintain their own state.
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Function Components`'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: A function component is a JavaScript function that accepts `props` as an argument
    and returns a React element.
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, `Greetings` is a function component that displays a custom
    greeting. The value of `props.nome` is inserted into the component rendering.
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Class Components`'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: A class component is an ES6 class that extends `React.Component` and defines
    a `render` method that returns a React element.
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, `Saudacao` is a class component that uses `this.props` to access the properties
    passed to the component.
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Props`'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Props` are arguments passed to React components. They allow passing data from
    a parent component to a child component.'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the example above, the `App` component passes the `nome` prop with the value
    "João" to the `Greeting` component.
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Status and life cycle of components`'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The state of a component is a data structure that stores information that can
    change over time. Unlike `props`, which are immutable, the state can be changed
    using the `setState` method.
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`State in class components`'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Class components use the constructor to initialize state.
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the example above, `Counter` is a class component that manages a counter
    in its state. The `increment` method uses `setState` to update the state and re-render
    the component.
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`State in Function Components with Hooks`'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: React introduced `Hooks` in `React 16.8`, allowing the use of state and other
    React features in function components.
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 在此示例中，我们使用`useState` Hook为`Counter`函数组件添加状态。`increment`函数更新状态并重新渲染组件。
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 生命周期的两个组件
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: React中的类组件具有生命周期方法，允许代码在组件存在的特定时刻执行。一些主要的生命周期方法包括：
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '- `componentDidMount`：在组件插入DOM后执行。'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '- `componentDidUpdate`：在组件更新后执行。'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '- `componentWillUnmount`：在组件从DOM中移除之前执行。'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 使用生命周期方法的示例
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 在此示例中，`Clock`组件在`componentDidMount`方法中设置定时器，以每秒更新一次时间。当组件从DOM中移除时，`componentWillUnmount`方法会清除定时器。
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在这一章中，我们探讨了React的基础知识，包括组件和属性、状态以及组件生命周期。React允许您通过组合可重用组件来创建动态和高效的用户界面。理解这些基本概念后，您将能够很好地构建现代交互式Web应用程序。随着我们深入，继续探索更多高级React特性及其如何集成到您的应用程序中，以最大化其潜力。请继续练习并应用这些概念，成为使用React编程艺术的专家。
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
