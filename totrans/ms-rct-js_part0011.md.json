["```jsjsx\n\nclass ControlledForm extends React.Component {\n\nconstructor(props) {\n\nsuper(props);\n\nthis.state = {\n\ninputValue: '',\n\n};\n\n}\n\nhandleChange = (event) => {\n\nthis.setState({ inputValue: event.target.value });\n\n};\n\nhandleSubmit = (event) => {\n\nevent.preventDefault();\n\n// Access the form data using this.state.inputValue\n\n};\n\nrender() {\n\nreturn (\n\n<form onSubmit={this.handleSubmit}>\n\n<input\n\ntype=\"text\"\n\nvalue={this.state.inputValue}\n\nonChange={this.handleChange}\n\n/>\n\n<button type=\"submit\">Submit</button>\n\n</form>\n\n);\n\n}\n\n}\n\n```", "```jsjsx\n\nclass FormSubmission extends React.Component {\n\nhandleSubmit = (event) => {\n\nevent.preventDefault();\n\n// Access and process the form data\n\n};\n\nrender() {\n\nreturn (\n\n<form onSubmit={this.handleSubmit}>\n\n{/* Form fields */}\n\n<button type=\"submit\">Submit</button>\n\n</form>\n\n);\n\n}\n\n}\n\n```", "```jsjsx\n\nclass FormValidation extends React.Component {\n\nconstructor(props) {\n\nsuper(props);\n\nthis.state = {\n\ninputValue: '',\n\nerrorMessage: '',\n\n};\n\n}\n\nhandleChange = (event) => {\n\nconst inputValue = event.target.value;\n\nthis.setState({ inputValue });\n\n// Validate the input\n\nif (inputValue.length < 5) {\n\nthis.setState({ errorMessage: 'Input must be at least 5 characters' });\n\n} else {\n\nthis.setState({ errorMessage: '' });\n\n}\n\n};\n\nhandleSubmit = (event) => {\n\nevent.preventDefault();\n\nif (this.state.inputValue.length >= 5) {\n\n// Submit the form\n\n} else {\n\nthis.setState({ errorMessage: 'Input must be at least 5 characters' });\n\n}\n\n};\n\nrender() {\n\nreturn (\n\n<form onSubmit={this.handleSubmit}>\n\n<input\n\ntype=\"text\"\n\nvalue={this.state.inputValue}\n\nonChange={this.handleChange}\n\n/>\n\n<button type=\"submit\">Submit</button>\n\n<div className=\"error-message\">{this.state.errorMessage}</div>\n\n</form>\n\n);\n\n}\n\n}\n\n```", "```jsjsx\n\nimport React, { Component } from 'react';\n\nclass SimpleForm extends Component {\n\nconstructor(props) {\n\nsuper(props);\n\nthis.state = {\n\nname: '',\n\nemail: '',\n\nsubmittedData: null,\n\n};\n\n}\n\nhandleChange = (event) => {\n\nconst { name, value } = event.target;\n\nthis.setState({ [name]: value });\n\n};\n\nhandleSubmit = (event) => {\n\nevent.preventDefault();\n\nconst { name, email } = this.state;\n\nconst submittedData = { name, email };\n\nthis.setState({ submittedData });\n\n};\n\nrender() {\n\nconst { name, email, submittedData } = this.state;\n\nreturn (\n\n<div>\n\n<h2>Simple Form</h2>\n\n<form onSubmit={this.handleSubmit}>\n\n<div>\n\n<label>Name:</label>\n\n<input\n\ntype=\"text\"\n\nname=\"name\"\n\nvalue={name}\n\nonChange={this.handleChange}\n\n/>\n\n</div>\n\n<div>\n\n<label>Email:</label>\n\n<input\n\ntype=\"email\"\n\nname=\"email\"\n\nvalue={email}\n\nonChange={this.handleChange}\n\n/>\n\n</div>\n\n<button type=\"submit\">Submit</button>\n\n</form>\n\n{submittedData && (\n\n<div>\n\n<h3>Submitted Data:</h3>\n\n<p>Name: {submittedData.name}</p>\n\n<p>Email: {submittedData.email}</p>\n\n</div>\n\n)}\n\n</div>\n\n);\n\n}\n\n}\n\nexport default SimpleForm;\n\n```", "```js\n\njsx\n\nimport React from 'react';\n\nimport SimpleForm from './SimpleForm';\n\nfunction App() {\n\nreturn (\n\n<div className=\"App\">\n\n<SimpleForm />\n\n</div>\n\n);\n\n}\n\nexport default App;\n\n```", "```jsjsx\n\nimport React, { Component } from 'react';\n\nclass SimpleForm extends Component {\n\nconstructor(props) {\n\nsuper(props);\n\nthis.state = {\n\nname: '',\n\nemail: '',\n\nsubmittedData: null,\n\nerrors: {\n\nname: '',\n\nemail: '',\n\n},\n\n};\n\n}\n\nhandleChange = (event) => {\n\nconst { name, value } = event.target;\n\nthis.setState({ [name]: value });\n\nthis.validateField(name, value);\n\n};\n\nvalidateField = (fieldName, value) => {\n\nconst errors = { ...this.state.errors };\n\nswitch (fieldName) {\n\ncase 'name':\n\nerrors.name = value.length < 3 ? 'Name must be at least 3 characters' : '';\n\nbreak;\n\ncase 'email':\n\n// A simple email validation regex pattern\n\nconst emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n\nerrors.email = emailPattern.test(value) ? '' : 'Invalid email address';\n\nbreak;\n\ndefault:\n\nbreak;\n\n}\n\nthis.setState({ errors });\n\n};\n\nhandleSubmit = (event) => {\n\nevent.preventDefault();\n\n// Check if there are errors\n\nif (this.validateForm()) {\n\nreturn;\n\n}\n\nconst { name, email } = this.state;\n\nconst submittedData = { name, email };\n\nthis.setState({ submittedData });\n\n};\n\nvalidateForm = () => {\n\nconst { name, email, errors } = this.state;\n\nconst isFormInvalid = name.length === 0 || email.length === 0 || Object.values(errors).some((error) => error !== '');\n\nreturn isFormInvalid;\n\n};\n\nrender() {\n\nconst { name, email, submittedData, errors } = this.state;\n\nreturn (\n\n<div>\n\n<h2>Simple Form with Validation</h2>\n\n<form onSubmit={this.handleSubmit}>\n\n<div>\n\n<label>Name:</label>\n\n<input\n\ntype=\"text\"\n\nname=\"name\"\n\nvalue={name}\n\nonChange={this.handleChange}\n\n/>\n\n<span className=\"error-message\">{errors.name}</span>\n\n</div>\n\n<div>\n\n<label>Email:</label>\n\n<input\n\ntype=\"email\"\n\nname=\"email\"\n\nvalue={email}\n\nonChange={this.handleChange}\n\n/>\n\n<span className=\"error-message\">{errors.email}</span>\n\n</div>\n\n<button type=\"submit\">Submit</button>\n\n</form>\n\n{submittedData && (\n\n<div>\n\n<h3>Submitted Data:</h3>\n\n<p>Name: {submittedData.name}</p>\n\n<p>Email: {submittedData.email}</p>\n\n</div>\n\n)}\n\n</div>\n\n);\n\n}\n\n}\n\nexport default SimpleForm;\n\n```"]