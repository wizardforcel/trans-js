- en: © The Author(s), under exclusive license to Springer Fachmedien Wiesbaden GmbH,
    part of Springer Nature 2024J. L. ZuckarelliLearn coding with Python and JavaScript
    [https://doi.org/10.1007/978-3-658-42912-6_5](https://doi.org/10.1007/978-3-658-42912-6_5)
  prefs: []
  type: TYPE_NORMAL
- en: 5. Which Programming Languages Should You Learn?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Joachim L. Zuckarelli^([1](#Aff2)  )(1)München, GermanyOverview
  prefs: []
  type: TYPE_NORMAL
- en: In the last chapter we saw why there are so many different programming languages.
    But this diversity presents us with the problem of deciding which language or
    languages to learn. In Parts III and IV of this book, you will have the opportunity
    to familiarize yourself with two extremely popular programming languages, Python
    and JavaScript; to that extent, the author has already made a choice for you.
    Independently of this, however, in this chapter we want to address the question
    of what criteria you can use to select languages that might be of interest to
    you. After all, if you are just starting out in programming, you will certainly
    not remain with the first language with which you started programming.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given the immense range of programming languages, the question naturally arises
    as to which of them you should bother with. As you probably already thought, or
    even feared, the answer turns out to be inconclusive: It depends.'
  prefs: []
  type: TYPE_NORMAL
- en: 5.1 Subject of Your Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have seen in the previous chapter that languages are differently suited for
    different application areas. So, it makes sense to choose a language for your
    project(s) that can comfortably achieve the goal. If you mainly want to build
    websites with dynamic elements (for example, if you want your website to validate
    address data when a customer creates a new user account), then you’re most likely
    to go with JavaScript, because JavaScript runs in the web browser and it’s great
    for working with user input before it’s sent to the web server. In the next step,
    however, you won’t be able to avoid involving the web server itself if the customer
    data is also to be written to a database. To do this, a script runs on the web
    server, for which PHP will probably be the language of your choice. PHP was developed
    for exactly this purpose. It runs on the web server and makes it easy to work
    with databases in the background and dynamically display the results of database
    queries as a web page in the user’s browser. However, if you want to develop a
    real Windows application, neither PHP nor JavaScript will be on your shortlist,
    because they are made to run in a web environment. For a true Windows application,
    you’re more likely to turn to Java, Visual C/C++, VisualBasic, Delphi, or something
    similar. These languages allow you to develop classic stand-alone applications,
    design pretty interfaces for them, and respond to the user’s actions. If you want
    to develop programs for analyzing large amounts of data, you’ll probably turn
    to R or Python. And for mobile apps, you might use Objective-C or the relatively
    new Swift developed by Apple.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have always talked about a language being particularly good for a particular
    purpose. But what makes a language better or less suitable? There are two things
    in particular:'
  prefs: []
  type: TYPE_NORMAL
- en: '1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The environment in which the language runs, such as a PC operating system (for
    stand-alone applications), a website in the user’s web browser, a web server,
    or a mobile operating system (for mobile/tablet apps).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The tools that the language provides to accomplish the task you set out to do.
    For many languages there are libraries and frameworks, which are ultimately extensions
    that give a certain functionality to the language. For example, there might be
    a library for searching other websites for content and extracting it (“web scraping”).
    Now, if you want to write a program that keeps track of the price of a particular
    online shop item and notifies you when it changes, you should choose a language
    that features a strong web scraping library. When it comes to libraries and frameworks,
    open-source languages with an active, engaged user community regularly have an
    advantage over their commercial competitors.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: But languages may also come with important out-of-the-box features that make
    the language more suitable for your purpose. For example, this could be the language’s
    data structures, or the way data is processed in the language. If you want to
    work with data tables and columns from these tables, for example, the language
    R, which is primarily used for statistical purposes, is a good choice, since it
    offers extensive out-of-the-box support for these data structures in the form
    of data frames and vectors.
  prefs: []
  type: TYPE_NORMAL
- en: 5.2 Customer Preference and Employer Preference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you work as a freelancer, the client may have their own ideas about which
    programming language to use. This may be because he wants to smoothly integrate
    your program into his larger overall software, which is written in that language.
    Or because he and his internal developers simply know the language best. If your
    customer doesn’t understand how your software works, he won’t be able to develop
    it further.
  prefs: []
  type: TYPE_NORMAL
- en: Also, if you are looking for a job as a developer, it is important to know one
    or more of the languages that are in demand in the market. But how do you find
    them?
  prefs: []
  type: TYPE_NORMAL
- en: One way is to use the *TIOBE index* as a guide. This list, maintained by the
    *TIOBE* software company, evaluates the relevance of programming languages based
    on the number of hits they get in various search engines when you search for the
    name of the language.
  prefs: []
  type: TYPE_NORMAL
- en: The number of question and answer posts in the *Stack Overflow* forums, which
    are extremely popular among programmers, is also a good indicator. The Stack Overflow
    operators publish quantitative evaluations of the programming languages to which
    the posts refer. In addition, Stack Overflow’s regular user surveys offer a clue,
    as among other things, they regularly ask about programming languages used.
  prefs: []
  type: TYPE_NORMAL
- en: But what if you don’t trust all these statistics? After all, there are reasons
    to at least critically question the validity of such numbers. Could it be that
    the many questions about a particular programming language on *Stack Overflow*
    only come from the fact that the language is very complicated and therefore difficult
    to use? The same argument could be used to question the validity of the search
    hit based *TIOBE* popularity statistics*.* Further, one might question whether
    Stack Overflow’s user surveys are representative—perhaps certain groups, such
    as nerds, who engage with a language for reasons other than its practicality are
    more inclined to participate in such surveys.
  prefs: []
  type: TYPE_NORMAL
- en: These are all legitimate considerations. Nevertheless, high numbers of questions
    and search hits at least show that there are people who are concerned with the
    language. If you really want to do without statistics, you can look for anecdotal
    evidence for the importance of certain programming languages. Go to the major
    job portals, search for programmer/developer jobs, and see what languages are
    required in the job ads. Studies such as those of the programming course provider
    *Coding Dojo* examine job ads in a systematic way (again statistics!), particularly
    those on the search engine ► [*indeed.com*](http://indeed.com). If that’s still
    not enough evidence for you and you’d rather hear the opinion of (mostly self-appointed)
    experts, go to *YouTube* and search for “Programming languages to learn in [insert
    year here].” You’ll find dozens of YouTubers with more or less good insights into
    the market situation who willingly explain which languages they prefer and for
    what reasons. Stack Overflow
  prefs: []
  type: TYPE_NORMAL
- en: 5.3 Pedagogical Aspects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the beginning, you might deliberately choose languages that take different
    paths in terms of their approach to programming (i.e., their *programming paradigms*,
    which we will look at in more detail in the third part of the book) in order to
    learn about a wide range of possibilities. This sounds a bit easier than it is,
    because most languages do not follow a single paradigm at all, but are *multiparadigmatic*,
    picking elements from different paradigms. However, a good mix still creates a
    sound understanding of the different approaches.
  prefs: []
  type: TYPE_NORMAL
- en: In the same way, you could start with languages that are relatively easy to
    learn. After all, achieving initial learning successes quickly is a key motivation
    to stick with it and keep going. We also follow these pedagogical points of view
    in the present book.
  prefs: []
  type: TYPE_NORMAL
- en: You have probably noticed that we always assume here that you will ultimately
    learn not just one but several programming languages. But is it realistic to really
    master several languages, and to do so sufficiently well?
  prefs: []
  type: TYPE_NORMAL
- en: How is your English? How’s your French? How is your Spanish? Can you make yourself
    understood to a native speaker in all three languages? Probably not (unless you’re
    really gifted at languages). It’s apparently quite hard to do well in natural
    languages. Programming languages are a bit different. Once you understand the
    basic concepts of programming, you can learn other languages with manageable effort.
  prefs: []
  type: TYPE_NORMAL
- en: As with natural languages, a developer with many years of practical experience
    in that language, a “native speaker” so to speak, will of course be far superior
    to you and know tricks you have never heard of. In this way, he will be able to
    solve a given task with a program that is shorter, looks more elegant and runs
    faster than one you can write. Still, learning the basics of a new language, at
    a level that will enable you to write programs successfully, is not difficult.
    While this statement may seem like a somewhat bold assertion to you at this point,
    we will prove it in this book.
  prefs: []
  type: TYPE_NORMAL
- en: After extensively covering the basic concepts of programming in the second part
    of the book, you will learn *two* programming languages, *Python* and *JavaScript*,
    in the third and fourth parts. These two languages are not only very useful, but
    also extremely popular by all measures. In the July 2022 *TIOBE Index*, they rank
    1st (Python) and 7th (JavaScript). The leading languages in the index—Java, C,
    and C++ − are a bit more complicated and not quite as well-suited for entry-level
    programmers as Python and JavaScript. As of May 2023, JavaScript and Python were
    the languages with the highest number of questions on, with the number of Python-related
    questions in particular increasing in recent years.
  prefs: []
  type: TYPE_NORMAL
