- en: 'Module 5:'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 第五模块：
- en: '|'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: State Management with Vuex
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Vuex 进行状态管理
- en: '|'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'In the realm of modern web development, managing application state efficiently
    is paramount to creating robust and responsive user interfaces. Vue.js, a progressive
    JavaScript framework, addresses this challenge seamlessly through Vuex—an official
    state management library designed specifically for Vue.js applications. The module
    "State Management with Vuex" takes center stage in the book "Vue.js Essentials:
    For Responsive Web Development," offering readers an in-depth exploration of how
    Vuex empowers developers to handle complex state management scenarios with clarity
    and precision.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代 web 开发领域，高效的应用程序状态管理是创建健壮且响应迅速的用户界面的关键。Vue.js 是一个渐进式 JavaScript 框架，它通过 Vuex
    —— 专为 Vue.js 应用程序设计的官方状态管理库，轻松应对这一挑战。本模块“使用 Vuex 进行状态管理”在《Vue.js 必备：响应式 web 开发》一书中占据核心位置，为读者提供了对
    Vuex 如何帮助开发者清晰精准地处理复杂状态管理场景的深入探索。
- en: Unveiling the Crucial Role of State Management in Vue.js
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 揭示状态管理在 Vue.js 中的关键作用
- en: Before delving into Vuex, it is crucial to recognize the pivotal role state
    management plays in Vue.js applications. This module commences with an exploration
    of the challenges associated with managing state in large-scale applications,
    emphasizing the need for a centralized and predictable approach. Readers gain
    insights into the evolution of state management within Vue.js and how Vuex emerges
    as a potent solution, providing a centralized store to efficiently manage and
    synchronize the state of the application.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨 Vuex 之前，必须认识到状态管理在 Vue.js 应用程序中的关键作用。本模块首先探讨了在大型应用程序中管理状态所面临的挑战，强调了集中化和可预测方法的必要性。读者将了解
    Vue.js 中状态管理的演变，以及 Vuex 如何作为一种强大的解决方案，通过提供集中式存储高效管理和同步应用程序的状态。
- en: 'Fundamentals of Vuex: State, Getters, Mutations, and Actions'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Vuex 基础：状态、计算属性、突变和动作
- en: The core concepts of Vuex—state, getters, mutations, and actions—form the backbone
    of this module. Readers embark on a comprehensive journey to understand how Vuex
    introduces a unidirectional data flow, ensuring a predictable and traceable state
    mutation process. The module dissects the role of the state as the single source
    of truth, explores getters for computed properties, delves into mutations for
    synchronous state changes, and elucidates the role of actions for asynchronous
    operations. By grasping these fundamentals, developers gain a robust foundation
    for implementing Vuex in their Vue.js projects.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Vuex 的核心概念——状态（state）、计算属性（getters）、突变（mutations）和动作（actions）——构成了本模块的基础。读者将踏上全面学习之旅，了解
    Vuex 如何引入单向数据流，确保状态突变过程的可预测性和可追溯性。本模块深入分析状态作为唯一真实来源的角色，探讨计算属性（getters）用于计算的属性，解析突变（mutations）用于同步状态变化的作用，以及说明动作（actions）在处理异步操作中的作用。掌握这些基本概念后，开发者将为在
    Vue.js 项目中实施 Vuex 打下坚实的基础。
- en: 'Structured State Management: Modules in Vuex'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化状态管理：Vuex 中的模块
- en: As Vue.js applications grow in complexity, organizing state management becomes
    paramount. This module introduces the concept of modules in Vuex, empowering developers
    to structure their state, getters, mutations, and actions in a modular fashion.
    With modules, readers learn to compartmentalize state concerns, facilitating maintainability
    and scalability. By exploring practical examples, developers gain the expertise
    needed to architect Vuex stores that seamlessly adapt to the evolving requirements
    of their applications.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 Vue.js 应用的复杂度增加，组织状态管理变得尤为重要。本模块介绍了 Vuex 中模块的概念，使开发者能够以模块化的方式组织他们的状态、getter、mutation
    和 action。通过使用模块，读者可以将状态管理划分为多个独立部分，促进可维护性和可扩展性。通过实际示例，开发者将掌握设计 Vuex 存储的技巧，从而让其能够无缝地适应应用的不断变化的需求。
- en: 'Vue.js and Vuex Integration: Building Responsive and Synchronized Applications'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 与 Vuex 集成：构建响应式和同步的应用程序
- en: The synergy between Vue.js and Vuex is a key focus of this module. Readers delve
    into the seamless integration of Vuex within Vue.js applications, understanding
    how to connect components to the Vuex store and leverage reactive data-binding
    to create dynamic and responsive user interfaces. The module explores strategies
    for efficiently updating the UI based on changes in the Vuex store, ensuring a
    synchronized and coherent user experience across the application.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 和 Vuex 之间的协同作用是本模块的关键内容。读者将深入探讨 Vuex 在 Vue.js 应用中的无缝集成，了解如何将组件与 Vuex
    存储连接，并利用响应式数据绑定来创建动态且响应迅速的用户界面。本模块还探索了基于 Vuex 存储中变化高效更新 UI 的策略，确保在整个应用中实现同步和一致的用户体验。
- en: '"State Management with Vuex" stands as a cornerstone within "Vue.js Essentials:
    For Responsive Web Development," providing readers with the essential knowledge
    and skills to elevate their Vue.js applications through efficient state management.
    By unraveling the intricacies of Vuex, developers gain the tools needed to build
    scalable, maintainable, and responsive web applications that seamlessly adapt
    to the dynamic requirements of the modern web development landscape.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '“State Management with Vuex”是《Vue.js Essentials: For Responsive Web Development》中的基石，向读者提供了提升
    Vue.js 应用效率所需的基本知识和技能。通过深入了解 Vuex，开发者将获得构建可扩展、可维护和响应迅速的 Web 应用所需的工具，使其能够无缝地适应现代
    Web 开发环境中动态变化的需求。'
- en: Introduction to Vuex
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Vuex 简介
- en: 'The "State Management with Vuex" module in the book "Vue.js Essentials: For
    Responsive Web Development" initiates a comprehensive exploration with the section
    titled "Introduction to Vuex." This segment introduces Vuex as a state management
    library specifically designed for Vue.js applications. Vuex plays a pivotal role
    in maintaining a centralized state, facilitating efficient data management and
    synchronization across components.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '书籍《Vue.js Essentials: For Responsive Web Development》中的“State Management with
    Vuex”模块，通过标题为“Vuex 简介”的章节开始了全面的探索。本部分介绍了 Vuex，作为一个专为 Vue.js 应用设计的状态管理库。Vuex 在维持集中式状态方面起着至关重要的作用，促进了跨组件的数据管理和同步。'
- en: // main.js
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: // main.js
- en: import Vue from 'vue';
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: import Vue from 'vue';
- en: import App from './App.vue';
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: import App from './App.vue';
- en: import Vuex from 'vuex';
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: import Vuex from 'vuex';
- en: Vue.use(Vuex);
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.use(Vuex);
- en: const store = new Vuex.Store({
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: const store = new Vuex.Store({
- en: 'state: {'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 'state: {'
- en: // Initial state properties
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: // 初始状态属性
- en: 'counter: 0'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 'counter: 0'
- en: '},'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'mutations: {'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 'mutations: {'
- en: // Mutations for state modifications
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: // 用于状态修改的 mutations
- en: increment(state) {
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: increment(state) {
- en: state.counter++;
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: state.counter++;
- en: '}'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '},'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'actions: {'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 'actions: {'
- en: // Actions for asynchronous operations
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: // 异步操作的 actions
- en: incrementAsync({ commit }) {
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: incrementAsync({ commit }) {
- en: setTimeout(() => {
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: setTimeout(() => {
- en: commit('increment');
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: commit('increment');
- en: '}, 1000);'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '}, 1000);'
- en: '}'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '},'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'getters: {'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 'getters: {'
- en: // Getters for computed properties based on state
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: // 基于状态的计算属性的获取器
- en: 'doubleCounter: state => state.counter * 2'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 'doubleCounter: state => state.counter * 2'
- en: '}'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '});'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: new Vue({
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: new Vue({
- en: 'render: h => h(App),'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 'render: h => h(App),'
- en: store
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: store
- en: '}).$mount(''#app'');'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '}).$mount(''#app'');'
- en: The code snippet showcases the foundational setup of Vuex within a Vue.js application.
    The Vuex store is instantiated with initial state properties, mutations for state
    modifications, actions for asynchronous operations, and getters for computed properties.
    This structured architecture forms the backbone of Vuex, ensuring organized and
    scalable state management.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码展示了 Vuex 在 Vue.js 应用中的基础设置。Vuex 存储实例化时具有初始状态属性、用于状态修改的 mutations、用于异步操作的
    actions 以及用于计算属性的 getters。这个结构化的架构构成了 Vuex 的核心，确保了有序和可扩展的状态管理。
- en: 'Centralized State Management: Vuex in Action'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 集中式状态管理：Vuex 在实际应用中的作用
- en: Vuex employs a centralized store to manage the state of an entire Vue.js application.
    This centralized approach facilitates the sharing of state across components,
    eliminating the need for complex prop-passing between nested components.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Vuex 采用集中式存储来管理整个 Vue.js 应用的状态。这种集中式方法方便了跨组件共享状态，避免了复杂的嵌套组件间的 props 传递。
- en: // Counter.vue
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: // Counter.vue
- en: <template>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: '<p>Counter: {{ counter }}</p>'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '<p>计数器: {{ counter }}</p>'
- en: <button @click="increment">Increment</button>
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="increment">增加</button>
- en: <button @click="incrementAsync">Increment Async</button>
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="incrementAsync">异步增加</button>
- en: '<p>Double Counter: {{ doubleCounter }}</p>'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '<p>双倍计数器: {{ doubleCounter }}</p>'
- en: </div>
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: 'computed: {'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 'computed: {'
- en: counter() {
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: counter() {
- en: return this.$store.state.counter;
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: return this.$store.state.counter;
- en: '},'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: doubleCounter() {
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: doubleCounter() {
- en: return this.$store.getters.doubleCounter;
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: return this.$store.getters.doubleCounter;
- en: '}'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '},'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: increment() {
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: increment() {
- en: this.$store.commit('increment');
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: this.$store.commit('increment');
- en: '},'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: incrementAsync() {
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: incrementAsync() {
- en: this.$store.dispatch('incrementAsync');
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: this.$store.dispatch('incrementAsync');
- en: '}'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In the Counter component, the state is accessed through the computed properties
    counter and doubleCounter. Mutations are triggered using this.$store.commit in
    response to user interactions, ensuring a straightforward approach to state modifications.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Counter 组件中，通过计算属性 counter 和 doubleCounter 访问状态。mutations 会在用户交互时通过 this.$store.commit
    被触发，从而简化了状态修改的方式。
- en: 'Actions for Asynchronous Operations: Vuex Flexibility'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 异步操作的动作：Vuex的灵活性
- en: Vuex introduces the concept of actions, providing a flexible mechanism for handling
    asynchronous operations. In the example, the incrementAsync action introduces
    a one-second delay before committing the increment mutation.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Vuex引入了“动作”概念，提供了一种灵活的机制来处理异步操作。在示例中，incrementAsync动作在提交增量突变之前引入了一个一秒钟的延迟。
- en: // main.js
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: // main.js
- en: 'actions: {'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 'actions: {'
- en: incrementAsync({ commit }) {
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: incrementAsync({ commit }) {
- en: setTimeout(() => {
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: setTimeout(() => {
- en: commit('increment');
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: commit('increment');
- en: '}, 1000);'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '}, 1000);'
- en: '}'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: This asynchronous capability allows developers to manage complex state modifications,
    such as API calls or asynchronous computations, within the Vuex store.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这种异步能力使得开发者能够在Vuex store中管理复杂的状态修改，如API调用或异步计算。
- en: '"Introduction to Vuex" in the "State Management with Vuex" module initiates
    developers into the realm of centralized state management in Vue.js applications.
    Vuex serves as a robust solution for handling state complexities, providing an
    organized structure for mutations, actions, and getters. The code examples illustrate
    the seamless integration of Vuex within Vue.js components, demonstrating its ability
    to streamline state management and enhance overall application structure.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: “Vuex介绍”这一章节在《使用Vuex进行状态管理》模块中，带领开发者进入Vue.js应用中的集中式状态管理领域。Vuex作为一种强大的解决方案，用于处理状态复杂性，提供了一个有组织的结构来管理突变、动作和获取器。代码示例展示了Vuex在Vue.js组件中的无缝集成，演示了其简化状态管理并增强整体应用结构的能力。
- en: Setting Up and Configuring Vuex
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置和配置Vuex
- en: 'The "State Management with Vuex" module in the book "Vue.js Essentials: For
    Responsive Web Development" takes a foundational step forward with the section
    titled "Setting Up and Configuring Vuex." This segment guides developers through
    the essential process of incorporating and configuring Vuex, Vue.js'' state management
    library, providing a centralized store for maintaining application-wide state.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '《Vue.js Essentials: For Responsive Web Development》一书中的“使用Vuex进行状态管理”模块，通过“设置和配置Vuex”这一章节迈出了基础性的一步。该章节引导开发者完成将Vuex这一Vue.js的状态管理库集成和配置的必要步骤，为维护应用全局状态提供了一个集中式的存储。'
- en: // main.js
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: // main.js
- en: import Vue from 'vue';
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: import Vue from 'vue';
- en: import App from './App.vue';
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: import App from './App.vue';
- en: import Vuex from 'vuex';
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: import Vuex from 'vuex';
- en: Vue.use(Vuex);
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.use(Vuex);
- en: const store = new Vuex.Store({
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: const store = new Vuex.Store({
- en: // Vuex store configuration
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: // Vuex store配置
- en: '});'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: new Vue({
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: new Vue({
- en: 'render: h => h(App),'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 'render: h => h(App),'
- en: store
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: store
- en: '}).$mount(''#app'');'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '}).$mount(''#app'');'
- en: In the code snippet, Vuex is integrated into the Vue.js application through
    Vue.use(Vuex). A Vuex store instance is created, serving as the centralized hub
    for managing the application's state. This foundational setup establishes the
    framework for structured state management in Vue.js.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，Vuex通过Vue.use(Vuex)集成到Vue.js应用中。创建了一个Vuex store实例，作为管理应用状态的集中式枢纽。这个基础设置为Vue.js中的结构化状态管理奠定了框架。
- en: 'Defining State in Vuex: Vue.js Centralized State Repository'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Vuex 中定义状态：Vue.js 集中式状态库
- en: The Vuex store holds the application state, providing a single source of truth
    accessible to all components. State properties are defined within the state object,
    offering a clear and organized representation of the application's data.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Vuex 存储持有应用程序的状态，提供一个所有组件都可以访问的唯一真实数据源。状态属性定义在 state 对象中，清晰地组织和表示了应用程序的数据。
- en: // main.js
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: // main.js
- en: const store = new Vuex.Store({
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: const store = new Vuex.Store({
- en: 'state: {'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 'state: {'
- en: // Initial state properties
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: // 初始状态属性
- en: 'user: null,'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 'user: null,'
- en: 'isLoggedIn: false'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 'isLoggedIn: false'
- en: '}'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '});'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: In this example, the state object includes properties such as user and isLoggedIn.
    These properties form the core of the application's state and can be accessed
    or modified by components throughout the Vue.js application.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，state 对象包含了如 user 和 isLoggedIn 这样的属性。这些属性构成了应用程序状态的核心，可以在 Vue.js 应用程序中的各个组件中访问或修改。
- en: 'Modifying State with Mutations: Vuex Predictable State Changes'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Mutation 修改状态：Vuex 可预测的状态变更
- en: Mutations are the primary means of modifying the state in Vuex. They ensure
    a predictable and traceable pattern for state changes, allowing developers to
    understand how and when the state is altered.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Mutation 是在 Vuex 中修改状态的主要手段。它们确保了状态变更的可预测性和可追踪性，使开发者能够理解状态是如何以及何时发生变化的。
- en: // main.js
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: // main.js
- en: const store = new Vuex.Store({
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: const store = new Vuex.Store({
- en: 'state: {'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 'state: {'
- en: 'user: null,'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 'user: null,'
- en: 'isLoggedIn: false'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 'isLoggedIn: false'
- en: '},'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'mutations: {'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 'mutations: {'
- en: // Mutation for setting user and login status
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: // 用于设置用户和登录状态的 Mutation
- en: setUser(state, user) {
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: setUser(state, user) {
- en: state.user = user;
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: state.user = user;
- en: state.isLoggedIn = !!user;
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: state.isLoggedIn = !!user;
- en: '}'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '});'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: The setUser mutation illustrates how the state is modified in response to a
    specific action. By calling this mutation, the user and login status properties
    are updated within the Vuex store.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: setUser mutation 演示了如何根据特定的操作来修改状态。通过调用此 mutation，用户和登录状态属性会在 Vuex 存储中更新。
- en: 'Integrating Vuex with Vue.js Components: Accessing State in Components'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Vuex 与 Vue.js 组件集成：在组件中访问状态
- en: Once Vuex is set up and configured, Vue.js components can seamlessly integrate
    with the centralized state. Components gain access to the state through computed
    properties, enabling dynamic rendering based on the application's data.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦配置好 Vuex，Vue.js 组件可以与集中式状态无缝集成。组件通过计算属性访问状态，从而根据应用程序的数据动态渲染。
- en: // UserProfile.vue
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: // UserProfile.vue
- en: <template>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h2>User Profile</h2>
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: <h2>用户资料</h2>
- en: '<p>User: {{ user }}</p>'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '<p>用户: {{ user }}</p>'
- en: '<p>Logged In: {{ isLoggedIn }}</p>'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '<p>已登录: {{ isLoggedIn }}</p>'
- en: </div>
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: 'computed: {'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 'computed: {'
- en: user() {
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: user() {
- en: return this.$store.state.user;
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: return this.$store.state.user;
- en: '},'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: isLoggedIn() {
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: isLoggedIn() {
- en: return this.$store.state.isLoggedIn;
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: return this.$store.state.isLoggedIn;
- en: '}'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In the UserProfile component, computed properties user and isLoggedIn access
    the state properties from the Vuex store, facilitating dynamic content based on
    the centralized state.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在 UserProfile 组件中，计算属性 user 和 isLoggedIn 访问来自 Vuex 存储的状态属性，基于集中式状态动态渲染内容。
- en: '"Setting Up and Configuring Vuex" in the "State Management with Vuex" module
    lays the groundwork for robust state management in Vue.js applications. Developers
    are guided through the process of integrating and configuring Vuex, defining the
    application state, and utilizing mutations to modify the state predictably. The
    seamless integration of Vuex with Vue.js components demonstrates its effectiveness
    in providing a centralized state repository, simplifying state management and
    enhancing the overall structure of Vue.js applications.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 《"设置和配置 Vuex"》在《"使用 Vuex 进行状态管理"》模块中为 Vue.js 应用程序中的健壮状态管理奠定了基础。开发人员将学习如何集成和配置
    Vuex，定义应用程序状态，并利用变更来可预测地修改状态。Vuex 与 Vue.js 组件的无缝集成展示了其在提供集中式状态存储库、简化状态管理和增强 Vue.js
    应用程序整体结构方面的有效性。
- en: State, Mutations, and Actions
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 状态、变更和动作
- en: 'The "State Management with Vuex" module in the book "Vue.js Essentials: For
    Responsive Web Development" delves into the core concepts of state management
    with the section titled "State, Mutations, and Actions." This segment introduces
    the foundational triad of Vuex, comprising state, mutations, and actions, to maintain
    a centralized and controlled state in Vue.js applications.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '书籍《Vue.js Essentials: For Responsive Web Development》中的《"使用 Vuex 进行状态管理"》模块深入探讨了状态管理的核心概念，其中有一部分叫做《状态、变更和动作》。这一部分介绍了
    Vuex 的基础三要素——状态、变更和动作——用于在 Vue.js 应用程序中维护一个集中式和可控的状态。'
- en: // main.js
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: // main.js
- en: import Vue from 'vue';
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: import Vue from 'vue';
- en: import App from './App.vue';
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: import App from './App.vue';
- en: import Vuex from 'vuex';
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: import Vuex from 'vuex';
- en: Vue.use(Vuex);
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.use(Vuex);
- en: const store = new Vuex.Store({
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: const store = new Vuex.Store({
- en: 'state: {'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 'state: {'
- en: // Initial state properties
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: // 初始状态属性
- en: 'counter: 0'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 'counter: 0'
- en: '},'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'mutations: {'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 'mutations: {'
- en: // Mutations for state modifications
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: // 用于状态修改的变更
- en: increment(state) {
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: increment(state) {
- en: state.counter++;
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: state.counter++;
- en: '}'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '},'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'actions: {'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 'actions: {'
- en: // Actions for asynchronous operations
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: // 用于异步操作的动作
- en: incrementAsync({ commit }) {
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: incrementAsync({ commit }) {
- en: setTimeout(() => {
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: setTimeout(() => {
- en: commit('increment');
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: commit('increment');
- en: '}, 1000);'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '}, 1000);'
- en: '}'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '});'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: In the code snippet, the Vuex store is configured with an initial state property
    counter, a mutation increment for state modification, and an action incrementAsync
    for handling asynchronous operations. This structured setup embodies the triad
    of state, mutations, and actions in Vuex.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码示例中，Vuex 存储被配置为具有初始状态属性 counter、用于修改状态的变更 increment 和处理异步操作的动作 incrementAsync。这种结构化设置体现了
    Vuex 中状态、变更和动作的三要素。
- en: 'State: Vue.js Single Source of Truth'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 状态：Vue.js 单一数据源
- en: State in Vuex represents the application's data, and it is maintained as a single
    source of truth. The state is defined within the state object and is accessed
    by Vue.js components through computed properties or methods.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Vuex 中的 State 代表应用程序的数据，并作为单一的数据源进行维护。State 定义在 state 对象内，并通过 Vue.js 组件通过计算属性或方法进行访问。
- en: // Counter.vue
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: // Counter.vue
- en: <template>
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: '<p>Counter: {{ counter }}</p>'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '<p>计数器: {{ counter }}</p>'
- en: <button @click="increment">Increment</button>
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="increment">递增</button>
- en: <button @click="incrementAsync">Increment Async</button>
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="incrementAsync">异步递增</button>
- en: </div>
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: 'computed: {'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 'computed: {'
- en: counter() {
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: counter() {
- en: return this.$store.state.counter;
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: return this.$store.state.counter;
- en: '}'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '},'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: increment() {
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: increment() {
- en: this.$store.commit('increment');
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: this.$store.commit('increment');
- en: '},'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: incrementAsync() {
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: incrementAsync() {
- en: this.$store.dispatch('incrementAsync');
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: this.$store.dispatch('incrementAsync');
- en: '}'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In the Counter component, the state property counter is accessed through a computed
    property, enabling dynamic rendering based on the state. Mutations are triggered
    through the commit method, ensuring controlled state modifications.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Counter 组件中，state 属性 counter 通过计算属性进行访问，允许根据 state 动态渲染。通过 commit 方法触发 mutations，确保受控的状态修改。
- en: 'Mutations: Vue.js Controlled State Modifications'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 'Mutations: Vue.js 受控的状态修改'
- en: Mutations in Vuex are responsible for modifying the state. They provide a controlled
    and predictable way to change the state, ensuring that state modifications follow
    a clear and traceable pattern.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: Vuex 中的 Mutations 负责修改 state。它们提供了一种受控且可预测的方式来改变 state，确保 state 的修改遵循明确且可追踪的模式。
- en: // main.js
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: // main.js
- en: const store = new Vuex.Store({
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: const store = new Vuex.Store({
- en: 'mutations: {'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 'mutations: {'
- en: increment(state) {
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: increment(state) {
- en: state.counter++;
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: state.counter++;
- en: '}'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '});'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: The increment mutation in the example increments the counter state property
    by one. Mutations are invoked by components through the commit method, maintaining
    a structured and controlled flow of state modifications.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 示例中的 increment mutation 将 counter 状态属性递增 1。通过 commit 方法调用 mutations，从而保持 state
    修改的结构化和受控流动。
- en: 'Actions: Asynchronous Operations in Vue.js State Management'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 'Actions: Vue.js 状态管理中的异步操作'
- en: Actions in Vuex handle asynchronous operations and serve as a bridge between
    components and mutations. They allow developers to perform asynchronous tasks,
    such as API calls, before committing mutations to modify the state.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: Vuex 中的 Actions 处理异步操作，并作为组件和 mutations 之间的桥梁。它们允许开发者在提交 mutations 修改 state
    之前执行异步任务，如 API 调用。
- en: // main.js
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: // main.js
- en: const store = new Vuex.Store({
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: const store = new Vuex.Store({
- en: 'actions: {'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 'actions: {'
- en: incrementAsync({ commit }) {
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: incrementAsync({ commit }) {
- en: setTimeout(() => {
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: setTimeout(() => {
- en: commit('increment');
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: commit('increment');
- en: '}, 1000);'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '}, 1000);'
- en: '}'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '});'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: In the example, the incrementAsync action introduces a one-second delay before
    committing the increment mutation. This asynchronous capability enhances Vue.js
    state management, accommodating complex operations seamlessly.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，incrementAsync动作引入了一个秒级延迟，之后再提交增量突变。这种异步能力增强了Vue.js的状态管理，能无缝支持复杂操作。
- en: '"State, Mutations, and Actions" in the "State Management with Vuex" module
    unveils the core triad of Vuex that forms the backbone of controlled state management
    in Vue.js applications. The structured setup of state, mutations, and actions
    ensures a clear and organized approach to managing application data. Through detailed
    code examples, developers gain a comprehensive understanding of how to leverage
    this triad effectively, achieving controlled and efficient state management in
    Vue.js applications.'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 《Vuex状态管理》模块中的“状态、突变和动作”揭示了Vuex的核心三位一体，它构成了Vue.js应用程序中受控状态管理的骨干。状态、突变和动作的结构化设置确保了管理应用数据时清晰和有组织的方法。通过详细的代码示例，开发者能全面了解如何有效地利用这三位一体，实现在Vue.js应用程序中的受控和高效的状态管理。
- en: Modules in Vuex
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Vuex中的模块
- en: 'The "State Management with Vuex" module in the book "Vue.js Essentials: For
    Responsive Web Development" advances into a more sophisticated realm with the
    section titled "Modules in Vuex." This segment introduces the concept of modules,
    empowering developers to scale and organize state management in Vue.js applications
    with a modular and separation of concerns approach.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '《Vuex状态管理》模块在《Vue.js Essentials: For Responsive Web Development》一书中，随着“Vuex中的模块”章节的推进，进入了更为复杂的领域。该章节介绍了模块的概念，使得开发者能够通过模块化和关注点分离的方式扩展和组织Vue.js应用程序中的状态管理。'
- en: // store/index.js
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: // store/index.js
- en: import Vue from 'vue';
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 从'vue'导入Vue；
- en: import Vuex from 'vuex';
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 从'vuex'导入Vuex；
- en: import userModule from './modules/userModule';
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 从'./modules/userModule'导入userModule；
- en: import cartModule from './modules/cartModule';
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 从'./modules/cartModule'导入cartModule；
- en: Vue.use(Vuex);
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.use(Vuex);
- en: const store = new Vuex.Store({
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: const store = new Vuex.Store({
- en: 'modules: {'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 模块：{
- en: 'user: userModule,'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 用户：userModule，
- en: 'cart: cartModule'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车：cartModule
- en: '}'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '});'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: export default store;
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: export default store；
- en: In the code snippet, the main Vuex store is configured to include modules for
    managing user-related state (userModule) and cart-related state (cartModule).
    This modular structure enhances maintainability and organization within the Vue.js
    application.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，主Vuex store被配置为包括用于管理与用户相关的状态（userModule）和与购物车相关的状态（cartModule）的模块。这样的模块化结构增强了Vue.js应用程序的可维护性和组织性。
- en: 'Creating a User Module: Vue.js Modularity in Action'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个用户模块：Vue.js模块化的实践
- en: A user module in Vuex encapsulates state, mutations, actions, and getters related
    to user-specific data. This modularization ensures a clear separation of concerns,
    making the codebase more maintainable and scalable.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: Vuex中的用户模块封装了与用户相关的数据的状态、突变、动作和获取器。这样的模块化确保了关注点的清晰分离，使得代码库更具可维护性和可扩展性。
- en: // store/modules/userModule.js
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: // store/modules/userModule.js
- en: const userModule = {
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: const userModule = {
- en: 'state: {'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 状态：{
- en: 'user: null,'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 用户：null，
- en: 'isLoggedIn: false'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 'isLoggedIn: false'
- en: '},'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'mutations: {'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 'mutations: {'
- en: setUser(state, user) {
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: setUser(state, user) {
- en: state.user = user;
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: state.user = user;
- en: state.isLoggedIn = !!user;
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: state.isLoggedIn = !!user;
- en: '}'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '},'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'actions: {'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 'actions: {'
- en: loginUser({ commit }, user) {
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: loginUser({ commit }, user) {
- en: // Logic for user login
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: // 用户登录的逻辑
- en: commit('setUser', user);
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: commit('setUser', user);
- en: '}'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '},'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'getters: {'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 'getters: {'
- en: 'getUsername: state => state.user ? state.user.username : ''Guest'''
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 'getUsername: state => state.user ? state.user.username : ''访客'''
- en: '}'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: export default userModule;
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: export default userModule;
- en: In the userModule, state properties, mutations, actions, and getters specific
    to user-related functionality are defined. The encapsulation of these concerns
    within a module promotes a cleaner and more organized Vue.js codebase.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在 userModule 中，定义了与用户相关的状态属性、mutations、actions 和 getters。这种将关注点封装在一个模块中的方式，促进了
    Vue.js 代码库的清晰与组织。
- en: 'Cart Module for Shopping Cart State: Vue.js Separation of Concerns'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车模块：Vue.js 中购物车状态的关注点分离
- en: A shopping cart module illustrates the versatility of Vuex modules. The cart
    module manages state, mutations, actions, and getters related to shopping cart
    functionality, ensuring a focused and modular approach to state management.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车模块展示了 Vuex 模块的多样性。该模块管理与购物车功能相关的状态、mutations、actions 和 getters，确保了一个聚焦且模块化的状态管理方法。
- en: // store/modules/cartModule.js
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: // store/modules/cartModule.js
- en: const cartModule = {
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: const cartModule = {
- en: 'state: {'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 'state: {'
- en: 'items: [],'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 'items: [],'
- en: 'total: 0'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 'total: 0'
- en: '},'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'mutations: {'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 'mutations: {'
- en: addItem(state, item) {
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: addItem(state, item) {
- en: state.items.push(item);
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: state.items.push(item);
- en: state.total += item.price;
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: state.total += item.price;
- en: '}'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '},'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'actions: {'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 'actions: {'
- en: addToCart({ commit }, item) {
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: addToCart({ commit }, item) {
- en: // Logic for adding item to cart
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: // 购物车添加商品的逻辑
- en: commit('addItem', item);
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: commit('addItem', item);
- en: '}'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '},'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'getters: {'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 'getters: {'
- en: 'getCartItems: state => state.items,'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 'getCartItems: state => state.items,'
- en: 'getCartTotal: state => state.total'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 'getCartTotal: state => state.total'
- en: '}'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: export default cartModule;
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: export default cartModule;
- en: The cart module encapsulates the logic for managing items in the shopping cart,
    providing a dedicated space for cart-related state and functionality in the Vue.js
    application.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车模块封装了管理购物车中商品的逻辑，在 Vue.js 应用中提供了一个专门用于购物车状态和功能的空间。
- en: 'Organizing State with Module Structure: Vue.js Application Architecture'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 使用模块结构组织状态：Vue.js 应用架构
- en: With modules, the structure of the Vuex store becomes more organized and scalable.
    Modules facilitate the separation of concerns, allowing developers to focus on
    specific features or functionalities within the Vue.js application.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 使用模块后，Vuex store 的结构变得更加有组织且具有可扩展性。模块有助于关注点的分离，使开发者能够专注于 Vue.js 应用中的特定功能或特性。
- en: // App.vue
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: // App.vue
- en: <template>
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h1>Vue.js Shopping App</h1>
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: <h1>Vue.js 购物应用</h1>
- en: <user-profile></user-profile>
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: <user-profile></user-profile>
- en: <shopping-cart></shopping-cart>
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: <shopping-cart></shopping-cart>
- en: </div>
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: import userProfile from './components/UserProfile.vue';
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: import userProfile from './components/UserProfile.vue';
- en: import shoppingCart from './components/ShoppingCart.vue';
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: import shoppingCart from './components/ShoppingCart.vue';
- en: export default {
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: 'components: {'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 组件：{
- en: '''user-profile'': userProfile,'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '''user-profile'': userProfile,'
- en: '''shopping-cart'': shoppingCart'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '''shopping-cart'': shoppingCart'
- en: '}'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In the App component, individual Vue.js components like user-profile and shopping-cart
    can be incorporated seamlessly. Each component can interact with the relevant
    module, promoting a modular and organized application architecture.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在App组件中，可以无缝地整合各个Vue.js组件，如user-profile和shopping-cart。每个组件都可以与相关的模块进行交互，从而促进模块化和组织良好的应用架构。
- en: '"Modules in Vuex" within the "State Management with Vuex" module introduces
    the powerful concept of modularization in Vue.js state management. By encapsulating
    state, mutations, actions, and getters within modules, developers can enhance
    organization, scalability, and separation of concerns in their Vue.js applications.
    The detailed code examples showcase the practical implementation of modules, empowering
    developers to create well-structured and maintainable Vue.js codebases.'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '"Vuex中的模块"在"使用Vuex进行状态管理"模块中介绍了Vue.js状态管理中模块化的强大概念。通过将状态、变更、动作和获取器封装在模块内，开发者可以增强Vue.js应用的组织性、可扩展性和关注点分离。详细的代码示例展示了模块的实际应用，帮助开发者构建结构良好、易于维护的Vue.js代码库。'
