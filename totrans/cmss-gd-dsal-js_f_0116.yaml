- en: Overlapping Subproblems
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 重叠子问题
- en: 'The Fibonacci sequence is a mathematical sequence of numbers that goes like
    this until infinity:'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 斐波那契数列是一个数学数列，延续至无穷大：
- en: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55…
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55…
- en: This sequence begins with the numbers 0 and 1, and each subsequent number is
    the sum of the previous two numbers of the sequence. For example, the number 55
    was computed because it is the sum of the previous two numbers, which are 21 and
    34.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这个数列以0和1开始，每个后续的数字是前两个数字的总和。例如，数字55是因为它是前两个数字21和34的总和。
- en: The following JavaScript function returns the Nth number in the Fibonacci sequence.
    For example, if we pass the number 10 to the function, it will return 55, as 55
    is the tenth number in the series. (The 0 is considered the 0th number in the
    series.)
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下JavaScript函数返回斐波那契数列中的第N个数字。例如，如果我们将数字10传递给函数，它将返回55，因为55是该系列中的第十个数字。（0被视为该系列中的第0个数字。）
- en: '| ​  | `function` fib(n) { |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` fib(n) { |'
- en: '| ​  | `if` (n === 0 || n === 1) { |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (n === 0 || n === 1) { |'
- en: '| ​  | `return` n; |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` n; |'
- en: '| ​  | } |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return` fib(n - 2) + fib(n - 1); |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` fib(n - 2) + fib(n - 1); |'
- en: '| ​  | } |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 'The key line in this function is the following:'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这个函数中的关键行如下：
- en: '| ​  | `return` fib(n - 2) + fib(n - 1); |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` fib(n - 2) + fib(n - 1); |'
- en: This line sums the previous two numbers in the Fibonacci series. It’s a beautiful
    recursive function.
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这一行将斐波那契数列中的前两个数字相加。这是一个美丽的递归函数。
- en: However, alarm bells should be going off in your head right now because our
    function calls itself twice.
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，你现在脑海中应该响起警报，因为我们的函数自我调用了两次。
- en: 'Let’s take the computation of the sixth Fibonacci number, for example. The
    function `fib(6)` makes a call to both `fib(4)` and `fib(5)`，as shown in the following
    diagram:'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以计算第六个斐波那契数为例。函数 `fib(6)` 调用了 `fib(4)` 和 `fib(5)`，如下面的图所示：
- en: '![images/dynamic_programming/simple_fib_6.png](images/dynamic_programming/simple_fib_6.png)'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/dynamic_programming/simple_fib_6.png](images/dynamic_programming/simple_fib_6.png)'
- en: As we’ve seen, a function calling itself twice can easily lead us down the road
    to `O(2^N)`。Indeed, all the recursive calls made by `fib(6)` are shown in the
    [diagram](#fig.ch12.complete_fib_6).
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 正如我们所见，一个函数自我调用两次，容易导致 `O(2^N)` 的情况。实际上，`fib(6)` 所做的所有递归调用在 [图示](#fig.ch12.complete_fib_6)
    中都有显示。
- en: '![images/dynamic_programming/complete_fib_6.png](images/dynamic_programming/complete_fib_6.png)'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/dynamic_programming/complete_fib_6.png](images/dynamic_programming/complete_fib_6.png)'
- en: You’ve got to admit, `O(2^N)` can look pretty scary.
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你得承认，`O(2^N)` 看起来确实有点吓人。
- en: While one simple change worked to optimize the first example in this chapter,
    optimizing our Fibonacci sequence isn’t as simple.
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 虽然一个简单的改变成功优化了本章的第一个例子，但优化我们的斐波那契数列并不那么简单。
- en: And that’s because there isn’t just one single piece of data we can save in
    a variable. We need to calculate both `fib(n - 2)` and `fib(n - 1)` (as each Fibonacci
    number is the sum of those two numbers), and storing the result of one won’t alone
    give us the result for the other.
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这并不是因为我们只能在一个变量中保存一段数据。我们需要同时计算 `fib(n - 2)` 和 `fib(n - 1)`（因为每个斐波那契数字是这两个数字的总和），仅存储一个结果并不能给我们另一个的结果。
- en: This is a case of what computer scientists call overlapping subproblems. Let’s
    unpack that term.
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是计算机科学家所称的重叠子问题的一个案例。让我们深入探讨一下这个术语。
- en: When a problem is solved by solving smaller versions of the same problem, the
    smaller problem is called a subproblem. This concept isn’t new—we’ve been dealing
    with it frequently throughout our discussion of recursion. In the case of the
    Fibonacci sequence, we compute each number by first computing the smaller numbers
    in the sequence. The computations of these smaller numbers are the subproblems.
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当一个问题通过解决同一问题的小版本来解决时，小问题被称为子问题。这个概念并不新颖——在我们讨论递归时经常会遇到。在斐波那契数列的案例中，我们通过先计算序列中的较小数字来计算每个数字。这些较小数字的计算就是子问题。
- en: What makes these subproblems overlapping, though, is the fact that `fib(n -
    2)` and `fib(n - 1)` end up calling many of the same functions as each other.
    Specifically, `fib(n - 1)` ends up making some of the very same calculations already
    made by `fib(n - 2)`. For example, you can see in the previous diagram that `fib(5)`
    calls `fib(3)` even though `fib(4)` has itself already done so. Many other calls
    are duplicated too.
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 使这些子问题重叠的原因在于，`fib(n - 2)`和`fib(n - 1)`最终会调用许多相同的函数。具体来说，`fib(n - 1)`会进行一些`fib(n
    - 2)`已经做过的相同计算。例如，在之前的图中可以看到，`fib(5)`调用了`fib(3)`，尽管`fib(4)`已经调用过它。还有许多其他调用也是重复的。
- en: Well, it seems that we’re at a dead end. Our Fibonacci example requires us to
    make many overlapping function calls, and our algorithm oozes along at a pace
    of `O(2^N)`. There’s just nothing we can do.
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 好吧，看起来我们已经走到了死胡同。我们的斐波那契示例需要进行许多重叠的函数调用，而我们的算法以`O(2^N)`的速度缓慢推进。我们真的无能为力。
- en: Or is there?
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 或者说并非如此？
