- en: Chapter 6
  id: totrans-0
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第六章
- en: Coding the Document Object Model
  id: totrans-1
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 编写文档对象模型代码
- en: IN THIS CHAPTER
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 本章内容
- en: '![Bullet](images/check.png) Understanding objects'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) 理解对象'
- en: '![Bullet](images/check.png) Messing with object properties and methods'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) 操作对象属性和方法'
- en: '![Bullet](images/check.png) Taking a deep dive into the Document Object Model'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) 深入探索文档对象模型'
- en: '![Bullet](images/check.png) Figuring out events'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) 理解事件'
- en: 'I’ve talked a lot of JavaScript over the past few chapters, but in a very real
    sense all that has been just the programming equivalent of noshing on a few appetizers.
    Now it’s time to sit down for the main course: programming the Document Object
    Model.'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在过去几章中我讲了很多 JavaScript，但从某种意义上说，这些内容只是编程的开胃小菜。现在是时候开始正餐了：编写文档对象模型代码。
- en: 'In this chapter, you explore the fascinating world of the Document Object Model.
    You learn lots of powerful coding techniques that enable you to make your web
    pages do almost anything you want them to do. You learn, too, that this is where
    web coding becomes fun and maybe just a little addictive (in a good way, I promise).  ##
    Getting Familiar with Objects'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在本章中，你将探索文档对象模型的迷人世界。你将学习许多强大的编码技巧，使你能够让网页执行几乎任何你想要的操作。你也会了解到，这是网页编码变得有趣并且可能有点上瘾（我保证是好的一种上瘾）的地方。##
    熟悉对象
- en: 'To write truly useful scripts, you have to do what JavaScript was designed
    to do from the start: Manipulate the web page that it’s displaying. That’s what
    JavaScript is all about, and that manipulation can come in many different forms:'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要编写真正有用的脚本，你必须做的是 JavaScript 从一开始就设计的事情：操作它所显示的网页。这就是 JavaScript 的全部内容，这种操作可以以许多不同的形式出现：
- en: Add text and HTML attributes to an `element`.
  id: totrans-10
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 向 `element` 添加文本和 HTML 属性。
- en: Modify a CSS `property` of a class or other selector.
  id: totrans-11
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 修改类或其他选择器的 CSS `property`。
- en: Store some data in the browser’s internal `storage`.
  id: totrans-12
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 将一些数据存储在浏览器的内部 `storage` 中。
- en: Validate a `form`’s data before submitting it.
  id: totrans-13
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 在提交 `form` 数据之前进行验证。
- en: The bold items in this list are examples of the “things” that you can work with,
    and they’re special for no other reason than they’re programmable. In JavaScript
    parlance, these “programmable things” are called `objects`.
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 该列表中的粗体项是你可以操作的“事物”示例，它们之所以特殊，只因为它们是可编程的。在 JavaScript 术语中，这些“可编程的事物”被称为 `objects`。
- en: 'You can work with objects in JavaScript in any of the following three ways:'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你可以通过以下三种方式之一来操作 JavaScript 中的对象：
- en: You can read and make changes to the object’s `properties`.
  id: totrans-16
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 你可以读取并修改对象的 `properties`。
- en: You can make the object perform a task by activating a `method` associated with
    the `object`.
  id: totrans-17
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 你可以通过激活与 `object` 相关的 `method` 来使对象执行任务。
- en: You can define a procedure that runs whenever a particular `event` happens to
    the `object`.
  id: totrans-18
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 你可以定义一个过程，当某个特定的 `event` 发生时，该过程会在 `object` 上运行。
- en: '### Working with object properties'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '### 操作对象属性'
- en: 'You refer to a property by using the syntax in the following generic expression:'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你可以通过以下通用表达式中的语法来引用一个属性：
- en: '`*object*.*property*`'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`*object*.*property*`'
- en: '`object`: The object that has the property'
  id: totrans-22
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`object`：具有该属性的对象'
- en: '`property`: The name of the property you want to work with'
  id: totrans-23
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`property`：你要操作的属性名称'
- en: 'For example, consider the following expression:'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，考虑以下表达式：
- en: '`document.location`'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`document.location`'
- en: This expression refers to the `document` object’s `location` property, which
    holds the address of the document currently displayed in the browser window. (In
    conversation, you’d pronounce this expression as “document dot location.”) The
    following code shows a simple one-line script that displays this property in the
    console, as shown in [Figure 6-1](#c06-fig-0001).
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 该表达式指的是 `document` 对象的 `location` 属性，它保存当前在浏览器窗口中显示的文档地址。（在对话中，你可以将这个表达式读作“document
    dot location”。）以下代码展示了一个简单的一行脚本，它将在控制台中显示这个属性，如[图 6-1](#c06-fig-0001)所示。
- en: '`console.log(document.location);`'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.log(document.location);`'
- en: '![A snapshot of the script displays the document.location property in a console
    message.](images/9781394263219-fg0601.png)'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![脚本快照显示 `document.location` 属性在控制台消息中的输出。](images/9781394263219-fg0601.png)'
- en: '[FIGURE 6-1:](#rc06-fig-0001) This script displays the `document.location`
    property in a console message.'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[图 6-1:](#rc06-fig-0001) 该脚本在控制台消息中显示`document.location`属性。'
- en: 'Because the property always contains a value, you’re free to use property expressions
    in just about any type of JavaScript statement and as an operand in a JavaScript
    expression. For example, the following statement assigns the current value of
    the `document.location` property to a variable named `currentUrl`:'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因为属性始终包含一个值，所以你可以在几乎任何类型的JavaScript语句中使用属性表达式，并将其作为操作数使用。例如，以下语句将`document.location`属性的当前值赋给名为`currentUrl`的变量：
- en: '`const currentUrl = document.location;`'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const currentUrl = document.location;`'
- en: 'Similarly, the following statement includes `document.location` as part of
    a string expression:'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 类似地，以下语句将`document.location`作为字符串表达式的一部分：
- en: '`const message = "The current address is " + document.location + ".";`'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const message = "当前地址是 " + document.location + "。";`'
- en: 'Some properties are `“read only,”` which means your code can only read the
    current value and can’t change it. However, many properties are `“read/write,”`
    which means you can also change their values. To change the value of a property,
    use the following generic syntax:'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 一些属性是`“只读”`，这意味着你的代码只能读取当前的值，不能更改它。然而，许多属性是`“读/写”`，意味着你也可以更改它们的值。要更改属性的值，请使用以下通用语法：
- en: '`object.property = value`'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`object.property = value`'
- en: 'Here’s what the various parts are:'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下是各部分的解释：
- en: '`object`: The object that has the property'
  id: totrans-37
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`object`：包含该属性的对象'
- en: '`property`: The name of the property you want to change'
  id: totrans-38
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`property`：你想要更改的属性名称'
- en: '`value`: A literal value (such as a string or number) or an expression that
    returns the value to which you want to set the property'
  id: totrans-39
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`value`：一个字面值（如字符串或数字）或一个返回你想要设置的属性值的表达式'
- en: 'Here’s an example:'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是一个示例：
- en: '`const newAddress = prompt("Enter the address you want to surf to:"); document.location
    = newAddress;`'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const newAddress = prompt("请输入你想要访问的网址："); document.location = newAddress;`'
- en: 'This script prompts the user for a web page address and stores the result in
    the `newAddress` variable. This value is then used to change the `document.location`
    property, which in this case tells the browser to open the specified address.  '
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这个脚本会提示用户输入一个网页地址，并将结果存储在`newAddress`变量中。然后，这个值被用来更改`document.location`属性，在本例中告诉浏览器打开指定的地址。
- en: 'To run a method, begin with the simplest case, which is a method that takes
    no arguments:'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要运行一个方法，从最简单的情况开始，即一个不需要任何参数的方法：
- en: '`object.method()`'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`object.method()`'
- en: 'Here’s what the various parts are:'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下是各部分的解释：
- en: '`object`: The object that has the method you want to work with'
  id: totrans-46
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`object`：包含你想要操作的方法的对象'
- en: '`method`: The name of the method you want to execute'
  id: totrans-47
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`method`：你想要执行的方法的名称'
- en: 'For example, consider the following statement:'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，考虑以下语句：
- en: '`history.back();`'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`history.back();`'
- en: This runs the `history` object’s `back()` method, which tells the browser to
    go back to the previously visited page.
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这将运行`history`对象的`back()`方法，该方法告诉浏览器返回到之前访问的页面。
- en: 'If a method requires arguments, you use the following generic syntax:'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果方法需要参数，你可以使用以下通用语法：
- en: '`object.method(argument1, argument2, …)`'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`object.method(argument1, argument2, …)`'
- en: 'For example, consider the `confirm()` method, used in the following statement,
    which takes a single argument — a string that specifies the text to display to
    the user:'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，考虑`confirm()`方法，在以下语句中使用，它接受一个参数——一个字符串，用于指定显示给用户的文本：
- en: '`confirm("Do you want to go back?")`'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`confirm("你想要返回吗？")`'
- en: 'Finally, as with properties, if the method returns a value, you can assign
    that value to a variable (as I do with the `confirm()` method in the earlier example)
    or you can incorporate the method into an expression.  '
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 最后，与属性一样，如果方法返回一个值，你可以将该值赋给一个变量（如我在前面示例中使用的`confirm()`方法），或者将方法嵌入到表达式中。
- en: 'Here’s some source code for a simple web page:'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是一个简单网页的源代码：
- en: '`<html lang="en"> <head> <title>So Many Kale Recipes</title> </head> <body>
    <header> <h1>Above and Beyond the Kale of Duty</h1> </header> <main> <p> Do you
    love to cook with <a href="kale.html">kale</a>? </p> </main> </body> </html>`'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<html lang="en"> <head> <title>So Many Kale Recipes</title> </head> <body>
    <header> <h1>Above and Beyond the Kale of Duty</h1> </header> <main> <p> 你喜欢用<a
    href="kale.html">甘蓝</a>做饭吗？ </p> </main> </body> </html>`'
- en: 检查此代码的一种方式是从层次结构的角度进行。这意味着`html`元素在某种意义上是最上层的元素，因为每个其他元素都包含在其中。下一层级包含`head`和`body`元素。`head`元素包含一个`title`元素，`title`元素包含文本`So
    Many Kale Recipes`。类似地，`body`元素包含一个`header`元素和一个`main`元素。
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 检查此代码的一种方式是从层次结构的角度进行。这意味着`html`元素在某种意义上是最上层的元素，因为每个其他元素都包含在其中。下一层级包含`head`和`body`元素。`head`元素包含一个`title`元素，`title`元素包含文本`So
    Many Kale Recipes`。类似地，`body`元素包含一个`header`元素和一个`main`元素。
- en: 层次结构通常在视觉形式上更易于理解，因此[图 6-2](#c06-fig-0002)将页面元素以层次结构方式呈现。
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 层次结构通常在视觉形式上更易于理解，因此[图 6-2](#c06-fig-0002)将页面元素以层次结构方式呈现。
- en: '![网页代码的流程图。它包括文档、元素、文本和属性。](images/9781394263219-fg0602.png)'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![网页代码的流程图。它包括文档、元素、文本和属性。](images/9781394263219-fg0602.png)'
- en: '[图 6-2:](#rc06-fig-0002) 网页代码的层次结构。'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[图 6-2:](#rc06-fig-0002) 网页代码的层次结构。'
- en: '![Remember](images/remember.png) 当谈到对象层次结构时，如果对象`P`包含对象`C`，则对象`P`被称为对象`C`的`parent`，而对象`C`被称为对象`P`的`child`。在[图
    6-2](#c06-fig-0002)中，箭头表示父子关系。此外，同一层级上的元素——例如`header`和`main`元素——被称为`siblings`。'
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![记住](images/remember.png) 当谈到对象层次结构时，如果对象`P`包含对象`C`，则对象`P`被称为对象`C`的`parent`，而对象`C`被称为对象`P`的`child`。在[图
    6-2](#c06-fig-0002)中，箭头表示父子关系。此外，同一层级上的元素——例如`header`和`main`元素——被称为`siblings`。'
- en: 您需要考虑几个关键点：
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 您需要考虑几个关键点：
- en: '[图 6-2](#c06-fig-0002)中的每个框表示一个对象。'
  id: totrans-64
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '[图 6-2](#c06-fig-0002)中的每个框表示一个对象。'
- en: '[图 6-2](#c06-fig-0002)中的每个对象都是三种类型之一：元素、文本或属性。'
  id: totrans-65
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '[图 6-2](#c06-fig-0002)中的每个对象都是三种类型之一：元素、文本或属性。'
- en: '[图 6-2](#c06-fig-0002)中的每个对象，无论其类型如何，都被称为`node`。'
  id: totrans-66
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '[图 6-2](#c06-fig-0002)中的每个对象，无论其类型如何，都被称为`node`。'
- en: 整个页面由`document`对象表示。
  id: totrans-67
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 整个页面由`document`对象表示。
- en: 因此，这种层次化的对象表示法被称为文档对象模型，通常称为DOM。DOM使您的JavaScript代码能够访问HTML文档的完整结构。## 在您的代码中指定元素
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因此，这种层次化的对象表示法被称为文档对象模型，通常称为DOM。DOM使您的JavaScript代码能够访问HTML文档的完整结构。## 在您的代码中指定元素
- en: 元素代表文档中的标签，因此您将在代码中不断使用它们。本节展示了几种引用一个或多个元素的方法。
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 元素代表文档中的标签，因此您将在代码中不断使用它们。本节展示了几种引用一个或多个元素的方法。
- en: '### 通过id指定元素'
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '### 通过id指定元素'
- en: 如果您希望在脚本中操作特定元素，可以通过首先使用`id`属性为其分配一个标识符来直接引用该元素：
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果您希望在脚本中操作特定元素，可以通过首先使用`id`属性为其分配一个标识符来直接引用该元素：
- en: '`<div id="kale-quotations">`'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<div id="kale-quotations">`'
- en: 完成后，您可以通过使用`document`对象的`getElementById()`方法在代码中引用该元素：
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 完成后，您可以通过使用`document`对象的`getElementById()`方法在代码中引用该元素：
- en: '`document.getElementById(*id*)`'
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`document.getElementById(*id*)`'
- en: '***注意：***`id`*是一个字符串，表示您想要操作的元素的`id`属性。'
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '***注意：***`id`*是一个字符串，表示您想要操作的元素的`id`属性。'
- en: 例如，以下语句返回对前一个`<div>`标签的引用（该标签的`id="kale-quotations"`）：
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，以下语句返回对前一个`<div>`标签的引用（该标签的`id="kale-quotations"`）：
- en: '`document.getElementById("kale-quotations")`'
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`document.getElementById("kale-quotations")`'
- en: '![Warning](images/warning.png) When you’re coding the `document` object, don’t
    put your `<script>` tag in the web page’s head section (that is, between the `<head>`
    and `</head>` tags). If you place your code there, the web browser will run the
    code before it has had a chance to create the `document` object, which means your
    code will fail, big time. Instead, place your `<script>` tag at the bottom of
    the web page, just before the `</body>` tag.  ### Specifying elements by tag name'
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![警告](images/warning.png) 当您编写`document`对象的代码时，不要将`<script>`标签放在网页的`head`部分（即`<head>`和`</head>`标签之间）。如果将代码放在那里，浏览器会在有机会创建`document`对象之前运行代码，这将导致代码失败。因此，请将`<script>`标签放在网页的底部，在`</body>`标签之前。
    ### 通过标签名指定元素'
- en: Besides working with individual elements, you can also work with collections
    of elements. One such collection is the set of all elements in a page that use
    the same tag name. For example, you could reference all the `<a>` tags or all
    the `<div>` tags.
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 除了操作单个元素，您还可以操作元素的集合。一个这样的集合是页面中所有使用相同标签名的元素。例如，您可以引用所有的`<a>`标签或所有的`<div>`标签。
- en: 'The mechanism for returning a collection of elements that have the same tag
    is the `getElementsByTagName()` method:'
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 返回具有相同标签的元素集合的机制是`getElementsByTagName()`方法：
- en: '`document.getElementsByTagName("tag")`'
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`document.getElementsByTagName("tag")`'
- en: '`Note:` `tag` is a string representing the HTML name used by the tags you want
    to work with.'
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`注意：` `tag` 是一个字符串，表示您希望操作的标签所使用的 HTML 名称。'
- en: 'This method returns an array-like collection that contains all the elements
    in the document that use the specified tag. (Refer to [Chapter 7](c07.xhtml) to
    find out how arrays work. Also check out “[Working with collections of elements](#c06-sec-0011),”
    later in this chapter.) For example, to return a collection that includes all
    the `div` elements in the current page, you’d use the following statement:'
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 此方法返回一个类数组集合，其中包含文档中所有使用指定标签的元素。（有关数组的工作原理，请参考[第7章](c07.xhtml)。另外，请查看本章稍后的部分“[操作元素集合](#c06-sec-0011)”）。例如，要返回一个包含当前页面中所有`div`元素的集合，您可以使用以下语句：
- en: '`const divs = document.getElementsByTagName("div");`  ### Specifying elements
    by class name'
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const divs = document.getElementsByTagName("div");`  ### 通过类名指定元素'
- en: 'Another collection you can work with is the set of all elements in a page that
    use the same class. The JavaScript tool for returning all the elements that share
    a specific class name is the `getElementsByClassName()` method:'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 另一个您可以操作的集合是页面中所有使用相同类名的元素集合。返回所有共享特定类名的元素的JavaScript工具是`getElementsByClassName()`方法：
- en: '`document.getElementsByClassName("class")`'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`document.getElementsByClassName("class")`'
- en: '`Note:` `class` is a string representing the class name used by the elements
    you want to work with.'
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`注意：` `class` 是一个字符串，表示您希望操作的元素所使用的类名。'
- en: 'This method returns an array-like collection that contains all the elements
    in the document that use the specified class name. The collection order is the
    same as the order in which the elements appear in the document. Here’s an example:'
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 此方法返回一个类数组集合，其中包含文档中所有使用指定类名的元素。集合的顺序与元素在文档中出现的顺序相同。以下是一个示例：
- en: '`const keywords = document.getElementsByClassName("keyword");`  ### Specifying
    elements by selector'
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const keywords = document.getElementsByClassName("keyword");`  ### 通过选择器指定元素'
- en: 'The same selectors and combinators that you use with CSS are also available
    in your JavaScript code to reference page elements by using the `document` object’s
    `querySelector()` and `querySelectorAll()` methods:'
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你在 CSS 中使用的相同选择器和组合器，也可以在 JavaScript 代码中使用，通过 `document` 对象的 `querySelector()`
    和 `querySelectorAll()` 方法来引用页面元素：
- en: '`document.querySelector("selector") document.querySelectorAll("selector")`'
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`document.querySelector("selector") document.querySelectorAll("selector")`'
- en: '`Note:` `selector` is a string representing the selector or combinator for
    the element or elements you want to work with.'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`注意:` `selector` 是一个字符串，表示你想要操作的元素或元素组的选择器或组合器。'
- en: The difference between these methods is that `querySelectorAll()` returns a
    collection of all the elements that match your selector, whereas `querySelector()`
    returns only the first element that matches your selector.
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这两种方法的区别在于，`querySelectorAll()` 返回一个集合，包含所有匹配选择器的元素，而 `querySelector()` 只返回第一个匹配的元素。
- en: 'For example, the following statement returns the collection of all `section`
    elements that are direct children of an `article` element:'
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，以下语句返回所有作为 `article` 元素的直接子元素的 `section` 元素集合：
- en: '`const articles = document.querySelectorAll("article > section");`  ### 处理元素集合'
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const articles = document.querySelectorAll("article > section");`  ### 处理元素集合'
- en: '`getElementsByTagName()`, `getElementsByClassName()`, 和 `querySelectorAll()`
    方法分别返回一个类似数组的集合，包含文档中使用指定标签、类或选择器的所有元素。集合的顺序与元素在文档中出现的顺序相同。比如，考虑以下 HTML 代码：'
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`getElementsByTagName()`, `getElementsByClassName()`, 和 `querySelectorAll()`
    方法分别返回一个类似数组的集合，包含文档中使用指定标签、类或选择器的所有元素。集合的顺序与元素在文档中出现的顺序相同。比如，考虑以下 HTML 代码：'
- en: '`<div id="div1"> 当然，这是 div 1。 </div> <div id="div2"> 好吧，<em>这是</em> div 2！
    </div> <div id="div3"> 忽略那些家伙。欢迎来到 div 3！ </div>`'
  id: totrans-97
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<div id="div1"> 当然，这是 div 1。 </div> <div id="div2"> 好吧，<em>这是</em> div 2！
    </div> <div id="div3"> 忽略那些家伙。欢迎来到 div 3！ </div>`'
- en: 现在考虑以下语句：
  id: totrans-98
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在考虑以下语句：
- en: '`divs = document.getElementsByTagName("div");`'
  id: totrans-99
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`divs = document.getElementsByTagName("div");`'
- en: 在结果集合中，第一个项目（``divs[0]``）将是 ``<div>`` 元素，其 ``id`` 等于 ``div1``；第二个项目（``divs[1]``）将是
    ``<div>`` 元素，其 ``id`` 等于 ``div2``；第三个项目（``divs[2]``）将是 ``<div>`` 元素，其 ``id`` 等于
    ``div3``。
  id: totrans-100
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在结果集合中，第一个项目（``divs[0]``）将是 ``<div>`` 元素，其 ``id`` 等于 ``div1``；第二个项目（``divs[1]``）将是
    ``<div>`` 元素，其 ``id`` 等于 ``div2``；第三个项目（``divs[2]``）将是 ``<div>`` 元素，其 ``id`` 等于
    ``div3``。
- en: 你也可以直接使用它们的 ``id`` 值来引用元素。例如，以下语句是等效的：
  id: totrans-101
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你也可以直接使用它们的 ``id`` 值来引用元素。例如，以下语句是等效的：
- en: '`const firstDiv = divs[0]; const firstDiv = divs.div1;`'
  id: totrans-102
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const firstDiv = divs[0]; const firstDiv = divs.div1;`'
- en: 要了解集合中有多少个项目，请使用 ``length`` 属性：
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要了解集合中有多少个项目，请使用 ``length`` 属性：
- en: '`const totalDivs = divs.length;`'
  id: totrans-104
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const totalDivs = divs.length;`'
- en: 要对集合中的每个项目执行一个或多个操作，可以使用 ``for…of`` 循环逐个运行集合中的项目。在 JavaScript 领域，这被称为 *迭代* 集合。以下是要使用的语法：
  id: totrans-105
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要对集合中的每个项目执行一个或多个操作，可以使用 ``for…of`` 循环逐个运行集合中的项目。在 JavaScript 领域，这被称为 *迭代* 集合。以下是要使用的语法：
- en: '`for (const item of collection) { statements }`'
  id: totrans-106
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`for (const item of collection) { statements }`'
- en: 这是各部分的含义：
  id: totrans-107
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是各部分的含义：
- en: '``item``: 一个在集合中保存项目的变量。第一次循环时，``item`` 被设置为集合中的第一个元素；第二次循环时，``item`` 被设置为第二个元素；以此类推。'
  id: totrans-108
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '``item``: 一个在集合中保存项目的变量。第一次循环时，``item`` 被设置为集合中的第一个元素；第二次循环时，``item`` 被设置为第二个元素；以此类推。'
- en: '``collection``: 你想要迭代的元素集合。'
  id: totrans-109
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '``collection``: 你想要迭代的元素集合。'
- en: '``statements``: 你希望用来操作（或查看，或其他）``item`` 的 JavaScript 代码。'
  id: totrans-110
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '``statements``: 你希望用来操作（或查看，或其他）``item`` 的 JavaScript 代码。'
- en: 例如，这里有一些代码，可以迭代前面的 ``div`` 元素，并在控制台中显示每个项目的 ``id`` 值（请参阅 [第 9 章](c09.xhtml)
    了解控制台的详细信息），如 [图 6-3](#c06-fig-0003) 所示：
  id: totrans-111
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，这里有一些代码，可以迭代前面的 ``div`` 元素，并在控制台中显示每个项目的 ``id`` 值（请参阅 [第 9 章](c09.xhtml)
    了解控制台的详细信息），如 [图 6-3](#c06-fig-0003) 所示：
- en: '`divs = document.getElementsByTagName("div"); for (const d of divs) { console.log(d.id);
    }`'
  id: totrans-112
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`divs = document.getElementsByTagName("div"); for (const d of divs) { console.log(d.id);
    }`'
- en: '![A snapshot of the output of the script that iterates over the div elements.](images/9781394263219-fg0603.png)'
  id: totrans-113
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![迭代 div 元素的脚本输出截图。](images/9781394263219-fg0603.png)'
- en: '[FIGURE 6-3:](#rc06-fig-0003) 迭代 ``div`` 元素的脚本输出。'
  id: totrans-114
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[图 6-3:](#rc06-fig-0003) 迭代 ``div`` 元素的脚本输出。'
- en: '![Warning](images/warning.png) ``for…of`` 循环是 ECMAScript 2015 (ES6) 的新增内容。如果需要支持古老的浏览器，比如
    Internet Explorer 11，可以使用常规的 ``for`` 循环：'
  id: totrans-115
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![警告](images/warning.png) ``for…of`` 循环是 ECMAScript 2015 (ES6) 的新增内容。如果需要支持古老的浏览器，比如
    Internet Explorer 11，可以使用常规的 ``for`` 循环：'
- en: '`for (var i = 0; i < collection.length; i += 1) { statements // 使用 collection[i]
    来引用每个项目 }`  ## 用代码游览 DOM'
  id: totrans-116
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`for (var i = 0; i < collection.length; i += 1) { statements // 使用 collection[i]
    来引用每个项目 }`  ## 用代码游览 DOM'
- en: One common task in JavaScript code is working with the children, parent, or
    siblings of some element in the page. This is known as `traversing the DOM` because
    you’re using these techniques to move up, down, and along the DOM hierarchy.
  id: totrans-117
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在 JavaScript 代码中，一个常见的任务是操作页面中某个元素的子元素、父元素或兄弟元素。这被称为 `遍历 DOM`，因为你使用这些技术在 DOM
    层级中上下移动。
- en: 'In the sections that follow, I use the following HTML code for each example
    technique:'
  id: totrans-118
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我使用以下 HTML 代码作为每个示例技术：
- en: '`<html lang="en"> <head> <title>So Many Kale Recipes</title> </head> <body>
    <header id="page-banner"> <h1>Above and Beyond the Kale of Duty</h1> </header>
    <main id="page-content"> <p> Do you love to cook with <a href="kale.html">kale</a>?
    </p> </main> </body> </html>`'
  id: totrans-119
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<html lang="en"> <head> <title>So Many Kale Recipes</title> </head> <body>
    <header id="page-banner"> <h1>Above and Beyond the Kale of Duty</h1> </header>
    <main id="page-content"> <p> 你喜欢用 <a href="kale.html">羽衣甘蓝</a> 做菜吗？ </p> </main>
    </body> </html>`'
- en: '### Getting the children of a parent element'
  id: totrans-120
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '### 获取父元素的子元素'
- en: 'When you’re working with a particular element, it’s common to want to perform
    one or more operations on that element’s children. Every parent element offers
    several properties that enable you to work with all or just some of its child
    nodes:'
  id: totrans-121
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当你正在处理特定元素时，通常会希望对该元素的子元素执行一个或多个操作。每个父元素都提供了几个属性，允许你处理它的所有或部分子节点：
- en: All the child nodes
  id: totrans-122
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 所有子节点
- en: The first child node
  id: totrans-123
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 第一个子节点
- en: The last child node
  id: totrans-124
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 最后一个子节点
- en: '#### Getting all the child nodes'
  id: totrans-125
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '#### 获取所有子节点'
- en: 'To return a collection of all the child elements of a parent, you use the `children`
    property:'
  id: totrans-126
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要返回父元素的所有子元素集合，可以使用 `children` 属性：
- en: '`parent.children`'
  id: totrans-127
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`parent.children`'
- en: '**Note:** `parent` is the parent element.'
  id: totrans-128
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '**注意：** `parent` 是父元素。'
- en: 'For example, the following statement stores all the child element nodes of
    the `body` element in a variable:'
  id: totrans-129
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，以下语句将 `body` 元素的所有子元素节点存储在一个变量中：
- en: '`const bodyChildElements = document.body.children;`'
  id: totrans-130
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const bodyChildElements = document.body.children;`'
- en: The result is an `HTMLCollection` object, which is an array-like collection
    of element nodes. If you were to use the console (refer to [Chapter 9](c09.xhtml))
    to display the value of `bodyChildElements`, you’d get the output shown in [Figure
    6-4](#c06-fig-0004).
  id: totrans-131
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 结果是一个 `HTMLCollection` 对象，这是一个类数组的元素节点集合。如果你在控制台使用（参考 [第 9 章](c09.xhtml)）来显示
    `bodyChildElements` 的值，你会得到 [图 6-4](#c06-fig-0004) 中显示的输出。
- en: '![A snapshot of the value of the `bodyChildElements` variable displayed in
    the console.](images/9781394263219-fg0604.png)'
  id: totrans-132
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`bodyChildElements` 变量在控制台中显示的值的快照。](images/9781394263219-fg0604.png)'
- en: '[FIGURE 6-4:] The value of the `bodyChildElements` variable displayed in the
    console.'
  id: totrans-133
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[图 6-4:] `bodyChildElements` 变量在控制台中显示的值。'
- en: 'Here’s the output:'
  id: totrans-134
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里是输出结果：
- en: '`HTMLCollection { 0: header, 1: main, length: 2 }`'
  id: totrans-135
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`HTMLCollection { 0: header, 1: main, length: 2 }`'
- en: 'The numbers `0` and `1` are the index numbers of each child. For example, you
    could use `bodyChildElements[0]` to refer to the first element in the collection,
    which in this example is the `header` element.  #### Getting the first child node'
  id: totrans-136
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '数字 `0` 和 `1` 是每个子节点的索引号。例如，你可以使用 `bodyChildElements[0]` 来引用集合中的第一个元素，在这个示例中是
    `header` 元素。  #### 获取第一个子节点'
- en: 'If you use a parent element’s `childNodes` or `children` property to return
    the parent’s child nodes, as I describe in the previous section, you can refer
    to the first item in the resulting collection by tacking `[0]` on to the collection’s
    variable name. For example:'
  id: totrans-137
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你使用父元素的 `childNodes` 或 `children` 属性来返回父元素的子节点，正如我在上一节中所描述的那样，可以通过在集合的变量名后加上
    `[0]` 来引用结果集合中的第一个项。例如：
- en: '`bodyChildren[0] bodyChildElements[0]`'
  id: totrans-138
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`bodyChildren[0] bodyChildElements[0]`'
- en: 'However, the DOM offers a more direct route to the first child node:'
  id: totrans-139
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，DOM 提供了一种更直接的方法来获取第一个子节点：
- en: '`parent.firstChild`'
  id: totrans-140
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`parent.firstChild`'
- en: '**Note:** `parent` is the parent element.'
  id: totrans-141
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '**注意：** `parent` 是父元素。'
- en: 'For example, suppose you want to work with the first child node of the `main`
    element from the HTML example at the beginning of this section. Here’s some code
    that’ll do the job:'
  id: totrans-142
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，假设你想处理本节开头 HTML 示例中 `main` 元素的第一个子节点。这里有一些代码可以完成这个任务：
- en: '`const content = document.getElementById("page-content"); const firstContentChildNode
    = content.firstChild;`'
  id: totrans-143
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const content = document.getElementById("page-content"); const firstContentChildNode
    = content.firstChild;`'
- en: 在此示例中，结果节点是一个文本节点（`<main>`和`<p>`标签之间的空白）。如果你想要第一个子元素节点，请使用`firstElementChild`属性：
  id: totrans-144
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在此示例中，结果节点是一个文本节点（`<main>` 和 `<p>` 标签之间的空白）。如果你想要第一个子元素节点，请使用 `firstElementChild`
    属性：
- en: '`parent.firstElementChild`'
  id: totrans-145
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`parent.firstElementChild`'
- en: '`Note:` `parent` 是父元素。'
  id: totrans-146
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Note:` `parent` 是父元素。'
- en: 要获取本节开头代码中的`main`元素的第一个子元素节点，你可以这样做：
  id: totrans-147
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要获取本节开头代码中的 `main` 元素的第一个子元素节点，可以这样做：
- en: '`const content = document.getElementById("page-content"); const firstContentChildElement
    = content.firstElementChild;`'
  id: totrans-148
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const content = document.getElementById("page-content"); const firstContentChildElement
    = content.firstElementChild;`'
- en: 在此示例中，这段代码返回`p`元素。#### 获取最后一个子节点
  id: totrans-149
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在此示例中，这段代码返回 `p` 元素。#### 获取最后一个子节点
- en: 如果你的代码需要处理最后一个子节点，请使用父元素的`lastChild`属性：
  id: totrans-150
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你的代码需要处理最后一个子节点，请使用父元素的 `lastChild` 属性：
- en: '`parent.lastChild`'
  id: totrans-151
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`parent.lastChild`'
- en: '`Note:` `parent` 是父元素。'
  id: totrans-152
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Note:` `parent` 是父元素。'
- en: 例如，假设你想处理本节开头HTML示例中的`p`元素的最后一个子节点。以下是一些可以完成此工作的代码：
  id: totrans-153
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，假设你想处理本节开头 HTML 示例中的 `p` 元素的最后一个子节点。以下是一些可以完成此工作的代码：
- en: '`const para = document.querySelector("main > p"); const lastParaChildNode =
    para.lastChild;`'
  id: totrans-154
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const para = document.querySelector("main > p"); const lastParaChildNode =
    para.lastChild;`'
- en: 在此示例中，结果节点是表示问号（`?`）的文本节点，以及`</p>`标签的空白。如果你想要最后一个子元素节点，请使用`lastElementChild`属性：
  id: totrans-155
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在此示例中，结果节点是表示问号（`?`）的文本节点，以及`</p>`标签的空白。如果你想要最后一个子元素节点，请使用`lastElementChild`属性：
- en: '`parent.lastElementChild`'
  id: totrans-156
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`parent.lastElementChild`'
- en: '`Note:` `parent` 是父元素。'
  id: totrans-157
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Note:` `parent` 是父元素。'
- en: 要获取本节开头代码中`p`元素的最后一个子元素节点，你可以这样做：
  id: totrans-158
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要获取本节开头代码中`p`元素的最后一个子元素节点，你可以这样做：
- en: '`const para = document.querySelector("main > p"); const lastParaChildElement
    = para.lastElementChild;`'
  id: totrans-159
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const para = document.querySelector("main > p"); const lastParaChildElement
    = para.lastElementChild;`'
- en: 在示例中，这段代码返回`a`元素。### 获取子元素的父元素
  id: totrans-160
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在示例中，这段代码返回`a`元素。### 获取子元素的父元素
- en: 如果你的代码需要处理子元素的父元素，请使用子元素的`parentNode`属性：
  id: totrans-161
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你的代码需要处理子元素的父元素，请使用子元素的`parentNode`属性：
- en: '`child.parentNode`'
  id: totrans-162
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`child.parentNode`'
- en: '`Note:` `child` 是子元素。'
  id: totrans-163
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Note:` `child` 是子元素。'
- en: 例如，假设你想处理本节开头HTML示例中的`h1`元素的父元素。以下是一些可以完成此工作的代码：
  id: totrans-164
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，假设你想处理本节开头HTML示例中的`h1`元素的父元素。以下是一些可以完成此工作的代码：
- en: '`const childElement = document.querySelector("h1"); const parentElement = childElement.parentNode;`
    ### 获取元素的兄弟节点'
  id: totrans-165
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const childElement = document.querySelector("h1"); const parentElement = childElement.parentNode;`
    ### 获取元素的兄弟节点'
- en: 父元素的子节点在DOM中按HTML代码出现的顺序出现，这意味着兄弟节点也按它们在HTML中出现的顺序出现。因此，对于给定的子元素，有两种兄弟节点可能性：
  id: totrans-166
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 父元素的子节点在DOM中按HTML代码出现的顺序出现，这意味着兄弟节点也按它们在HTML中出现的顺序出现。因此，对于给定的子元素，有两种兄弟节点可能性：
- en: '**前一个兄弟节点：** 这是在DOM中紧接着你正在处理的子元素之前出现的兄弟节点。如果子元素是第一个兄弟节点，则没有前一个兄弟节点。'
  id: totrans-167
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '**前一个兄弟节点：** 这是在DOM中紧接着你正在处理的子元素之前出现的兄弟节点。如果子元素是第一个兄弟节点，则没有前一个兄弟节点。'
- en: '**下一个兄弟节点：** 这是在DOM中紧接着你正在处理的子元素之后出现的兄弟节点。如果子元素是最后一个兄弟节点，则没有下一个兄弟节点。'
  id: totrans-168
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '**下一个兄弟节点：** 这是在DOM中紧接着你正在处理的子元素之后出现的兄弟节点。如果子元素是最后一个兄弟节点，则没有下一个兄弟节点。'
- en: '#### 获取前一个兄弟节点'
  id: totrans-169
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '#### 获取前一个兄弟节点'
- en: 要返回特定元素的前一个兄弟节点，请使用`previousElementSibling`属性：
  id: totrans-170
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要返回特定元素的前一个兄弟节点，请使用`previousElementSibling`属性：
- en: '`element.previousElementSibling`'
  id: totrans-171
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`element.previousElementSibling`'
- en: 注意：`element`是您正在处理的元素。
  id: totrans-172
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 注意：`element`是您正在处理的元素。
- en: 例如，以下语句将`main`元素的前一个兄弟元素存储在一个变量中：
  id: totrans-173
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，以下语句将`main`元素的前一个兄弟元素存储在一个变量中：
- en: '`const currElement = document.querySelector("main"); const prevSib = currElement.previousElementSibling;`  ####
    获取下一个兄弟元素'
  id: totrans-174
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const currElement = document.querySelector("main"); const prevSib = currElement.previousElementSibling;`  ####
    获取下一个兄弟元素'
- en: 要返回特定元素的下一个兄弟元素，使用`nextElementSibling`属性：
  id: totrans-175
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要返回特定元素的下一个兄弟元素，使用`nextElementSibling`属性：
- en: '`element.nextElementSibling`'
  id: totrans-176
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`element.nextElementSibling`'
- en: 注意：`element`是您正在处理的元素。
  id: totrans-177
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 注意：`element`是您正在处理的元素。
- en: 例如，以下语句将`header`元素的下一个兄弟元素存储在一个变量中：
  id: totrans-178
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，以下语句将`header`元素的下一个兄弟元素存储在一个变量中：
- en: '`const currElement = document.querySelector("header"); const nextSib = currElement.nextElementSibling;`  ##
    添加、修改和删除元素'
  id: totrans-179
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const currElement = document.querySelector("header"); const nextSib = currElement.nextElementSibling;`  ##
    添加、修改和删除元素'
- en: 在获得对一个或多个元素的引用后，您可以使用代码以各种方式操作这些元素，如接下来几节所示。
  id: totrans-180
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在获得对一个或多个元素的引用后，您可以使用代码以各种方式操作这些元素，如接下来几节所示。
- en: '### 将元素添加到页面'
  id: totrans-181
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '### 将元素添加到页面'
- en: Web 开发中最常见的任务之一是在页面上动态添加元素。当您添加元素时，始终指定将要添加的父元素，然后决定是将新元素添加到父元素子元素集合的末尾还是开头。
  id: totrans-182
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: Web 开发中最常见的任务之一是在页面上动态添加元素。当您添加元素时，始终指定将要添加的父元素，然后决定是将新元素添加到父元素子元素集合的末尾还是开头。
- en: 要将元素添加到页面，您需要遵循三个步骤：
  id: totrans-183
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要将元素添加到页面，您需要遵循三个步骤：
- en: 创建要添加的元素类型的对象。
  id: totrans-184
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 创建要添加的元素类型的对象。
- en: 将步骤 1 的新对象作为现有元素的子元素添加。
  id: totrans-185
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 将步骤 1 的新对象作为现有元素的子元素添加。
- en: 插入一些文本和标签到步骤 1 的新对象中。
  id: totrans-186
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 插入一些文本和标签到步骤 1 的新对象中。
- en: '#### 步骤 1：创建元素'
  id: totrans-187
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '#### 步骤 1：创建元素'
- en: 对于步骤 1，您使用`document`对象的`createElement()`方法：
  id: totrans-188
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 对于步骤 1，您使用`document`对象的`createElement()`方法：
- en: '`document.createElement(elementName)`'
  id: totrans-189
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`document.createElement(elementName)`'
- en: 注意：`elementName`是一个包含您要创建的元素类型的 HTML 元素名称的字符串。
  id: totrans-190
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 注意：`elementName`是一个包含您要创建的元素类型的 HTML 元素名称的字符串。
- en: 此方法创建元素并返回它，这意味着您可以将新元素存储在一个变量中。以下是一个示例：
  id: totrans-191
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 此方法创建元素并返回它，这意味着您可以将新元素存储在一个变量中。以下是一个示例：
- en: '`const newArticle = createElement("article");`  #### 步骤 2：将新元素作为子元素添加'
  id: totrans-192
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const newArticle = createElement("article");`  #### 步骤 2：将新元素作为子元素添加'
- en: 创建元素后，步骤 2 是将其添加到现有父元素中。您有四个选择：
  id: totrans-193
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 创建元素后，步骤 2 是将其添加到现有父元素中。您有四个选择：
- en: 将新元素附加到父元素的子元素集合的末尾：使用`append()`方法：`parent.append(child)`
  id: totrans-194
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 将新元素附加到父元素的子元素集合的末尾：使用`append()`方法：`parent.append(child)`
- en: 下面是`append()`方法的组成部分：
  id: totrans-195
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 下面是`append()`方法的组成部分：
- en: '`parent`：指向将要附加新元素的父元素的引用。'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`parent`：指向将要附加新元素的父元素的引用。'
- en: '`child`：指向您要附加的子元素的引用。请注意，您可以通过用逗号分隔每个元素来同时附加多个元素。`child`参数也可以是文本字符串。'
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`child`：指向您要附加的子元素的引用。请注意，您可以通过用逗号分隔每个元素来同时附加多个元素。`child`参数也可以是文本字符串。'
- en: 将新元素放在父元素的子元素集合的开头：使用`prepend()`方法：`parent.prepend(child)`
  id: totrans-198
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 将新元素放在父元素的子元素集合的开头：使用`prepend()`方法：`parent.prepend(child)`
- en: 下面是`prepend()`方法的组成部分：
  id: totrans-199
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 下面是`prepend()`方法的组成部分：
- en: '`parent`：指向将要预先添加新元素的父元素的引用。'
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`parent`：指向将要预先添加新元素的父元素的引用。'
- en: '``child``: A reference to the child element you’re prepending. Note that you
    can prepend multiple elements at the same time by separating each element with
    a comma. The ``child`` parameter can also be a text string.'
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '``child``: A reference to the child element you’re prepending. Note that you
    can prepend multiple elements at the same time by separating each element with
    a comma. The ``child`` parameter can also be a text string.'
- en: '**Insert the new element just after an existing child element of the parent:**
    Use the `after()` method: ``child``.after(``sibling``)'
  id: totrans-202
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '**将新元素插入到父元素的现有子元素之后：** 使用`after()`方法：``child``.after(``sibling``)'
- en: 'Here are the parts of the `after()` method:'
  id: totrans-203
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 这里是`after()`方法的组成部分：
- en: '``child``: A reference to the child element after which the new element will
    be inserted.'
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '``child``: A reference to the child element after which the new element will
    be inserted.'
- en: '``sibling``: A reference to the new element you’re inserting. Note that you
    can insert multiple elements at the same time by separating each element with
    a comma. The ``sibling`` parameter can also be a text string.'
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '``sibling``: A reference to the new element you’re inserting. Note that you
    can insert multiple elements at the same time by separating each element with
    a comma. The ``sibling`` parameter can also be a text string.'
- en: '**Insert the new element just before an existing child element of the parent:**
    Use the `before()` method: ``child``.before(``sibling``)'
  id: totrans-206
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '**将新元素插入到父元素的现有子元素之前：** 使用`before()`方法：``child``.before(``sibling``)'
- en: 'Here are the parts of the `before()` method:'
  id: totrans-207
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 下面是`before()`方法的各部分：
- en: '``child``: A reference to the child element before which the new element will
    be inserted.'
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '``child``: 新元素将被插入到此子元素之前。'
- en: '``sibling``: A reference to the new element you’re inserting. Note that you
    can insert multiple elements at the same time by separating each element with
    a comma. The ``sibling`` parameter can also be a text string.'
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '``sibling``: 新插入元素的参考对象。注意，你可以通过逗号分隔每个元素同时插入多个元素。``sibling``参数也可以是一个文本字符串。'
- en: 'Here’s an example that creates a new `article` element and then appends it
    to the `main` element:'
  id: totrans-210
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里有一个示例，创建一个新的`article`元素，并将其添加到`main`元素中：
- en: '`const newArticle = document.createElement("article"); document.querySelector("main").append(newArticle);`'
  id: totrans-211
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const newArticle = document.createElement("article"); document.querySelector("main").append(newArticle);`'
- en: 'Here’s an example that creates a new `nav` element and then prepends it to
    the `main` element:'
  id: totrans-212
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里有一个示例，创建一个新的`nav`元素并将其插入到`main`元素之前：
- en: '`const newNav = document.createElement("nav"); document.querySelector("main").prepend(newNav);`
    #### Step 3: Adding text and tags to the new element'
  id: totrans-213
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const newNav = document.createElement("nav"); document.querySelector("main").prepend(newNav);`
    #### 步骤3：向新元素添加文本和标签'
- en: 'With your element created and appended to a parent, the final step is to add
    some text and tags using the `innerHTML` property:'
  id: totrans-214
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在创建并添加元素到父元素之后，最后一步是使用`innerHTML`属性添加文本和标签：
- en: '``element``.innerHTML = ``text``'
  id: totrans-215
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '``element``.innerHTML = ``text``'
- en: 'Here’s what the various parts are:'
  id: totrans-216
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 下面是各部分的说明：
- en: '``element``: A reference to the new element within which you want to add the
    text and tags'
  id: totrans-217
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '``element``: 一个引用，指向你希望添加文本和标签的新元素。'
- en: '``text``: A string containing the text and HTML tags you want to insert'
  id: totrans-218
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '``text``: 包含你要插入的文本和HTML标签的字符串。'
- en: '![Warning](images/warning.png) Whatever value you assign to the `innerHTML`
    property completely overwrites an element’s existing text and tags, so use caution
    when wielding `innerHTML`. Check out the next section to learn how to insert text
    and tags rather than overwrite them.'
  id: totrans-219
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![警告](images/warning.png) 无论你为`innerHTML`属性赋予什么值，它都会完全覆盖元素现有的文本和标签，因此在使用`innerHTML`时要小心。查看下一个部分，了解如何插入文本和标签，而不是覆盖它们。'
- en: 'In this example, the code creates a new `nav` element, prepends it to the `main`
    element, and then adds a heading:'
  id: totrans-220
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个示例中，代码创建一个新的`nav`元素，将其插入到`main`元素之前，然后添加一个标题：
- en: '`const newNav = document.createElement("nav"); document.querySelector("main").prepend(newNav);
    newNav.innerHTML = "<h2>Navigation</h2>";` ### Inserting text or HTML into an
    element'
  id: totrans-221
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const newNav = document.createElement("nav"); document.querySelector("main").prepend(newNav);
    newNav.innerHTML = "<h2>Navigation</h2>";` ### 向元素中插入文本或HTML'
- en: 'It’s often the case that you want to keep the element’s existing tags and text
    and insert new tags and text. Each element offers a couple of methods that enable
    you do to do this:'
  id: totrans-222
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 通常情况下，你希望保留元素现有的标签和文本，同时插入新的标签和文本。每个元素提供了几种方法，让你能够做到这一点：
- en: '**To insert just text into an element:** Use the `insertAdjacentText`() method:
    ``element``.insertAdjacentText(``location``, ``text``)'
  id: totrans-223
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '**仅将文本插入到元素中：** 使用`insertAdjacentText()`方法：``element``.insertAdjacentText(``location``,
    ``text``)'
- en: 'Here’s what the various parts are:'
  id: totrans-224
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 下面是各部分的说明：
- en: '``element``: A reference to the element into which the new text will be inserted.'
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '``element``: 一个引用，指向你希望插入新文本的元素。'
- en: '`location`: A string specifying where you want the text inserted. I outline
    your choices here shortly.'
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`location`: 一个字符串，指定你希望文本插入的位置。稍后我会简要概述你的选择。'
- en: '`text`: A string containing the text you want to insert.'
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`text`: 一个包含你希望插入的文本的字符串。'
- en: '**要将标签和文本插入到元素中：** 使用 `insertAdjacentHTML()` 方法：`element.insertAdjacentHTML(location,
    data)`'
  id: totrans-228
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '**要将标签和文本插入到元素中：** 使用 `insertAdjacentHTML()` 方法：`element.insertAdjacentHTML(location,
    data)`'
- en: 各部分的内容如下：
  id: totrans-229
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 各部分的内容如下：
- en: '`element`: A reference to the element into which the new tags and text will
    be inserted.'
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`element`: 一个引用，指向你希望插入新标签和文本的元素。'
- en: '`location`: A string specifying where you want the tags and text inserted.
    I outline your choices here shortly.'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`location`: 一个字符串，指定你希望插入标签和文本的位置。稍后我会简要概述你的选择。'
- en: '`data`: A string containing the tags and text you want to insert.'
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`data`: 一个包含你希望插入的标签和文本的字符串。'
- en: 对于这两种方法，你可以使用以下字符串之一作为 `location` 参数：
  id: totrans-233
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 对于这两种方法，你可以使用以下字符串之一作为 `location` 参数：
- en: '`"beforebegin"`: Inserts the data outside of and just before the element'
  id: totrans-234
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`"beforebegin"`: 在元素外部并紧接着元素之前插入数据。'
- en: '`"afterbegin"`: Inserts the data inside the element, before the element’s first
    child'
  id: totrans-235
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`"afterbegin"`: 在元素内部，紧接着元素的第一个子元素之前插入数据。'
- en: '`"beforeend"`: Inserts the data inside the element, after the element’s last
    child'
  id: totrans-236
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`"beforeend"`: 在元素内部，紧接着元素的最后一个子元素之后插入数据。'
- en: '`"afterend"`: Inserts the data outside of and just after the element'
  id: totrans-237
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`"afterend"`：将数据插入到元素外部并紧接元素之后'
- en: 例如，假设你的文档中有以下元素：
  id: totrans-238
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，假设你的文档中有以下元素：
- en: '`<h2 id="nav-heading">Navigation</h2>`'
  id: totrans-239
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<h2 id="nav-heading">导航</h2>`'
- en: 如果你想将标题更改为 `Main Navigation`，以下代码将完成该任务：
  id: totrans-240
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你想将标题更改为 `Main Navigation`，以下代码将完成该任务：
- en: '```const navHeading = document.getElementById("nav-heading"); navHeading.insertAdjacentText("afterbegin",
    "Main ");```  ### Removing an element'
  id: totrans-241
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '```const navHeading = document.getElementById("nav-heading"); navHeading.insertAdjacentText("afterbegin",
    "Main ");```  ### 移除元素'
- en: 如果你不再需要页面上的某个元素，可以使用该元素的 `remove()` 方法将其从 DOM 中删除：
  id: totrans-242
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你不再需要页面上的某个元素，可以使用该元素的 `remove()` 方法将其从 DOM 中删除：
- en: '`element.remove()`'
  id: totrans-243
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`element.remove()`'
- en: 例如，以下语句将具有 `id` 值为 `temp-div` 的元素从页面中移除：
  id: totrans-244
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，以下语句将具有 `id` 值为 `temp-div` 的元素从页面中移除：
- en: '```document.getElementById("temp-div").remove();``` ## Using Code to Mess Around
    with CSS'
  id: totrans-245
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '```document.getElementById("temp-div").remove();``` ## 使用代码修改 CSS'
- en: 尽管你在静态样式表（`.css`）文件中指定 CSS 规则，但这并不意味着规则本身必须是静态的。通过 JavaScript，你可以以多种方式修改元素的
    CSS。
  id: totrans-246
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 尽管你在静态样式表（`.css`）文件中指定了 CSS 规则，但这并不意味着规则本身必须是静态的。通过 JavaScript，你可以以多种方式修改元素的
    CSS。
- en: '### Changing an element’s styles'
  id: totrans-247
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '### 更改元素的样式'
- en: 大多数元素都有一个 `style` 属性，可以让你获取和修改标签的样式。它的工作原理是：`style` 属性实际上返回一个 `style` 对象，该对象具有每个
    CSS 属性的属性。在引用这些样式属性时，你需要牢记两件事：
  id: totrans-248
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 大多数元素都有一个 `style` 属性，可以让你获取和修改标签的样式。它的工作原理是：`style` 属性实际上返回一个 `style` 对象，该对象具有每个
    CSS 属性的属性。在引用这些样式属性时，你需要牢记两件事：
- en: 对于单词 CSS 属性（如 `color` 和 `visibility`），请使用全小写字母。
  id: totrans-249
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 对于单词 CSS 属性（如 `color` 和 `visibility`），请使用全小写字母。
- en: 对于多个单词的 CSS 属性，去掉连字符，并对第二个单词的首字母及后续单词的首字母使用大写。例如，`font-size` 和 `border-left-width`
    CSS 属性变为 `fontSize` 和 `borderLeftWidth` 样式对象属性。
  id: totrans-250
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 对于多个单词的 CSS 属性，去掉连字符，并对第二个单词的首字母及后续单词的首字母使用大写。例如，`font-size` 和 `border-left-width`
    CSS 属性变为 `fontSize` 和 `borderLeftWidth` 样式对象属性。
- en: 这里有一个例子：
  id: totrans-251
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '```const pageTitle = document.querySelector("h1"); pageTitle.style.fontSize
    = "64px"; pageTitle.style.color = "maroon"; pageTitle.style.textAlign = "center";
    pageTitle.style.border = "1px solid black";```'
  id: totrans-252
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '```const pageTitle = document.querySelector("h1"); pageTitle.style.fontSize
    = "64px"; pageTitle.style.color = "maroon"; pageTitle.style.textAlign = "center";
    pageTitle.style.border = "1px solid black";```'
- en: 'This code gets a reference to the page’s first `<h1>` element. With that reference
    in hand, the code then uses the `style` object to style four properties of the
    heading: `fontSize`, `color`, `text-align`, and `border`.  ### Adding a class
    to an element'
  id: totrans-253
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '这段代码获取页面上第一个 `<h1>` 元素的引用。通过这个引用，代码使用 `style` 对象来设置标题的四个样式属性：`fontSize`、`color`、`text-align`
    和 `border`。 ### 向元素添加类'
- en: If you have a class rule defined in your CSS, you can apply that rule to an
    element by adding the `class` attribute to the element’s tag and setting the value
    of the `class` attribute equal to the name of your class rule.
  id: totrans-254
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你在 CSS 中定义了一个类规则，你可以通过向元素的标签添加 `class` 属性，并将 `class` 属性的值设置为类规则的名称来应用该规则。
- en: 'First, you can get a list of an element’s assigned classes by using the `classList`
    property:'
  id: totrans-255
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 首先，你可以通过使用 `classList` 属性获取元素的类列表：
- en: '`element.classList`'
  id: totrans-256
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`element.classList`'
- en: '-   `element` is the element you’re working with.'
  id: totrans-257
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '-   `element` 是你正在处理的元素。'
- en: 'The returned list of classes is an array-like object that includes an `add()`
    method that you can use to add a new class to the element’s existing classes:'
  id: totrans-258
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 返回的类列表是一个类似数组的对象，它包含一个 `add()` 方法，你可以使用该方法将新类添加到元素现有的类中：
- en: '`element.classList.add(class)`'
  id: totrans-259
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`element.classList.add(class)`'
- en: 'Here’s what the various parts are:'
  id: totrans-260
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里是各部分的解释：
- en: '`element`: The element you’re working with.'
  id: totrans-261
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`element`：你正在处理的元素。'
- en: '`class`: A string representing the name of the class you want to add to `element`.
    You can add multiple classes by separating each class name with a comma.'
  id: totrans-262
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`class`：表示你要添加到 `element` 的类的名称。你可以通过逗号分隔来添加多个类。'
- en: Here’s an example, and [Figure 6-5](#c06-fig-0005) shows the result.
  id: totrans-263
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里有一个例子，[图 6-5](#c06-fig-0005) 显示了结果。
- en: '![A snapshot of the code uses the add() method to add the class named my-class
    to the ltltltdivgtgtgt tag.](images/9781394263219-fg0605.png)'
  id: totrans-264
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![代码快照使用 add() 方法将名为 my-class 的类添加到 <div> 标签中。](images/9781394263219-fg0605.png)'
- en: '[FIGURE 6-5:](#rc06-fig-0005) This code uses the `add()` method to add the
    class named `my-class` to the `<div>` tag.'
  id: totrans-265
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[图 6-5：](#rc06-fig-0005) 这段代码使用 `add()` 方法将名为 `my-class` 的类添加到 `<div>` 标签中。'
- en: 'CSS:'
  id: totrans-266
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 'CSS:'
- en: '`.my-class { display: flex; justify-content: center; align-items: center; border:
    6px dotted black; font-family: Verdana, serif; font-size: 2rem; background-color:
    lightgray; }`'
  id: totrans-267
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`.my-class { display: flex; justify-content: center; align-items: center; border:
    6px dotted black; font-family: Verdana, serif; font-size: 2rem; background-color:
    lightgray; }`'
- en: 'HTML:'
  id: totrans-268
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 'HTML:'
- en: '`<div id="my-div"> Hello World! </div>`'
  id: totrans-269
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<div id="my-div"> 你好，世界！ </div>`'
- en: 'JavaScript:'
  id: totrans-270
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 'JavaScript:'
- en: '`document.getElementById(''my-div'').classList.add(''my-class'');`'
  id: totrans-271
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`document.getElementById(''my-div'').classList.add(''my-class'');`'
- en: '![Remember](images/remember.png) If the `class` attribute doesn’t exist in
    the element, the `addClass()` method inserts it into the tag. So in the previous
    example, after the code executes, the `<div>` tag now appears like this:'
  id: totrans-272
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![记住](images/remember.png) 如果元素中没有 `class` 属性，`addClass()` 方法会将其插入到标签中。所以在之前的示例中，代码执行后，`<div>`
    标签现在会变成这样：'
- en: '`<div id="my-div" class="my-class">`'
  id: totrans-273
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<div id="my-div" class="my-class">`'
- en: '#### Removing a class'
  id: totrans-274
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '#### 移除一个类'
- en: 'To remove a class from an element’s `class` attribute, the `classList` object
    offers the `remove()` method:'
  id: totrans-275
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要从元素的 `class` 属性中移除一个类，可以使用 `classList` 对象的 `remove()` 方法：
- en: '`element.classList.remove(class)`'
  id: totrans-276
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`element.classList.remove(class)`'
- en: 'Here’s what the various parts are:'
  id: totrans-277
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下是各部分的说明：
- en: '`element`: The element you’re working with.'
  id: totrans-278
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`element`：你正在操作的元素。'
- en: '`class`: A string representing the name of the class you want to remove from
    `element`. You can remove multiple classes by separating each class name with
    a comma.'
  id: totrans-279
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`class`：表示要从 `element` 中移除的类名的字符串。你可以通过用逗号分隔每个类名来移除多个类。'
- en: 'Here’s an example:'
  id: totrans-280
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下是一个示例：
- en: '`document.getElementById(''my-div'').classList.remove(''my-class'');`  ####
    Toggling a class'
  id: totrans-281
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`document.getElementById(''my-div'').classList.remove(''my-class'');` ####
    切换类'
- en: 'The `classList` object offers the `toggle()` method, which toggles a class
    on and off an element. That is, it checks the element for the specified class;
    if the class is there, JavaScript removes it; if the class isn’t there, JavaScript
    adds it. Sweet! Here’s the syntax:'
  id: totrans-282
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`classList` 对象提供了 `toggle()` 方法，用于在元素上切换类。这意味着，它会检查元素是否具有指定的类；如果该类存在，JavaScript
    会移除它；如果该类不存在，JavaScript 会添加它。非常棒！以下是语法：'
- en: '`element.classList.toggle(class)`'
  id: totrans-283
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`element.classList.toggle(class)`'
- en: 'Here’s what the various parts are:'
  id: totrans-284
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下是各部分的说明：
- en: '`element`: The element you’re working with'
  id: totrans-285
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`element`：你正在操作的元素'
- en: '`class`: A string representing the name of the class you want to toggle for
    `element`'
  id: totrans-286
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`class`：表示要切换的 `element` 的类名的字符串。'
- en: 'Here’s an example:'
  id: totrans-287
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下是一个示例：
- en: '`document.getElementById(''my-div'').classList.toggle(''my-class'');` ## Using
    Code to Tweak HTML Attributes'
  id: totrans-288
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`document.getElementById(''my-div'').classList.toggle(''my-class'');` ## 使用代码调整
    HTML 属性'
- en: One of the key features of the DOM is that each tag on the page becomes an element
    object. You may be wondering, do these element objects have any properties? Yep,
    they have tons. In particular, if the tag included one or more attributes, those
    attributes become properties of the element object.
  id: totrans-289
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: DOM 的一个关键特性是页面上的每个标签都会变成一个元素对象。你可能会想，这些元素对象有属性吗？是的，它们有很多属性。特别是，如果标签包含一个或多个属性，这些属性会成为元素对象的属性。
- en: 'For example, consider the following `<img>` tag:'
  id: totrans-290
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，考虑以下 `<img>` 标签：
- en: '`<img id="header-image" src="mangosteen.png" alt="Drawing of a mangosteen">`'
  id: totrans-291
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<img id="header-image" src="mangosteen.png" alt="Drawing of a mangosteen">`'
- en: 'This tag has three attributes: ``id``, ``src``, and ``alt``. In the DOM’s representation
    of the `<img>` tag, these attributes become properties of the ``img`` element
    object. Here’s some JavaScript code that references the ``img`` element:'
  id: totrans-292
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这个标签有三个属性：``id``、``src`` 和 ``alt``。在 DOM 对 `<img>` 标签的表示中，这些属性变成了 ``img`` 元素对象的属性。以下是一些引用
    ``img`` 元素的 JavaScript 代码：
- en: '`const headerImage = document.getElementById("header-image");`'
  id: totrans-293
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const headerImage = document.getElementById("header-image");`'
- en: 'The ``headerImage`` variable holds the ``img`` element object, so your code
    could now reference the ``img`` element’s attribute values with any of the following
    property references:'
  id: totrans-294
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`headerImage` 变量保存了 ``img`` 元素对象，因此你的代码现在可以通过以下属性引用来访问 ``img`` 元素的属性值：'
- en: '``headerImage.id headerImage.src headerImage.alt``'
  id: totrans-295
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '``headerImage.id headerImage.src headerImage.alt``'
- en: However, the DOM doesn’t create properties either for custom attributes or for
    attributes added programmatically. Fortunately, each element object also offers
    methods that enable you to read any attribute, as well as add, modify, or remove
    the element’s attributes. The next few sections tell all.
  id: totrans-296
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，DOM 不会为自定义属性或程序matically 添加的属性创建属性。幸运的是，每个元素对象还提供了可以读取任何属性的方法，以及添加、修改或移除元素属性的方法。接下来的几节会详细介绍。
- en: '### Reading an attribute value'
  id: totrans-297
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '### 读取属性值'
- en: 'If you want to read the current value of an attribute for an element, use the
    element object’s ``getAttribute()`` method:'
  id: totrans-298
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你想读取元素的当前属性值，可以使用元素对象的 ``getAttribute()`` 方法：
- en: '``element``.getAttribute(`attribute`)'
  id: totrans-299
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '``element``.getAttribute(`attribute`)'
- en: 'Here’s what the various parts are:'
  id: totrans-300
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下是各部分的说明：
- en: '``element``: The element you want to work with'
  id: totrans-301
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '``element``：你要操作的元素'
- en: '``attribute``: The name of the attribute you want to read'
  id: totrans-302
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '``attribute``：你要读取的属性名'
- en: 'Here’s an example that gets the ``src`` attribute of the element with an ``id``
    value of ``header-image``:'
  id: totrans-303
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里有一个示例，获取具有``id``值为``header-image``的元素的``src``属性：
- en: '`const headerImage = document.getElementById("header-image"); const srcHeaderImage
    = headerImage.getAttribute("src");` ### Setting an attribute value'
  id: totrans-304
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const headerImage = document.getElementById("header-image"); const srcHeaderImage
    = headerImage.getAttribute("src");` ### 设置属性值'
- en: 'To set an attribute value on an element, use the element object’s ``setAttribute()``
    method:'
  id: totrans-305
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要在元素上设置属性值，可以使用元素对象的``setAttribute()``方法：
- en: '``element``.setAttribute(`attribute`, `value`);'
  id: totrans-306
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '``element``.setAttribute(`attribute`, `value`);'
- en: 'Here’s what the various parts are:'
  id: totrans-307
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下是各个部分的解释：
- en: '``element``: The element you want to work with'
  id: totrans-308
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '``element``：您想要操作的元素'
- en: '``attribute``: The name of the attribute you want to set'
  id: totrans-309
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '``attribute``：您要设置的属性名称'
- en: '``value``: The string value you want to assign to ``attribute``'
  id: totrans-310
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '``value``：您想要分配给``attribute``的字符串值'
- en: If the attribute already exists, ``setAttribute`` overwrites the attribute’s
    current value; if the attribute doesn’t exist, ``setAttribute`` adds it to the
    element.
  id: totrans-311
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果属性已存在，``setAttribute``会覆盖该属性的当前值；如果属性不存在，``setAttribute``会将其添加到元素中。
- en: 'Here’s an example that sets the ``alt`` attribute for the element with an ``id``
    value of ``header-image``:'
  id: totrans-312
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是一个示例，设置``id``值为``header-image``的元素的``alt``属性：
- en: '`const headerImage = document.getElementById("header-image"); headerImage.setAttribute("alt",
    "Lithograph of a mangosteen");` ### Removing an attribute'
  id: totrans-313
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const headerImage = document.getElementById("header-image"); headerImage.setAttribute("alt",
    "菠萝蜜的版画");` ### 删除属性'
- en: 'To remove an attribute from an element, use the element object’s ``removeAttribute()``
    method:'
  id: totrans-314
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要从元素中删除属性，可以使用元素对象的``removeAttribute()``方法：
- en: '``element``.removeAttribute(`attribute`);'
  id: totrans-315
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '``element``.removeAttribute(`attribute`);'
- en: 'Here’s what the various parts are:'
  id: totrans-316
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下是各个部分的解释：
- en: '``element``: The element you want to work with'
  id: totrans-317
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '``element``：您想要操作的元素'
- en: '`attribute`: A string specifying the name of the attribute you want to remove
    from the element'
  id: totrans-318
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`attribute`：一个字符串，指定您要从元素中删除的属性名称'
- en: 'Here’s an example:'
  id: totrans-319
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是一个示例：
- en: '`const headerImage = document.getElementById("header-image"); headerImage.removeAttribute("id");`  ##
    Listening for Page Events'
  id: totrans-320
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const headerImage = document.getElementById("header-image"); headerImage.removeAttribute("id");`  ##
    监听页面事件'
- en: 'In web development, an `event` is an action that occurs in response to some
    external stimulus. A common type of external stimulus is when a user interacts
    with a web page. Here are some examples:'
  id: totrans-321
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在网页开发中，`event`是响应某些外部刺激而发生的操作。常见的外部刺激之一是用户与网页的交互。以下是一些示例：
- en: Surfing to or reloading the page
  id: totrans-322
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 浏览页面或重新加载页面
- en: Clicking a button
  id: totrans-323
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 点击按钮
- en: Pressing a key
  id: totrans-324
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 按下键盘
- en: Scrolling the page
  id: totrans-325
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 滚动页面
- en: 'Why don’t web pages respond to events automatically? Why do they just sit there?
    Because web pages are `static` by default, meaning that they ignore the events
    that are firing all around them. Your job as a web developer is to change that
    behavior by making your web pages “listen” for particular events to occur. You
    do that by setting up special chunks of code called `event handlers`. An event
    handler consists of two parts:'
  id: totrans-326
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为什么网页不会自动响应事件？为什么它们只是静静地待在那里？因为网页默认是`静态`的，这意味着它们忽略了周围发生的所有事件。作为网页开发者，您的工作就是通过使网页“监听”特定的事件来改变这种行为。您可以通过设置名为`事件处理器`的特殊代码块来实现这一点。一个事件处理器由两部分组成：
- en: '`Event listener:` An instruction to the web browser to watch out (“listen”)
    for a particular event occurring on a particular element.'
  id: totrans-327
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`事件监听器：` 指示网页浏览器监听（“监听”）特定元素上发生的特定事件。'
- en: '`Callback function:` The code that the web browser executes when it detects
    that the event has occurred.'
  id: totrans-328
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`回调函数：` 网页浏览器在检测到事件发生时执行的代码。'
- en: 'You configure your code to listen for and react to an event by setting up an
    event handler using the element object’s `addEventListener()` method. Here’s the
    syntax:'
  id: totrans-329
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 通过设置事件处理器，您可以配置代码以监听和响应事件，使用元素对象的`addEventListener()`方法。语法如下：
- en: '`*element*.addEventListener(*event*, *callback*);`'
  id: totrans-330
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`*element*.addEventListener(*event*, *callback*);`'
- en: 'Here’s what the various parts are:'
  id: totrans-331
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下是各个部分的解释：
- en: '`element`: The web page element to be monitored for the event. The event is
    said to be `bound` to the element.'
  id: totrans-332
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`element`：需要监控事件的网页元素。该事件被认为是`绑定`到该元素的。'
- en: '`event`: A string specifying the name of the event you want the browser to
    listen for. For the main events I mention in the previous section, use one of
    the following, enclosed in quotation marks: `DOMContentLoaded`, `click`, `dblclick`,
    `mouseover`, `keypress`, `focus`, `blur`, `change`, `submit`, `scroll`, or `resize`.'
  id: totrans-333
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`event`: 一个字符串，指定你希望浏览器监听的事件名称。对于我在上一节中提到的主要事件，使用以下之一，并用引号括起来：`DOMContentLoaded`、`click`、`dblclick`、`mouseover`、`keypress`、`focus`、`blur`、`change`、`submit`、`scroll`
    或 `resize`。'
- en: '`callback`: The callback function that JavaScript executes when the event occurs.
    The callback can be an anonymous function or a reference to a named function.'
  id: totrans-334
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`callback`: 当事件发生时，JavaScript执行的回调函数。回调可以是一个匿名函数或一个命名函数的引用。'
- en: 'Here’s an example:'
  id: totrans-335
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下是一个示例：
- en: 'HTML:'
  id: totrans-336
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: HTML：
- en: '`<div id="my-div"></div> <button id="my-button">Click to add some text, above</button>`'
  id: totrans-337
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<div id="my-div"></div> <button id="my-button">点击添加上面的文本</button>`'
- en: 'JavaScript:'
  id: totrans-338
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: JavaScript：
- en: '`const myButton = document.getElementById(''my-button''); myButton.addEventListener(''click'',
    function() { const myDiv = document.getElementById(''my-div''); myDiv.innerHTML
    = ''<h1>Hello Click World!</h1>''; });`'
  id: totrans-339
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const myButton = document.getElementById(''my-button''); myButton.addEventListener(''click'',
    function() { const myDiv = document.getElementById(''my-div''); myDiv.innerHTML
    = ''<h1>Hello Click World!</h1>''; });`'
- en: The HTML sets up an empty `div` element and a `button` element. The JavaScript
    code attaches a `click` event listener to the button, and the callback function
    adds the HTML string `<h1>Hello Click World!</h1>` to the `div`. [Figure 6-6](#c06-fig-0006)
    shows the resulting page after the button has been clicked.
  id: totrans-340
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: HTML设置了一个空的`div`元素和一个`button`元素。JavaScript代码将一个`click`事件监听器附加到按钮上，回调函数将HTML字符串`<h1>Hello
    Click World!</h1>`添加到`div`中。[图6-6](#c06-fig-0006)展示了按钮点击后的页面效果。
- en: '![A snapshot of the click event callback function adds some HTML and text to
    the div element. The message reads, Hello Click World.](images/9781394263219-fg0606.png)'
  id: totrans-341
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![点击事件回调函数将一些HTML和文本添加到div元素中的快照。消息内容为“Hello Click World”。](images/9781394263219-fg0606.png)'
- en: '[FIGURE 6-6:](#rc06-fig-0006) The `click` event callback function adds some
    HTML and text to the `div` element.'
  id: totrans-342
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[图6-6:](#rc06-fig-0006) `click`事件的回调函数将一些HTML和文本添加到`div`元素中。'
- en: '![Tip](images/tip.png) If you want to run some code after the web page document
    has loaded, add an event handler to the `document` object that listens for the
    `DOMContentLoaded` event:'
  id: totrans-343
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![提示](images/tip.png) 如果你希望在网页文档加载完成后运行某些代码，可以为`document`对象添加一个事件处理程序，监听`DOMContentLoaded`事件：'
- en: '`document.addEventListener(''DOMContentLoaded'', function() { console.log(''We
    are loaded!''); });`'
  id: totrans-344
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`document.addEventListener(''DOMContentLoaded'', function() { console.log(''我们已加载完成！'');
    });`'
- en: 'When an event fires, the DOM creates an `Event` object, the properties of which
    contain info about the event, including the following:'
  id: totrans-345
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当事件触发时，DOM会创建一个`Event`对象，其属性包含关于事件的信息，包括以下内容：
- en: '`target`: The web page element to which the event occurred. For example, if
    you set up a `click` handler for a `div` element, that `div` is the target of
    the click.'
  id: totrans-346
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`target`: 事件发生的网页元素。例如，如果你为一个`div`元素设置了`click`事件处理程序，那么该`div`就是点击事件的目标。'
- en: '`which`: A numeric code that specifies the key that was pressed during a `keypress`
    event.'
  id: totrans-347
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`which`: 一个数字代码，指定在`keypress`事件中按下的键。'
- en: '`pageX`: The distance (in pixels) that the mouse pointer was from the left
    edge of the browser’s content area when the event fired.'
  id: totrans-348
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`pageX`: 鼠标指针距离浏览器内容区左边缘的距离（以像素为单位）当事件触发时。'
- en: '`pageY`: The distance (in pixels) that the mouse pointer was from the top edge
    of the browser’s content area when the event fired.'
  id: totrans-349
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`pageY`: 鼠标指针距离浏览器内容区顶部边缘的距离（以像素为单位）当事件触发时。'
- en: '`metaKey`: A Boolean value that equals `true` if the user had the Windows key
    (![Windows](images/windows.png)) or the Mac Command key (⌘  ) held down when the
    event fired.'
  id: totrans-350
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`metaKey`: 一个布尔值，如果用户在事件触发时按下了Windows键 (![Windows](images/windows.png)) 或 Mac
    Command键 (⌘  )，则该值为`true`。'
- en: '`shiftKey`: A Boolean value that equals `true` if the user had the Shift key
    held down when the event fired.'
  id: totrans-351
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`shiftKey`: 一个布尔值，如果用户在事件触发时按下了Shift键，则该值为`true`。'
- en: 'To access these properties, you insert a name for the `Event` object as an
    argument in your event handler’s callback function:'
  id: totrans-352
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要访问这些属性，你需要在事件处理程序的回调函数中插入一个`Event`对象的名称作为参数：
- en: '`*element*.addEventListener(*event*, function(e) { *This code runs when the
    event fires* });`'
  id: totrans-353
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`*element*.addEventListener(*event*, function(e) { *该代码在事件触发时运行* });`'
- en: '***Note:*** `e` is a name for the `Event` object that the DOM generates when
    the event fires. You can use whatever name you want, but most coders use `e` (although
    `evt` and `event` are also common).'
  id: totrans-354
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '***注意:*** `e` 是事件对象 `Event` 的名称，该对象由 DOM 在事件触发时生成。你可以使用任何你想要的名称，但大多数开发者使用 `e`（虽然
    `evt` 和 `event` 也很常见）。'
- en: 'For example, when handling the `keypress` event, you need access to the `which`
    property to find out the code for the key the user pressed. Here’s an example
    page that can help you determine which code value to use:'
  id: totrans-355
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，在处理 `keypress` 事件时，你需要访问 `which` 属性来找出用户按下的键的代码。以下是一个示例页面，帮助你确定需要使用的代码值：
- en: 'HTML:'
  id: totrans-356
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 'HTML:'
- en: '`<div> Type a key: </div> <input id="key-input" type="text"> <div> Here''s
    the code of the key you pressed: </div> <div id="key-output"> </div>`'
  id: totrans-357
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<div> 输入一个键： </div> <input id="key-input" type="text"> <div> 你按下的键的代码是： </div>
    <div id="key-output"> </div>`'
- en: 'JavaScript:'
  id: totrans-358
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 'JavaScript:'
- en: '`const keyInput = document.getElementById(''key-input''); keyInput.addEventListener(''keypress'',
    function(e) { const keyOutput = document.getElementById(''key-output''); keyOutput.innerHTML
    = e.which; });`'
  id: totrans-359
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const keyInput = document.getElementById(''key-input''); keyInput.addEventListener(''keypress'',
    function(e) { const keyOutput = document.getElementById(''key-output''); keyOutput.innerHTML
    = e.which; });`'
- en: The HTML sets up an `<input>` tag to accept a keystroke, and a `<div>` tag with
    `id="key-output"` to use for the output. The JavaScript code adds a `keypress`
    event listener to the `input` element, and when the event fires, the callback
    function writes `e.which` to the output `div`. [Figure 6-7](#c06-fig-0007) shows
    the page in action.
  id: totrans-360
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: HTML 设置了一个 `<input>` 标签来接收按键输入，并且设置了一个 `id="key-output"` 的 `<div>` 标签来显示输出。JavaScript
    代码为 `input` 元素添加了一个 `keypress` 事件监听器，当事件触发时，回调函数将 `e.which` 写入到输出的 `div` 中。[图
    6-7](#c06-fig-0007) 展示了页面的实际效果。
- en: '![A snapshot of the paulmcfederies webpage. The fields include, type a key,
    a. Here''s the code of the key you pressed: 97.](images/9781394263219-fg0607.png)'
  id: totrans-361
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![Paulmcfederies 网页的快照，字段包括，输入一个键，一个。你按下的键的代码是：97。](images/9781394263219-fg0607.png)'
- en: '[FIGURE 6-7:](#rc06-fig-0007) The `keypress` event callback function uses `e.which`
    to write the numeric code of the pressed key to the `div` element.'
  id: totrans-362
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[图 6-7:](#rc06-fig-0007) `keypress` 事件的回调函数使用 `e.which` 将按下的键的数字代码写入到 `div`
    元素中。'
