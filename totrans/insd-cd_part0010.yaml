- en: 'Chapter 9: Control Structures and Flow'
  id: totrans-0
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 第9章：控制结构和流程
- en: '`9.1 Understanding Conditional Statements`'
  id: totrans-1
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`9.1 理解条件语句`'
- en: Conditional statements are fundamental control structures in programming that
    allow you to make decisions in your code based on specific conditions. These statements
    enable you to create branches in your program’s execution, making it responsive
    and adaptable. In this section, we will explore conditional statements in various
    programming languages, including `C`, `C++`, `Java`, `JavaScript`, and `Python`.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 条件语句是编程中的基本控制结构，它允许你根据特定条件在代码中做出决策。这些语句使得程序的执行具有分支结构，从而使程序更加灵活和适应不同情况。在本节中，我们将探讨多种编程语言中的条件语句，包括
    `C`、`C++`、`Java`、`JavaScript` 和 `Python`。
- en: The `If` Statement
  id: totrans-3
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`If` 语句'
- en: '`C` and `C++`'
  id: totrans-4
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`C` 和 `C++`'
- en: 'In `C` and `C++`, the `if` statement is used for conditional branching. It
    evaluates a boolean expression and executes a block of code if the condition is
    true. Here’s a basic example in `C`:'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在 `C` 和 `C++` 中，`if` 语句用于条件分支。它会评估一个布尔表达式，并在条件为真时执行一块代码。以下是 `C` 中的一个基本示例：
- en: '`if (condition) {`'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`if (condition) {`'
- en: '`// Code to execute when the condition is true`'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 当条件为真时执行的代码`'
- en: '`} else {`'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`} else {`'
- en: '`// Code to execute when the condition is false`'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 当条件为假时执行的代码`'
- en: '`}`'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`Java`'
  id: totrans-11
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java`'
- en: '`Java` follows a similar syntax for the `if` statement:'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java` 的 `if` 语句语法类似：'
- en: '`if (condition) {`'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`if (condition) {`'
- en: '`// Code to execute when the condition is true`'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 当条件为真时执行的代码`'
- en: '`} else {`'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`} else {`'
- en: '`// Code to execute when the condition is false`'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 当条件为假时执行的代码`'
- en: '`}`'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`JavaScript`'
  id: totrans-18
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`JavaScript`'
- en: 'In `JavaScript`, the `if` statement is used for conditional execution:'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在 `JavaScript` 中，`if` 语句用于条件执行：
- en: '`if (condition) {`'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`if (condition) {`'
- en: '`// Code to execute when the condition is true`'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 当条件为真时执行的代码`'
- en: '`} else {`'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`} else {`'
- en: '`// Code to execute when the condition is false`'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 当条件为假时执行的代码`'
- en: '`}`'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`Python`'
  id: totrans-25
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`Python`'
- en: '`Python`’s `if` statement is concise and easy to read:'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Python` 的 `if` 语句简洁且易于阅读：'
- en: '`if condition:`'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`if condition:`'
- en: '`# Code to execute when the condition is true`'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`# 当条件为真时执行的代码`'
- en: '`else:`'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`else:`'
- en: '`# Code to execute when the condition is false`'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`# 当条件为假时执行的代码`'
- en: The `Switch` Statement
  id: totrans-31
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`Switch` 语句'
- en: '`C` and `C++`'
  id: totrans-32
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`C` 和 `C++`'
- en: '`C` and `C++` provide the `switch` statement for multi-way branching. It evaluates
    an expression and executes code blocks based on the value of the expression. Here’s
    a `C` example:'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`C` 和 `C++` 提供了 `switch` 语句，用于多重分支。它会评估一个表达式，并根据表达式的值执行不同的代码块。以下是 `C` 的示例：'
- en: '`switch (expression) {`'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`switch (expression) {`'
- en: '`case value1:`'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`case value1:`'
- en: '`// Code to execute when expression matches value1`'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 当表达式匹配 value1 时执行的代码`'
- en: '`break;`'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`break;`'
- en: '`case value2:`'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`case value2:`'
- en: '`// Code to execute when expression matches value2`'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 当表达式匹配 value2 时执行的代码`'
- en: '`break;`'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`break;`'
- en: '`default:`'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`default:`'
- en: '`// Code to execute when no case matches`'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 当没有匹配的 case 时执行的代码`'
- en: '`}`'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`Java`'
  id: totrans-44
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java`'
- en: '`Java` also includes the `switch` statement:'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java` 也包含 `switch` 语句：'
- en: '`switch (expression) {`'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`switch (expression) {`'
- en: '`case value1:`'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`case value1:`'
- en: '`// Code to execute when expression matches value1`'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 当表达式匹配 value1 时执行的代码`'
- en: '`break;`'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`break;`'
- en: '`case value2:`'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`case value2:`'
- en: '`// Code to execute when expression matches value2`'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 当表达式匹配 value2 时执行的代码`'
- en: '`break;`'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`break;`'
- en: '`default:`'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`default:`'
- en: '`// Code to execute when no case matches`'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 当没有匹配的 case 时执行的代码`'
- en: '`}`'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: The Ternary Operator
  id: totrans-56
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 三元运算符
- en: All Languages
  id: totrans-57
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 所有语言
- en: 'The ternary operator is a concise way to write conditional expressions in all
    the mentioned languages. It has the following syntax:'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 三元运算符是一种简洁的方式，用于编写所有上述语言中的条件表达式。其语法如下：
- en: '`result = value_if_true if condition else value_if_false`'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`result = value_if_true if condition else value_if_false`'
- en: Conditional Statements Best Practices
  id: totrans-60
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 条件语句最佳实践
- en: •   `Keep conditions simple and readable.`
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: •   `保持条件简洁且易于阅读。`
- en: •   `Use indentation and formatting to make your code clear.`
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: •   `使用缩进和格式化来使代码更加清晰。`
- en: •   `Avoid nested conditional statements when possible for better code maintainability.`
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: •   `尽量避免使用嵌套条件语句，以提高代码可维护性。`
- en: •   `Use the ternary operator for concise conditional expressions.`
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: •   `使用三元运算符来编写简洁的条件表达式。`
- en: •   `Document your code to explain complex or unusual conditions.`
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: •   `对复杂或不常见的条件进行代码注释说明。`
- en: Conditional statements are vital for creating dynamic and responsive programs.
    They allow you to control the flow of your code and make decisions based on specific
    conditions, enhancing the functionality of your software.
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 条件语句对于创建动态和响应式的程序至关重要。它们使你能够控制代码的执行流程，并根据特定条件做出决策，从而增强软件的功能性。
- en: '* * *'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '* * *'
- en: '`9.2 Loop Constructs Across Different Languages`'
  id: totrans-68
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`9.2 不同语言中的循环结构`'
- en: 循环结构对于执行编程中的重复任务至关重要。它们允许你多次执行代码块，这在处理数据集合、迭代元素或实现算法时特别有用。在本节中，我们将探讨多种编程语言中的循环结构，包括`C`、`C++`、`Java`、`JavaScript`和`Python`。
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 循环结构对于执行编程中的重复任务至关重要。它们允许你多次执行代码块，这在处理数据集合、迭代元素或实现算法时特别有用。在本节中，我们将探讨多种编程语言中的循环结构，包括`C`、`C++`、`Java`、`JavaScript`和`Python`。
- en: '`The For Loop`'
  id: totrans-70
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`for 循环`'
- en: '`C`和`C++`'
  id: totrans-71
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`C`和`C++`'
- en: 在`C`和`C++`中，`for`循环通常用于迭代一系列值。它的语法如下：
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在`C`和`C++`中，`for`循环通常用于迭代一系列值。它的语法如下：
- en: '`for  (initialization; condition; increment/decrement)  {`'
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`for  (initialization; condition; increment/decrement)  {`'
- en: '`// Code to execute in each iteration`'
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 每次迭代时执行的代码`'
- en: '`}`'
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`Here’s an example that prints numbers from 1 to 5 in C:`'
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`以下是一个在C语言中打印从1到5的数字的示例：`'
- en: '`for  (int i =  1; i <=  5; i++)  {`'
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`for  (int i =  1; i <=  5; i++)  {`'
- en: '`printf("%d ", i);`'
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`printf("%d ", i);`'
- en: '`}`'
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`Java`'
  id: totrans-80
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java`'
- en: '`Java`也使用`for`循环，语法类似：'
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java`也使用`for`循环，语法类似： '
- en: '`for  (initialization; condition; increment/decrement)  {`'
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`for  (initialization; condition; increment/decrement)  {`'
- en: '`// Code to execute in each iteration`'
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 每次迭代时执行的代码`'
- en: '`}`'
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`Here’s the same example in Java:`'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`以下是Java语言中的相同示例：`'
- en: '`for  (int i =  1; i <=  5; i++)  {`'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`for  (int i =  1; i <=  5; i++)  {`'
- en: '`System.out.print(i +  " ");`'
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`System.out.print(i +  " ");`'
- en: '`}`'
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`JavaScript`'
  id: totrans-89
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`JavaScript`'
- en: 在`JavaScript`中，`for`循环非常灵活。它可以迭代数组、对象或一系列值：
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在`JavaScript`中，`for`循环非常灵活。它可以迭代数组、对象或一系列值：
- en: '`for (initialization; condition; increment/decrement) {`'
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`for (initialization; condition; increment/decrement) {`'
- en: '`// Code to execute in each iteration`'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 每次迭代时执行的代码`'
- en: '`}`'
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`Here’s an example of iterating through an array in JavaScript:`'
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`以下是一个在JavaScript中遍历数组的示例：`'
- en: '`const numbers = [1,  2,  3,  4,  5];`'
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const numbers = [1,  2,  3,  4,  5];`'
- en: '`for (let i =  0; i < numbers.length; i++) {`'
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`for (let i =  0; i < numbers.length; i++) {`'
- en: '`console.log(numbers[i]);`'
  id: totrans-97
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.log(numbers[i]);`'
- en: '`}`'
  id: totrans-98
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`Python`'
  id: totrans-99
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`Python`'
- en: '`Python`使用`for-in`循环，旨在迭代集合，如列表、元组和字典：'
  id: totrans-100
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Python`使用`for-in`循环，旨在迭代集合，如列表、元组和字典：'
- en: '`for element in iterable:`'
  id: totrans-101
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`for element in iterable:`'
- en: '`# Code to execute in each iteration`'
  id: totrans-102
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`# 每次迭代时执行的代码`'
- en: '`Here’s an example of iterating through a list in Python:`'
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`以下是一个在Python中遍历列表的示例：`'
- en: '`numbers = [1, 2, 3, 4, 5]`'
  id: totrans-104
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`numbers = [1, 2, 3, 4, 5]`'
- en: '`for num in numbers:`'
  id: totrans-105
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`for num in numbers:`'
- en: '`print(num)`'
  id: totrans-106
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`print(num)`'
- en: '`The While Loop`'
  id: totrans-107
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`while 循环`'
- en: '`All Languages`'
  id: totrans-108
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`所有语言`'
- en: '`The while loop is used for indefinite iteration until a certain condition
    is met. It has the following syntax:`'
  id: totrans-109
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`while循环用于在某个条件满足之前进行不确定次的迭代。它的语法如下：`'
- en: '`while (condition) {`'
  id: totrans-110
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`while (condition) {`'
- en: '`// Code to execute as  long  as the condition is true`'
  id: totrans-111
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 当条件为真时执行的代码`'
- en: '`}`'
  id: totrans-112
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`Here’s an example of a while loop in Python:`'
  id: totrans-113
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`以下是一个在Python中使用while循环的示例：`'
- en: '`count =  1`'
  id: totrans-114
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`count =  1`'
- en: '`while count <=  5:`'
  id: totrans-115
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`while count <=  5:`'
- en: '`print(count)`'
  id: totrans-116
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`print(count)`'
- en: '`count +=  1`'
  id: totrans-117
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`count +=  1`'
- en: '`The Do-While Loop`'
  id: totrans-118
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`do-while循环`'
- en: '`C`和`C++`'
  id: totrans-119
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`C`和`C++`'
- en: '`C`和`C++`也支持`do-while`循环，确保循环体至少执行一次，即使条件在之后为假。它的语法如下：'
  id: totrans-120
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`C`和`C++`也支持`do-while`循环，确保循环体至少执行一次，即使条件在之后为假。它的语法如下：'
- en: '`do  {`'
  id: totrans-121
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`do  {`'
- en: '`// Code to execute`'
  id: totrans-122
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 执行代码`'
- en: '`}  while  (condition);`'
  id: totrans-123
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}  while  (condition);`'
- en: '`Here’s an example in C:`'
  id: totrans-124
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`以下是C语言中的一个示例：`'
- en: '`int count =  1;`'
  id: totrans-125
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int count =  1;`'
- en: '`do  {`'
  id: totrans-126
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`do  {`'
- en: '`printf("%d ", count);`'
  id: totrans-127
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`printf("%d ", count);`'
- en: '`count++;`'
  id: totrans-128
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`count++;`'
- en: '`}  while  (count <=  5);`'
  id: totrans-129
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}  while  (count <=  5);`'
- en: 循环结构在编程中是基础，可以有效地自动化重复任务。根据语言的不同，你可以选择最适合特定需求的循环结构，无论是迭代数据结构、执行计算还是控制程序流程。
  id: totrans-130
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 循环结构在编程中是基础，可以有效地自动化重复任务。根据语言的不同，你可以选择最适合特定需求的循环结构，无论是迭代数据结构、执行计算还是控制程序流程。
- en: '`* * *`'
  id: totrans-131
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`* * *`'
- en: '`9.3 Recursive Functions and Their Usage`'
  id: totrans-132
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`9.3 递归函数及其应用`'
- en: '`Recursion is a powerful programming concept that allows a function to call
    itself. Recursive functions are used when a problem can be divided into smaller,
    similar sub-problems. In this section, we will explore recursive functions and
    their usage in various programming languages, including C, C++, Java, JavaScript,
    and Python.`'
  id: totrans-133
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`递归是一个强大的编程概念，允许一个函数调用自身。当一个问题可以分解为更小、更相似的子问题时，就可以使用递归函数。在本节中，我们将探讨递归函数及其在多种编程语言中的应用，包括C、C++、Java、JavaScript和Python。`'
- en: '`Recursive Functions in C and C++`'
  id: totrans-134
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`C和C++中的递归函数`'
- en: '`C and C++ support recursive functions, which can be used to solve problems
    like calculating factorial, generating Fibonacci sequences, or traversing tree
    structures.`'
  id: totrans-135
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`C和C++支持递归函数，可以用来解决像计算阶乘、生成斐波那契数列或遍历树结构等问题。`'
- en: '`Factorial Calculation`'
  id: totrans-136
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`阶乘计算`'
- en: '`Here’s an example of a recursive function to calculate the factorial of a
    number in C:`'
  id: totrans-137
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`这是一个递归函数示例，用于计算一个数字的阶乘（C语言实现）：`'
- en: '`#include <stdio.h>`'
  id: totrans-138
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`#include <stdio.h>`'
- en: '`int factorial(int n) {`'
  id: totrans-139
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int factorial(int n) {`'
- en: '`if (n <= 1) {`'
  id: totrans-140
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`if (n <= 1) {`'
- en: '`return 1;`'
  id: totrans-141
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return 1;`'
- en: '`} else {`'
  id: totrans-142
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`} else {`'
- en: '`return n * factorial(n - 1);`'
  id: totrans-143
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return n * factorial(n - 1);`'
- en: '`}`'
  id: totrans-144
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-145
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`int main() {`'
  id: totrans-146
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int main() {`'
- en: '`int num = 5;`'
  id: totrans-147
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int num = 5;`'
- en: '`printf("Factorial of %d is %d\n", num, factorial(num));`'
  id: totrans-148
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`printf("Factorial of %d is %d\n", num, factorial(num));`'
- en: '`return 0;`'
  id: totrans-149
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return 0;`'
- en: '`}`'
  id: totrans-150
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`This code defines a factorial function that calls itself recursively until
    n becomes 1.` `It calculates the factorial of the given number.`'
  id: totrans-151
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`这段代码定义了一个阶乘函数，它会递归调用自身，直到n变为1。` `它计算给定数字的阶乘。`'
- en: '`Recursive Fibonacci`'
  id: totrans-152
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`递归斐波那契`'
- en: '`Another classic example is generating the Fibonacci sequence using recursion
    in C:`'
  id: totrans-153
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`另一个经典示例是在 C 中使用递归生成斐波那契数列：`'
- en: '`#include <stdio.h>`'
  id: totrans-154
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`#include <stdio.h>`'
- en: '`int fibonacci(int n) {`'
  id: totrans-155
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int fibonacci(int n) {`'
- en: '`if (n <= 1) {`'
  id: totrans-156
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`if (n <= 1) {`'
- en: '`return n;`'
  id: totrans-157
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return n;`'
- en: '`} else {`'
  id: totrans-158
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`} else {`'
- en: '`return fibonacci(n - 1) + fibonacci(n - 2);`'
  id: totrans-159
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return fibonacci(n - 1) + fibonacci(n - 2);`'
- en: '`}`'
  id: totrans-160
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-161
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`int main() {`'
  id: totrans-162
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int main() {`'
- en: '`int num = 6;`'
  id: totrans-163
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int num = 6;`'
- en: '`printf("Fibonacci sequence up to %d terms:\n", num);`'
  id: totrans-164
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`printf("斐波那契数列前 %d 项：\n", num);`'
- en: '`for (int i = 0; i < num; i++) {`'
  id: totrans-165
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`for (int i = 0; i < num; i++) {`'
- en: '`printf("%d ", fibonacci(i));`'
  id: totrans-166
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`printf("%d ", fibonacci(i));`'
- en: '`}`'
  id: totrans-167
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`printf("\n");`'
  id: totrans-168
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`printf("\n");`'
- en: '`return 0;`'
  id: totrans-169
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return 0;`'
- en: '`}`'
  id: totrans-170
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`This code defines a fibonacci function that calls itself to calculate Fibonacci
    numbers recursively.`'
  id: totrans-171
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`这段代码定义了一个斐波那契函数，它通过递归调用自身来计算斐波那契数。`'
- en: '`Recursive Functions in Java`'
  id: totrans-172
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java 中的递归函数`'
- en: '`Java also supports recursive functions. Let’s look at a few examples.`'
  id: totrans-173
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java 也支持递归函数。让我们看几个例子。`'
- en: '`Binary Search`'
  id: totrans-174
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`二分查找`'
- en: '`Binary search can be implemented using recursion in Java:`'
  id: totrans-175
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java 中可以使用递归实现二分查找：`'
- en: '`public class BinarySearch {`'
  id: totrans-176
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public class BinarySearch {`'
- en: '`public static int binarySearch(int[] arr, int target, int left, int right)
    {`'
  id: totrans-177
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public static int binarySearch(int[] arr, int target, int left, int right)
    {`'
- en: '`if (left <= right) {`'
  id: totrans-178
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`if (left <= right) {`'
- en: '`int mid = left + (right - left) / 2;`'
  id: totrans-179
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int mid = left + (right - left) / 2;`'
- en: '`if (arr[mid] == target) {`'
  id: totrans-180
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`if (arr[mid] == target) {`'
- en: '`return mid;`'
  id: totrans-181
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return mid;`'
- en: '`}`'
  id: totrans-182
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`if (arr[mid] < target) {`'
  id: totrans-183
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`if (arr[mid] < target) {`'
- en: '`return` `binarySearch(arr, target, mid + 1, right);`'
  id: totrans-184
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return` `binarySearch(arr, target, mid + 1, right);`'
- en: '`} else {`'
  id: totrans-185
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`} else {`'
- en: '`return binarySearch(arr, target, left, mid - 1);`'
  id: totrans-186
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return binarySearch(arr, target, left, mid - 1);`'
- en: '`}`'
  id: totrans-187
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-188
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`return -1;`'
  id: totrans-189
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return -1;`'
- en: '`}`'
  id: totrans-190
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`public static void main(String[] args) {`'
  id: totrans-191
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public static void main(String[] args) {`'
- en: '`int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};`'
  id: totrans-192
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};`'
- en: '`int target = 5;`'
  id: totrans-193
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int target = 5;`'
- en: '`int result = binarySearch(arr, target, 0, arr.length - 1);`'
  id: totrans-194
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int result = binarySearch(arr, target, 0, arr.length - 1);`'
- en: '`if (result != -1) {`'
  id: totrans-195
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`if (result != -1) {`'
- en: '`System.out.println("Element found at index " + result);`'
  id: totrans-196
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`System.out.println("元素在索引 " + result + " 处找到");`'
- en: '`} else {`'
  id: totrans-197
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`} else {`'
- en: '`System.out.println("Element not found");`'
  id: totrans-198
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`System.out.println("元素未找到");`'
- en: '`}`'
  id: totrans-199
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-200
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-201
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`This Java code demonstrates a recursive binary search algorithm to find an
    element in a sorted array.`'
  id: totrans-202
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`这段 Java 代码演示了一个递归的二分查找算法，用于在排序数组中查找一个元素。`'
- en: '`Recursive Functions in JavaScript`'
  id: totrans-203
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`JavaScript 中的递归函数`'
- en: '`JavaScript is well-suited for recursive functions due to its dynamic nature.
    Here’s an example of a recursive function to calculate factorial in JavaScript:`'
  id: totrans-204
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`JavaScript 由于其动态特性，非常适合递归函数。下面是一个使用递归计算阶乘的 JavaScript 示例：`'
- en: '`function factorial(n) {`'
  id: totrans-205
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`function factorial(n) {`'
- en: '`if (n <= 1) {`'
  id: totrans-206
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`if (n <= 1) {`'
- en: '`return 1;`'
  id: totrans-207
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return 1;`'
- en: '`} else {`'
  id: totrans-208
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`} else {`'
- en: '`return n * factorial(n - 1);`'
  id: totrans-209
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return n * factorial(n - 1);`'
- en: '`}`'
  id: totrans-210
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-211
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`const num = 5;`'
  id: totrans-212
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const num = 5;`'
- en: '`console.log(`Factorial of ${num} is ${factorial(num)}`);`'
  id: totrans-213
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.log(`Factorial of ${num} is ${factorial(num)}`);`'
- en: '`JavaScript also allows recursion for tree traversal, nested data structures,
    and various other algorithms.`'
  id: totrans-214
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`JavaScript 也允许使用递归进行树遍历、嵌套数据结构处理和各种其他算法。`'
- en: '`Recursive Functions in Python`'
  id: totrans-215
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`Python 中的递归函数`'
- en: '`Python`支持递归，并且很容易实现递归函数。这里有一个计算数字阶乘的递归函数示例：'
  id: totrans-216
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Python`支持递归，并且很容易实现递归函数。这里有一个计算数字阶乘的递归函数示例：'
- en: '`def factorial(n):`'
  id: totrans-217
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`def factorial(n):`'
- en: '`if n <= 1:`'
  id: totrans-218
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`if n <= 1:`'
- en: '`return 1`'
  id: totrans-219
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return 1`'
- en: '`else:`'
  id: totrans-220
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`else:`'
- en: '`return n * factorial(n - 1)`'
  id: totrans-221
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return n * factorial(n - 1)`'
- en: '`num = 5`'
  id: totrans-222
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`num = 5`'
- en: '`print(f"Factorial of {num} is {factorial(num)}")`'
  id: totrans-223
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`print(f"Factorial of {num} is {factorial(num)}")`'
- en: '`Python`的简单性和可读性使其成为实现递归算法的优秀选择。'
  id: totrans-224
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Python`的简单性和可读性使其成为实现递归算法的优秀选择。'
- en: '`递归是一种强大的技术，但应谨慎使用。确保有一个基本情况，以确保递归调用最终终止是至关重要的。递归函数可以是某些问题的优雅且简洁的解决方案，但由于函数调用栈，它们可能消耗额外的内存。了解何时以及如何使用递归对高效和可维护的代码至关重要。`'
  id: totrans-225
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`递归是一种强大的技术，但应谨慎使用。确保有一个基本情况，以确保递归调用最终终止是至关重要的。递归函数可以是某些问题的优雅且简洁的解决方案，但由于函数调用栈，它们可能消耗额外的内存。了解何时以及如何使用递归对高效和可维护的代码至关重要。`'
- en: '`* * *`'
  id: totrans-226
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`* * *`'
- en: '`9.4 Exception Handling and Flow Control`'
  id: totrans-227
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`9.4 异常处理与流程控制`'
- en: '`异常处理是编程中的一个关键方面，允许开发人员优雅地处理意外情况或错误。在本节中，我们将探讨不同编程语言如何处理异常和控制流。`'
  id: totrans-228
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`异常处理是编程中的一个关键方面，允许开发人员优雅地处理意外情况或错误。在本节中，我们将探讨不同编程语言如何处理异常和控制流。`'
- en: '`Exception Handling in C++`'
  id: totrans-229
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`C++ 中的异常处理`'
- en: '`C++`使用强大的异常处理机制，允许开发人员使用`try`、`catch`和`throw`关键字来捕获和处理异常。`'
  id: totrans-230
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`C++`使用强大的异常处理机制，允许开发人员使用`try`、`catch`和`throw`关键字来捕获和处理异常。`'
- en: '`#include <iostream>`'
  id: totrans-231
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`#include <iostream>`'
- en: '`#include <stdexcept>`'
  id: totrans-232
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`#include <stdexcept>`'
- en: '`int main() {`'
  id: totrans-233
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int main() {`'
- en: '`try {`'
  id: totrans-234
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`try {`'
- en: '`int x = 10;`'
  id: totrans-235
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int x = 10;`'
- en: '`int y = 0;`'
  id: totrans-236
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int y = 0;`'
- en: '`if (y == 0) {`'
  id: totrans-237
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`if (y == 0) {`'
- en: '`throw std::runtime_error("Division by zero is not allowed.");`'
  id: totrans-238
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`throw std::runtime_error("不允许除以零。");`'
- en: '`}`'
  id: totrans-239
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`int result = x / y;`'
  id: totrans-240
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int result = x / y;`'
- en: '`std::cout << "Result: " << result << std::endl;`'
  id: totrans-241
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`std::cout << "结果: " << result << std::endl;`'
- en: '`} catch (const std::exception& e) {`'
  id: totrans-242
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`} catch (const std::exception& e) {`'
- en: '`std::cerr << "Exception: " << e.what() << std::endl;`'
  id: totrans-243
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`std::cerr << "异常: " << e.what() << std::endl;`'
- en: '`}`'
  id: totrans-244
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`return 0;`'
  id: totrans-245
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return 0;`'
- en: '`}`'
  id: totrans-246
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`在这段`C++`代码中，我们尝试执行除以零的操作，这是不允许的。一个异常被抛出，我们使用`catch`块捕获它。程序在处理完异常后继续执行。`'
  id: totrans-247
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`在这段`C++`代码中，我们尝试执行除以零的操作，这是不允许的。一个异常被抛出，我们使用`catch`块捕获它。程序在处理完异常后继续执行。`'
- en: '`Exception Handling in Java`'
  id: totrans-248
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java中的异常处理`'
- en: '`Java`同样提供强大的异常处理机制，使用`try`、`catch`和`throw`关键字。`'
  id: totrans-249
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java`同样提供强大的异常处理机制，使用`try`、`catch`和`throw`关键字。`'
- en: '`public class ExceptionHandlingExample {`'
  id: totrans-250
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public class ExceptionHandlingExample {`'
- en: '`public static void main(String[] args) {`'
  id: totrans-251
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public static void main(String[] args) {`'
- en: '`try {`'
  id: totrans-252
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`try {`'
- en: '`int x = 10;`'
  id: totrans-253
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int x = 10;`'
- en: '`int y = 0;`'
  id: totrans-254
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int y = 0;`'
- en: '`if (y == 0) {`'
  id: totrans-255
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`if (y == 0) {`'
- en: '`throw new ArithmeticException("Division by zero is not allowed.");`'
  id: totrans-256
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`throw new ArithmeticException("Division by zero is not allowed.");`'
- en: '`}`'
  id: totrans-257
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`int result = x / y;`'
  id: totrans-258
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int result = x / y;`'
- en: '`System.out.println("Result: " + result);`'
  id: totrans-259
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`System.out.println("Result: " + result);`'
- en: '`} catch (ArithmeticException e) {`'
  id: totrans-260
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`} catch (ArithmeticException e) {`'
- en: '`System.err.println("Exception: " + e.getMessage());`'
  id: totrans-261
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`System.err.println("Exception: " + e.getMessage());`'
- en: '`}`'
  id: totrans-262
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-263
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-264
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`这段`Java`代码演示了如何通过抛出和捕获`ArithmeticException`来处理异常。`'
  id: totrans-265
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`这段`Java`代码演示了如何通过抛出和捕获`ArithmeticException`来处理异常。`'
- en: '`Exception Handling in JavaScript`'
  id: totrans-266
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`JavaScript中的异常处理`'
- en: '`JavaScript`采用不同的方法来处理异常，依赖于`try`、`catch`和`finally`块。`'
  id: totrans-267
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`JavaScript`采用不同的方法来处理异常，依赖于`try`、`catch`和`finally`块。`'
- en: '`try {`'
  id: totrans-268
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`try {`'
- en: '`let x = 10;`'
  id: totrans-269
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`let x = 10;`'
- en: '`let y = 0;`'
  id: totrans-270
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`let y = 0;`'
- en: '`if (y === 0) {`'
  id: totrans-271
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`if (y === 0) {`'
- en: '`throw new Error("Division by zero is not allowed.");`'
  id: totrans-272
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`throw new Error("Division by zero is not allowed.");`'
- en: '`}`'
  id: totrans-273
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`let result = x / y;`'
  id: totrans-274
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`let result = x / y;`'
- en: '`console.log("Result: " + result);`'
  id: totrans-275
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.log("Result: " + result);`'
- en: '`} catch (error) {`'
  id: totrans-276
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`} catch (error) {`'
- en: '`console.error("Exception: " + error.message);`'
  id: totrans-277
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.error("Exception: " + error.message);`'
- en: '`} finally {`'
  id: totrans-278
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`} finally {`'
- en: '`console.log("Execution completed.");`'
  id: totrans-279
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.log("Execution completed.");`'
- en: '`}`'
  id: totrans-280
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`在这段`JavaScript`代码中，我们使用`try`、`catch`和`finally`来处理异常，并确保`finally`块始终执行，无论是否发生异常。`'
  id: totrans-281
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`在这段`JavaScript`代码中，我们使用`try`、`catch`和`finally`来处理异常，并确保`finally`块始终执行，无论是否发生异常。`'
- en: '`Exception Handling in Python`'
  id: totrans-282
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`Python中的异常处理`'
- en: Python offers a straightforward and clean way to handle exceptions using `try`
    and `except` blocks.
  id: totrans-283
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: Python提供了一种简单清晰的方式来处理异常，使用`try`和`except`块。
- en: '`try:`'
  id: totrans-284
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`try:`'
- en: '`x = 10`'
  id: totrans-285
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`x = 10`'
- en: '`y = 0`'
  id: totrans-286
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`y = 0`'
- en: '`if y == 0:`'
  id: totrans-287
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`if y == 0:`'
- en: '`raise ZeroDivisionError("Division by zero is not allowed.")`'
  id: totrans-288
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`raise ZeroDivisionError("Division by zero is not allowed.")`'
- en: '`result = x / y`'
  id: totrans-289
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`result = x / y`'
- en: '`print("Result:", result)`'
  id: totrans-290
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`print("Result:", result)`'
- en: '`except ZeroDivisionError as e:`'
  id: totrans-291
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`except ZeroDivisionError as e:`'
- en: '`print("Exception:", e)`'
  id: totrans-292
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`print("Exception:", e)`'
- en: This Python code demonstrates handling a `ZeroDivisionError` by raising and
    catching it using `try` and `except`.
  id: totrans-293
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这段Python代码演示了如何通过`try`和`except`来处理`ZeroDivisionError`。
- en: Exception handling is essential for writing robust and reliable code. It allows
    developers to anticipate and manage errors, improving the overall quality of software.
    Each programming language has its own way of dealing with exceptions, but the
    fundamental principles of identifying, handling, and possibly propagating errors
    are consistent across languages. Proper exception handling contributes to code
    resilience and user satisfaction.
  id: totrans-294
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 异常处理对于编写健壮可靠的代码至关重要。它允许开发者预测并管理错误，从而提高软件的整体质量。每种编程语言都有自己处理异常的方式，但识别、处理和可能传播错误的基本原则在各语言中是一致的。正确的异常处理有助于代码的韧性和用户的满意度。
- en: '`** **`'
  id: totrans-295
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`** **`'
- en: 9.5 Writing Efficient and Effective Control Structures
  id: totrans-296
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 9.5 编写高效且有效的控制结构
- en: In the world of programming, writing efficient and effective control structures
    is crucial for optimizing code performance and maintaining code readability. Control
    structures, including conditional statements and loops, govern the flow of a program
    and determine which code blocks are executed under different conditions. In this
    section, we will explore best practices and strategies for crafting control structures
    that strike a balance between performance and maintainability.
  id: totrans-297
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在编程世界中，编写高效且有效的控制结构对于优化代码性能和保持代码可读性至关重要。控制结构，包括条件语句和循环，决定了程序的执行流程，并决定在不同条件下执行哪些代码块。在本节中，我们将探索最佳实践和策略，帮助编写在性能和可维护性之间找到平衡的控制结构。
- en: Optimizing Conditional Statements
  id: totrans-298
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 优化条件语句
- en: Conditional statements, such as `if`, `else if`, and `else`, are used to make
    decisions in code. Optimizing them involves ensuring that the most likely conditions
    are checked first, reducing the number of unnecessary checks. This practice is
    known as “short-circuiting” and can significantly improve code execution speed.
  id: totrans-299
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 条件语句，例如`if`、`else if`和`else`，用于在代码中做出决策。优化这些语句涉及确保最可能的条件先被检查，从而减少不必要的检查次数。这种做法称为“短路”，能够显著提高代码执行速度。
- en: Inefficient
  id: totrans-300
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 低效
- en: '`if condition1:`'
  id: totrans-301
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`if condition1:`'
- en: '`# Code for condition1`'
  id: totrans-302
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`# 条件1的代码`'
- en: '`elif condition2:`'
  id: totrans-303
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`elif condition2:`'
- en: '`# Code for condition2`'
  id: totrans-304
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`# 条件2的代码`'
- en: More efficient (if `condition1` is more likely)
  id: totrans-305
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 更高效（如果`condition1`更可能发生）
- en: '`if condition1:`'
  id: totrans-306
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`if condition1:`'
- en: '`# Code for condition1`'
  id: totrans-307
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`# condition1的代码`'
- en: '`else:`'
  id: totrans-308
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`else:`'
- en: '`# Code for condition2`'
  id: totrans-309
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`# condition2的代码`'
- en: By ordering conditions based on likelihood, you reduce the number of checks
    the program has to perform.
  id: totrans-310
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 通过根据条件发生的可能性进行排序，您可以减少程序需要执行的检查次数。
- en: Loop Optimization
  id: totrans-311
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 循环优化
- en: Loops are essential for repetitive tasks, and optimizing them can lead to substantial
    performance improvements. One common technique is loop unrolling, where you manually
    expand the loop body to reduce loop control overhead.
  id: totrans-312
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 循环对于重复性任务至关重要，优化它们可以带来显著的性能提升。一种常见技术是循环展开，即手动扩展循环体以减少循环控制开销。
- en: '`// Loop unrolling in C`'
  id: totrans-313
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// C语言中的循环展开`'
- en: '`for (int i = 0; i < 10; i += 2) {`'
  id: totrans-314
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`for (int i = 0; i < 10; i += 2) {`'
- en: '`// Loop body for i`'
  id: totrans-315
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// i的循环体`'
- en: '`// Loop body for i + 1`'
  id: totrans-316
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// i + 1的循环体`'
- en: '`}`'
  id: totrans-317
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: Another optimization strategy is loop fusion, where you combine multiple loops
    into one to minimize memory access and overhead.
  id: totrans-318
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 另一种优化策略是循环融合，将多个循环合并为一个，以最小化内存访问和开销。
- en: Avoiding Nested Loops
  id: totrans-319
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 避免嵌套循环
- en: Nested loops can quickly lead to code complexity and reduced performance. Whenever
    possible, consider alternatives such as using dictionaries or sets for lookup
    operations instead of nested loops.
  id: totrans-320
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 嵌套循环可能会迅速导致代码复杂性增加，并降低性能。尽可能考虑使用字典或集合进行查找操作，替代嵌套循环。
- en: Nested loops
  id: totrans-321
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 嵌套循环
- en: '`for item1 in list1:`'
  id: totrans-322
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`for item1 in list1:`'
- en: '`for item2 in list2:`'
  id: totrans-323
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`for item2 in list2:`'
- en: '`if item1 == item2:`'
  id: totrans-324
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`if item1 == item2:`'
- en: '`# Perform some operation`'
  id: totrans-325
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`# 执行某些操作`'
- en: Alternative using sets
  id: totrans-326
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 使用集合的替代方案
- en: '`set1 = set(list1)`'
  id: totrans-327
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`set1 = set(list1)`'
- en: '`set2 = set(list2)`'
  id: totrans-328
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`set2 = set(list2)`'
- en: '`common_items = set1.intersection(set2)`'
  id: totrans-329
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`common_items = set1.intersection(set2)`'
- en: '`for item in common_items:`'
  id: totrans-330
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`for item in common_items:`'
- en: '`# Perform some operation`'
  id: totrans-331
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`# 执行某些操作`'
- en: 明智地使用`break`和`continue`
  id: totrans-332
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 明智地使用`break`和`continue`
- en: '`break`和`continue`语句是控制流的强大工具，但应明智地使用。过度使用它们会使代码变得不易读且更难维护。考虑使用替代控制结构或重构代码以减少对这些语句的需求。'
  id: totrans-333
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`break`和`continue`语句是控制流的强大工具，但应明智地使用。过度使用它们会使代码变得不易读且更难维护。考虑使用替代控制结构或重构代码以减少对这些语句的需求。'
- en: 定期代码审查和分析
  id: totrans-334
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 定期代码审查和分析
- en: 定期的代码审查和分析工具可以帮助识别控制结构中的性能瓶颈。分析工具提供了关于代码中哪些部分消耗最多资源的洞察，帮助您将优化工作集中在最重要的地方。
  id: totrans-335
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 定期的代码审查和分析工具可以帮助识别控制结构中的性能瓶颈。分析工具提供了关于代码中哪些部分消耗最多资源的洞察，帮助您将优化工作集中在最重要的地方。
- en: 选择正确的数据结构
  id: totrans-336
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 选择正确的数据结构
- en: 数据结构的选择会影响控制结构的效率。例如，使用哈希表进行快速查找或使用优先队列进行排序可以提高算法效率。
  id: totrans-337
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 数据结构的选择会影响控制结构的效率。例如，使用哈希表进行快速查找或使用优先队列进行排序可以提高算法效率。
- en: 总之，编写高效且有效的控制结构对于优化代码性能和可维护性至关重要。通过遵循最佳实践，优化条件语句和循环，避免过度嵌套，以及使用如分析工具等工具，您可以创建不仅运行更快，而且更易于维护和调试的代码。请记住，优化应以分析结果为指导，而不是过早优化，因为这可能导致代码复杂性而没有显著好处。
  id: totrans-338
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 总之，编写高效且有效的控制结构对于优化代码性能和可维护性至关重要。通过遵循最佳实践，优化条件语句和循环，避免过度嵌套，以及使用如分析工具等工具，您可以创建不仅运行更快，而且更易于维护和调试的代码。请记住，优化应以分析结果为指导，而不是过早优化，因为这可能导致代码复杂性而没有显著好处。
- en: '*** '
  id: totrans-339
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '*** '
