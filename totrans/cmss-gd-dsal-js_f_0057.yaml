- en: Insertion Sort
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ve previously encountered two different sorting algorithms: Bubble Sort
    and Selection Sort. Both have efficiencies of O(N²), but Selection Sort is actually
    twice as fast. Now you’ll learn about a third sorting algorithm called Insertion
    Sort that will reveal the power of analyzing scenarios beyond the worst case.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Insertion Sort consists of the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first pass-through, we temporarily remove the value at index 1 (the
    second cell) and store it in a temporary variable. This will leave a gap at that
    index, since it contains no value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/insertion_sort_1.png](images/optimizing_for_optimistic_scenarios/insertion_sort_1.png)![images/optimizing_for_optimistic_scenarios/insertion_sort_2.png](images/optimizing_for_optimistic_scenarios/insertion_sort_2.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: In subsequent pass-throughs, we remove the values at the subsequent indexes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We then begin a shifting phase, where we take each value to the left of the
    gap and compare it to the value in the temporary variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/insertion_sort_3.png](images/optimizing_for_optimistic_scenarios/insertion_sort_3.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'If the value to the left of the gap is greater than the temporary variable,
    we shift that value to the right:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/insertion_sort_4.png](images/optimizing_for_optimistic_scenarios/insertion_sort_4.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: As we shift values to the right, inherently the gap moves leftward. As soon
    as we encounter a value that is lower than the temporarily removed value or we
    reach the left end of the array, this shifting phase is over.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We then insert the temporarily removed value into the current gap:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/insertion_sort_5.png](images/optimizing_for_optimistic_scenarios/insertion_sort_5.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Steps 1 through 3 represent a single pass-through. We repeat these pass-throughs
    until the pass-through begins at the final index of the array. By then, the array
    will have been fully sorted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
