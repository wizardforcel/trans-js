- en: Searching
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: 'Here, again, is a binary search tree:'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`![images/binary_trees/bst_4.png](images/binary_trees/bst_4.png)`'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'The algorithm for searching within a binary search tree is as follows:'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Designate a node to be the current node. (At the beginning of the algorithm,
    the root node is the first current node.)
  id: totrans-4
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: Inspect the value at the current node.
  id: totrans-5
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: If we’ve found the value we’re looking for, great!
  id: totrans-6
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: If the value we’re looking for is less than the current node, search for it
    in its left subtree.
  id: totrans-7
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: If the value we’re looking for is greater than the current node, search for
    it in its right subtree.
  id: totrans-8
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: Repeat Steps 1 through 5 until we find the value we’re searching for, or until
    we hit the bottom of the tree, in which case our value must not be in the tree.
  id: totrans-9
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: Say we want to search for the `61`\. Let’s see how many steps it would take,
    by walking through this visually.
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'When searching through a tree, we must always begin at the root:'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`![images/binary_trees/bst_6.png](images/binary_trees/bst_6.png)`'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'Next, the computer asks itself: is the number we’re searching for (`61`) greater
    or less than the value of this node? If the number we’re looking for is less than
    the current node, look for it in the left child. If it’s greater than the current
    node, look for it in the right child.'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'In this example, because `61` is greater than `50`, we know it must be somewhere
    to the right, so we search the right child. In the following picture, we’ve shaded
    out all the nodes we’ve eliminated from our search, since we know that the `61`
    cannot possibly be there:'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`![images/binary_trees/bst_7.png](images/binary_trees/bst_7.png)`'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '“Are you my mother?” asks the algorithm. Since `the 75` is not `the 61` we’re
    looking for, we need to move down to the next level. And because `61` is less
    than `75`, we’ll check the left child, since the `61` could only be in that subtree,
    as shown in the following diagram:'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`![images/binary_trees/bst_8.png](images/binary_trees/bst_8.png)`'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '`The 56` is not `the 61` we’re looking for, so we continue our search. Since
    `61` is greater than `56`, we search for the `61` in the right child of the `56`:'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`![images/binary_trees/bst_9.png](images/binary_trees/bst_9.png)`'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: We found it! In this example, it took us four steps to find our desired value.
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The Efficiency of Searching a Binary Search Tree
  id: totrans-21
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: If you take another look at the steps we just walked through, you’ll notice
    that each step eliminates half of the remaining nodes from our search. For example,
    when we begin our search, we start at the root node, and our desired value may
    be found among any of the root’s descendants. However, when we then decide to
    continue the search with, say, the root’s right child, we eliminate the left child
    and all of its descendants from the search.
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: We’d say, then, that searching in a binary search tree is `O(log N)`, which
    is the apt description for any algorithm that eliminates half of the remaining
    values with each step. (We’ll see soon, though, that this is only for a perfectly
    balanced binary search tree, which is a best-case scenario.)
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Log(N) Levels`'
  id: totrans-24
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s yet another way of describing why search in a binary search tree is
    `O(log N)`, which will reveal another property about binary trees in general:
    if there’re `N` nodes in a balanced binary tree, there’ll be about `log N` levels
    (that is, rows).'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: To understand this, let’s assume each row in the tree is completely filled with
    nodes, and there aren’t any empty positions. If you think about it, each time
    we add a new full level to the tree, we end up roughly doubling the number of
    nodes the tree has. (Really, we’re doubling the nodes and adding one.)
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: For example, a binary tree with four complete levels has fifteen nodes. (Go
    ahead, count them.) If we add a fifth complete level, that means we add two children
    to each of the eight nodes in the fourth level. This means we add sixteen new
    nodes, roughly doubling the size of the tree.
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: It emerges that each new level doubles the size of the tree. Accordingly, a
    tree containing `N` nodes will require `log(N)` levels to hold all the nodes.
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In the context of binary search, we noted that the pattern of `log(N)` is that
    with each step of the search, we can eliminate half of the remaining data. The
    number of levels needed in a binary tree follows this pattern as well.
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Let’s take a binary tree that needs to hold thirty-one nodes. With our fifth
    level, we can hold sixteen of those nodes. This took care of roughly half of the
    data, leaving us with just fifteen nodes we still need to find room for. With
    the fourth level, we take care of eight of those nodes, leaving us with seven
    unaccounted for. With the third level, we take care of four of those nodes, and
    so on.
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Indeed, `log 31` is (approximately) 5. So we’ve now concluded that a balanced
    tree with `N` nodes will have `log(N)` levels.
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Since this is the case, it makes a lot of sense as to why searching a binary
    search tree takes up to `log(N)` steps: because each step of the search causes
    us to move down a level, we take up to as many steps as there are levels in the
    tree.'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: However you prefer to think about it, searching a binary search tree takes `O(log
    N)`.
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Now, while search in a binary search tree is `O(log N)`, so is binary search
    within an ordered array, in which each number we select also eliminates half of
    the remaining possible values. In this regard, then, searching a binary search
    tree has the same efficiency as binary search within an ordered array.
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Where binary search trees really shine over ordered arrays, though, is with
    insertion. We’ll get to that soon.
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Code Implementation: Searching a Binary Search Tree'
  id: totrans-36
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: 要实现搜索操作，以及其他二叉搜索树操作，我们将大量使用递归。你在第10章中学习过，[`*Recursively Recurse with Recursion*`](f_0096.xhtml#chp.recursion)，递归是处理具有任意深度的数据结构时的关键。树就是这样一种数据结构，因为它可以有无限多个层级。
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这是我们如何使用递归在JavaScript中实现搜索。虽然我们可以选择使用循环来替代，但搜索的递归代码更简洁优雅：
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function` search(`searchValue`, node) { |'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (!node `||` node.value === `searchValue`) { |'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` node; |'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (`searchValue` < node.value) { |'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` search(`searchValue`, node.`leftChild`); |'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } `else` { |'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` search(`searchValue`, node.`rightChild`); |'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 这个搜索函数接受我们要查找的`searchValue`和一个将作为搜索基点的节点。第一次调用`search`时，节点将是根节点。然而，在后续的递归调用中，节点可能是树中的另一个节点。
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 我们的函数处理四种可能的情况，其中两种是基准情况：
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `if` (!node `||` node.value === `searchValue`) { |'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` node; |'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 一个基准情况是当节点包含我们要查找的`searchValue`时，此时我们可以返回该节点，而不进行任何递归调用。
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 另一个基准情况是当没有节点时。这在我们检查其他情况后会更有意义，因此让我们稍后再回到这一点。
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 下一个情况是当`searchValue`小于当前节点的值时：
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `if` (`searchValue` < node.value) { |'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` search(`searchValue`, node.`leftChild`); |'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 在这种情况下，我们知道如果它存在于树中，`searchValue`一定会在该节点的左侧后裔中找到。因此，我们在该节点的左子节点上递归调用`search`函数。
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 下一个情况是反向；当`searchValue`大于当前节点时：
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `else` { |'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` search(`searchValue`, node.`rightChild`); |'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 在这种情况下，我们递归调用`search`在当前节点的右子节点上。
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 现在，当我们在当前节点的子节点上进行这些递归调用时，请注意我们并没有检查当前节点是否有任何子节点。这就是第一个基准情况出现的地方：
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `if` (!node ... |'
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_TB
- en: That is to say, if it turns out that we called `search` on a child node that
    doesn’t actually exist, we end up returning `null` (since the `node` variable
    will actually contain `null`). This case will happen if the `searchValue` doesn’t
    exist within our tree, as we’ll try to access the `node` where the `searchValue`
    should be found, but our search hits a dead end. In this case, it’s appropriate
    that we return `null`, indicating that the `searchValue` is not within the tree.
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
