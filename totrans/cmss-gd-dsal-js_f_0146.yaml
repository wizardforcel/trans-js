- en: Searching
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 搜索
- en: 'Here, again, is a binary search tree:'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里再次展示一个二叉搜索树：
- en: '`![images/binary_trees/bst_4.png](images/binary_trees/bst_4.png)`'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '`![images/binary_trees/bst_4.png](images/binary_trees/bst_4.png)`'
- en: 'The algorithm for searching within a binary search tree is as follows:'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在二叉搜索树中搜索的算法如下：
- en: Designate a node to be the current node. (At the beginning of the algorithm,
    the root node is the first current node.)
  id: totrans-4
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 指定一个节点作为当前节点。（在算法开始时，根节点是第一个当前节点。）
- en: Inspect the value at the current node.
  id: totrans-5
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 检查当前节点的值。
- en: If we’ve found the value we’re looking for, great!
  id: totrans-6
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 如果我们找到了我们要找的值，那就太好了！
- en: If the value we’re looking for is less than the current node, search for it
    in its left subtree.
  id: totrans-7
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 如果我们要找的值小于当前节点，则在其左子树中搜索。
- en: If the value we’re looking for is greater than the current node, search for
    it in its right subtree.
  id: totrans-8
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 如果我们要找的值大于当前节点，则在其右子树中搜索。
- en: Repeat Steps 1 through 5 until we find the value we’re searching for, or until
    we hit the bottom of the tree, in which case our value must not be in the tree.
  id: totrans-9
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 重复步骤1到5，直到我们找到所搜索的值，或者到达树的底部，在这种情况下，我们的值一定不在树中。
- en: Say we want to search for the `61`\. Let’s see how many steps it would take,
    by walking through this visually.
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 假设我们想搜索`61`。让我们看看需要多少步骤，通过视觉方式来走一遍。
- en: 'When searching through a tree, we must always begin at the root:'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在搜索树时，我们必须始终从根开始：
- en: '`![images/binary_trees/bst_6.png](images/binary_trees/bst_6.png)`'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '`![images/binary_trees/bst_6.png](images/binary_trees/bst_6.png)`'
- en: 'Next, the computer asks itself: is the number we’re searching for (`61`) greater
    or less than the value of this node? If the number we’re looking for is less than
    the current node, look for it in the left child. If it’s greater than the current
    node, look for it in the right child.'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 接下来，计算机自问：我们要搜索的数字（`61`）大于还是小于这个节点的值？如果我们要找的数字小于当前节点，则在左子节点中查找。如果大于当前节点，则在右子节点中查找。
- en: 'In this example, because `61` is greater than `50`, we know it must be somewhere
    to the right, so we search the right child. In the following picture, we’ve shaded
    out all the nodes we’ve eliminated from our search, since we know that the `61`
    cannot possibly be there:'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个例子中，因为`61`大于`50`，我们知道它一定在右边，所以我们搜索右子节点。在下图中，我们已经遮蔽掉了所有我们排除的节点，因为我们知道`61`不可能在那些节点中：
- en: '`![images/binary_trees/bst_7.png](images/binary_trees/bst_7.png)`'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '`![images/binary_trees/bst_7.png](images/binary_trees/bst_7.png)`'
- en: '“Are you my mother?” asks the algorithm. Since `the 75` is not `the 61` we’re
    looking for, we need to move down to the next level. And because `61` is less
    than `75`, we’ll check the left child, since the `61` could only be in that subtree,
    as shown in the following diagram:'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: “你是我的妈妈吗？”算法问道。因为`75`不是我们要找的`61`，所以我们需要下移到下一层。而且因为`61`小于`75`，我们将检查左子节点，因为`61`只可能在该子树中，如下图所示：
- en: '`![images/binary_trees/bst_8.png](images/binary_trees/bst_8.png)`'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '`![images/binary_trees/bst_8.png](images/binary_trees/bst_8.png)`'
- en: '`The 56` is not `the 61` we’re looking for, so we continue our search. Since
    `61` is greater than `56`, we search for the `61` in the right child of the `56`:'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`56`不是我们要找的`61`，所以我们继续搜索。因为`61`大于`56`，我们在`56`的右子节点中搜索`61`：'
- en: '`![images/binary_trees/bst_9.png](images/binary_trees/bst_9.png)`'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '`![images/binary_trees/bst_9.png](images/binary_trees/bst_9.png)`'
- en: We found it! In this example, it took us four steps to find our desired value.
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们找到了！在这个例子中，找我们想要的值花了四步。
- en: The Efficiency of Searching a Binary Search Tree
  id: totrans-21
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 搜索二叉搜索树的效率
- en: If you take another look at the steps we just walked through, you’ll notice
    that each step eliminates half of the remaining nodes from our search. For example,
    when we begin our search, we start at the root node, and our desired value may
    be found among any of the root’s descendants. However, when we then decide to
    continue the search with, say, the root’s right child, we eliminate the left child
    and all of its descendants from the search.
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你再看看我们刚才走过的步骤，你会注意到每一步都消除了我们搜索中剩余节点的一半。例如，当我们开始搜索时，我们从根节点开始，而我们想要的值可能在根的任何后代中。然而，当我们决定继续搜索，例如选择根的右子节点时，我们就从搜索中排除了左子节点及其所有后代。
- en: We’d say, then, that searching in a binary search tree is `O(log N)`, which
    is the apt description for any algorithm that eliminates half of the remaining
    values with each step. (We’ll see soon, though, that this is only for a perfectly
    balanced binary search tree, which is a best-case scenario.)
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因此，我们可以说，在二叉搜索树中的搜索是 `O(log N)`，这正是对任何在每一步中消除剩余一半值的算法的恰当描述。（不过，我们很快会看到，这仅适用于完全平衡的二叉搜索树，即最佳情况。）
- en: '`Log(N) Levels`'
  id: totrans-24
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`Log(N) 层`'
- en: 'Here’s yet another way of describing why search in a binary search tree is
    `O(log N)`, which will reveal another property about binary trees in general:
    if there’re `N` nodes in a balanced binary tree, there’ll be about `log N` levels
    (that is, rows).'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里还有另一种描述为什么在二叉搜索树中的搜索是 `O(log N)` 的方式，这将揭示出二叉树的另一个特性：如果平衡二叉树中有 `N` 个节点，则大约会有
    `log N` 层（即行）。
- en: To understand this, let’s assume each row in the tree is completely filled with
    nodes, and there aren’t any empty positions. If you think about it, each time
    we add a new full level to the tree, we end up roughly doubling the number of
    nodes the tree has. (Really, we’re doubling the nodes and adding one.)
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为了理解这一点，假设树中的每一行都完全填满了节点，并且没有任何空位置。如果你仔细想想，每当我们向树中添加一个新的完整层时，树的节点数量大约会翻倍。（实际上，我们是在翻倍节点并加一。）
- en: For example, a binary tree with four complete levels has fifteen nodes. (Go
    ahead, count them.) If we add a fifth complete level, that means we add two children
    to each of the eight nodes in the fourth level. This means we add sixteen new
    nodes, roughly doubling the size of the tree.
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，一棵具有四个完整层次的二叉树有十五个节点。（去数一数吧。）如果我们添加一个完整的第五层，这意味着我们要为第四层的八个节点各添加两个子节点。这意味着我们添加了十六个新节点，基本上将树的大小翻倍。
- en: It emerges that each new level doubles the size of the tree. Accordingly, a
    tree containing `N` nodes will require `log(N)` levels to hold all the nodes.
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 结果表明，每增加一层，树的大小就会翻倍。因此，包含 `N` 个节点的树将需要 `log(N)` 层来容纳所有节点。
- en: In the context of binary search, we noted that the pattern of `log(N)` is that
    with each step of the search, we can eliminate half of the remaining data. The
    number of levels needed in a binary tree follows this pattern as well.
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在二叉搜索的背景下，我们注意到 `log(N)` 的模式是，在每一步搜索中，我们可以消除剩余数据的一半。二叉树所需的层数也遵循这一模式。
- en: Let’s take a binary tree that needs to hold thirty-one nodes. With our fifth
    level, we can hold sixteen of those nodes. This took care of roughly half of the
    data, leaving us with just fifteen nodes we still need to find room for. With
    the fourth level, we take care of eight of those nodes, leaving us with seven
    unaccounted for. With the third level, we take care of four of those nodes, and
    so on.
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 假设我们有一棵需要容纳三十一节点的二叉树。在第五层，我们可以容纳十六个节点。这大约处理了数据的一半，剩下我们仍需要为十五个节点找位置。在第四层，我们处理了八个节点，还剩下七个未被计算。在第三层，我们处理了四个节点，依此类推。
- en: Indeed, `log 31` is (approximately) 5. So we’ve now concluded that a balanced
    tree with `N` nodes will have `log(N)` levels.
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 确实，`log 31` 大约是 5。因此我们得出结论，具有 `N` 个节点的平衡树将有 `log(N)` 层。
- en: 'Since this is the case, it makes a lot of sense as to why searching a binary
    search tree takes up to `log(N)` steps: because each step of the search causes
    us to move down a level, we take up to as many steps as there are levels in the
    tree.'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 既然如此，理解为什么搜索二叉搜索树需要多达 `log(N)` 步骤是非常合理的：因为每一步搜索都会让我们向下移动一层，我们最多需要与树中的层数相等的步骤。
- en: However you prefer to think about it, searching a binary search tree takes `O(log
    N)`.
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 无论你怎么理解，搜索一棵二叉搜索树的时间复杂度是 `O(log N)`。
- en: Now, while search in a binary search tree is `O(log N)`, so is binary search
    within an ordered array, in which each number we select also eliminates half of
    the remaining possible values. In this regard, then, searching a binary search
    tree has the same efficiency as binary search within an ordered array.
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，虽然在二叉搜索树中的搜索是 `O(log N)`，但在有序数组中的二分搜索也是如此，其中我们选择的每个数字也会消除剩余可能值的一半。因此，从这个角度来看，搜索二叉搜索树的效率与在有序数组中进行二分搜索相同。
- en: Where binary search trees really shine over ordered arrays, though, is with
    insertion. We’ll get to that soon.
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 二叉搜索树真正超越有序数组的地方在于插入。我们很快就会讨论到这一点。
- en: 'Code Implementation: Searching a Binary Search Tree'
  id: totrans-36
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 代码实现：搜索二叉搜索树
- en: 要实现搜索操作，以及其他二叉搜索树操作，我们将大量使用递归。你在第10章中学习过，[`*Recursively Recurse with Recursion*`](f_0096.xhtml#chp.recursion)，递归是处理具有任意深度的数据结构时的关键。树就是这样一种数据结构，因为它可以有无限多个层级。
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要实现搜索操作，以及其他二叉搜索树操作，我们将大量使用递归。你在第10章中学习过，[`*递归回溯*`](f_0096.xhtml#chp.recursion)，递归是处理具有任意深度的数据结构时的关键。树就是这样一种数据结构，因为它可以有无限多个层级。
- en: 这是我们如何使用递归在JavaScript中实现搜索。虽然我们可以选择使用循环来替代，但搜索的递归代码更简洁优雅：
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是我们如何使用递归在JavaScript中实现搜索。虽然我们可以选择使用循环来替代，但搜索的递归代码更简洁优雅：
- en: '| ​  | `function` search(`searchValue`, node) { |'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` search(`searchValue`, node) { |'
- en: '| ​  | `if` (!node `||` node.value === `searchValue`) { |'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (!node `||` node.value === `searchValue`) { |'
- en: '| ​  | `return` node; |'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` node; |'
- en: '| ​  | } |'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `if` (`searchValue` < node.value) { |'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (`searchValue` < node.value) { |'
- en: '| ​  | `return` search(`searchValue`, node.`leftChild`); |'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` search(`searchValue`, node.`leftChild`); |'
- en: '| ​  | } `else` { |'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } `else` { |'
- en: '| ​  | `return` search(`searchValue`, node.`rightChild`); |'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` search(`searchValue`, node.`rightChild`); |'
- en: '| ​  | } |'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 这个搜索函数接受我们要查找的`searchValue`和一个将作为搜索基点的节点。第一次调用`search`时，节点将是根节点。然而，在后续的递归调用中，节点可能是树中的另一个节点。
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这个搜索函数接受我们要查找的`searchValue`和一个将作为搜索基点的节点。第一次调用`search`时，节点将是根节点。然而，在后续的递归调用中，节点可能是树中的另一个节点。
- en: 我们的函数处理四种可能的情况，其中两种是基准情况：
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们的函数处理四种可能的情况，其中两种是基准情况：
- en: '| ​  | `if` (!node `||` node.value === `searchValue`) { |'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (!node `||` node.value === `searchValue`) { |'
- en: '| ​  | `return` node; |'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` node; |'
- en: '| ​  | } |'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 一个基准情况是当节点包含我们要查找的`searchValue`时，此时我们可以返回该节点，而不进行任何递归调用。
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 一个基准情况是当节点包含我们要查找的`searchValue`时，此时我们可以返回该节点，而不进行任何递归调用。
- en: 另一个基准情况是当没有节点时。这在我们检查其他情况后会更有意义，因此让我们稍后再回到这一点。
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 另一个基准情况是当没有节点时。这在我们检查其他情况后会更有意义，因此让我们稍后再回到这一点。
- en: 下一个情况是当`searchValue`小于当前节点的值时：
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 下一个情况是当`searchValue`小于当前节点的值时：
- en: '| ​  | `if` (`searchValue` < node.value) { |'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (`searchValue` < node.value) { |'
- en: '| ​  | `return` search(`searchValue`, node.`leftChild`); |'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` search(`searchValue`, node.`leftChild`); |'
- en: '| ​  | } |'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 在这种情况下，我们知道如果它存在于树中，`searchValue`一定会在该节点的左侧后裔中找到。因此，我们在该节点的左子节点上递归调用`search`函数。
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这种情况下，我们知道如果它存在于树中，`searchValue`一定会在该节点的左侧后裔中找到。因此，我们在该节点的左子节点上递归调用`search`函数。
- en: 下一个情况是反向；当`searchValue`大于当前节点时：
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 下一个情况是反向；当`searchValue`大于当前节点时：
- en: '| ​  | `else` { |'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `else` { |'
- en: '| ​  | `return` search(`searchValue`, node.`rightChild`); |'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` search(`searchValue`, node.`rightChild`); |'
- en: '| ​  | } |'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 在这种情况下，我们递归调用`search`在当前节点的右子节点上。
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这种情况下，我们递归调用`search`在当前节点的右子节点上。
- en: 现在，当我们在当前节点的子节点上进行这些递归调用时，请注意我们并没有检查当前节点是否有任何子节点。这就是第一个基准情况出现的地方：
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，当我们在当前节点的子节点上进行这些递归调用时，请注意我们并没有检查当前节点是否有任何子节点。这就是第一个基准情况出现的地方：
- en: '| ​  | `if` (!node ... |'
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (!node ... |'
- en: That is to say, if it turns out that we called `search` on a child node that
    doesn’t actually exist, we end up returning `null` (since the `node` variable
    will actually contain `null`). This case will happen if the `searchValue` doesn’t
    exist within our tree, as we’ll try to access the `node` where the `searchValue`
    should be found, but our search hits a dead end. In this case, it’s appropriate
    that we return `null`, indicating that the `searchValue` is not within the tree.
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 也就是说，如果我们在一个实际上并不存在的子节点上调用了`search`，我们最终会返回`null`（因为`node`变量实际上会包含`null`）。如果`searchValue`在我们的树中不存在，这种情况就会发生，因为我们会试图访问应该找到`searchValue`的`node`，但我们的搜索碰到了死胡同。在这种情况下，返回`null`是合适的，表示`searchValue`不在树中。
