- en: © The Author(s), under exclusive license to Springer Fachmedien Wiesbaden GmbH,
    part of Springer Nature 2024J. L. ZuckarelliLearn coding with Python and JavaScript
    [https://doi.org/10.1007/978-3-658-42912-6_8](https://doi.org/10.1007/978-3-658-42912-6_8)
  prefs: []
  type: TYPE_NORMAL
- en: 8. What Do I Need for Programming?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Joachim L. Zuckarelli^([1](#Aff2)  )(1)München, GermanyOverview
  prefs: []
  type: TYPE_NORMAL
- en: Before we can start writing programs, we first need to get the right software
    tools ready. These will include a compiler and/or interpreter, which translates
    the program source code you have written into machine language and thus makes
    it executable for the computer. This should also include code editors, with which
    the source code of the program is written in the first place. Integrated development
    environments combine these and other tools under the umbrella of a common user
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to such “technical” tools, you will also need help with your programming
    from time to time. Therefore, in this chapter we will also look at how and where
    you can find information and support related to your programming language.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter you will learn the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How to get a compiler/interpreter for your programming language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What functions code editors offer, and how they differ from normal text editors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What features Integrated Development Environments (IDEs) offer, and how they
    differ from pure code editors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What popular code editors and Integrated Development Environments are available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How and where to find information and support for your programming language
    on the internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How you can use artificial intelligence (AI) tools like ChatGPT for programming.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8.1 Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How many times do I have to tell you? The right tool for the right job!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: (Montgomery “Scotty” Scott in Star Trek VI—The Undiscovered Country)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 8.1.1 Compiler and Interpreter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: From the previous chapter, you already know that—depending on the programming
    language—you need an interpreter or compiler to translate your programs into executable
    machine code that the computer can understand, or to have your program source
    code interpreted and executed at runtime. For many programming languages, compilers
    or interpreters can be downloaded free of charge from the internet. This is especially
    true for languages where further development is done by a de facto non-profit
    organization, as is the case with Python or R, for example. Even for proprietary
    languages that are only made available by a specific commercial company, such
    as the Object Pascal dialect Delphi, developed and distributed by Embarcadero,
    there is often a Community Edition, or a free version with a limited, but for
    the private user, sufficient range of functions. However, the use of the Community
    Edition for the development of commercial applications might be subject to legal
    restrictions. So, if you plan to sell your self-developed software, familiarize
    yourself with the license conditions in advance. For some programming languages,
    no separate interpreter is required at all. If you want to program with JavaScript,
    for example, the web browser takes over the interpretation and execution of your
    program code. If you want to develop server-side applications with PHP, the interpretation
    of the code runs directly on the server, only its results are returned to the
    client and made visible in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 8.1.2 Code Editors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To be able to use compilers or interpreters meaningfully at all, you must first
    write a program. As we have already seen, a program is ultimately nothing more
    than a text of instructions written in a special language. The emphasis here is
    on text. Because the source code of your program is simply text, you can use any
    program that allows you to edit unformatted text (that is, text without special
    formatting such as bold or italics). If you use Windows as your operating system,
    for example, you can use the very simple Windows Editor. However, it can do little
    more than open or create a file, type in some text, and save the file after editing.
    Although these rudimentary functions are in principle sufficient to write computer
    programs, it is nevertheless advisable to use an editor that has been specially
    developed for programming, or at least comes with functions that make programming
    easier.
  prefs: []
  type: TYPE_NORMAL
- en: One particularly important function is called syntax highlighting. As you will
    recall, syntax is the grammar of the programming language. Syntax highlighting
    is, as you can already guess from the name, a functionality that highlights certain
    parts of the program code to make the code more readable. For example, keywords
    (i.e., special, reserved “words” of the programming language) or the names of
    variables are each marked by different font colors and/or font styles (such as
    bold type). Programming without the visual support of syntax highlighting is of
    course always possible, but considerably less comfortable, because without the
    highlighting it is more difficult to direct the eye to the right places in the
    program code and to quickly grasp certain structures in the code. Since syntax
    varies from programming language to programming language, syntax highlighting
    must work differently in each language. A number of text editors support syntax
    highlighting for a variety of different programming languages, either out of the
    box or through extension packages. Text editors that fall into this category include
    Atom, Notepad++, Sublime Text, Vim, or Visual Studio Code. Many of the editors
    are available free of charge, either completely or at least in a somewhat limited
    version that can work very well, such as the popular Sublime Text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given the large number of text editors on the market that offer special features
    for working with program code, such a list cannot be exhaustive. So, it’s no surprise
    that there are tons of articles, blog posts, and videos on the internet about
    which is the best code editor. This decision depends on personal preferences,
    especially with regard to the functions offered and certainly also to the visual
    appearance; after all, the eye does the programming. A special aspect of the visual
    appearance are the dark themes: Maybe you have already looked over the shoulder
    of an experienced programmer and seen that he is sitting in front of an editor
    with a dark, almost black background, from which the program code, colored by
    syntax highlighting, clearly stands out. Why is this dark background (“working
    in *dark mode*”) so popular? Maybe it’s because it’s just “cool” to set your editor
    this way, showing that you belong to the secretive community of programmers who
    are constantly hammering code into their keyboards that is almost incomprehensible
    to the average person. This assumption may be partially correct. However, another
    factor is much more important. A dark background is much more pleasant for the
    eyes than a bright, even white background. If you have to concentrate on your
    program code for hours on end, you will quickly come to appreciate the discreet
    and less dazzling background against which the program code shifts into the foreground
    in high contrast. In this book, the screenshots of code editors are always kept
    bright, but only because this makes them easier to reproduce in print. In fact,
    the author usually works with a dark background, which can be set in most editors,
    and is the default in some, such as Sublime.'
  prefs: []
  type: TYPE_NORMAL
- en: 8.1.3 Integrated Development Environments (IDEs)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to code editors, there is another group of tools, the *Integrated
    Development Environments* (IDEs). These tools go beyond pure code editors in their
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Important features that most IDEs combine are:'
  prefs: []
  type: TYPE_NORMAL
- en: Direct call of the compiler/interpreter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions for efficient source code editing that go beyond syntax highlighting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions for the graphical construction of user interfaces if the language
    supports graphical user interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting functions (debugging)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions for managing entire projects with multiple files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A frequently found function in the area of source code editing is, for example,
    auto-completion: When you type a few letters, possible instructions/keywords matching
    your input appear directly as a suggestion. This can increase the speed of code
    writing and at the same time reduce the error rate. Also, an automatic syntax
    check is often available, which already shows you possible errors while you are
    still working on your program code. For example, it alerts you if you have opened
    a bracket but did not close it later. In this way you can detect and correct errors
    in the program at an early stage and are not surprised by error messages only
    when you call the compiler or interpreter. Practical features in the area of source
    code editing often include deep help integration. For example, it is often possible
    to call up help information on the statement you are currently working with directly
    from the IDE.'
  prefs: []
  type: TYPE_NORMAL
- en: Quite often, you not only have to write code for your program, but also design
    a graphical user interface (GUI). Some IDEs offer extensive support for the developer.
    Often, you can piece together your interface from standard elements such as buttons,
    input fields, or list boxes using drag & drop and then adjust the properties of
    the standard elements according to your wishes, such as, give a button a new label,
    or change its size or even color. After that, all you must do is connect the UI
    elements to your program code and address them from within the program so that
    something happens when, for example, the user clicks on the button. IDEs that
    support UI design in this way include Embarcadero’s RAD Studio or Microsoft’s
    Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the direct call of compiler or interpreter and practical functions
    for source code editing and interface design, IDEs typically also offer functions
    for debugging, i.e., the systematic search for and correction of errors. An important
    feature in this area is, for example, the creation of breakpoints in the source
    code. If you start a program after you have set up a breakpoint, it will only
    run up to the point in the code where the breakpoint is located; later, you can
    manually let it continue running beyond the breakpoint. Working with breakpoints
    allows you to check whether a program runs without errors up to the point marked
    by the breakpoint. Also, you can look at the contents of variables at the breakpoint
    location. This monitoring of the contents of variables is another important debugging
    feature. It allows you to “look inside” variables while the program is running
    and to see their current contents, and even to change them if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: If your program consists of several source code files, you can often save them
    in an IDE as a coherent project. This means that all you have to do is open the
    project and all the code files are available to you. You can also save certain
    settings, such as those of the compiler, on a project-specific basis.
  prefs: []
  type: TYPE_NORMAL
- en: As in the case of code editors, there is also an almost unmanageable number
    of IDEs on the market, some free of charge (open source or as a community edition),
    some with costs. Some focus on one programming language (for example RStudio or
    PyCharm from JetBrains for Python), others are built to handle a variety of different
    languages, sometimes through appropriate plug-ins (for example Microsoft’s Visual
    Studio or the open-source solution NetBeans).
  prefs: []
  type: TYPE_NORMAL
- en: IDEs for mobile applications, such as Google’s Android Studio, also allow you
    to simulate the operation of the developed app on a mobile environment with certain
    parameters (for example, hardware equipment, configuration) and to estimate the
    demand on system resources, such as processor load or mobile data transfer. These
    IDEs are thus designed for a specific purpose, namely the development of mobile
    applications, rather than around a specific programming language and therefore
    often support different languages; in the case of Android Studio, for example,
    C/C++, Java and Kotlin.
  prefs: []
  type: TYPE_NORMAL
- en: The transition between code editors and IDEs is somewhat fluid. Many code editors
    allow a compiler or interpreter to be attached and thus already have the core
    functionality of an IDE, but with the exception of syntax highlighting they offer
    little support in the area of language-specific code editing, debugging or interface
    design.
  prefs: []
  type: TYPE_NORMAL
- en: ◘ Figures [8.1](#Fig1), [8.2](#Fig2), [8.3](#Fig3), and [8.4](#Fig4) show different
    IDEs. ◘ Figure [8.4](#Fig4) shows a very old IDE for C/C++ from Borland, which
    ran under MS-DOS. However, you can see very clearly important IDE functions in
    the menu bar, such as Run, Compile, Debug and features for project management.![](../images/474412_1_En_8_Chapter/474412_1_En_8_Fig1_HTML.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the test application in Delphi. The page comprises multiple
    sections, which include structure, object inspector, form 1, model view, and palette.
    A text in the middle of the Form 1 section reads Say Hello World.
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 8.1
  prefs: []
  type: TYPE_NORMAL
- en: The Integrated Development Environment (IDE) of Delphi
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/474412_1_En_8_Chapter/474412_1_En_8_Fig2_HTML.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A screenshot exhibits a line of Python code to print Hello World. The file name
    reads test dot p y. The bottom section of the screen represents the output and
    the file's path.
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 8.2
  prefs: []
  type: TYPE_NORMAL
- en: The PyCharm Integrated Development Environment (IDE) for Python
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/474412_1_En_8_Chapter/474412_1_En_8_Fig3_HTML.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A screenshot of R Studio comprises 4 sections. 1\. It exhibits a snippet of
    code.2\. Different values are provided under the console tab. 3\. A table represents
    the functions of different variables under the environment tab. 4\. The description
    and usage of correlation, variance, and covariance are denoted under the help
    tab.
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 8.3
  prefs: []
  type: TYPE_NORMAL
- en: The Integrated Development Environment (IDE) RStudio for R
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/474412_1_En_8_Chapter/474412_1_En_8_Fig4_HTML.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A screenshot of a code editor exhibits a C-code to print Hello World. The menu
    bar is provided at the top. The operations of different function keys are denoted
    at the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 8.4
  prefs: []
  type: TYPE_NORMAL
- en: The TurboC Integrated Development Environment (IDE) for C/C++
  prefs: []
  type: TYPE_NORMAL
- en: ◘ Table [8.1](#Tab1) shows a selection of IDEs that support some common programming
    languages natively. Several IDEs, such as Eclipse or NetBeans, can be extended
    by add-ins so that they support a whole range of languages.Table 8.1
  prefs: []
  type: TYPE_NORMAL
- en: Selected Integrated Development Environments (IDEs)
  prefs: []
  type: TYPE_NORMAL
- en: '| Programming language | Selected from IDEs |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| C# | SharpDevelop, Visual Studio |'
  prefs: []
  type: TYPE_TB
- en: '| C/C++ | AppCode, C++ Builder, CLion, NetBeans, QT Creator, Visual Studio
    |'
  prefs: []
  type: TYPE_TB
- en: '| Java | AppCode, Eclipse, IntelliJ IDEA, JBuilder, NetBeans |'
  prefs: []
  type: TYPE_TB
- en: '| JavaScript | AppCode, Aptana Studio, NetBeans, RubyMine, Visual Studio, WebStorm
    |'
  prefs: []
  type: TYPE_TB
- en: '| Perl | Komodo IDE, Padre |'
  prefs: []
  type: TYPE_TB
- en: '| PHP | Aptana Studio, Komodo IDE, NetBeans, PhpStorm, Zend Studio |'
  prefs: []
  type: TYPE_TB
- en: '| Python | Aptana Studio, PyCharm, Rodeo, Spyder, Thonny |'
  prefs: []
  type: TYPE_TB
- en: '| R | Rcommander, RStudio |'
  prefs: []
  type: TYPE_TB
- en: '| Ruby | Aptana Studio, Komodo IDE, RubyMine |'
  prefs: []
  type: TYPE_TB
- en: '| Swift | AppCode, Xcode |'
  prefs: []
  type: TYPE_TB
- en: '| VBA | Microsoft Office, Visual Studio Tools for Office (VSTO) |'
  prefs: []
  type: TYPE_TB
- en: When deciding whether to use a code editor or an IDE, it is natural to consider
    how much you want to use tools that only IDEs provide (such as debugging features
    or interface design functions). But even if you don’t plan to do that, the big
    advantage of IDEs to provide all features under one roof is still a weighty one,
    especially if you think about the central tools like compiler or interpreter that
    you need all the time during the development process. On the other hand, IDEs
    are often quite complex programs themselves, with a plethora of buttons, different
    toolbars/ribbons, windows and tabs that you first have to find your way around.
    A good impression of the complexity is given by the ◘ Figs. [8.1](#Fig1), [8.2](#Fig2),
    and [8.3](#Fig3). Since the IDEs have been developed for professionals, the manufacturers
    are obviously not so concerned that you should be able to learn how to use all
    the functions and options in a few minutes. After all, the IDE is not intended
    to be used temporarily or only now and then, but permanently as the control center
    for all programming work. Therefore, it may take some time before you have a complete
    overview of the possibilities of the new tool. But once you have found your way
    around the IDE, you can work productively, because that is exactly what these
    tools are developed for.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Try different code editors and IDEs and see what you get along with best. Don’t
    be confused by the many features. You need very few of these features to write
    and run programs. You will learn to use and appreciate more and more features
    of the tools as time goes by. Don’t try to understand everything right at the
    beginning, but concentrate on the really essential features, i.e., those for editing
    and compiling/executing the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ultimately, you must decide for yourself which tools you want to use. It’s
    a good idea to try out different code editors/IDEs and only then commit. For the
    purposes of this book, we will be working with both a full-fledged IDE, PyCharm
    for Python, and a classic code editor, Sublime Text, when dealing with JavaScript.
    Writing these paragraphs, it occurs to the author that he himself seems to unconsciously
    follow a simple rule—if the programming language does not require a special, stand-alone
    compiler or interpreter on one’s own computer (i.e., for JavaScript or PHP, for
    example), a code editor is the tool of choice. For languages that require an installed
    compiler or interpreter, a language-specific IDE comes into play. Ultimately,
    however, there is no golden rule that always applies to everyone. Only one thing
    helps: try it out!'
  prefs: []
  type: TYPE_NORMAL
- en: 8.1.4 Simple Online Development Environments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to try out a language without installing all the necessary tools
    on your computer, you can often use special websites that allow you to enter and
    execute code directly. All the features necessary for execution, such as compiling
    and interpreting the code, are provided by the website. Some examples of such
    “online IDEs” are:'
  prefs: []
  type: TYPE_NORMAL
- en: ► [http://​cpp.​sh/​](http://cpp.sh/) for the C++ programming language,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ► [https://​www.​compilejava.​net/​](https://www.compilejava.net/) for Java,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ► [https://​js.​do/​](https://js.do/) for JavaScript,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ► [http://​phptester.​net/​](http://phptester.net/) for PHP,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ► [https://​www.​pythonanywhere.​com/​](https://www.pythonanywhere.com/) for
    Python,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ► [https://​rextester.​com/​](https://rextester.com/) for a whole range of languages,
    including C#, Haskell, Kotlin, Ruby, Pascal and Visual Basic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More such platforms can be found very easily by typing “try *programminglanguage*
    online” (where *programminglanguage* is replaced by the name of the language you
    want) into a search engine. In most cases, you don’t even need to create an account;
    you can start writing code right away. Sites that require a (free) account, such
    as ► [https://​www.​pythonanywhere.​com/​](https://www.pythonanywhere.com/), usually
    also allow you to save files in the cloud and reuse them later.
  prefs: []
  type: TYPE_NORMAL
- en: Web services like the ones mentioned are of course no substitute for a real
    development environment, since they usually have very limited functionality and
    the execution of programs may also be subject to restrictions (in some cases,
    for example, a program may only take up five seconds of computing time). If you
    want to get serious about the language, there is no way around installing the
    necessary tools on your own computer. Nevertheless, these websites are an interesting
    opportunity to try out a language without risk and unnecessary effort.
  prefs: []
  type: TYPE_NORMAL
- en: 8.2 Help and Information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having the right tools at your disposal is not everything. From time to time,
    you will need help. Therefore, it makes sense to think about where you can get
    more information about your programming language in advance. For example, if you
    have no idea how to tackle a certain problem, don’t know what certain commands
    of your programming language do or how to use them, or you don’t understand the
    sometimes-cryptic error messages of the interpreter or compiler. In all these
    cases, it is helpful to have an immediate contact point where you can find support.
    Such contact points are a significant resource in practical work, not only for
    programming beginners. Besides books like this one, of course, the internet offers
    a myriad sources that hardly leave any information need unsatisfied—provided,
    of course, that you can find them.
  prefs: []
  type: TYPE_NORMAL
- en: Many programming languages, both open source and proprietary (vendor-specific),
    come with extensive web documentation, where you can find detailed information
    about specific commands of the programming language. Examples of these help offers
    are PHP’s Function Reference, Python’s Library Reference or Microsoft’s VBA Reference
    for Visual for Applications (VBA).
  prefs: []
  type: TYPE_NORMAL
- en: Part of the official documentation is usually not only such a function reference,
    i.e., a dictionary-like reference book that describes what certain commands of
    the programming language do and how they are used, but often also a language reference.
    Language references explain the grammar of the language in question, the syntax,
    and thus describe how to correctly formulate instructions in the language. However,
    such language references are not always easily digestible for novice programmers.
    That’s why some official documentation also offer tutorials for beginners and
    “Getting Started” articles as a complementary component.
  prefs: []
  type: TYPE_NORMAL
- en: Putting a browser bookmark on the official language documentation, especially
    on the function reference, is recommended to anyone who wants to get serious about
    a programming language. It is usually the first place to go when you want to understand
    what a particular command does and how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the official documentation, there are of course also unofficial
    information and help channels that are not operated by the organization responsible
    for the programming language. In practice, the most important such channel for
    many programming languages is the internet platform Stack Overflow (► [https://​StackOverflow.​com/​](https://stackoverflow.com/)).
    With over 17 million questions on a wide variety of programming languages, it
    leaves little to be desired. If you search there for a solution to a concrete
    problem, you often get the impression that every conceivable question has already
    been asked by someone before. But not only do the large number of answered questions
    and the high coverage of different programming languages make Stack Overflow an
    incredibly useful source of information, the quality of the answers is also generally
    very high.
  prefs: []
  type: TYPE_NORMAL
- en: The high quantity and quality are achieved on the one hand through gamification,
    i.e., the playful setting of incentives by crediting forum participants with points
    (“reputation”) for certain actions. These points are not only visible to everyone
    as a proof of competence next to the respective username, but also allow the use
    of certain functions that are not available to all users. One important such function
    (which can be accessed even with a relatively low score) is the up- and down-voting
    of answers, i.e., the rating of other users’ answers. This helps readers to better
    assess the quality of the answers. In turn, the authors of up-voted answers receive
    reputation points, which increases the incentive to provide high-quality answers.
    Also, the questioner can mark one of the answers as the best. Other users will
    then recognize by the large green checkmark next to the answer that it is the
    one that ultimately helped the questioner solve their problem. The author of the
    answer is also credited with reputation points for this. In this way, not only
    is a system of mutual quality control operated, but also a strong incentive is
    set for investing in work for others, from which you have nothing but the good
    feeling of having helped another user. With Stack Overflow, in addition to the
    good feeling, you also gain reputation and rights, which is obviously beneficial
    to the ego of many participants.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to gamification, the strict rules in the forum also play a role
    in the high quality of the information. For example, questions that are duplicates
    of other questions or that are off topic in the respective forum area are immediately
    closed by the moderators. The questioner is required to provide a minimal, but
    executable code example for his problem and to formulate his question exactly
    already in the title of the post. Stack Overflow’s own Code of Conduct calls for
    friendly interaction, but the tone in the forum sometimes seems a bit rude to
    Stack Overflow newbies.
  prefs: []
  type: TYPE_NORMAL
- en: Although the tone sometimes takes a little getting used to, Stack Overflow is
    a first-class source of information. Even incomprehensible compiler or interpreter
    error messages—a common annoyance in programming—can usually be found on Stack
    Overflow. Since Stack Overflow supports many different programming languages,
    it is important to always include the name of the language in the search query.
  prefs: []
  type: TYPE_NORMAL
- en: If you search for a question on Google, Stack Overflow’s search hits are regularly
    listed high up. By adding “site:► [StackOverflow.​com](http://stackoverflow.com)”
    to the Google search query, results from Stack Overflow are listed exclusively;
    of course, ► [StackOverflow.​com](http://stackoverflow.com) also has its own search.
    In addition to Stack Overflow, there are a number of other forums, including on
    well-known platforms such as Facebook or Reddit. Numerous blogs also provide good
    tips and how-tos for specific problems.
  prefs: []
  type: TYPE_NORMAL
- en: But when should you use the official documentation, and when should you use
    other sources like Stack Overflow? If you already know which command to use and
    now it’s just a matter of understanding how to do it correctly, then the official
    function reference for the language is usually the best place to start. But if
    you don’t know which command or approach to take to a problem, Stack Overflow
    (or a similar forum) is your first choice. Here, you will find good solutions
    to many common problems. Similarly, if you can’t decipher error messages from
    the compiler or interpreter, or just can’t figure out why a command you looked
    up in the function reference behaves the way it does, Stack Overflow is the place
    to go. The nice thing about Stack Overflow is that due to the large number of
    questions already asked, it’s quite likely that yours will be there, and you’ll
    get your problem solved immediately without having to post a question yourself
    and then wait for hours or even days for an adequate answer.
  prefs: []
  type: TYPE_NORMAL
- en: 8.3 Generative Artificial Intelligence Like ChatGPT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Artificial intelligence tools such as ChatGPT from OpenAI, Gemini from Google,
    Claude from Anthropic, or Llama from Meta are a very different kind of tool. They
    are built on top of powerful Large Language Models (LLMs) and are dialog-based,
    meaning they allow the user to have a “conversation” with an artificial intelligence.
    This allows questions to be asked that are not yet found in this form in any internet
    forum. In addition, the tedious transfer work of applying someone else’s question
    and the answers they received to your own situation is eliminated, because with
    tools like ChatGPT, you can ask exactly based on your own situation and receive
    an answer that is tailored precisely to your own problem. The AI tool is easy
    to use because it communicates in natural language; usually, a whole range of
    natural languages are supported in addition to English, including Spanish, French,
    German, Italian and Chinese.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tools such as ChatGPT are examples of generative artificial intelligence, which
    means that they are able not only to compile and present known information, but
    also—seemingly creatively—to generate new content and develop new solutions. Together
    with the ability to work in numerous programming languages, these tools are very
    useful in programming. Areas of application can be such as:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Understanding foreign code: If you don’t understand a piece of code that you
    didn’t write yourself (e.g., from an internet forum or blog), just have it explained
    to you (“Explain what the following code does”).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Looking things up: You can use tools like ChatGPT like a language reference
    or textbook. You can ask very specifically how to use a certain function in a
    programming language, for example, but also more generally about which functions
    (and external add-on modules) are available at all to solve a certain problem.
    The good thing (especially in the first case) is that if you don’t understand
    the answer, you can ask for a more understandable explanation (or examples) at
    any time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Writing code: The great strength of generative artificial intelligence is to
    write code itself (“Write a Python program that ...”). There are numerous examples
    circulating on the internet in which developers have used tools such as Chat GPT
    to develop large applications (for example, whole web platforms) in a short time
    and with little effort and have (allegedly) made a lot of money from their commercial
    exploitation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finding and eliminating bugs in programs: Feeding code and error messages to
    AI tools often helps you figure out the bug faster than if you were to laboriously
    dig through the code yourself. ◘ Figure [8.5](#Fig5) shows an example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Comment and document code: The tedious work of commenting and documenting code
    (i.e., writing explanations of how the code works and how it can be used), which
    is rather unpleasant for most programmers, can usually be done well by generative
    AI tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The quality of generative artificial intelligence results is often really good
    and very impressive, especially for first-time users. Nevertheless, tools like
    ChatGPT do not work without errors. The results always need to be checked, code
    written by AI tools needs to be tested throughly. Own knowledge of the programming
    language used is mandatory for this reason alone. However, because the systems
    are dialog-based and can refer to previous inputs and outputs, you can point out
    errors and ask ChatGPT to correct them. Even if the tool has not made any real
    mistakes but the result does not yet correspond to your ideas and requirements,
    you can have it “sharpened” again in dialog with the AI tool. In addition, due
    to the dialogue nature of the process, you can have complex programs developed
    step by step, which increases the probability that the desired result will come
    out in the end. Since Chat GPT is free of charge in the basic version, it is highly
    recommended to try it out. Do not worry that this will make you look like an amateur,
    many professional software developers also use such tools to increase their programming
    productivity.![](../images/474412_1_En_8_Chapter/474412_1_En_8_Fig5_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot represents the response of chat G P T for a prompt by an anonymous
    user. The prompt asks about the error message in a code. The Chat G P T response
    is provided in a paragraph.
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 8.5
  prefs: []
  type: TYPE_NORMAL
- en: Debugging with ChatGPT
  prefs: []
  type: TYPE_NORMAL
- en: 8.4 Your Roadmap to Learning a New Programming Language
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you learn a new programming language … *   First obtain the necessary tools,
    especially the required compiler or interpreter and a tool (code editor or IDE)
    to work with your code.
  prefs: []
  type: TYPE_NORMAL
- en: If you already use a code editor or IDE for another language, consider using
    it for the new language as well as you are already familiar with its operation.
    There might be an extension package for your tool that makes it fit for the new
    language as well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you do not yet have a code editor or IDE in use, try out different ones.
    If the work with your programming language requires special features, such as
    for the design of graphical interfaces, or if you want to work intensively with
    tools for debugging, you should prefer an IDE to a pure (code) editor. Otherwise,
    a good code editor, from which you are also be able to call compilers or interpreters,
    may be sufficient.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you install a new code editing tool, don’t try to understand all the complexity
    of features right away. You only need a relatively small part of it anyway—at
    least in the beginning—to really be able to work. Focus first on understanding
    how to open, edit, and save code files, and how to run your program. After that,
    you can start programming right away. You will learn most of the rest about your
    integrated development environment or code editor en passant.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before you really get into the programming language, find out what official
    help and information channels are available; in particular, set browser bookmarks
    for the official function and language references.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check, if ChatGPT supports your language and try out a few things.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
