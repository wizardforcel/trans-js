- en: Chapter 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Array and Object Manipulation
  prefs: []
  type: TYPE_NORMAL
- en: Let's continue our journey exploring the manipulation of arrays and objects,
    two fundamental pillars of JavaScript programming. These concepts are essential
    for handling data efficiently, allowing you to store, access, and manipulate collections
    of information in a powerful and flexible way.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and manipulating arrays
  prefs: []
  type: TYPE_NORMAL
- en: Arrays are ordered lists of values ​​that can store multiple items in a single
    variable. They are incredibly versatile and offer an efficient way to manage datasets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating an array:  In JavaScript, you can create an array using square brackets.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Accessing elements:  Each item in an array has an index, starting at zero.
    You can access individual elements using these indexes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Modifying elements:  You can modify the elements of an array directly through
    their indexes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding and removing elements:  JavaScript offers several methods for adding
    and removing elements from an array.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Array methods (map, filter, reduce, etc.)
  prefs: []
  type: TYPE_NORMAL
- en: Array methods in JavaScript are powerful tools that allow you to perform complex
    operations in a concise and readable way.
  prefs: []
  type: TYPE_NORMAL
- en: 'map:  The `map` method creates a new array with the results of calling a function
    for each element of the original array.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'filter:  The `filter` method creates a new array with all elements that pass
    a test implemented by a provided function.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'reduce:  The `reduce` method applies a function to an accumulator and each
    value in the array (from left to right) to reduce it to a single value.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'forEach:  The `forEach` method executes a given function once for each element
    of the array.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'find:  The `find` method returns the first element of the array that satisfies
    the given test function. Otherwise, returns `undefined`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'some e every: `some` tests whether at least one of the elements in the array
    passes the test implemented by the provided function. `every` tests whether all
    elements in the array pass the test implemented by the provided function.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Creating and manipulating objects
  prefs: []
  type: TYPE_NORMAL
- en: Objects are collections of properties, and a property is an association between
    a name (or key) and a value. They are used to represent more complex entities
    with diverse characteristics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating an object:  An object can be created using keys `{}` and is composed
    of key and value pairs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Accessing properties:  An object''s properties can be accessed using dot or
    square bracket notation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Modifying properties:  Properties of an object can be added or modified using
    dot notation or square brackets.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Object methods:  Objects can have methods, which are functions stored as properties.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Iterating over properties:  We can use a `for...in` loop to iterate over the
    properties of an object.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Destructuring:  Destructuring allows you to extract data from arrays or objects
    into different variables.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Manipulating arrays and objects is an essential skill for any JavaScript developer.
    Arrays allow you to manage collections of data efficiently, while objects provide
    a structured way to store and manipulate more complex data. With the powerful
    methods available, such as `map`, `filter` and `reduce`, you can transform and
    analyze your data in sophisticated ways. Likewise, understanding how to create
    and manipulate objects allows you to model the real world in your code, adding
    functionality and flexibility to your applications. As we continue, these skills
    will serve as the foundation for more advanced and innovative approaches to developing
    with JavaScript.
  prefs: []
  type: TYPE_NORMAL
