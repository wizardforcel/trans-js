- en: Chapter 11
  prefs: []
  type: TYPE_NORMAL
- en: Ten JavaScript Debugging Strategies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IN THIS CHAPTER
  prefs: []
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) **Debugging with the Console, breakpoints, and
    other dev power tools**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) **Writing code to make it easier to debug**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) **Craftily debugging with comments**'
  prefs: []
  type: TYPE_NORMAL
- en: Given any nontrivial JavaScript code, it’s a rare (probably nonexistent!) script
    that runs perfectly the first (or even the tenth!) time. Script bugs happen to
    even the most experienced developers, so having errors in your code does not mean
    you’re a failure as a coder! All it means is that you’re a coder.
  prefs: []
  type: TYPE_NORMAL
- en: 'But when bugs get into your code, you’ll want to exterminate them as quickly
    as you can. This chapter provides you with ten debugging strategies that can help.  ##
    Get Thee to Your Dev Tools'
  prefs: []
  type: TYPE_NORMAL
- en: 'All web page debugging begins with a visit to your web browser development
    tools. In every browser, the quickest way to open the dev tools is to right-click
    a page element and then click Inspect. You can also press Ctrl+Shift+I (Windows)
    or Option⌘  +I (macOS).  ## The Console Is Your Best Debugging Friend'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your code, you can see the current value of a variable or object property
    by outputting that value to the dev tools Console tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '`console.log(*output*);`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace *`output`* with the expression you want to print in the Console. The
    output expression can be a text string, a variable, an object property, a function
    result, or any combination of these.  ## Give Your Code a Break(point)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pausing your code enables you to see what’s going on and to run some commands
    in the console. You have two ways to pause your code mid-execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Set a breakpoint.** In the dev tools, open the file that contains the JavaScript
    code, locate the statement where you want to pause, then click the line number
    to the left of that statement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add a** `debugger` **statement.** In your JavaScript code, on the line just
    before the statement where you want to pause, add a `debugger` statement.  ##
    Step Through Your Code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you have some JavaScript code in break mode, use the dev tools execution
    controls to step through the code. You can step one statement at a time, step
    over functions, or step into functions.  ## Monitor Variable and Object Property
    Values'
  prefs: []
  type: TYPE_NORMAL
- en: 'Either use `console.log()` statements to output values to the console or, when
    your code is in break mode, hover the mouse pointer over the variable or object
    to see its current value in a tooltip. You can also create watch expressions to
    monitor values.  ## Indent Your Code'
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaScript code is immeasurably more readable when you indent the code within
    each statement block. Readable code is that much easier to trace and decipher,
    so your debugging efforts have one less hurdle to negotiate. Indenting each statement
    by two or four spaces is typical.  ## Break Down Complex Tasks'
  prefs: []
  type: TYPE_NORMAL
- en: 'Don’t try to solve all your problems at once. If you have a large script or
    function that isn’t working right, test it in small chunks to try to narrow down
    the problem.  ## Break Up Long Statements'
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the most complicated aspects of script debugging is making sense out
    of long statements (especially expressions). The Console window can help (you
    can use it to print parts of the statement), but it’s usually best to keep your
    statements as short as possible. Once you get things working properly, you can
    often recombine statements for more efficient code.  ## Comment Out Problem Statements'
  prefs: []
  type: TYPE_NORMAL
- en: 'If a particular statement is giving you problems, you can temporarily deactivate
    it by placing two slashes (`//`) at the beginning of the line. This tells JavaScript
    to treat the line as a comment. If you have a number of statements you want to
    skip, place `/*` at the beginning of the first statement and `*/` at the end of
    the last statement.  ## Use Comments To Document Your Scripts'
  prefs: []
  type: TYPE_NORMAL
- en: Speaking of comments, it’s a programming truism that you can never add enough
    explanatory comments to your code. The more comments you add, the easier your
    scripts will be to debug.
  prefs: []
  type: TYPE_NORMAL
