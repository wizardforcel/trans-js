- en: '`Chapter 4: Java: Write Once, Run Anywhere`'
  id: totrans-0
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: '`第4章：Java：一次编写，处处运行`'
- en: '`4.1 Java’s Answer to Cross-Platform Compatibility`'
  id: totrans-1
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`4.1 Java的跨平台兼容性解答`'
- en: '`Java`以其跨平台兼容性而闻名，允许开发者编写一次代码并在多个平台上运行，而无需修改。在本节中，我们将深入探讨`Java`实现这种可移植性的方法，并探索其核心概念。'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java`以其跨平台兼容性而闻名，允许开发者编写一次代码并在多个平台上运行，而无需修改。在本节中，我们将深入探讨`Java`实现这种可移植性的方法，并探索其核心概念。'
- en: '`1. The Java Virtual Machine (JVM):`'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`1. Java虚拟机（JVM）：`'
- en: 在 Java 的平台独立性的核心是`JVM`。`Java`源代码被编译成字节码，字节码由`JVM`执行。这个字节码可以在任何具有兼容`JVM`的平台上运行，确保`Java`应用程序是平台独立的。
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在 Java 的平台独立性的核心是`JVM`。`Java`源代码被编译成字节码，字节码由`JVM`执行。这个字节码可以在任何具有兼容`JVM`的平台上运行，确保`Java`应用程序是平台独立的。
- en: '`public class HelloWorld {`'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public class HelloWorld {`'
- en: '`public static void main(String[] args) {`'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public static void main(String[] args) {`'
- en: '`System.out.println("Hello, Java!");`'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`System.out.println("Hello, Java!");`'
- en: '`}`'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`2. Write Once, Run Anywhere (WORA):`'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`2. 一次编写，处处运行（WORA）：`'
- en: '`Java`的`WORA`原则意味着您可以在一个平台上编写`Java`代码，并在任何具有兼容`JVM`的平台上运行它。这消除了为不同操作系统重写代码的需要。'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java`的`WORA`原则意味着您可以在一个平台上编写`Java`代码，并在任何具有兼容`JVM`的平台上运行它。这消除了为不同操作系统重写代码的需要。'
- en: '`3. Bytecode Compilation:`'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`3. 字节码编译：`'
- en: '`Java`源代码由`Java`编译器（`javac`）编译成字节码。这个字节码是代码的跨平台表示，保存在`.class`文件中。'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java`源代码由`Java`编译器（`javac`）编译成字节码。这个字节码是代码的跨平台表示，保存在`.class`文件中。'
- en: '`javac HelloWorld.java`'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`javac HelloWorld.java`'
- en: '`4. Platform-Specific JVMs:`'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`4. 平台特定的JVM：`'
- en: 虽然`JVM`提供平台独立性，但对于各种平台存在不同实现的`JVM`。例如，`Oracle`提供`Oracle JVM`，而`OpenJDK`则提供开源替代品。这些实现确保与特定操作系统的兼容性。
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 虽然`JVM`提供平台独立性，但对于各种平台存在不同实现的`JVM`。例如，`Oracle`提供`Oracle JVM`，而`OpenJDK`则提供开源替代品。这些实现确保与特定操作系统的兼容性。
- en: '`5. Classpath and Jar Files:`'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`5. 类路径和Jar文件：`'
- en: '`Java`应用程序可以使用外部库和依赖项。这些库被打包在`JAR`（Java归档）文件中。`classpath`指定`JVM`查找类和`JAR`文件的位置。'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java`应用程序可以使用外部库和依赖项。这些库被打包在`JAR`（Java归档）文件中。`classpath`指定`JVM`查找类和`JAR`文件的位置。'
- en: '`java -cp .:mylibrary.jar MyApp`'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`java -cp .:mylibrary.jar MyApp`'
- en: '`6. Platform-Dependent Libraries:`'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`6. 平台相关库：`'
- en: 虽然`Java`代码是可移植的，但某些任务可能需要平台相关的代码。在这种情况下，`Java`提供了一种称为`JNI`（Java Native Interface）机制，以与用`C`或`C++`编写的特定平台库进行交互。
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 虽然`Java`代码是可移植的，但某些任务可能需要平台相关的代码。在这种情况下，`Java`提供了一种称为`JNI`（Java Native Interface）机制，以与用`C`或`C++`编写的特定平台库进行交互。
- en: '`public class NativeLibraryExample {`'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public class NativeLibraryExample {`'
- en: '`// Load a native library`'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 加载本地库`'
- en: '`static {`'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`static {`'
- en: '`System.loadLibrary("myplatformlibrary");`'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`System.loadLibrary("myplatformlibrary");`'
- en: '`}`'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`// Declare a native method`'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 声明一个本地方法`'
- en: '`public native void platformSpecificMethod();`'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public native void platformSpecificMethod();`'
- en: '`}`'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`7. GUI and User Interface:`'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`7. 图形用户界面（GUI）和用户界面：`'
- en: '`Java`提供了用于创建图形用户界面（`GUIs`）的跨平台库。`Swing`和`JavaFX`是允许开发者构建跨平台桌面应用程序的`GUI`库示例。'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java`提供了用于创建图形用户界面（`GUIs`）的跨平台库。`Swing`和`JavaFX`是允许开发者构建跨平台桌面应用程序的`GUI`库示例。'
- en: '`import javax.swing.*;`'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`import javax.swing.*;`'
- en: '`public class SimpleGUI {`'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public class SimpleGUI {`'
- en: '`public static void main(String[] args) {`'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public static void main(String[] args) {`'
- en: '`SwingUtilities.invokeLater(() -> {`'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`SwingUtilities.invokeLater(() -> {`'
- en: '`JFrame frame = new JFrame("Hello, GUI!");`'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`JFrame frame = new JFrame("Hello, GUI!");`'
- en: '`frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);`'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);`'
- en: '`frame.setSize(300, 200);`'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`frame.setSize(300, 200);`'
- en: '`frame.setVisible(true);`'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`frame.setVisible(true);`'
- en: '`});`'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`}`'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`8. Web Applications:`'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`8. Web应用程序：`'
- en: '`Java is widely used for web development. Java-based web applications can run
    on any web server that supports Java Servlets. Technologies like Java EE (Enterprise
    Edition) provide tools for building scalable web applications.`'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java在Web开发中被广泛使用。基于Java的Web应用程序可以在任何支持Java Servlets的Web服务器上运行。像Java EE（企业版）这样的技术提供了构建可扩展Web应用程序的工具。`'
- en: '`@WebServlet("/HelloServlet")`'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`@WebServlet("/HelloServlet")`'
- en: '`public class HelloServlet extends HttpServlet {`'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public class HelloServlet extends HttpServlet {`'
- en: '`protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {`'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {`'
- en: '`response.getWriter().write("Hello, Web!");`'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`response.getWriter().write("Hello, Web!");`'
- en: '`}`'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`Java’s promise of cross-platform compatibility has made it a popular choice
    for a wide range of applications. From desktop software to web and mobile apps,
    Java’s ability to run on multiple platforms without modification has simplified
    software development and deployment. Understanding Java’s key principles, like
    bytecode compilation and the JVM, is essential for harnessing its cross-platform
    capabilities effectively.`'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java`承诺的跨平台兼容性使其成为各种应用程序的流行选择。从桌面软件到网页和移动应用，`Java`能够在多个平台上运行而无需修改，简化了软件开发和部署。理解`Java`的关键原则，如字节码编译和`JVM`，对有效利用其跨平台能力至关重要。'
- en: '`* * *`'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`* * *`'
- en: '`4.2 Understanding Java Virtual Machine (JVM)`'
  id: totrans-53
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`4.2 理解Java虚拟机（JVM）`'
- en: '`The Java Virtual Machine (JVM) is a critical component of the Java platform,
    responsible for executing Java bytecode and ensuring cross-platform compatibility.
    In this section, we’ll explore the JVM in-depth and understand its role in making
    Java a write-once-run-anywhere language.`'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java虚拟机（JVM）是Java平台的关键组成部分，负责执行Java字节码并确保跨平台兼容性。在本节中，我们将深入探讨JVM，并了解它在使Java成为一次编写、处处运行的语言中的作用。`'
- en: '`1. JVM Architecture:`'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`1. JVM架构：`'
- en: '`The JVM is a virtualized runtime environment that abstracts the underlying
    hardware and operating system. It consists of several components, including:`'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: JVM是一个虚拟化的运行时环境，它抽象了底层的硬件和操作系统。它由多个组件组成，包括：
- en: '`• Class Loader: Responsible for loading classes and interfaces at runtime.`'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`• 类加载器：负责在运行时加载类和接口。`'
- en: '`• Execution Engine: Interprets and executes bytecode or compiles it to native
    code for improved performance.`'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`• 执行引擎：解释并执行字节码，或将其编译为本地代码以提高性能。`'
- en: '`• Memory Area: Divided into various segments like method area, heap, stack,
    and native method stack.`'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`• 内存区域：分为方法区、堆、栈和本地方法栈等多个段。`'
- en: '`• Java Native Interface (JNI): Allows Java code to interact with platform-specific
    native libraries.`'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`• Java本地接口（JNI）：允许Java代码与平台特定的本地库进行交互。`'
- en: '`• Native Method Interface (NMI): Provides a bridge between the JVM and native
    libraries.`'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`• 本地方法接口（NMI）：提供JVM与本地库之间的桥梁。`'
- en: '`2. Bytecode Execution:`'
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`2. 字节码执行：`'
- en: '`When a Java source code is compiled, it generates bytecode instructions, which
    are stored in .class files. These bytecode instructions are platform-independent
    and can be executed by any JVM.`'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`当Java源代码被编译时，它会生成字节码指令，并将这些指令存储在.class文件中。这些字节码指令是平台无关的，可以被任何JVM执行。`'
- en: '`public class HelloWorld {`'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public class HelloWorld {`'
- en: '`public static void main(String[] args) {`'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public static void main(String[] args) {`'
- en: '`System.out.println("Hello, Java!");`'
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`System.out.println("Hello, Java!");`'
- en: '`}`'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`3. Just-In-Time (JIT) Compilation:`'
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`3. 即时编译（JIT）：`'
- en: '`To improve performance, many JVM implementations use Just-In-Time (JIT) compilation.
    Instead of interpreting bytecode, the JIT compiler translates it into native machine
    code at runtime, allowing for faster execution.`'
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`为了提高性能，许多JVM实现采用了即时编译（JIT）。JIT编译器在运行时将字节码翻译成本地机器代码，而不是解释字节码，从而加快执行速度。`'
- en: '`4. Class Loading:`'
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`4. 类加载：`'
- en: '`The class loader is responsible for loading classes into the JVM as they are
    needed. There are three main class loaders: the Bootstrap Class Loader, the Extension
    Class Loader, and the Application Class Loader. They work together to load classes
    from system libraries, extensions, and application code, respectively.`'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`类加载器负责按需加载类到JVM中。主要有三个类加载器：引导类加载器、扩展类加载器和应用类加载器。它们分别从系统库、扩展和应用程序代码中加载类。`'
- en: '`ClassLoader classLoader = MyClass.class.getClassLoader();`'
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`ClassLoader classLoader = MyClass.class.getClassLoader();`'
- en: '`5. Memory Management:`'
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`5. 内存管理：`'
- en: The JVM manages memory using different segments, including the heap (for object
    storage), the method area (for class metadata), the stack (for method calls and
    local variables), and the native method stack (for native method calls).
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: JVM通过使用不同的内存段来管理内存，包括堆（用于存储对象）、方法区（用于存储类的元数据）、栈（用于方法调用和局部变量）以及本地方法栈（用于本地方法调用）。
- en: '`int[] array = new int[1000]; // Memory allocated on the heap`'
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int[] array = new int[1000]; // 内存分配在堆上`'
- en: '`6\. Garbage Collection:`'
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`6\. 垃圾回收：`'
- en: Java employs automatic garbage collection to reclaim memory occupied by objects
    that are no longer in use. The JVM periodically identifies and frees memory from
    unreachable objects.
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: Java采用自动垃圾回收机制来回收不再使用的对象所占的内存。JVM定期识别并释放不可达对象的内存。
- en: // Explicitly trigger garbage collection
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: // 显式触发垃圾回收
- en: '`System.gc();`'
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`System.gc();`'
- en: '`7\. Java Native Interface (JNI):`'
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`7\. Java本地接口（JNI）：`'
- en: '`JNI` enables Java code to call functions written in languages like C and C++.
    It is used when platform-specific functionality is required or for integrating
    with existing native libraries.'
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`JNI`使Java代码能够调用用C和C++等语言编写的函数。当需要平台特定的功能或与现有的本地库进行集成时，使用JNI。'
- en: '`public class NativeLibraryExample {`'
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public class NativeLibraryExample {`'
- en: // Load a native library
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: // 加载本地库
- en: '`static {`'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`static {`'
- en: '`System.loadLibrary("myplatformlibrary");`'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`System.loadLibrary("myplatformlibrary");`'
- en: '`}`'
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: // Declare a native method
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: // 声明本地方法
- en: '`public native void platformSpecificMethod();`'
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public native void platformSpecificMethod();`'
- en: '`}`'
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`8\. Multithreading:`'
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`8\. 多线程：`'
- en: The JVM supports multithreading, allowing Java applications to execute multiple
    threads concurrently. Java’s `java.lang.Thread` class and various synchronization
    mechanisms enable developers to create multi-threaded applications.
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: JVM支持多线程，允许Java应用程序并发执行多个线程。Java的`java.lang.Thread`类和各种同步机制使得开发者能够创建多线程应用程序。
- en: '`class MyThread extends Thread {`'
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`class MyThread extends Thread {`'
- en: '`public void run() {`'
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public void run() {`'
- en: // Thread execution logic
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: // 线程执行逻辑
- en: '`}`'
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-97
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`MyThread thread1 = new MyThread();`'
  id: totrans-98
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`MyThread thread1 = new MyThread();`'
- en: '`thread1.start(); // Start the thread`'
  id: totrans-99
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`thread1.start(); // 启动线程`'
- en: '`9\. Security and Sandbox:`'
  id: totrans-100
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`9\. 安全性和沙箱：`'
- en: The JVM incorporates security features to create a safe execution environment.
    It enforces access controls, bytecode verification, and provides a security manager
    to restrict potentially harmful operations.
  id: totrans-101
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: JVM集成了安全特性，以创建一个安全的执行环境。它强制执行访问控制、字节码验证，并提供安全管理器来限制可能有害的操作。
- en: Understanding the JVM’s inner workings is crucial for Java developers to optimize
    their code and troubleshoot issues effectively. It also enables developers to
    harness the full potential of Java’s platform independence and write robust, cross-platform
    applications.
  id: totrans-102
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 理解JVM的内部工作原理对于Java开发者来说至关重要，它有助于优化代码并有效地排查问题。它还使开发者能够充分利用Java的平台独立性，编写健壮的跨平台应用程序。
- en: '* * *'
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '* * *'
- en: '`4.3 Object-Oriented Principles in Java`'
  id: totrans-104
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`4.3 Java中的面向对象原则`'
- en: Java is renowned for its strong adherence to object-oriented programming (OOP)
    principles. In this section, we’ll delve into the core concepts of OOP in Java
    and how they contribute to the language’s design and structure.
  id: totrans-105
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: Java以其强大的面向对象编程（OOP）原则而闻名。在本节中，我们将深入探讨Java中OOP的核心概念，以及它们如何促进语言的设计和结构。
- en: '`1\. Classes and Objects:`'
  id: totrans-106
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`1\. 类和对象：`'
- en: At the heart of Java’s OOP paradigm are classes and objects. A class defines
    a blueprint for objects, specifying their attributes (fields) and behaviors (methods).
  id: totrans-107
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: Java面向对象编程范式的核心是类和对象。类定义了对象的蓝图，指定了它们的属性（字段）和行为（方法）。
- en: '`public class Student {`'
  id: totrans-108
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public class Student {`'
- en: // Fields
  id: totrans-109
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: // 字段
- en: '`String name;`'
  id: totrans-110
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`String name;`'
- en: '`int age;`'
  id: totrans-111
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int age;`'
- en: // Constructor
  id: totrans-112
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: // 构造函数
- en: '`public Student(String name, int age) {`'
  id: totrans-113
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public Student(String name, int age) {`'
- en: '`this.name = name;`'
  id: totrans-114
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`this.name = name;`'
- en: '`this.age = age;`'
  id: totrans-115
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`this.age = age;`'
- en: '`}`'
  id: totrans-116
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: // Method
  id: totrans-117
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: // 方法
- en: '`public void study() {`'
  id: totrans-118
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public void study() {`'
- en: '`System.out.println(name + " is studying.");`'
  id: totrans-119
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`System.out.println(name + " is studying.");`'
- en: '`}`'
  id: totrans-120
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-121
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: In this example, the `Student` class defines fields (`name` and `age`), a constructor
    to initialize objects, and a method (`study`) to perform an action.
  id: totrans-122
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个例子中，`Student`类定义了字段（`name`和`age`）、一个构造函数用于初始化对象，以及一个方法（`study`）用于执行操作。
- en: '`2\. Encapsulation:`'
  id: totrans-123
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`2\. 封装：`'
- en: Java encourages encapsulation, the practice of bundling data (fields) and methods
    that operate on that data within a single unit (class). This helps maintain data
    integrity and control access.
  id: totrans-124
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: Java鼓励封装，即将数据（字段）和操作数据的方法捆绑在一个单元（类）中。这有助于维护数据的完整性并控制访问。
- en: '`public class BankAccount {`'
  id: totrans-125
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public class BankAccount {`'
- en: private double balance;
  id: totrans-126
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: private double balance;
- en: '`public void deposit(double amount) {`'
  id: totrans-127
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public void deposit(double amount) {`'
- en: '`// Deposit logic`'
  id: totrans-128
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 存款逻辑`'
- en: '`balance += amount;`'
  id: totrans-129
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`balance += amount;`'
- en: '`}`'
  id: totrans-130
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`public double getBalance() {`'
  id: totrans-131
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public double getBalance() {`'
- en: '`return balance;`'
  id: totrans-132
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return balance;`'
- en: '`}`'
  id: totrans-133
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-134
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`balance`字段被封装在`BankAccount`类中，并通过如`deposit`和`getBalance`等方法进行访问控制。'
  id: totrans-135
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`balance`字段被封装在`BankAccount`类中，并通过如`deposit`和`getBalance`等方法进行访问控制。'
- en: '`3\. 继承：`'
  id: totrans-136
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`3\. 继承：`'
- en: 继承允许一个类（子类或派生类）继承另一个类（超类或基类）的属性和行为。Java支持单继承（一个子类可以从一个超类继承）和多个接口（一个类可以实现多个接口）。
  id: totrans-137
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 继承允许一个类（子类或派生类）继承另一个类（超类或基类）的属性和行为。Java支持单继承（一个子类可以从一个超类继承）和多个接口（一个类可以实现多个接口）。
- en: '`public class Animal {`'
  id: totrans-138
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public class Animal {`'
- en: '`void eat() {`'
  id: totrans-139
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`void eat() {`'
- en: '`System.out.println("Animal is eating.");`'
  id: totrans-140
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`System.out.println("Animal is eating.");`'
- en: '`}`'
  id: totrans-141
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-142
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`public class Dog extends Animal {`'
  id: totrans-143
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public class Dog extends Animal {`'
- en: '`void bark() {`'
  id: totrans-144
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`void bark() {`'
- en: '`System.out.println("Dog is barking.");`'
  id: totrans-145
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`System.out.println("Dog is barking.");`'
- en: '`}`'
  id: totrans-146
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-147
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: 在这个例子中，`Dog`类从`Animal`类继承`eat`方法。
  id: totrans-148
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个例子中，`Dog`类从`Animal`类继承`eat`方法。
- en: '`4\. 多态：`'
  id: totrans-149
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`4\. 多态：`'
- en: 多态允许不同类的对象被视为公共超类的对象。它启用方法重写和动态方法绑定。
  id: totrans-150
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 多态允许不同类的对象被视为公共超类的对象。它启用方法重写和动态方法绑定。
- en: '`class Shape {`'
  id: totrans-151
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`class Shape {`'
- en: '`void draw() {`'
  id: totrans-152
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`void draw() {`'
- en: '`System.out.println("Drawing a shape.");`'
  id: totrans-153
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`System.out.println("Drawing a shape.");`'
- en: '`}`'
  id: totrans-154
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-155
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`class Circle extends Shape {`'
  id: totrans-156
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`class Circle extends Shape {`'
- en: '`@Override`'
  id: totrans-157
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`@Override`'
- en: '`void draw() {`'
  id: totrans-158
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`void draw() {`'
- en: '`System.out.println("Drawing a circle.");`'
  id: totrans-159
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`System.out.println("Drawing a circle.");`'
- en: '`}`'
  id: totrans-160
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-161
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`class Square extends Shape {`'
  id: totrans-162
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`class Square extends Shape {`'
- en: '`@Override`'
  id: totrans-163
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`@Override`'
- en: '`void draw() {`'
  id: totrans-164
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`void draw() {`'
- en: '`System.out.println("Drawing a square.");`'
  id: totrans-165
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`System.out.println("Drawing a square.");`'
- en: '`}`'
  id: totrans-166
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-167
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: 多态允许您将`Circle`和`Square`对象视为`Shape`对象，并调用它们的`draw`方法而不知道它们的具体类型。
  id: totrans-168
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 多态允许您将`Circle`和`Square`对象视为`Shape`对象，并调用它们的`draw`方法而不知道它们的具体类型。
- en: '`5\. 抽象：`'
  id: totrans-169
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`5\. 抽象：`'
- en: 抽象是通过基于基本属性和行为对类进行建模来简化复杂现实的过程。抽象类和接口用于定义Java中的抽象。
  id: totrans-170
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 抽象是通过基于基本属性和行为对类进行建模来简化复杂现实的过程。抽象类和接口用于定义Java中的抽象。
- en: '`abstract class Shape {`'
  id: totrans-171
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`abstract class Shape {`'
- en: '`abstract void draw();`'
  id: totrans-172
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`abstract void draw();`'
- en: '`}`'
  id: totrans-173
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`class Circle extends Shape {`'
  id: totrans-174
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`class Circle extends Shape {`'
- en: '`@Override`'
  id: totrans-175
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`@Override`'
- en: '`void draw() {`'
  id: totrans-176
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`void draw() {`'
- en: '`System.out.println("Drawing a circle.");`'
  id: totrans-177
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`System.out.println("Drawing a circle.");`'
- en: '`}`'
  id: totrans-178
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-179
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: 在这个例子中，`Shape`是一个抽象类，具有抽象方法`draw`。像`Circle`这样的子类提供具体实现。
  id: totrans-180
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个例子中，`Shape`是一个抽象类，具有抽象方法`draw`。像`Circle`这样的子类提供具体实现。
- en: '`6\. 接口：`'
  id: totrans-181
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`6\. 接口：`'
- en: Java支持接口，接口定义了类必须遵守的契约。一个类可以实现多个接口，从而实现行为的多重继承。
  id: totrans-182
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: Java支持接口，接口定义了类必须遵守的契约。一个类可以实现多个接口，从而实现行为的多重继承。
- en: '`interface Drawable {`'
  id: totrans-183
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`interface Drawable {`'
- en: '`void draw();`'
  id: totrans-184
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`void draw();`'
- en: '`}`'
  id: totrans-185
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`class Circle implements Drawable {`'
  id: totrans-186
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`class Circle implements Drawable {`'
- en: '`@Override`'
  id: totrans-187
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`@Override`'
- en: '`void draw() {`'
  id: totrans-188
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`void draw() {`'
- en: '`System.out.println("Drawing a circle.");`'
  id: totrans-189
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`System.out.println("绘制一个圆形");`'
- en: '`}`'
  id: totrans-190
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-191
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: 在这里，`Circle`类实现了`Drawable`接口，并提供了`draw`方法的实现。
  id: totrans-192
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这里，`Circle`类实现了`Drawable`接口，并提供了`draw`方法的实现。
- en: Java强大的面向对象基础使其适合构建模块化、可维护和可扩展的软件系统。理解并应用如封装、继承、多态和抽象等面向对象原则对有效的Java开发至关重要。
  id: totrans-193
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: Java强大的面向对象基础使其适合构建模块化、可维护和可扩展的软件系统。理解并应用如封装、继承、多态和抽象等面向对象原则对有效的Java开发至关重要。
- en: '*** '
  id: totrans-194
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '*** '
- en: '`4.4 Java中的垃圾回收`'
  id: totrans-195
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`4.4 Java中的垃圾回收`'
- en: Java的自动垃圾回收（GC）是一个基本特性，有助于通过回收不再被引用的对象占用的内存来管理内存。在这一部分，我们将探讨Java中垃圾回收的工作原理及其在防止内存泄漏方面的重要性。
  id: totrans-196
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: Java的自动垃圾回收（GC）是一个基本特性，有助于通过回收不再被引用的对象占用的内存来管理内存。在这一部分，我们将探讨Java中垃圾回收的工作原理及其在防止内存泄漏方面的重要性。
- en: '`1\. Java中的内存管理：`'
  id: totrans-197
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`1\. Java中的内存管理：`'
- en: '`In Java, developers allocate memory for objects using the new keyword. The
    JVM’s memory management system divides memory into various areas, including the
    heap, method area, stack, and native method stack.`'
  id: totrans-198
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`在Java中，开发人员使用new关键字为对象分配内存。JVM的内存管理系统将内存划分为多个区域，包括堆、方法区、栈和本地方法栈。`'
- en: '•            `Heap`: `The heap is where objects are allocated and deallocated.
    It’s the main area managed by the garbage collector.`'
  id: totrans-199
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '•            `堆（Heap）`: `堆是分配和回收对象的地方，是垃圾回收器管理的主要区域。`'
- en: '•            `Method Area`: `This area stores class metadata, static variables,
    and constant pool data.`'
  id: totrans-200
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '•            `方法区（Method Area）`: `此区域存储类元数据、静态变量和常量池数据。`'
- en: '•            `Stack`: `Each thread has its own stack, which contains method
    call frames and local variables.`'
  id: totrans-201
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '•            `栈（Stack）`: `每个线程都有自己的栈，其中包含方法调用栈帧和局部变量。`'
- en: '•            `Native Method Stack`: `Used for native method calls.`'
  id: totrans-202
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '•            `本地方法栈（Native Method Stack）`: `用于本地方法调用。`'
- en: '`2. Reference Counting:`'
  id: totrans-203
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`2. 引用计数：`'
- en: '`In some programming languages, objects are tracked using reference counting,
    where each object keeps track of the number of references to it. When the reference
    count drops to zero, the object is considered no longer in use and can be deallocated.`'
  id: totrans-204
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`在某些编程语言中，使用引用计数来跟踪对象，其中每个对象会记录引用它的次数。当引用计数降到零时，表示对象不再使用，可以被回收。`'
- en: '`class MyObject {`'
  id: totrans-205
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`class MyObject {`'
- en: '`int data;`'
  id: totrans-206
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int data;`'
- en: '`MyObject reference;`'
  id: totrans-207
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`MyObject reference;`'
- en: '`MyObject(int data) {`'
  id: totrans-208
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`MyObject(int data) {`'
- en: '`this.data = data;`'
  id: totrans-209
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`this.data = data;`'
- en: '`}`'
  id: totrans-210
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-211
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`MyObject obj1 = new MyObject(1);`'
  id: totrans-212
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`MyObject obj1 = new MyObject(1);`'
- en: '`MyObject obj2 = new MyObject(2);`'
  id: totrans-213
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`MyObject obj2 = new MyObject(2);`'
- en: '`obj1.reference = obj2;`'
  id: totrans-214
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`obj1.reference = obj2;`'
- en: '`obj2.reference = obj1;`'
  id: totrans-215
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`obj2.reference = obj1;`'
- en: '`However, Java does not use reference counting as its primary memory management
    technique because it cannot handle cyclic references efficiently.`'
  id: totrans-216
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`然而，Java并不使用引用计数作为其主要的内存管理技术，因为它无法有效地处理循环引用。`'
- en: '`3. Reachability Analysis:`'
  id: totrans-217
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`3. 可达性分析：`'
- en: '`Java employs reachability analysis to determine whether an object is still
    in use. An object is considered reachable if it can be accessed through references
    from the root set, which includes objects referenced by active threads, local
    variables, and static variables.`'
  id: totrans-218
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java使用可达性分析来确定对象是否仍在使用中。如果对象可以通过根集中的引用（包括由活动线程、局部变量和静态变量引用的对象）访问，则认为该对象是可达的。`'
- en: '`public class ReachabilityExample {`'
  id: totrans-219
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public class ReachabilityExample {`'
- en: '`public static void main(String[] args) {`'
  id: totrans-220
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public static void main(String[] args) {`'
- en: '`MyObject obj1 = new MyObject(1);`'
  id: totrans-221
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`MyObject obj1 = new MyObject(1);`'
- en: '`MyObject obj2 = new MyObject(2);`'
  id: totrans-222
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`MyObject obj2 = new MyObject(2);`'
- en: '`obj1.reference = obj2;`'
  id: totrans-223
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`obj1.reference = obj2;`'
- en: '`obj2.reference = obj1;`'
  id: totrans-224
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`obj2.reference = obj1;`'
- en: '`// obj1 and obj2 are still reachable`'
  id: totrans-225
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// obj1和obj2仍然是可达的`'
- en: '`}`'
  id: totrans-226
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-227
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`In this example, even though obj1 and obj2 reference each other, they are
    considered reachable because they can be accessed through the local variables
    obj1 and obj2.`'
  id: totrans-228
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`在这个例子中，尽管obj1和obj2互相引用，但它们被视为可达的，因为可以通过局部变量obj1和obj2访问到它们。`'
- en: '`4. The Role of the Garbage Collector:`'
  id: totrans-229
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`4. 垃圾回收器的角色：`'
- en: '`The garbage collector’s primary role is to identify and reclaim memory occupied
    by objects that are no longer reachable. It does this by periodically traversing
    the object graph from the root set and marking reachable objects. Unreachable
    objects are then deallocated, freeing up memory for future allocations.`'
  id: totrans-230
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`垃圾回收器的主要角色是识别并回收那些不再可达的对象所占用的内存。它通过定期遍历从根集开始的对象图，标记可达的对象。不可达的对象随后会被回收，从而释放内存以供将来的分配。`'
- en: '`5. Types of Garbage Collectors:`'
  id: totrans-231
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`5. 垃圾回收器的类型：`'
- en: '`Java provides several garbage collection algorithms, each suited for specific
    scenarios. Common types include:`'
  id: totrans-232
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java提供了多种垃圾回收算法，每种算法适用于特定场景。常见的类型包括：`'
- en: '•            `Serial Garbage Collector`: `Suitable for single-threaded applications.`'
  id: totrans-233
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '•            `串行垃圾回收器（Serial Garbage Collector）`: `适用于单线程应用程序。`'
- en: '•            `Parallel Garbage Collector`: `Designed for multi-threaded applications
    with low pause time requirements.`'
  id: totrans-234
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '•            `并行垃圾回收器`: `设计用于多线程应用，要求低暂停时间。`'
- en: '•            `Concurrent Mark-Sweep (CMS) Garbage Collector`: `Reduces pause
    times for applications sensitive to latency.`'
  id: totrans-235
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '•            `并发标记-清除（CMS）垃圾回收器`: `减少对延迟敏感应用的暂停时间。`'
- en: '•            `G1 Garbage Collector`: `Designed for large heaps and improved
    throughput with low pause times.`'
  id: totrans-236
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '•            `G1垃圾回收器`: `为大堆和提高吞吐量、低暂停时间设计。`'
- en: '`6. Explicit Garbage Collection:`'
  id: totrans-237
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`6. 显式垃圾回收：`'
- en: 虽然`JVM`会自动管理内存，但开发人员可以使用`System.gc()`或`Runtime.getRuntime().gc()`请求显式的垃圾回收。然而，通常不建议这样做，因为`JVM`在判断何时运行`GC`时通常更有效。
  id: totrans-238
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 虽然`JVM`会自动管理内存，但开发人员可以使用`System.gc()`或`Runtime.getRuntime().gc()`请求显式的垃圾回收。然而，通常不建议这样做，因为`JVM`在判断何时运行`GC`时通常更有效。
- en: '`System.gc();  // Explicitly request garbage collection`'
  id: totrans-239
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`System.gc();  // 显式请求垃圾回收`'
- en: '7\. Memory Leaks:'
  id: totrans-240
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 7\. 内存泄漏：
- en: 内存泄漏发生在对象因未正确解除引用而意外保留在内存中。`Java`的垃圾收集器通过回收不可达对象的内存来帮助防止内存泄漏。然而，开发人员应当谨慎处理长时间存在的对象引用，以避免意外的内存保留。
  id: totrans-241
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 内存泄漏发生在对象因未正确解除引用而意外保留在内存中。`Java`的垃圾收集器通过回收不可达对象的内存来帮助防止内存泄漏。然而，开发人员应当谨慎处理长时间存在的对象引用，以避免意外的内存保留。
- en: 理解`Java`中的垃圾回收工作原理对于编写高效和内存安全的应用程序至关重要。`Java`的自动内存管理系统有助于简化内存处理，但开发人员仍应了解最佳实践，以确保最佳内存使用并避免内存泄漏。
  id: totrans-242
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 理解`Java`中的垃圾回收工作原理对于编写高效和内存安全的应用程序至关重要。`Java`的自动内存管理系统有助于简化内存处理，但开发人员仍应了解最佳实践，以确保最佳内存使用并避免内存泄漏。
- en: '* * *'
  id: totrans-243
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '* * *'
- en: 4.5 `Java`在企业解决方案中的应用
  id: totrans-244
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 4.5 `Java`在企业解决方案中的应用
- en: '`Java`的多功能性和强大特性使其成为开发企业级应用程序和解决方案的热门选择。在本节中，我们将探讨`Java`为何适合企业，并深入一些突出的使用案例。'
  id: totrans-245
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java`的多功能性和强大特性使其成为开发企业级应用程序和解决方案的热门选择。在本节中，我们将探讨`Java`为何适合企业，并深入一些突出的使用案例。'
- en: '1\. Platform Independence:'
  id: totrans-246
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 1\. 平台独立性：
- en: '`Java`在企业中的一个关键优势是其平台独立性。`Java`应用程序可以在各种操作系统和硬件上运行，使得在多样化环境中部署和维护软件变得更容易。这种兼容性降低了企业的总拥有成本。'
  id: totrans-247
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java`在企业中的一个关键优势是其平台独立性。`Java`应用程序可以在各种操作系统和硬件上运行，使得在多样化环境中部署和维护软件变得更容易。这种兼容性降低了企业的总拥有成本。'
- en: '2\. Scalability:'
  id: totrans-248
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 2\. 可扩展性：
- en: '`Java`具有高度的可扩展性，允许企业构建能够处理不断增加的工作负载并适应增长用户群的应用程序。`Java`对多线程和分布式计算的支持使其适合大型系统。'
  id: totrans-249
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java`具有高度的可扩展性，允许企业构建能够处理不断增加的工作负载并适应增长用户群的应用程序。`Java`对多线程和分布式计算的支持使其适合大型系统。'
- en: '3\. Reliability and Stability:'
  id: totrans-250
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '3\. 稳定性和可靠性:'
- en: '`Java`因其稳定性和可靠性而闻名。企业依赖`Java`来运行关键任务应用程序，系统崩溃或意外行为是不可接受的。`Java`的内存管理和异常处理增强了其稳健性。'
  id: totrans-251
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java`因其稳定性和可靠性而闻名。企业依赖`Java`来运行关键任务应用程序，系统崩溃或意外行为是不可接受的。`Java`的内存管理和异常处理增强了其稳健性。'
- en: '4\. Security:'
  id: totrans-252
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 4\. 安全性：
- en: 安全性在企业解决方案中至关重要，`Java`提供了多个安全特性。它拥有强大的安全模型，包括使用`Security Manager`来控制不可信代码。`Java`定期发布安全更新，以解决漏洞。
  id: totrans-253
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 安全性在企业解决方案中至关重要，`Java`提供了多个安全特性。它拥有强大的安全模型，包括使用`Security Manager`来控制不可信代码。`Java`定期发布安全更新，以解决漏洞。
- en: '5\. Enterprise Edition (`Java EE`):'
  id: totrans-254
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 5\. 企业版（`Java EE`）：
- en: '`Java EE`，现在称为`Jakarta EE`，是一组扩展`Java SE`平台的规范，用于构建大规模的分布式企业应用程序。它提供了标准化的API，用于数据库访问、消息传递和Web服务等任务。'
  id: totrans-255
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java EE`，现在称为`Jakarta EE`，是一组扩展`Java SE`平台的规范，用于构建大规模的分布式企业应用程序。它提供了标准化的API，用于数据库访问、消息传递和Web服务等任务。'
- en: '`@WebServlet("/HelloServlet")`'
  id: totrans-256
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`@WebServlet("/HelloServlet")`'
- en: '`public class HelloServlet extends HttpServlet {`'
  id: totrans-257
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public class HelloServlet extends HttpServlet {`'
- en: '`protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {`'
  id: totrans-258
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {`'
- en: '`response.getWriter().write("Hello, Enterprise!");`'
  id: totrans-259
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`response.getWriter().write("Hello, Enterprise!");`'
- en: '`}`'
  id: totrans-260
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-261
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '6\. Web Applications:'
  id: totrans-262
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 6\. Web应用：
- en: '`Java`在Web应用开发中被广泛使用。`Java Servlets`和`JavaServer Pages (JSP)`是构建动态和交互式Web应用时常用的技术。像`Spring`和`JavaServer
    Faces (JSF)`这样的框架促进了Web开发。'
  id: totrans-263
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java`在Web应用开发中被广泛使用。`Java Servlets`和`JavaServer Pages (JSP)`是构建动态和交互式Web应用时常用的技术。像`Spring`和`JavaServer
    Faces (JSF)`这样的框架促进了Web开发。'
- en: '`7. Enterprise Integration:` '
  id: totrans-264
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`7. 企业集成：`'
- en: 许多企业与遗留系统和数据库一起运营。`Java`提供了与这些系统集成的库和工具，确保平滑过渡到现代解决方案，而不干扰现有操作。
  id: totrans-265
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 许多企业与遗留系统和数据库一起运营。`Java`提供了与这些系统集成的库和工具，确保平滑过渡到现代解决方案，而不干扰现有操作。
- en: '`8. Microservices Architecture:` '
  id: totrans-266
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`8. 微服务架构：`'
- en: '`Java`非常适合微服务架构，在这种架构中，应用程序被划分为小的、独立可部署的服务。像`Docker`这样的容器和像`Kubernetes`这样的编排工具通常与`Java`结合使用来管理微服务。'
  id: totrans-267
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java`非常适合微服务架构，在这种架构中，应用程序被划分为小的、独立可部署的服务。像`Docker`这样的容器和像`Kubernetes`这样的编排工具通常与`Java`结合使用来管理微服务。'
- en: '`9. Big Data and Analytics:` '
  id: totrans-268
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`9. 大数据与分析：`'
- en: '`Java`在大数据和分析领域也有一席之地。`Apache Hadoop`和`Apache Spark`这两个广泛使用的大数据框架，主要用`Java`开发。`Java`的性能和可扩展性是处理大数据集的优势。'
  id: totrans-269
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java`在大数据和分析领域也有一席之地。`Apache Hadoop`和`Apache Spark`这两个广泛使用的大数据框架，主要用`Java`开发。`Java`的性能和可扩展性是处理大数据集的优势。'
- en: '`10. DevOps and Continuous Integration:` '
  id: totrans-270
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`10. DevOps 和持续集成：`'
- en: '`Java`与`DevOps`实践和持续集成/持续部署（`CI/CD`）管道良好集成。像`Jenkins`、`Maven`和`Gradle`这样的工具常用于构建、测试和部署`Java`应用。'
  id: totrans-271
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java`与`DevOps`实践和持续集成/持续部署（`CI/CD`）管道良好集成。像`Jenkins`、`Maven`和`Gradle`这样的工具常用于构建、测试和部署`Java`应用。'
- en: '`11. Mobile and IoT Applications:` '
  id: totrans-272
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`11. 移动和物联网应用：`'
- en: 虽然`Android`主要使用`Java`进行移动应用开发，但`Java`的可移植性和适用于嵌入式系统的特点，使其成为物联网（`IoT`）应用的可行选择。
  id: totrans-273
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 虽然`Android`主要使用`Java`进行移动应用开发，但`Java`的可移植性和适用于嵌入式系统的特点，使其成为物联网（`IoT`）应用的可行选择。
- en: '`12. Financial Services:` '
  id: totrans-274
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`12. 金融服务：`'
- en: '`金融`行业高度依赖`Java`构建交易平台、风险管理系统和电子交易解决方案，这得益于`Java`的低延迟和高吞吐能力。'
  id: totrans-275
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`金融`行业高度依赖`Java`构建交易平台、风险管理系统和电子交易解决方案，这得益于`Java`的低延迟和高吞吐能力。'
- en: '`13. Healthcare and Telecommunications:`'
  id: totrans-276
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`13. 医疗保健与电信：`'
- en: '`Java`在医疗系统中普遍应用，管理病人记录和医院运营。在电信行业，它被用于网络管理和通信协议。'
  id: totrans-277
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java`在医疗系统中普遍应用，管理病人记录和医院运营。在电信行业，它被用于网络管理和通信协议。'
- en: '`Java`在企业解决方案中的存在持续增长，因为组织寻求可靠、可扩展和安全的技术来支持其运营。`Java`对各种领域的适应性，以及丰富的库和框架生态系统，使其成为各行业企业的可靠选择。'
  id: totrans-278
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java`在企业解决方案中的存在持续增长，因为组织寻求可靠、可扩展和安全的技术来支持其运营。`Java`对各种领域的适应性，以及丰富的库和框架生态系统，使其成为各行业企业的可靠选择。'
- en: '* * *'
  id: totrans-279
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '* * *'
