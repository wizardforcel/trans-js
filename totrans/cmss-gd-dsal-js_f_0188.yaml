- en: Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following exercises provide you with the opportunity to practice with graphs.
    The solutions to these exercises are found in the section [​*Chapter 18*​](f_0223.xhtml#graphs.solutions).
  prefs: []
  type: TYPE_NORMAL
- en: The first [graph](#fig.ch18.recommendation_graph) powers an e-commerce store’s
    recommendation engine. Each vertex represents a product available on the store’s
    website. The edges connect each product to other “similar” products the site will
    recommend to the user when browsing a particular item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the user is browsing “nails”, what other products will be recommended to
    the user?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If we perform depth-first search on the second [graph](#fig.ch18.exercise_2_graph),
    starting with the A vertex, what is the order in which we’ll traverse all the
    vertices? Assume that when given the choice to visit multiple adjacent vertices,
    we’ll first visit the node that is earliest in the alphabet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![images/graphs/recommendation_graph.png](images/graphs/recommendation_graph.png)![images/graphs/exercise_2_graph.png](images/graphs/exercise_2_graph.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: If we perform breadth-first search on the previous graph starting with the A
    vertex, what is the order in which we’ll traverse all the vertices? Assume that
    when given the choice to visit multiple adjacent vertices, we’ll first visit the
    node that is earliest in the alphabet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this chapter, I only provided the code for breadth-first traversal, as discussed
    in [​*Breadth-First Search*​](f_0183.xhtml#sect.breadth-first-search); that is,
    the code simply printed the value of each vertex. Modify the code so that it performs
    an actual search for a vertex value provided to the function. (We did this for
    depth-first search.) In other words, if the function finds the vertex it’s searching
    for, it should return that vertex’s value. Otherwise, it should return null.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In [​*Dijkstra’s Algorithm*​](f_0186.xhtml#sect.dijkstras-algorithm), we saw
    how Dijkstra’s algorithm helped us find the shortest path within a weighted graph.
    However, the concept of a shortest path exists within an unweighted graph as well.
    How?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The shortest path in a classic (unweighted) graph is the path that takes the
    fewest number of vertices to get from one vertex to another.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This can be especially useful in social networking applications. Take the example
    network that follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![images/graphs/exercise_5_graph.png](images/graphs/exercise_5_graph.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: If we want to know how Idris is connected to Lina, we’d see that she’s connected
    to her from two different directions; that is, Idris is a second-degree connection
    to Lina through Kamil, but she’s also a fifth-degree connection through Talia.
    Now, we’re probably interested in how closely Idris is connected to Lina, so the
    fact that she’s a fifth-degree connection is unimportant given that they’re also
    second-degree connections.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Write a function that accepts two vertices from a graph and returns the shortest
    path between them. The function should return an array containing the precise
    path, such as ["Idris", "Kamil", "Lina"].
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Hint: The algorithm may contain elements of both breadth-first search and Dijkstra’s
    algorithm.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Footnotes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[[7]](f_0184.xhtml#FNPTR-7)'
  prefs: []
  type: TYPE_NORMAL
- en: http://neo4j.com
  prefs: []
  type: TYPE_NORMAL
- en: '[[8]](f_0184.xhtml#FNPTR-8)'
  prefs: []
  type: TYPE_NORMAL
- en: https://www.arangodb.com
  prefs: []
  type: TYPE_NORMAL
- en: Copyright © 2024, The Pragmatic Bookshelf.
  prefs: []
  type: TYPE_NORMAL
