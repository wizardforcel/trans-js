- en: Exercises
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 练习
- en: The following exercises provide you with the opportunity to practice with graphs.
    The solutions to these exercises are found in the section [​`Chapter 18`​](f_0223.xhtml#graphs.solutions).
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下练习为您提供了使用图的机会。这些练习的解决方案在章节[​`第18章`​](f_0223.xhtml#graphs.solutions)中找到。
- en: The first [`graph`](#fig.ch18.recommendation_graph) powers an e-commerce store’s
    recommendation engine. Each vertex represents a product available on the store’s
    website. The edges connect each product to other “similar” products the site will
    recommend to the user when browsing a particular item.
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 第一个[`graph`](#fig.ch18.recommendation_graph)为电子商务商店的推荐引擎提供支持。每个顶点代表商店网站上可用的产品。边连接每个产品与其他“类似”产品，网站会在用户浏览特定商品时推荐给他们。
- en: If the user is browsing `“nails”`，what other products will be recommended to
    the user?
  id: totrans-3
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 如果用户正在浏览`“nails”`，将向用户推荐哪些其他产品？
- en: If we perform depth-first search on the second [`graph`](#fig.ch18.exercise_2_graph)，starting
    with the `A` vertex, what is the order in which we’ll traverse all the vertices?
    Assume that when given the choice to visit multiple adjacent vertices, we’ll first
    visit the node that is earliest in the alphabet.
  id: totrans-4
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 如果我们在第二个[`graph`](#fig.ch18.exercise_2_graph)上执行深度优先搜索，从`A`顶点开始，我们将以什么顺序遍历所有顶点？假设在选择访问多个相邻顶点时，我们首先访问字母表中最靠前的节点。
- en: '![`images/graphs/recommendation_graph.png`](images/graphs/recommendation_graph.png)![`images/graphs/exercise_2_graph.png`](images/graphs/exercise_2_graph.png)'
  id: totrans-5
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_IMG
  zh: '![`images/graphs/recommendation_graph.png`](images/graphs/recommendation_graph.png)![`images/graphs/exercise_2_graph.png`](images/graphs/exercise_2_graph.png)'
- en: If we perform breadth-first search on the previous graph starting with the `A`
    vertex, what is the order in which we’ll traverse all the vertices? Assume that
    when given the choice to visit multiple adjacent vertices, we’ll first visit the
    node that is earliest in the alphabet.
  id: totrans-6
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 如果我们从`A`顶点开始在前面的图上执行广度优先搜索，我们将以什么顺序遍历所有顶点？假设在选择访问多个相邻顶点时，我们首先访问字母表中最靠前的节点。
- en: In this chapter，I only provided the code for breadth-first traversal，as discussed
    in [​`Breadth-First Search`​](f_0183.xhtml#sect.breadth-first-search)；that is，the
    code simply printed the value of each vertex. Modify the code so that it performs
    an actual search for a vertex value provided to the function. (We did this for
    depth-first search.) In other words，if the function finds the vertex it’s searching
    for，it should return that vertex’s value. Otherwise，it should return `null`。
  id: totrans-7
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 在本章中，我仅提供了广度优先遍历的代码，如在[​`广度优先搜索`​](f_0183.xhtml#sect.breadth-first-search)中讨论的那样；也就是说，代码只是打印每个顶点的值。修改代码，使其能够对传递给函数的顶点值进行实际搜索。（我们在深度优先搜索中做过这件事。）换句话说，如果函数找到它正在搜索的顶点，它应该返回该顶点的值。否则，它应该返回`null`。
- en: In [​`Dijkstra’s Algorithm`​](f_0186.xhtml#sect.dijkstras-algorithm)，we saw
    how Dijkstra’s algorithm helped us find the shortest path within a weighted graph.
    However, the concept of a shortest path exists within an unweighted graph as well.
    How?
  id: totrans-8
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 在[​`Dijkstra算法`​](f_0186.xhtml#sect.dijkstras-algorithm)中，我们看到了Dijkstra算法如何帮助我们找到加权图中的最短路径。然而，最短路径的概念在无权图中也存在。如何存在呢？
- en: The shortest path in a classic (unweighted) graph is the path that takes the
    fewest number of vertices to get from one vertex to another.
  id: totrans-9
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 在经典的（无权）图中，最短路径是从一个顶点到另一个顶点所需经过的最少顶点数量的路径。
- en: 'This can be especially useful in social networking applications. Take the example
    network that follows:'
  id: totrans-10
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 这在社交网络应用中尤其有用。以下是一个示例网络：
- en: '![`images/graphs/exercise_5_graph.png`](images/graphs/exercise_5_graph.png)'
  id: totrans-11
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_IMG
  zh: '![`images/graphs/exercise_5_graph.png`](images/graphs/exercise_5_graph.png)'
- en: If we want to know how `Idris` is connected to `Lina`，we’d see that she’s connected
    to her from two different directions；that is，`Idris` is a second-degree connection
    to `Lina` through `Kamil`，but she’s also a fifth-degree connection through `Talia`。Now，we’re
    probably interested in how closely `Idris` is connected to `Lina`，so the fact
    that she’s a fifth-degree connection is unimportant given that they’re also second-degree
    connections.
  id: totrans-12
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 如果我们想知道`Idris`与`Lina`的连接方式，我们会发现她从两个不同的方向与她相连；也就是说，`Idris`通过`Kamil`与`Lina`是二度连接，但她通过`Talia`又是五度连接。现在，我们可能对`Idris`与`Lina`的紧密连接程度感兴趣，因此考虑到他们也是二度连接，五度连接的事实就不那么重要了。
- en: 编写一个函数，该函数接受图中的两个顶点，并返回它们之间的最短路径。该函数应返回一个包含精确路径的数组，例如`["Idris", "Kamil", "Lina"]`。
  id: totrans-13
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 编写一个函数，该函数接受图中的两个顶点，并返回它们之间的最短路径。该函数应返回一个包含精确路径的数组，例如`["Idris", "Kamil", "Lina"]`。
- en: 提示：算法可能包含广度优先搜索和Dijkstra算法的元素。
  id: totrans-14
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 提示：该算法可能包含广度优先搜索和Dijkstra算法的元素。
- en: 注释
  id: totrans-15
  prefs:
  - PREF_H4
  stylish: true
  type: TYPE_NORMAL
  zh: 注释
- en: '`[[7]](f_0184.xhtml#FNPTR-7)`'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`[[7]](f_0184.xhtml#FNPTR-7)`'
- en: '`http://neo4j.com`'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`http://neo4j.com`'
- en: '`[[8]](f_0184.xhtml#FNPTR-8)`'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`[[8]](f_0184.xhtml#FNPTR-8)`'
- en: '`https://www.arangodb.com`'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`https://www.arangodb.com`'
- en: 版权所有 © 2024, The Pragmatic Bookshelf.
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 版权所有 © 2024, The Pragmatic Bookshelf.
