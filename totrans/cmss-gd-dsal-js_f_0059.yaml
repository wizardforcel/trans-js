- en: The Efficiency of Insertion Sort
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: 'Four types of steps occur in Insertion Sort: removals, comparisons, shifts,
    and insertions. To analyze the efficiency of Insertion Sort, we need to tally
    up each of these steps.'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: First, let’s dig into comparisons. A comparison takes place each time we compare
    a value to the left of the gap with the `tempValue`. In a worst-case scenario,
    where the array is sorted in reverse order, we have to compare every number to
    the left of `tempValue` with `tempValue` in each pass-through. This is because
    each value to the left of `tempValue` will always be greater than `tempValue`,
    so the pass-through will only end when the gap reaches the left end of the array.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: During the first pass-through, in which `tempValue` is the value at index `1`,
    a maximum of one comparison is made since there’s only one value to the left of
    the `tempValue`. On the second pass-through, the maximum number of comparisons
    made is two, and so on. On the final pass-through, we need to compare the `tempValue`
    with every single value in the array besides `tempValue` itself. In other words,
    if there are `N` elements in the array, the maximum number of comparisons made
    in the final pass-through is `N - 1`.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'We can, therefore, formulate the total number of comparisons as:'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`1 + 2 + 3 + … + (N - 1)` comparisons.'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'In our example array that contains `five` elements, that’s a maximum of:'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`1 + 2 + 3 + 4 = 10` comparisons.'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'For an array containing `10` elements, there would be:'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45` comparisons.'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: For an array containing `20` elements, there would be a total of `190` comparisons,
    and so on.
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: When examining this pattern, it emerges that for an array containing `N` elements,
    there are approximately `N² / 2` comparisons. (`10² / 2` is `50`, and `20² / 2`
    is `200`。We’ll look at this pattern more closely in the next chapter.)
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Let’s continue analyzing the other types of steps.
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Shifts occur each time we move a value one cell to the right. When an array
    is sorted in reverse order, there will be as many shifts as there are comparisons
    since every comparison will force us to shift a value to the right.
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Let’s add up comparisons and shifts for a worst-case scenario:'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`N² / 2` comparisons'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`+ N² / 2` shifts'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: _____________________________
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`N²` steps'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Removing and inserting the `tempValue` from the array happens once per pass-through.
    Since there are always `N - 1` pass-throughs, we can conclude that there are `N
    - 1` removals and `N - 1` insertions.
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'So now we’ve got:'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`N²` comparisons and shifts combined'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`N - 1` removals'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`+ N - 1` insertions'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: _____________________________
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`N² + 2N - 2` steps'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'You’ve already learned one major rule of Big O: that Big O ignores constants.
    With this rule in mind, we’d—at first glance—simplify this to `O(N² + N)`.'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'However, I’ll now reveal another major rule of Big O:'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Big O notation only takes into account the highest order of `N` when we have
    multiple orders added together.
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 换句话说，如果我们有一个算法，其时间复杂度为`N⁴ + N³ + N² + N`步，我们只考虑`N⁴`为重要项——并称之为`O(N⁴)`。这是为什么呢？
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 看看下面的表格：
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| N | N² | N³ | N⁴ |'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 2 | 4 | 8 | 16 |'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 5 | 25 | 125 | 625 |'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 10 | 100 | 1,000 | 10,000 |'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 100 | 10,000 | 1,000,000 | 100,000,000 |'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 随着`N`的增加，`N⁴`变得远比任何其他阶数的重要，以至于较小的阶数被视为微不足道。例如，当我们查看表格的底行时，当我们添加`N⁴ + N³ + N²
    + N`时，总数为`101,010,100`。但我们可以将其四舍五入到`100,000,000`，这可以通过忽略`N`的较低阶数来实现。
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 我们可以将这个概念应用于`Insertion Sort`。尽管我们已经将`Insertion Sort`简化到`N² + N`步，但我们通过丢弃低阶项进一步简化了这个表达式，将其简化为`O(N²)`。
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在最坏情况下，`Insertion Sort`的时间复杂度与`Bubble Sort`和`Selection Sort`相同。它们都是`O(N²)`。
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 我在上一章中提到，尽管`Bubble Sort`和`Selection Sort`都是`O(N²)`，但`Selection Sort`更快，因为`Selection
    Sort`有`N² / 2`步，而`Bubble Sort`则有`N²`步。乍一看，我们可能会说`Insertion Sort`和`Bubble Sort`一样慢，因为它也大约需要`N²`步。
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 如果我在这里停止书籍，你可能会认为`Selection Sort`是三者中最佳的选择，因为它比`Bubble Sort`或`Insertion Sort`快两倍。但事实并没有那么简单。
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
