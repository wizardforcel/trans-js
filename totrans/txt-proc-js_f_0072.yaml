- en: '| Recipe 60 | Removing Duplicate Lines Separated by Other Lines |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: '| 食谱 60 | 去除被其他行分隔的重复行 |'
- en: Task
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务
- en: 'Suppose you want to eliminate duplicated lines that are not adjacent to each
    other like in the previous recipe. For instance, let’s say you have text like
    this:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你希望像前面的示例那样，去除不相邻的重复行。例如，假设你有以下文本：
- en: '|   | Team Power Rankings |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '|   | 团队实力排名 |'
- en: '|   | #1 Cleveland Cavaliers 45-28 |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '|   | #1 克利夫兰骑士 45-28 |'
- en: '|   | #2 Philadelphia 76ers 48-22 |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '|   | #2 费城76人 48-22 |'
- en: '|   | #1 Cleveland Cavaliers 45-28 |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '|   | #1 克利夫兰骑士 45-28 |'
- en: '|   | #3 Memphis Grizzlies 43-27 |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '|   | #3 孟菲斯灰熊 43-27 |'
- en: '|   | #2 Philadelphia 76ers 48-22 |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '|   | #2 费城76人 48-22 |'
- en: '|   | #4 Boston Celtics 49-23 |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '|   | #4 波士顿凯尔特人 49-23 |'
- en: 'And you need to write a code that outputs:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要编写一段代码来输出：
- en: '|   | Team Power Rankings |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '|   | 团队实力排名 |'
- en: '|   | #1 Cleveland Cavaliers 45-28 |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '|   | #1 克利夫兰骑士 45-28 |'
- en: '|   | #2 Philadelphia 76ers 48-22 |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '|   | #2 费城76人 48-22 |'
- en: '|   | #3 Memphis Grizzlies 43-27 |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '|   | #3 孟菲斯灰熊 43-27 |'
- en: '|   | #4 Boston Celtics 49-23 |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '|   | #4 波士顿凯尔特人 49-23 |'
- en: Your code should have the capability to remove duplicate entries, even if they
    are interspersed with other lines.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码应具有去除重复项的能力，即使它们与其他行交错出现。
- en: Solution
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Convert the string to an array, then pass the array to the Set constructor
    to remove duplicates, and finally convert the resulting Set to a string:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 将字符串转换为数组，然后将数组传递给 Set 构造函数以去除重复项，最后将结果 Set 转换为字符串：
- en: '[part_3/removing_dup_lines_v2/removing_dup_lines_v2_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_3/removing_dup_lines_v2/removing_dup_lines_v2_ex1.js)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_3/removing_dup_lines_v2/removing_dup_lines_v2_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_3/removing_dup_lines_v2/removing_dup_lines_v2_ex1.js)'
- en: '|   | **function** removeDuplicateLines(str) { |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '|   | **function** removeDuplicateLines(str) { |'
- en: '|   | **const** arr = str.split(*/**\r?\n**/*); |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** arr = str.split(*/**\r?\n**/*); |'
- en: '|   | **const** **set** = [...**new** Set(arr)]; |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** **set** = [...**new** Set(arr)]; |'
- en: '|   | **const** newStr = **set**.join(*"***\***n"*); |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** newStr = **set**.join(*"***\***n"*); |'
- en: '|   | **return** newStr; |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '|   | **return** newStr; |'
- en: '|   | } |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '|   | } |'
- en: '|   |  |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | **const** str = |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** str = |'
- en: '|   | *`Team Power Rankings* |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '|   | *`团队实力排名* |'
- en: '|   | *#1 Cleveland Cavaliers 45-28* |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '|   | *#1 克利夫兰骑士 45-28* |'
- en: '|   | *#2 Philadelphia 76ers 48-22* |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '|   | *#2 费城76人 48-22* |'
- en: '|   | *#1 Cleveland Cavaliers 45-28* |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '|   | *#1 克利夫兰骑士 45-28* |'
- en: '|   | *#3 Memphis Grizzlies 43-27* |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '|   | *#3 孟菲斯灰熊 43-27* |'
- en: '|   | *#2 Philadelphia 76ers 48-22* |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '|   | *#2 费城76人 48-22* |'
- en: '|   | *#4 Boston Celtics 49-23`*; |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '|   | *#4 波士顿凯尔特人 49-23`*; |'
- en: '|   |  |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | **const** result = removeDuplicateLines(str); |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** result = removeDuplicateLines(str); |'
- en: '|   |  |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | console.log(result); |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '|   | console.log(result); |'
- en: '|   | *// Team Power Rankings* |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '|   | *// 团队实力排名* |'
- en: '|   | *// #1 Cleveland Cavaliers 45-28* |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '|   | *// #1 克利夫兰骑士 45-28* |'
- en: '|   | *// #2 Philadelphia 76ers 48-22* |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '|   | *// #2 费城76人 48-22* |'
- en: '|   | *// #3 Memphis Grizzlies 43-27* |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '|   | *// #3 孟菲斯灰熊 43-27* |'
- en: '|   | *// #4 Boston Celtics 49-23* |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '|   | *// #4 波士顿凯尔特人 49-23* |'
- en: The result is a string with all duplicate lines eliminated.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个去除所有重复行的字符串。
- en: Discussion
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论
- en: First, we use split(/\r?\n/) to split the string at line breaks and create an
    array. This way, we can identify any duplicate elements in the array and eliminate
    them. We can achieve this by iterating over the array items, or more conveniently,
    by utilizing the Set constructor.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用 `split(/\r?\n/)` 按照换行符分割字符串，并创建一个数组。这样，我们就能识别数组中的重复元素并将其消除。我们可以通过遍历数组项来实现这一点，或者更方便地，利用
    Set 构造函数。
- en: 'So we pass the array to Set(): it automatically eliminates duplicate items
    and returns a Set object containing unique values. Afterward, we apply the spread
    (...) syntax within an array to transform the Set back into an array again. Finally,
    we use join("\n") to concatenate all of the elements in the array with each element
    separated with a line break character.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们将数组传递给 Set()：它会自动消除重复项，并返回一个包含唯一值的 Set 对象。之后，我们在数组中使用扩展运算符 (...) 语法，将 Set
    再次转换为数组。最后，我们使用 `join("\n")` 将数组中的所有元素连接起来，每个元素之间用换行符分隔。
- en: It’s possible to use this approach to remove duplicate lines that appear next
    to each other as well; however, the regex solution explained in the previous recipe
    would be much faster. On the other hand, the non-regex approach described in this
    recipe is faster than regex for removing duplicates that are separated by other
    lines.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法也可以用来去除相邻的重复行；然而，前面食谱中解释的正则表达式方案会更快。另一方面，本食谱中描述的非正则表达式方法在去除由其他行分隔的重复项时比正则表达式更快。
