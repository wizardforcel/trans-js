- en: O(log N) Explained
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s bring this all back to Big O notation. In this book, whenever we say O(log
    N), imagine that we’re saying O(log[2] N). In [​*Ignoring Constants*​](f_0052.xhtml#ignoring.constants),
    we’ll discuss why we’re dropping the base of 2 in our notation. But for now, when
    you see O(log N), treat it in your mind as O(log[2] N).
  prefs: []
  type: TYPE_NORMAL
- en: With this in mind, we can now explain precisely what O(log N) means.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recall that Big O notation resolves the key question: if there are N data elements,
    how many steps will the algorithm take?'
  prefs: []
  type: TYPE_NORMAL
- en: O(log N) means that for N data elements, the algorithm would take log[2] N steps.
    If there are 8 elements, the algorithm would take three steps, since log[2] 8
    = 3.
  prefs: []
  type: TYPE_NORMAL
- en: Said another way, if we keep dividing the 8 elements in half, it would take
    us three steps until we end up with 1 element.
  prefs: []
  type: TYPE_NORMAL
- en: This is exactly what happens with binary search. As we search for a particular
    item, we keep dividing the array’s cells in half until we narrow it down to the
    correct number.
  prefs: []
  type: TYPE_NORMAL
- en: 'Said simply: O(log N) means the algorithm takes as many steps as it takes to
    keep halving the data elements until we remain with 1.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table demonstrates a striking difference between the efficiencies
    of O(N) and O(log N):'
  prefs: []
  type: TYPE_NORMAL
- en: '| N Elements | O(N) | O(log N) |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | 8 | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 16 | 16 | 4 |'
  prefs: []
  type: TYPE_TB
- en: '| 32 | 32 | 5 |'
  prefs: []
  type: TYPE_TB
- en: '| 64 | 64 | 6 |'
  prefs: []
  type: TYPE_TB
- en: '| 128 | 128 | 7 |'
  prefs: []
  type: TYPE_TB
- en: '| 256 | 256 | 8 |'
  prefs: []
  type: TYPE_TB
- en: '| 512 | 512 | 9 |'
  prefs: []
  type: TYPE_TB
- en: '| 1024 | 1024 | 10 |'
  prefs: []
  type: TYPE_TB
- en: While the O(N) algorithm takes as many steps as there are data elements, the
    O(log N) algorithm takes just one additional step each time the data is doubled.
  prefs: []
  type: TYPE_NORMAL
- en: In future chapters, you’ll encounter algorithms that fall under categories of
    Big O notation other than the three you’ve learned about so far. But in the meantime,
    let’s apply these concepts to some examples of everyday code.
  prefs: []
  type: TYPE_NORMAL
