- en: The Problem of the Last Node…Again
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 最后一个节点的问题……再次
- en: While the heap deletion algorithm seems straightforward, it once again raises
    the problem of the last node.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 虽然堆的删除算法看起来很简单，但它再次引发了最后一个节点的问题。
- en: I explained that the first step of deletion requires us to move the last node
    and turn it into the root node. But how do we find the last node in the first
    place?
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我解释了删除的第一步需要将最后一个节点移动并将其变成根节点。但我们到底该如何找到最后一个节点呢？
- en: Before we solve the problem of the last node, let’s first explore why insertion
    and deletion are so dependent on the last node anyway. Why couldn’t we insert
    new values elsewhere in the heap? And why, when deleting, can’t we replace the
    root node with some other node other than the last node?
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在解决最后一个节点的问题之前，让我们先探讨一下插入和删除为什么如此依赖最后一个节点。为什么我们不能在堆的其他地方插入新值？而且，为什么在删除时，我们不能用根节点以外的其他节点替换根节点？
- en: 'Now, if you think about it, you’ll realize that if we were to use other nodes,
    the heap would become incomplete. But this begs the next question: why is completeness
    important for the heap?'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，仔细想一想，你会意识到如果我们使用其他节点，堆将变得不完整。但这引出了下一个问题：为什么完整性对堆如此重要？
- en: The reason why completeness is important is because we want to ensure our heap
    remains well balanced.
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 完整性之所以重要，是因为我们希望确保我们的堆保持良好平衡。
- en: 'To see this clearly, let’s take another look at insertion. Let’s say we have
    the following heap:'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为了清楚地看到这一点，让我们再看看插入。假设我们有以下堆：
- en: '![images/heaps/small_heap.png](images/heaps/small_heap.png)'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/heaps/small_heap.png](images/heaps/small_heap.png)'
- en: 'If we want to insert a `5` into this heap, the only way to keep the heap well
    balanced is by making the `5` the last node—in this case, making it a child of
    the `10`:'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果我们想在这个堆中插入一个`5`，保持堆良好平衡的唯一方法是将`5`作为最后一个节点——在这种情况下，将其设为`10`的子节点：
- en: '![images/heaps/make_5_last_node.png](images/heaps/make_5_last_node.png)'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/heaps/make_5_last_node.png](images/heaps/make_5_last_node.png)'
- en: 'Any alternative to this algorithm would cause imbalance. Say, in an alternative
    universe, the algorithm was to insert the new node into the bottom leftmost node,
    which we could easily find by traversing the left children until we hit the bottom.
    This would make the `5` a child of the `15`:'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 任何替代这个算法的方案都会导致失衡。比如，在一个替代宇宙中，算法是将新节点插入最左下角的节点，我们可以通过遍历左子节点直到底部轻易找到这个位置。这将使`5`成为`15`的子节点：
- en: '![images/heaps/make_5_child_of_15.png](images/heaps/make_5_child_of_15.png)'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/heaps/make_5_child_of_15.png](images/heaps/make_5_child_of_15.png)'
- en: Our heap is now somewhat imbalanced, and it’s easy to see how much more imbalanced
    it would become if we kept inserting new nodes at the bottom leftmost spot.
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们的堆现在有些失衡，容易看出如果我们不断在最左下角插入新节点，失衡会变得更加严重。
- en: 'Similarly, when deleting from a heap, we always turn the last node into the
    root because, otherwise, the heap can become imbalanced. Take again our example
    heap:'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 同样，在从堆中删除时，我们总是将最后一个节点变为根节点，因为否则堆可能会变得失衡。再次以我们的示例堆为例：
- en: '![images/heaps/small_heap.png](images/heaps/small_heap.png)'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/heaps/small_heap.png](images/heaps/small_heap.png)'
- en: If, in our alternative universe, we always moved the bottom rightmost node into
    the root position, the `10` would become the root node, and we’d end up with an
    imbalanced heap with a bunch of left descendants and zero right descendants.
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果在我们的替代宇宙中，我们总是将最右下角的节点移动到根位置，`10`将成为根节点，我们将最终得到一个失衡的堆，左侧后代众多而右侧后代为零。
- en: 'Now, the reason why this balance is so important is because it’s what allows
    us to achieve `O(log N)` operations. In a severely imbalanced tree like the following
    one, traversing it could take `O(N)` steps instead:'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，平衡之所以如此重要，是因为这使我们能够实现`O(log N)`的操作。在以下这种严重失衡的树中，遍历可能需要`O(N)`步：
- en: '![images/heaps/imbalanced_heap.png](images/heaps/imbalanced_heap.png)'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/heaps/imbalanced_heap.png](images/heaps/imbalanced_heap.png)'
- en: But this brings us back to the problem of the last node. What algorithm would
    allow us to consistently find the last node of any heap? (Again, without having
    to traverse all `N` nodes.)
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 但这又回到了最后一个节点的问题。什么算法能让我们持续找到任何堆的最后一个节点？（同样，无需遍历所有`N`个节点。）
- en: And this is where our plot takes a sudden twist.
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 而这正是情节的突然转折。
