- en: '`Bubble Sort`'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: Before jumping into our practical problem, though, we need to first look at
    a new category of algorithmic efficiency in the world of `Big O`. To demonstrate
    it, we’ll get to use one of the classic algorithms of computer-science lore.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Sorting algorithms have been the subject of extensive research in computer
    science, and tens of such algorithms have been developed over the years. They
    all solve the following problem:'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Given an array of unsorted values, how can we sort them so that they end up
    in ascending order?
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In this chapter and those following, we’re going to encounter a number of these
    sorting algorithms. Some of the first ones you’ll learn about are known as simple
    sorts, in that they are easy to understand but are not as efficient as some of
    the faster sorting algorithms out there.
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Bubble Sort` follows these steps:'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Point to two consecutive values in the array. (Initially, we start by pointing
    to the array’s first two values.) Compare the first item with the second one:'
  id: totrans-6
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_1.png](images/speeding_up_your_code_with_big_o/bubble_sort_1.png)'
  id: totrans-7
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_IMG
- en: 'If the two items are out of order (in other words, the left value is greater
    than the right value), swap them (if they already happen to be in the correct
    order, do nothing for this step):'
  id: totrans-8
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_2.png](images/speeding_up_your_code_with_big_o/bubble_sort_2.png)![images/speeding_up_your_code_with_big_o/bubble_sort_3.png](images/speeding_up_your_code_with_big_o/bubble_sort_3.png)'
  id: totrans-9
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_IMG
- en: 'Move the “pointers” one cell to the right:'
  id: totrans-10
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_4.png](images/speeding_up_your_code_with_big_o/bubble_sort_4.png)'
  id: totrans-11
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_IMG
- en: Repeat `Steps 1 through 3` until we reach the end of the array, or if we reach
    the values that have already been sorted. (This will make more sense in the walk-through
    that follows.) At this point, we’ve completed our first pass-through of the array—we
    “passed through” the array by pointing to each of its values until we reached
    the end.
  id: totrans-12
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: We then move the two pointers back to the first two values of the array and
    execute another pass-through of the array by running `Steps 1 through 4` again.
    We keep on executing these pass-throughs until we have a pass-through in which
    we did not perform any swaps. When this happens, it means our array is fully sorted
    and our work is done.
  id: totrans-13
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
