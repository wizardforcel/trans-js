- en: Abstract Data Types
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 抽象数据类型
- en: Most programming languages don’t come with the stack as a built-in data type
    or class. Instead, it’s up to you to implement it yourself. This is a stark contrast
    with arrays, which are available in most languages.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 大多数编程语言并没有将栈作为内置数据类型或类提供。相反，您需要自己实现它。这与大多数语言中可用的数组形成鲜明对比。
- en: 'To create a stack, then, you generally have to use one of the built-in data
    structures to hold the data. Here’s one way to implement a stack using JavaScript,
    which uses an array under the hood:'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因此，要创建一个栈，通常需要使用内置数据结构之一来存储数据。以下是一种使用 JavaScript 实现栈的方法，它在底层使用数组：
- en: '| ​  | `class` `Stack` { |'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `class` `Stack` { |'
- en: '| ​  | `constructor`() { |'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `constructor`() { |'
- en: '| ​  | `this.data = [];` |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `this.data = [];` |'
- en: '| ​  | } |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `push(element)` { |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `push(element)` { |'
- en: '| ​  | `this.data.push(element);` |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `this.data.push(element);` |'
- en: '| ​  | } |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `pop()` { |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `pop()` { |'
- en: '| ​  | `if` (`this.data.length > 0) { |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (`this.data.length > 0) { |'
- en: '| ​  | `return` `this.data.pop(); |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` `this.data.pop(); |'
- en: '| ​  | } `else` { |'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } `else` { |'
- en: '| ​  | `return` `null`; |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` `null`; |'
- en: '| ​  | } |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `read()` { |'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `read()` { |'
- en: '| ​  | `if` (`this.data.length > 0) { |'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (`this.data.length > 0) { |'
- en: '| ​  | `return` `this.data[this.data.length - 1]; |'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` `this.data[this.data.length - 1]; |'
- en: '| ​  | } `else` { |'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } `else` { |'
- en: '| ​  | `return` `null`; |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` `null`; |'
- en: '| ​  | } |'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `export` `default` `Stack`; |'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `export` `default` `Stack`; |'
- en: As you can see, our stack implementation stores the data in an array called
    `this.data`.
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如您所见，我们的栈实现将数据存储在一个名为 `this.data` 的数组中。
- en: Whenever a stack is initiated, we automatically build an empty array with `this.data
    = [];`. Our stack also contains methods that `push` a new element onto the end
    of `this.data`, `pop` an element from the beginning of `this.data`, and read the
    first element from the `this.data` array. (The `read` and `pop` methods return
    `null` if the stack is empty.)
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 每当初始化一个栈时，我们会自动构建一个空数组 `this.data = [];`。我们的栈还包含将新元素 `push` 到 `this.data` 末尾、从
    `this.data` 开头 `pop` 元素，以及读取 `this.data` 数组第一个元素的方法。（如果栈为空，`read` 和 `pop` 方法将返回
    `null`。）
- en: Our code may look a little confusing at first because our `pop` method calls
    `this.data.pop()` and our `push` method calls `this.data.push()`. However, this
    is because JavaScript happens to implement methods with these very names on arrays,
    which is what `this.data` is.
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们的代码一开始可能看起来有些混乱，因为我们的 `pop` 方法调用 `this.data.pop()`，而我们的 `push` 方法调用 `this.data.push()`。然而，这正是因为
    JavaScript 恰好在数组上实现了这些名称的方法，而 `this.data` 就是一个数组。
- en: However, by building the `Stack` class around the array, we’ve built an interface
    that forces the user to interact with the array in limited ways. While one can
    normally read from any index of an array, when using the array through the stack
    interface, one can only read the last item. The same goes for inserting and deleting
    data.
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，通过围绕数组构建 `Stack` 类，我们建立了一个接口，迫使用户以有限的方式与数组交互。虽然通常可以从数组的任何索引读取数据，但通过栈接口使用数组时，只能读取最后一个项目。插入和删除数据也是如此。
- en: The stack data structure, then, isn’t the same kind of data structure that an
    array is. The array is built into most programming languages and interacts directly
    with the computer’s memory. The stack, on the other hand, is a set of rules and
    processes around how we should interact with an array so that we can achieve a
    particular result.
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因此，栈数据结构与数组的类型不同。数组是大多数编程语言内置的，直接与计算机内存交互。而栈则是一组关于我们如何与数组交互的规则和过程，以实现特定结果。
- en: In fact, a stack doesn’t even care about what data structure is under the hood.
    All it cares about is that there’s a list of data elements that act in a LIFO
    way. Whether we accomplish this with an array or some other type of built-in data
    structure doesn’t matter. Because of this, the stack is an example of what is
    known as an abstract data type—it’s a kind of data structure that is a set of
    theoretical rules that revolve around some other built-in data structure.
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 实际上，栈并不关心底层是什么数据结构。它只关心有一组数据元素以后进先出（LIFO）的方式进行操作。我们是否使用数组或其他类型的内置数据结构来实现这一点并不重要。因此，栈是一个被称为抽象数据类型的例子——它是一种围绕某种其他内置数据结构的理论规则集。
- en: 'The set we encountered in Chapter 1, `[*Why Data Structures Matter*](f_0013.xhtml#chp.understanding_data_structures)`,
    is another example of an abstract data type. Some implementations of sets use
    arrays under the hood, while other implementations use hash tables. The set itself,
    though, is simply a theoretical concept: it’s a list of non-duplicated data elements.'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们在第一章遇到的集合`[*为什么数据结构重要*](f_0013.xhtml#chp.understanding_data_structures)`是另一个抽象数据类型的例子。一些集合的实现使用底层数组，而其他实现则使用哈希表。然而，集合本身只是一个理论概念：它是一个不重复的数据元素列表。
- en: Many of the data structures we’ll encounter in the remainder of this book are
    abstract data types—they’re pieces of code that are written on top of other built-in
    data structures.
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在本书剩下的部分，我们将遇到的许多数据结构都是抽象数据类型——它们是建立在其他内置数据结构之上的代码片段。
- en: It should be noted that even a built-in data structure can be an abstract data
    type. Even if a programming language does implement its own `Stack` class, it
    doesn’t change the fact that the stack data structure is still a concept that
    allows for various data structures to be used under the hood.
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 需要注意的是，即使是内置的数据结构也可以是抽象数据类型。即使一种编程语言确实实现了自己的`Stack`类，这并不改变栈数据结构仍然是一个允许在底层使用各种数据结构的概念这一事实。
