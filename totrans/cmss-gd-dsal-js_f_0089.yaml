- en: Abstract Data Types
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: Most programming languages don’t come with the stack as a built-in data type
    or class. Instead, it’s up to you to implement it yourself. This is a stark contrast
    with arrays, which are available in most languages.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'To create a stack, then, you generally have to use one of the built-in data
    structures to hold the data. Here’s one way to implement a stack using JavaScript,
    which uses an array under the hood:'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `class` `Stack` { |'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `constructor`() { |'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `this.data = [];` |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `push(element)` { |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `this.data.push(element);` |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `pop()` { |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (`this.data.length > 0) { |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` `this.data.pop(); |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } `else` { |'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` `null`; |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `read()` { |'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (`this.data.length > 0) { |'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` `this.data[this.data.length - 1]; |'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } `else` { |'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` `null`; |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `export` `default` `Stack`; |'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_TB
- en: As you can see, our stack implementation stores the data in an array called
    `this.data`.
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Whenever a stack is initiated, we automatically build an empty array with `this.data
    = [];`. Our stack also contains methods that `push` a new element onto the end
    of `this.data`, `pop` an element from the beginning of `this.data`, and read the
    first element from the `this.data` array. (The `read` and `pop` methods return
    `null` if the stack is empty.)
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Our code may look a little confusing at first because our `pop` method calls
    `this.data.pop()` and our `push` method calls `this.data.push()`. However, this
    is because JavaScript happens to implement methods with these very names on arrays,
    which is what `this.data` is.
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: However, by building the `Stack` class around the array, we’ve built an interface
    that forces the user to interact with the array in limited ways. While one can
    normally read from any index of an array, when using the array through the stack
    interface, one can only read the last item. The same goes for inserting and deleting
    data.
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The stack data structure, then, isn’t the same kind of data structure that an
    array is. The array is built into most programming languages and interacts directly
    with the computer’s memory. The stack, on the other hand, is a set of rules and
    processes around how we should interact with an array so that we can achieve a
    particular result.
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In fact, a stack doesn’t even care about what data structure is under the hood.
    All it cares about is that there’s a list of data elements that act in a LIFO
    way. Whether we accomplish this with an array or some other type of built-in data
    structure doesn’t matter. Because of this, the stack is an example of what is
    known as an abstract data type—it’s a kind of data structure that is a set of
    theoretical rules that revolve around some other built-in data structure.
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The set we encountered in Chapter 1, `[*Why Data Structures Matter*](f_0013.xhtml#chp.understanding_data_structures)`,
    is another example of an abstract data type. Some implementations of sets use
    arrays under the hood, while other implementations use hash tables. The set itself,
    though, is simply a theoretical concept: it’s a list of non-duplicated data elements.'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Many of the data structures we’ll encounter in the remainder of this book are
    abstract data types—they’re pieces of code that are written on top of other built-in
    data structures.
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: It should be noted that even a built-in data structure can be an abstract data
    type. Even if a programming language does implement its own `Stack` class, it
    doesn’t change the fact that the stack data structure is still a concept that
    allows for various data structures to be used under the hood.
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
