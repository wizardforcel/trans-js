- en: '| Recipe 38 | Creating Lazy Quantifiers with the Question Mark |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: '| 食谱 38 | 使用问号创建懒量词 |'
- en: Task
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务
- en: 'Suppose your task is to write a script that reduces the size of HTML files
    by removing all comments. The syntax for an HTML comment is <!-- Comment -->.
    So, to accomplish this task, you might assume that you just need to remove the
    opening and closing brackets of the comment syntax and any characters that exist
    between them:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的任务是编写一个脚本，通过移除所有注释来减小 HTML 文件的大小。HTML 注释的语法是 `<!-- 注释内容 -->`。所以，为了完成这个任务，你可能会认为只需要移除注释语法中的开头和结尾的标记，以及它们之间的字符：
- en: '[part_2/lazy_quantifiers/lazy_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/lazy_quantifiers/lazy_ex1.js)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/lazy_quantifiers/lazy_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/lazy_quantifiers/lazy_ex1.js)'
- en: '|   | **const** re = */<!--.*-->/*; |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** re = */<!--.*-->/*; |'
- en: '|   | **const** str = *"HTML comment: <!-- I''m a comment -->"*; |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** str = *"HTML 注释: <!-- 我是注释 -->"*; |'
- en: '|   |  |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | str.replace(re, *""*); *// → "HTML comment: "* |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '|   | str.replace(re, *""*); *// → "HTML 注释: "* |'
- en: Here, the full stop (.) matches any character (except for a line break), and
    the quantifier * tells the engine to do this zero or more times. This pattern
    works for a single-line comment. What about comments that span multiple lines?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，句点（.）匹配任何字符（除了换行符），量词 * 告诉引擎此操作可以执行零次或多次。这个模式适用于单行注释。那么跨越多行的注释该如何处理呢？
- en: 'Since the full stop (.) doesn’t match line break characters, the regex will
    fail. A common workaround is to use a character class, like [\d\D], in place of
    a full stop. \d matches any digit character, and \D matches everything else. Combined,
    they let you match any character:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 由于句点（.）无法匹配换行符，正则表达式会失败。一个常见的解决方法是使用字符类，例如 [\d\D]，代替句点。`\d` 匹配任何数字字符，`\D` 匹配其他所有字符。将它们结合在一起，可以匹配任何字符：
- en: '[part_2/lazy_quantifiers/lazy_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/lazy_quantifiers/lazy_ex2.js)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/lazy_quantifiers/lazy_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/lazy_quantifiers/lazy_ex2.js)'
- en: '|   | **const** re = */<!--**[\d\D]***-->/*; |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** re = */<!--**[\d\D]***-->/*; |'
- en: '|   | **const** str = *`HTML comment: <!--* |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** str = *`HTML 注释: <!--* |'
- en: '|   | *I''m a comment* |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '|   | *我是注释* |'
- en: '|   | *-->`*; |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '|   | *-->`*; |'
- en: '|   |  |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | str.replace(re, *""*); *// → "HTML comment: "* |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '|   | str.replace(re, *""*); *// → "HTML 注释: "* |'
- en: 'But your code should be able to remove all comments, not just one. So, add
    a g flag at the end of the regex:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 但是你的代码应该能够删除所有注释，而不仅仅是一个。所以，在正则表达式的末尾添加一个 g 标志：
- en: '[part_2/lazy_quantifiers/lazy_ex3.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/lazy_quantifiers/lazy_ex3.js)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/lazy_quantifiers/lazy_ex3.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/lazy_quantifiers/lazy_ex3.js)'
- en: '|   | **const** re = */<!--**[\d\D]***-->/g*; |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** re = */<!--**[\d\D]***-->/g*; |'
- en: '|   | **const** str = *`HTML comment: <!-- I''m a comment -->* |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** str = *`HTML 注释: <!-- 我是注释 -->* |'
- en: '|   | *Another comment: <!--* |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '|   | *另一个注释: <!--* |'
- en: '|   | *I''m a comment* |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '|   | *我是注释* |'
- en: '|   | *-->`*; |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '|   | *-->`*; |'
- en: '|   |  |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | str.replace(re, *""*); *// → "HTML comment: "* |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '|   | str.replace(re, *""*); *// → "HTML 注释: "* |'
- en: The g flag tells the regular expression engine to search the entire string for
    all matches of the pattern, instead of stopping at the first match.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: g 标志告诉正则表达式引擎在整个字符串中查找所有匹配项，而不是在找到第一个匹配项后停止。
- en: Now you have another problem! The pattern matches the opening bracket of the
    first comment and everything that comes after it till the closing bracket of the
    last comment. The reason is that quantifiers—in this case *—are greedy! They try
    to match as many occurrences of the preceding token as possible, which isn’t what
    you want to get this task done.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了另一个问题！这个模式匹配的是第一个注释的开括号以及其后所有内容，直到最后一个注释的闭括号。原因是量词——在这种情况下是*贪婪的*！它们尽可能多地匹配前面的标记，这正是你在完成这个任务时不想要的行为。
- en: You need a way to change how a quantifier behaves.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要找到一种方法来改变量词的行为。
- en: Solution
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Make the * quantifier lazy by placing a question mark after it:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在量词后面加上问号，使*量词变得惰性*：
- en: '[part_2/lazy_quantifiers/lazy_ex4.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/lazy_quantifiers/lazy_ex4.js)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/lazy_quantifiers/lazy_ex4.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/lazy_quantifiers/lazy_ex4.js)'
- en: '|   | **const** re = */<!--**[\d\D]*****?**-->/g*; |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** re = */<!--**[\d\D]*****?**-->/g*; |'
- en: '|   | **const** str = *`HTML comment: <!-- I''m a comment -->* |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** str = *`HTML 注释: <!-- 我是一个注释 -->* |'
- en: '|   | *Another comment: <!--* |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '|   | *另一个注释: <!--* |'
- en: '|   | *I''m a comment* |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '|   | *我是一个注释* |'
- en: '|   | *-->`*; |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '|   | *-->`*; |'
- en: '|   |  |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | str.replace(re, *""*); |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '|   | str.replace(re, *""*); |'
- en: '|   | *// → "HTML comment:* |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '|   | *// → "HTML 注释: "* |'
- en: '|   | *// Another comment: "* |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '|   | *// 另一个注释: "* |'
- en: Your regex is now able to match each comment precisely.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的正则表达式已经能够准确匹配每个注释。
- en: Discussion
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论
- en: As you learned in Recipe 29, [*Repeating Part of a Regex with Quantifiers*](f_0040.xhtml#rcp.quantifiers),
    the + quantifier allows you to match the preceding token one or more times. So,
    the pattern \w+ matches one or more word characters in a string.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在第29个食谱中学到的，[*使用量词重复正则表达式的一部分*](f_0040.xhtml#rcp.quantifiers)，+ 量词允许你匹配前面的标记一次或多次。因此，模式
    \w+ 匹配一个或多个单词字符。
- en: 'But in a string like “str,” should \w+ match “s” or “str”? How does the regex
    engine decide between matching “one” or “more” characters? Quantifiers are greedy
    by default, matching the previous token as many times as possible. A question
    mark forces the quantifier to take the opposite approach (non-greedy) and match
    as few times as possible. Compare:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在像“str”这样的字符串中，\w+ 应该匹配“s”还是“str”？正则引擎如何决定匹配“一个”字符还是“多个”字符？量词默认是贪婪的，会尽可能多地匹配前面的标记。问号强制量词采取相反的方式（惰性匹配），尽可能少地匹配。对比一下：
- en: '[part_2/lazy_quantifiers/lazy_ex5.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/lazy_quantifiers/lazy_ex5.js)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/lazy_quantifiers/lazy_ex5.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/lazy_quantifiers/lazy_ex5.js)'
- en: '|   | **const** str = *"str"*; |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** str = *"str"*; |'
- en: '|   |  |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | str.match(*/**\w**+**?**/*)[0]; *// → "s"* |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '|   | str.match(*/**\w**+**?**/*)[0]; *// → "s"* |'
- en: '|   | str.match(*/**\w**+/*)[0]; *// → "str"* |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '|   | str.match(*/**\w**+/*)[0]; *// → "str"* |'
- en: The pattern [\d\D]*? in this recipe matches zero or more occurrences of any
    character (including digits and non-digits) while trying to match as few characters
    as possible. The result is matching the first occurrence of --> rather than the
    last.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模式 [\d\D]*? 在这个例子中匹配零次或多次任何字符（包括数字和非数字字符），并尽量匹配最少的字符。结果是匹配到第一个 --> 而不是最后一个。
- en: '| Nicknames for Laziness |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 懒惰的别名 |'
- en: '| --- |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| ![images/aside-icons/tip.png](images/aside-icons/tip.png) | A lazy quantifier
    is also known as non-greedy or reluctant. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| ![images/aside-icons/tip.png](images/aside-icons/tip.png) | 懒惰量词也称为非贪婪量词或不情愿量词。
    |'
- en: '| Possessive Quantifiers |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 所有权量词 |'
- en: '| --- |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| ![images/aside-icons/info.png](images/aside-icons/info.png) | JavaScript
    doesn’t support possessive quantifiers. A possessive quantifier is similar to
    a greedy one but offers better performance in certain situations. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| ![images/aside-icons/info.png](images/aside-icons/info.png) | JavaScript
    不支持所有权量词。所有权量词类似于贪婪量词，但在某些情况下提供更好的性能。 |'
- en: Keep in mind that using a question mark immediately after a quantifier, including
    *, +, ?, or {}, makes the quantifier lazy.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在量词后面立即使用问号（包括 *、+、? 或 {}）会使该量词变为懒惰量词。
