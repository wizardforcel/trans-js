- en: '| Recipe 38 | Creating Lazy Quantifiers with the Question Mark |'
  prefs: []
  type: TYPE_TB
- en: Task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Suppose your task is to write a script that reduces the size of HTML files
    by removing all comments. The syntax for an HTML comment is <!-- Comment -->.
    So, to accomplish this task, you might assume that you just need to remove the
    opening and closing brackets of the comment syntax and any characters that exist
    between them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/lazy_quantifiers/lazy_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/lazy_quantifiers/lazy_ex1.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** re = */<!--.*-->/*; |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** str = *"HTML comment: <!-- I''m a comment -->"*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | str.replace(re, *""*); *// → "HTML comment: "* |'
  prefs: []
  type: TYPE_TB
- en: Here, the full stop (.) matches any character (except for a line break), and
    the quantifier * tells the engine to do this zero or more times. This pattern
    works for a single-line comment. What about comments that span multiple lines?
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the full stop (.) doesn’t match line break characters, the regex will
    fail. A common workaround is to use a character class, like [\d\D], in place of
    a full stop. \d matches any digit character, and \D matches everything else. Combined,
    they let you match any character:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/lazy_quantifiers/lazy_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/lazy_quantifiers/lazy_ex2.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** re = */<!--**[\d\D]***-->/*; |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** str = *`HTML comment: <!--* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *I''m a comment* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *-->`*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | str.replace(re, *""*); *// → "HTML comment: "* |'
  prefs: []
  type: TYPE_TB
- en: 'But your code should be able to remove all comments, not just one. So, add
    a g flag at the end of the regex:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/lazy_quantifiers/lazy_ex3.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/lazy_quantifiers/lazy_ex3.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** re = */<!--**[\d\D]***-->/g*; |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** str = *`HTML comment: <!-- I''m a comment -->* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *Another comment: <!--* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *I''m a comment* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *-->`*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | str.replace(re, *""*); *// → "HTML comment: "* |'
  prefs: []
  type: TYPE_TB
- en: The g flag tells the regular expression engine to search the entire string for
    all matches of the pattern, instead of stopping at the first match.
  prefs: []
  type: TYPE_NORMAL
- en: Now you have another problem! The pattern matches the opening bracket of the
    first comment and everything that comes after it till the closing bracket of the
    last comment. The reason is that quantifiers—in this case *—are greedy! They try
    to match as many occurrences of the preceding token as possible, which isn’t what
    you want to get this task done.
  prefs: []
  type: TYPE_NORMAL
- en: You need a way to change how a quantifier behaves.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Make the * quantifier lazy by placing a question mark after it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/lazy_quantifiers/lazy_ex4.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/lazy_quantifiers/lazy_ex4.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** re = */<!--**[\d\D]*****?**-->/g*; |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** str = *`HTML comment: <!-- I''m a comment -->* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *Another comment: <!--* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *I''m a comment* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *-->`*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | str.replace(re, *""*); |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// → "HTML comment:* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// Another comment: "* |'
  prefs: []
  type: TYPE_TB
- en: Your regex is now able to match each comment precisely.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you learned in Recipe 29, [*Repeating Part of a Regex with Quantifiers*](f_0040.xhtml#rcp.quantifiers),
    the + quantifier allows you to match the preceding token one or more times. So,
    the pattern \w+ matches one or more word characters in a string.
  prefs: []
  type: TYPE_NORMAL
- en: 'But in a string like “str,” should \w+ match “s” or “str”? How does the regex
    engine decide between matching “one” or “more” characters? Quantifiers are greedy
    by default, matching the previous token as many times as possible. A question
    mark forces the quantifier to take the opposite approach (non-greedy) and match
    as few times as possible. Compare:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/lazy_quantifiers/lazy_ex5.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/lazy_quantifiers/lazy_ex5.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** str = *"str"*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | str.match(*/**\w**+**?**/*)[0]; *// → "s"* |'
  prefs: []
  type: TYPE_TB
- en: '|   | str.match(*/**\w**+/*)[0]; *// → "str"* |'
  prefs: []
  type: TYPE_TB
- en: The pattern [\d\D]*? in this recipe matches zero or more occurrences of any
    character (including digits and non-digits) while trying to match as few characters
    as possible. The result is matching the first occurrence of --> rather than the
    last.
  prefs: []
  type: TYPE_NORMAL
- en: '| Nicknames for Laziness |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| ![images/aside-icons/tip.png](images/aside-icons/tip.png) | A lazy quantifier
    is also known as non-greedy or reluctant. |'
  prefs: []
  type: TYPE_TB
- en: '| Possessive Quantifiers |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| ![images/aside-icons/info.png](images/aside-icons/info.png) | JavaScript
    doesn’t support possessive quantifiers. A possessive quantifier is similar to
    a greedy one but offers better performance in certain situations. |'
  prefs: []
  type: TYPE_TB
- en: Keep in mind that using a question mark immediately after a quantifier, including
    *, +, ?, or {}, makes the quantifier lazy.
  prefs: []
  type: TYPE_NORMAL
