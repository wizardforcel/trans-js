- en: © The Author(s), under exclusive license to Springer Fachmedien Wiesbaden GmbH,
    part of Springer Nature 2024J. L. ZuckarelliLearn coding with Python and JavaScript
    [https://doi.org/10.1007/978-3-658-42912-6_6](https://doi.org/10.1007/978-3-658-42912-6_6)
  prefs: []
  type: TYPE_NORMAL
- en: 6. Some Tips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Joachim L. Zuckarelli^([1](#Aff2)  )(1)München, GermanyOverview
  prefs: []
  type: TYPE_NORMAL
- en: Before we get into the basic concepts of programming in the next part of the
    book, you’ll find some encouraging tips for getting started in the fascinating
    world of programming in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 6.1 Learn the Basics First!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Start small when learning a new language. With very few basic elements you can
    usually already develop executable programs. You don’t have to know every detail.
    You will never know the language “completely” anyway, there are always more features,
    more libraries. That you don’t know yet. The important thing is to gain a basic
    understanding of the language, and this is usually much easier than it first appears.
    Therefore, focus your efforts on the central concepts of the language first. The
    basic questions we cover in Part II of this book will help with this. Don’t try
    to read tons of literature to theoretically understand every aspect of the language
    before you venture into your first program. Quite the opposite! Start writing
    your own small programs as early as possible. Your knowledge will expand naturally
    over time.
  prefs: []
  type: TYPE_NORMAL
- en: 6.2 Play!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dare to try things out. Unlike in driving school, nothing can break in programming
    if you play around a bit. When you try things out, you quickly learn what works
    and what doesn’t. As we all know, we learn especially well from mistakes. By trying
    things out, you learn things that are not described in any book.
  prefs: []
  type: TYPE_NORMAL
- en: 6.3 Don’t Lose Heart!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Don’t be discouraged if your program doesn’t do what it’s supposed to do at
    the beginning, or if you keep getting an error message and haven’t the slightest
    idea what the problem might be. Of course, we try to avoid that sort of thing
    with the approach we take in this book. But the truth is, the best programmers
    make mistakes all the time. Ever wonder why the apps on your phone update so often?
    Many of those updates are just bug fixes. Making, finding, and ironing out bugs
    is part of the craft of programming, and by no means the least important. This
    is sometimes tedious and nerve-wracking, but no reason to throw in the towel.
    By the way, a little break sometimes works wonders.
  prefs: []
  type: TYPE_NORMAL
- en: 6.4 Start Small, and Let Your Program Grow Incrementally!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When writing a program, think about what the actual task is that the program
    should accomplish, and what features your program really needs to accomplish it.
    Develop these first. Once the basic functionality is in place, you can add more
    complexity, step by step, to increase usability or to make the program more robust
    against user input errors.
  prefs: []
  type: TYPE_NORMAL
- en: 6.5 Let Beauty Be Beauty!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is important that your program works, that it does what it is supposed to
    do, and that it is robust, that it is not easily upset if, for example, the user
    makes an entry error. Far less important is that the program is a model of elegance
    and efficiency. You sometimes hear programmers talk about a piece of code being
    “elegant” or “beautiful.” Such epicurean statements are expressions of the commonly
    held view that programming is both a science and a (craft) art. Don’t go overboard
    with the art, though. A professional with years of experience may find your programs
    a bit clumsy and see some room for optimization. That’s not a bad thing, though.
    It’s better to try something new than to fiddle around with an already functional
    program to make it even more elegant. That way you learn a lot more!
  prefs: []
  type: TYPE_NORMAL
- en: 6.6 Document!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Right at the beginning of your programmer life, get into the habit of documenting
    your program code, especially by annotating it with comments that explain how
    the code works. This is important so that you can understand your program later.
    Commenting is probably the most hated but at the same time one of the most valuable
    activities in programming. We will look at commenting in more detail in ► Chap.
    [10](474412_1_En_10_Chapter.xhtml).
  prefs: []
  type: TYPE_NORMAL
