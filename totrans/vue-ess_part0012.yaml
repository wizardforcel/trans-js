- en: 'Module 7:'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 第7模块：
- en: '|'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Vue.js and APIs
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js与API
- en: '|'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'In the ever-evolving landscape of web development, the integration of external
    data sources through APIs (Application Programming Interfaces) has become a fundamental
    aspect. The module "Vue.js and APIs" emerges as a central component within the
    book "Vue.js Essentials: For Responsive Web Development," guiding readers through
    the seamless integration of APIs with Vue.js. Within these pages, developers will
    gain essential insights into leveraging Vue.js to fetch, display, and manage data
    dynamically, fostering a responsive and data-driven user experience.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在不断发展的Web开发领域，通过API（应用程序接口）集成外部数据源已成为一项基础性工作。模块“Vue.js与API”作为《Vue.js精要：响应式Web开发》一书中的核心部分，引导读者顺利实现API与Vue.js的集成。在这些页面中，开发者将深入了解如何利用Vue.js获取、显示并动态管理数据，促进响应式和数据驱动的用户体验。
- en: Understanding the Intersection of Vue.js and APIs in Modern Web Development
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 理解Vue.js与API在现代Web开发中的交集
- en: Before delving into the specifics of API integration in Vue.js, it's crucial
    to recognize the pivotal role APIs play in modern web development. This module
    begins by elucidating the significance of APIs as bridges connecting applications
    to external data sources. Readers will gain an understanding of how Vue.js, with
    its reactivity and component-based architecture, seamlessly integrates with APIs
    to create dynamic and responsive web applications that thrive on real-time data
    updates.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '在深入探讨Vue.js中的API集成细节之前，必须认识到API在现代Web开发中的关键作用。本模块首先阐明API作为连接应用与外部数据源的桥梁的重要性。读者将了解如何通过Vue.js利用其反应式特性和基于组件的架构，轻松集成API，创建依赖实时数据更新的动态响应式Web应用。 '
- en: 'Vue.js Fetching Data: Leveraging the Power of Asynchronous Operations'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js获取数据：利用异步操作的强大功能
- en: At the core of Vue.js and APIs integration lies the ability to fetch data asynchronously.
    This segment explores the methods and best practices for fetching data in Vue.js
    applications, leveraging the power of asynchronous operations. Readers will gain
    insights into using Vue.js lifecycle hooks to initiate data fetching, managing
    loading states, and updating the user interface dynamically as data is received
    from APIs. This foundational knowledge sets the stage for developers to create
    responsive applications that seamlessly adapt to changing data sources.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js与API集成的核心在于异步获取数据的能力。本部分探讨了在Vue.js应用中获取数据的方法和最佳实践，充分利用异步操作的优势。读者将深入了解如何使用Vue.js生命周期钩子来启动数据获取，管理加载状态，并在接收API数据时动态更新用户界面。这一基础知识为开发者打造响应式应用奠定了基础，使其能够无缝适应变化的数据源。
- en: 'Displaying Dynamic Data: Vue.js Reactivity in Action'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 显示动态数据：Vue.js反应式特性实践
- en: With data fetched from APIs, the next logical step is to dynamically display
    and update it within the user interface. This module delves into the intricacies
    of Vue.js reactivity, showcasing how changes in the underlying data trigger automatic
    updates in the UI. Developers will explore techniques to bind API data to Vue.js
    components, dynamically rendering content, and creating interactive interfaces
    that respond in real-time to changes in external data sources.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用从 API 获取的数据，下一步是动态地在用户界面中显示并更新这些数据。本模块深入探讨 Vue.js 的响应性，展示了底层数据的变化如何触发 UI 的自动更新。开发者将学习如何将
    API 数据绑定到 Vue.js 组件，动态渲染内容，并创建能够实时响应外部数据源变化的交互式界面。
- en: 'Vue.js and RESTful APIs: Navigating CRUD Operations'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 与 RESTful API：探索 CRUD 操作
- en: The integration of Vue.js with RESTful APIs is a key focus within this module.
    Readers will navigate the fundamentals of performing CRUD (Create, Read, Update,
    Delete) operations through Vue.js, gaining practical insights into making API
    requests, handling responses, and managing state changes in response to user interactions.
    From displaying a list of items to implementing form submissions and updating
    data, developers will acquire the skills needed to build robust and interactive
    applications that communicate seamlessly with RESTful APIs.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本模块重点讲解 Vue.js 与 RESTful API 的集成。读者将学习如何通过 Vue.js 执行 CRUD（创建、读取、更新、删除）操作，深入了解如何发起
    API 请求、处理响应并根据用户交互管理状态变化。从显示项目列表到实现表单提交和数据更新，开发者将掌握构建强大且互动的应用程序所需的技能，这些应用程序能够与
    RESTful API 无缝通信。
- en: '"Vue.js and APIs" emerges as a pivotal module within "Vue.js Essentials: For
    Responsive Web Development," providing readers with a comprehensive guide to integrating
    Vue.js with external data sources. By understanding the intersection of Vue.js
    and APIs, developers gain the tools to create responsive, data-driven web applications
    that harness the power of real-time updates and seamlessly adapt to the dynamic
    nature of modern web development.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 《Vue.js 精要：响应式 Web 开发》中的模块“Vue.js 与 API”作为一个关键模块，提供了全面的指南，帮助读者将 Vue.js 与外部数据源进行集成。通过理解
    Vue.js 与 API 的交集，开发者将获得创建响应式、数据驱动的 Web 应用程序所需的工具，利用实时更新的能力，轻松适应现代 Web 开发的动态特性。
- en: Making HTTP Requests with Vue Resource
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Vue Resource 发起 HTTP 请求
- en: 'The module "Vue.js and APIs" within the book "Vue.js Essentials: For Responsive
    Web Development" introduces a pivotal section titled "Making HTTP Requests with
    Vue Resource." This segment explores the integration of Vue Resource, a plugin
    for Vue.js, to efficiently communicate with APIs and fetch external data, unlocking
    the potential for dynamic and data-driven Vue.js applications.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 书籍《Vue.js 精要：响应式 Web 开发》中的模块“Vue.js 与 API”引入了一个关键部分，标题为“使用 Vue Resource 发起 HTTP
    请求”。这一部分探讨了 Vue.js 插件 Vue Resource 的集成，帮助高效地与 API 通信并获取外部数据，为动态且数据驱动的 Vue.js 应用程序打开了新的可能性。
- en: // main.js
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: // main.js
- en: import Vue from 'vue';
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: import Vue from 'vue';
- en: import App from './App.vue';
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: import App from './App.vue';
- en: import VueResource from 'vue-resource';
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: import VueResource from 'vue-resource';
- en: Vue.use(VueResource);
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.use(VueResource);
- en: new Vue({
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: new Vue({
- en: 'render: h => h(App),'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 'render: h => h(App),'
- en: '}).$mount(''#app'');'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '}).$mount(''#app'');'
- en: To incorporate Vue Resource into a Vue.js application, the plugin is imported
    in the main.js file and registered using Vue.use(VueResource). This enables the
    use of Vue Resource's features throughout the application, setting the stage for
    seamless HTTP communication with APIs.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 Vue Resource 集成到 Vue.js 应用程序中，需要在 main.js 文件中导入插件，并使用 Vue.use(VueResource)
    注册它。这样可以在整个应用程序中使用 Vue Resource 的功能，为与 API 的无缝 HTTP 通信奠定基础。
- en: 'Basic GET Requests: Vue.js Fetching Data from an API'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的 GET 请求：Vue.js 从 API 获取数据
- en: Vue Resource simplifies the process of making GET requests to APIs in Vue.js
    applications. Through the use of Vue Resource's $http instance, developers can
    fetch data from an API endpoint effortlessly.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Vue Resource 简化了在 Vue.js 应用程序中发起 GET 请求的过程。通过使用 Vue Resource 的 $http 实例，开发者可以轻松从
    API 端点获取数据。
- en: // DataFetching.vue
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: // DataFetching.vue
- en: <template>
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h2>Data from API:</h2>
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: <h2>来自 API 的数据：</h2>
- en: <ul>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: <ul>
- en: <li v-for="item in apiData" :key="item.id">{{ item.name }}</li>
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: <li v-for="item in apiData" :key="item.id">{{ item.name }}</li>
- en: </ul>
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: </ul>
- en: </div>
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'apiData: []'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 'apiData: []'
- en: '};'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: mounted() {
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: mounted() {
- en: // Making a GET request to the API
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: // 向 API 发起 GET 请求
- en: this.$http.get('https://api.example.com/data')
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: this.$http.get('https://api.example.com/data')
- en: .then(response => {
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: .then(response => {
- en: // Updating the component's data with the fetched data
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: // 使用获取的数据更新组件的状态
- en: this.apiData = response.body;
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: this.apiData = response.body;
- en: '})'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: .catch(error => {
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: .catch(error => {
- en: console.error('Error fetching data:', error);
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: console.error('获取数据时出错：', error);
- en: '});'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In this example, the DataFetching component demonstrates a basic GET request
    using Vue Resource. The mounted lifecycle hook triggers the HTTP request to the
    specified API endpoint. Upon a successful response, the fetched data is assigned
    to the component's apiData property, which is then rendered in the template.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，DataFetching 组件展示了使用 Vue Resource 发起基本的 GET 请求。mounted 生命周期钩子触发对指定 API
    端点的 HTTP 请求。成功响应后，获取的数据会被赋值给组件的 apiData 属性，并在模板中渲染。
- en: 'Handling POST Requests: Vue.js Sending Data to an API'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 处理 POST 请求：Vue.js 向 API 发送数据
- en: Vue Resource also facilitates the sending of data to APIs through POST requests.
    This is especially useful when creating or updating resources on the server.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Vue Resource 还简化了通过 POST 请求向 API 发送数据的过程。这对于创建或更新服务器上的资源特别有用。
- en: // DataSubmission.vue
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: // DataSubmission.vue
- en: <template>
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <form @submit.prevent="submitData">
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: <form @submit.prevent="submitData">
- en: <label for="newItem">New Item:</label>
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: <label for="newItem">新项目：</label>
- en: <input type="text" id="newItem" v-model="newItemName" />
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: <input type="text" id="newItem" v-model="newItemName" />
- en: <button type="submit">Add Item</button>
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <button type="submit">添加项</button>
- en: </form>
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: </form>
- en: </div>
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'newItemName: '''''
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 'newItemName: '''''
- en: '};'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: submitData() {
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: submitData() {
- en: // Making a POST request to add a new item
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: // 发起POST请求以添加新项目
- en: 'this.$http.post(''https://api.example.com/items'', { name: this.newItemName
    })'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 'this.$http.post(''https://api.example.com/items'', { name: this.newItemName
    })'
- en: .then(response => {
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: .then(response => {
- en: // Handling the response after adding the new item
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: // 处理添加新项目后的响应
- en: console.log('Item added successfully:', response.body);
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('项目成功添加：', response.body);
- en: '})'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: .catch(error => {
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: .catch(error => {
- en: console.error('Error adding item:', error);
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: console.error('添加项目时出错：', error);
- en: '});'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In the DataSubmission component, a basic form is created to collect user input
    for a new item. Upon form submission, a POST request is made to the API endpoint,
    including the new item's name in the request payload. The response from the server
    is then logged to the console.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在DataSubmission组件中，创建了一个基本表单，用于收集用户输入的新项目名称。在表单提交后，会向API端点发送POST请求，请求负载中包含新项目的名称。服务器的响应随后会被记录到控制台。
- en: 'Intercepting Requests and Responses: Vue.js Global Configuration with Vue Resource'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截请求和响应：使用Vue Resource进行Vue.js全局配置
- en: Vue Resource allows for global configuration, enabling developers to intercept
    requests and responses globally. This can be beneficial for handling authentication,
    error logging, or other cross-cutting concerns.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Vue Resource允许进行全局配置，使开发人员能够全局拦截请求和响应。这对于处理认证、错误日志记录或其他跨切关注点非常有帮助。
- en: // main.js
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: // main.js
- en: Vue.http.interceptors.push((request, next) => {
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.http.interceptors.push((request, next) => {
- en: // Modify the request or response globally
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: // 全局修改请求或响应
- en: console.log('Request intercepted:', request);
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('请求拦截：', request);
- en: // Continue with the request
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: // 继续处理请求
- en: next(response => {
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: next(response => {
- en: console.log('Response intercepted:', response);
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('响应拦截：', response);
- en: '});'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '});'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: new Vue({
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: new Vue({
- en: 'render: h => h(App),'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 'render: h => h(App),'
- en: '}).$mount(''#app'');'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '}).$mount(''#app'');'
- en: In this snippet from the main.js file, an interceptor is added to the Vue Resource
    instance. This interceptor logs information about each request and response, providing
    developers with insights into the communication between the Vue.js application
    and the API.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个来自main.js文件的代码片段中，向Vue Resource实例添加了一个拦截器。这个拦截器记录每个请求和响应的信息，为开发人员提供了关于Vue.js应用与API之间通信的见解。
- en: '"Making HTTP Requests with Vue Resource" within the "Vue.js and APIs" module
    is a pivotal section that equips developers with the tools to seamlessly integrate
    API communication into their Vue.js applications. Vue Resource''s simplicity and
    flexibility make it an invaluable resource for fetching and submitting data, empowering
    Vue.js applications to interact dynamically with external APIs. The provided examples
    showcase the fundamental concepts of making GET and POST requests, handling data,
    and implementing global configurations for intercepting requests and responses.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '"Making HTTP Requests with Vue Resource"（在 "Vue.js 和 API" 模块中）是一个关键部分，它为开发者提供了将
    API 通信无缝集成到 Vue.js 应用中的工具。Vue Resource 的简洁性和灵活性使其成为获取和提交数据的重要资源，使 Vue.js 应用能够与外部
    API 动态交互。提供的示例展示了发送 GET 和 POST 请求、处理数据以及实现全局配置以拦截请求和响应的基本概念。'
- en: Using Axios for API Calls
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Axios 进行 API 调用
- en: 'The "Vue.js and APIs" module of "Vue.js Essentials: For Responsive Web Development"
    introduces a pivotal section titled "Using Axios for API Calls." This segment
    explores the integration of Axios, a popular and powerful HTTP client, into Vue.js
    applications. Axios provides developers with a robust and versatile solution for
    making API calls, enabling efficient communication with external servers and facilitating
    the seamless exchange of data.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '"Vue.js Essentials: For Responsive Web Development" 模块中的 "Vue.js 和 API" 介绍了一个关键部分，标题为
    "使用 Axios 进行 API 调用"。该部分探讨了将 Axios 这一流行且强大的 HTTP 客户端集成到 Vue.js 应用中的方法。Axios 为开发者提供了一个强大且多功能的解决方案，用于进行
    API 调用，使与外部服务器的通信更加高效，并促进数据的无缝交换。'
- en: Install Axios using npm
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 npm 安装 Axios
- en: npm install axios
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: npm install axios
- en: Before utilizing Axios in a Vue.js project, developers need to install the Axios
    package using npm. The above command ensures that Axios is available for use within
    the project.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Vue.js 项目中使用 Axios 之前，开发者需要通过 npm 安装 Axios 包。上述命令确保在项目中可以使用 Axios。
- en: 'Simple GET Requests: Fetching Data from an API'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的 GET 请求：从 API 获取数据
- en: Axios simplifies the process of making GET requests to APIs in Vue.js applications.
    With its clean and concise syntax, developers can quickly fetch data from an API
    endpoint.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Axios 简化了在 Vue.js 应用中发送 GET 请求到 API 的过程。凭借其简洁明了的语法，开发者可以快速从 API 端点获取数据。
- en: // DataFetching.vue
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: // DataFetching.vue
- en: <template>
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h2>Data from API:</h2>
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: <h2>来自 API 的数据：</h2>
- en: <ul>
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: <ul>
- en: <li v-for="item in apiData" :key="item.id">{{ item.name }}</li>
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: <li v-for="item in apiData" :key="item.id">{{ item.name }}</li>
- en: </ul>
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: </ul>
- en: </div>
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: import axios from 'axios';
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: import axios from 'axios';
- en: export default {
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'apiData: []'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 'apiData: []'
- en: '};'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: mounted() {
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: mounted() {
- en: // Making a GET request to the API using Axios
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: // 使用 Axios 向 API 发送 GET 请求
- en: axios.get('https://api.example.com/data')
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: axios.get('https://api.example.com/data')
- en: .then(response => {
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: .then(response => {
- en: // Updating the component's data with the fetched data
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: // 使用获取到的数据更新组件的数据
- en: this.apiData = response.data;
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: this.apiData = response.data;
- en: '})'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: .catch(error => {
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: .catch(error => {
- en: console.error('Error fetching data:', error);
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: console.error('获取数据时出错:', error);
- en: '});'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In this example, the DataFetching component demonstrates a basic GET request
    using Axios. The mounted lifecycle hook triggers the HTTP request to the specified
    API endpoint. Upon a successful response, the fetched data is assigned to the
    component's apiData property, which is then rendered in the template.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，DataFetching 组件演示了使用 Axios 进行基本的 GET 请求。mounted 生命周期钩子触发对指定 API 端点的 HTTP
    请求。成功响应后，获取的数据被分配给组件的 apiData 属性，然后在模板中渲染。
- en: 'Handling POST Requests: Sending Data to an API'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 处理 POST 请求：向 API 发送数据
- en: Axios facilitates the sending of data to APIs through POST requests. This is
    particularly useful when creating or updating resources on the server.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Axios 通过 POST 请求来促进数据的发送。特别是在创建或更新服务器上的资源时非常有用。
- en: // DataSubmission.vue
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: // DataSubmission.vue
- en: <template>
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <form @submit.prevent="submitData">
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: <form @submit.prevent="submitData">
- en: <label for="newItem">New Item:</label>
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: <label for="newItem">新项目:</label>
- en: <input type="text" id="newItem" v-model="newItemName" />
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: <input type="text" id="newItem" v-model="newItemName" />
- en: <button type="submit">Add Item</button>
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: <button type="submit">添加项目</button>
- en: </form>
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: </form>
- en: </div>
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: import axios from 'axios';
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: import axios from 'axios';
- en: export default {
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'newItemName: '''''
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 'newItemName: '''''
- en: '};'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: submitData() {
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: submitData() {
- en: // Making a POST request to add a new item using Axios
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: // 使用 Axios 发起 POST 请求添加新项目
- en: 'axios.post(''https://api.example.com/items'', { name: this.newItemName })'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 'axios.post(''https://api.example.com/items'', { name: this.newItemName })'
- en: .then(response => {
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: .then(response => {
- en: // Handling the response after adding the new item
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: // 处理添加新项目后的响应
- en: console.log('Item added successfully:', response.data);
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('项目添加成功:', response.data);
- en: '})'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: .catch(error => {
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: .catch(error => {
- en: console.error('Error adding item:', error);
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: console.error('添加项目时出错:', error);
- en: '});'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In the DataSubmission component, a basic form is created to collect user input
    for a new item. Upon form submission, a POST request is made to the API endpoint,
    including the new item's name in the request payload. The response from the server
    is then logged to the console.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DataSubmission 组件中，创建了一个基本表单来收集用户输入的新项目。表单提交时，向 API 端点发起 POST 请求，并将新项目的名称包含在请求负载中。服务器的响应随后会被记录到控制台。
- en: 'Configuring Axios: Fine-Tuning API Requests in Vue.js'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 配置 Axios：在 Vue.js 中微调 API 请求
- en: Axios provides a range of configuration options to fine-tune API requests. Developers
    can customize headers, set timeouts, handle request and response interceptors,
    and much more. This flexibility ensures that Axios can adapt to various API integration
    scenarios in Vue.js applications.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Axios 提供了一系列配置选项来微调 API 请求。开发者可以自定义请求头、设置超时时间、处理请求和响应拦截器等等。这种灵活性确保了 Axios 能够适应
    Vue.js 应用中的各种 API 集成场景。
- en: // main.js
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: // main.js
- en: import Vue from 'vue';
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: import Vue from 'vue';
- en: import App from './App.vue';
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: import App from './App.vue';
- en: import axios from 'axios';
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: import axios from 'axios';
- en: // Global Axios configuration
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: // 全局 Axios 配置
- en: axios.defaults.baseURL = 'https://api.example.com';
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: axios.defaults.baseURL = 'https://api.example.com';
- en: axios.defaults.headers.common['Authorization'] = 'Bearer YOUR_ACCESS_TOKEN';
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: axios.defaults.headers.common['Authorization'] = 'Bearer YOUR_ACCESS_TOKEN';
- en: new Vue({
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: new Vue({
- en: 'render: h => h(App),'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 'render: h => h(App),'
- en: '}).$mount(''#app'');'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '}).$mount(''#app'');'
- en: In the main.js file, Axios is imported globally, and its default configuration
    is set. The baseURL is specified to simplify subsequent requests, and common headers,
    such as authorization tokens, can be configured globally to streamline API communication
    throughout the Vue.js application.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在 main.js 文件中，Axios 被全局引入，并设置了其默认配置。指定了 baseURL 以简化后续请求，并且可以全局配置常见的请求头，如授权令牌，从而简化整个
    Vue.js 应用中的 API 通信。
- en: '"Using Axios for API Calls" within the "Vue.js and APIs" module is a crucial
    section that equips developers with a powerful tool for seamless API integration
    in Vue.js applications. Axios''s simplicity, flexibility, and extensive features
    make it a preferred choice for handling HTTP requests, fetching and submitting
    data, and configuring API interactions. The provided examples showcase the fundamental
    concepts of making GET and POST requests, handling data, and configuring Axios
    for optimal performance in Vue.js applications.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '"在《Vue.js 与 API》模块中的''使用 Axios 进行 API 调用''是一个至关重要的部分，它为开发者提供了一个强大的工具，帮助他们在
    Vue.js 应用中实现无缝的 API 集成。Axios 的简洁性、灵活性以及丰富的功能使其成为处理 HTTP 请求、获取和提交数据以及配置 API 交互的首选工具。所提供的示例展示了
    GET 和 POST 请求的基本概念、数据处理方法以及如何为 Vue.js 应用优化配置 Axios。" '
- en: Handling API Responses
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理 API 响应
- en: 'The "Vue.js and APIs" module of "Vue.js Essentials: For Responsive Web Development"
    explores the critical section titled "Handling API Responses." This segment delves
    into the techniques and best practices for efficiently managing and manipulating
    data received from API calls in Vue.js applications. Properly handling API responses
    is pivotal for creating dynamic, responsive, and data-driven web experiences.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '《Vue.js Essentials: For Responsive Web Development》中的“Vue.js 与 API”模块探讨了一个关键部分——“处理
    API 响应”。这一部分深入讲解了在 Vue.js 应用中如何高效管理和操作从 API 调用中接收到的数据。正确处理 API 响应对于创建动态、响应式和数据驱动的
    Web 体验至关重要。'
- en: // DataHandling.vue
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: // DataHandling.vue
- en: <template>
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h2>Data from API:</h2>
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: <h2>来自 API 的数据：</h2>
- en: <ul>
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: <ul>
- en: <li v-for="item in apiData" :key="item.id">{{ item.name }}</li>
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: <li v-for="item in apiData" :key="item.id">{{ item.name }}</li>
- en: </ul>
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: </ul>
- en: </div>
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: import axios from 'axios';
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: import axios from 'axios';
- en: export default {
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'apiData: []'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 'apiData: []'
- en: '};'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: mounted() {
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: mounted() {
- en: axios.get('https://api.example.com/data')
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: axios.get('https://api.example.com/data')
- en: .then(response => {
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: .then(response => {
- en: // Handling API response data
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: // 处理 API 响应数据
- en: this.apiData = this.handleApiResponse(response.data);
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: this.apiData = this.handleApiResponse(response.data);
- en: '})'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: .catch(error => {
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: .catch(error => {
- en: console.error('Error fetching data:', error);
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: console.error('获取数据时出错:', error);
- en: '});'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '},'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: handleApiResponse(data) {
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: handleApiResponse(data) {
- en: // Custom logic to handle and transform API response data
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: // 自定义逻辑来处理和转换 API 响应数据
- en: return data.map(item => ({
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: return data.map(item => ({
- en: 'id: item.id,'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 'id: item.id,'
- en: 'name: item.name.toUpperCase()'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: item.name.toUpperCase()'
- en: '}));'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '}));'
- en: '}'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In this example, the DataHandling component showcases a basic implementation
    of handling API responses in Vue.js. The handleApiResponse method is introduced
    to provide a space for custom logic to process and transform the received data.
    In this case, the API response data is mapped to a new structure where the item
    names are converted to uppercase.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，DataHandling 组件展示了在 Vue.js 中处理 API 响应的基本实现。引入了 handleApiResponse 方法，为自定义逻辑提供了一个处理和转换接收到的数据的空间。在这个例子中，API
    响应数据被映射到一个新结构，其中项的名称被转换为大写。
- en: 'Error Handling and Status Codes: Ensuring Robustness in Vue.js Applications'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 错误处理与状态码：确保 Vue.js 应用的稳健性
- en: Robust Vue.js applications incorporate thorough error handling to manage unexpected
    scenarios, ensuring a smooth user experience even when API calls encounter issues.
    Utilizing HTTP status codes and handling errors with precision is essential for
    robust and user-friendly Vue.js applications.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 强大的 Vue.js 应用程序会集成全面的错误处理，以应对意外情况，即使在 API 调用遇到问题时，也能确保流畅的用户体验。利用 HTTP 状态码并精准地处理错误，对于构建稳健且用户友好的
    Vue.js 应用至关重要。
- en: // ErrorHandling.vue
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: // ErrorHandling.vue
- en: <template>
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h2>Data from API:</h2>
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: <h2>来自 API 的数据：</h2>
- en: <ul>
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: <ul>
- en: <li v-for="item in apiData" :key="item.id">{{ item.name }}</li>
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: <li v-for="item in apiData" :key="item.id">{{ item.name }}</li>
- en: </ul>
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: </ul>
- en: </div>
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: import axios from 'axios';
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: import axios from 'axios';
- en: export default {
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'apiData: []'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 'apiData: []'
- en: '};'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: mounted() {
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: mounted() {
- en: axios.get('https://api.example.com/data')
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: axios.get('https://api.example.com/data')
- en: .then(response => {
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: .then(response => {
- en: // Handling API response data
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: // 处理 API 响应数据
- en: this.apiData = this.handleApiResponse(response.data);
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: this.apiData = this.handleApiResponse(response.data);
- en: '})'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: .catch(error => {
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: .catch(error => {
- en: // Handling API errors and status codes
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: // 处理 API 错误和状态码
- en: this.handleApiError(error);
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: this.handleApiError(error);
- en: '});'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '},'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: handleApiResponse(data) {
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: handleApiResponse(data) {
- en: // Custom logic to handle and transform API response data
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: // 自定义逻辑来处理和转换 API 响应数据
- en: return data.map(item => ({
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: return data.map(item => ({
- en: 'id: item.id,'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 'id: item.id,'
- en: 'name: item.name.toUpperCase()'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: item.name.toUpperCase()'
- en: '}));'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '}));'
- en: '},'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: handleApiError(error) {
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: handleApiError(error) {
- en: // Custom logic to handle API errors and status codes
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: // 自定义逻辑来处理 API 错误和状态码
- en: if (error.response) {
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有错误响应 {
- en: console.error('API Error:', error.response.status, error.response.data);
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: console.error('API 错误:', error.response.status, error.response.data);
- en: '} else {'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '} else {'
- en: console.error('Network Error:', error.message);
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: console.error('网络错误:', error.message);
- en: '}'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In this example, the ErrorHandling component demonstrates the incorporation
    of error handling. The handleApiError method distinguishes between network errors
    and API errors, providing developers with valuable information to diagnose and
    address issues.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，ErrorHandling 组件演示了如何进行错误处理。handleApiError 方法区分了网络错误和 API 错误，为开发者提供了有价值的信息，帮助诊断和解决问题。
- en: 'Pagination and Infinite Scrolling: Managing Large Data Sets in Vue.js Applications'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 分页和无限滚动：在 Vue.js 应用中管理大数据集
- en: Vue.js applications often deal with large data sets obtained from APIs. Efficiently
    managing and presenting such data is crucial for a smooth user experience. Pagination
    and infinite scrolling are popular techniques to address this challenge.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 应用通常处理从 API 获取的大量数据。高效地管理和展示这些数据对于提供顺畅的用户体验至关重要。分页和无限滚动是常用的解决方案。
- en: // Pagination.vue
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: // Pagination.vue
- en: <template>
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h2>Data from API:</h2>
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: <h2>来自 API 的数据：</h2>
- en: <ul>
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: <ul>
- en: <li v-for="item in paginatedData" :key="item.id">{{ item.name }}</li>
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: <li v-for="item in paginatedData" :key="item.id">{{ item.name }}</li>
- en: </ul>
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: </ul>
- en: <button @click="loadMore">Load More</button>
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="loadMore">加载更多</button>
- en: </div>
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: import axios from 'axios';
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: import axios from 'axios';
- en: export default {
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'allData: [],'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 'allData: [],'
- en: 'currentPage: 1,'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 'currentPage: 1,'
- en: 'itemsPerPage: 5'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 'itemsPerPage: 5'
- en: '};'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'computed: {'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 'computed: {'
- en: paginatedData() {
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: paginatedData() {
- en: const startIndex = (this.currentPage - 1) * this.itemsPerPage;
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: const startIndex = (this.currentPage - 1) * this.itemsPerPage;
- en: const endIndex = startIndex + this.itemsPerPage;
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: const endIndex = startIndex + this.itemsPerPage;
- en: return this.allData.slice(startIndex, endIndex);
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: return this.allData.slice(startIndex, endIndex);
- en: '}'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '},'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: mounted() {
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: mounted() {
- en: this.fetchData();
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: this.fetchData();
- en: '},'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: fetchData() {
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: fetchData() {
- en: axios.get('https://api.example.com/allData')
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: axios.get('https://api.example.com/allData')
- en: .then(response => {
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: .then(response => {
- en: // Storing all data from the API
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: // 存储来自 API 的所有数据
- en: this.allData = response.data;
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: this.allData = response.data;
- en: '})'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: .catch(error => {
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: .catch(error => {
- en: console.error('Error fetching data:', error);
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: console.error('获取数据时出错：', error);
- en: '});'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '},'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: loadMore() {
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: loadMore() {
- en: // Incrementing the current page to load more data
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: // 增加当前页面以加载更多数据
- en: this.currentPage++;
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: this.currentPage++;
- en: '}'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In this example, the Pagination component employs pagination to fetch and display
    data in smaller chunks, enhancing performance and providing a more responsive
    user experience. The loadMore method increments the current page, fetching additional
    data from the API.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，Pagination 组件通过分页获取并显示数据，从而提高性能并提供更流畅的用户体验。loadMore 方法增加当前页面，获取 API 中的更多数据。
- en: '"Handling API Responses" in the "Vue.js and APIs" module is a pivotal section
    that equips developers with strategies to effectively manage and manipulate data
    obtained from API calls in Vue.js applications. The provided examples demonstrate
    techniques for processing and transforming API response data, handling errors
    and status codes, and efficiently managing large data sets through pagination
    and infinite scrolling. By mastering the art of handling API responses, Vue.js
    developers can ensure their applications deliver a seamless and responsive user
    experience, even in the face of dynamic and evolving data sources.'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '"处理 API 响应" 在 "Vue.js 和 API" 模块中是一个关键部分，它为开发者提供了有效管理和操作从 API 调用中获取的数据的策略。提供的示例演示了处理和转换
    API 响应数据、处理错误和状态码，以及通过分页和无限滚动高效管理大数据集的技巧。通过掌握处理 API 响应的技巧，Vue.js 开发者可以确保他们的应用能够在面对动态和变化的数据源时，提供无缝且响应迅速的用户体验。'
- en: Integrating External APIs
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成外部 API
- en: 'The module "Vue.js and APIs" within "Vue.js Essentials: For Responsive Web
    Development" introduces a pivotal section titled "Integrating External APIs."
    This segment explores the seamless integration of external data sources into Vue.js
    applications, unlocking the potential for dynamic, real-time content that enriches
    the user experience.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '模块 "Vue.js 和 API" 在 "Vue.js Essentials: For Responsive Web Development" 中引入了一个重要部分，标题为
    "集成外部 API"。这个部分探讨了如何将外部数据源无缝集成到 Vue.js 应用中，从而为用户体验提供动态、实时的内容。'
- en: // ExternalApiIntegration.vue
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: // ExternalApiIntegration.vue
- en: <template>
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h2>Popular Movies:</h2>
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: <h2>热门电影:</h2>
- en: <ul>
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: <ul>
- en: <li v-for="movie in popularMovies" :key="movie.id">
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: <li v-for="movie in popularMovies" :key="movie.id">
- en: '{{ movie.title }} ({{ movie.release_year }})'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '{{ movie.title }} ({{ movie.release_year }})'
- en: </li>
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: </li>
- en: </ul>
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: </ul>
- en: </div>
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: import axios from 'axios';
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: import axios from 'axios';
- en: export default {
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'popularMovies: []'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 'popularMovies: []'
- en: '};'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: mounted() {
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: mounted() {
- en: this.fetchPopularMovies();
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: this.fetchPopularMovies();
- en: '},'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: fetchPopularMovies() {
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: fetchPopularMovies() {
- en: // Making a GET request to an external movie API
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: // 向外部电影 API 发起 GET 请求
- en: axios.get('https://api.example.com/popular-movies')
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: axios.get('https://api.example.com/popular-movies')
- en: .then(response => {
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: .then(response => {
- en: // Storing popular movies data in the component's state
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: // 将热门电影数据存储在组件的状态中
- en: this.popularMovies = response.data;
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: this.popularMovies = response.data;
- en: '})'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: .catch(error => {
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: .catch(error => {
- en: console.error('Error fetching popular movies:', error);
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: console.error('获取热门电影时出错:', error);
- en: '});'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In this example, the ExternalApiIntegration component demonstrates the integration
    of an external movie API into a Vue.js application. The fetchPopularMovies method
    makes a GET request to the external API, retrieves the popular movies data, and
    updates the component's state with the fetched information. This enables the Vue.js
    application to seamlessly incorporate dynamic content from an external source.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，ExternalApiIntegration 组件展示了如何将外部电影 API 集成到 Vue.js 应用程序中。fetchPopularMovies
    方法向外部 API 发起 GET 请求，获取热门电影数据，并用获取的信息更新组件的状态。这使得 Vue.js 应用程序能够无缝地将来自外部源的动态内容融入其中。
- en: 'Authentication and API Keys: Ensuring Secure Integration in Vue.js Applications'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 认证和 API 密钥：确保 Vue.js 应用程序中的安全集成
- en: When integrating external APIs into Vue.js applications, authentication and
    the use of API keys play a crucial role in securing communication with external
    servers. Developers must adhere to best practices to safeguard sensitive information
    and ensure a secure integration process.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 在将外部 API 集成到 Vue.js 应用程序时，认证和 API 密钥的使用在确保与外部服务器通信的安全性方面起着至关重要的作用。开发人员必须遵循最佳实践，以保护敏感信息并确保安全的集成过程。
- en: // SecureApiIntegration.vue
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: // SecureApiIntegration.vue
- en: <template>
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h2>User's Data:</h2>
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: <h2>用户数据：</h2>
- en: <p>{{ userData.name }} ({{ userData.email }})</p>
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: <p>{{ userData.name }} ({{ userData.email }})</p>
- en: </div>
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: import axios from 'axios';
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: import axios from 'axios';
- en: export default {
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'userData: null'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 'userData: null'
- en: '};'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: mounted() {
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: mounted() {
- en: this.fetchUserData();
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: this.fetchUserData();
- en: '},'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: fetchUserData() {
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: fetchUserData() {
- en: // Making a GET request to an authenticated user API using an API key
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: // 使用 API 密钥向已认证的用户 API 发起 GET 请求
- en: axios.get('https://api.example.com/user-data', {
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: axios.get('https://api.example.com/user-data', {
- en: 'headers: {'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 'headers: {'
- en: '''Authorization'': ''Bearer YOUR_API_KEY'''
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '''Authorization'': ''Bearer YOUR_API_KEY'''
- en: '}'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '})'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: .then(response => {
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: .then(response => {
- en: // Storing user data in the component's state
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: // 将用户数据存储在组件的状态中
- en: this.userData = response.data;
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: this.userData = response.data;
- en: '})'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: .catch(error => {
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: .catch(error => {
- en: console.error('Error fetching user data:', error);
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: console.error('获取用户数据时出错：', error);
- en: '});'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In this example, the SecureApiIntegration component showcases the integration
    of an authenticated user API, requiring an API key for access. The Authorization
    header is used to include the API key in the request, ensuring secure communication
    between the Vue.js application and the external server.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，SecureApiIntegration 组件展示了一个已认证用户 API 的集成，访问该 API 需要 API 密钥。Authorization
    头部用于在请求中包含 API 密钥，确保 Vue.js 应用程序与外部服务器之间的安全通信。
- en: 'Real-time Updates: Leveraging WebSocket APIs in Vue.js Applications'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 实时更新：在 Vue.js 应用程序中利用 WebSocket API
- en: Some external APIs provide real-time data updates through WebSocket connections.
    Vue.js applications can harness the power of WebSocket APIs to receive instant
    updates and keep the user interface in sync with dynamic data changes.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 一些外部 API 通过 WebSocket 连接提供实时数据更新。Vue.js 应用可以利用 WebSocket API 来接收即时更新，并保持用户界面与动态数据变化同步。
- en: // RealTimeUpdates.vue
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: // RealTimeUpdates.vue
- en: <template>
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h2>Real-time Updates:</h2>
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: <h2>实时更新：</h2>
- en: <ul>
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: <ul>
- en: <li v-for="update in realTimeUpdates" :key="update.id">
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: <li v-for="update in realTimeUpdates" :key="update.id">
- en: '{{ update.message }}'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '{{ update.message }}'
- en: </li>
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: </li>
- en: </ul>
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: </ul>
- en: </div>
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'realTimeUpdates: []'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 'realTimeUpdates: []'
- en: '};'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: mounted() {
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: mounted() {
- en: // Establishing a WebSocket connection to receive real-time updates
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: // 建立 WebSocket 连接以接收实时更新
- en: const socket = new WebSocket('wss://api.example.com/real-time-updates');
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: const socket = new WebSocket('wss://api.example.com/real-time-updates');
- en: socket.addEventListener('message', event => {
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: socket.addEventListener('message', event => {
- en: // Handling and updating real-time updates in the component's state
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: // 在组件的状态中处理和更新实时数据
- en: this.realTimeUpdates.push(JSON.parse(event.data));
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: this.realTimeUpdates.push(JSON.parse(event.data));
- en: '});'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In this example, the RealTimeUpdates component illustrates the integration of
    a WebSocket API to receive real-time updates. The component establishes a WebSocket
    connection, listens for incoming messages, and updates its state with the received
    real-time updates. This ensures that the Vue.js application stays synchronized
    with dynamic changes from the external server.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，RealTimeUpdates 组件展示了如何集成 WebSocket API 来接收实时更新。该组件建立了 WebSocket 连接，监听传入的消息，并用接收到的实时更新更新其状态。这确保了
    Vue.js 应用程序始终与外部服务器的动态变化保持同步。
- en: '"Integrating External APIs" within the "Vue.js and APIs" module is a crucial
    section that empowers developers to enhance Vue.js applications by seamlessly
    incorporating external data sources. The examples provided showcase the integration
    of external APIs, secure authentication practices using API keys, and leveraging
    WebSocket APIs for real-time updates. By mastering the art of integrating external
    APIs, Vue.js developers can create dynamic, responsive, and feature-rich applications
    that stay connected to the ever-evolving world of external data..'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '"在“Vue.js 和 APIs”模块中的“集成外部 API”部分是一个关键章节，帮助开发者通过无缝集成外部数据源来增强 Vue.js 应用程序。提供的示例展示了如何集成外部
    API、使用 API 密钥的安全认证方法，并利用 WebSocket API 实现实时更新。通过掌握集成外部 API 的技巧，Vue.js 开发者可以创建动态、响应迅速且功能丰富的应用程序，始终保持与不断变化的外部数据世界相连接。"'
