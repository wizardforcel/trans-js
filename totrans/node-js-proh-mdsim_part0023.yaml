- en: 'Chapter 3: JavaScript Control Flow Statements'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Chapter 2, we learned about JavaScript syntax, operators, and expressions.
    Now, let's explore control flow statements, which allow us to control the flow
    of execution in our code. Control flow statements enable us to make decisions
    and repeat actions based on specific conditions. Understanding control flow is
    essential for creating dynamic and interactive JavaScript programs.
  prefs: []
  type: TYPE_NORMAL
- en: 3.1 Conditional Statements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Conditional statements are used to execute different blocks of code based on
    specific conditions. They allow us to control the flow of execution by making
    decisions. JavaScript provides several conditional statements, including the `if`
    statement, the `if...else` statement, and the `switch` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 3.1.1 The if Statement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `if` statement is the simplest conditional statement. It executes a block
    of code if a given condition is true. Here''s the basic syntax of an `if` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this example, if the `age` variable is greater than or equal to 18, the message
    "You are eligible to vote" will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 3.1.2 The if...else Statement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `if...else` statement allows us to execute one block of code if a condition
    is true and another block of code if the condition is false. Here''s the syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s modify our previous example to include an `if...else` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this case, if the `age` variable is less than 18, the message "You are not
    eligible to vote yet" will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 3.1.3 The switch Statement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `switch` statement is used to perform different actions based on different
    conditions. It evaluates an expression and executes the corresponding case that
    matches the value of the expression. Here''s the syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]javascript'
  prefs: []
  type: TYPE_NORMAL
- en: for (initialization; condition; update) {
  prefs: []
  type: TYPE_NORMAL
- en: // code to be executed in each iteration
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]javascript'
  prefs: []
  type: TYPE_NORMAL
- en: for (var i = 1; i <= 5; i++) {
  prefs: []
  type: TYPE_NORMAL
- en: console.log(i);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]javascript'
  prefs: []
  type: TYPE_NORMAL
- en: while (condition) {
  prefs: []
  type: TYPE_NORMAL
- en: // code to be executed in each iteration
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]javascript'
  prefs: []
  type: TYPE_NORMAL
- en: var i = 1;
  prefs: []
  type: TYPE_NORMAL
- en: while (i <= 5) {
  prefs: []
  type: TYPE_NORMAL
- en: console.log(i);
  prefs: []
  type: TYPE_NORMAL
- en: i++;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]javascript'
  prefs: []
  type: TYPE_NORMAL
- en: do {
  prefs: []
  type: TYPE_NORMAL
- en: // code to be executed in each iteration
  prefs: []
  type: TYPE_NORMAL
- en: '} while (condition);'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]javascript'
  prefs: []
  type: TYPE_NORMAL
- en: var i = 1;
  prefs: []
  type: TYPE_NORMAL
- en: do {
  prefs: []
  type: TYPE_NORMAL
- en: console.log(i);
  prefs: []
  type: TYPE_NORMAL
- en: i++;
  prefs: []
  type: TYPE_NORMAL
- en: '} while (i <= 5);'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the loop will iterate five times, just like the previous examples.
  prefs: []
  type: TYPE_NORMAL
- en: 3.3 Conclusion
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we explored JavaScript control flow statements, including conditional
    statements and looping statements. We learned how to make decisions using `if`
    and `switch` statements and how to repeat code using `for`, `while`, and `do...while`
    loops. Understanding control flow is essential for creating dynamic and interactive
    JavaScript programs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive into JavaScript functions, which allow us
    to organize code into reusable blocks and perform specific tasks. Get ready to
    learn how to write efficient and modular JavaScript code!
  prefs: []
  type: TYPE_NORMAL
