- en: exec()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The exec() method executes a search on a string. If it finds a match, it returns
    an array containing the search result. If not, it returns null. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[appendix/methods/methods_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/appendix/methods/methods_ex1.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** str = *"About 100ft"*; |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** re = */**(\d**+**)**ft/*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | console.log(re.exec(str)); |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// → ["100ft", "100", index: 6, input: "About 100ft", groups: undefined]*
    |'
  prefs: []
  type: TYPE_TB
- en: 'The resulting array contains the matched string as the first item. If there
    are any capturing groups within the match, they are listed from index 1\. The
    array also comes with three properties:'
  prefs: []
  type: TYPE_NORMAL
- en: index provides the index of the match
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: input gets you the original string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: groups lists named capturing groups (if there are any)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you use a global flag, exec() will use the value of lastIndex as the starting
    position to begin searching the string. With each call to exec(), the lastIndex
    property gets changed to reflect the position that follows the last character
    in the match. Let’s look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[appendix/methods/methods_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/appendix/methods/methods_ex2.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** str = *"8, 9, 10, 11"*; |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** re = */**\d\d**/g*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | console.log(re.lastIndex); |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// → 0* |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | console.log(re.exec(str)); |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// → ["10", index: 6, input: "8, 9, 10, 11", groups: undefined]* |'
  prefs: []
  type: TYPE_TB
- en: '|   | console.log(re.lastIndex); |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// → 8* |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | console.log(re.exec(str)); |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// → ["11", index: 10, input: "8, 9, 10, 11", groups: undefined]* |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | console.log(re.lastIndex); |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// → 12* |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | console.log(re.exec(str)); |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// → null* |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | console.log(re.lastIndex); |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// → 0* |'
  prefs: []
  type: TYPE_TB
- en: In this code, we call exec() multiple times to find successive matches in the
    same string. When the method cannot find more matches, it returns null and resets
    the value of lastIndex to 0.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also manually modify the value of lastIndex to change the starting position
    of exec(). For example, let’s say we have a numbered list like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | 1\. 123 |'
  prefs: []
  type: TYPE_TB
- en: '|   | 2\. 4355 |'
  prefs: []
  type: TYPE_TB
- en: '|   | 3\. 764989 |'
  prefs: []
  type: TYPE_TB
- en: 'And we want to write a regex to retrieve the value of each item. With lastIndex,
    we can perform the search only at the position where the data we want is located
    and greatly simplify the regex pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[appendix/methods/methods_ex3.js](http://media.pragprog.com/titles/fkjavascript/code/appendix/methods/methods_ex3.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** str = |'
  prefs: []
  type: TYPE_TB
- en: '|   | *`1\. 123* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *2\. 4355* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *3\. 764989`*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** re = */**\d**+/g*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// Split the string into lines* |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** arr = str.split(*"***\***n"*); |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// Loop over the lines and apply regex* |'
  prefs: []
  type: TYPE_TB
- en: '|   | arr.forEach(line => { |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.lastIndex = 2; |'
  prefs: []
  type: TYPE_TB
- en: '|   | console.log(re.exec(line)[0]); |'
  prefs: []
  type: TYPE_TB
- en: '|   | }); |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// → 123* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// → 4355* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// → 764989* |'
  prefs: []
  type: TYPE_TB
- en: '| Two Separate Families |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| ![images/aside-icons/info.png](images/aside-icons/info.png) | test() and
    exec() are properties of the RegEx object, so you should call them as a method
    of a regular expression. Conversely, match(), matchAll(), replace(), replaceAll(),
    split(), and search() are properties of the String object, and you should call
    them on a string. |'
  prefs: []
  type: TYPE_TB
