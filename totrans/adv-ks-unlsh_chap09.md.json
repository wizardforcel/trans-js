["```js\n1 const arr = [1, 2, 3];\n2 \n3 for (const num of arr) {\n4   console.log(num);\n5 }\n\n```", "```js\n1 { value: 45, done: false }\n2 \n3 // or\n4 \n5 { value: undefined, done: true }\n\n```", "```js\n 1 const arr = [2, 4, 6, 8, 10];\n 2 \n 3 // get the array iterator object\n 4 const arrayIterator = arr[Symbol.iterator]();\n 5 \n 6 // get the first iterator result object\n 7 let result = arrayIterator.next();\n 8 \n 9 // keep getting new iterator result objects\n10 // until the \"done\" property of the iterator\n11 // result object is false\n12 while (!result.done) {\n13   console.log(result.value);\n14   result = arrayIterator.next();\n15 }\n16 \n17 /*\n18 2\n19 4\n20 6\n21 8\n22 10\n23 */\n\n```", "```js\n 1 const myMap = new Map();\n 2 myMap.set(\"a\", 1);\n 3 myMap.set(\"b\", 2);\n 4 myMap.set(\"c\", 3);\n 5 \n 6 // get the array iterator object\n 7 const mapIterator = myMap[Symbol.iterator]();\n 8 \n 9 // get the first iterator result object\n10 let result = mapIterator.next();\n11 \n12 // keep getting new iterator result objects\n13 // until the \"done\" property of the iterator\n14 // result object is false\n15 while (!result.done) {\n16   console.log(result.value);\n17   result = mapIterator.next();\n18 }\n19 \n20 /*\n21 [\"a\", 1]\n22 [\"b\", 2]\n23 [\"c\", 3]\n24 */\n\n```", "```js\n 1 const arr = [2, 4, 6, 8, 10];\n 2 \n 3 // get the array iterator object\n 4 const arrayIterator = arr[Symbol.iterator]();\n 5 \n 6 // this is the prototype object shared by all array iterators\n 7 const arrayIteratorPrototype = Object.getPrototypeOf(arrayIterator);\n 8 \n 9 console.log(Object.getOwnPropertyNames(arrayIteratorPrototype));\n10 // [\"next\"]\n\n```", "```js\n 1 const arr = [2, 4, 6, 8, 10];\n 2 \n 3 // get the array iterator object\n 4 const arrayIterator = arr[Symbol.iterator]();\n 5 \n 6 // this is the prototype object shared by all array iterators\n 7 const arrayIteratorPrototype = Object.getPrototypeOf(arrayIterator);\n 8 \n 9 // this is the Iterator.prototype object shared by all iterator prototypes\n10 const iteratorPrototype = Object.getPrototypeOf(arrayIteratorPrototype);\n\n```", "```js\n 1 const arr = [1, 2, 3];\n 2 \n 3 const arrayIterator = arr[Symbol.iterator]();\n 4 \n 5 // use the array iterator object instead of the array\n 6 for (const num of arrayIterator) {\n 7  console.log(num);\n 8 }\n 9 \n10 /*\n11 1\n12 2\n13 3\n14 */\n\n```", "```js\n1 function Student(name, age, id, courses) {\n2   this.name = name;\n3   this.age = age;\n4   this.id = id;\n5   this.courses = courses;\n6 }\n\n```", "```js\n 1 Student.prototype[Symbol.iterator] = function () {\n 2  // \"this\" refers to the student object on which this method is called\n 3  const currentStudent = this;\n 4  const studentProps = Object.getOwnPropertyNames(currentStudent);\n 5  let propIndex = 0;\n 6 \n 7  const studentIterator = {\n 8    next: () => {\n 9      if (propIndex < studentProps.length) {\n10         const key = studentProps[propIndex];\n11         const value = currentStudent[key];\n12         propIndex++;\n13         const formattedValue = `${key.padStart(7)} => ${value}`;\n14 \n15         return {\n16           value: formattedValue,\n17           done: false\n18         };\n19       }\n20 \n21       return {\n22         value: undefined,\n23         done: true\n24       };\n25     }\n26   };\n27 \n28   return studentIterator;\n29 };\n\n```", "```js\n 1 const jack = new Student(\"Jack\", 20, \"21A\", [\"Maths\", \"Biology\", \"Physics\"]);\n 2 \n 3 for (const val of jack) {\n 4  console.log(val);\n 5 }\n 6 \n 7 /*\n 8   name => Jack\n 9    age => 20\n10      id => 21A\n11 courses => Maths,Biology,Physics\n12 */\n\n```", "```js\n1 const jack = new Student(\"Jack\", 20, \"21A\", [\"Maths\", \"Biology\", \"Physics\"]);\n2 \n3 const studentIterator = jack[Symbol.iterator]();\n4 \n5 for (const val of studentIterator) {\n6   console.log(val);\n7 }\n8 \n9 // ERROR...\n\n```", "```js\n 1 Student.prototype[Symbol.iterator] = function () {\n 2  // code omitted to keep code example short\n 3 \n 4  const studentIterator = {\n 5    next() {\n 6      // code omitted to keep code example short\n 7    },\n 8    [Symbol.iterator]() {\n 9      return this;\n10     }\n11   };\n12 \n13   return studentIterator;\n14 };\n\n```", "```js\n1 Object.defineProperty(Student.prototype, Symbol.iterator, {\n2   value: function () {\n3     // copy the code inside the Symbol.iterator method from above\n4   },\n5   configurable: true,\n6   writable: true\n7 });\n\n```", "```js\n 1 function* odds() {\n 2  for (let i = 1; i <= 10; i += 2) {\n 3    yield i;\n 4  }\n 5 }\n 6 \n 7 for (const num of odds()) {\n 8  console.log(num);\n 9 }\n10 \n11 /*\n12 1\n13 3\n14 5\n15 7\n16 9\n17 */\n\n```", "```js\n 1 function* randomNumberGenerator(max) {\n 2  while (true) {\n 3    yield Math.floor(Math.random() * max);\n 4  }\n 5 }\n 6 \n 7 const randomNumGen = randomNumberGenerator(10);\n 8 \n 9 // log 10 random numbers\n10 for (let i = 0; i < 10; i++) {\n11   console.log(randomNumGen.next().value);\n12 }\n\n```", "```js\n 1 function Student(name, age, id, courses) {\n 2  this.name = name;\n 3  this.age = age;\n 4  this.id = id;\n 5  this.courses = courses;\n 6 }\n 7 \n 8 Student.prototype[Symbol.iterator] = function* () {\n 9  // \"this\" refers to the student object on which this method is called\n10   const currentStudent = this;\n11   const studentProps = Object.getOwnPropertyNames(currentStudent);\n12 \n13   for (let i = 0; i < studentProps.length; i++) {\n14     const key = studentProps[i];\n15     const value = currentStudent[key];\n16     const formattedValue = `${key.padStart(7)} => ${value}`;\n17 \n18     yield formattedValue;\n19   }\n20 };\n21 \n22 const jack = new Student(\"Jack\", 20, \"21A\", [\"Maths\", \"Biology\", \"Physics\"]);\n23 \n24 for (const val of jack) {\n25   console.log(val);\n26 }\n27 \n28 /*\n29    name => Jack\n30     age => 20\n31      id => 21A\n32 courses => Maths,Biology,Physics\n33 */\n\n```", "```js\n1 function* myGenerator() {\n2   const name = yield \"What is your name?\";\n3   yield `Hello ${name}!`;\n4 }\n5 \n6 const gen = myGenerator();\n7 console.log(gen.next().value); // What is your name?\n8 console.log(gen.next(\"John\").value); // Hello John!\n\n```", "```js\n 1 function* generatorRandomNumber(limit) {\n 2  while (true) {\n 3    const randomNumber = Math.floor(Math.random() * limit);\n 4    limit = yield randomNumber;\n 5  }\n 6 }\n 7 \n 8 const randomNumGenerator = generatorRandomNumber(10);\n 9 \n10 console.log(randomNumGenerator.next());\n11 console.log(randomNumGenerator.next(20));\n12 console.log(randomNumGenerator.next(40));\n13 console.log(randomNumGenerator.next(60));\n14 console.log(randomNumGenerator.next(80));\n15 console.log(randomNumGenerator.next(100));\n\n```", "```js\n 1 function* evens() {\n 2  yield 2;\n 3  yield 4;\n 4  yield 6;\n 5 }\n 6 \n 7 function* odds() {\n 8  yield 1;\n 9  yield 3;\n10   yield 5;\n11 }\n12 \n13 function* printNums(isEven) {\n14   if (isEven) {\n15     yield* evens();\n16   } else {\n17     yield* odds();\n18   }\n19 }\n20 \n21 for (const num of printNums(false)) {\n22   console.log(num);\n23 }\n24 \n25 // 1\n26 // 3\n27 // 5\n\n```", "```js\n 1 function fetchUsers(userCount) {\n 2  // keep max user count to 10\n 3  if (userCount > 10) {\n 4    userCount = 10;\n 5  }\n 6 \n 7  const BASE_URL = \"https://jsonplaceholder.typicode.com/users\";\n 8  let userId = 1;\n 9 \n10   const userAsyncIterator = {\n11     async next() {\n12       if (userId > userCount) {\n13         return { value: undefined, done: true };\n14       }\n15 \n16       const response = await fetch(`${BASE_URL}/${userId++}`);\n17 \n18       if (response.ok) {\n19         const userData = await response.json();\n20         return { value: userData, done: false };\n21       } else {\n22         throw new Error(\"failed to fetch users\");\n23       }\n24     },\n25     [Symbol.asyncIterator]() {\n26       return this;\n27     }\n28   };\n29 \n30   return userAsyncIterator;\n31 }\n32 \n33 async function getData() {\n34   const usersAsyncIterator = fetchUsers(3);\n35 \n36   let userIteratorResult = await usersAsyncIterator.next();\n37 \n38   while (!userIteratorResult.done) {\n39     console.log(userIteratorResult.value);\n40     userIteratorResult = await usersAsyncIterator.next();\n41   }\n42 }\n43 \n44 getData();\n\n```", "```js\n 1 async function* fetchUsers(userCount) {\n 2  // keep max user count to 10\n 3  if (userCount > 10) {\n 4    userCount = 10;\n 5  }\n 6 \n 7  const BASE_URL = \"https://jsonplaceholder.typicode.com/users\";\n 8 \n 9  for (let userId = 1; userId <= userCount; userId++) {\n10     const response = await fetch(`${BASE_URL}/${userId}`);\n11 \n12     if (response.ok) {\n13       const userData = await response.json();\n14       yield userData;\n15     } else {\n16       throw new Error(\"failed to fetch users\");\n17     }\n18   }\n19 }\n20 \n21 async function getData() {\n22   const usersAsyncGenerator = fetchUsers(3);\n23 \n24   let userGeneratorResult = await usersAsyncGenerator.next();\n25 \n26   while (!userGeneratorResult.done) {\n27     console.log(userGeneratorResult.value);\n28     userGeneratorResult = await usersAsyncGenerator.next();\n29   }\n30 }\n31 \n32 getData();\n\n```", "```js\n1 async function getData() {\n2   for await (const user of fetchUsers(3)) {\n3     console.log(user);\n4   }\n5 }\n\n```"]