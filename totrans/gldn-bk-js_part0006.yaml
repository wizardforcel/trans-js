- en: '`Chapter 3`'
  id: totrans-0
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: '`JavaScript Fundamentals`'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Imagine we're in a classroom, ready to begin a journey into the heart of `JavaScript`.
    This chapter is crucial, as we will lay the foundations that will support all
    your future knowledge of the language. Let's explore together the basic syntax,
    primitive data types, and operators and expressions that form the foundation of
    `JavaScript`. Grab your cup of coffee or tea and let's start this conversation
    about `JavaScript` fundamentals in a relaxed and practical way.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Basic syntax`'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`JavaScript` syntax is the grammar of the language, the rules that determine
    how we write code. Understanding basic syntax is like learning sentence structure
    in a new language; It''s the first step to communicating effectively.'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Variable declaration`:  In `JavaScript`, we use three keywords to declare
    variables: `var`, `let` and `const`. Each has its own specific scope and use.'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`Commenting the code`:  Comments are essential to make code more readable and
    understandable. In `JavaScript`, we can use two slashes for single-line comments
    or slash and asterisk for multi-line comments.'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`Basic structures`:  `JavaScript` uses curly braces to group statements and
    define blocks of code, such as `functions`, `loops`, and `conditionals`.'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`Primitive data types`'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Primitive data types` are the fundamental building blocks in `JavaScript`.
    They represent the simplest values ​​and are immutable, that is, they cannot be
    changed directly.'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Number`:  Represents numeric values, including integers and decimals.'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`String`:  Character sequences used to represent text. They can be delimited
    by single, double or backticks.'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`Boolean`:  Represents true or false values.'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`Null` and `undefined`:  `Null` is an intentionally empty value, while `undefined`
    indicates that a variable has been declared but not initialized.'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`Symbol`:  A unique, immutable data type, often used as unique identifiers
    for object properties.'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`Operators and expressions`'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Operators` are symbols that indicate how values ​​should be combined or compared.
    `Expressions` are combinations of values ​​and operators that result in a final
    value.'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Arithmetic operators`:  Used to perform basic mathematical operations.'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`Assignment operators`:  Used to assign values ​​to variables.'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`Comparison operators`:  Used to compare values ​​and return a boolean.'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`Logical operators`:  Used to combine Boolean expressions.'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`Ternary operators`:  A concise way to perform a conditional operation.'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`Bitwise operators`:  They operate directly on the bits of the operands.'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`Control structures`:  They are used to direct the flow of code execution.'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Conditionals`:  `if`, `else if`, `else`'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`Switch`:  An alternative to `if-else` when you have multiple conditions to
    check.'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`Loops`:  `for`, `while`, `do-while`'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`Functions`:  `Functions` are blocks of code that can be defined once and reused
    multiple times. They can be declared in several ways in `JavaScript`.'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Declared function`:'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`Anonymous function`:'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`Arrow function`:'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`Functions` are essential to modularize the code and avoid unnecessary repetitions.
    They also allow the encapsulation of logic, making the code more organized and
    easier to maintain.'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In this chapter, we explore the fundamentals of `JavaScript`, from its basic
    syntax to its primitive data types, operators, and expressions. Understanding
    these concepts is essential to advancing your `JavaScript` learning and development
    journey. Each of these elements plays a crucial role in building robust and efficient
    applications. As we continue, we will build on these foundations by exploring
    more advanced and complex topics. Maintain your curiosity and passion for learning,
    and together we will turn every challenge into an opportunity for growth and innovation.
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
