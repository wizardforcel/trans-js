- en: Chapter 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript Fundamentals
  prefs: []
  type: TYPE_NORMAL
- en: Imagine we're in a classroom, ready to begin a journey into the heart of JavaScript.
    This chapter is crucial, as we will lay the foundations that will support all
    your future knowledge of the language. Let's explore together the basic syntax,
    primitive data types, and operators and expressions that form the foundation of
    JavaScript. Grab your cup of coffee or tea and let's start this conversation about
    JavaScript fundamentals in a relaxed and practical way.
  prefs: []
  type: TYPE_NORMAL
- en: Basic syntax
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript syntax is the grammar of the language, the rules that determine how
    we write code. Understanding basic syntax is like learning sentence structure
    in a new language; It's the first step to communicating effectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Variable declaration:  In JavaScript, we use three keywords to declare variables:
    var, let and const. Each has its own specific scope and use.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Commenting the code:  Comments are essential to make code more readable and
    understandable. In JavaScript, we can use two slashes for single-line comments
    or slash and asterisk for multi-line comments.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Basic structures:  JavaScript uses curly braces to group statements and define
    blocks of code, such as functions, loops, and conditionals.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Primitive data types
  prefs: []
  type: TYPE_NORMAL
- en: Primitive data types are the fundamental building blocks in JavaScript. They
    represent the simplest values ​​and are immutable, that is, they cannot be changed
    directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Number:  Represents numeric values, including integers and decimals.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'String:  Character sequences used to represent text. They can be delimited
    by single, double or backticks.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Boolean:  Represents true or false values.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Null and undefined:  Null is an intentionally empty value, while undefined
    indicates that a variable has been declared but not initialized.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Symbol:  A unique, immutable data type, often used as unique identifiers for
    object properties.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Operators and expressions
  prefs: []
  type: TYPE_NORMAL
- en: Operators are symbols that indicate how values ​​should be combined or compared.
    Expressions are combinations of values ​​and operators that result in a final
    value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Arithmetic operators:  Used to perform basic mathematical operations.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Assignment operators:  Used to assign values ​​to variables.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Comparison operators:  Used to compare values ​​and return a boolean.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Logical operators:  Used to combine Boolean expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Ternary operators:  A concise way to perform a conditional operation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Bitwise operators:  They operate directly on the bits of the operands.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Control structures:  They are used to direct the flow of code execution.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Conditionals:  if, else if, else'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Switch:  An alternative to if-else when you have multiple conditions to check.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Loops:  for, while, do-while'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Functions:  Functions are blocks of code that can be defined once and reused
    multiple times. They can be declared in several ways in JavaScript.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Declared function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Anonymous function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Arrow function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Functions are essential to modularize the code and avoid unnecessary repetitions.
    They also allow the encapsulation of logic, making the code more organized and
    easier to maintain.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we explore the fundamentals of JavaScript, from its basic syntax
    to its primitive data types, operators, and expressions. Understanding these concepts
    is essential to advancing your JavaScript learning and development journey. Each
    of these elements plays a crucial role in building robust and efficient applications.
    As we continue, we will build on these foundations by exploring more advanced
    and complex topics. Maintain your curiosity and passion for learning, and together
    we will turn every challenge into an opportunity for growth and innovation.
  prefs: []
  type: TYPE_NORMAL
