["```jsjavascript\n\nconst mongoose = require('mongoose');\n\nconst commentSchema = new mongoose.Schema({\n\npostId: { type: mongoose.Schema.Types.ObjectId, ref: 'Post', required: true },\n\ncontent: { type: String, required: true },\n\nauthor: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n\ncreatedAt: { type: Date, default: Date.now },\n\n});\n\nconst Comment = mongoose.model('Comment', commentSchema);\n\nmodule.exports = Comment;\n\n```", "```jsjavascript\n\nconst express = require('express');\n\nconst router = express.Router();\n\nconst Comment = require('../models/comment');\n\nconst Post = require('../models/post');\n\nconst authenticate = require('../middleware/auth');\n\n// Create comment route (protected)\n\nrouter.post('/create', authenticate, async (req, res) => {\n\ntry {\n\nconst { postId, content } = req.body;\n\nconst post = await Post.findById(postId);\n\nif (!post) {\n\nreturn res.status(404).json({ error: 'Post not found' });\n\n}\n\nconst comment = new Comment({\n\npostId,\n\ncontent,\n\nauthor: req.user,\n\n});\n\nawait comment.save();\n\nres.status(201).json({ message: 'Comment created successfully' });\n\n} catch (error) {\n\nres.status(500).json({ error: 'An error occurred while creating the comment' });\n\n}\n\n});\n\n// Get comments for a post route\n\nrouter.get('/post/:postId', async (req, res) => {\n\ntry {\n\nconst postId = req.params.postId;\n\nconst comments = await Comment.find({ postId }).populate('author', 'username');\n\nres.status(200).json(comments);\n\n} catch (error) {\n\nres.status(500).json({ error: 'An error occurred while fetching the comments' });\n\n}\n\n});\n\nmodule.exports = router;\n\n```", "```jsjavascript\n\nconst mongoose = require('mongoose');\n\nconst postSchema = new\n\nmongoose.Schema({\n\ntitle: { type: String, required: true },\n\ncontent: { type: String, required: true },\n\nlikes: { type: Number, default: 0 },\n\ncomments: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Comment' }],\n\n});\n\nconst Post = mongoose.model('Post', postSchema);\n\nmodule.exports = Post;\n\n```", "```jsjavascript\n\nconst express = require('express');\n\nconst router = express.Router();\n\nconst Post = require('../models/post');\n\nconst Comment = require('../models/comment');\n\nconst authenticate = require('../middleware/auth');\n\n// Get single post route\n\nrouter.get('/:postId', async (req, res) => {\n\ntry {\n\nconst postId = req.params.postId;\n\nconst post = await Post.findById(postId).populate('comments');\n\nif (!post) {\n\nreturn res.status(404).json({ error: 'Post not found' });\n\n}\n\nres.status(200).json(post);\n\n} catch (error) {\n\nres.status(500).json({ error: 'An error occurred while fetching the post' });\n\n}\n\n});\n\n// Update post route (protected)\n\nrouter.put('/:postId', authenticate, async (req, res) => {\n\ntry {\n\nconst postId = req.params.postId;\n\nconst { title, content } = req.body;\n\nconst post = await Post.findByIdAndUpdate(\n\npostId,\n\n{ title, content },\n\n{ new: true }\n\n);\n\nif (!post) {\n\nreturn res.status(404).json({ error: 'Post not found' });\n\n}\n\nres.status(200).json(post);\n\n} catch (error) {\n\nres.status(500).json({ error: 'An error occurred while updating the post' });\n\n}\n\n});\n\nmodule.exports = router;\n\n```"]