- en: 'Chapter 6: JavaScript Objects'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Chapter 5, we explored JavaScript arrays, which allowed us to store and manipulate
    collections of elements. Now, let's dive into JavaScript objects, another fundamental
    concept in the language. Objects enable us to represent complex data structures
    and organize related data into key-value pairs.
  prefs: []
  type: TYPE_NORMAL
- en: 6.1 Introduction to Objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In JavaScript, an object is a composite data type that allows us to store and
    manipulate data in a structured way. Objects are collections of properties, where
    each property consists of a key and a value. The key serves as the identifier
    for accessing the corresponding value. Objects are often used to represent real-world
    entities, such as a person, a car, or a book.
  prefs: []
  type: TYPE_NORMAL
- en: 6.2 Creating Objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are multiple ways to create objects in JavaScript. One common approach
    is using object literals, where we define the properties and their values within
    curly braces `{}`. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we create an object called `person` with three properties:
    `name`, `age`, and `profession`. The property names are specified as keys, followed
    by a colon `:`, and their corresponding values.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way to create objects is by using the `new` keyword and the `Object()`
    constructor. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we create an object called `car` using the `Object()` constructor
    and assign properties to it using dot notation.
  prefs: []
  type: TYPE_NORMAL
- en: 6.3 Accessing Object Properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can access the properties of an object using dot notation or bracket notation.
    Dot notation involves using the object name followed by a dot `.` and the property
    name. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we access the `name` property of the `person` object and the
    `make` property of the `car` object using dot notation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bracket notation involves using square brackets `[]` and specifying the property
    name as a string. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we access the `age` property of the `person` object and the
    `year` property of the `car` object using bracket notation.
  prefs: []
  type: TYPE_NORMAL
- en: 6.4 Modifying Object Properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Objects in JavaScript are mutable, meaning we can modify their properties after
    they are created. We can reassign the value of a property using either dot notation
    or bracket notation. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we modify the `age` property of the `person` object and the
    `year` property of the `car` object.
  prefs: []
  type: TYPE_NORMAL
- en: 6.5 Adding and Removing Object Properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can add new properties to an object by simply assigning a value to a previously
    non-existent property. Similarly, we can remove properties using the `delete`
    keyword. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we add the `gender` property to the `person` object and remove
    the `model` property from the `car` object.
  prefs: []
  type: TYPE_NORMAL
- en: 6.6 Object Methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to properties, objects in JavaScript can also contain methods. Methods
    are functions that are associated with an object and can be invoked using dot
    notation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Methods in JavaScript are functions that are associated with objects and can
    perform actions or calculations using the object''s properties. Let''s look at
    an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we create an object called `calculator` with two methods:
    `add` and `subtract`. These methods can be invoked using dot notation, followed
    by parentheses `()`, passing the required arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: 6.7 Object Iteration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can iterate over the properties of an object using various techniques. One
    common approach is using a `for...in` loop, which allows us to iterate over the
    enumerable properties of an object. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we iterate over the properties of the `person` object and log
    both the property name (`key`) and its corresponding value (`person[key]`).
  prefs: []
  type: TYPE_NORMAL
- en: 6.8 Object Prototypes and Inheritance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript is a prototype-based language, which means objects can inherit properties
    and methods from other objects. This concept is known as inheritance. Objects
    can have a prototype object, which serves as a blueprint for the properties and
    methods it inherits.
  prefs: []
  type: TYPE_NORMAL
- en: In JavaScript, inheritance is achieved through prototype chaining. Objects have
    an internal `[[Prototype]]` property that references their prototype object. If
    a property or method is not found in an object, JavaScript looks for it in the
    object's prototype. This chain continues until the property or method is found
    or until the end of the prototype chain is reached.
  prefs: []
  type: TYPE_NORMAL
- en: 6.9 Conclusion
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we explored JavaScript objects, an essential concept in the
    language. Objects allow us to represent complex data structures, organize related
    data using key-value pairs, and define methods for performing actions on the data.
    We learned about creating objects using object literals and the `Object()` constructor,
    accessing and modifying object properties using dot notation and bracket notation,
    adding and removing properties, defining object methods, and iterating over object
    properties using `for...in` loops.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive into the world of JavaScript events and event
    handling, understanding how to respond to user interactions and create dynamic
    and interactive web applications. Get ready to enhance the interactivity of your
    JavaScript programs!
  prefs: []
  type: TYPE_NORMAL
