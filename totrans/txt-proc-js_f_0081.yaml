- en: '| Recipe 69 | Matching Formatted Numbers with Thousand Separators |'
  prefs: []
  type: TYPE_TB
- en: Task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Suppose you are developing a price comparison app to assist users in comparing
    product or service prices across various online retailers. Since prices often
    include thousand separators, you find yourself in need of a regex pattern that
    can accurately detect numbers with thousand separators.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, if a website lists the product like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | Great deal! $7,499 %20 Price drop |'
  prefs: []
  type: TYPE_TB
- en: Your regex should be able to extract 7,499.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To extract numbers with thousand separators, you can use this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_3/matching_thousand_separators/matching_thousand_separators_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_3/matching_thousand_separators/matching_thousand_separators_ex1.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **function** extractNumbers(str) { |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** re = */**\d{1,3}(?:**,**\d{3})*****(?:\.\d**+**)?**/g*; |'
  prefs: []
  type: TYPE_TB
- en: '|   | **return** str.match(re)[0]; |'
  prefs: []
  type: TYPE_TB
- en: '|   | } |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | extractNumbers(*"Great deal! $7,499 %20 Price drop"*); |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// → "7,499"* |'
  prefs: []
  type: TYPE_TB
- en: The regex pattern in this code matches numbers that use the comma as the thousand
    separator and the dot as the decimal separator. Matching the fraction part is
    optional, but if the fraction is not present, then the decimal point should not
    be included.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Numbers with a large number of digits are often separated into groups using
    a delimiter like a comma or a period—to make them easier to read. Typically, English-speaking
    countries use commas as the delimiter, such as 20,000, while European countries
    use periods or spaces, like 20.000 or 20 000.
  prefs: []
  type: TYPE_NORMAL
- en: The pattern in this recipe starts by matching a sequence of 1 to 3 digits, succeeded
    by a group that matches zero or more occurrences of a comma followed by three
    digits. The combination of these two patterns matches any number with one or more
    groups of three digits separated by commas. To allow the fraction part to be optional,
    we just add a question mark after the group.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s examine the regex pattern step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | /\d{1,3}(?:,\d{3})*(?:\.\d+)?/ |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | ● \d matches a digit |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ {1,3} matches the previous token between 1 and 3 times |'
  prefs: []
  type: TYPE_TB
- en: '|   | ● (?:,\d{3}) non-capturing group |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ , matches the comma character literally |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ \d matches a digit |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ {3} matches the previous token exactly 3 times |'
  prefs: []
  type: TYPE_TB
- en: '|   | ● * matches the previous token zero or more times |'
  prefs: []
  type: TYPE_TB
- en: '|   | ● (?:\.\d+)? non-capturing group |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ \. matches the period character literally |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ \d matches a digit |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ + matches the previous token one or more times |'
  prefs: []
  type: TYPE_TB
- en: '|   | ● ? matches the previous token zero or one time |'
  prefs: []
  type: TYPE_TB
- en: 'Here are some examples of numbers that would match this pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | 100 |'
  prefs: []
  type: TYPE_TB
- en: '|   | 1,000 |'
  prefs: []
  type: TYPE_TB
- en: '|   | 10,000 |'
  prefs: []
  type: TYPE_TB
- en: '|   | 100,000 |'
  prefs: []
  type: TYPE_TB
- en: '|   | 1,000,000 |'
  prefs: []
  type: TYPE_TB
- en: '|   | 1,000,000.00 (decimal point after the thousands separator) |'
  prefs: []
  type: TYPE_TB
- en: 'And here are some examples of numbers that would not correctly match:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | 1.000.000 (decimal point instead of comma) |'
  prefs: []
  type: TYPE_TB
- en: '|   | 1,00 (incorrect grouping of digits) |'
  prefs: []
  type: TYPE_TB
- en: '|   | 10,0 (incorrect grouping of digits) |'
  prefs: []
  type: TYPE_TB
- en: 'To match numbers that use periods instead of commas as thousand separators,
    we need to slightly adjust the pattern. Replace the comma in the second group
    with a period and the period in the third group with a comma:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_3/matching_thousand_separators/matching_thousand_separators_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_3/matching_thousand_separators/matching_thousand_separators_ex2.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **function** extractNumbers(str) { |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** re = */**\d{1,3}(?:\.\d{3})*****(?:**,**\d**+**)?**/g*; |'
  prefs: []
  type: TYPE_TB
- en: '|   | **return** str.match(re)[0]; |'
  prefs: []
  type: TYPE_TB
- en: '|   | } |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | extractNumbers(*"For sale €1.499.000 3 beds 4 baths"*); |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// → "1.499.000"* |'
  prefs: []
  type: TYPE_TB
- en: This function allows us to match the thousand separators used in countries such
    as Germany, Greece, and Italy. If you want to add thousand separators to numbers,
    you can take advantage of the intl.numberformat() constructor discussed in Recipe
    15, [*Adding Thousand Separators to Numbers with Intl.NumberFormat()*](f_0025.xhtml#rcp.adding_thousand_separators).
  prefs: []
  type: TYPE_NORMAL
