- en: '| Recipe 69 | Matching Formatted Numbers with Thousand Separators |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: '| 食谱 69 | 匹配带有千位分隔符的格式化数字 |'
- en: Task
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务
- en: Suppose you are developing a price comparison app to assist users in comparing
    product or service prices across various online retailers. Since prices often
    include thousand separators, you find yourself in need of a regex pattern that
    can accurately detect numbers with thousand separators.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在开发一个价格比较应用程序，帮助用户比较各大在线零售商的产品或服务价格。由于价格通常包含千位分隔符，你可能需要一个能够准确检测带千位分隔符的数字的正则表达式模式。
- en: 'So, if a website lists the product like this:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果一个网站以这样的方式列出产品：
- en: '|   | Great deal! $7,499 %20 Price drop |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '|   | 超值优惠！$7,499 %20 降价 |'
- en: Your regex should be able to extract 7,499.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式应该能够提取出7,499。
- en: Solution
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'To extract numbers with thousand separators, you can use this function:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要提取带有千位分隔符的数字，可以使用此函数：
- en: '[part_3/matching_thousand_separators/matching_thousand_separators_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_3/matching_thousand_separators/matching_thousand_separators_ex1.js)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_3/matching_thousand_separators/matching_thousand_separators_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_3/matching_thousand_separators/matching_thousand_separators_ex1.js)'
- en: '|   | **function** extractNumbers(str) { |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '|   | **function** extractNumbers(str) { |'
- en: '|   | **const** re = */**\d{1,3}(?:**,**\d{3})*****(?:\.\d**+**)?**/g*; |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** re = */**\d{1,3}(?:**,**\d{3})*****(?:\.\d**+**)?**/g*; |'
- en: '|   | **return** str.match(re)[0]; |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '|   | **return** str.match(re)[0]; |'
- en: '|   | } |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '|   | } |'
- en: '|   |  |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | extractNumbers(*"Great deal! $7,499 %20 Price drop"*); |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '|   | extractNumbers(*"超值优惠！$7,499 %20 降价"*); |'
- en: '|   | *// → "7,499"* |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '|   | *// → "7,499"* |'
- en: The regex pattern in this code matches numbers that use the comma as the thousand
    separator and the dot as the decimal separator. Matching the fraction part is
    optional, but if the fraction is not present, then the decimal point should not
    be included.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码中的正则表达式模式匹配使用逗号作为千位分隔符、点号作为小数点分隔符的数字。匹配小数部分是可选的，但如果没有小数部分，则不应包含小数点。
- en: Discussion
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论
- en: Numbers with a large number of digits are often separated into groups using
    a delimiter like a comma or a period—to make them easier to read. Typically, English-speaking
    countries use commas as the delimiter, such as 20,000, while European countries
    use periods or spaces, like 20.000 or 20 000.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 数字中有大量位数时，通常会使用分隔符（如逗号或点）将其分组，以便更容易阅读。通常，英语国家使用逗号作为分隔符，如20,000，而欧洲国家则使用点号或空格，如20.000或20
    000。
- en: The pattern in this recipe starts by matching a sequence of 1 to 3 digits, succeeded
    by a group that matches zero or more occurrences of a comma followed by three
    digits. The combination of these two patterns matches any number with one or more
    groups of three digits separated by commas. To allow the fraction part to be optional,
    we just add a question mark after the group.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模式首先匹配1到3个数字，然后是一个匹配零个或多个由逗号和三位数字组成的组合。两个模式的组合可以匹配任何由逗号分隔的三位数字组成的数字。如果小数部分是可选的，我们只需在该组后面加上一个问号。
- en: 'Let’s examine the regex pattern step by step:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步分析这个正则表达式模式：
- en: '|   | /\d{1,3}(?:,\d{3})*(?:\.\d+)?/ |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '|   | /\d{1,3}(?:,\d{3})*(?:\.\d+)?/ |'
- en: '|   |  |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | ● \d matches a digit |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '|   | ● \d 匹配一个数字 |'
- en: '|   | ○ {1,3} matches the previous token between 1 and 3 times |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ {1,3} 匹配前一个符号 1 到 3 次 |'
- en: '|   | ● (?:,\d{3}) non-capturing group |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '|   | ● (?:,\d{3}) 非捕获分组 |'
- en: '|   | ○ , matches the comma character literally |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ , 匹配逗号字符 |'
- en: '|   | ○ \d matches a digit |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ \d 匹配一个数字 |'
- en: '|   | ○ {3} matches the previous token exactly 3 times |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ {3} 匹配前一个符号恰好 3 次 |'
- en: '|   | ● * matches the previous token zero or more times |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '|   | ● * 匹配前一个符号零次或多次 |'
- en: '|   | ● (?:\.\d+)? non-capturing group |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '|   | ● (?:\.\d+)? 非捕获分组 |'
- en: '|   | ○ \. matches the period character literally |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ \. 匹配句点字符 |'
- en: '|   | ○ \d matches a digit |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ \d 匹配一个数字 |'
- en: '|   | ○ + matches the previous token one or more times |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ + 匹配前一个符号 1 次或多次 |'
- en: '|   | ● ? matches the previous token zero or one time |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '|   | ● ? 匹配前一个符号零次或一次 |'
- en: 'Here are some examples of numbers that would match this pattern:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些符合此模式的数字示例：
- en: '|   | 1 |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '|   | 1 |'
- en: '|   | 100 |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '|   | 100 |'
- en: '|   | 1,000 |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '|   | 1,000 |'
- en: '|   | 10,000 |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '|   | 10,000 |'
- en: '|   | 100,000 |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '|   | 100,000 |'
- en: '|   | 1,000,000 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '|   | 1,000,000 |'
- en: '|   | 1,000,000.00 (decimal point after the thousands separator) |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '|   | 1,000,000.00（千位分隔符后跟小数点） |'
- en: 'And here are some examples of numbers that would not correctly match:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些不会正确匹配的数字示例：
- en: '|   | 1.000.000 (decimal point instead of comma) |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '|   | 1.000.000（句点代替逗号） |'
- en: '|   | 1,00 (incorrect grouping of digits) |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '|   | 1,00（数字分组不正确） |'
- en: '|   | 10,0 (incorrect grouping of digits) |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '|   | 10,0（数字分组不正确） |'
- en: 'To match numbers that use periods instead of commas as thousand separators,
    we need to slightly adjust the pattern. Replace the comma in the second group
    with a period and the period in the third group with a comma:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了匹配使用句点而非逗号作为千位分隔符的数字，我们需要稍微调整模式。将第二个分组中的逗号替换为句点，将第三个分组中的句点替换为逗号：
- en: '[part_3/matching_thousand_separators/matching_thousand_separators_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_3/matching_thousand_separators/matching_thousand_separators_ex2.js)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_3/matching_thousand_separators/matching_thousand_separators_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_3/matching_thousand_separators/matching_thousand_separators_ex2.js)'
- en: '|   | **function** extractNumbers(str) { |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '|   | **function** extractNumbers(str) { |'
- en: '|   | **const** re = */**\d{1,3}(?:\.\d{3})*****(?:**,**\d**+**)?**/g*; |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** re = */**\d{1,3}(?:\.\d{3})*****(?:**,**\d**+**)?**/g*; |'
- en: '|   | **return** str.match(re)[0]; |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '|   | **return** str.match(re)[0]; |'
- en: '|   | } |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '|   | } |'
- en: '|   |  |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | extractNumbers(*"For sale €1.499.000 3 beds 4 baths"*); |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '|   | extractNumbers(*"For sale €1.499.000 3 beds 4 baths"*)； |'
- en: '|   | *// → "1.499.000"* |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '|   | *// → "1.499.000"* |'
- en: This function allows us to match the thousand separators used in countries such
    as Germany, Greece, and Italy. If you want to add thousand separators to numbers,
    you can take advantage of the intl.numberformat() constructor discussed in Recipe
    15, [*Adding Thousand Separators to Numbers with Intl.NumberFormat()*](f_0025.xhtml#rcp.adding_thousand_separators).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数允许我们匹配像德国、希腊和意大利等国家使用的千位分隔符。如果你想为数字添加千位分隔符，可以利用在第15个食谱中讨论的`intl.numberformat()`构造函数，参见
    [*使用Intl.NumberFormat()为数字添加千位分隔符*](f_0025.xhtml#rcp.adding_thousand_separators)。
