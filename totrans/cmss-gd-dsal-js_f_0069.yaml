- en: Clothing Labels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose we’re writing software for a clothing manufacturer. Our code accepts
    an array of newly produced clothing items (stored as strings) and creates text
    for every possible label we’ll need.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, our labels should contain the item name plus its size, ranging
    from 1 to 5\. For example, if we have the array, ["Purple Shirt", "Green Shirt"],
    we want to produce label text for those shirts like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | [ |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | "Purple Shirt Size: 1", |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | "Purple Shirt Size: 2", |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | "Purple Shirt Size: 3", |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | "Purple Shirt Size: 4", |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | "Purple Shirt Size: 5", |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | "Green Shirt Size: 1", |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | "Green Shirt Size: 2", |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | "Green Shirt Size: 3", |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | "Green Shirt Size: 4", |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | "Green Shirt Size: 5" |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ] |'
  prefs: []
  type: TYPE_TB
- en: 'Here’s code that will create this text for an entire array of clothing items:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | ​**function**​ markInventory(clothingItems) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**const**​ clothingOptions = []; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**for**​ (​**const**​ item ​**of**​ clothingItems) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**for**​ (​**let**​ size = 1; size < 6; size += 1) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | clothingOptions.push(​*`*​${item}​ *Size:* ​${size}​*`*​); |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: '| ​  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**return**​ clothingOptions; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: Let’s determine this algorithm’s efficiency. The clothingItems are the primary
    data being processed, so N is the size of the array, clothingItems.
  prefs: []
  type: TYPE_NORMAL
- en: This code contains nested loops, so it’s tempting to declare this algorithm
    to be O(N²). However, we need to analyze this case a little more carefully. While
    code containing nested loops often is O(N²), in this case it’s not.
  prefs: []
  type: TYPE_NORMAL
- en: Nested loops that result in O(N²) occur when each loop revolves around N. In
    our case, however, while our outer loop runs N times, our inner loop runs a constant
    five times; that is, this inner loop will always run five times no matter what
    N is.
  prefs: []
  type: TYPE_NORMAL
- en: So while our outer loop runs N times, the inner loop runs five times for each
    of the N strings. This means our algorithm runs 5N times, but this is reduced
    to O(N), since Big O notation ignores constants.
  prefs: []
  type: TYPE_NORMAL
