- en: Clothing Labels
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: Suppose we’re writing software for a clothing manufacturer. Our code accepts
    an array of newly produced clothing items (stored as strings) and creates text
    for every possible label we’ll need.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Specifically, our labels should contain the item name plus its size, ranging
    from 1 to 5. For example, if we have the array, `["Purple Shirt", "Green Shirt"]`,
    we want to produce label text for those shirts like this:'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | [ |'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `"Purple Shirt Size: 1",` |'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `"Purple Shirt Size: 2",` |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `"Purple Shirt Size: 3",` |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `"Purple Shirt Size: 4",` |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `"Purple Shirt Size: 5",` |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `"Green Shirt Size: 1",` |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `"Green Shirt Size: 2",` |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `"Green Shirt Size: 3",` |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `"Green Shirt Size: 4",` |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `"Green Shirt Size: 5"` |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ] |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 'Here’s code that will create this text for an entire array of clothing items:'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `**function** markInventory(clothingItems) {` |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `**const** clothingOptions = [];` |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `**for** (**const** item **of** clothingItems) {` |'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `**for** (**let** size = 1; size < 6; size += 1) {` |'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `clothingOptions.push(${item} *Size:* ${size});` |'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `**return** clothingOptions;` |'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_TB
- en: Let’s determine this algorithm’s efficiency. The `clothingItems` are the primary
    data being processed, so `N` is the size of the array, `clothingItems`.
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: This code contains nested loops, so it’s tempting to declare this algorithm
    to be `O(N²)`. However, we need to analyze this case a little more carefully.
    While code containing nested loops often is `O(N²)`, in this case it’s not.
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Nested loops that result in `O(N²)` occur when each loop revolves around `N`.
    In our case, however, while our outer loop runs `N` times, our inner loop runs
    a constant five times; that is, this inner loop will always run five times no
    matter what `N` is.
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: So while our outer loop runs `N` times, the inner loop runs five times for each
    of the `N` strings. This means our algorithm runs `5N` times, but this is reduced
    to `O(N)` since Big O notation ignores constants.
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
