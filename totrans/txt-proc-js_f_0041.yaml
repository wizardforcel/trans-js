- en: '| Recipe 30 | Treating Multiple Characters as a Single Unit with the Capturing
    Group |'
  prefs: []
  type: TYPE_TB
- en: Task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Suppose you want to search an archive of documents and retrieve those that
    mention a date in August. The only clue you have is that the date comes in four
    different styles. For example: “August 16,” “August 16th,” “Aug 16,” or “Aug 16th.”'
  prefs: []
  type: TYPE_NORMAL
- en: To match such a date with regex, you need a way to make “ust” in “August” and
    “th” in “16th” optional.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To make certain letters optional, group them by enclosing them in parentheses
    and place a question mark after the group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/capturing_group_p1/capturing_group_p1_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/capturing_group_p1/capturing_group_p1_ex1.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** re = */**\b**Aug**(**ust**)?\s\d{1,2}(**st&#124;nd&#124;rd&#124;th**)?\b**/*;
    |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// Grouping allows matching many alternatives* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"Aug 16"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"August 16"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"Aug 16th"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"August 16th"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: This regex matches dates in the format of “Aug 1st,” “August 15th,” “Aug 22nd,”
    “August 31st,” etc. Please note that if the date contains typographical errors
    such as “August 16nd” or “Aug 1rd,” the pattern will still match them.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s start by examining the pattern step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | /\bAug(ust)?\s\d{1,2}(st&#124;nd&#124;rd&#124;th)?\b/ |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | ● \b asserts a word boundary |'
  prefs: []
  type: TYPE_TB
- en: '|   | ● Aug matches the characters Aug literally |'
  prefs: []
  type: TYPE_TB
- en: '|   | ● (ust)? 1st capturing group |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ ust matches the characters ust literally |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ ? matches the previous token zero or one time |'
  prefs: []
  type: TYPE_TB
- en: '|   | ● \s matches any whitespace character |'
  prefs: []
  type: TYPE_TB
- en: '|   | ● \d matches a digit |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ {1,2} matches the previous token 1 or 2 times |'
  prefs: []
  type: TYPE_TB
- en: '|   | ● (st&#124;nd&#124;rd&#124;th)? |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ 1st alternative st: matches the characters st literally |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ 2nd alternative nd: matches the characters nd literally |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ 3rd alternative rd: matches the characters rd literally |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ 4th alternative th: matches the characters th literally |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ ? matches the previous token zero or one time |'
  prefs: []
  type: TYPE_TB
- en: '|   | ● \b asserts a word boundary |'
  prefs: []
  type: TYPE_TB
- en: The regex begins with a word boundary (\b), which allows us to match the beginning
    of a word. Then we use Aug(ust)? to match the string “Aug” followed by an optional
    “ust,” which tells the regex to match both “Aug” and “August” formats of the month.
    After that, we use \s to match a whitespace character (space, tab, etc.) after
    the month.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the day of the month, we use \d{1,2} to match one or two digits. The curly
    braces with the range 1,2 ensure that only one or two digits are matched. Next,
    we use (st|nd|rd|th)? to match the suffix for the day of the month, including
    “st,” “nd,” “rd,” or “th.” Of all metacharacters, the vertical bar has the lowest
    precedence: it matches either everything to the left or everything to the right
    of the vertical bar. In this case, we need to limit the reach of alternation by
    wrapping the characters in a pair of parentheses.'
  prefs: []
  type: TYPE_NORMAL
- en: Then we use a question mark to make the suffix optional. Finally, we end the
    regex with a word boundary (\b) to match the end of a word.
  prefs: []
  type: TYPE_NORMAL
- en: '| Don’t Use the Capturing Group in a Character Class |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| ![images/aside-icons/warning.png](images/aside-icons/warning.png) | It’s
    not possible to use the capturing group in a character class because parentheses
    inside a character class are treated as literal characters. For example, [x(y)]
    matches a single character out of x, (, y, and ). |'
  prefs: []
  type: TYPE_TB
- en: Sometimes it’s useful to group a part of the regular expression and treat it
    as a single unit. You can do this by encapsulating the characters in parentheses.
    Grouping enables you to use quantifiers on the entire group, limit alternation
    to only a part of the pattern, or extract a matched value for further processing
    (which is the topic of our next recipe).
  prefs: []
  type: TYPE_NORMAL
