- en: Word Builder
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: 'The next example is an algorithm that collects every combination of two-character
    strings built from an array of single characters. For example, given the array
    `["a", "b", "c", "d"]`, we’d return a new array containing the following string
    combinations:'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | [ |'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`''ab''`, ​`''ac''`, ​`''ad''`, ​`''ba''`, ​`''bc''`, ​`''bd''`, |'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`''ca''`, ​`''cb''`, ​`''cd''`, ​`''da''`, ​`''db''`, ​`''dc''` |'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ] |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 'Following is an implementation of this algorithm. Let’s see if we can figure
    out its Big O efficiency:'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | ​`function` wordBuilder(array) { |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`const` collection = []; |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`for` (​`const` [indexI, valueI] ​`of` array.entries()) { |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`for` (​`const` [indexJ, valueJ] ​`of` array.entries()) { |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`if` (indexI !== indexJ) { |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | collection.push(valueI + valueJ); |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`return` collection; |'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_TB
- en: Here we’re running one loop nested inside another. The outer loop iterates over
    each character in the array, keeping track of the index of valueI. For each indexI,
    we run an inner loop that iterates again over each character in the same array
    using the index indexJ. Within this inner loop, we concatenate the characters
    at indexI and indexJ, with the exception of when indexI and indexJ are pointing
    to the same index.
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: To determine the efficiency of our algorithm, we once again need to determine
    what the N data elements are. In our case, as in the previous example, N is the
    number of items inside the array passed to the function.
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The next step is to determine the number of steps our algorithm takes relative
    to the N data elements. In our case, the outer loop iterates over all N elements,
    and for each element, the inner loop iterates again over all N elements, which
    amounts to N steps multiplied by N steps. This is the classic case of O(N²) and
    is often what nested-loop algorithms turn out to be.
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Now, what would happen if we modified our algorithm to compute each combination
    of three-character strings? For our example array of `["a", "b", "c", "d"]`, our
    function would return the following array:'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | [ |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`''abc''`, ​`''abd''`, ​`''acb''`, |'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`''acd''`, ​`''adb''`, ​`''adc''`, |'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`''bac''`, ​`''bad''`, ​`''bca''`, |'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`''bcd''`, ​`''bda''`, ​`''bdc''`, |'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`''cab''`, ​`''cad''`, ​`''cba''`, |'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`''cbd''`, ​`''cda''`, ​`''cdb''`, |'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`''dab''`, ​`''dac''`, ​`''dba''`, |'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`''dbc''`, ​`''dca''`, ​`''dcb''` |'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ] |'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_TB
- en: Here’s an implementation that uses three nested loops. What is its time complexity?
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | ​`function` wordBuilder(array) { |'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`const` collection = []; |'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`for` (​`const` [indexI, valueI] ​`of` array.entries()) { |'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`for` (​`const` [indexJ, valueJ] ​`of` array.entries()) { |'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`for` (​`const` [indexK, valueK] ​`of` array.entries()) { |'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (indexI !== indexJ && indexJ !== indexK && indexI !== indexK) {
    |'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `collection.push(valueI + valueJ + valueK);` |'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` collection; |'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 在这个算法中，对于N个数据元素，我们有N步的`i`循环乘以N步的`j`循环再乘以N步的`k`循环。这是`N * N * N`，即`N³`步，描述为`O(N³)`。
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 如果我们有四个或五个嵌套循环，那么相应的算法将是`O(N⁴)`和`O(N⁵)`。让我们看看这些在图上是如何出现的，如[所示](#fig.ch7.big_o_graph_with_arrows)。
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/big_o_in_everyday_code/big_o_graph_with_arrows.png](images/big_o_in_everyday_code/big_o_graph_with_arrows.png)'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 将任何代码从`O(N³)`的速度优化到`O(N²)`将是一个很大的胜利，因为代码会变得指数级更快。然而，上面的算法仍然停留在`O(N³)`。
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
