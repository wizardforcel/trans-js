- en: Joachim L. Zuckarelli
  prefs: []
  type: TYPE_NORMAL
- en: Learn coding with Python and JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A practical introduction for beginners
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../images/474412_1_En_BookFrontmatter_Figa_HTML.png)'
  prefs: []
  type: TYPE_IMG
- en: The Springer logo.
  prefs: []
  type: TYPE_NORMAL
- en: Joachim L. ZuckarelliMünchen, GermanyISBN 978-3-658-42911-9e-ISBN 978-3-658-42912-6[https://doi.org/10.1007/978-3-658-42912-6](https://doi.org/10.1007/978-3-658-42912-6)
  prefs: []
  type: TYPE_NORMAL
- en: 'Translation from the German language edition: “Programmieren lernen mit Python
    und JavaScript” by Joachim L. Zuckarelli, © Springer Fachmedien Wiesbaden GmbH,
    ein Teil von Springer Nature 2021\. Published by Springer Fachmedien Wiesbaden.
    All Rights Reserved.'
  prefs: []
  type: TYPE_NORMAL
- en: This book is a translation of the original German edition “Programmieren lernen
    mit Python und JavaScript” by Joachim L. Zuckarelli, published by Springer Fachmedien
    Wiesbaden GmbH in 2021\. The translation was done with the help of an artificial
    intelligence machine translation tool. A subsequent human revision was done primarily
    in terms of content, so that the book will read stylistically differently from
    a conventional translation. Springer Nature works continuously to further the
    development of tools for the production of books and on the related technologies
    to support the authors.
  prefs: []
  type: TYPE_NORMAL
- en: © The Editor(s) (if applicable) and The Author(s), under exclusive license to
    Springer Fachmedien Wiesbaden GmbH, part of Springer Nature 2024This work is subject
    to copyright. All rights are solely and exclusively licensed by the Publisher,
    whether the whole or part of the material is concerned, specifically the rights
    of translation, reprinting, reuse of illustrations, recitation, broadcasting,
    reproduction on microfilms or in any other physical way, and transmission or information
    storage and retrieval, electronic adaptation, computer software, or by similar
    or dissimilar methodology now known or hereafter developed.The use of general
    descriptive names, registered names, trademarks, service marks, etc. in this publication
    does not imply, even in the absence of a specific statement, that such names are
    exempt from the relevant protective laws and regulations and therefore free for
    general use.The publisher, the authors and the editors are safe to assume that
    the advice and information in this book are believed to be true and accurate at
    the date of publication. Neither the publisher nor the authors or the editors
    give a warranty, expressed or implied, with respect to the material contained
    herein or for any errors or omissions that may have been made. The publisher remains
    neutral with regard to jurisdictional claims in published maps and institutional
    affiliations.
  prefs: []
  type: TYPE_NORMAL
- en: This Springer imprint is published by the registered company Springer Fachmedien
    Wiesbaden GmbH, part of Springer Nature.
  prefs: []
  type: TYPE_NORMAL
- en: 'The registered company address is: Abraham-Lincoln-Str. 46, 65189 Wiesbaden,
    Germany'
  prefs: []
  type: TYPE_NORMAL
- en: '*To my wonderful mother*'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs: []
  type: TYPE_NORMAL
- en: The New World
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our world has always been a world of physical things—of cars, houses, furniture,
    and toasters. Their production formed the foundation of the prosperity of our
    industrial societies. In the past two to three decades, this physical world has
    been joined more and more strongly and with increasing speed and intensity by
    another, non-material world, which by no means renders the world of physical things
    meaningless, but which redefines the function and interaction of physical things
    to a large extent. Moreover, this non-material world brings forth entirely new
    phenomena that exist largely detached from any physical basis and yet play a decisive
    role in determining our prosperity and standard of living.
  prefs: []
  type: TYPE_NORMAL
- en: This non-material world is the world of *software*.
  prefs: []
  type: TYPE_NORMAL
- en: The use of software has long shaped our lives in large parts, even if we are
    not fully aware of it. No train runs, no refrigerator cools the beer, no car rolls
    even a single foot without software working in secret. The world is becoming more
    digital and networked—statements like these from politicians, representatives
    of associations, or mangers almost seem like platitudes to us today. And yet they
    are true. What makes the world more digital and networked is software. Its importance
    is increasing, and with it the importance of those who can understand and develop
    software. Today, software is what holds the world together at its core.
  prefs: []
  type: TYPE_NORMAL
- en: Compared to the immense importance that computer programs have for our daily
    lives, many people—including decision-makers in business and politics—know little
    about what software is and how it works. Every child learns the basics at school
    about how car engines work and why airplanes fly; but if a school is expected
    to teach basic programming, still in some countries a debate flares up about whether
    this is sensible and organizationally feasible given the packed timetable.
  prefs: []
  type: TYPE_NORMAL
- en: But there are many good reasons to take a closer look at software and its development.
  prefs: []
  type: TYPE_NORMAL
- en: Economic reasons are part of it, even if you leave aside the hero stories of
    successful software start-up entrepreneurs that the media present to us practically
    every day. Both developing software, and working with people who do so, are becoming
    increasingly important skills in the working world, even if managers and employees
    who are not tech gurus themselves will never work in software development.
  prefs: []
  type: TYPE_NORMAL
- en: Social reasons are important because the increase in automation that goes hand
    in hand with the growing importance of software has implications for the world
    of work and our role in it—much greater and more fundamental than many politicians
    are aware of. The social debate about the benefits and possible risks of artificial
    intelligence is also easier to conduct for those who have a basic knowledge of
    how algorithms and software work. Anyone who wants to make informed political
    decisions must understand how the world is shaped and changed by software.
  prefs: []
  type: TYPE_NORMAL
- en: 'Last but not least, there are very practical reasons for dealing with software
    and the development of software: If you know how to program, you can make your
    life much easier in many places; you can do things faster, with fewer errors and
    with less effort than others, and you can even do some things that nobody else
    can do. And—this should also not be concealed here—a lot of fun is involved, too!'
  prefs: []
  type: TYPE_NORMAL
- en: Many of us are good consumers of software. This book sets out to introduce you
    to the other side, the side of those who develop what we consume every day. You
    might not end up as a professional programmer, but still understand the basics
    of developing software and be able to write programs yourself and expand your
    knowledge if you choose to.
  prefs: []
  type: TYPE_NORMAL
- en: The Approach of This Book
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you talk to professional software developers, you will often hear that they
    know a range of languages in which computer programs are written. Some programmers
    list an impressively long list of languages with sometimes very strange names.
    How is that possible? How can they all speak two, three, four of these programming
    languages? Are they all geniuses?
  prefs: []
  type: TYPE_NORMAL
- en: Not at all. However, programmers take advantage of a simple fact, namely that
    programming languages are very similar in many aspects, much more similar than
    natural languages like English or Spanish are to each other. Many basic concepts
    are found in virtually all programming languages in one form or another. They
    may be called differently in each language, but in the end they are always just
    variants of the same idea implemented in different ways. If you understand these
    basic concepts, you can learn new programming languages quickly because you know
    exactly what to look for and only need to understand how the new programming language
    you’re learning implements each basic concept. This makes language learning much
    easier.
  prefs: []
  type: TYPE_NORMAL
- en: Most books that promise an introduction to programming cover one specific language—and
    *only* that one language. They start right away with that language and teach all
    the basic concepts using that one language as an example. The book before you
    now takes a different approach.
  prefs: []
  type: TYPE_NORMAL
- en: In *Part I*, we deal with the question of what programming is, why you should
    learn it, and what programming languages are all about.
  prefs: []
  type: TYPE_NORMAL
- en: '*Part II* is dedicated exclusively to the basic concepts or programming. It
    explains them through 9 questions that you can ask yourself every time you learn
    a new programming language. The basic concepts covered in these 9 questions are
    the key to learning to program. Once you understand these basic concepts, you
    can learn any programming language. Even though dealing with the basic concepts,
    which are similar in all programming languages, may sound rather theoretical and
    dry at first, it is not: you will see countless examples from a whole range of
    programming languages, so that you can see for yourself how similar the languages
    are after all.'
  prefs: []
  type: TYPE_NORMAL
- en: Armed with a good understanding of the basic concepts of programming, you will
    then be introduced to two of the most popular programming languages around—*Python*
    and *JavaScript—*in *Parts III* and *IV* of the book. Both parts follow the structure
    of our 9 questions from the basic concepts part. And it is the basic concepts
    that we will be looking at implementing in Python and JavaScript in these parts
    of the book. In doing so, we take a very pragmatic approach. We will not elaborate
    on every subtlety of our programming languages. You are not meant to become a
    connoisseur of theoretical language definition. We want you to learn how to program
    practically with Python and JavaScript. The goal is not for you to write the most
    efficient and elegant programs, but rather that you write *understandable* programs
    that *work*. That is the core of programming. Don’t let anyone tell you that something
    has to be a certain way. It’s right if it works. If your program is also nice
    to look at, all the better. But here, the first priority is to develop *functioning*
    code.
  prefs: []
  type: TYPE_NORMAL
- en: If you already have programming experience, you could also jump right into the
    Python or JavaScript parts. Both are structured in such a way that they can be
    read almost like their own books, even if you skipped the basic concepts part.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, you don’t necessarily have to learn both programming languages one
    after the other. Feel free to look at one first, work with it a bit, and then
    start with the second. Or learn a completely different language! After the basic
    concepts part, you will be very well prepared for it. It will be easier for you
    than if you had learned all the basic concepts using only one language as an example.
  prefs: []
  type: TYPE_NORMAL
- en: With numerous exercises, the two parts on Python and JavaScript offer many opportunities
    to practically apply your knowledge and thereby deepen it. Each exercise shows
    you the approximate time you should expect to need. Some tasks are easier, others
    (the ones with the exclamation mark in front) require the development of larger,
    coherent programs—but you will find a sample solution for all tasks equally.
  prefs: []
  type: TYPE_NORMAL
- en: Have fun with your first steps into the world of programming!
  prefs: []
  type: TYPE_NORMAL
- en: ContentsAbout Programming[1 What Is Programming?​](474412_1_En_1_Chapter.xhtml)
    3[1.​1 The Mysterious Power—or:​ Consciousness Determines Being](474412_1_En_1_Chapter.xhtml#Sec1)
    4[1.​2 Algorithms](474412_1_En_1_Chapter.xhtml#Sec2) 6[1.​3 Limits of Classical
    Algorithms:​ The Playing Field of Artificial Intelligence](474412_1_En_1_Chapter.xhtml#Sec3)
    8[1.​3.​1 Only Apparently Intelligent](474412_1_En_1_Chapter.xhtml#Sec4) 8[1.​3.​2
    Cat or Not Cat:​ That Is the Question Here](474412_1_En_1_Chapter.xhtml#Sec5)
    10[2 Why Learn Programming?​](474412_1_En_2_Chapter.xhtml) 13[2.​1 Many Good Reasons](474412_1_En_2_Chapter.xhtml#Sec1)
    14[2.​1.​1 Make Your Everyday Life Easier!](474412_1_En_2_Chapter.xhtml#Sec2)
    14[2.​1.​2 Speak “IT”!](474412_1_En_2_Chapter.xhtml#Sec3) 15[2.​1.​3 Make Money!](474412_1_En_2_Chapter.xhtml#Sec4)
    16[2.​1.​4 Understand What Holds the World Together At Its Core!](474412_1_En_2_Chapter.xhtml#Sec5)
    17[2.​1.​5 Train Your Logical, Problem-Solving Thinking!](474412_1_En_2_Chapter.xhtml#Sec6)
    17[2.​2 Clichés and Prejudices](474412_1_En_2_Chapter.xhtml#Sec7) 18[2.​2.​1 Programming
    is Only for Nerds](474412_1_En_2_Chapter.xhtml#Sec8) 18[2.​2.​2 Software and Its
    Programming Are Just a Fashion, a Hype](474412_1_En_2_Chapter.xhtml#Sec9) 19[2.​2.​3
    Programming is Only for Men](474412_1_En_2_Chapter.xhtml#Sec10) 19[3 What Is a
    Programming Language?​](474412_1_En_3_Chapter.xhtml) 21[3.​1 Languages for Humans,
    Languages for Machines](474412_1_En_3_Chapter.xhtml#Sec1) 22[3.​2 Translation
    and Execution of Programming Languages](474412_1_En_3_Chapter.xhtml#Sec2) 24[3.​3
    From Machine Language to High-Level Language](474412_1_En_3_Chapter.xhtml#Sec3)
    26[4 Why Are There So Many Programming Languages?​](474412_1_En_4_Chapter.xhtml)
    29[4.​1 Different Fields of Application](474412_1_En_4_Chapter.xhtml#Sec1) 30[4.​2
    Different Paradigms](474412_1_En_4_Chapter.xhtml#Sec2) 31[4.​3 Further Developments
    and Dialects](474412_1_En_4_Chapter.xhtml#Sec3) 32[5 Which Programming Languages
    Should You Learn?​](474412_1_En_5_Chapter.xhtml) 35[5.​1 Subject of Your Project](474412_1_En_5_Chapter.xhtml#Sec1)
    36[5.​2 Customer Preference and Employer Preference](474412_1_En_5_Chapter.xhtml#Sec2)
    37[5.​3 Pedagogical Aspects](474412_1_En_5_Chapter.xhtml#Sec3) 38[6 Some Tips](474412_1_En_6_Chapter.xhtml)
    41[6.​1 Learn the Basics First!](474412_1_En_6_Chapter.xhtml#Sec1) 42[6.​2 Play!](474412_1_En_6_Chapter.xhtml#Sec2)
    42[6.​3 Don’t Lose Heart!](474412_1_En_6_Chapter.xhtml#Sec3) 42[6.​4 Start Small,
    and Let Your Program Grow Incrementally!](474412_1_En_6_Chapter.xhtml#Sec4) 43[6.​5
    Let Beauty Be Beauty!](474412_1_En_6_Chapter.xhtml#Sec5) 43[6.​6 Document!](474412_1_En_6_Chapter.xhtml#Sec6)
    43The Basic Concepts of Programming[7 Nine Questions](474412_1_En_7_Chapter.xhtml)
    47[8 What Do I Need for Programming?​](474412_1_En_8_Chapter.xhtml) 51[8.​1 Tools](474412_1_En_8_Chapter.xhtml#Sec1)
    52[8.​1.​1 Compiler and Interpreter](474412_1_En_8_Chapter.xhtml#Sec2) 52[8.​1.​2
    Code Editors](474412_1_En_8_Chapter.xhtml#Sec3) 53[8.​1.​3 Integrated Development
    Environments (IDEs)](474412_1_En_8_Chapter.xhtml#Sec4) 54[8.​1.​4 Simple Online
    Development Environments](474412_1_En_8_Chapter.xhtml#Sec5) 59[8.​2 Help and Information](474412_1_En_8_Chapter.xhtml#Sec6)
    60[8.​3 Generative Artificial Intelligence Like ChatGPT](474412_1_En_8_Chapter.xhtml#Sec7)
    62[8.​4 Your Roadmap to Learning a New Programming Language](474412_1_En_8_Chapter.xhtml#Sec8)
    63[9 What Do I Have to Do to Get a Program Running?​](474412_1_En_9_Chapter.xhtml)
    65[9.​1 All Beginnings Are Easy](474412_1_En_9_Chapter.xhtml#Sec1) 66[9.​2 Hello,
    World!](474412_1_En_9_Chapter.xhtml#Sec2) 68[9.​3 Your Roadmap to Learning a New
    Programming Language](474412_1_En_9_Chapter.xhtml#Sec3) 69[10 How Do I Make Sure
    That I (and Others) Still Understand My Program Later?​](474412_1_En_10_Chapter.xhtml)
    71[10.​1 Understandable Program Code](474412_1_En_10_Chapter.xhtml#Sec1) 72[10.​2
    Design of the Program Code and Naming of Program Elements](474412_1_En_10_Chapter.xhtml#Sec2)
    73[10.​3 Comments](474412_1_En_10_Chapter.xhtml#Sec3) 76[10.​3.​1 Explain Your
    Own Program Code](474412_1_En_10_Chapter.xhtml#Sec4) 76[10.​3.​2 What Else Comments
    Are Useful For](474412_1_En_10_Chapter.xhtml#Sec5) 77[10.​3.​3 Documentation Outside
    the Program Code](474412_1_En_10_Chapter.xhtml#Sec6) 78[10.​4 Your Roadmap to
    Learning a New Programming Language](474412_1_En_10_Chapter.xhtml#Sec7) 80[11
    How Do I Store Data to Work With?​](474412_1_En_11_Chapter.xhtml) 81[11.​1 Variables
    as Placeholders for Data](474412_1_En_11_Chapter.xhtml#Sec1) 82[11.​2 Data Types
    of Variables](474412_1_En_11_Chapter.xhtml#Sec2) 83[11.​2.​1 Different Types of
    Data Require Different Types of Variables](474412_1_En_11_Chapter.xhtml#Sec3)
    83[11.​2.​2 Important Data Types](474412_1_En_11_Chapter.xhtml#Sec4) 84[11.​2.​3
    Changing the Data Type:​ Conversion of Variables](474412_1_En_11_Chapter.xhtml#Sec5)
    88[11.​3 Creating and Initializing Variables](474412_1_En_11_Chapter.xhtml#Sec6)
    89[11.​4 Not So Variable:​ Constants](474412_1_En_11_Chapter.xhtml#Sec7) 92[11.​5
    Ordered Fields of Variables/​Arrays](474412_1_En_11_Chapter.xhtml#Sec8) 92[11.​6
    Associative Fields of Variables/​Hashes](474412_1_En_11_Chapter.xhtml#Sec9) 96[11.​7
    Objects](474412_1_En_11_Chapter.xhtml#Sec10) 97[11.​7.​1 The World Is Made of
    Objects](474412_1_En_11_Chapter.xhtml#Sec11) 97[11.​7.​2 Classes](474412_1_En_11_Chapter.xhtml#Sec12)
    98[11.​7.​3 Inheritance](474412_1_En_11_Chapter.xhtml#Sec13) 100[11.​7.​4 Methods](474412_1_En_11_Chapter.xhtml#Sec14)
    103[11.​7.​5 Polymorphism](474412_1_En_11_Chapter.xhtml#Sec15) 105[11.​7.​6 Access
    Rights](474412_1_En_11_Chapter.xhtml#Sec16) 107[11.​8 Your Roadmap to Learning
    a New Programming Language](474412_1_En_11_Chapter.xhtml#Sec17) 109[11.​9 Solutions
    to the Exercises](474412_1_En_11_Chapter.xhtml#Sec18) 109[12 How Do I Input and
    Output Data?​](474412_1_En_12_Chapter.xhtml) 113[12.​1 Forms of Data Input and
    Output](474412_1_En_12_Chapter.xhtml#Sec1) 114[12.​2 Graphical or Non-Graphical:​
    That Is the Question Here](474412_1_En_12_Chapter.xhtml#Sec2) 115[12.​2.​1 Graphical
    User Interfaces](474412_1_En_12_Chapter.xhtml#Sec3) 116[12.​2.​2 Console Applications](474412_1_En_12_Chapter.xhtml#Sec6)
    124[12.​3 Working with Files](474412_1_En_12_Chapter.xhtml#Sec7) 126[12.​4 Working
    with Databases](474412_1_En_12_Chapter.xhtml#Sec8) 131[12.​5 Your Roadmap to Learning
    a New Programming Language](474412_1_En_12_Chapter.xhtml#Sec9) 134[12.​6 Solutions
    to the Exercises](474412_1_En_12_Chapter.xhtml#Sec10) 134[13 How Do I Work with
    Program Functions to Edit Data and Trigger Actions?​](474412_1_En_13_Chapter.xhtml)
    137[13.​1 Functions](474412_1_En_13_Chapter.xhtml#Sec1) 138[13.​2 Libraries](474412_1_En_13_Chapter.xhtml#Sec2)
    145[13.​3 Frameworks](474412_1_En_13_Chapter.xhtml#Sec3) 148[13.​4 Application
    Programming Interfaces (APIs)](474412_1_En_13_Chapter.xhtml#Sec4) 149[13.​5 Your
    Roadmap to Learning a New Programming Language](474412_1_En_13_Chapter.xhtml#Sec5)
    150[13.​6 Solutions to the Exercises](474412_1_En_13_Chapter.xhtml#Sec6) 151[14
    How Do I Control the Program Flow and Make the Program React to User Actions and
    Other Events?​](474412_1_En_14_Chapter.xhtml) 153[14.​1 Why Program Flow Control
    Is Necessary](474412_1_En_14_Chapter.xhtml#Sec1) 154[14.​2 Forms of Flow Control](474412_1_En_14_Chapter.xhtml#Sec2)
    155[14.​3 If-Else Constructs](474412_1_En_14_Chapter.xhtml#Sec3) 155[14.​4 A Closer
    Look at Conditions](474412_1_En_14_Chapter.xhtml#Sec4) 161[14.​5 Complex Conditions
    with Logical Operators (AND, OR, NOT)](474412_1_En_14_Chapter.xhtml#Sec5) 163[14.​6
    Checking Similar Conditions Efficiently with Switch-Case Constructs (Switch/​Select…Case)](474412_1_En_14_Chapter.xhtml#Sec6)
    166[14.​7 Events](474412_1_En_14_Chapter.xhtml#Sec7) 168[14.​8 Your Roadmap to
    Learning a New Programming Language](474412_1_En_14_Chapter.xhtml#Sec8) 172[14.​9
    Solutions to the Exercises](474412_1_En_14_Chapter.xhtml#Sec9) 173[15 Loops:​
    How Do I Repeat Program Instructions Efficiently?​](474412_1_En_15_Chapter.xhtml)
    177[15.​1 Loops and Their Variants](474412_1_En_15_Chapter.xhtml#Sec1) 178[15.​2
    Counting Loops](474412_1_En_15_Chapter.xhtml#Sec2) 179[15.​3 Conditional Loops](474412_1_En_15_Chapter.xhtml#Sec3)
    185[15.​4 Your Roadmap to Learning a New Programming Language](474412_1_En_15_Chapter.xhtml#Sec4)
    189[15.​5 Solutions to the Exercises](474412_1_En_15_Chapter.xhtml#Sec5) 189[16
    How Do I Search For and Fix Errors in a Structured Way?​](474412_1_En_16_Chapter.xhtml)
    193[16.​1 Errors at Development Time](474412_1_En_16_Chapter.xhtml#Sec1) 194[16.​2
    Errors at Runtime](474412_1_En_16_Chapter.xhtml#Sec2) 195[16.​3 Testing](474412_1_En_16_Chapter.xhtml#Sec3)
    196[16.​4 Debugging Methods](474412_1_En_16_Chapter.xhtml#Sec4) 197[16.​5 Your
    Roadmap to Learning a New Programming Language](474412_1_En_16_Chapter.xhtml#Sec5)
    199Python[17 Introduction](474412_1_En_17_Chapter.xhtml) 203[18 Tools &​ Help:​
    What Do I Need for Programming?​](474412_1_En_18_Chapter.xhtml) 207[18.​1 Installing
    the Python Interpreter](474412_1_En_18_Chapter.xhtml#Sec1) 208[18.2 Installing
    the *PyCharm* IDE](474412_1_En_18_Chapter.xhtml#Sec2) 210[18.​3 Getting Help with
    Python](474412_1_En_18_Chapter.xhtml#Sec3) 211[18.​4 Summary](474412_1_En_18_Chapter.xhtml#Sec4)
    212[19 Program Execution &​ Hello World:​ What Do I Have to Do to Get a Program
    Running?​](474412_1_En_19_Chapter.xhtml) 213[19.​1 Developing and Executing Programs
    in Python](474412_1_En_19_Chapter.xhtml#Sec1) 214[19.​2 The Python console:​ Python
    in interactive mode](474412_1_En_19_Chapter.xhtml#Sec2) 221[19.3 Get to Know *PyCharm*](474412_1_En_19_Chapter.xhtml#Sec3)
    222[19.​4 Some Alternatives to PyCharm for Python Code Execution](474412_1_En_19_Chapter.xhtml#Sec4)
    223[19.​5 Summary](474412_1_En_19_Chapter.xhtml#Sec5) 224[20 Syntax, Comments,
    Code Style &​ Documentation:​ How Do I Make Sure That I (And Others) Still Understand
    My Program Later?​](474412_1_En_20_Chapter.xhtml) 225[20.​1 Design of the Program
    Code and Naming Conventions](474412_1_En_20_Chapter.xhtml#Sec1) 226[20.​1.​1 Indentation
    and General Code Formatting](474412_1_En_20_Chapter.xhtml#Sec2) 226[20.​1.​2 End
    of Statement Without Semicolon, Statements Over Several Lines](474412_1_En_20_Chapter.xhtml#Sec3)
    228[20.​1.​3 Case Sensitivity and Choice of Identifiers](474412_1_En_20_Chapter.xhtml#Sec4)
    229[20.​2 Comments](474412_1_En_20_Chapter.xhtml#Sec5) 230[20.​3 Documentation
    with Docstrings](474412_1_En_20_Chapter.xhtml#Sec6) 232[20.​4 Summary](474412_1_En_20_Chapter.xhtml#Sec7)
    234[21 Variables &​ Objects:​ How Do I Store Data to Work With?​](474412_1_En_21_Chapter.xhtml)
    235[21.​1 Creating and Assigning Variables](474412_1_En_21_Chapter.xhtml#Sec1)
    236[21.​2 Deleting Variables](474412_1_En_21_Chapter.xhtml#Sec2) 238[21.​3 Basic
    Types of Variables](474412_1_En_21_Chapter.xhtml#Sec3) 238[21.​3.​1 Numbers (int,
    float)](474412_1_En_21_Chapter.xhtml#Sec4) 239[21.​3.​2 Strings (str)](474412_1_En_21_Chapter.xhtml#Sec5)
    239[21.​3.​3 Truth Values (bool)](474412_1_En_21_Chapter.xhtml#Sec6) 241[21.​3.​4
    None](474412_1_En_21_Chapter.xhtml#Sec7) 242[21.​3.​5 Other Data Types](474412_1_En_21_Chapter.xhtml#Sec8)
    243[21.​4 Variables as Objects](474412_1_En_21_Chapter.xhtml#Sec9) 244[21.​4.​1
    Attributes and Methods of Variables](474412_1_En_21_Chapter.xhtml#Sec10) 244[21.​4.​2
    Creating Variables with the Constructor Method](474412_1_En_21_Chapter.xhtml#Sec11)
    248[21.​5 Converting Variables](474412_1_En_21_Chapter.xhtml#Sec12) 249[21.​6
    Complex Data Types](474412_1_En_21_Chapter.xhtml#Sec13) 251[21.​6.​1 Lists](474412_1_En_21_Chapter.xhtml#Sec14)
    251[21.​6.​2 Tuples](474412_1_En_21_Chapter.xhtml#Sec20) 258[21.​6.​3 Dictionaries](474412_1_En_21_Chapter.xhtml#Sec21)
    259[21.​6.​4 Sets](474412_1_En_21_Chapter.xhtml#Sec22) 262[21.​7 Self-Defined
    Classes](474412_1_En_21_Chapter.xhtml#Sec23) 264[21.​7.​1 Defining and Using Classes](474412_1_En_21_Chapter.xhtml#Sec24)
    264[21.​7.​2 Deriving Classes from Other Classes](474412_1_En_21_Chapter.xhtml#Sec25)
    266[21.​7.​3 Avoid Ambiguity:​ Name Mangling](474412_1_En_21_Chapter.xhtml#Sec26)
    268[21.​8 Summary](474412_1_En_21_Chapter.xhtml#Sec27) 268[21.​9 Solutions to
    the Exercises](474412_1_En_21_Chapter.xhtml#Sec28) 271[22 User Interfaces:​ How
    Do I Input and Output Data?​](474412_1_En_22_Chapter.xhtml) 277[22.​1 Input and
    Output in the Console](474412_1_En_22_Chapter.xhtml#Sec1) 278[22.​2 Graphical
    User Interfaces with Tkinter](474412_1_En_22_Chapter.xhtml#Sec2) 280[22.​2.​1
    Overview](474412_1_En_22_Chapter.xhtml#Sec3) 280[22.​2.​2 Hello Tkinter!](474412_1_En_22_Chapter.xhtml#Sec4)
    281[22.​2.​3 Graphical Controls (Widgets)](474412_1_En_22_Chapter.xhtml#Sec5)
    282[22.​2.​4 Arrangement of the Controls (Geometry Managers)](474412_1_En_22_Chapter.xhtml#Sec15)
    299[22.​2.​5 Events](474412_1_En_22_Chapter.xhtml#Sec19) 305[22.​2.​6 Example:​
    Calculator Application](474412_1_En_22_Chapter.xhtml#Sec20) 308[22.​3 Working
    with Files](474412_1_En_22_Chapter.xhtml#Sec21) 315[22.​4 Exercise:​ Development
    of a Simple Text Editor](474412_1_En_22_Chapter.xhtml#Sec22) 317[22.​5 Summary](474412_1_En_22_Chapter.xhtml#Sec23)
    318[22.​6 Solutions to the Exercises](474412_1_En_22_Chapter.xhtml#Sec24) 319[23
    Functions &​ Methods:​ How Do I Work with Program Functions to Work with Data
    and Trigger Actions?​](474412_1_En_23_Chapter.xhtml) 327[23.​1 Working with Functions](474412_1_En_23_Chapter.xhtml#Sec1)
    328[23.​1.​1 Definition of Functions](474412_1_En_23_Chapter.xhtml#Sec2) 328[23.​1.​2
    Function Arguments](474412_1_En_23_Chapter.xhtml#Sec3) 329[23.​1.​3 Return Values](474412_1_En_23_Chapter.xhtml#Sec4)
    334[23.​1.​4 Local and Global Variables](474412_1_En_23_Chapter.xhtml#Sec5) 335[23.​2
    Using Functions as Class Methods of Objects](474412_1_En_23_Chapter.xhtml#Sec6)
    339[23.​3 Working with Modules and Packages](474412_1_En_23_Chapter.xhtml#Sec7)
    342[23.​3.​1 Modularizing Program Code](474412_1_En_23_Chapter.xhtml#Sec8) 342[23.​3.​2
    Importing Elements from Modules](474412_1_En_23_Chapter.xhtml#Sec9) 344[23.​3.​3
    Using the Community:​ The Python Package Index (PyPI)](474412_1_En_23_Chapter.xhtml#Sec10)
    345[23.​4 Summary](474412_1_En_23_Chapter.xhtml#Sec11) 348[23.​5 Solutions to
    the Exercises](474412_1_En_23_Chapter.xhtml#Sec12) 349[24 Conditional Statements
    &​ Event Handling:​ How Do I Control the Program Flow and Make the Program React
    to User Actions and Other Events?​](474412_1_En_24_Chapter.xhtml) 353[24.​1 If-Else
    Constructs](474412_1_En_24_Chapter.xhtml#Sec1) 354[24.​1.​1 Simple If-Else Constructs](474412_1_En_24_Chapter.xhtml#Sec2)
    354[24.​1.​2 Nested if-else Constructs](474412_1_En_24_Chapter.xhtml#Sec3) 356[24.​1.​3
    If-Else Construct with Composite Conditions](474412_1_En_24_Chapter.xhtml#Sec4)
    358[24.​1.​4 If-Else Construct with Alternative Conditions (elif)](474412_1_En_24_Chapter.xhtml#Sec5)
    359[24.​2 Events](474412_1_En_24_Chapter.xhtml#Sec6) 361[24.​3 Summary](474412_1_En_24_Chapter.xhtml#Sec7)
    362[24.​4 Solutions to the Exercises](474412_1_En_24_Chapter.xhtml#Sec8) 362[25
    Loops:​ How Do I Repeat Program Instructions Efficiently?​](474412_1_En_25_Chapter.xhtml)
    365[25.​1 Counting Loops (for)](474412_1_En_25_Chapter.xhtml#Sec1) 366[25.​1.​1
    Simple for-Loops](474412_1_En_25_Chapter.xhtml#Sec2) 366[25.​1.​2 Nested for-Loops](474412_1_En_25_Chapter.xhtml#Sec3)
    370[25.​1.​3 List Comprehension Expressions](474412_1_En_25_Chapter.xhtml#Sec4)
    371[25.​2 Conditional Loops (while)](474412_1_En_25_Chapter.xhtml#Sec5) 372[25.​3
    Exiting Loops Prematurely and Restarting Them](474412_1_En_25_Chapter.xhtml#Sec6)
    375[25.​4 Summary](474412_1_En_25_Chapter.xhtml#Sec7) 377[25.​5 Solutions to the
    Exercises](474412_1_En_25_Chapter.xhtml#Sec8) 377[26 Debugging &​ Error-Handling:​
    How to Find and Fix Errors in a Structured Way](474412_1_En_26_Chapter.xhtml)
    381[26.​1 Error Handling at Runtime](474412_1_En_26_Chapter.xhtml#Sec1) 382[26.​1.​1
    Catching Errors Through Targeted Checks](474412_1_En_26_Chapter.xhtml#Sec2) 382[26.​1.​2
    Try-Except Constructs](474412_1_En_26_Chapter.xhtml#Sec3) 383[26.​2 Troubleshooting
    During Development](474412_1_En_26_Chapter.xhtml#Sec4) 386[26.​2.​1 Breakpoints](474412_1_En_26_Chapter.xhtml#Sec5)
    386[26.​2.​2 Display of Variable Content and Use of Watches](474412_1_En_26_Chapter.xhtml#Sec6)
    388[26.​2.​3 Step-by-Step Execution](474412_1_En_26_Chapter.xhtml#Sec7) 389[26.​3
    Summary](474412_1_En_26_Chapter.xhtml#Sec8) 390[26.​4 Solutions to the Exercises](474412_1_En_26_Chapter.xhtml#Sec9)
    391JavaScript[27 Introduction](474412_1_En_27_Chapter.xhtml) 395[28 Tools &​ Help:​
    What Do I Need for Programming?​](474412_1_En_28_Chapter.xhtml) 399[28.​1 Interpreter](474412_1_En_28_Chapter.xhtml#Sec1)
    400[28.​2 Code Editors and Development Environments](474412_1_En_28_Chapter.xhtml#Sec2)
    400[28.​3 Assistance and Documentation](474412_1_En_28_Chapter.xhtml#Sec3) 401[28.​4
    Summary](474412_1_En_28_Chapter.xhtml#Sec4) 402[29 Program Execution &​ Hello
    World:​ What Do I Have to Do to Get a Program Running?​](474412_1_En_29_Chapter.xhtml)
    403[29.​1 Embedding JavaScript Code in Web Pages](474412_1_En_29_Chapter.xhtml#Sec1)
    404[29.​1.​1 The Script Element in HTML](474412_1_En_29_Chapter.xhtml#Sec2) 404[29.​1.​2
    Safety Aspects](474412_1_En_29_Chapter.xhtml#Sec3) 408[29.​2 “Hello World” in
    JavaScript](474412_1_En_29_Chapter.xhtml#Sec4) 409[29.​2.​1 Do-it-Yourself:​ The
    (Not so) Laborious Way](474412_1_En_29_Chapter.xhtml#Sec5) 409[29.​2.​2 With a
    Little Help:​ Fast Implementation with a Web Service](474412_1_En_29_Chapter.xhtml#Sec6)
    411[29.​3 Summary](474412_1_En_29_Chapter.xhtml#Sec7) 412[30 Syntax, Comments,
    Code Style &​ Documentation:​ How Do I Make Sure That I (And Others) Still Understand
    My Program Later?​](474412_1_En_30_Chapter.xhtml) 413[30.​1 Design of the Program
    Code and Naming Conventions](474412_1_En_30_Chapter.xhtml#Sec1) 414[30.​2 Comments](474412_1_En_30_Chapter.xhtml#Sec2)
    416[30.​3 Summary](474412_1_En_30_Chapter.xhtml#Sec3) 417[31 Variables &​ Objects:​
    How Do I Store Data to Work With?​](474412_1_En_31_Chapter.xhtml) 419[31.​1 Declaration
    of Variables](474412_1_En_31_Chapter.xhtml#Sec1) 420[31.​2 Elementary Data Types](474412_1_En_31_Chapter.xhtml#Sec2)
    421[31.​2.​1 Numbers (number)](474412_1_En_31_Chapter.xhtml#Sec3) 421[31.​2.​2
    Text (string)](474412_1_En_31_Chapter.xhtml#Sec4) 423[31.​2.​3 Logical Values
    (boolean)](474412_1_En_31_Chapter.xhtml#Sec5) 427[31.​2.​4 Special Types and Values
    (null, undefined, NaN)](474412_1_En_31_Chapter.xhtml#Sec6) 428[31.​3 Converting
    Variables](474412_1_En_31_Chapter.xhtml#Sec7) 430[31.​3.​1 Implicit Conversion](474412_1_En_31_Chapter.xhtml#Sec8)
    430[31.​4 Arrays](474412_1_En_31_Chapter.xhtml#Sec10) 433[31.​5 Objects](474412_1_En_31_Chapter.xhtml#Sec11)
    441[31.​5.​1 Object Orientation in JavaScript](474412_1_En_31_Chapter.xhtml#Sec12)
    441[31.​5.​2 Creating Objects Directly](474412_1_En_31_Chapter.xhtml#Sec13) 442[31.​5.​3
    Accessing Properties of Objects](474412_1_En_31_Chapter.xhtml#Sec14) 443[31.​5.​4
    Creating Objects Using the Object Constructor](474412_1_En_31_Chapter.xhtml#Sec15)
    444[31.​5.​5 Creating Objects Using Constructor Functions](474412_1_En_31_Chapter.xhtml#Sec16)
    444[31.​5.​6 JSON](474412_1_En_31_Chapter.xhtml#Sec17) 445[31.​6 Summary](474412_1_En_31_Chapter.xhtml#Sec18)
    446[31.​7 Solutions to the Exercises](474412_1_En_31_Chapter.xhtml#Sec19) 448[32
    User Interfaces:​ How Do I Input and Output Data?​](474412_1_En_32_Chapter.xhtml)
    451[32.​1 Overview of Input and Output in JavaScript](474412_1_En_32_Chapter.xhtml#Sec1)
    453[32.​2 Output Via the Console](474412_1_En_32_Chapter.xhtml#Sec2) 454[32.​3
    Inputs and Outputs Via Dialog Boxes](474412_1_En_32_Chapter.xhtml#Sec3) 457[32.​4
    Output to an HTML Document/​Web Page](474412_1_En_32_Chapter.xhtml#Sec4) 458[32.​4.​1
    Writing HTML Code into the Web Page](474412_1_En_32_Chapter.xhtml#Sec5) 458[32.​4.​2
    The Document Object Model (DOM)](474412_1_En_32_Chapter.xhtml#Sec6) 460[32.​4.​3
    Selecting DOM Nodes by Their Properties](474412_1_En_32_Chapter.xhtml#Sec7) 461[32.​4.​4
    Selecting DOM Nodes via the Hierarchical Structure of the Document](474412_1_En_32_Chapter.xhtml#Sec8)
    463[32.​4.​5 Changing HTML Elements](474412_1_En_32_Chapter.xhtml#Sec9) 466[32.​4.​6
    Adding and Deleting HTML Elements](474412_1_En_32_Chapter.xhtml#Sec10) 468[32.​5
    Input with Forms](474412_1_En_32_Chapter.xhtml#Sec11) 470[32.​5.​1 Forms in HTML](474412_1_En_32_Chapter.xhtml#Sec12)
    470[32.​5.​2 Accessing Forms from JavaScript](474412_1_En_32_Chapter.xhtml#Sec13)
    472[32.​6 Example:​ Simple Calculator](474412_1_En_32_Chapter.xhtml#Sec14) 476[32.​6.​1
    The Web Interface](474412_1_En_32_Chapter.xhtml#Sec15) 477[32.​6.​2 The CSS Design
    Instructions](474412_1_En_32_Chapter.xhtml#Sec16) 479[32.​6.​3 The JavaScript
    Code](474412_1_En_32_Chapter.xhtml#Sec17) 482[32.​7 Example:​ Color Picker](474412_1_En_32_Chapter.xhtml#Sec18)
    484[32.​7.​1 The Web Interface](474412_1_En_32_Chapter.xhtml#Sec19) 484[32.​7.​2
    The JavaScript Code](474412_1_En_32_Chapter.xhtml#Sec20) 486[32.​8 Summary](474412_1_En_32_Chapter.xhtml#Sec21)
    488[32.​9 Solutions to the Exercises](474412_1_En_32_Chapter.xhtml#Sec22) 490[33
    Functions &​ Methods:​ How Do I Work with Program Functions to Work with Data
    and Trigger Actions?​](474412_1_En_33_Chapter.xhtml) 493[33.​1 Working with Functions](474412_1_En_33_Chapter.xhtml#Sec1)
    494[33.​1.​1 Definition of Functions](474412_1_En_33_Chapter.xhtml#Sec2) 494[33.​1.​2
    Return Values](474412_1_En_33_Chapter.xhtml#Sec3) 499[33.​1.​3 Arguments and Parameters
    of Functions](474412_1_En_33_Chapter.xhtml#Sec4) 500[33.​1.​4 Scope of Variables
    in Functions](474412_1_En_33_Chapter.xhtml#Sec5) 504[33.​2 Working with Modules/​Libraries](474412_1_En_33_Chapter.xhtml#Sec6)
    506[33.​2.​1 Developing and Using Your Own Modules](474412_1_En_33_Chapter.xhtml#Sec7)
    506[33.​2.​2 Finding and Integrating External Modules/​Libraries](474412_1_En_33_Chapter.xhtml#Sec8)
    508[33.​3 Frameworks](474412_1_En_33_Chapter.xhtml#Sec9) 509[33.​4 Summary](474412_1_En_33_Chapter.xhtml#Sec10)
    510[33.​5 Solutions to the Exercises](474412_1_En_33_Chapter.xhtml#Sec11) 511[34
    Conditional Statements &​ Event Handling:​ How Do I Control the Program Flow and
    Make the Program React to User Actions and Other Events?​](474412_1_En_34_Chapter.xhtml)
    515[34.​1 If-Else Constructs](474412_1_En_34_Chapter.xhtml#Sec1) 516[34.​2 Switch-Case
    Constructs](474412_1_En_34_Chapter.xhtml#Sec2) 519[34.​3 Events](474412_1_En_34_Chapter.xhtml#Sec3)
    520[34.​4 Summary](474412_1_En_34_Chapter.xhtml#Sec4) 524[34.​5 Solutions to the
    Exercises](474412_1_En_34_Chapter.xhtml#Sec5) 525[35 Loops:​ How Do I Repeat Program
    Instructions Efficiently?​](474412_1_En_35_Chapter.xhtml) 527[35.​1 Counting Loops
    (for and for-of)](474412_1_En_35_Chapter.xhtml#Sec1) 528[35.​1.​1 for-Loops with
    Numerical Run Variables](474412_1_En_35_Chapter.xhtml#Sec2) 528[35.​1.​2 for-Loop
    with Object Run Variable (for…of)](474412_1_En_35_Chapter.xhtml#Sec3) 534[35.​2
    Conditional Loops (while and do-while)](474412_1_En_35_Chapter.xhtml#Sec4) 536[35.​3
    Summary](474412_1_En_35_Chapter.xhtml#Sec5) 537[35.​4 Solutions to the Exercises](474412_1_En_35_Chapter.xhtml#Sec6)
    538[36 Debugging &​ Error-Handling:​ How Do I Search for and Fix Errors in a Structured
    Way?​](474412_1_En_36_Chapter.xhtml) 543[36.​1 Error Handling at Runtime](474412_1_En_36_Chapter.xhtml#Sec1)
    544[36.​2 Troubleshooting During Development](474412_1_En_36_Chapter.xhtml#Sec2)
    546[36.​3 Summary](474412_1_En_36_Chapter.xhtml#Sec3) 550[Index](474412_1_En_BookBackmatter_OnlinePDF.xhtml#Ind1)553
  prefs: []
  type: TYPE_NORMAL
