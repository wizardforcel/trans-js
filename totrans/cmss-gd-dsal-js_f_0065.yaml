- en: Mean Average of Even Numbers
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: The following method accepts an array of numbers and returns the mean average
    of all its even numbers. How would we express its efficiency in terms of Big O?
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function` averageOfEvenNumbers(array) { |'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `let` sum = 0; |'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `let` countOfEvenNumbers = 0; |'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `for` (`const` number `of` array) { |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (number % 2 === 0) { |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | sum += number; |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | countOfEvenNumbers += 1; |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | }; |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (countOfEvenNumbers === 0) { `return` `null`; } |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` Math.floor(sum / countOfEvenNumbers); |'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
- en: Here’s how to break the code down to determine its efficiency.
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Remember that Big O is all about answering the key question: if there are `N`
    data elements, how many steps will the algorithm take? Therefore, the first thing
    we want to do is determine what the `N` data elements are.'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In this case, the algorithm is processing the array of numbers passed into this
    method. These, then, would be the `N` data elements, with `N` being the size of
    the array.
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Next, we have to determine how many steps the algorithm takes to process these
    `N` values.
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: We can see the guts of the algorithm is the loop that iterates over each number
    inside the array, so we’ll want to analyze that first. Since the loop iterates
    over each of the `N` elements, we know the algorithm takes at least `N` steps.
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Looking inside the loop, though, we can see that a varying number of steps
    occur within each round of the loop. For each and every number, we check whether
    the number is even. Then, if the number is even, we perform two more steps: we
    modify the `sum` variable, and we modify the `countOfEvenNumbers` variable. So
    we execute two more steps for even numbers than we do for odd numbers.'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: As you’ve learned, Big O focuses primarily on worst-case scenarios. In our case,
    the worst case is when all the numbers are even, in which case we perform three
    steps during each round of the loop. Because of this, we can say that for `N`
    data elements, our algorithm takes `3N` steps. That is, for each of the `N` numbers,
    our algorithm executes three steps.
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Now, our method performs a few other steps outside of the loop as well. Before
    the loop, we initialize the two variables and set them to `0`。Technically，这些是两步。After
    the loop, we perform another step: the division of `sum / countOfEvenNumbers`。Technically,
    then, our algorithm takes three extra steps in addition to the `3N` steps, so
    the total number of steps is `3N + 3`。'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: However, you also learned that Big O notation ignores constant numbers, so instead
    of calling our algorithm `O(3N + 3)`，we simply call it `O(N)`。
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
