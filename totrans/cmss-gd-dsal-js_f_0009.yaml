- en: What’s in This Book?
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: 'As you may have guessed, this book talks quite a bit about data structures
    and algorithms. More specifically, the book is laid out as follows:'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In Chapter 1, [`Why Data Structures Matter`](f_0013.xhtml#chp.understanding_data_structures)
    and Chapter 2, [`Why Algorithms Matter`](f_0024.xhtml#chp.binary_search), I explain
    what data structures and algorithms are and explore the concept of time complexity—which
    is used to determine how fast an algorithm is. In the process, I also talk a great
    deal about `arrays`, `sets`, and `binary search`.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In Chapter 3, [`O Yes! Big O Notation`](f_0031.xhtml#chp.big_o_notation), I
    unveil Big O notation and explain it in terms that are easy to understand. We
    use this notation throughout the book, so this chapter is pretty important.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In Chapter 4, [`Speeding Up Your Code with Big O`](f_0040.xhtml#chp.speeding_up),
    Chapter 5, [`Optimizing Code With and Without Big O`](f_0048.xhtml#chp.optimizing_big_o),
    and Chapter 6, [`Optimizing for Optimistic Scenarios`](f_0056.xhtml#chp.optimistic_scenarios),
    we delve further into Big O notation and use it to make our day-to-day code faster.
    Along the way, I cover various sorting algorithms, including `Bubble Sort`, `Selection
    Sort`, and `Insertion Sort`.
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In Chapter 7, [`Big O in Everyday Code`](f_0064.xhtml#chp.everyday_big_o), you
    apply all that you learned about Big O notation and analyze the efficiency of
    code from the real world.
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In Chapter 8, [`Blazing Fast Lookup with Hash Tables`](f_0076.xhtml#chp.hashes)
    and Chapter 9, [`Crafting Elegant Code with Stacks and Queues`](f_0087.xhtml#chp.stacks_queues),
    I discuss a few additional data structures, including `hash tables`, `stacks`,
    and `queues`. I show how they impact the speed and elegance of our code and how
    we can use them to solve real-world problems.
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Chapter 10, [`Recursively Recurse with Recursion`](f_0096.xhtml#chp.recursion)
    introduces recursion, an anchor concept in the world of computer science. We break
    it down in this chapter and see how it can be a great tool for certain situations.
    Chapter 11, [`Learning to Write in Recursive`](f_0104.xhtml#chp.learning_to_write_in_recursive)
    teaches you how to write recursive code, which can be confusing if you’re not
    familiar with it.
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Chapter 12, [`Dynamic Programming`](f_0112.xhtml#chp.dynamic_programming) shows
    you how to optimize recursive code and prevent it from spiraling out of control.
    And Chapter 13, [`Recursive Algorithms for Speed`](f_0121.xhtml#chp.recursive_speed)
    shows you how to use recursion as the foundation for turbo-fast algorithms like
    `Quicksort` and `Quickselect`, and then it takes your algorithm-development skills
    up a few notches.
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The following chapters, Chapter 14, [`Node-Based Data Structures`](f_0130.xhtml#chp.linked_lists),
    Chapter 15, [`Speeding Up All the Things with Binary Search Trees`](f_0143.xhtml#chp.binary_trees),
    Chapter 16, [`Keeping Your Priorities Straight with Heaps`](f_0153.xhtml#chp.heaps),
    Chapter 17, [`It Doesn’t Hurt to Trie`](f_0166.xhtml#chp.tries), and Chapter 18,
    [`Connecting Everything with Graphs`](f_0177.xhtml#chp.graphs), explore node-based
    data structures including the linked list, the binary tree, the heap, the trie,
    and the graph and show how each is ideal for various applications.
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Chapter 19, [`Dealing with Space Constraints`](f_0189.xhtml#chp.dealing_with_space_constraints)
    explores space complexity, which is important when programming for devices with
    relatively small amounts of disk space or when dealing with big data.
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The final chapter, Chapter 20, [`Techniques for Code Optimization`](f_0195.xhtml#chp.tips_for_code_optimization),
    walks you through various practical techniques for optimizing the efficiency of
    code and gives you new ideas for improving the code you write every day.
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
