["```jsjavascript\n\n// Example 1: Using setTimeout()\n\nconsole.log(\"Start\");\n\nsetTimeout(function() {\n\nconsole.log(\"Delayed execution after 2000ms\");\n\n}, 2000);\n\nconsole.log(\"End\");\n\n```", "```js\n\nStart\n\nEnd\n\nDelayed execution after 2000ms\n\n```", "```jsjavascript\n\n// Example 2: Using a callback function\n\nfunction fetchData(callback) {\n\nsetTimeout(function() {\n\nconst data = \"Data from the server\";\n\ncallback(data);\n\n}, 1000);\n\n}\n\nfunction processData(data) {\n\nconsole.log(\"Processed data:\", data);\n\n}\n\nfetchData(processData);\n\n```", "```jsjavascript\n\n// Example 3: Callback hell\n\nfunction stepOne(callback) {\n\nsetTimeout(function() {\n\nconsole.log(\"Step One completed\");\n\ncallback();\n\n}, 1000);\n\n}\n\nfunction stepTwo(callback) {\n\nsetTimeout(function() {\n\nconsole.log(\"Step Two completed\");\n\ncallback();\n\n}, 500);\n\n}\n\nfunction stepThree(callback) {\n\nsetTimeout(function() {\n\nconsole.log(\"Step Three completed\");\n\ncallback();\n\n}, 800);\n\n}\n\nstepOne(function() {\n\nstepTwo(function() {\n\nstepThree(function() {\n\nconsole.log(\"All steps completed\");\n\n});\n\n});\n\n});\n\n```", "```jsjavascript\n\n// Example 4: Creating a promise\n\nconst fetchData = new Promise(function(resolve, reject) {\n\nsetTimeout(function() {\n\nconst data = \"Data from the server\";\n\nresolve(data);\n\n}, 1000);\n\n});\n\nfetchData.then(function(data) {\n\nconsole.log(\"Fetched data:\", data);\n\n});\n\n```", "```jsjavascript\n\n// Example 5: Handling errors with promises\n\nconst fetchData = new Promise(function(resolve, reject) {\n\nsetTimeout(function() {\n\nconst error = \"Error: Failed to fetch data\";\n\nreject(error);\n\n}, 1000);\n\n});\n\nfetchData\n\n.then(function(data) {\n\nconsole.log(\"Fetched data:\", data);\n\n})\n\n.catch(function(error) {\n\nconsole.log(\"Error:\", error);\n\n});\n\n```", "```jsjavascript\n\n// Example 6: Chaining promises\n\nfunction stepOne() {\n\nreturn new Promise(function(resolve) {\n\nsetTimeout(function() {\n\nconsole.log(\"Step One completed\");\n\nresolve(\"Data from Step One\");\n\n}, 1000);\n\n});\n\n}\n\nfunction stepTwo(data) {\n\nreturn new Promise(function(resolve) {\n\nsetTimeout(function() {\n\nconsole.log(\"Step Two completed\");\n\nresolve(data + \" and Data from Step Two\");\n\n}, 500);\n\n});\n\n}\n\nfunction stepThree(data) {\n\nreturn new Promise(function(resolve) {\n\nsetTimeout(function() {\n\nconsole.log(\"Step Three completed\");\n\nresolve(data + \" and Data from Step Three\");\n\n}, 800);\n\n});\n\n}\n\nstepOne()\n\n.then(stepTwo)\n\n.then(stepThree)\n\n.then(function(result) {\n\nconsole.log(\"Result:\", result);\n\n});\n\n```", "```jsjavascript\n\n// Example 7: Using async/await\n\nfunction fetchData() {\n\nreturn new Promise(function(resolve) {\n\nsetTimeout(function() {\n\nconst data = \"Data from the server\";\n\nresolve(data);\n\n}, 1000);\n\n});\n\n}\n\nasync function getData() {\n\ntry {\n\nconst data = await fetchData();\n\nconsole.log(\"Fetched data:\", data);\n\n} catch (error) {\n\nconsole.log(\"Error:\", error);\n\n}\n\n}\n\ngetData();\n\n```", "```jsjavascript\n\n// Example 8: Error handling with async/await\n\nfunction fetchData() {\n\nreturn new Promise(function(resolve, reject) {\n\nsetTimeout(function() {\n\nconst error = \"Error: Failed to fetch data\";\n\nreject(error);\n\n}, 1000);\n\n});\n\n}\n\nasync function getData() {\n\ntry {\n\nconst data = await fetchData();\n\nconsole.log(\"Fetched data:\", data);\n\n} catch (error) {\n\nconsole.log(\"Error:\", error);\n\n}\n\n}\n\ngetData();\n\n```"]