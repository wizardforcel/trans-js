- en: '`Chapter 2: Decoding C: The Ancestor of Modern Languages`'
  id: totrans-0
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: '`第2章：解码C语言：现代语言的祖先`'
- en: '`2.1 The Birth and Philosophy of C`'
  id: totrans-1
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`2.1 C语言的诞生与哲学`'
- en: '`The C programming language, often referred to as the “mother of all programming
    languages,” has a rich history and a significant impact on the development of
    modern programming languages. Created by Dennis Ritchie at Bell Labs in the early
    1970s, C was designed with a specific philosophy in mind, which has shaped its
    features and principles.`'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`C编程语言，常被称为“所有编程语言的母亲”，具有丰富的历史，并对现代编程语言的发展产生了重大影响。它由Dennis Ritchie在1970年代初期于贝尔实验室开发，C语言的设计有着特定的哲学思想，这些思想塑造了其特性和原则。`'
- en: '`Philosophy of C:`'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`C语言哲学：`'
- en: '`C was developed with a set of fundamental principles and goals that continue
    to influence programming languages today:`'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`C语言是基于一系列基本原则和目标开发的，这些原则和目标至今仍在影响编程语言的设计：`'
- en: '`Portability: C was designed to be highly portable, allowing code written in
    C to run on different hardware platforms with minimal modifications. This portability
    was achieved by abstracting hardware details and providing a standard set of data
    types.`'
  id: totrans-5
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '`可移植性：C语言的设计目标之一是高度的可移植性，允许用C编写的代码在不同的硬件平台上运行，只需最小的修改。通过抽象硬件细节并提供一组标准的数据类型，C语言实现了这种可移植性。`'
- en: '`Efficiency: C prioritizes runtime efficiency and provides low-level control
    over hardware resources. This makes it well-suited for systems programming, where
    performance is crucial.`'
  id: totrans-6
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '`效率：C语言优先考虑运行时效率，提供对硬件资源的低级控制。这使得C非常适合系统编程，在系统编程中，性能至关重要。`'
- en: '`Minimalism: C follows a philosophy of minimalism, providing a small set of
    simple and powerful features. It avoids unnecessary complexity and features, which
    contributes to its simplicity and ease of learning.`'
  id: totrans-7
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '`简约主义：C语言遵循简约主义哲学，提供了一小组简单而强大的特性。它避免了不必要的复杂性和多余的特性，这也促成了C语言的简单性和易学性。`'
- en: '`Close to Hardware: C provides features for direct memory manipulation, pointer
    arithmetic, and low-level control over hardware. This closeness to the hardware
    allows developers to write efficient code but also demands responsibility in managing
    memory and resources.`'
  id: totrans-8
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '`接近硬件：C语言提供了直接操作内存、指针运算和低级硬件控制的特性。与硬件的紧密关系使得开发者能够编写高效的代码，但同时也要求开发者在管理内存和资源时承担更大的责任。`'
- en: '`Sample C Code:`'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`示例C代码：`'
- en: '`Here’s a simple “Hello, World!” program in C:`'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`这是一个简单的“Hello, World!” C语言程序：`'
- en: '`#include <stdio.h>`'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`#include <stdio.h>`'
- en: '`int main() {`'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int main() {`'
- en: '`printf("Hello, World!\n");`'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`printf("Hello, World!\n");`'
- en: '`return 0;`'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return 0;`'
- en: '`}`'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`In this code, we include the standard input/output library (<stdio.h>) and
    define a main function, which is the entry point of a C program. The printf function
    is used to print the message to the standard output.`'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`在这段代码中，我们包含了标准输入/输出库（<stdio.h>），并定义了一个主函数，这是C程序的入口点。printf函数用于将信息输出到标准输出。`'
- en: '`Influence on Modern Languages:`'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`对现代语言的影响：`'
- en: '`C’s philosophy and design principles have had a profound impact on the development
    of modern programming languages:`'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`C语言的哲学和设计原则对现代编程语言的开发产生了深远的影响：`'
- en: '`• C++: C++ was developed as an extension of C, adding object-oriented features
    while preserving C’s low-level capabilities.`'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`• C++：C++作为C语言的扩展，增加了面向对象的特性，同时保留了C语言的低级能力。`'
- en: '`• Objective-C: This language combines C with object-oriented programming and
    was used in Apple’s macOS and iOS development.`'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`• Objective-C：这门语言将C与面向对象编程结合起来，曾用于苹果的macOS和iOS开发。`'
- en: '`• C#: Developed by Microsoft, C# draws heavily from C++ and C, with a focus
    on simplicity and type safety.`'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`• C#：由微软开发，C#深受C++和C语言的影响，重点关注简洁性和类型安全。`'
- en: '`• Java: Java shares C’s portability goals and simplicity in syntax, making
    it accessible to a wide range of developers.`'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`• Java：Java与C语言共享可移植性目标以及简洁的语法，使其对广泛的开发者群体都能接触。`'
- en: '`• Python: While Python is a high-level language, its design principles of
    simplicity and readability are inspired by C.`'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`• Python：虽然Python是一种高级语言，但它的简洁性和可读性设计原则受到C语言的启发。`'
- en: '`Understanding the birth and philosophy of C is essential for grasping the
    foundations of modern programming languages and appreciating the design decisions
    that have shaped the software development landscape.`'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`理解C语言的诞生与哲学对于掌握现代编程语言的基础至关重要，同时也有助于理解塑造软件开发领域的设计决策。`'
- en: '`***`'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`***`'
- en: '`2.2 Structure of a C Program`'
  id: totrans-26
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`2.2 C程序的结构`'
- en: C programs have a distinct structure that includes various elements and conventions.
    Understanding this structure is crucial when working with C, as it dictates how
    code is organized and executed. In this section, we’ll explore the essential components
    of a C program and their roles.
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: C程序有一个独特的结构，包含多个元素和约定。理解这一结构对于使用C语言至关重要，因为它决定了代码如何组织和执行。在本节中，我们将探讨C程序的基本组成部分及其作用。
- en: '1\. Preprocessor Directives: C programs often begin with preprocessor directives.
    These are instructions to the preprocessor, which is a program that processes
    the source code before actual compilation. Preprocessor directives start with
    the `#` symbol and include commands like `#include` for including header files
    and `#define` for defining macros.'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 1\. 预处理指令：C程序通常以预处理指令开始。这些是给预处理器的指令，预处理器是一个在实际编译之前处理源代码的程序。预处理指令以`#`符号开始，包括诸如`#include`（包含头文件）和`#define`（定义宏）等命令。
- en: '`#include <stdio.h>`'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`#include <stdio.h>`'
- en: '`#define MAX 100`'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`#define MAX 100`'
- en: '2\. Function Declarations: The main structure of a C program typically includes
    function declarations. A C program must have at least one function named `main`，which
    serves as the entry point of the program. Functions are declared with their return
    type, name, and parameters.'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 2\. 函数声明：C程序的主要结构通常包括函数声明。C程序必须至少包含一个名为`main`的函数，它作为程序的入口点。函数声明时指定返回类型、名称和参数。
- en: '`int add(int a, int b);`'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int add(int a, int b);`'
- en: '`void printMessage();`'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`void printMessage();`'
- en: '3\. The `main` Function: The `main` function is the starting point of a C program.
    It contains the program’s executable code. The `main` function does not take any
    parameters in its basic form and returns an integer, which is often used as an
    exit code.'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 3\. `main`函数：`main`函数是C程序的起始点，包含程序的可执行代码。`main`函数在其基本形式中不接收任何参数，并返回一个整数，通常用作退出码。
- en: '`int main() {`'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int main() {`'
- en: '`// Program code goes here`'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 程序代码在此处`'
- en: '`return 0;  // Exit with status code 0`'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return 0;  // 以状态码0退出`'
- en: '`}`'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '4\. Statements and Expressions: Within the `main` function or other user-defined
    functions, you write statements and expressions to perform tasks. Statements are
    terminated with a semicolon, and expressions evaluate to values.'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 4\. 语句和表达式：在`main`函数或其他用户定义的函数中，你编写语句和表达式来执行任务。语句以分号结束，表达式则求值为某个值。
- en: '`int sum = add(5, 3);  // Expression`'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int sum = add(5, 3);  // 表达式`'
- en: '`printf("The sum is %d\n", sum);  // Statement`'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`printf("The sum is %d\n", sum);  // 语句`'
- en: '5\. Function Definitions: Functions declared earlier must be defined somewhere
    in the program. Function definitions include the actual implementation of the
    function, including its logic and behavior.'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 5\. 函数定义：先前声明的函数必须在程序的某个地方进行定义。函数定义包括函数的实际实现，其中包含函数的逻辑和行为。
- en: '`int add(int a, int b) {`'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int add(int a, int b) {`'
- en: '`return a + b;`'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return a + b;`'
- en: '`}`'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`void printMessage() {`'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`void printMessage() {`'
- en: '`printf("Hello, World!\n");`'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`printf("Hello, World!\n");`'
- en: '`}`'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '6\. Standard Input/Output: C programs often use the standard input and output
    functions provided by the `<stdio.h>` library. These functions, like `printf`
    and `scanf`，enable interaction with the user through the console.'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 6\. 标准输入/输出：C程序通常使用`<stdio.h>`库提供的标准输入和输出函数。这些函数，如`printf`和`scanf`，使得程序可以通过控制台与用户进行交互。
- en: '`#include <stdio.h>`'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`#include <stdio.h>`'
- en: '`int main() {`'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int main() {`'
- en: '`int num;`'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int num;`'
- en: '`printf("Enter a number: ");`'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`printf("Enter a number: ");`'
- en: '`scanf("%d", &num);`'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`scanf("%d", &num);`'
- en: '`printf("You entered: %d\n", num);`'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`printf("You entered: %d\n", num);`'
- en: '`return 0;`'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return 0;`'
- en: '`}`'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '7\. Comments: Comments in C are used to annotate code for documentation or
    explanation purposes. Single-line comments begin with `//`，and multi-line comments
    are enclosed between `/*` and `*/`.'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 7\. 注释：C语言中的注释用于注释代码以提供文档或解释。单行注释以`//`开头，多行注释被`/*`和`*/`包围。
- en: '`// This is a single-line comment`'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 这是一个单行注释`'
- en: /*
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: /*
- en: This is a multi-line comment
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是一个多行注释
- en: spanning multiple lines.
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 跨越多行。
- en: '*/'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '*/'
- en: '8\. Variables and Data Types: C supports various data types like `int`，`float`，`char`，and
    user-defined structures. Variables are declared with their data type, and they
    hold values during program execution.'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 8\. 变量和数据类型：C语言支持多种数据类型，如`int`、`float`、`char`以及用户自定义的结构体。变量使用其数据类型声明，并在程序执行期间保存值。
- en: '`int age = 25;`'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int age = 25;`'
- en: '`float price = 12.99;`'
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`float price = 12.99;`'
- en: '`char grade = ''A'';`'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`char grade = ''A'';`'
- en: Understanding the structure of a `C` program is fundamental for writing and
    reading `C` code. As programs become more complex, maintaining a clear and organized
    structure becomes increasingly important for code readability and maintainability.
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 理解`C`程序的结构对于编写和阅读`C`代码至关重要。随着程序变得越来越复杂，保持清晰和有组织的结构对于代码的可读性和可维护性变得愈加重要。
- en: '`* * *`'
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`* * *`'
- en: '`2.3 Memory Management in C`'
  id: totrans-70
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`2.3 C中的内存管理`'
- en: '`Memory management` is a critical aspect of programming in `C`, as it provides
    control over the allocation and deallocation of memory resources. `C` allows for
    both static and dynamic memory management, giving developers flexibility but also
    requiring responsibility in managing memory efficiently. In this section, we’ll
    explore memory management in `C` and its various aspects.'
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`内存管理`是`C`语言编程中的一个关键方面，因为它提供了对内存资源分配和释放的控制。`C`语言允许静态和动态内存管理，给开发人员带来灵活性，但也要求他们在有效管理内存方面承担责任。在本节中，我们将探讨`C`语言中的内存管理及其各个方面。'
- en: '`1. Static Memory Allocation:`'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`1. 静态内存分配：`'
- en: In `C`, you can allocate memory for variables and arrays at compile-time, which
    is known as static memory allocation. Memory for these variables is allocated
    on the stack or in the data segment of the program.
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在`C`中，你可以在编译时为变量和数组分配内存，这被称为静态内存分配。这些变量的内存在栈上或程序的数据段中分配。
- en: '`int age; // Static memory allocation for an integer`'
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int age; // 静态内存分配一个整数`'
- en: '`2. Dynamic Memory Allocation:`'
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`2. 动态内存分配：`'
- en: Dynamic memory allocation in `C` is achieved using functions like `malloc`,
    `calloc`, and `realloc` from the `<stdlib.h>` library. This allows you to allocate
    memory at runtime and is particularly useful for creating data structures like
    arrays and linked lists.
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在`C`中，动态内存分配是通过使用`<stdlib.h>`库中的`malloc`、`calloc`和`realloc`等函数实现的。这允许你在运行时分配内存，对于创建数组和链表等数据结构非常有用。
- en: '`int *numbers; // Declare a pointer`'
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int *numbers; // 声明一个指针`'
- en: '`numbers = (int *)malloc(5 * sizeof(int)); // Dynamic memory allocation`'
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`numbers = (int *)malloc(5 * sizeof(int)); // 动态内存分配`'
- en: '`3. Memory Deallocation:`'
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`3. 内存释放：`'
- en: When you allocate memory dynamically, it’s essential to release that memory
    when it’s no longer needed to prevent memory leaks. The `free` function is used
    to deallocate memory previously allocated with `malloc`, `calloc`, or `realloc`.
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当你动态分配内存时，必须在不再需要该内存时释放它，以防止内存泄漏。`free`函数用于释放之前使用`malloc`、`calloc`或`realloc`分配的内存。
- en: '`free(numbers); // Deallocate dynamically allocated memory`'
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`free(numbers); // 释放动态分配的内存`'
- en: '`4. Pointers and Memory Access:`'
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`4. 指针和内存访问：`'
- en: Pointers are a fundamental concept in `C`, allowing you to access and manipulate
    memory directly. However, improper use of pointers can lead to memory-related
    issues like segmentation faults and memory leaks.
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 指针是`C`中的一个基本概念，允许你直接访问和操作内存。然而，不当使用指针可能导致与内存相关的问题，如段错误和内存泄漏。
- en: '`int *ptr; // Declare a pointer`'
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int *ptr; // 声明一个指针`'
- en: '`int value = 42;`'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int value = 42;`'
- en: '`ptr = &value; // Assign the address of ''value'' to ''ptr''`'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`ptr = &value; // 将''value''的地址赋给''ptr''`'
- en: '`5. Stack vs. Heap:`'
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`5. 栈与堆：`'
- en: In `C`, memory can be allocated on the stack or the heap. Stack memory is automatically
    managed and is used for function call frames and local variables. Heap memory
    is explicitly managed and is suitable for dynamically allocated data.
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在`C`语言中，内存可以分配在栈上或堆上。栈内存是自动管理的，用于函数调用栈帧和局部变量。堆内存是显式管理的，适用于动态分配的数据。
- en: '`6. Memory Safety:`'
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`6. 内存安全：`'
- en: '`C` does not provide built-in memory safety features like bounds checking,
    which means developers must be cautious to avoid buffer overflows and other memory-related
    errors.'
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`C`语言没有提供像边界检查这样的内存安全特性，这意味着开发人员必须小心避免缓冲区溢出和其他与内存相关的错误。'
- en: '`7. Memory Leaks:`'
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`7. 内存泄漏：`'
- en: A memory leak occurs when dynamically allocated memory is not properly deallocated.
    Detecting and fixing memory leaks is essential for maintaining a stable and efficient
    program.
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 内存泄漏发生在动态分配的内存未被正确释放时。检测和修复内存泄漏对于保持程序的稳定性和效率至关重要。
- en: '`8. Memory Alignment:`'
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`8. 内存对齐：`'
- en: '`Memory alignment` ensures that data is stored in memory at addresses that
    are multiples of specific values. Proper alignment can improve memory access speed
    and efficiency.'
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`内存对齐`确保数据存储在内存中，地址是特定值的倍数。适当的对齐可以提高内存访问速度和效率。'
- en: '`struct Data {`'
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`struct Data {`'
- en: '`int x;`'
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int x;`'
- en: '`double y;`'
  id: totrans-97
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`double y;`'
- en: '`};`'
  id: totrans-98
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`};`'
- en: '`int main() {`'
  id: totrans-99
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int main() {`'
- en: '`struct Data data; // Properly aligned structure`'
  id: totrans-100
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`struct Data data; // 正确对齐的结构体`'
- en: '`// ...`'
  id: totrans-101
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// ...`'
- en: '`return 0;`'
  id: totrans-102
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return 0;`'
- en: '`}`'
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`9. Memory Management Best Practices:`'
  id: totrans-104
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`9. 内存管理最佳实践：`'
- en: 为确保`C`中的高效和安全内存管理，请考虑以下最佳实践：
  id: totrans-105
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为确保`C`中的高效和安全内存管理，请考虑以下最佳实践：
- en: •   始终在不再需要时释放动态分配的内存。
  id: totrans-106
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: •   始终在不再需要时释放动态分配的内存。
- en: •   注意缓冲区大小和数组边界，以防止缓冲区溢出。
  id: totrans-107
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: •   注意缓冲区大小和数组边界，以防止缓冲区溢出。
- en: •   负责任地使用指针，以避免与内存相关的错误。
  id: totrans-108
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: •   负责任地使用指针，以避免与内存相关的错误。
- en: •   考虑使用链表和数组等数据结构来高效管理动态内存。
  id: totrans-109
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: •   考虑使用链表和数组等数据结构来高效管理动态内存。
- en: 在`C`中，内存管理需要深入理解语言的内存模型和仔细的编码实践。虽然它提供了对内存的精细控制，但也要求开发人员承担避免常见陷阱和与内存分配与释放相关的问题的责任。
  id: totrans-110
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在`C`中，内存管理需要深入理解语言的内存模型和仔细的编码实践。虽然它提供了对内存的精细控制，但也要求开发人员承担避免常见陷阱和与内存分配与释放相关的问题的责任。
- en: '* * *'
  id: totrans-111
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '* * *'
- en: 2.4 `C`对操作系统和软件的贡献
  id: totrans-112
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 2.4 `C`对操作系统和软件的贡献
- en: '`C`编程语言在操作系统和各种软件应用的发展中发挥了关键作用。其低级控制和可移植性的结合使其成为构建稳健高效系统的首选语言。在本节中，我们将探讨`C`如何促进操作系统和各类软件领域的创建。'
  id: totrans-113
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`C`编程语言在操作系统和各种软件应用的发展中发挥了关键作用。其低级控制和可移植性的结合使其成为构建稳健高效系统的首选语言。在本节中，我们将探讨`C`如何促进操作系统和各类软件领域的创建。'
- en: 1. 操作系统：
  id: totrans-114
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 1. 操作系统：
- en: '`C`近硬件的能力和可移植性使其成为开发操作系统（`OS`）的理想语言。一些最著名的操作系统，包括`Unix`、`Linux`和`Windows NT`内核，主要用`C`编写。`C`有效管理硬件资源的能力和提供高度控制对于操作系统开发至关重要。'
  id: totrans-115
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`C`近硬件的能力和可移植性使其成为开发操作系统（`OS`）的理想语言。一些最著名的操作系统，包括`Unix`、`Linux`和`Windows NT`内核，主要用`C`编写。`C`有效管理硬件资源的能力和提供高度控制对于操作系统开发至关重要。'
- en: 2. 系统软件：
  id: totrans-116
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 2. 系统软件：
- en: 超越操作系统，`C`被广泛用于开发系统软件，如设备驱动程序、编译器、汇编器和链接器。系统软件直接与硬件接口，需要高效且可移植，使得`C`成为一个优秀的选择。
  id: totrans-117
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 超越操作系统，`C`被广泛用于开发系统软件，如设备驱动程序、编译器、汇编器和链接器。系统软件直接与硬件接口，需要高效且可移植，使得`C`成为一个优秀的选择。
- en: '`#include <stdio.h>`'
  id: totrans-118
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`#include <stdio.h>`'
- en: '`int main() {`'
  id: totrans-119
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int main() {`'
- en: '`printf("Hello, System Software!\n");`'
  id: totrans-120
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`printf("你好，系统软件！\n");`'
- en: '`return 0;`'
  id: totrans-121
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return 0;`'
- en: '`}`'
  id: totrans-122
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: 3. 嵌入式系统：
  id: totrans-123
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 3. 嵌入式系统：
- en: '`C`的高效性和低级控制使其适合嵌入式系统开发。嵌入式系统存在于各种应用中，包括汽车控制单元、医疗设备和消费电子产品。'
  id: totrans-124
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`C`的高效性和低级控制使其适合嵌入式系统开发。嵌入式系统存在于各种应用中，包括汽车控制单元、医疗设备和消费电子产品。'
- en: '`void controlMotor(int speed) {`'
  id: totrans-125
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`void controlMotor(int speed) {`'
- en: '`// Control motor speed in an embedded system`'
  id: totrans-126
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 控制嵌入式系统中的电机速度`'
- en: '`}`'
  id: totrans-127
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: 4. 网络软件：
  id: totrans-128
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 4. 网络软件：
- en: 网络软件，包括网络协议和服务器，通常依赖`C`的性能和可移植性。`C`的套接字编程库允许开发人员创建跨不同平台高效运行的网络应用程序。
  id: totrans-129
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 网络软件，包括网络协议和服务器，通常依赖`C`的性能和可移植性。`C`的套接字编程库允许开发人员创建跨不同平台高效运行的网络应用程序。
- en: '`#include <stdio.h>`'
  id: totrans-130
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`#include <stdio.h>`'
- en: '`#include <stdlib.h>`'
  id: totrans-131
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`#include <stdlib.h>`'
- en: '`#include <sys/socket.h>`'
  id: totrans-132
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`#include <sys/socket.h>`'
- en: '`#include <netinet/in.h>`'
  id: totrans-133
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`#include <netinet/in.h>`'
- en: '`int main() {`'
  id: totrans-134
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int main() {`'
- en: '`// Networking code here`'
  id: totrans-135
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 网络代码在这里`'
- en: '`return 0;`'
  id: totrans-136
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return 0;`'
- en: '`}`'
  id: totrans-137
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: 5. 编译器和解释器：
  id: totrans-138
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 5. 编译器和解释器：
- en: '`C`具有自举特性，意味着`C`编译器和解释器通常是用`C`自身编写的。这一自举过程促成了许多`C`编译器的创建，如`GCC`（GNU编译器集合）和`Clang`。'
  id: totrans-139
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`C`具有自举特性，意味着`C`编译器和解释器通常是用`C`自身编写的。这一自举过程促成了许多`C`编译器的创建，如`GCC`（GNU编译器集合）和`Clang`。'
- en: '`int main() {`'
  id: totrans-140
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int main() {`'
- en: '`printf("This program was compiled by a C compiler written in C!\n");`'
  id: totrans-141
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`printf("这个程序是由一个用C编写的C编译器编译的！\n");`'
- en: '`return 0;`'
  id: totrans-142
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return 0;`'
- en: '`}`'
  id: totrans-143
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '6\. Scientific Computing:'
  id: totrans-144
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 6. 科学计算：
- en: C is employed in scientific computing for its computational efficiency. Libraries
    like `BLAS` (Basic Linear Algebra Subprograms) and `LAPACK` (Linear Algebra Package)
    are written in `C` and provide essential functions for numerical computations.
  id: totrans-145
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`C`被广泛应用于科学计算，因其计算效率高。像`BLAS`（基本线性代数子程序）和`LAPACK`（线性代数包）这样的库就是用`C`编写的，提供了数值计算所需的重要函数。'
- en: '`#include <stdio.h>`'
  id: totrans-146
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`#include <stdio.h>`'
- en: '`#include <math.h>`'
  id: totrans-147
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`#include <math.h>`'
- en: '`int main() {`'
  id: totrans-148
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int main() {`'
- en: '`double result = sqrt(25.0);  // Square root calculation`'
  id: totrans-149
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`double result = sqrt(25.0);  // 计算平方根`'
- en: '`printf("The square root of 25 is %f\n", result);`'
  id: totrans-150
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`printf("25的平方根是 %f\n", result);`'
- en: '`return 0;`'
  id: totrans-151
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return 0;`'
- en: '`}`'
  id: totrans-152
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '7\. Game Development:'
  id: totrans-153
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 7. 游戏开发：
- en: C and C++ are popular choices for developing video games due to their performance
    capabilities. Game engines like `Unreal Engine` and `Unity` use `C++` extensively,
    while game logic often utilizes `C`.
  id: totrans-154
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`C`和`C++`因其性能优势而广泛用于开发视频游戏。像`Unreal Engine`和`Unity`这样的游戏引擎广泛使用`C++`，而游戏逻辑通常使用`C`。'
- en: '`#include <stdio.h>`'
  id: totrans-155
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`#include <stdio.h>`'
- en: '`int main() {`'
  id: totrans-156
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int main() {`'
- en: '`// Game code here`'
  id: totrans-157
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 游戏代码在这里`'
- en: '`return 0;`'
  id: totrans-158
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return 0;`'
- en: '`}`'
  id: totrans-159
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '8\. Cross-Platform Development:'
  id: totrans-160
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 8. 跨平台开发：
- en: C’s portability allows for cross-platform development, enabling software to
    run on different operating systems and architectures with minimal modifications.
  id: totrans-161
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`C`的可移植性使得跨平台开发成为可能，软件能够在不同操作系统和架构上运行，且只需进行最小的修改。'
- en: The influence of `C` extends to various other domains, including database systems,
    security tools, and embedded control systems. Its longevity and adaptability have
    made it a cornerstone of modern software development, leaving a lasting impact
    on the technology landscape. Understanding `C`’s contributions to these domains
    is essential for appreciating its continued relevance and importance in the field
    of computer science.
  id: totrans-162
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`C`的影响力扩展到其他多个领域，包括数据库系统、安全工具和嵌入式控制系统。其持久性和适应性使其成为现代软件开发的基石，对技术领域产生了深远影响。理解`C`在这些领域的贡献对于认识其在计算机科学领域的持续相关性和重要性至关重要。'
- en: '* * *'
  id: totrans-163
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '* * *'
- en: 2.5 Limitations and Legacy of C
  id: totrans-164
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 2.5 `C`的局限性与遗产
- en: While C has been a groundbreaking and influential programming language, it is
    not without its limitations and challenges. In this section, we will explore some
    of the limitations of `C` and discuss its enduring legacy in the world of software
    development.
  id: totrans-165
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 虽然`C`是一种具有开创性且影响深远的编程语言，但它也有其局限性和挑战。在本节中，我们将探讨`C`的一些局限性，并讨论它在软件开发领域的持久遗产。
- en: '1\. Lack of Memory Safety: C’s low-level nature gives developers direct control
    over memory, but it also means there are no built-in safeguards against common
    memory-related errors like buffer overflows, null pointer dereferences, and memory
    leaks. Programmers must be diligent in managing memory to avoid these issues.'
  id: totrans-166
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 1\. 缺乏内存安全：`C`的低级特性使得开发者能够直接控制内存，但这也意味着没有内建的保护措施来防止常见的内存相关错误，如缓冲区溢出、空指针解引用和内存泄漏。程序员必须谨慎管理内存，以避免这些问题。
- en: '`char buffer[10];`'
  id: totrans-167
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`char buffer[10];`'
- en: '`strcpy(buffer, "This is a long string that can overflow the buffer.");`'
  id: totrans-168
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`strcpy(buffer, "这是一个可能会溢出缓冲区的长字符串。");`'
- en: '2\. Portability Challenges: While `C` is known for its portability, writing
    truly platform-independent code can still be challenging. Differences in hardware
    architectures, compilers, and operating systems can introduce subtle issues.'
  id: totrans-169
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 2\. 可移植性挑战：虽然`C`因其可移植性而闻名，但编写真正平台无关的代码仍然充满挑战。硬件架构、编译器和操作系统的差异可能会引入微妙的问题。
- en: '3\. Limited Standard Library: C’s standard library provides fundamental functionality,
    but it lacks the extensive libraries found in modern languages like Python or
    Java. Developers often need to rely on third-party libraries for more specialized
    tasks.'
  id: totrans-170
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 3\. 标准库有限：`C`的标准库提供了基本功能，但缺乏现代语言（如Python或Java）中的大量扩展库。开发者通常需要依赖第三方库来处理更专业的任务。
- en: '4\. Verbosity: C can be verbose compared to modern high-level languages. For
    example, string manipulation or dynamic memory allocation can require more lines
    of code and be error-prone.'
  id: totrans-171
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 4\. 冗长：与现代高级语言相比，`C`可能显得冗长。例如，字符串操作或动态内存分配可能需要更多的代码行，且容易出错。
- en: '`// Concatenate two strings in C`'
  id: totrans-172
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 在C中连接两个字符串`'
- en: '`char str1[20] = "Hello, ";`'
  id: totrans-173
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`char str1[20] = "Hello, ";`'
- en: '`char str2[10] = "world!";`'
  id: totrans-174
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`char str2[10] = "world!";`'
- en: '`strcat(str1, str2);`'
  id: totrans-175
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`strcat(str1, str2);`'
- en: '5\. Lack of Object-Oriented Features: `C` does not provide native support for
    object-oriented programming (`OOP`) concepts like classes and inheritance, making
    it less suitable for large-scale software projects that benefit from `OOP` principles.'
  id: totrans-176
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 5\. 缺乏面向对象特性：`C`不提供对面向对象编程（`OOP`）概念的原生支持，如类和继承，这使得它不太适合那些可以从`OOP`原则中受益的大型软件项目。
- en: '6\. Limited Concurrency Support: `C` lacks built-in support for modern concurrency
    and parallelism. While it’s possible to implement multithreading and multiprocessing,
    it can be complex and error-prone.'
  id: totrans-177
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 6\. 并发支持有限：`C`缺乏对现代并发和并行处理的内建支持。虽然可以实现多线程和多进程，但这可能会变得复杂且容易出错。
- en: '7\. Complexity in Error Handling: Error handling in `C` often involves checking
    return values or error codes, which can lead to code clutter and decreased readability.'
  id: totrans-178
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 7\. 错误处理的复杂性：`C`中的错误处理通常涉及检查返回值或错误代码，这可能导致代码臃肿并降低可读性。
- en: '`FILE  *file = fopen("example.txt",  "r");`'
  id: totrans-179
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`FILE *file = fopen("example.txt", "r");`'
- en: '`if  (file == NULL)  {`'
  id: totrans-180
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`if (file == NULL) {`'
- en: '`perror("Error opening file");`'
  id: totrans-181
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`perror("打开文件时出错");`'
- en: '`return  1;`'
  id: totrans-182
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return 1;`'
- en: '`}`'
  id: totrans-183
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '8\. Legacy Codebase Maintenance: Legacy `C` codebases can be challenging to
    maintain and extend due to the absence of modern programming constructs. Refactoring
    or adding new features may require significant effort.'
  id: totrans-184
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 8\. 遗留代码库的维护：遗留的`C`代码库由于缺乏现代编程构造，可能很难维护和扩展。重构或添加新功能可能需要大量的努力。
- en: Despite these limitations, `C`’s legacy in the world of software development
    remains strong. It continues to be a foundational language and serves as the basis
    for many other programming languages, including `C++`, `Objective-C`, and `Rust`.
    `C`’s low-level control and efficiency make it indispensable in areas such as
    embedded systems, operating system development, and systems programming.
  id: totrans-185
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 尽管存在这些局限性，`C`在软件开发领域的遗产依然深远。它仍然是一个基础性语言，并且是许多其他编程语言的基础，包括`C++`、`Objective-C`和`Rust`。`C`的低级控制和高效性使其在嵌入式系统、操作系统开发和系统编程等领域不可或缺。
- en: Moreover, C’s limitations have inspired the development of safer and more modern
    languages that address these issues. For example, `Rust` focuses on memory safety
    and concurrency without sacrificing performance, while `C++` introduces object-oriented
    features on top of `C`’s foundations.
  id: totrans-186
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 此外，`C`的局限性促使了更安全、更现代的编程语言的开发，这些语言解决了这些问题。例如，`Rust`专注于内存安全和并发处理，而不会牺牲性能，而`C++`则在`C`的基础上引入了面向对象特性。
- en: In conclusion, `C`’s limitations are balanced by its enduring legacy and contributions
    to the field of programming. Its importance in the history of software development
    cannot be understated, and its principles continue to influence the design of
    new languages and systems. Understanding both its strengths and weaknesses is
    essential for developers working in a variety of software domains.
  id: totrans-187
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 总之，`C`语言的局限性与其持久的遗产和对编程领域的贡献相平衡。它在软件开发历史中的重要性不可低估，且其原理持续影响着新语言和系统的设计。理解其优缺点对于在各种软件领域工作的开发者至关重要。
- en: '* * *'
  id: totrans-188
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '* * *'
