- en: Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following exercises provide you with the opportunity to practice with speeding
    up your code. The solutions to these exercises are found in the section [​*Chapter
    4*​](f_0209.xhtml#speeding.up.your.code.with.big.o.solutions).
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the question marks in the following table to describe how many steps
    occur for a given number of data elements across various types of Big O:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| N Elements | O(N) | O(log N) | O(N²) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 100 | 100 | ? | ? |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 2,000 | ? | ? | ? |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: If we have an O(N²) algorithm that processes an array and find that it takes
    256 steps, what is the size of the array?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use Big O notation to describe the time complexity of the following function.
    It finds the greatest product of any pair of two numbers within a given array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ​  | ​**function**​ greatestProduct(array) { |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**if**​ (array.length < 2) { ​**return**​ ​**null**​; } |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  |  |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**let**​ greatestProductSoFar = array[0] * array[1]; |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  |  |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**for**​ (​**const**​ [indexI, valueI] ​**of**​ array.entries()) {
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**for**​ (​**const**​ [indexJ, valueJ] ​**of**​ array.entries()) {
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**if**​ (indexI !== indexJ && valueI * valueJ > greatestProductSoFar)
    { |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | greatestProductSoFar = valueI * valueJ; |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | } |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | } |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | } |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  |  |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**return**​ greatestProductSoFar; |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | } |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: 'This function finds the greatest single number within an array, but it has
    an efficiency of O(N²). Rewrite the function so that it becomes a speedy O(N):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ​  | ​**function**​ greatestNumber(array) { |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**let**​ isITheGreatest; |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**if**​ (array.length === 0) { ​**return**​ ​**null**​; } |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  |  |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**for**​ (​**const**​ i ​**of**​ array) { |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​*// Assume for now that i is the greatest:*​ |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | isITheGreatest = ​**true**​; |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  |  |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**for**​ (​**const**​ j ​**of**​ array) { |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​*// If we find another value that is greater than i,*​ |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​*// then i is not the greatest:*​ |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**if**​ (j > i) { isITheGreatest = ​**false**​; } |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | } |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​*// If, by the time we checked all the other numbers, i is still the*​
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​*// greatest, it means that i is the greatest number:*​ |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**if**​ (isITheGreatest) { |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**return**​ i; |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | } |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | } |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | } |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Copyright © 2024, The Pragmatic Bookshelf.
  prefs: []
  type: TYPE_NORMAL
