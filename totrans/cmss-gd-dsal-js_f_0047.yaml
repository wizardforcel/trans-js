- en: Exercises
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 练习
- en: The following exercises provide you with the opportunity to practice with speeding
    up your code. The solutions to these exercises are found in the section [​*Chapter
    4*](f_0209.xhtml#speeding.up.your.code.with.big.o.solutions).
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下练习提供了一个机会，让你练习加快代码的速度。这些练习的解决方案在章节 [​*第 4 章*](f_0209.xhtml#speeding.up.your.code.with.big.o.solutions)
    中可以找到。
- en: 'Replace the question marks in the following table to describe how many steps
    occur for a given number of data elements across various types of Big O:'
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 替换下表中的问号，以描述在不同类型的大 O 中，对于给定数量的数据元素会发生多少步骤：
- en: '| N Elements | O(N) | O(log N) | O(N²) |'
  id: totrans-3
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| N 元素 | O(N) | O(log N) | O(N²) |'
- en: '| --- | --- | --- | --- |'
  id: totrans-4
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| 100 | 100 | ? | ? |'
  id: totrans-5
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| 100 | 100 | ? | ? |'
- en: '| 2,000 | ? | ? | ? |'
  id: totrans-6
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| 2,000 | ? | ? | ? |'
- en: If we have an O(N²) algorithm that processes an array and find that it takes
    256 steps, what is the size of the array?
  id: totrans-7
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 如果我们有一个 O(N²) 算法处理一个数组，并且发现它需要 256 步，那么数组的大小是多少？
- en: 'Use Big O notation to describe the time complexity of the following function.
    It finds the greatest product of any pair of two numbers within a given array:'
  id: totrans-8
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 使用大 O 符号描述以下函数的时间复杂度。它在给定数组中找到任何两个数字的最大乘积：
- en: '| ​  | `function` greatestProduct(array) { |'
  id: totrans-9
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` greatestProduct(array) { |'
- en: '| ​  | `if` (array.length < 2) { `return` `null`; } |'
  id: totrans-10
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (array.length < 2) { `return` `null`; } |'
- en: '| ​  |  |'
  id: totrans-11
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `let` greatestProductSoFar = array[0] * array[1]; |'
  id: totrans-12
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` greatestProductSoFar = array[0] * array[1]; |'
- en: '| ​  |  |'
  id: totrans-13
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `for` (`const` [indexI, valueI] `of` array.entries()) { |'
  id: totrans-14
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`const` [indexI, valueI] `of` array.entries()) { |'
- en: '| ​  | `for` (`const` [indexJ, valueJ] `of` array.entries()) { |'
  id: totrans-15
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`const` [indexJ, valueJ] `of` array.entries()) { |'
- en: '| ​  | `if` (indexI !== indexJ && valueI * valueJ > greatestProductSoFar) {
    |'
  id: totrans-16
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (indexI !== indexJ && valueI * valueJ > greatestProductSoFar) {
    |'
- en: '| ​  | greatestProductSoFar = valueI * valueJ; |'
  id: totrans-17
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | greatestProductSoFar = valueI * valueJ; |'
- en: '| ​  | } |'
  id: totrans-18
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-19
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-20
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-21
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return` greatestProductSoFar; |'
  id: totrans-22
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` greatestProductSoFar; |'
- en: '| ​  | } |'
  id: totrans-23
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 'This function finds the greatest single number within an array, but it has
    an efficiency of O(N²). Rewrite the function so that it becomes a speedy O(N):'
  id: totrans-24
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 该函数在数组中找到最大的单个数字，但它的效率为 O(N²)。重写该函数，使其变得快速，效率为 O(N)：
- en: '| ​  | `function` greatestNumber(array) { |'
  id: totrans-25
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` greatestNumber(array) { |'
- en: '| ​  | `let` isITheGreatest; |'
  id: totrans-26
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` isITheGreatest; |'
- en: '| ​  | `if` (array.length === 0) { `return` `null`; } |'
  id: totrans-27
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (array.length === 0) { `return` `null`; } |'
- en: '| ​  |  |'
  id: totrans-28
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `for` (`const` i `of` array) { |'
  id: totrans-29
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`const` i `of` array) { |'
- en: '| ​  | `// Assume for now that i is the greatest:` |'
  id: totrans-30
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `// 假设目前 i 是最大的：` |'
- en: '| ​  | isITheGreatest = `true`; |'
  id: totrans-31
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | isITheGreatest = `true`; |'
- en: '| ​  |  |'
  id: totrans-32
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `for` (`const` j `of` array) { |'
  id: totrans-33
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`const` j `of` array) { |'
- en: '| ​  | `// If we find another value that is greater than i,` |'
  id: totrans-34
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `// 如果我们找到另一个比 i 更大的值，` |'
- en: '| ​  | `// then i is not the greatest:` |'
  id: totrans-35
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `// 那么 i 不是最大的：` |'
- en: '| ​  | `if` (j > i) { isITheGreatest = `false`; } |'
  id: totrans-36
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (j > i) { isITheGreatest = `false`; } |'
- en: '| ​  | } |'
  id: totrans-37
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | `// If, by the time we checked all the other numbers, i is still the`
    |'
  id: totrans-38
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `// 如果到我们检查所有其他数字时，i 仍然是` |'
- en: '| ​  | `// greatest, it means that i is the greatest number:` |'
  id: totrans-39
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `// 如果 i 是最大的数字：` |'
- en: '| ​  | `if` (isITheGreatest) { |'
  id: totrans-40
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (isITheGreatest) { |'
- en: '| ​  | `return` i; |'
  id: totrans-41
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` i; |'
- en: '| ​  | } |'
  id: totrans-42
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-43
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-44
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: Copyright © 2024, The Pragmatic Bookshelf.
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 版权所有 © 2024, The Pragmatic Bookshelf.
