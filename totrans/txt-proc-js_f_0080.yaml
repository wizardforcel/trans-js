- en: '| Recipe 68 | Matching Floating-Point Numbers |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: '| 配方 68 | 匹配浮动小数 |'
- en: Task
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务
- en: Suppose you aim to write a regex to match floating-point values because you
    want to extract stock prices from a string. Or perhaps you want to retrieve other
    values that have a floating-point representation, such as interest rates, sensor
    readings, temperatures, or coordinates (latitude and longitude).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你打算编写一个正则表达式来匹配浮动小数，因为你想从字符串中提取股票价格。或者你可能想提取其他具有浮动小数表示的值，如利率、传感器读数、温度或坐标（纬度和经度）。
- en: You want to be able to specify whether the presence of the sign, integer, and
    fraction components is mandatory or optional. The regex to use depends on the
    optional components of the floating-point number. Therefore, this recipe offers
    different patterns as potential solutions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望指定符号、整数部分和小数部分的存在是否是强制性的或可选的。使用的正则表达式取决于浮动小数的可选组件。因此，本配方提供了不同的模式作为潜在的解决方案。
- en: Solution
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Matching a floating-point value that has a sign, integer, and fraction components:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配一个具有符号、整数和小数部分的浮动小数：
- en: '|   | [+-]\d+\.\d+ |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '|   | [+-]\d+\.\d+ |'
- en: 'Matching a floating-point value that may have an optional sign, but must have
    integer and fraction components:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配一个可以有可选符号，但必须包含整数部分和小数部分的浮动小数：
- en: '|   | [+-]?\d+\.\d+ |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '|   | [+-]?\d+\.\d+ |'
- en: 'Matching a floating-point value with optional sign and integer but mandatory
    fraction:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配一个带有可选符号、整数部分但必须有小数部分的浮动小数：
- en: '|   | [+-]?\d*\.\d+ |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '|   | [+-]?\d*\.\d+ |'
- en: 'Example:'
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例：
- en: 'Let’s extract the first floating-point number that appears in a string. The
    value may have an optional sign, but must have integer and fraction components:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从字符串中提取第一个浮动小数。该值可以有一个可选的符号，但必须包含整数部分和小数部分：
- en: '[part_3/matching_floating_points/fp_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_3/matching_floating_points/fp_ex1.js)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_3/matching_floating_points/fp_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_3/matching_floating_points/fp_ex1.js)'
- en: '|   | **function** extractFloatingPoint(str) { |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '|   | **function** extractFloatingPoint(str) { |'
- en: '|   | **const** re = */**[**+-**]?\d**+**\.\d**+/*; |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** re = */**[**+-**]?\d**+**\.\d**+/*; |'
- en: '|   | **return** str.match(re)[0]; |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '|   | **返回** str.match(re)[0]; |'
- en: '|   | } |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '|   | } |'
- en: '|   |  |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | extractFloatingPoint(*"It''s -4.19 today."*); |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '|   | extractFloatingPoint(*"今天是-4.19。"*); |'
- en: '|   | *// → "-4.19"* |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '|   | *// → "-4.19"* |'
- en: Mission accomplished!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 任务完成！
- en: Discussion
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论
- en: In the first pattern, we use square brackets to create a character class that
    matches either a plus sign (+) or a minus sign (-), followed by one or more digits
    (\d+), followed by a literal period (.), followed by one or more digits again
    (\d+). This matches a floating point numbering a question mark after the character
    class. Similarly, replacing the plus sign with an asterisk in the integer digits
    repetition allows for zero or more digits instead of one or more.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个模式中，我们使用方括号创建一个字符类，该字符类匹配一个加号（+）或减号（-），后跟一个或多个数字（\d+），接着是一个字面意义的句点（.），然后是一个或多个数字（\d+）。这个模式匹配一个浮点数，在字符类后面可以加上一个问号。同样，将加号替换为星号（*）在整数数字重复中，允许零个或多个数字，而不是一个或多个。
- en: In the example, we’re verifying if a floating-point number exists within a larger
    body of text. But, if you want to verify whether the entire input is a floating-point
    number, you should use the ^ and $ boundaries.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们正在验证一个浮点数是否存在于一段较大的文本中。但是，如果你想验证整个输入是否是一个浮点数，你应该使用^和$边界符。
