- en: 'Chapter 5: Objects and Prototypes'
  prefs:
  - PREF_H1
  - PREF_H1
  type: TYPE_NORMAL
- en: In Chapter 4, we explored functions and scope, which are essential building
    blocks of JavaScript programming. Now, we will delve into objects and prototypes,
    another fundamental aspect of JavaScript. Objects allow us to group related data
    and functions together, providing a more organized way to represent real-world
    entities. Prototypes enable object inheritance, facilitating code reusability
    and maintaining a clear structure. Understanding objects and prototypes is crucial
    for becoming a proficient JavaScript developer. Let's dive in and explore the
    world of objects and prototypes!
  prefs: []
  type: TYPE_NORMAL
- en: 'Objects: Bundling Data and Functions'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In JavaScript, objects are composite data types that allow us to represent entities
    with properties (data) and methods (functions) associated with them. Objects provide
    an excellent way to organize related data and behavior together, making the code
    more structured and readable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Object Literals:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The simplest way to create an object is by using object literals, denoted by
    curly braces `{}`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In Example 1, we define an object `person` with properties `name`, `age`, and
    `occupation`, along with a method `greet()` that prints a greeting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Accessing Object Properties:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can access object properties using dot notation or square brackets notation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In Example 2, we access the `name` property using dot notation and the `age`
    property using square brackets notation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding and Modifying Object Properties:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can add new properties or modify existing properties of an object at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In Example 3, we add the `location` property and modify the `age` property of
    the `person` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Object Methods:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Objects can also contain methods, which are functions associated with the object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In Example 4, we add a new method `sayHello()` to the `person` object and call
    it to print a greeting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prototypes: Inheriting and Sharing Behavior'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Prototypes play a significant role in JavaScript's object-oriented nature. They
    allow objects to inherit properties and methods from other objects, enabling code
    reusability and a clear inheritance structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prototype Chain:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Every object in JavaScript has a prototype, which is another object from which
    it inherits properties and methods. This forms a chain of prototypes, known as
    the prototype chain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In Example 5, we create two objects, `parent` and `child`. By using `Object.setPrototypeOf()`,
    we set the prototype of `child` to `parent`, forming a prototype chain. Now, `child`
    can access properties from `parent`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `__proto__` Property:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each object in JavaScript has a `__proto__` property that points to its prototype.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In Example 6, we set the `__proto__` property of `child` to `parent`, creating
    the prototype chain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating Objects with Prototypes:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can create objects with a shared prototype using constructors or classes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In Example 7, we define a constructor function `Person` to create `Person` objects.
    We add a method `sayHello()` to the prototype of `Person`, which can be accessed
    by all `Person` objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'ES6 Classes:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the introduction of ES6, JavaScript provides a more intuitive way to create
    objects with shared prototypes using classes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In Example 8, we define a class `Animal` with a constructor and a method `makeSound()`.
    We then create an object `cat` based on this class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inheritance with Prototypes:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can achieve inheritance by setting the prototype of one object to be another
    object, creating a parent-child relationship.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In Example 9, we create a `Shape` constructor and a `Circle` constructor. We
    set the prototype of `Circle` to be an instance of `Shape`, establishing inheritance.
    We then override the `draw()` method for the `Circle` prototype.
  prefs: []
  type: TYPE_NORMAL
- en: 'Conclusion:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we explored objects and prototypes in JavaScript. Objects allow
    us to bundle related data and functions together, providing a more structured
    way to represent entities in code. We learned how to create objects using object
    literals, add properties and methods, and access them. Additionally, we examined
    prototypes, which enable object inheritance, allowing objects to share behavior
    and properties, enhancing code reusability.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding objects and prototypes is crucial for mastering JavaScript's object-oriented
    capabilities. With objects, we can organize data and behavior efficiently, while
    prototypes allow us to establish clear inheritance relationships and share code
    across objects.
  prefs: []
  type: TYPE_NORMAL
