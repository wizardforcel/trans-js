["```js\n1 const obj = {};\n\n```", "```js\n1 function Car(name, model) {\n2   this.name = name;\n3   this.model = model;\n4 }\n5 \n6 console.log(Object.getOwnPropertyNames(Car));\n7 \n8 // [ \"prototype\", \"length\", \"name\" ]\n\n```", "```js\n1 // Car.prototype\n2 {\n3   constructor: <Car function>\n4 }\n\n```", "```js\n1 function Car(name, model) {\n2   this.name = name;\n3   this.model = model;\n4 }\n5 \n6 console.log(Car.prototype.constructor === Car); // true\n\n```", "```js\n1 Car.prototype.start = function () {\n2   console.log(\"starting the engine of \" + this.name);\n3 };\n4 \n5 const honda = new Car(\"honda\", \"1996\");\n6 const toyota = new Car(\"toyota\", \"2000\");\n7 \n8 honda.start(); // starting the engine of honda\n9 toyota.start(); // starting the engine of toyota\n\n```", "```js\n 1 function Car(name, model) {\n 2  this.name = name;\n 3  this.model = model;\n 4 }\n 5 \n 6 Car.prototype.start = function () {\n 7  console.log(\"starting the engine of \" + this.name);\n 8 };\n 9 \n10 const honda = new Car(\"honda\", \"1996\");\n11 \n12 console.log(Object.getPrototypeOf(honda) === Car.prototype); // true\n\n```", "```js\n1 const obj = {};\n2 \n3 console.log(Object.getPrototypeOf(obj) === Object.prototype);\n4 // true\n\n```", "```js\n1 const obj = {};\n2 \n3 console.log(obj.toString()); // [object Object]\n\n```", "```js\n1 const obj = new Object();\n\n```", "```js\n1 const arrayPrototype = Object.getPrototypeOf([]);\n2 const prototypeOfArrayPrototype = Object.getPrototypeOf(arrayPrototype);\n3 \n4 console.log(arrayPrototype === Array.prototype);\n5 // true\n6 console.log(prototypeOfArrayPrototype === Object.prototype);\n7 // true\n\n```", "```js\n1 console.log(Object.getPrototypeOf(Object.prototype));\n2 // null\n\n```", "```js\n1 console.log(Object.getPrototypeOf(Object) == Function.prototype);\n2 // true\n3 \n4 console.log(Object.getPrototypeOf(Function) == Function.prototype);\n5 // true\n\n```", "```js\n1 const user = { name: \"John Doe\" };\n2 \n3 console.log(user.__proto__);\n4 // logs Object.prototype object\n\n```", "```js\n1 const propertyPrinter = {\n2   printOwnPropertyNames: function () {\n3     // \"this\" refers to the object on which\n4     // this function is called\n5     for (let prop of Object.getOwnPropertyNames(this)) {\n6       console.log(prop);\n7     }\n8   }\n9 };\n\n```", "```js\n 1 const propertyPrinter = {\n 2  printOwnPropertyNames: function () {\n 3    // \"this\" refers to the object on which\n 4    // this function is called\n 5    for (let prop of Object.getOwnPropertyNames(this)) {\n 6      console.log(prop);\n 7    }\n 8  }\n 9 };\n10 \n11 const user = {\n12   firstName: \"John\",\n13   lastName: \"Doe\",\n14   age: 25\n15 };\n16 \n17 // set the prototype of the \"user\" object\n18 Object.setPrototypeOf(user, propertyPrinter);\n19 \n20 // prototype methods are now accessible\n21 user.printOwnPropertyNames();\n22 // firstName\n23 // lastName\n24 // age\n\n```", "```js\n 1 // create a new object and set \"propertyPrinter\"\n 2 // object as its prototype\n 3 const user = Object.create(propertyPrinter);\n 4 \n 5 user.firstName = \"John\";\n 6 user.lastName = \"Doe\";\n 7 user.age = 25;\n 8 \n 9 // prototype methods are accessible\n10 user.printOwnPropertyNames();\n11 // firstName\n12 // lastName\n13 // age\n\n```", "```js\n1 const obj = Object.create(null);\n2 \n3 console.log(obj.toString());\n4 // Error: toString not defined\n\n```", "```js\n1 const user = {};\n2 \n3 // malicious code adding \"isAdmin\"\n4 // property in the prototype object\n5 Object.prototype.isAdmin = true;\n6 \n7 if (user.isAdmin) {\n8   console.log(\"grant access\");\n9 }\n\n```", "```js\n 1 const user = Object.create(null);\n 2 \n 3 // malicious code adding \"isAdmin\"\n 4 // property in the prototype object\n 5 Object.prototype.isAdmin = true;\n 6 \n 7 if (user.isAdmin) {\n 8  console.log(\"grant access\");\n 9 } else {\n10   console.log(\"access denied\");\n11 }\n\n```", "```js\n 1 function Person(name, age) {\n 2  this.name = name;\n 3  this.age = age;\n 4 }\n 5 \n 6 Person.prototype.introduce = function () {\n 7  console.log(`My name is ${this.name} and I am ${this.age} years old`);\n 8 };\n 9 \n10 function Student(name, age, id) {\n11   // delegate the responsibility of initializing\n12   // \"name\" and \"age\" properties to the Person\n13   // constructor\n14   Person.call(this, name, age);\n15   this.id = id;\n16 }\n17 \n18 // set \"Person.prototype\" object as the prototype\n19 // of the \"Student.prototype\" object\n20 Student.prototype = Object.create(Person.prototype);\n21 \n22 // set the constructor property on the\n23 // newly created Student.prototype object\n24 Student.prototype.constructor = Student;\n25 \n26 const mike = new Student(\"Mike\", 20, 222);\n27 mike.introduce();\n\n```", "```js\n 1 class Person {\n 2  constructor(name, age) {\n 3    this.name = name;\n 4    this.age = age;\n 5  }\n 6 \n 7  introduce() {\n 8    console.log(`My name is ${this.name} and I am ${this.age} years old`);\n 9  }\n10 }\n11 \n12 class Student extends Person {\n13   constructor(name, age, id) {\n14     // delegate the responsibility of initializing\n15     // \"name\" and \"age\" properties to the parent class\n16     super(name, age);\n17     this.id = id;\n18   }\n19 }\n\n```", "```js\n1 console.log(Object.getPrototypeOf(mike) === Student.prototype);\n2 // true\n3 console.log(Object.getPrototypeOf(Student.prototype) === Person.prototype);\n4 // true\n5 console.log(Object.getPrototypeOf(Person.prototype) === Object.prototype);\n6 // true\n\n```", "```js\n1 console.log(Object.getPrototypeOf(Student) === Person);\n2 // true\n\n```"]