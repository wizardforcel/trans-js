- en: Binary Search
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 二分搜索
- en: 'You’ve probably played this guessing game as a child: I’m thinking of a number
    between `1` and `100`。Keep guessing which number I’m thinking of, and I’ll let
    you know whether you need to guess higher or lower.'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你可能在小时候玩过这个猜数字的游戏：我心里想的是一个`1`到`100`之间的数字。继续猜我心里想的哪个数字，我会告诉你是否需要猜更高或更低。
- en: You may know intuitively how to play this game. You wouldn’t begin by guessing
    number `1`。Instead, you’d probably start with `50`，which is smack in the middle.
    Why? Because by selecting `50`，no matter whether I tell you to guess higher or
    lower, you’ve automatically eliminated half the possible numbers!
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你可能直觉上知道如何玩这个游戏。你不会从猜数字`1`开始。相反，你可能会先猜`50`，它正好在中间。为什么？因为选择`50`后，无论我告诉你要猜更高还是更低，你都会自动排除掉一半的可能数字！
- en: If you guess `50` and I tell you to guess higher, you’d then pick `75`，to eliminate
    half of the remaining numbers. If after guessing `75`，I told you to guess lower,
    you’d pick `62` or `63`。You’d keep on choosing the halfway mark to keep eliminating
    half of the remaining numbers.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你猜了`50`，而我告诉你猜更高，你就会选择`75`，以排除剩余数字的一半。如果在猜了`75`后，我告诉你猜更低，你就会选择`62`或`63`。你会继续选择中间值，以不断排除剩余的一半数字。
- en: Let’s visualize this process where we’re told to guess a number between `1`
    and `10`，as shown in the [image](#fig.ch2.conversation).
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们可视化这个过程，我们被告知要猜一个`1`到`10`之间的数字，如下图所示：[image](#fig.ch2.conversation)。
- en: '![`images/binary_search/conversation.png`](images/binary_search/conversation.png)'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/binary_search/conversation.png`](images/binary_search/conversation.png)'
- en: This, in a nutshell, is binary search.
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 简而言之，这就是二分搜索。
- en: 'Let’s see how binary search is applied to an ordered array. Say we have an
    ordered array containing nine elements. The computer doesn’t know offhand what
    value each cell contains, so we’ll portray the array like this:'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们看看二分搜索是如何应用于一个有序数组的。假设我们有一个包含九个元素的有序数组。计算机并不知道每个单元格具体包含什么值，因此我们将数组描绘成这样：
- en: '![`images/binary_search/binary_search_11.png`](images/binary_search/binary_search_11.png)'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/binary_search/binary_search_11.png`](images/binary_search/binary_search_11.png)'
- en: 'Say we’d like to search for the value `7` inside this ordered array. Here’s
    how binary search would work:'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 假设我们想在这个有序数组中搜索值`7`。二分搜索将如何进行：
- en: 'Step 1: We begin our search from the central cell. We can immediately jump
    to this cell, since we can calculate its index by taking the array’s length and
    dividing it by `2`。We check the value at this cell:'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 步骤 1：我们从中间单元格开始搜索。我们可以立即跳到这个单元格，因为我们可以通过将数组的长度除以`2`来计算它的索引。我们检查这个单元格的值：
- en: '![`images/binary_search/binary_search_12.png`](images/binary_search/binary_search_12.png)'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/binary_search/binary_search_12.png`](images/binary_search/binary_search_12.png)'
- en: 'Because the value uncovered is a `9`，we can conclude that the `7` is somewhere
    to its left. We’ve just successfully eliminated half of the array’s cells—that
    is, all the cells to the right of the `9` (and the `9` itself):'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因为未揭示的值是`9`，我们可以得出`7`在它的左边。我们刚刚成功排除了数组单元格的一半——也就是所有在`9`右侧的单元格（包括`9`本身）：
- en: '![`images/binary_search/binary_search_13.png`](images/binary_search/binary_search_13.png)'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/binary_search/binary_search_13.png`](images/binary_search/binary_search_13.png)'
- en: 'Step 2: Among the cells to the left of the `9`，we inspect the middlemost value.
    There are two middlemost values, so we arbitrarily choose the left one:'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 步骤 2：在`9`左侧的单元格中，我们检查中间值。有两个中间值，因此我们任意选择左边的那个：
- en: '![`images/binary_search/binary_search_14.png`](images/binary_search/binary_search_14.png)'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/binary_search/binary_search_14.png`](images/binary_search/binary_search_14.png)'
- en: 'It’s a `4`，so the `7` must be somewhere to its right. We can eliminate the
    `4` and the cell to its left:'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 它是`4`，因此`7`必须在它的右边。我们可以排除`4`和它左边的单元格：
- en: '![`images/binary_search/binary_search_15.png`](images/binary_search/binary_search_15.png)'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/binary_search/binary_search_15.png`](images/binary_search/binary_search_15.png)'
- en: 'Step 3: There are two more cells where the `7` can be. We arbitrarily choose
    the left one, as shown in the [image](#fig.ch2.binary_search_16).'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 步骤 3：还有两个单元格可能包含`7`。我们任意选择左边的一个，如下图所示：[image](#fig.ch2.binary_search_16)。
- en: '![`images/binary_search/binary_search_16.png`](images/binary_search/binary_search_16.png)'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/binary_search/binary_search_16.png`](images/binary_search/binary_search_16.png)'
- en: 'Step 4: We inspect the final remaining cell. (If it’s not there, that means
    there is no `7` within this ordered array.)'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 步骤 4：我们检查最后剩下的单元格。（如果没有，那就意味着在这个有序数组中没有`7`。）
- en: '![`images/binary_search/binary_search_17.png`](images/binary_search/binary_search_17.png)'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/binary_search/binary_search_17.png`](images/binary_search/binary_search_17.png)'
- en: We found the 7 in four steps. In this example this is the same number of steps
    linear search would have taken, but we’ll take a look shortly at another example
    to see the power of binary search.
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们在四步内找到了7。在这个例子中，这与线性搜索所需的步骤数相同，但我们很快将看到另一个例子，以展示二分搜索的强大。
- en: 'Note that binary search is only possible within an ordered array. With a classic
    array, values can be in any order and we’d never know whether to look to the left
    or right of any given value. This is one of the advantages of ordered arrays:
    we have the option of binary search.'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 请注意，二分搜索仅在有序数组中有效。对于经典数组，值可以是任意顺序，我们无法知道是否应该向任何给定值的左侧或右侧查找。这是有序数组的一个优势：我们有使用二分搜索的选项。
- en: 'Code Implementation: Binary Search'
  id: totrans-24
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 代码实现：二分搜索
- en: 'Here’s an implementation of binary search in JavaScript:'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 下面是一个用JavaScript实现的二分搜索：
- en: '| ​  | `function` binarySearch(array, searchValue) { |'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` binarySearch(array, searchValue) { |'
- en: '| ​  | `let` lowerBound = 0; |'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` lowerBound = 0; |'
- en: '| ​  | `let` upperBound = array.length - 1; |'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` upperBound = array.length - 1; |'
- en: '| ​  |  |'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `while` (lowerBound <= upperBound) { |'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while` (lowerBound <= upperBound) { |'
- en: '| ​  | `const` midpoint = Math.floor((upperBound + lowerBound) / 2); |'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` midpoint = Math.floor((upperBound + lowerBound) / 2); |'
- en: '| ​  | `const` valueAtMidpoint = array[midpoint]; |'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` valueAtMidpoint = array[midpoint]; |'
- en: '| ​  |  |'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `if` (searchValue === valueAtMidpoint) { |'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (searchValue === valueAtMidpoint) { |'
- en: '| ​  | `return` midpoint; |'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` midpoint; |'
- en: '| ​  | } `else` `if` (searchValue < valueAtMidpoint) { |'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } `else` `if` (searchValue < valueAtMidpoint) { |'
- en: '| ​  | upperBound = midpoint - 1; |'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | upperBound = midpoint - 1; |'
- en: '| ​  | } `else` `if` (searchValue > valueAtMidpoint) { |'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } `else` `if` (searchValue > valueAtMidpoint) { |'
- en: '| ​  | lowerBound = midpoint + 1; |'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | lowerBound = midpoint + 1; |'
- en: '| ​  | } |'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return` `null`; |'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` `null`; |'
- en: '| ​  | } |'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: Let’s break this down. As with the `linearSearch` method, `binarySearch` accepts
    the array and the `searchValue` as arguments.
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们分析一下。与`linearSearch`方法类似，`binarySearch`接受数组和`searchValue`作为参数。
- en: 'Here’s an example of how to call this method:'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 下面是如何调用这个方法的一个示例：
- en: '| ​  | `console.log(binarySearch([3, 17, 75, 80, 202], 22))` |'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `console.log(binarySearch([3, 17, 75, 80, 202], 22))` |'
- en: 'The method first establishes the range of indexes in which the `searchValue`
    might be found. We do this with the following code:'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 该方法首先确定`searchValue`可能存在的索引范围。我们用以下代码实现这一点：
- en: '| ​  | `let` lowerBound = 0; |'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` lowerBound = 0; |'
- en: '| ​  | `let` upperBound = array.length - 1; |'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` upperBound = array.length - 1; |'
- en: Because when starting our search the `searchValue` might be found anywhere within
    the entire array, we establish the `lowerBound` as the first index and the `upperBound`
    as the last index.
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因为在开始搜索时，`searchValue`可能在整个数组的任何位置，我们将`lowerBound`设为第一个索引，`upperBound`设为最后一个索引。
- en: 'The essence of the search takes place within the `while` loop:'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 搜索的本质在于`while`循环中进行：
- en: '| ​  | `while` (lowerBound <= upperBound) { |'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while` (lowerBound <= upperBound) { |'
- en: This loop runs while we still have a range of elements in which the `searchValue`
    may lie. As we’ll see shortly, our algorithm will keep narrowing this range as
    we go. The clause `lowerBound <= upperBound` will no longer hold true once there’s
    no more range left, and we can conclude that the `searchValue` is not present
    in the array.
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当我们仍然有一系列元素可能包含`searchValue`时，这个循环会持续运行。正如我们将很快看到的，我们的算法会随着不断迭代而逐步缩小这个范围。一旦没有更多范围可供搜索，`lowerBound
    <= upperBound`这个条件将不再成立，我们可以得出结论，`searchValue`不在数组中。
- en: 'Within the loop, our code inspects the value at the midpoint of the range.
    The following code accomplishes this:'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在循环中，我们的代码检查范围中点的值。以下代码实现了这一点：
- en: '| ​  | `const` midpoint = Math.floor((upperBound + lowerBound) / 2); |'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` midpoint = Math.floor((upperBound + lowerBound) / 2); |'
- en: '| ​  | `const` valueAtMidpoint = array[midpoint]; |'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` valueAtMidpoint = array[midpoint]; |'
- en: The `valueAtMidpoint` is the item found at the center of the range.
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`valueAtMidpoint`是找到的范围中心的项。'
- en: 'Now, if the `valueAtMidpoint` is the `searchValue` we’re looking for, we’ve
    struck gold and can return the index in which the `searchValue` is found:'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，如果`valueAtMidpoint`是我们正在寻找的`searchValue`，那么我们就找到了目标，可以返回`searchValue`所在的索引：
- en: '| ​  | `if` (searchValue === valueAtMidpoint) { |'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (searchValue === valueAtMidpoint) { |'
- en: '| ​  | `return` midpoint; |'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` midpoint; |'
- en: 如果`searchValue`小于`valueAtMidpoint`，这意味着`searchValue`必须在数组的某个更早的位置被找到。然后，我们可以通过将`upperBound`设为`midpoint`左侧的索引来缩小搜索范围，因为`searchValue`不可能在更远的位置找到：
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果`searchValue`小于`valueAtMidpoint`，这意味着`searchValue`必须在数组的某个更早的位置被找到。然后，我们可以通过将`upperBound`设为`midpoint`左侧的索引来缩小搜索范围，因为`searchValue`不可能在更远的位置找到：
- en: '| ​  | } ​`else`​ ​`if`​ (`searchValue < valueAtMidpoint`) { |'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } ​`else`​ ​`if`​ (`searchValue < valueAtMidpoint`) { |'
- en: '| ​  | `upperBound = midpoint - 1;` |'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `upperBound = midpoint - 1;` |'
- en: '| ​  | } |'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 相反，如果`searchValue`大于`valueAtMidpoint`，这意味着`searchValue`只能在`midpoint`的右侧找到，因此我们适当地提高`lowerBound`：
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 相反，如果`searchValue`大于`valueAtMidpoint`，这意味着`searchValue`只能在`midpoint`的右侧找到，因此我们适当地提高`lowerBound`：
- en: '| ​  | } ​`else`​ ​`if`​ (`searchValue > valueAtMidpoint`) { |'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } ​`else`​ ​`if`​ (`searchValue > valueAtMidpoint`) { |'
- en: '| ​  | `lowerBound = midpoint + 1;` |'
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `lowerBound = midpoint + 1;` |'
- en: '| ​  | } |'
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 一旦范围缩小到0个元素，我们就返回`null`，并且我们可以确定`searchValue`在数组中不存在。
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 一旦范围缩小到0个元素，我们就返回`null`，并且我们可以确定`searchValue`在数组中不存在。
