- en: © The Author(s), under exclusive license to Springer Fachmedien Wiesbaden GmbH,
    part of Springer Nature 2024J. L. ZuckarelliLearn coding with Python and JavaScript
    [https://doi.org/10.1007/978-3-658-42912-6_29](https://doi.org/10.1007/978-3-658-42912-6_29)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © 作者，Springer Fachmedien Wiesbaden GmbH独家授权，属于Springer Nature的一部分 2024J. L.
    Zuckarelli 《用Python和JavaScript学习编程》 [https://doi.org/10.1007/978-3-658-42912-6_29](https://doi.org/10.1007/978-3-658-42912-6_29)
- en: '29. Program Execution & Hello World: What Do I Have to Do to Get a Program
    Running?'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 29. 程序执行与Hello World：我需要做什么才能运行一个程序？
- en: Joachim L. Zuckarelli^([1](#Aff2)  )(1)München, GermanyOverview
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Joachim L. Zuckarelli^([1](#Aff2)  )(1)德国慕尼黑概述
- en: JavaScript programs are typically integrated into web pages. Therefore, to make
    a program functional, we first need to understand how to incorporate it into a
    web page. This chapter covers essential HTML fundamentals necessary for this process
    and illustrates different methods to link an HTML web page with your JavaScript
    code. Throughout this section, you will also have the opportunity to write your
    inaugural "Hello World" program in JavaScript.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript程序通常集成到网页中。因此，为了使程序具有功能性，我们首先需要理解如何将它集成到网页中。本章将涵盖此过程所需的HTML基本知识，并说明将HTML网页与JavaScript代码链接的不同方法。在本节中，你还将有机会编写你的第一个“Hello
    World”JavaScript程序。
- en: 'In this chapter you will learn:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学到：
- en: How to use the HTML element **script** to refer to a JavaScript script from
    within a web page (if you are not yet familiar with HTML, this chapter also gives
    you a short introduction to the “programming language of the web”)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用HTML元素**script**在网页中引用JavaScript脚本（如果你还不熟悉HTML，本章也会简要介绍“网页编程语言”）
- en: how to embed JavaScript code directly into a web page using the **script** element
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用**script**元素将JavaScript代码直接嵌入网页
- en: how you can try out JavaScript thanks to special web services without having
    to worry about embedding your script in the web page
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过特殊的网络服务来尝试JavaScript，而不必担心将你的脚本嵌入网页
- en: how to write your first little “Hello World” program in JavaScript
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何用JavaScript编写你的第一个“Hello World”程序
- en: 29.1 Embedding JavaScript Code in Web Pages
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 29.1 在网页中嵌入JavaScript代码
- en: 29.1.1 The Script Element in HTML
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 29.1.1 HTML中的Script元素
- en: Unlike Python, JavaScript does not need an interpreter in order to run as it
    is embedded in a web page and interpreted together with the web page by the browser.
    This means that while we don’t have to deal with the question of how to run a
    JavaScript program, because the browser does that for us, we do have to deal with
    how to integrate a JavaScript program into a web page.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 与Python不同，JavaScript不需要解释器来运行，因为它是嵌入在网页中并由浏览器与网页一起解释的。这意味着，虽然我们不必担心如何运行JavaScript程序，因为浏览器会为我们处理，但我们确实需要处理如何将JavaScript程序集成到网页中。
- en: Web pages consist of code written in the descriptive programming language HTML
    (*Hypertext Markup Language*); for the conceptual distinction between descriptive
    and other languages, scroll back to ► Sect. [3.​1](474412_1_En_3_Chapter.xhtml#Sec1).
    If you already know the basics of how HTML works (and basics is all we’ll need
    here), then just read on. But if you think your knowledge could do with a quick
    refresher, then before you read on, turn first to the HTML (Hypertext Markup Language)
    background box.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 网页由用描述性编程语言HTML（*超文本标记语言*）编写的代码组成；关于描述性语言与其他语言的概念性区别，请回滚至► 第[3.1节](474412_1_En_3_Chapter.xhtml#Sec1)。如果你已经知道HTML的基本工作原理（而且我们这里只需要基本知识），那就继续往下读。如果你觉得自己的知识需要快速复习一下，那么在继续阅读之前，先翻到HTML（超文本标记语言）背景框。
- en: HTML (Hypertext Markup Language)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: HTML（超文本标记语言）
- en: '**The Language of the Web**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**网页的语言**'
- en: HTML is the language in which web pages are written. It was developed at the
    end of the 1980s by the physicist *Tim Berners-Lee* at the European nuclear research
    center CERN. Berners-Lee was not only raised to the peerage by the Queen of England,
    showered with countless other honors (like the *Turing Award*, widely considered
    as the Noble Prize in computer science) and placed on the list of the *100 Most
    Important People of the Twentieth Century* by Time Magazine, but is also generally
    regarded as the father of the World Wide Web. Today, the HTML standard is defined
    by the *World Wide Web Consortium* (also known as *W3C*).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: HTML是编写网页的语言。它由物理学家*蒂姆·伯纳斯-李*于1980年代末在欧洲核子研究中心CERN开发。伯纳斯-李不仅被英国女王授予贵族头衔，获得了无数其他荣誉（如*图灵奖*，广泛被认为是计算机科学领域的诺贝尔奖），并被《时代杂志》列为*20世纪最重要的100人*，而且普遍被认为是万维网的父亲。如今，HTML标准由*万维网联盟*（也称为*W3C*）定义。
- en: '**HTML Elements and Their Components**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTML元素及其组成部分**'
- en: 'HTML documents consist of HTML elements. Such HTML elements basically have
    three components:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: HTML文档由HTML元素组成。这样的HTML元素基本上有三个组成部分：
- en: '*Tags*: Tags are symbols that mark the beginning and end of an HTML element;
    to distinguish them from other parts of the document, they are enclosed in “less
    than” and “greater than” characters, with a slash (**/**) preceding the element
    name in the closing tag. A combination of opening and closing tags might thus
    look like this: **<h1>…</h1>**.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*标签*：标签是标记HTML元素开始和结束的符号；为了将其与文档的其他部分区分开来，标签被“<”和“>”符号包围，在闭合标签中，元素名称前有一个斜杠（**/**）。开闭标签的组合可能如下所示：**<h1>…</h1>**。'
- en: '*Content*: There can often be content between the tags. For example, the **h1**
    element describes a top-level heading (*header 1*). The text of the heading is
    placed between the opening and closing tags, so for example: **<h1>Introduction</h1>**.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*内容*：标签之间通常可以包含内容。例如，**h1**元素描述的是一级标题（*header 1*）。标题文本被放置在开闭标签之间，例如：**<h1>介绍</h1>**。'
- en: '*Attributes*: Attributes are inside the opening tag and modify the behavior
    of the tag. They consist of an attribute name and an attribute value. The value
    of the attribute is written in quotation marks and assigned to the attribute name
    with an equal sign. The attribute **dir**, for example, controls the direction
    of the text display. Its value **rtl** means *right-to-left*, i.e., the text is
    displayed from right to left (right-justified). Incorporated into our **h1** element,
    the attribute then looks like this: **<h1 dir="rtl">introduction</h1>**.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*属性*：属性位于开标签内，用于修改标签的行为。它们由属性名和属性值组成。属性值用引号括起来，并通过等号赋给属性名。例如，属性**dir**控制文本显示的方向。它的值**rtl**表示*从右至左*，即文本从右向左显示（右对齐）。将其嵌入到我们的**h1**元素中，属性就会是这样：**<h1
    dir="rtl">介绍</h1>**。'
- en: '**Structure of HTML Documents**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTML文档的结构**'
- en: Many HTML elements can be nested within each other. This results in a hierarchical
    structure that the web browser reads and displays as a *Document Object Model*
    (*DOM*). This already becomes clear in the structure of an HTML document. HTML
    documents consist of a head (element **head**) and a body (element **body**).
    The document head usually contains general information about the document, such
    as the title of the document or meta information such as keywords or a description
    of the web page for search engines. The body of the document contains the actual
    content of the web page; it is therefore usually the disproportionately larger
    part of the document.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 许多HTML元素可以相互嵌套。这导致了一个层次结构，网页浏览器读取并显示为*文档对象模型*（*DOM*）。这在HTML文档的结构中已经显现出来。HTML文档由头部（**head**元素）和主体（**body**元素）组成。文档头部通常包含关于文档的一般信息，如文档的标题或搜索引擎用来索引网页的元信息（如关键词或描述）。文档的主体则包含网页的实际内容；因此，它通常是文档中比例较大的部分。
- en: '**head** and **body** are embedded in an enclosing **html** element, which
    is often called root element, because it is the hierarchically highest element
    in the Document Object Model.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**头部**和**主体**被嵌入到一个包围的**html**元素中，这个元素通常被称为根元素，因为它是文档对象模型中层级最高的元素。'
- en: A simple website might look like this:**<!DOCTYPE html>****<html>****<head>****<title>**Test
    Page**</title>****</head>****<body>****<h1>**Introduction**</h1>****<p>**Here
    is some text.**</p>****</body>****</html>**
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的网站可能是这样的：**<!DOCTYPE html>****<html>****<head>****<title>**Test Page**</title>****</head>****<body>****<h1>**Introduction**</h1>****<p>**Here
    is some text.**</p>****</body>****</html>**
- en: The **DOCTYPE** element is optional (and is one of those special kinds of elements
    that don’t have a closing tag), it describes the document as an HTML document.
    In the **body** of the document, you will see another element, **p**. It marks
    a paragraph of text and usually causes some spacing to be left above and below
    the text in the display, making the text appear as a free-standing paragraph.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**DOCTYPE** 元素是可选的（并且是那些没有闭合标签的特殊类型元素之一），它描述了该文档是一个 HTML 文档。在文档的 **body** 部分，你会看到另一个元素，**p**。它标记了一段文本，通常会在文本上下留下空白，展示时使文本呈现为一个独立的段落。'
- en: The tab indentations in the source code of the HTML document have only been
    added for the sake of better readability, they are ignored in the interpretation
    of the document content, just like the upper and lower case of the tags (HTML
    is not case sensitive). Thus, the following code is also a valid web page:**<!DOCTYPEhtml><html><head><TITLE>Test
    Page</title></head><body><h1>Introduction</h1><p>Here is some text.</p></BOdy></HTML>**
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 文档源代码中的制表符缩进仅为提高可读性而添加，在解释文档内容时会被忽略，就像标签的大小写（HTML 对大小写不敏感）一样。因此，下面的代码也是一个有效的网页：**<!DOCTYPEhtml><html><head><TITLE>Test
    Page</title></head><body><h1>Introduction</h1><p>Here is some text.</p></BOdy></HTML>**
- en: Paste this code (preferably with the indentations) into an empty file using
    an editor, save it with the extension **.htm** or **.html**, and there’s your
    little web page, which you can now open and view with your browser.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 将这段代码（最好保留缩进）粘贴到一个空文件中，使用编辑器保存，并将文件扩展名设置为 **.htm** 或 **.html**，然后你就有了一个小网页，可以使用浏览器打开并查看。
- en: 'By the way: HTML also has *comments*: They have special opening and closing
    tags with **<!--** and **-->**. Comments may also be multiline.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一下：HTML 也有 *注释*：它们有特殊的开启和关闭标签，分别是 **<!--** 和 **-->**。注释也可以是多行的。
- en: '**Cascading Style Sheets (CSS)**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**层叠样式表 (CSS)**'
- en: 'In addition to the HTML source code of web pages and scripts, especially JavaScript
    programs, which we will deal with in this part of the book, *Cascading Style Sheets*
    (*CSS*) are an important part of modern web pages. It used to be common to specify
    formatting with HTML elements and attributes directly in the HTML source code
    of the web page; for example, a text can be easily centered with the **align**
    attribute, which is supported by the **p** element, among others: **<p align="center"><Here
    is some centered text</p>**. But if a web page wanted to change its design fundamentally
    or if a “section” from a web page was to be shown on another web page that used
    a different design, the formatting had to be changed in painstaking and error-prone
    detail work in the HTML code.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 除了网页的 HTML 源代码和脚本，特别是我们在本书中将要处理的 JavaScript 程序之外，*层叠样式表* (*CSS*) 是现代网页的重要组成部分。以前，通常会直接在网页的
    HTML 源代码中通过 HTML 元素和属性来指定格式化；例如，可以使用 **align** 属性轻松地将文本居中，该属性在 **p** 元素等中得到支持：**<p
    align="center"><Here is some centered text</p>**。但是，如果一个网页想要从根本上改变其设计，或者如果一个网页的“部分”需要在另一个使用不同设计的网页上显示，那么就必须在
    HTML 代码中进行繁琐且容易出错的详细修改。
- en: This became easier with the introduction of *Cascading Style Sheets*. The idea
    behind Cascading Style Sheets is to separate the structure and content of a web
    page from the design and formatting, so that the design can be more easily replaced
    or adapted without having to dig deep into the part of the web page that houses
    the structure and content. This is implemented by describing formatting and design
    in a separate file (typically with the extension **.css**) and not in the HTML
    file itself. In the style sheet, i.e., in the CSS file, it can be specified, for
    example, that **h1** headings should always be displayed in blue and in bold.
    If the design of the website is revised and the default headline color is changed
    to red, this change only must be made in one place, namely in the style sheet.
    The display of all **h1** headlines in the entire HTML document will then change
    automatically. A related advantage is of course obvious. The same CSS file can
    be used for many different web pages, a large site with hundreds of subpages can
    thus very easily adapt its design to new needs.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 引入*层叠样式表*后，这一过程变得更加简单。层叠样式表的思想是将网页的结构和内容与设计和格式化分离，这样可以更轻松地替换或调整设计，而不必深入网页中处理结构和内容的部分。通过在一个单独的文件中描述格式和设计（通常扩展名为**.css**）并不直接在HTML文件中进行实现，层叠样式表就实现了这一目标。例如，在样式表中，可以指定**h1**标题应始终显示为蓝色且为粗体。如果网站的设计进行了修改，默认的标题颜色改为红色，那么这个修改只需要在一个地方进行，即在样式表中。然后，整个HTML文档中所有**h1**标题的显示会自动更新。一个相关的优势显而易见。相同的CSS文件可以用于多个不同的网页，因此，一个包含数百个子页面的大型网站可以非常容易地根据新的需求调整其设计。
- en: 'Sometimes, however, you don’t want to format *all* headings of type **h1**
    in a fixed way, but only certain ones. For this purpose, there is the **class**
    attribute, which can be used with practically all HTML elements and which you
    often see when you look at the source code of a web page. For example, a heading
    might be distinguished like this: **<h1 class="section">News</h1>**. This attribute
    can now be referred to in the CSS code. This means that some formatting rules
    stored in the CSS only apply to this class of **h1** elements, but not to other
    **h1** elements. The CSS could contain the following code for formatting the **h1**
    heading elements:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时你并不想将*所有*类型为**h1**的标题格式化为固定的样式，而只想格式化某些特定的标题。为此，存在**class**属性，它可以与几乎所有HTML元素一起使用，并且你在查看网页源代码时经常可以看到它。例如，可以通过这种方式区分一个标题：**<h1
    class="section">新闻</h1>**。现在，这个属性可以在CSS代码中引用。这意味着，CSS中存储的一些格式化规则仅适用于这一类**h1**元素，而不适用于其他**h1**元素。CSS可能包含如下代码，用于格式化**h1**标题元素：
- en: 'h1.section {color: red;}h1 {color: blue;font-weight: bold;}'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 'h1.section {color: red;}h1 {color: blue;font-weight: bold;}'
- en: 'Here it also becomes clear what the term *cascading* means. Property attributes
    are *inherited*. The general **h1** formatting statement in CSS says that the
    text color should be blue. The formatting for **h1** elements of the class **section**
    differs from this. For them, a different statement applies, namely coloring in
    red. The statement **font-weight: bold** from the CSS of the **h1** element, on
    the other hand, is not overwritten by the special statements for **h1** elements
    of the class **section**, and therefore also applies there. Thus, an **h1** element
    of the class **section**, like all **h1** elements, is also displayed in bold.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '在这里，我们也可以清楚地看到“*级联*”这一术语的含义。属性属性是*继承*的。CSS中的通用**h1**格式声明规定文本颜色应该是蓝色。而**section**类的**h1**元素格式与此不同。对于它们，适用的是另一个声明，即颜色为红色。另一方面，来自**h1**元素的CSS中的声明**font-weight:
    bold**并未被**section**类的**h1**元素的特殊声明覆盖，因此也适用于它们。因此，**section**类的**h1**元素，和所有**h1**元素一样，也会以粗体显示。'
- en: Like the HTML standard, the CSS standard is managed and developed by the World
    Wide Web Consortium.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 与HTML标准一样，CSS标准也由万维网联盟（W3C）管理和发展。
- en: 'To get a JavaScript program to work, we need to embed it in a web page. This
    is done with the **script** element, the use of which you can see in the following
    example:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要让一个JavaScript程序工作，我们需要将其嵌入到网页中。这可以通过**script**元素来实现，你可以在以下示例中看到它的使用：
- en: '**<!DOCTYPE html>**<**html>****<head>****<title>**Test Page**</title>****</head>****<body>****<script**
    src="helloworld.js"**></script>****</body>****<html>**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**<!DOCTYPE html>**<**html>****<head>****<title>**测试页面**</title>****</head>****<body>****<script**
    src="helloworld.js"**></script>****</body>****<html>**'
- en: The name of the script file is specified as the value for the **src** (*source*)
    attribute.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本文件的名称作为**src**（*source*）属性的值进行指定。
- en: 'In the example, we have placed the script element in the body of the web page,
    but we could also have placed it in the head. However, scripts are usually included
    in the body, or more precisely: at the end of the body. There is a good reason
    for this: scripts are executed in the HTML document where they are placed. If
    your script is at the end of the web page and needs a little longer to be fully
    executed—no problem. The rest of the web page is already loaded and displayed
    at this point. It would be more unpleasant if the viewer had to wait in front
    of an empty page while the JavaScript code runs, which was included at the beginning
    of the HTML document and is therefore also executed first, even before any other
    elements of the page are loaded.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将脚本元素放在了网页的正文中，但我们也可以把它放在头部。不过，通常情况下，脚本都会包含在正文中，或者更准确地说：放在正文的末尾。这样做是有充分理由的：脚本在它们被放置的
    HTML 文档中执行。如果你的脚本在网页的末尾，并且需要稍长时间才能完全执行——没问题。此时网页的其他部分已经加载并显示出来。如果脚本位于 HTML 文档的开头，并且因此最先执行，那么观看者可能不得不在空白页面前等待，直到
    JavaScript 代码执行完毕，这样会更不愉快。
- en: 'We have included our JavaScript program code here *as an extra file*. This
    is the usual procedure. However, you can also include (especially short) scripts
    *directly* in the HTML file. This would then look like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里将我们的 JavaScript 程序代码作为*额外文件*包含。这是常见的做法。不过，你也可以将（特别是短小的）脚本*直接*包含在 HTML 文件中。这样看起来会是这样：
- en: '**<!DOCTYPE html>**<**html>****<head>****<title>**Test Page**</title>****</head>****<body>****<script**
    type="text/JavaScript"**>**console.log("This goes to the console!")**</script>****</body>****<html>**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**<!DOCTYPE html>**<**html>****<head>****<title>**测试页面**</title>****</head>****<body>****<script**
    type="text/JavaScript"**>**console.log("This goes to the console!")**</script>****</body>****<html>**'
- en: With the attribute **type** of the **script** element, we tell the HTML engine
    of the browser that the code between the opening and closing tag (in our example
    only a single line) should be understood as JavaScript code. De facto, JavaScript
    is the only scripting language used. In the past, however, you might have encountered
    Microsoft’s VBScript here and there, whose use in practice was admittedly quite
    limited because it was only supported by Microsoft’s own browsers and had a powerful
    competitor in JavaScript.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 通过**type**属性设置**script**元素，我们告诉浏览器的 HTML 引擎，位于开始和结束标签之间的代码（在我们示例中只有一行）应当被理解为
    JavaScript 代码。事实上，JavaScript 是唯一使用的脚本语言。然而，在过去，你可能偶尔会遇到 Microsoft 的 VBScript，它的实际应用相当有限，因为它只被
    Microsoft 自家的浏览器支持，并且有一个强有力的竞争对手——JavaScript。
- en: 29.1.2 Safety Aspects
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 29.1.2 安全方面
- en: Enable Execution of Scripts in the Browser
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 启用浏览器中的脚本执行
- en: While many of the more popular websites use JavaScript in one form or another,
    they do not work or do not work properly if JavaScript code execution is disabled.
    However, all modern browsers allow you to disable the execution of script code.
    So, take a look at your browser’s settings and see if anything could get in the
    way of enjoying your first JavaScript program.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管许多流行的网站以某种形式使用 JavaScript，如果禁用 JavaScript 代码执行，它们将无法正常工作或根本无法工作。然而，所有现代浏览器都允许你禁用脚本代码的执行。所以，看看你浏览器的设置，看看是否有任何东西可能妨碍你享受第一个
    JavaScript 程序。
- en: 'When the functionality of a website depends on the ability to run JavaScript,
    you naturally want to tell the user of the page to enable JavaScript. This can
    easily be done in the HTML source code of the page by using the **noscript** element
    and giving it a message to the user as a hint, as in the following example:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个网站的功能依赖于能够运行 JavaScript 时，你自然希望提示页面用户启用 JavaScript。这可以通过在页面的 HTML 源代码中使用**noscript**元素，并给用户一个提示信息来轻松实现，示例如下：
- en: '**<noscript>**Please activate JavaScript to use this website.**</noscript>**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**<noscript>**请启用 JavaScript 才能使用此网站。**</noscript>**'
- en: The message is only displayed if JavaScript execution is disabled in the browser’s
    security settings (try it out!).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在浏览器的安全设置中禁用 JavaScript 执行时，消息才会显示（试试看！）。
- en: Visibility of the Source Code
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码的可见性
- en: Unlike PHP, JavaScript programs are interpreted by the browser (i.e., client-side).
    To do this, they must first be downloaded, which is not necessary in the case
    of PHP code, since its interpreter operates entirely on the server and does not
    use the client’s resources for execution. Therefore, you cannot hide your source
    code from the user’s eyes, even if you dump it into an extra file that you load
    from a web server with **<script src=…>**. As you will see in the following section,
    it is usually easy to see the code. True, there are methods and tools for obfuscation,
    with which the source code can be practically encrypted. But even these approaches
    have their limits because the browser has to decode the source code in order to
    execute it. So, expect your JavaScript programs to be viewable by your site’s
    viewers. This may not be true for the average user, but those who have the knowledge
    to understand the JavaScript code will know how to access it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 与 PHP 不同，JavaScript 程序是由浏览器解释的（即客户端）。为了做到这一点，JavaScript 必须先被下载，而 PHP 代码则不需要，因为它的解释器完全在服务器上运行，并不使用客户端的资源进行执行。因此，你无法将源代码隐藏在用户的视线之外，即使你将其放入一个额外的文件，并通过
    **<script src=…>** 从 web 服务器加载。正如你将在接下来的章节中看到的，通常代码是很容易被看到的。当然，也有一些混淆的方法和工具，通过它们源代码几乎可以加密。但即使是这些方法也有其限制，因为浏览器必须解码源代码才能执行它。因此，预期你的
    JavaScript 程序会被网站的访问者看到。这对于普通用户来说可能不成立，但那些有能力理解 JavaScript 代码的人会知道如何访问它。
- en: 29.2 “Hello World” in JavaScript
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 29.2 JavaScript中的“Hello World”
- en: '29.2.1 Do-it-Yourself: The (Not so) Laborious Way'
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 29.2.1 自己动手做：并不那么费力的方法
- en: 'The classic “hello world” program in JavaScript is very simple:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 经典的 JavaScript “hello world” 程序非常简单：
- en: console.log("Hello World!")
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("Hello World!")
- en: If you save this line in a JavaScript file **helloword.js** and then include
    this script in an otherwise empty (except for the mandatory elements) HTML web
    page document, as seen in the example of the previous section, you have already
    successfully completed this task.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将这一行代码保存为一个 JavaScript 文件 **helloword.js**，然后在一个其他部分为空（仅包含必需元素）的 HTML 网页文档中引入这个脚本，就像前一节的示例所示，你已经成功完成了这个任务。
- en: Now when you open the finished HTML document in your browser, you see…nothing!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你在浏览器中打开完成的 HTML 文档时，你会看到……什么也没有！
- en: 'Didn’t our simple program work? Yes, it did, it just doesn’t output the text
    in the browser window, but in a different area, the *JavaScript Console*. How
    you get to this console, which is not displayed by default and is more of a tool
    for developers, differs from browser to browser: On Windows, for example, press
    <CTRL>+<SHIFT>+<J> in Google *Chrome*, <F12> in Microsoft Edge, and <CTRL>+<SHIFT>+<I>
    (or <F12>) in Mozilla *Firefox*. You can also open the console via the menus,
    often under menu items like “More tools” or “Developer tools”. If you have more
    than one browser installed and open the console once in all browsers, you will
    immediately recognize certain similarities.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的简单程序没有工作吗？是的，它确实工作了，只是它没有在浏览器窗口中输出文本，而是在另一个区域，即 *JavaScript 控制台* 中。如何打开这个控制台，它默认不显示，而且更多的是开发者工具，因浏览器不同而有所不同：例如，在
    Windows 上，在 Google *Chrome* 中按 <CTRL>+<SHIFT>+<J>，在 Microsoft Edge 中按 <F12>，在
    Mozilla *Firefox* 中按 <CTRL>+<SHIFT>+<I>（或者 <F12>）。你也可以通过菜单打开控制台，通常在“更多工具”或“开发者工具”等菜单项下。如果你安装了多个浏览器，并且在所有浏览器中都打开了控制台，你会立刻发现一些相似之处。
- en: The first two tabs, which we will mainly work with here, usually have names
    like “Elements”, “Inspector” or similar and “Console”. Under “Elements” you see
    the HTML code of the currently loaded page and can navigate interactively in this
    HTML code. By marking an element in the HTML source code, the representation of
    the element is automatically highlighted in the web page view. This makes it easy
    to see which part of the source code leads to which part of the web page display.
    By expanding and collapsing the elements in the source code, you can also display
    the source code more compactly and better understand the hierarchical nesting
    of the HTML elements. This may not be very impressive for our small sample page
    (◘ Fig. [29.1](#Fig1)) but open the Elements view when you have another website
    open, such as Wikipedia or YouTube! Then you will see very nicely how practical
    this function is. Conversely, you can switch from *Elements* to a selection mode
    where you click on an element of the browser’s web page view and then the corresponding
    location in the page’s source code is automatically highlighted in the “Elements”
    view. For more on this useful feature, see ► Sect. [32.​6.​2](474412_1_En_32_Chapter.xhtml#Sec16).![](../images/474412_1_En_29_Chapter/474412_1_En_29_Fig1_HTML.jpg)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个标签，我们在这里主要使用的标签，通常有“元素”、“检查器”或类似的名称，以及“控制台”。在“元素”下，您可以看到当前加载页面的 HTML 代码，并可以在这些
    HTML 代码中进行交互式浏览。通过标记 HTML 源代码中的某个元素，该元素在网页视图中的表示会被自动高亮显示。这使得您能够轻松看到源代码中的哪部分对应网页显示的哪部分。通过展开和折叠源代码中的元素，您还可以更紧凑地显示源代码，更好地理解
    HTML 元素的层级嵌套。对于我们的小示例页面（◘ 图 [29.1](#Fig1)）来说，这可能没有太大影响，但当您打开其他网站时，例如维基百科或 YouTube，打开元素视图，您将能清楚地看到这个功能是多么实用。相反，您可以从*元素*切换到选择模式，在该模式下，您点击浏览器网页视图中的某个元素，然后该元素在页面源代码中的相应位置会在“元素”视图中自动高亮显示。有关这个有用功能的更多信息，请参见
    ► Sect. [32.​6.​2](474412_1_En_32_Chapter.xhtml#Sec16)。![](../images/474412_1_En_29_Chapter/474412_1_En_29_Fig1_HTML.jpg)
- en: A screenshot denotes an H T M L code under the Elements tag in the Google Chrome
    developer tools. The code comprises a Java script inside the body tag. The styles
    tag is selected on the right.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一张截图显示了 Google Chrome 开发者工具中“元素”标签下的 HTML 代码。代码包括位于 body 标签中的 JavaScript。右侧选择了样式标签。
- en: Fig. 29.1
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 29.1
- en: Developer tools in Google *Chrome*
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Google *Chrome* 开发者工具
- en: 'The JavaScript programs that are swapped out to other files can also be viewed
    in this way. If you click on a reference to a swapped-out JavaScript file in the
    HTML code, the source code immediately opens in another tab. By the way: You can
    even edit the HTML source code via the *Elements* tab, mostly by using corresponding
    options in the context menu. You can regularly save the changes as an HTML file
    with the key combination <CTRL>+<S>.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 被切换到其他文件的 JavaScript 程序也可以通过这种方式查看。如果您点击 HTML 代码中引用的切换出去的 JavaScript 文件，源代码会立即在另一个标签中打开。顺便提一句：您甚至可以通过*元素*标签编辑
    HTML 源代码，通常是通过使用上下文菜单中的相应选项。您可以定期使用快捷键 <CTRL>+<S> 将更改保存为 HTML 文件。
- en: For our “Hello World” JavaScript program, however, we are primarily interested
    in the second tab, the *Console*. If you open it, you will see that our JavaScript
    code has indeed produced an output (◘ Fig. [29.2](#Fig2)).![](../images/474412_1_En_29_Chapter/474412_1_En_29_Fig2_HTML.jpg)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的“Hello World”JavaScript 程序来说，我们主要关心的是第二个标签，即*控制台*。如果您打开它，您将看到我们的 JavaScript
    代码确实产生了输出（◘ 图 [29.2](#Fig2)）。![](../images/474412_1_En_29_Chapter/474412_1_En_29_Fig2_HTML.jpg)
- en: A screenshot of the developer tool denotes the output. The console tab is selected
    at the top and a text at the bottom reads Hello World.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者工具的截图显示了输出。顶部选择了控制台标签，底部的文本显示为 Hello World。
- en: Fig. 29.2
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 29.2
- en: Output of the “Hello World” program in the console
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台中的“Hello World”程序输出
- en: This means that we can use the console to print outputs that the viewer of the
    website does not see immediately. This is especially useful in development to
    output debug messages that do not affect the actual display of the web page in
    this way. But also the JavaScript interpreter of the browser uses the console
    to output error or warning messages.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们可以使用控制台打印出观众在网站上不会立即看到的输出。这在开发过程中尤其有用，可以输出不影响网页实际显示的调试信息。同时，浏览器的 JavaScript
    解释器也使用控制台输出错误或警告信息。
- en: In the example of ◘ Fig. [29.3](#Fig3), the first quotation mark was forgotten
    in the source code line **console.log(Hello world!')**. The interpreter points
    out the syntax error to us when executing the code.![](../images/474412_1_En_29_Chapter/474412_1_En_29_Fig3_HTML.jpg)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在◘ 图 [29.3](#Fig3) 中，源代码行 **console.log(Hello world!')** 中遗漏了第一个引号。当执行代码时，解释器会指出语法错误。![](../images/474412_1_En_29_Chapter/474412_1_En_29_Fig3_HTML.jpg)
- en: A screenshot of the Developers tool highlights the Console tab at the top. It
    exhibits an uncaught syntax error message at the bottom.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者工具的截图高亮显示了顶部的 Console 标签。底部显示了一个未捕获的语法错误消息。
- en: Fig. 29.3
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 29.3
- en: Error message in the JavaScript console of Google *Chrome*
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Google *Chrome* 中的 JavaScript 控制台错误消息
- en: You can also use the console in an interactive mode, that is, you can enter
    and execute statements directly in the console. Unlike Python, however, the console
    in JavaScript does not have a separate namespace from the web page. If you execute
    a program and create variables, these variables are then available in the console
    for further interactive editing. Most web browsers also support code completion
    in the console. When you start typing, you will be presented with a pop-up menu
    with several choices that can help you speed up the typing process.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在交互模式下使用控制台，也就是说，你可以直接在控制台中输入并执行语句。然而，与 Python 不同的是，JavaScript 中的控制台与网页没有独立的命名空间。如果你执行一个程序并创建变量，这些变量将在控制台中可用，供进一步的交互式编辑。大多数网页浏览器还支持控制台中的代码补全。当你开始输入时，系统会弹出一个菜单，提供多个选项，帮助你加速输入过程。
- en: We will work quite intensively with the console in the next chapter because
    it offers a simple way to quickly output some information, and the next chapter
    will focus precisely not on inputs and outputs, but on other concepts to which
    we want to devote our full attention. In ► Sect. [31.​7](474412_1_En_31_Chapter.xhtml#Sec19),
    where we deal specifically with the input and output of data, we will also see
    how you can write data directly into the web page.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入使用控制台，因为它提供了一种简单的方式来快速输出一些信息，而下一章的重点将不在输入和输出上，而是其他概念，我们希望将全部精力集中在这些概念上。在►
    第 [31.7](474412_1_En_31_Chapter.xhtml#Sec19)节，我们将专门讨论数据的输入和输出，也将看到如何直接将数据写入网页中。
- en: 'If you can’t wait, and think a “hello world” program that doesn’t write directly
    to the web page isn’t a real “hello world” program, try this code in your script
    file:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你等不及，认为一个没有直接写入网页的“hello world”程序不算真正的“hello world”程序，可以在你的脚本文件中尝试这段代码：
- en: document.write('<p>Hello World</p>');
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: document.write('<p>Hello World</p>');
- en: After refreshing the view (typically with F5), you see the output in the browser,
    not in the console, but in the actual page view.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新视图（通常使用 F5 后），你将看到输出显示在浏览器中，而不是在控制台，而是在实际的页面视图中。
- en: '29.2.2 With a Little Help: Fast Implementation with a Web Service'
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 29.2.2 稍微帮助一下：通过网络服务快速实现
- en: It’s not that easy to just start programming in JavaScript, because first of
    all you have to create a web page and integrate your script into it. It’s easier
    with web services like the open-source project *JS Bin* (► [http://​www.​jsbin.​com](http://www.jsbin.com)),
    which allow you to get started at will without any fuss. *JS Bin* executes the
    JavaScript code you type in the appropriate pane at the end of the HTML body (but
    without displaying a reference to your script in the HTML code). You can also
    edit the HTML code manually. At the top of the screen you can use the toggle buttons
    to determine which views are displayed; the *Output* is the finished website (◘
    Fig. [29.4](#Fig4)).![](../images/474412_1_En_29_Chapter/474412_1_En_29_Fig4_HTML.jpg)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 直接开始编写 JavaScript 程序并不那么容易，因为首先你得创建一个网页，并将脚本集成进去。使用像开源项目 *JS Bin*（► [http://​www.​jsbin.​com](http://www.jsbin.com)）这样的网络服务会更简单，它们可以让你随意开始，而无需任何繁琐的步骤。*JS
    Bin* 会在 HTML 代码的适当位置执行你输入的 JavaScript 代码（但不会在 HTML 代码中显示对脚本的引用）。你还可以手动编辑 HTML
    代码。在屏幕顶部，你可以使用切换按钮来选择显示哪些视图；*Output* 视图展示的是完成的网页（◘ 图 [29.4](#Fig4)）。![](../images/474412_1_En_29_Chapter/474412_1_En_29_Fig4_HTML.jpg)
- en: A screenshot denotes 4 sections. It exhibits an H T M L code, the JavaScript,
    the console, and the output text reading Hello World from left to right. The respective
    tabs are highlighted at the top.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 截图显示了四个部分。它展示了从左到右的 HTML 代码、JavaScript、控制台和输出文本，读取 "Hello World"。各个标签页在顶部高亮显示。
- en: Fig. 29.4
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 29.4
- en: The JavaScript web service JS Bin
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 网络服务 JS Bin
- en: 'Tip: If you are working with *JS Bin*, it is recommended to uncheck the *Auto-run
    JS* checkbox on the right side of the screen and to always start the execution
    of the JavaScript manually via the *Run with JS* button instead. Otherwise, *JS
    Bin will* re-execute the current state of your JavaScript code every time you
    hit a key, which of course leads to an unpleasantly long list of useless error
    messages in the console.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：如果你正在使用*JS Bin*，建议取消勾选屏幕右侧的*自动运行 JS*复选框，并始终通过*使用 JS 运行*按钮手动启动 JavaScript
    执行。否则，*JS Bin 会*在你每次按下键时重新执行当前的 JavaScript 代码，这当然会导致控制台中出现一长串无用的错误信息。
- en: In addition to *JS Bin*, there are a number of other services that offer similar
    functionalities, such as *Plunker* (► [http://​plnkr.​co](http://plnkr.co)) or
    *JS.do* (► [http://​www.​js.​do](http://www.js.do)), although the structure is
    somewhat different in each case. What all these services have in common is that
    they are well suited for trying things out. However, if you want to get serious
    about JavaScript, it is advisable to work offline with your own “infrastructure”
    (HTML and JavaScript code files). And that is exactly what we will do in the following
    chapters.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 除了*JS Bin*，还有许多其他服务提供类似的功能，比如*Plunker*（► [http://​plnkr.​co](http://plnkr.co)）或*JS.do*（►
    [http://​www.​js.​do](http://www.js.do)），尽管每种情况的结构有所不同。这些服务的共同点是，它们非常适合用来尝试一些东西。然而，如果你想认真学习
    JavaScript，建议离线工作，并使用你自己的“基础设施”（HTML 和 JavaScript 代码文件）。这正是我们将在接下来的章节中所做的。
- en: 29.3 Summary
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 29.3 小结
- en: In this chapter, we looked at how to get a JavaScript program running.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了如何让 JavaScript 程序运行。
- en: 'Be sure to take the following points from this chapter:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 确保记住本章中的以下要点：
- en: JavaScript programs typically run in web pages, so they must be integrated into
    them.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript 程序通常在网页中运行，因此必须将它们集成到网页中。
- en: This is done with the help of the HTML element **script**; this can either be
    given a reference to a script file with JavaScript with the attribute **src**,
    or the JavaScript code is embedded directly into the web page between the **<script>…</script>**
    tags.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这可以通过 HTML 元素**script**来完成；可以使用**src**属性引用一个 JavaScript 脚本文件，或者将 JavaScript
    代码直接嵌入到网页中的**<script>…</script>**标签之间。
- en: It is good practice to include scripts *at the end of* the web page so that
    the web page loads first and can be viewed while the script is still loading or
    running, if applicable.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最佳实践是在网页的*末尾*包含脚本，这样网页可以先加载并在脚本仍在加载或运行时进行查看（如果适用）。
- en: The HTML element **noscript** can be used to display a message if the user has
    disabled JavaScript in his browser (normally JavaScript is already enabled thanks
    to corresponding browser default settings).
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML 元素**noscript**可用于在用户禁用浏览器中的 JavaScript 时显示消息（通常，JavaScript 已根据相应的浏览器默认设置启用）。
- en: JavaScript code is always visible to the viewer of the website. So, you cannot
    “hide” your code.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript 代码始终对网站的浏览者可见。因此，你不能“隐藏”你的代码。
- en: Web services like *JS Bin* or *Plunker* allow you to try out JavaScript without
    having to worry about integrating it into a web page; that’s handy for quick testing,
    but if you want to get serious about JavaScript, you can’t avoid learning how
    to integrate scripts into web pages (which is really not complicated).
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像*JS Bin*或*Plunker*这样的网络服务允许你在无需担心将 JavaScript 集成到网页中的情况下进行尝试；这对于快速测试非常方便，但如果你想认真学习
    JavaScript，就不能避免学习如何将脚本集成到网页中（这其实并不复杂）。
