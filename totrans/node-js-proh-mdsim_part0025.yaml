- en: 'Chapter 5: JavaScript Arrays'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Chapter 4, we explored JavaScript functions, which allow us to organize code
    into reusable blocks. Now, let's dive into JavaScript arrays, a powerful data
    structure that enables us to store and manipulate collections of elements.
  prefs: []
  type: TYPE_NORMAL
- en: 5.1 Introduction to Arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An array in JavaScript is a data structure that allows us to store multiple
    values in a single variable. Arrays are ordered, indexed collections, where each
    value is assigned a unique index starting from 0\. Arrays can contain elements
    of any data type, such as numbers, strings, objects, or even other arrays. They
    provide various methods and properties for performing operations on the stored
    data efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: 5.2 Creating Arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two common ways to create arrays in JavaScript: using array literals
    and the `Array` constructor.'
  prefs: []
  type: TYPE_NORMAL
- en: 5.2.1 Array Literals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Array literals are the simplest and most commonly used way to create arrays.
    They involve enclosing a comma-separated list of values inside square brackets
    `[]`. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we create an array called `fruits` with three elements: `''apple''`,
    `''banana''`, and `''orange''`.'
  prefs: []
  type: TYPE_NORMAL
- en: 5.2.2 Using the Array Constructor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JavaScript also provides the `Array` constructor to create arrays. We can use
    the `new` keyword followed by `Array()` to create an empty array or pass values
    inside the parentheses to initialize the array with specific elements. Here are
    a few examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the first example, we create an empty array called `emptyArray`. In the
    second example, we create an array called `numbers` with five elements: `1`, `2`,
    `3`, `4`, and `5`.'
  prefs: []
  type: TYPE_NORMAL
- en: 5.3 Accessing Array Elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can access individual elements in an array using their index. The index
    starts from `0` for the first element and increments by `1` for each subsequent
    element. We use square brackets `[]` and specify the index inside them. Here''s
    an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we access and print the elements of the `fruits` array by their
    respective indices.
  prefs: []
  type: TYPE_NORMAL
- en: 5.4 Modifying Array Elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Arrays in JavaScript are mutable, meaning we can modify their elements after
    they are created. We can assign new values to specific indices using the assignment
    operator `=`. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we modify the element at index `1` of the `fruits` array and
    change it from `'banana'` to `'grape'`.
  prefs: []
  type: TYPE_NORMAL
- en: 5.5 Array Length
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `length` property of an array allows us to determine the number of elements
    it contains. We can access this property using dot notation (`array.length`).
    Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we retrieve and print the length of the `fruits` array, which
    is `3`.
  prefs: []
  type: TYPE_NORMAL
- en: 5.6 Array Methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JavaScript provides a wide range of built in array methods that allow us to
    perform various operations on arrays efficiently. Let''s explore some commonly
    used array methods:'
  prefs: []
  type: TYPE_NORMAL
- en: 5.6.1 `push()` and `pop()`
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `push()` method adds one or more elements to the end of an array, while
    the `pop()` method removes the last element from an array and returns it. Here''s
    an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we use `push()` to add the element `'grape'` to the end of
    the `fruits` array. Then, we use `pop()` to remove the last element `'grape'`
    and store it in the `removedFruit` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 5.6.2 `shift()` and `unshift()`
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `shift()` method removes the first element from an array and returns it,
    while the `unshift()` method adds one or more elements to the beginning of an
    array. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we use `shift()` to remove the first element `'apple'` from
    the `fruits` array. Then, we use `unshift()` to add the elements `'grape'` and
    `'kiwi'` to the beginning of the array.
  prefs: []
  type: TYPE_NORMAL
- en: 5.6.3 `slice()`
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `slice()` method extracts a portion of an array and returns a new array
    containing the selected elements. It takes two parameters: the starting index
    (inclusive) and the ending index (exclusive). Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we use `slice(1, 4)` to extract elements from index `1` (inclusive)
    to index `4` (exclusive) from the `fruits` array.
  prefs: []
  type: TYPE_NORMAL
- en: 5.6.4 `concat()`
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `concat()` method combines two or more arrays and returns a new array.
    It does not modify the original arrays. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we use `concat()` to combine the `fruits` array with the `moreFruits`
    array and store the result in the `combinedFruits` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 5.7 Conclusion
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we explored JavaScript arrays, a powerful data structure that
    allows us to store and manipulate collections of elements. We learned about creating
    arrays using array literals and the `Array` constructor, accessing and modifying
    array elements, retrieving the length of an array, and using various array methods
    like `push()`, `pop and `slice()`. Arrays provide a flexible and efficient way
    to work with collections of data in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will delve into JavaScript objects, another important
    concept in the language. Objects allow us to represent complex data structures
    and organize related data into key-value pairs. Get ready to explore the world
    of JavaScript objects and unlock their full potential!
  prefs: []
  type: TYPE_NORMAL
