- en: Chapter 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction to JavaScript
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine we''re sitting together in a cozy cafe, surrounded by the aroma of
    fresh coffee, as we discuss one of the most important and versatile programming
    languages ​​in the world: JavaScript. This is the tone of our journey: an open,
    relaxed and, above all, enriching conversation.'
  prefs: []
  type: TYPE_NORMAL
- en: History and evolution of JavaScript
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript was born at a crucial moment in the history of the internet. In 1995,
    when the web was starting to gain traction, there was a growing need to make web
    pages more interactive. Most pages were static, offering little beyond text and
    images. It was in this scenario that Brendan Eich, a developer at Netscape Communications,
    created JavaScript in just 10 days. Originally called Mocha and later LiveScript,
    the name JavaScript was chosen to take advantage of the popularity of Java, another
    programming language on the rise at the time.
  prefs: []
  type: TYPE_NORMAL
- en: The first version of JavaScript was quite limited, but it introduced fundamental
    concepts that are still used today. Over time, JavaScript has evolved significantly.
    In 1996, Netscape submitted JavaScript to ECMA (European Computer Manufacturers
    Association) for standardization, resulting in the creation of ECMAScript. Version
    1.0 of ECMAScript was released in 1997, marking the beginning of a new era for
    the language.
  prefs: []
  type: TYPE_NORMAL
- en: Since then, JavaScript has undergone several updates and improvements. The ECMAScript
    3 version, released in 1999, brought many improvements, including support for
    regular expressions and better exception handling. However, it was the ECMAScript
    5 version, released in 2009, that really established JavaScript as a powerful
    and versatile language. This version introduced several important features, such
    as strict mode, getters and setters, and high-order functions.
  prefs: []
  type: TYPE_NORMAL
- en: But the real revolution came with ECMAScript 6, also known as ES6 or ECMAScript
    2015\. This update brought a series of new features that transformed the way developers
    write JavaScript. Among the new features were arrow functions, classes, modules,
    promises and much more. These additions have made JavaScript more robust, efficient,
    and modern, enabling the creation of complex, dynamic web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Since then, JavaScript has continued to evolve with annual releases of new versions
    of ECMAScript, each bringing incremental improvements and new functionality to
    meet the growing demands of the development community. Today, JavaScript is a
    mature and widely adopted language used by millions of developers around the world
    to create a wide range of applications, from simple web page scripts to complex
    server applications.
  prefs: []
  type: TYPE_NORMAL
- en: Importance and applications in modern web development
  prefs: []
  type: TYPE_NORMAL
- en: The importance of JavaScript in modern web development cannot be underestimated.
    It is one of the three main web technologies, along with HTML and CSS. While HTML
    defines the structure of content and CSS takes care of presentation, JavaScript
    adds the interactivity and dynamics that make the web so rich and engaging.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript allows developers to create rich, interactive user experiences. With
    it, you can validate forms, create animations, manipulate DOM (Document Object
    Model) elements, respond to user events and much more. Essentially, JavaScript
    is what makes the web alive and responsive.
  prefs: []
  type: TYPE_NORMAL
- en: One of the biggest leaps in the use of JavaScript was the introduction of frameworks
    and libraries that facilitated and accelerated web development. Libraries like
    jQuery have simplified DOM manipulation and event management, making JavaScript
    more accessible for developers of all skill levels. Frameworks like Angular, React,
    and Vue.js have taken this a step further, providing powerful frameworks for building
    complex, scalable web applications.
  prefs: []
  type: TYPE_NORMAL
- en: With the advent of Node.js in 2009, JavaScript expanded beyond the browser,
    allowing developers to write server-side code in JavaScript. This opened up new
    possibilities, allowing a single language to be used on both the frontend and
    backend. Node.js has brought benefits such as high performance and scalability,
    making it a popular choice for developing servers, APIs and microservices.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to web development, JavaScript has also found applications in other
    areas. It is widely used in game development, mobile applications, and even the
    Internet of Things (IoT). Frameworks like React Native allow you to create native
    mobile apps using JavaScript, while libraries like Three.js make it possible to
    develop 3D graphics and complex visualizations directly in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of main features
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have an understanding of the history and importance of JavaScript,
    let's explore some of its key features that make it such a powerful and versatile
    language.
  prefs: []
  type: TYPE_NORMAL
- en: 'DOM Manipulation: One of the most powerful features of JavaScript is the ability
    to manipulate the DOM. This allows developers to dynamically select, modify, and
    create HTML elements. With the DOM, you can change the content of a web page without
    having to reload it, providing a more fluid and interactive user experience.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Events:  JavaScript is excellent at handling events. From button clicks and
    mouse movements to page loading and keyboard actions, JavaScript can respond to
    virtually any event that occurs on a web page. This is key to creating responsive
    and interactive user interfaces.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Functions:  Functions are reusable blocks of code that can be called whenever
    necessary. JavaScript supports anonymous functions, high-order functions, and
    arrow functions, providing great flexibility in writing modular and reusable code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Asynchronous Programming:  Asynchronous programming is a fundamental feature
    of JavaScript, allowing long-running operations such as network calls to be executed
    without blocking the main flow of the program. With promises and the async/await
    syntax, writing asynchronous code becomes clearer and more manageable.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Arrays and Objects:  JavaScript provides powerful data structures like arrays
    and objects. Arrays allow you to store and manipulate collections of data, while
    objects allow you to create complex data structures with properties and methods.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Classes and Inheritance:  With the introduction of ES6, JavaScript now supports
    classes and inheritance. This makes it easier to create objects and implement
    object-oriented design patterns, making code more organized and reusable.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modules:  Modules allow you to divide code into smaller, reusable parts. This
    is especially useful in large projects where modularity and code organization
    are crucial for maintainability and scalability.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we explore the rich history and evolution of JavaScript, its
    importance in modern web development, and an overview of its main features. JavaScript
    is not just a programming language; is an essential tool that empowers developers
    to create incredible, innovative web experiences. As we progress through this
    book, we will continue to deepen our JavaScript knowledge and skills, exploring
    everything from the fundamentals to advanced applications. Let's turn challenges
    into opportunities for growth and innovation together.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Development Environment Configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine that we are once again sitting in a cafe, with the comforting aroma
    of fresh coffee all around us, ready to dive into a fundamental aspect of developing
    with JavaScript: setting up your development environment. This is a crucial step,
    as a well-configured environment not only increases your productivity, but also
    makes your work more enjoyable and efficient. Let''s explore together essential
    tools, how to set up your local environment, and get started with Node.js and
    npm.'
  prefs: []
  type: TYPE_NORMAL
- en: Essential tools (IDEs, text editors, browsers)
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the right tools is like selecting the perfect instruments for a symphony.
    They need to be tuned to work in harmony and facilitate your development process.
  prefs: []
  type: TYPE_NORMAL
- en: 'IDEs (Integrated Development Environments):'
  prefs: []
  type: TYPE_NORMAL
- en: A good IDE can be the backbone of your daily work. IDEs offer a range of features
    that simplify the process of writing, debugging and testing your code. Among the
    most popular are Visual Studio Code, WebStorm and Sublime Text.
  prefs: []
  type: TYPE_NORMAL
- en: '- Visual Studio Code (VS Code):  Free and open source, VS Code is highly customizable
    with extensions that support JavaScript and many other frameworks and libraries.
    It offers autocompletion, syntax highlighting, and Git integration.'
  prefs: []
  type: TYPE_NORMAL
- en: '- WebStorm:  A paid but powerful IDE developed by JetBrains, known for its
    robust features for JavaScript development, including built-in support for frameworks
    such as React, Angular and Vue.js.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Sublime Text:  Light and fast, Sublime Text is a text editor that, with the
    right plugins, can be transformed into an efficient development environment for
    JavaScript.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Text editors:'
  prefs: []
  type: TYPE_NORMAL
- en: For those who prefer a lighter approach, text editors are an excellent choice.
    They are fast, configurable and, when combined with the terminal, can be extremely
    powerful.
  prefs: []
  type: TYPE_NORMAL
- en: '- Atom:  A hackable text editor for the 21st century, made by GitHub. Atom
    is modern, affordable, and hackable to the core. With packages like teletype,
    you can collaborate in real time.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Brackets:  A modern code editor focused on web development, with integrated
    live preview, which allows you to see code changes in real time in the browser.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: Browsers are essential not only for viewing your applications, but also for
    debugging and testing your code. Major browsers offer robust developer tools.
  prefs: []
  type: TYPE_NORMAL
- en: '- Google Chrome:  With its DevTools, Chrome is a favorite among many developers.
    It allows you to inspect elements, debug JavaScript, monitor network performance,
    and much more.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Firefox:  It also has excellent developer tools, especially with its JavaScript
    console and element inspector.'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring local development environments
  prefs: []
  type: TYPE_NORMAL
- en: Having a well-configured local development environment is essential to work
    efficiently and avoid problems that only arise in production. Let's go through
    a step-by-step guide to setting up an ideal environment.
  prefs: []
  type: TYPE_NORMAL
- en: '1\. Installation of Node.js and npm:  Node.js is a server-side JavaScript execution
    environment, and npm (Node Package Manager) is the package manager for Node.js.
    They are fundamental to modern JavaScript development.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Installation:  Go to the official Node.js website (https://nodejs.org/) and
    download the LTS (Long Term Support) version. Installing Node.js will also install
    npm automatically.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Verification:  After installation, open your terminal and run the following
    commands to check if everything is working:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: These commands should return the installed version of Node.js and npm, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Git Configuration:  Git is a version control system that allows you to
    track changes to code over time. It''s essential for working on collaborative
    projects and managing versions of your code.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Installation:  Download Git from the official website (https://git-scm.com/)
    and follow the installation instructions.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Initial setting:  After installation, configure your username and email:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '3\. VS Code Setup:  If you opted for Visual Studio Code, configuring some extensions
    can make your work more efficient.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Recommended extensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '- ESLint: Helps maintain code consistency and identify errors.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Prettier:  Automatically formats your code so it is clean and consistent.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Live Server: Starts a local server with automatic reloading, ideal for web
    development.'
  prefs: []
  type: TYPE_NORMAL
- en: '- GitLens: Provides insights into source code directly in the editor, making
    it easier to track changes and authorship.'
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Terminal configuration:  A well-configured terminal can increase your productivity.
    Tools like zsh with Oh My Zsh can offer advanced autocomplete and customizable
    themes.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Installation of zsh and Oh My Zsh:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '5\. Test Project:  To make sure everything is working, let''s create a simple
    test project.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Creation of the project directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '- Node.js project initialization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '- Creating a simple JavaScript file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `index.js` in your project directory and add the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '- File execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You should see the message "Hello World!" at the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Node.js and npm
  prefs: []
  type: TYPE_NORMAL
- en: Node.js revolutionized JavaScript development by allowing the language to run
    server-side. This means you can write complete applications, both frontend and
    backend, using just JavaScript. Let's explore the basics so you can start leveraging
    the power of Node.js and npm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Node.js:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js is a JavaScript runtime environment built on Chrome's V8 engine. It
    is known for its high performance and ability to handle asynchronous I/O (input/output)
    operations efficiently, which makes it ideal for real-time applications such as
    chatbots, online games, and APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'npm (Node Package Manager):'
  prefs: []
  type: TYPE_NORMAL
- en: npm is the default package manager for Node.js. It allows you to install, share
    and manage dependencies of your JavaScript project. With over a million packages
    available in the npm repository, you can find libraries for almost any functionality
    you need.
  prefs: []
  type: TYPE_NORMAL
- en: '- Installation of packages:  Installing packages with npm is simple. For example,
    to install Express, a popular framework for Node.js, you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '- Script creation: In the `package.json` file, you can define scripts to automate
    common tasks. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '- Execution of scripts:  To run the script defined above you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: With these settings and tools, you are ready to begin your JavaScript development
    journey. A well-configured development environment not only makes your daily work
    easier but also improves your efficiency and productivity. As we advance, we will
    continue to deepen our knowledge, exploring everything from the fundamentals to
    the most advanced applications of JavaScript. Let's turn challenges into opportunities
    for growth and innovation together.
  prefs: []
  type: TYPE_NORMAL
