- en: Chapter 15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These are the solutions to the exercises found in the section [​*Exercises*​](f_0152.xhtml#binary.trees.exercises).
  prefs: []
  type: TYPE_NORMAL
- en: 'The tree should look like this. Note that it’s not well balanced, as the root
    node only has a right subtree and no left one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![images/binary_trees/solution_1.png](images/binary_trees/solution_1.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Search within a balanced binary search tree takes a maximum of about log(N)
    steps. So, if N is 1,000, search should take a maximum of about 10 steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The greatest value within a binary search tree will always be the bottom rightmost
    node. We can find it by recursively following each node’s right child until we
    hit the bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ​  | ​**function**​ max(node) { |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**if**​ (node.rightChild) { |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**return**​ max(node.rightChild); |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | } ​**else**​ { |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**return**​ node.value; |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | } |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | } |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: 'Here’s the order for preorder traversal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![images/binary_trees/solution_4.png](images/binary_trees/solution_4.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Here is the order for postorder traversal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![images/binary_trees/solution_5.png](images/binary_trees/solution_5.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
