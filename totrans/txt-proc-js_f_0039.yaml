- en: '| Recipe 28 | Matching a Range of Characters with Character Classes |'
  prefs: []
  type: TYPE_TB
- en: Task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Suppose you’re tasked with searching scanned documents and filtering applicants
    aged between 20 and 40\. The info you need to extract is preceded with “age:”.
    So, your regex pattern should match the word “age,” followed by a colon, followed
    by a space, and followed by a range of numbers between 20 and 40\.
  prefs: []
  type: TYPE_NORMAL
- en: 'With what you’ve learned so far, you could use vertical bars in a pair of parentheses
    to specify the possible matches, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/character_class_range/range_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/character_class_range/range_ex1.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | /Age: (2(0&#124;1&#124;2&#124;3&#124;4&#124;5&#124;6&#124;7&#124;8&#124;9)&#124;3(0&#124;1&#124;2&#124;3&#124;4&#124;5&#124;6&#124;7&#124;8&#124;9)&#124;40)/
    |'
  prefs: []
  type: TYPE_TB
- en: But what would you do if you wanted to look for a larger range of numbers? You
    need a better way of defining the range of characters in regex.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use a character class and place a hyphen between the range of numbers you’re
    looking for:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/character_class_range/range_ex2_v1.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/character_class_range/range_ex2_v1.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** re = */Age:* *(**2**[**0-9**]**&#124;3**[**0-9**]**&#124;40**)**/*;
    |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"Name: John &#124; Age: 23"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"Name: Ana &#124; Age: 54"*); *// → false* |'
  prefs: []
  type: TYPE_TB
- en: 'When a hyphen appears within a character class, it’s treated as a metacharacter.
    But there’s an exception: if it’s the first or last character in the class, it
    can’t possibly define a range, so it loses its special meaning and is considered
    a normal character.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can even further shrink the pattern like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/character_class_range/range_ex2_v2.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/character_class_range/range_ex2_v2.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** re = */Age:* *([**23**][**0-9**]**&#124;40**)**/*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"Name: John &#124; Age: 23"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"Name: Ana &#124; Age: 54"*); *// → false* |'
  prefs: []
  type: TYPE_TB
- en: Here, [23] matches 2 or 3, and [0-9] matches a single digit in the range of
    0 to 9\. Together, they match a number between 20 to 39\. The vertical bar at
    the end tells the engine to either match 20-39 or 40.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If your regex involves only verifying a range of digits, you can achieve the
    same result with JavaScript’s built-in methods. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/character_class_range/range_pure_js.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/character_class_range/range_pure_js.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** str1 = *"Name: John &#124; Age: 23"*; |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** str2 = *"Name: Ana &#124; Age: 54"*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | **function** verifyAge(str) { |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** index = str.indexOf(*"Age: "*); |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** endIndex = index + 5; |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** age = str.slice(endIndex, endIndex + 2); |'
  prefs: []
  type: TYPE_TB
- en: '|   | **if** (age >= 20 && age <= 40) { |'
  prefs: []
  type: TYPE_TB
- en: '|   | **return** **true**; |'
  prefs: []
  type: TYPE_TB
- en: '|   | } **else** { |'
  prefs: []
  type: TYPE_TB
- en: '|   | **return** **false**; |'
  prefs: []
  type: TYPE_TB
- en: '|   | } |'
  prefs: []
  type: TYPE_TB
- en: '|   | } |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | console.log(verifyAge(str1)); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '|   | console.log(verifyAge(str2)); *// → false* |'
  prefs: []
  type: TYPE_TB
- en: 'This code performs the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'It finds the index of Age: in the input string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It adds the length of the substring Age: to the index to get the position of
    the digits'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It extracts the digits using the slice() method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It then checks if the extracted age is within a valid range using the less than
    or equal (<=) and greater than or equal (>=) operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Letting JavaScript determine whether a digit is in the range is often less error-prone.
    A common mistake among regex learners is to define double-digit ranges with a
    single-character class. The pattern [12-24] doesn’t match a number between 12
    and 24\. Instead, it matches a “1,” “2,” or “4” (equivalent to [124]).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how the regex engine interprets [12-24]:'
  prefs: []
  type: TYPE_NORMAL
- en: 1 matches the character “1”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2-2 matches a single character in the range between “2” and “2”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4 matches the character “4”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To define a pattern that matches a double-digit range, we’ll need to use two
    character classes and a vertical bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/character_class_range/range_ex3_v1.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/character_class_range/range_ex3_v1.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** re = */1**[**2-9**]**&#124;2**[**0-4**]**/*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"10"*); *// → false* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"15"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"24"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"25"*); *// → false* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"015"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"240"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: 'Is there anything missing in this pattern? Yes, a pair of word boundaries (\b).
    Without word boundaries, the pattern would also match “015” and “150.” So, to
    match a double-digit range between 12 and 24, our pattern should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/character_class_range/range_ex3_v2.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/character_class_range/range_ex3_v2.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** re = */**\b**1**[**2-9**]**&#124;2**[**0-4**]\b**/*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"10"*); *// → false* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"15"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"24"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"25"*); *// → false* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"015"*); *// → false* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"240"*); *// → false* |'
  prefs: []
  type: TYPE_TB
- en: 'The range we define with a hyphen isn’t limited to digits. We can define a
    range of alphabets, too. For example, [a-z] matches any lowercase letter, and
    [A-Z] matches any uppercase letter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/character_class_range/range_ex4_v1.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/character_class_range/range_ex4_v1.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** re = */Group* *[**A-Z**]**/*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"Group B"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"Group 2"*); *// → false* |'
  prefs: []
  type: TYPE_TB
- en: 'We can even list multiple ranges, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/character_class_range/range_ex4_v2.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/character_class_range/range_ex4_v2.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** re = */Group* *[**A-Z0-9**]**/*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"Group B"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"Group 2"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: 'The order in which we specify the ranges doesn’t matter. So, [A-Z0-9] is the
    same as [0-9A-Z]. To list the range of characters we don’t want to be included,
    we can apply a caret (^). If we use /Group [^A-C]/, the class matches “Group”
    followed by a space followed by a character that’s not “A,” “B,” or “C”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/character_class_range/range_ex5.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/character_class_range/range_ex5.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** re = */Group* *[^**A-C**]**/*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"Group A"*); *// → false* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"Group B"*); *// → false* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"Group C"*); *// → false* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"Group D"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"Group 5"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: Using Predefined Ranges
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Matching a range of characters is one of the most common tasks in regular expressions.
    For this reason, regex flavors offer special characters as shorthands for matching
    character ranges. Most shorthands comprise a backslash and a character like \d,
    which matches a digit character. The full stop (.) is an exception. It’s the only
    shorthand character class that isn’t preceded by a backslash.
  prefs: []
  type: TYPE_NORMAL
- en: Keep the following list of shorthand character classes bookmarked—they are bound
    to come in handy.
  prefs: []
  type: TYPE_NORMAL
- en: Digit Character (\d)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '\d matches any ASCII digit character, which is equivalent to [0-9]. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/character_class_range/range_ex6.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/character_class_range/range_ex6.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** re = */**\d**/*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"5"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"a"*); *// → false* |'
  prefs: []
  type: TYPE_TB
- en: Word Character (\w)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '\w matches any ASCII word characters, which is the same as [A-Za-z0-9_]. Keep
    in mind that the underscore is a word character in regex:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/character_class_range/range_ex7.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/character_class_range/range_ex7.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** re = */**\w**/*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"5"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"a"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"_"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"*"*); *// → false* |'
  prefs: []
  type: TYPE_TB
- en: Space Character (\s)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '\s matches any Unicode whitespace character. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/character_class_range/range_ex8.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/character_class_range/range_ex8.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** re = */**\s**/*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"5"*); *// → false* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*" "*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: As you’ll see later in this book, an interesting use of \s is to remove duplicate
    whitespaces from a string (see Recipe 62, [*Removing Duplicate Whitespaces*](f_0074.xhtml#rcp.removing_dup_whitespaces)).
  prefs: []
  type: TYPE_NORMAL
- en: Non-Digit Character (\D)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '\D matches any character that isn’t a digit, which is the same as [^\d] or
    [^0-9]:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/character_class_range/range_ex9.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/character_class_range/range_ex9.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** re = */**\D**/*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"5"*); *// → false* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"a"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*" "*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '| Negated Shorthands |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| ![images/aside-icons/info.png](images/aside-icons/info.png) | \D, \W, and
    \S are the negated forms of \d, \w, and \s respectively. That means they match
    the opposite of what normal shorthand character classes match. |'
  prefs: []
  type: TYPE_TB
- en: Non-Word Character (\W)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '\W matches any character that isn’t a word character. Short for [^\w] and [^A-Za-z0-9_]:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/character_class_range/range_ex10.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/character_class_range/range_ex10.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** re = */**\W**/*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"5"*); *// → false* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"a"*); *// → false* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*" "*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"*"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: Non-Space Character (\S)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '\S matches any character other than whitespace. Short for [^\s]:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/character_class_range/range_ex11.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/character_class_range/range_ex11.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** re = */**\S**/*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"5"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"a"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*" "*); *// → false* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"*"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '| Where Can You Use Shorthands? |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| ![images/aside-icons/tip.png](images/aside-icons/tip.png) | Shorthands may
    appear both inside and outside square brackets. For instance, while \s\d matches
    a whitespace character followed by a digit character, [\s\d] matches either a
    single whitespace character or a single digit character. |'
  prefs: []
  type: TYPE_TB
- en: Single Character (.)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A full stop (.) matches any single character except for a line break. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/character_class_range/range_ex12.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/character_class_range/range_ex12.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** re = */./*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"5"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*" "*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"*"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: '|   | re.test(*"abc"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: Notice the last test that returns true for “abc.” Here, the full stop matches
    “a” in “abc,” not the entire string. To match three consecutive characters, you
    can use the regex /.../. Alternatively, you can use /.{3}/, which takes advantage
    of a quantifier to specify the number of tokens to match. You’ll learn about quantifiers
    in Recipe 29, [*Repeating Part of a Regex with Quantifiers*](f_0040.xhtml#rcp.quantifiers).
  prefs: []
  type: TYPE_NORMAL
- en: Be careful when matching characters that span multiple lines. A full stop won’t
    match a line break character unless you use a special flag (see Recipe 42, [*Forcing
    . to Match Newline Characters with the s Flag*](f_0053.xhtml#rcp.flag_s)).
  prefs: []
  type: TYPE_NORMAL
- en: You can use a character class to define a range of characters to match. The
    range can be specified using a hyphen (-), and it’s not limited to numbers. To
    match a character that is not in a specific range, use the caret (^) immediately
    after the opening bracket. To specify ranges using a more compact syntax, you
    can take advantage of predefined character classes.
  prefs: []
  type: TYPE_NORMAL
