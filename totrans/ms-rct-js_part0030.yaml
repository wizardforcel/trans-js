- en: 'Chapter 9: Error Handling and Debugging'
  id: totrans-0
  prefs:
  - PREF_H1
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第九章：错误处理与调试
- en: In Chapter 8, we explored asynchronous JavaScript and promises, which are essential
    for building efficient and responsive web applications. However, as developers,
    we often encounter errors and bugs in our code. Error handling and debugging are
    crucial skills that help us identify and fix issues in our programs. Understanding
    how to handle errors and effectively debug code is vital for producing reliable
    and robust applications. Let's dive in and explore the world of error handling
    and debugging in JavaScript!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在第八章中，我们探讨了异步 JavaScript 和 promises，它们对于构建高效且响应迅速的 Web 应用程序至关重要。然而，作为开发者，我们经常在代码中遇到错误和
    bug。错误处理与调试是帮助我们识别和修复程序问题的关键技能。理解如何处理错误并有效地调试代码对于生成可靠且稳健的应用程序至关重要。让我们深入了解 JavaScript
    中的错误处理与调试！
- en: Understanding Errors
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解错误
- en: Errors in JavaScript can occur due to various reasons, such as syntax errors,
    runtime errors, or logical errors in our code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中的错误可能由于各种原因发生，例如语法错误、运行时错误或代码中的逻辑错误。
- en: 'Syntax Errors:'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语法错误：
- en: Syntax errors occur when the code is not written correctly according to the
    rules of the JavaScript language.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 语法错误发生在代码未按照 JavaScript 语言规则正确编写时。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the above example, we miss the closing parenthesis, which results in a syntax
    error.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们遗漏了闭括号，这导致了一个语法错误。
- en: 'Runtime Errors:'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行时错误：
- en: Runtime errors occur during the execution of the code when something unexpected
    happens.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时错误发生在代码执行过程中，当出现意外情况时。
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the above example, we attempt to divide a number by zero, resulting in a
    runtime error.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们试图将一个数字除以零，导致了一个运行时错误。
- en: 'Logical Errors:'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 逻辑错误：
- en: Logical errors occur when the code runs without any errors but produces incorrect
    or unexpected results due to flawed logic.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑错误发生在代码运行时没有任何错误，但由于逻辑问题产生了不正确或意外的结果。
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the above example, we mistakenly use the formula for calculating the area
    of a square instead of a rectangle, resulting in a logical error.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们错误地使用了计算正方形面积的公式，而不是矩形的公式，导致了一个逻辑错误。
- en: Error Handling with try...catch
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 try...catch 进行错误处理
- en: JavaScript provides the `try...catch` statement to handle errors gracefully
    and prevent the code from stopping abruptly.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 提供了 `try...catch` 语句，用于优雅地处理错误，防止代码突然停止运行。
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the above example, the `try` block contains the code that may throw an error.
    If an error occurs, it is caught in the `catch` block, and the specified error
    handling code is executed.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，`try` 块包含可能抛出错误的代码。如果发生错误，它会被 `catch` 块捕获，并执行指定的错误处理代码。
- en: Throwing Custom Errors
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抛出自定义错误
- en: In addition to handling built-in errors, we can also throw custom errors to
    provide more specific information about the problem.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 除了处理内置错误外，我们还可以抛出自定义错误，以提供有关问题的更具体信息。
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the above example, the `divideNumbers()` function checks if the divisor `b`
    is zero and throws a custom error if it is. The custom error is then caught and
    handled in the `catch` block.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，`divideNumbers()` 函数会检查除数 `b` 是否为零，如果是，则抛出一个自定义错误。该自定义错误随后在 `catch` 块中被捕获和处理。
- en: Debugging Techniques
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试技巧
- en: Debugging is the process of identifying and fixing issues in code. JavaScript
    provides several debugging techniques and tools to aid in this process.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是识别和修复代码中问题的过程。JavaScript 提供了多种调试技巧和工具来帮助完成这一过程。
- en: '1\. Using console.log():'
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1. 使用 console.log()：
- en: One of the simplest ways to debug is by using the `console.log()` function to
    print values and messages to the console.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 调试最简单的方法之一是使用 `console.log()` 函数将值和消息打印到控制台。
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the above example, we use `console.log()` to print the calculated area and
    the final result to the console for debugging.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们使用 `console.log()` 将计算得到的面积和最终结果打印到控制台进行调试。
- en: '2\. Using breakpoints:'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2. 使用断点：
- en: Modern browsers provide powerful developer tools that allow us to set breakpoints
    in our code. A breakpoint stops the code execution at a specific line, allowing
    us to inspect variables and the program's state.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现代浏览器提供了强大的开发者工具，允许我们在代码中设置断点。断点会在特定的代码行停止执行，让我们检查变量和程序的状态。
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the above example, we set a breakpoint in the `calculateArea()` function.
    When the code is executed, it will pause at that line, and we can inspect the
    values of `width`, `height`, and `area`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们在 `calculateArea()` 函数中设置了一个断点。当代码执行到该行时，它会暂停，我们可以检查 `width`、`height`
    和 `area` 的值。
- en: '3\. Using Chrome DevTools:'
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3. 使用 Chrome DevTools：
- en: Chrome DevTools is a powerful set of web developer tools built into the Google
    Chrome browser. It provides various debugging features, including a console, sources
    panel for code debugging, and network panel for inspecting network activity.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome DevTools 是一套强大的 Web 开发者工具，内置于 Google Chrome 浏览器中。它提供了多种调试功能，包括控制台、用于代码调试的源代码面板，以及用于检查网络活动的网络面板。
- en: '4\. Using debugger statement:'
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4. 使用 debugger 语句：
- en: We can also use the `debugger` statement in our code, which acts as a breakpoint
    when the browser's developer tools are open.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在代码中使用 `debugger` 语句，当浏览器的开发者工具打开时，它会充当一个断点。
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the above example, when the code execution reaches the `debugger` statement,
    it will pause if the browser's developer tools are open.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，当代码执行到 `debugger` 语句时，如果浏览器的开发者工具已打开，它会暂停。
- en: 'Conclusion:'
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论：
- en: In this chapter, we explored error handling and debugging in JavaScript, essential
    skills for identifying and fixing issues in our code. We learned about different
    types of errors, such as syntax errors, runtime errors, and logical errors. The
    `try...catch` statement allows us to handle errors gracefully, preventing the
    code from crashing. We also saw how to throw custom errors to provide specific
    information about problems in our code.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了JavaScript中的错误处理和调试，这是识别和修复代码中问题的必备技能。我们了解了不同类型的错误，例如语法错误、运行时错误和逻辑错误。`try...catch`语句使我们能够优雅地处理错误，防止代码崩溃。我们还看到如何抛出自定义错误，以提供关于代码问题的具体信息。
- en: Additionally, we explored various debugging techniques, such as using `console.log()`
    for printing values and messages, setting breakpoints in the code, and using browser
    developer tools like Chrome DevTools. These tools enable us to inspect variables
    and the program's state, making the debugging process more efficient and effective.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还探索了各种调试技巧，例如使用`console.log()`打印值和消息，在代码中设置断点，以及使用浏览器开发者工具，如Chrome DevTools。这些工具使我们能够检查变量和程序状态，从而使调试过程更加高效和有效。
- en: By mastering error handling and debugging, you can build more reliable and robust
    applications. As you continue your journey in JavaScript, practice these techniques
    to become a proficient debugger and create high-quality code.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通过掌握错误处理和调试技巧，你可以构建更可靠和健壮的应用程序。在你继续学习JavaScript的过程中，练习这些技巧，成为一名熟练的调试员，并编写高质量的代码。
