- en: Heap Deletion
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 堆删除
- en: The first thing to know about deleting a value from a heap is that we only ever
    delete the root node. This is right in line with the way a priority queue works,
    in that we only access and remove the highest-priority item.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 关于从堆中删除值的第一件事是我们只删除根节点。这与优先队列的工作方式相符，因为我们只访问和移除优先级最高的项目。
- en: 'The algorithm for deleting the root node of a heap is as follows:'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 删除堆根节点的算法如下：
- en: Move the last node into where the root node was, effectively removing the original
    root node.
  id: totrans-3
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 将最后一个节点移动到根节点原本的位置，有效地删除原始根节点。
- en: Trickle the root node down into its proper place. I’ll explain how trickling
    down works shortly.
  id: totrans-4
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 将根节点向下漏水到它的合适位置。我会很快解释向下漏水是如何工作的。
- en: Let’s say we’re going to remove the root node from the [`heap`](#fig.ch16.foundational_heap).
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 假设我们要从 [`堆`](#fig.ch16.foundational_heap) 中移除根节点。
- en: '![`images/heaps/foundational_heap.png`](images/heaps/foundational_heap.png)'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/heaps/foundational_heap.png`](images/heaps/foundational_heap.png)'
- en: 'In this example, the root node is the `100`。To delete it, we overwrite the
    root by placing the last node there instead. In this case, the last node is the
    `3`。So we move the `3` and place it where the `100` was:'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个例子中，根节点是 `100`。要删除它，我们用最后一个节点覆盖根节点。在这种情况下，最后一个节点是 `3`。所以我们移动 `3` 并将其放在 `100`
    原本的位置：
- en: '![`images/heaps/move_3_to_root.png`](images/heaps/move_3_to_root.png)'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/heaps/move_3_to_root.png`](images/heaps/move_3_to_root.png)'
- en: Now, we can’t leave the heap as is, because the heap condition has been violated
    since the `3` is currently less than some (actually, most) of its descendants.
    To make things right again, we need to trickle the `3` down until its heap condition
    has been restored.
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，我们不能让堆保持不变，因为堆的条件被破坏了，`3` 目前小于它的一些（实际上是大多数）后代。为了让事情恢复正常，我们需要将 `3` 向下漏水，直到它的堆条件得到恢复。
- en: Trickling down is a tad more complex than trickling up since each time we trickle
    a node down, we have two possible directions as to where we’ll trickle it down;
    that is, we can either swap it with its left child or its right child. (When trickling
    up, on the other hand, each node has only one parent to swap with.)
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 向下漏水比向上漏水要复杂一些，因为每次我们将节点向下漏水时，有两个可能的方向可以选择；也就是说，我们可以将其与左子节点或右子节点交换。（而向上漏水时，每个节点只有一个父节点可以交换。）
- en: Here’s the algorithm for trickling down. For the sake of clarity, we’re going
    to call the node we’re trickling the “trickle node.” (Sounds gross, I know.)
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 下面是向下漏水的算法。为了清晰起见，我们将要漏水的节点称为“漏水节点”。（听起来很糟糕，我知道。）
- en: We check both children of the trickle node and see which one is larger.
  id: totrans-12
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 我们检查漏水节点的两个子节点，看看哪个更大。
- en: If the trickle node is smaller than the larger of the two child nodes, we swap
    the trickle node with that larger child.
  id: totrans-13
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 如果漏水节点小于两个子节点中更大的那个，我们将漏水节点与那个更大的子节点交换。
- en: We repeat Steps 1 and 2 until the trickle node has no children who are greater
    than it.
  id: totrans-14
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 我们重复步骤 1 和 2，直到漏水节点没有比它更大的子节点。
- en: Let’s see this in action.
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们看看这个过程。
- en: 'Step 1: The `3`，which is the trickle node, currently has two children, the
    `88` and the `25`。The `88` is larger of the two, and since the `3` is smaller
    than the `88`，we swap the trickle node with the `88`：'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 步骤 1：`3` 是漏水节点，目前有两个子节点，`88` 和 `25`。`88` 是两者中更大的，鉴于 `3` 小于 `88`，我们将漏水节点与 `88`
    交换：
- en: '![`images/heaps/swap_3_with_88.png`](images/heaps/swap_3_with_88.png)'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/heaps/swap_3_with_88.png`](images/heaps/swap_3_with_88.png)'
- en: 'Step 2: The trickle node now has two new children, the `87` and the `16`。The
    `87` is the larger one, and it’s greater than the trickle node. So we swap the
    trickle node with the `87`：'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 步骤 2：当前的漏水节点有两个新子节点，`87` 和 `16`。`87` 是更大的一个，而且它大于漏水节点。因此我们将漏水节点与 `87` 交换：
- en: '![`images/heaps/swap_3_with_87.png`](images/heaps/swap_3_with_87.png)'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/heaps/swap_3_with_87.png`](images/heaps/swap_3_with_87.png)'
- en: 'Step 3: The trickle node’s children are currently the `86` and the `50`。The
    `86` is the larger of the two, and it’s also greater than the trickle node, so
    we swap the `86` with the trickle node:'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 步骤 3：漏水节点的子节点目前是 `86` 和 `50`。`86` 是两者中更大的，它也大于漏水节点，因此我们将 `86` 与漏水节点交换：
- en: '![`images/heaps/swap_3_with_86.png`](images/heaps/swap_3_with_86.png)'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/heaps/swap_3_with_86.png`](images/heaps/swap_3_with_86.png)'
- en: At this point, the `trickle node` has no children that are greater than it.
    (In fact, it has no children at all.) So we’re done, as the heap condition has
    been restored.
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 此时，`漏水节点` 没有任何大于它的子节点。（实际上，它根本没有子节点。）所以我们完成了，因为堆的条件已经恢复。
- en: The reason why we always swap the trickle node with the greater of its two children
    is because if we swap it with the smaller one, we’d end up violating the heap
    condition immediately. Watch what happens when we try to swap the trickle node
    with a smaller child.
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们总是将下沉节点与两个子节点中较大的一个交换的原因是，如果我们与较小的一个交换，就会立即违反堆的性质。看看当我们尝试将下沉节点与较小的子节点交换时会发生什么。
- en: 'Let’s start again with the trickle node of `3` as our root:'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们重新开始，将`3`作为我们的根节点：
- en: '![images/heaps/move_3_to_root.png](images/heaps/move_3_to_root.png)'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/heaps/move_3_to_root.png](images/heaps/move_3_to_root.png)'
- en: 'Let’s swap the `3` with the `25`，which is the smaller of the children:'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们把`3`与`25`交换，后者是两个子节点中较小的一个：
- en: '![images/heaps/swap_3_with_25.png](images/heaps/swap_3_with_25.png)'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/heaps/swap_3_with_25.png](images/heaps/swap_3_with_25.png)'
- en: We’ve now placed the `25` in a situation where it is a parent of the `88`。Since
    the `88` is greater than its parent, the heap condition has been broken.
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们现在将`25`放在一个父节点的位置，而它的子节点是`88`。由于`88`大于它的父节点，堆的性质被破坏了。
- en: Like insertion, the time complexity of deletion from a heap is `O(log N)`，as
    we have to trickle a node from the root down through all `log(N)` levels of the
    heap.
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 像插入一样，从堆中删除的时间复杂度是`O(log N)`，因为我们必须将一个节点从根部逐层下移，经过所有`log(N)`级别的堆。
