- en: '`Chapter 19`'
  id: totrans-0
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: '`Dealing with Space Constraints`'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: When analyzing the efficiency of various algorithms throughout this book, we’ve
    focused exclusively on how fast they run—that is, their `time complexity`. However,
    another measure of efficiency can be useful as well, which is how much memory
    an algorithm consumes. This measure is known as `space complexity`.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Space complexity` becomes an important factor when memory is limited. If you
    have an enormous amount of data, or are programming for a small device with limited
    memory, `space complexity` can matter a lot.'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In a perfect world, we’d always use algorithms that are both fast and memory-efficient.
    However, sometimes we can’t have both and we need to choose between the two. Each
    situation requires a careful analysis to know when we need to prioritize `speed`
    over `memory`, and `memory` over `speed`.
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
