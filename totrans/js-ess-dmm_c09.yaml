- en: '`Chapter 9`'
  id: totrans-0
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Debugging JavaScript`'
  id: totrans-1
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: '`IN THIS CHAPTER`'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) `Debugging errors using the Console`'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) `Setting breakpoints`'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) `Stepping through JavaScript code`'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`JavaScript` and modern web browsers offer a ton of top-notch debugging tools
    that can remove some of the burden of program problem solving. In this chapter,
    you delve into these tools to explore how they can help you find and fix most
    programming errors. You also investigate a number of tips and techniques that
    can go a long way in helping you avoid coding errors in the first place.  '
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: All the major web browsers come with a sophisticated set of debugging tools
    that can make your life as a web developer much easier and much saner. Most web
    developers debug their scripts using `Google Chrome`, so I focus on that browser
    in this chapter. But in this section, I give you an overview of the tools that
    are available in all the major browsers and how to get at them.
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s how you open the web development tools in `Chrome`, `Firefox`, `Microsoft
    Edge`, and `Safari`:'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Chrome for Windows:` Click `Customize and Control Google Chrome` (the three
    vertical dots to the right of the address bar) and then select `More Tools ⇒ Developer
    Tools`. Shortcut: `Ctrl+Shift+I`.'
  id: totrans-9
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`Chrome for Mac:` Select `View ⇒ Developer ⇒ Developer Tools`. Shortcut: `Option+⌘    +I`.'
  id: totrans-10
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`Firefox for Windows:` Click `Open Application Menu` (the three horizontal
    lines on the far right of the toolbar) and then select `More Tools ⇒ Web Developer
    Tools`. Shortcut: `Ctrl+Shift+I`.'
  id: totrans-11
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`Firefox for Mac:` Select `Tools ⇒ Browser Tools ⇒ Web Developer Tools`. Shortcut:
    `Option+⌘    +I`.'
  id: totrans-12
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`Microsoft Edge:` Click `Settings and More` (the three vertical dots to the
    right of the address bar) and then select `More Tools ⇒ Developer Tools`. Shortcut:
    `Ctrl+Shift+I`.'
  id: totrans-13
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`Safari:` Select `Develop ⇒ Show Web Inspector`. Shortcut: `Option+⌘    +I`.
    If you don’t have the Develop menu, select `Safari ⇒ Settings`, click the `Advanced`
    tab, and then select the `Show Develop Menu in Menu Bar` checkbox.'
  id: totrans-14
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 'These development tools vary in the features they offer, but each one provides
    the same set of basic tools, which are the tools you’ll use most often. These
    basic web development tools include the following:'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`HTML viewer:` This tab (called `Inspector` in Firefox and `Elements` in the
    other browsers) shows the HTML source code used in the web page. When you hover
    the mouse pointer over a tag, the browser highlights the element in the displayed
    page and shows its width and height, as shown in [Figure 9-1](#c09-fig-0001).
    When you click a tag, the browser shows the CSS styles applied with the tag, as
    well as the tag’s box dimensions (again, refer to [Figure 9-1](#c09-fig-0001)).'
  id: totrans-16
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`Console:` This tab enables you to view error messages, log messages, test
    expressions, and execute statements. I cover the `Console` in more detail in the
    next section.'
  id: totrans-17
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`Debugging tool:` 这个选项卡（在Firefox中称为`Debugger`，在其他浏览器中称为`Sources`）使你能够暂停代码执行、逐步执行代码、观察变量和属性的值等等。这是最重要的JavaScript调试工具，因此我在本章后面详细介绍它。'
  id: totrans-18
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`Network:` 这个选项卡告诉你加载网页中引用的每个文件需要多长时间。如果你发现页面加载缓慢，这个选项卡可以帮助你找到瓶颈。'
  id: totrans-19
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`Web storage:` 这个选项卡（在Chrome和Edge中称为`Application`，在Firefox和Safari中称为`Storage`）使你能够检查存储在浏览器中的数据。'
  id: totrans-20
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '![A snapshot of the Chrome’s Elements tab. The selected element is highlighted
    and the elements width and height are mentioned.](images/9781394263219-fg0901.png)'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '[FIGURE 9-1:](#rc09-fig-0001) HTML查看器，例如Chrome的`Elements`选项卡，使你能够检查每个元素的样式和框
    dimensions。  ## 调试101：使用控制台'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 如果你的网页行为异常——例如，页面为空或缺少元素——你应该首先检查HTML代码以确保它是正确的。（常见的HTML错误包括未用大于号（`>`）结束标签、未包含结束标签，以及缺少属性值的结束引号。）如果你的HTML检查通过，很有可能你的JavaScript代码存在问题。你怎么知道？首先要去控制台窗口查看。
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 控制台是一个交互式浏览器窗口，显示警告和错误，显示`console.log()`语句的输出，并使你能够执行表达式和语句，而不必运行整个脚本。控制台是最方便的网页浏览器调试工具之一，因此你需要熟悉它。
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '### 获取控制台显示'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 要显示控制台，打开你网页浏览器的开发工具，然后点击控制台选项卡。你还可以使用以下键盘快捷键：
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Chrome for Windows:` 按`Ctrl+Shift+J`。'
  id: totrans-27
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`Chrome for Mac:` 按`Option+⌘    +J`。'
  id: totrans-28
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`Firefox for Windows:` 按`Ctrl+Shift+K`。'
  id: totrans-29
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`Firefox for Mac:` 按`Option+⌘    +K`。'
  id: totrans-30
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`Microsoft Edge:` 按`Ctrl+Shift+J`。'
  id: totrans-31
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`Safari:` 按`Option+⌘    +C`。  ### 在控制台中打印程序数据'
  id: totrans-32
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 你可以使用`console.log()`方法的特殊`Console`对象在控制台中打印文本和表达式值：
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`console.log(output)`'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Note:` `output`是你想在控制台中打印的表达式。'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`output`表达式可以是文本字符串、变量、对象属性、函数结果或这些的任何组合。'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Tip](images/tip.png) 你还可以使用方便的`console.table()`方法以易于阅读的表格格式输出数组或对象的值：'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`console.table(output)`'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Note:` `output`是你想在控制台中查看的数组或对象（作为变量或字面量）。'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 出于调试目的，您最常使用`Console`来监视变量、对象属性和表达式的值。也就是说，当您的代码设置或更改某个值时，您插入一个`console.log()`（或`console.table()`）语句来输出新值。当脚本执行完成后，您可以打开`Console`，然后查看记录的值。
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Console`的一个伟大特性是它是交互式的，这意味着您不仅可以阅读浏览器或您的`console.log()`语句生成的消息，还可以直接在`Console`中输入代码。也就是说，您可以使用`Console`执行表达式和语句。这个特性的用途很多：'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 您可以尝试一些实验性的表达式或语句，以确定它们对脚本的影响。
  id: totrans-42
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 当脚本暂停时，您可以输出变量或属性的当前值。
  id: totrans-43
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 当脚本暂停时，您可以更改变量或属性的值。例如，如果您注意到一个值为零的变量即将用作除数，您可以将该变量更改为非零值，以避免脚本崩溃。
  id: totrans-44
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 当脚本暂停时，您可以运行一个函数或方法，以确定它在当前条件下是否按预期工作。
  id: totrans-45
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 每个浏览器的`Console`标签都包含一个文本框（通常由大于号`>`提示标记），您可以在其中输入表达式或语句。
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Tip](images/tip.png) 您可以通过用分号分隔每个语句来在`Console`中执行多个语句。例如，您可以通过输入类似于以下的语句来测试`for…`循环：'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``for (let i=1; i < 10; i += 1){console.log(i**2); console.log(i**3);}``'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Tip](images/tip.png) 如果您想在`Console`中重复先前的代码执行，或者如果您想运行一些与您之前运行的代码非常相似的代码，您可以回忆起当前浏览器会话中使用的语句和表达式。按`Up
    Arrow`键可以向后滚动查看之前执行的代码；按`Down Arrow`键可以向前滚动查看您的代码。 ## Putting Your Code into Break
    Mode'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在代码中途暂停可以让您检查某些元素，例如变量和属性的当前值。它还允许您逐条执行程序代码，以便监控脚本的流程。
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: When you pause your code, JavaScript enters `break mode`，这意味着浏览器显示其调试工具并高亮当前语句（JavaScript将要执行的下一条语句）。`[Figure
    9-2](#c09-fig-0002)`显示了Chrome调试器（`Sources`标签）中的`break mode`脚本。
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![A snapshot of the web browser displays its debugging tool and highlights
    the statement that it will execute next.](images/9781394263219-fg0902.png)'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '[FIGURE 9-2:](#rc09-fig-0002) When you invoke break mode, the web browser displays
    its debugging tool and highlights the statement that it will execute next.'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '### Invoking break mode'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`JavaScript` gives you two ways to enter break mode:'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: By setting breakpoints
  id: totrans-56
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: By using a `debugger` statement
  id: totrans-57
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '#### Setting a breakpoint'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'If you know approximately where an error or logic flaw is occurring, you can
    enter break mode at a specific statement in the script by setting up a `breakpoint`.
    Here are the steps to set up a breakpoint:'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Display your web browser’s developer tools and switch to the debugging tool
    (such as the `Sources` tab in `Chrome`).
  id: totrans-60
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: Open the file that contains the `JavaScript` code you want to debug.
  id: totrans-61
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: 'How you do this depends on the browser: in `Chrome` (and most browsers), you
    have two choices:'
  id: totrans-62
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: In the left pane, click the `HTML` file (if your `JavaScript` code is within
    a `script` element in your `HTML` file) or the `JavaScript` (`.js`) file (if your
    code resides in an external `JavaScript` file).
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: Press `Ctrl+P` (Windows) or `⌘    +P` (macOS) and then click the file in the
    list that appears.
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: Locate the statement where you want to enter break mode.
  id: totrans-65
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '`JavaScript` will run every line of code up to, but not including, this statement.'
  id: totrans-66
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: Click the line number to the left of the statement to set the breakpoint, as
    shown in [Figure 9-3](#c09-fig-0003).
  id: totrans-67
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '![A snapshot of the browser’s debugging tool, click a line number to set a
    breakpoint on that statement.](images/9781394263219-fg0903.png)'
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '[FIGURE 9-3:](#rc09-fig-0003) In the browser’s debugging tool, click a line
    number to set a breakpoint on that statement.'
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'To remove a breakpoint, most browsers give you three choices:'
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: To disable a breakpoint temporarily, deselect the breakpoint’s checkbox in the
    `Breakpoints` list.
  id: totrans-71
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '![9781394263219-ma0901](images/9781394263219-ma0901.png)To disable all your
    breakpoints temporarily, click the `Deactivate Breakpoint` button. `Chrome`’s
    version of this button is shown here in the margin. Click this button again to
    reactivate all the breakpoints.'
  id: totrans-72
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 'To remove a breakpoint completely, click the statement’s line number.  ####
    Adding a `debugger` statement'
  id: totrans-73
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: When developing your web pages, you’ll often test the robustness of a script
    by sending it various test values or by trying it out under different conditions.
    In many cases, you’ll want to enter break mode to make sure things appear okay.
    You could set breakpoints at specific statements, but you lose them if you close
    the file. For something a little more permanent, you can include a `debugger`
    statement in a script. `JavaScript` automatically enters break mode whenever it
    encounters a `debugger` statement.
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s a bit of code that includes a `debugger` statement:'
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Add the sentence to the <div> document.querySelector(''div'').innerHTML
    = sentence; // Generate random colors (use values < 128 to keep the text dark)
    const randomRed = parseInt(Math.random() * 128); const randomGreen = parseInt(Math.random()
    * 128); const randomBlue = parseInt(Math.random() * 128); debugger;`  ### Getting
    out of break mode'
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'To exit break mode, you can use either of the following methods in the browser’s
    debugging tool:'
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![9781394263219-ma0902](images/9781394263219-ma0902.png) Click the `Resume`
    button. Chrome’s version of this button is shown here in the margin.'
  id: totrans-78
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 'Press the browser’s `Resume` keyboard shortcut. In `Chrome` (and most browsers),
    either press `F8` or press `Ctrl+\` (Windows) or `⌘    +\` (macOS).  ## Stepping
    Through Your Code'
  id: totrans-79
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 'One of the most common (and most useful) debugging techniques is to step through
    the code one statement at a time. Doing so lets you get a feel for the program
    flow to make sure that things such as loops and function calls are executing properly.
    You can use four techniques:'
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Stepping one statement at a time
  id: totrans-81
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: Stepping into some code
  id: totrans-82
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: Stepping over some code
  id: totrans-83
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: Stepping out of some code
  id: totrans-84
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '### Stepping one statement at a time'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The most common way of stepping through your code is to step one statement
    at a time. In break mode, stepping one statement at a time means two things:'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: You execute the current statement and then pause on the next statement.
  id: totrans-87
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: If the current statement to run is a function call, stepping takes you into
    the function and pauses at the function’s first statement. You can then continue
    to step through the function until you execute the last statement, at which point
    the browser returns you to the statement after the function call.
  id: totrans-88
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 'To step through your code one statement at a time, set a breakpoint and then,
    after your code is in break mode, do one of the following to step through a single
    statement:'
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![9781394263219-ma0903](images/9781394263219-ma0903.png) Click the `Step` button.
    Chrome’s version of this button is shown here in the margin.'
  id: totrans-90
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: Press the browser’s `Step` keyboard shortcut. In `Chrome` (and most browsers,
    except `Firefox`, which doesn’t support `Step` as of this writing; use the `Step
    Into` button, instead), press `F9`.
  id: totrans-91
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 'Keep stepping through until the script ends or until you’re ready to resume
    normal execution (by clicking `Resume`).  ### Stepping into some code'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In all the major browsers (except `Firefox`), stepping into some code is exactly
    the same as stepping through the code one statement at a time. The difference
    comes when a statement executes asynchronously (that is, it performs its operation
    after some delay rather than right away).
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'To understand the difference, consider the following code (I’ve added line
    numbers to the left; they’re not part of the code):'
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`1 setTimeout(() => { 2 console.log(''Inside the setTimeout() block!''); 3
    }, 5000); 4 console.log(''Outside the setTimeout) block!'');`'
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这段代码使用`setTimeout()`在五秒后执行一个匿名函数。假设你在`setTimeout()`语句（第1行）处进入了断点模式。如果在这里使用`Step`与`Step
    Into`，会发生什么呢？看看吧：
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Step:` 点击`Step`按钮不会将你带到第2行，正如你可能期望的那样。相反，由于`setTimeout()`是异步的，`Step`本质上忽略了匿名函数，直接跳转到第4行。'
  id: totrans-97
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`Step Into:` 点击`Step Into`按钮`确实`将你带到第2行，但仅在指定的延迟（此情况下为五秒）之后。然后你可以根据需要逐步进入匿名函数。'
  id: totrans-98
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 要进入你的代码，设置一个断点，然后在你的代码处于断点模式后，执行以下任一操作：
  id: totrans-99
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![9781394263219-ma0904](images/9781394263219-ma0904.png) `Click the Step Into
    button.` Chrome的这个按钮在边栏中显示。'
  id: totrans-100
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`Press the browser’s Step Into keyboard shortcut.` 在Chrome（以及大多数浏览器）中，可以按`F11`或者按`Ctrl+;`（Windows）或`⌘    +;`（macOS）。'
  id: totrans-101
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '![Remember](images/remember.png) 我在这里对`Step Into`的描述并不适用于Firefox（至少在我写这篇时如此）。相反，Firefox的`Step
    Into`功能类似于我在上一节中描述的`Step`功能。 ### 跳过一些代码'
  id: totrans-102
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 一些语句调用其他函数。如果你不想逐步进入被调用的函数，你可以跳过它。跳过一个函数意味着JavaScript正常执行该函数，然后在下一个语句`之后`恢复断点模式。
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 要跳过一个函数，首先可以逐行执行代码直到到达你想跳过的函数调用，或者在函数调用上设置一个断点并刷新网页。当你处于断点模式时，可以使用以下任一技术来跳过函数：
  id: totrans-104
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![9781394263219-ma0905](images/9781394263219-ma0905.png) `Click the Step Over
    button.` Chrome的这个按钮在边栏中显示。'
  id: totrans-105
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`Press the browser’s Step Over keyboard shortcut.` 在Chrome（以及大多数浏览器）中，可以按`F10`或者按`Ctrl+''`（Windows）或`⌘    +''`（macOS）。
    ### 跳出一些代码'
  id: totrans-106
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 我总是意外地进入我宁愿跳过的函数。如果函数很短，我就逐步执行它直到回到原始代码。如果函数很长，我不想浪费时间逐行执行每个语句。相反，我使用以下任一方法调用`Step
    Out`功能：
  id: totrans-107
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![9781394263219-ma0906](images/9781394263219-ma0906.png) `Click the Step Out
    button.` Chrome的这个按钮在边栏中显示。'
  id: totrans-108
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`Press the browser’s Step Out keyboard shortcut.` 在Chrome（以及大多数浏览器）中，可以按`Shift+F11`或者按`Ctrl+Shift+;`（Windows）或`⌘    +Shift+;`（macOS）。'
  id: totrans-109
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: JavaScript执行函数的其余部分，然后在函数调用后的第一行重新进入断点模式。
  id: totrans-110
  prefs: []
  stylish: true
  type: TYPE_NORMAL
