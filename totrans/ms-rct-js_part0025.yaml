- en: 'Chapter 4: Functions and Scope'
  id: totrans-0
  prefs:
  - PREF_H1
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：函数与作用域
- en: In Chapter 3, we explored control flow and loops, which allow us to make decisions
    and repeat code execution. Now, we'll dive into functions, a fundamental concept
    in JavaScript. Functions are blocks of code that can be defined and executed multiple
    times. They play a crucial role in organizing and reusing code, making it more
    modular and maintainable. Additionally, we'll discuss scope, which defines the
    accessibility of variables within different parts of the code. Understanding functions
    and scope is essential for becoming a proficient JavaScript developer. Let's get
    started!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三章中，我们探讨了控制流和循环，它们使我们能够做出决策并重复执行代码。现在，我们将深入讨论函数，这是 JavaScript 中的一个基础概念。函数是可以定义并执行多次的代码块。它们在组织和重用代码方面起着至关重要的作用，使代码更加模块化和易于维护。此外，我们还将讨论作用域，它定义了变量在代码不同部分的可访问性。理解函数和作用域是成为熟练的
    JavaScript 开发人员的关键。让我们开始吧！
- en: 'Functions: Reusable Blocks of Code'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数：可重用的代码块
- en: A function is a reusable block of code designed to perform a specific task or
    calculation. Functions help break down complex problems into smaller, manageable
    pieces, making the code more organized and easier to maintain.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 函数是一个可重用的代码块，用于执行特定的任务或计算。函数帮助将复杂的问题分解成更小、更易管理的部分，使代码更加有组织，并且更容易维护。
- en: 'Defining Functions:'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义函数：
- en: To define a function, we use the `function` keyword, followed by the function
    name, a pair of parentheses, and a pair of curly braces that contain the function's
    code.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个函数时，我们使用 `function` 关键字，后跟函数名称、一对圆括号和一对包含函数代码的花括号。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In Example 1, we define a function named `greet()` that prints "Hello, world!"
    when called.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 1 中，我们定义了一个名为 `greet()` 的函数，当调用时，它会打印“Hello, world!”。
- en: 'Calling Functions:'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调用函数：
- en: To execute a function and perform the actions defined inside it, we call the
    function by its name followed by a pair of parentheses.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行函数并执行其中定义的操作，我们通过函数名后跟一对圆括号来调用该函数。
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In Example 2, we call the `greet()` function, which then prints "Hello, world!"
    to the console.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 2 中，我们调用了 `greet()` 函数，它随后将“Hello, world!”打印到控制台。
- en: 'Function Parameters:'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数参数：
- en: Functions can take inputs called parameters, which allow them to work with different
    data values.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 函数可以接收称为参数的输入，这些参数使它们能够处理不同的数据值。
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In Example 3, we define a function `greetUser()` that takes a `name` parameter
    and prints a personalized greeting.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 3 中，我们定义了一个名为 `greetUser()` 的函数，它接收一个 `name` 参数并打印个性化的问候语。
- en: 'Return Statement:'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回语句：
- en: Functions can also produce outputs using the `return` statement. The `return`
    statement specifies the value the function should return.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 函数还可以通过 `return` 语句产生输出。`return` 语句指定函数应该返回的值。
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In Example 4, the `add()` function takes two parameters `a` and `b`, and it
    returns their sum.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 4 中，`add()` 函数接收两个参数 `a` 和 `b`，并返回它们的和。
- en: 'Anonymous Functions (Function Expressions):'
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 匿名函数（函数表达式）：
- en: Functions can be defined without a name and assigned to variables. These are
    known as anonymous functions or function expressions.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 函数可以不定义名称并赋值给变量，这些称为匿名函数或函数表达式。
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In Example 5, we assign an anonymous function to the variable `multiply` and
    then call the function with arguments `2` and `4`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 5 中，我们将一个匿名函数赋值给变量`multiply`，然后使用参数`2`和`4`调用该函数。
- en: 'Arrow Functions (ES6):'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 箭头函数（ES6）：
- en: Arrow functions provide a shorter syntax for defining functions, especially
    useful for one-liners. They use the `=>` syntax.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头函数提供了一种更简洁的语法来定义函数，特别适用于一行代码的函数。它们使用`=>`语法。
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In Example 6, we define an arrow function `square` that takes a parameter `x`
    and returns its square.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 6 中，我们定义了一个箭头函数`square`，它接受一个参数`x`并返回它的平方。
- en: 'Scope: Understanding Variable Accessibility'
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作用域：理解变量的可访问性
- en: 'Scope in JavaScript defines the visibility and accessibility of variables within
    different parts of the code. Understanding scope is essential to avoid unintended
    side effects and to write clean and bug-free code. JavaScript has two main types
    of scope: global scope and local scope.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中的作用域定义了变量在代码不同部分的可见性和可访问性。理解作用域对于避免意外副作用和编写干净且无错误的代码至关重要。JavaScript
    主要有两种作用域：全局作用域和局部作用域。
- en: 'Global Scope:'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 全局作用域：
- en: Variables declared outside any function or block have global scope, making them
    accessible from anywhere in the code.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何函数或块外部声明的变量具有全局作用域，可以从代码中的任何地方访问。
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In Example 7, the variable `globalVar` has global scope, and we can access it
    from within the `myFunction` function.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 7 中，变量`globalVar`具有全局作用域，我们可以在`myFunction`函数内访问它。
- en: 'Local Scope:'
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 局部作用域：
- en: Variables declared inside a function or block have local scope, meaning they
    are only accessible within that specific function or block.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数或块内部声明的变量具有局部作用域，这意味着它们只能在该特定函数或块内访问。
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In Example 8, the variable `localVar` has local scope and can only be accessed
    from within the `myFunction` function. Attempting to access it outside the function
    will result in a `ReferenceError`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 8 中，变量`localVar`具有局部作用域，只能在`myFunction`函数内部访问。试图在函数外部访问它将导致`ReferenceError`错误。
- en: 'Nested Scope:'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 嵌套作用域：
- en: Functions can be defined inside other functions, creating nested scopes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 函数可以定义在其他函数内部，从而创建嵌套作用域。
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In Example 9, the `outerFunction` has a local variable `outerVar`, and inside
    it, we define the `innerFunction`, which has its own local variable `innerVar`.
    The inner function can access both `outerVar` and `innerVar`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 9 中，`outerFunction`有一个局部变量`outerVar`，在其中我们定义了`innerFunction`，它有自己的局部变量`innerVar`。内部函数可以访问`outerVar`和`innerVar`。
- en: 'Block Scope (let and const):'
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 块级作用域（let 和 const）：
- en: With the introduction of `let` and `const` in ES6, block scope was introduced
    to solve the issues with `var` hoisting. Variables declared with `let` and `const`
    have block scope, making them accessible only within the block where they are
    declared.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 随着ES6引入`let`和`const`，块级作用域被引入，以解决`var`提升的问题。使用`let`和`const`声明的变量具有块级作用域，仅在声明它们的块内可访问。
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In Example 10, the variable `blockVar` is declared inside a block, and it is
    only accessible within that block.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例10中，变量`blockVar`在一个块内声明，它仅在该块内可访问。
- en: 'Function Scope (var):'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数作用域（var）：
- en: Variables declared with `var` have function scope, meaning they are accessible
    within the entire function where they are declared.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`var`声明的变量具有函数作用域，意味着它们在声明它们的整个函数中都可访问。
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In Example
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中：
- en: 11, the variable `functionVar` is declared inside the function and is accessible
    within the entire function, even if it's declared inside a block.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例11中，变量`functionVar`在函数内部声明，并在整个函数中可访问，即使它是在一个块内声明的。
- en: 'Function Scope and Closure:'
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数作用域与闭包：
- en: JavaScript supports closures, which allow functions to "remember" the variables
    in their lexical scope, even when they are executed outside that scope.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript支持闭包，这使得函数即使在其作用域外执行，也能"记住"其词法作用域中的变量。
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In Example 12, the `innerFunction` captures the `outerVar` variable from its
    lexical scope, even after the `outerFunction` has finished executing. The `closureFunction`
    carries the closure and can still access `outerVar`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例12中，`innerFunction`捕获了来自其词法作用域的`outerVar`变量，即使`outerFunction`已经执行完毕。`closureFunction`携带了闭包，并且仍然可以访问`outerVar`。
- en: 'Conclusion:'
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论：
- en: In this chapter, we explored functions and scope in JavaScript. Functions are
    reusable blocks of code that perform specific tasks, making code more organized
    and maintainable. We learned how to define and call functions, work with function
    parameters, use the `return` statement, and create anonymous and arrow functions.
    We also discussed scope, including global scope, local scope, nested scope, and
    block scope, as well as the differences between `var`, `let`, and `const` in terms
    of scoping.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了JavaScript中的函数和作用域。函数是可重用的代码块，用于执行特定任务，使代码更加有序和易于维护。我们学习了如何定义和调用函数，处理函数参数，使用`return`语句，以及创建匿名函数和箭头函数。我们还讨论了作用域，包括全局作用域、局部作用域、嵌套作用域和块级作用域，以及`var`、`let`和`const`在作用域方面的差异。
- en: Understanding functions and scope is vital for writing efficient and robust
    JavaScript code. By breaking down complex tasks into smaller functions and organizing
    variables within appropriate scopes, we can build more scalable and maintainable
    applications. In the next chapter, we will explore objects and object-oriented
    programming in JavaScript, taking our coding skills to the next level. So, keep
    reading and keep coding to become a JavaScript master!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 理解函数和作用域对于编写高效且健壮的 JavaScript 代码至关重要。通过将复杂任务分解成更小的函数，并在适当的作用域内组织变量，我们可以构建出更具可扩展性和可维护性的应用程序。在下一章，我们将探讨
    JavaScript 中的对象和面向对象编程，将我们的编程技能提升到新的水平。所以，继续阅读并继续编码，成为一名 JavaScript 大师！
