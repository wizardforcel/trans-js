- en: 平均情况
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: 确实，在最坏情况下，选择排序比插入排序快。然而，我们还必须考虑平均情况。
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 为什么？
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 根据定义，发生频率最高的情况是平均情况。看看`[bell curve](#fig.ch6.bell_curve)`。
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/bell_curve.png](images/optimizing_for_optimistic_scenarios/bell_curve.png)'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 最佳情况和最坏情况相对较少发生。在现实世界中，平均情况是最常见的情况。
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 以一个随机排序的数组为例。值以完全升序或降序排列的几率有多大？值更有可能是分散的。
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 那么，让我们在所有情况下审视插入排序。
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 我们已经看过插入排序在最坏情况下的表现——即数组按降序排序。在最坏情况下，我们看到在每次通过中，都会比较和移动我们遇到的每个值。（我们计算出总共是`N²`次比较和移动。）
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在最佳情况下，当数据已经按升序排序时，我们每次通过只进行一次比较，不进行任何移动，因为每个值已经在其正确的位置上。
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 然而，在数据随机排序的情况下，我们会有通过，其中比较并移动所有数据、一部分数据，或者可能不移动任何数据。如果你查看前面的`[​*Insertion Sort
    in Action*​](f_0058.xhtml#sect.insertion-sort-action)`示例，你会注意到在第一次和第三次通过中，我们比较并移动我们遇到的所有数据。在第四次通过中，我们只比较并移动一部分数据，而在第二次通过中，我们只进行一次比较，完全不移动数据。
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: （这种差异发生是因为某些通过会比较临时值左侧的所有数据，而其他通过由于遇到一个小于临时值的值而提前结束。）
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 因此，在最坏情况下，我们比较并移动所有数据，而在最佳情况下，我们不移动任何数据（每次通过只进行一次比较）。对于平均情况，我们可以说总体上，我们可能比较并移动大约一半的数据。因此，如果插入排序在最坏情况下需要`N²`步，我们可以说在平均情况下大约需要`N²
    / 2`步。（不过在大O表示法中，这两种情况都是`O(N²)`。）
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 让我们深入一些具体的例子。
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 数组`[1, 2, 3, 4]`已经是预排序的，这是最佳情况。对于相同的数据，最坏情况是`[4, 3, 2, 1]`，而平均情况的一个例子可能是`[1,
    3, 4, 2]`。
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In the worst case (`[4, 3, 2, 1]`), there are six comparisons and six shifts,
    for a total of twelve steps. In an average case of `[1, 3, 4, 2]`, there are four
    comparisons and two shifts, for a total of six steps. In the best case (`[1, 2,
    3, 4]`), there are three comparisons and zero shifts.
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: We can now see that the performance of `Insertion Sort` varies greatly based
    on the scenario. In the worst-case scenario, `Insertion Sort` takes `N²` steps.
    In an average scenario, it takes `N² / 2` steps. And in the best-case scenario,
    it takes about `N` steps.
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'You can see these three types of performance in the following graph:'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/graph.png](images/optimizing_for_optimistic_scenarios/graph.png)'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: Contrast this with `Selection Sort`. `Selection Sort` takes `N² / 2` steps in
    all cases, from worst to average to best-case scenarios. This is because `Selection
    Sort` doesn’t have any mechanism for ending a pass-through early at any point.
    Each pass-through compares every value to the right of the chosen index no matter
    what.
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s a table that compares `Selection Sort` and `Insertion Sort`:'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '|  | `Best Case` | `Average Case` | `Worst Case` |'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `Selection Sort` | `N² / 2` | `N² / 2` | `N² / 2` |'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `Insertion Sort` | `N` | `N² / 2` | `N²` |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 'So which is better: `Selection Sort` or `Insertion Sort`? The answer is, well,
    it depends. In an average case—where an array is randomly sorted—they perform
    similarly. If you have reason to assume you’ll be dealing with data that is mostly
    sorted, `Insertion Sort` will be a better choice. If you have reason to assume
    you’ll be dealing with data that is mostly sorted in reverse order, `Selection
    Sort` will be faster. If you have no idea what the data will be like, that’s essentially
    an average case, and both will be equal.'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
