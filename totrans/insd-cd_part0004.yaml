- en: '`Chapter 3: C++: Bridging Procedural and Object-Oriented Programming`'
  id: totrans-0
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: '`3.1 The Evolution from C to C++`'
  id: totrans-1
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: The development of `C++` marked a significant evolution in programming languages,
    bridging the gap between procedural and object-oriented programming (OOP). In
    this section, we’ll explore the journey from `C` to `C++` and the core concepts
    that define `C++` as a versatile and powerful language.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`1\. Origins of C++:`'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`C++` was created by `Bjarne Stroustrup` in the early 1980s as an extension
    of the `C` programming language. `Stroustrup`’s goal was to combine `C`’s efficiency
    and low-level capabilities with high-level features, enabling more structured
    and modular code.'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`#include <iostream>`'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`int main()  {`'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`std::cout <<  "Hello, C++!"  <<  std::endl;`'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`return  0;`'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`2\. Object-Oriented Programming (OOP):`'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: One of the fundamental shifts in `C++` compared to `C` is the introduction of
    OOP. In `C++`, you can define classes and objects, encapsulating data and behavior
    into reusable and organized units.
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`class Rectangle {`'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`public:`'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`int width;`'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`int height;`'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`int area()  {`'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`return width * height;`'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`};`'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`int main()  {`'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Rectangle rect;`'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`rect.width =  5;`'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`rect.height =  10;`'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`int area = rect.area();`'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`return  0;`'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`3\. Classes and Objects:`'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Classes in `C++` serve as blueprints for creating objects. They encapsulate
    data (attributes) and functions (methods) that operate on that data. Objects are
    instances of classes.
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`4\. Inheritance:`'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`C++` supports inheritance, allowing you to create new classes based on existing
    ones. Inheritance enables code reuse and the creation of class hierarchies.'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`class Square :  public Rectangle {`'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`public:`'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Square(int side)  {`'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`width = side;`'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`height = side;`'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`};`'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`5\. Polymorphism:`'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Polymorphism in `C++` allows objects of different classes to be treated as objects
    of a common base class. This facilitates dynamic method invocation and runtime
    flexibility.
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`class Shape {`'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`public:`'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`virtual  void draw()  {`'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Default implementation`'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`};`'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`class Circle :  public Shape {`'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`public:`'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`void draw()  override  {`'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Draw a circle`'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`};`'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`6\. Encapsulation:`'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`C++` supports encapsulation, hiding the internal details of a class and exposing
    only what’s necessary. Access specifiers like `public`, `private`, and `protected`
    control the visibility of class members.'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`class BankAccount {`'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`private:`'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`double balance;`'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`public:`'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`void deposit(double amount)  {`'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`if  (amount >  0)  {`'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`balance += amount;`'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`double getBalance()  {`'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`return balance;`'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`};`'
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`7\. Templates:`'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`C++` introduced templates, enabling generic programming. Templates allow you
    to write code that works with different data types while maintaining type safety.'
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`template  <typename T>`'
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`T add(T a, T b)  {`'
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`return a + b;`'
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`8\. Standard Template Library (STL):`'
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The STL is a collection of pre-defined classes and functions in `C++` for common
    data structures (like vectors, lists, and maps) and algorithms. It simplifies
    complex tasks and promotes code reusability.
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`#include <vector>`'
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`#include <algorithm>`'
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`int main()  {`'
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`std::vector<int> numbers =  {5,  2,  8,  1,  9};`'
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`std::sort(numbers.begin(), numbers.end());`'
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`return  0;`'
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`The evolution from C to C++ brought about a rich set of features and programming
    paradigms, making C++ a versatile language suitable for various applications.
    Its ability to seamlessly combine procedural and object-oriented programming has
    contributed to its enduring popularity in software development. Understanding
    C++’s core concepts is essential for leveraging its full potential in modern programming.`'
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`***`'
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`3.2 Core Concepts of Object-Oriented Programming in C++`'
  id: totrans-84
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: '`Object-Oriented Programming (OOP) is a fundamental paradigm in C++, enabling
    developers to create more organized, modular, and maintainable code. In this section,
    we’ll delve into the core concepts of OOP as applied in C++.`'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`1\. Classes and Objects:`'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`At the heart of OOP in C++ are classes and objects. A class is a blueprint
    for creating objects. It defines attributes (data members) and methods (functions)
    that describe the behavior and properties of objects.`'
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`class Circle {`'
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`public:`'
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`double radius;`'
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`double calculateArea()  {`'
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`return  3.14159  * radius * radius;`'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`};`'
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`In this example,  Circle is a class with a  radius attribute and a method  calculateArea()
    that computes the area of a circle.`'
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`2\. Encapsulation:`'
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Encapsulation is the practice of bundling data (attributes) and the methods
    (functions) that operate on that data within a class. In C++, you can control
    the visibility of class members using access specifiers:  public,  private, and  protected.`'
  id: totrans-97
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`class BankAccount {`'
  id: totrans-98
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`private:`'
  id: totrans-99
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`double balance;`'
  id: totrans-100
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`public:`'
  id: totrans-101
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`void deposit(double amount)  {`'
  id: totrans-102
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`if  (amount >  0)  {`'
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`balance += amount;`'
  id: totrans-104
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-105
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-106
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`double getBalance()  {`'
  id: totrans-107
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`return balance;`'
  id: totrans-108
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-109
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`};`'
  id: totrans-110
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Here, the  balance attribute is encapsulated as  private, meaning it can only
    be accessed and modified through the public methods  deposit() and  getBalance().`'
  id: totrans-111
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`3\. Inheritance:`'
  id: totrans-112
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Inheritance allows you to create new classes (derived or subclass) based on
    existing ones (base or superclass). Derived classes inherit the attributes and
    methods of the base class, promoting code reuse and hierarchy.`'
  id: totrans-113
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`class Shape {`'
  id: totrans-114
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`public:`'
  id: totrans-115
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`virtual  double calculateArea()  {`'
  id: totrans-116
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`return  0.0;  // Default implementation`'
  id: totrans-117
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-118
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`};`'
  id: totrans-119
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`class Circle :  public Shape {`'
  id: totrans-120
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`public:`'
  id: totrans-121
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`double radius;`'
  id: totrans-122
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`double calculateArea()  override  {`'
  id: totrans-123
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`return  3.14159  * radius * radius;`'
  id: totrans-124
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-125
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`};`'
  id: totrans-126
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`In this example,  Circle is a derived class of  Shape and overrides the  calculateArea()
    method to provide its own implementation.`'
  id: totrans-127
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`4\. Polymorphism:`'
  id: totrans-128
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Polymorphism allows objects of different classes to be treated as objects
    of a common base class. This facilitates dynamic method invocation and runtime
    flexibility.`'
  id: totrans-129
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Shape* shape =  new Circle();`'
  id: totrans-130
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`double area = shape->calculateArea();`'
  id: totrans-131
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Here, a  Circle object is treated as a  Shape object, and the  calculateArea()
    method is called accordingly.`'
  id: totrans-132
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`5\. Abstraction:`'
  id: totrans-133
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Abstraction is the process of simplifying complex systems by modeling them
    as objects with specific behaviors and attributes. Classes provide a level of
    abstraction by encapsulating relevant details.`'
  id: totrans-134
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`class Car {`'
  id: totrans-135
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`public:`'
  id: totrans-136
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`virtual  void start()  =  0;`'
  id: totrans-137
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`virtual void stop() = 0;`'
  id: totrans-138
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`};`'
  id: totrans-139
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`class ElectricCar : public Car {`'
  id: totrans-140
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`public:`'
  id: totrans-141
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`void start() override {`'
  id: totrans-142
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Start the electric car`'
  id: totrans-143
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-144
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`void stop() override {`'
  id: totrans-145
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Stop the electric car`'
  id: totrans-146
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-147
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`};`'
  id: totrans-148
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '-   在这个例子中，`Car`是一个抽象类，具有两个纯虚函数，强制派生类如`ElectricCar`必须提供`start()`和`stop()`的实现。'
  id: totrans-149
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`6. Composition:`'
  id: totrans-150
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '-   组合是通过将更简单的对象作为属性组合来构建复杂对象的实践。它促进了代码的模块化和可重用性。'
  id: totrans-151
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`class Engine {`'
  id: totrans-152
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`public:`'
  id: totrans-153
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`void start() {`'
  id: totrans-154
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Start the engine`'
  id: totrans-155
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-156
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`void stop() {`'
  id: totrans-157
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Stop the engine`'
  id: totrans-158
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-159
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`};`'
  id: totrans-160
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`class Car {`'
  id: totrans-161
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`private:`'
  id: totrans-162
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Engine engine;`'
  id: totrans-163
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`public:`'
  id: totrans-164
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`void start() {`'
  id: totrans-165
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`engine.start();`'
  id: totrans-166
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-167
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`void stop() {`'
  id: totrans-168
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`engine.stop();`'
  id: totrans-169
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-170
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`};`'
  id: totrans-171
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '-   在这个例子中，一个`Car`包含一个`Engine`作为属性，允许它将任务委托给`Engine`对象。'
  id: totrans-172
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '-   理解这些核心的面向对象编程概念在C++中对于设计和开发结构化和模块化的软件至关重要。这些概念为构建复杂和可维护的系统提供了基础，并广泛应用于各种应用中，从游戏开发到企业软件。'
  id: totrans-173
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`***`'
  id: totrans-174
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`3.3 Memory Management: From Malloc to Constructors`'
  id: totrans-175
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: '-   内存管理是C++编程的一个关键方面，与C显著不同，因为引入了类和对象。在本节中，我们将探讨C++如何管理内存，包括构造函数和析构函数的使用。'
  id: totrans-176
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`1. Constructors:`'
  id: totrans-177
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '-   在C++中，构造函数是定义在类中的特殊成员函数，当创建类的对象时会被调用。构造函数初始化对象的属性，并在必要时分配资源。'
  id: totrans-178
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`class Student {`'
  id: totrans-179
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`public:`'
  id: totrans-180
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Student() {`'
  id: totrans-181
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Constructor`'
  id: totrans-182
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`age = 0;`'
  id: totrans-183
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`name = "Unknown";`'
  id: totrans-184
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-185
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`private:`'
  id: totrans-186
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`int age;`'
  id: totrans-187
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`std::string name;`'
  id: totrans-188
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`};`'
  id: totrans-189
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '-   在这个例子中，`Student`类有一个构造函数，当创建`Student`对象时，会为`age`和`name`属性设置默认值。'
  id: totrans-190
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`2. Destructor:`'
  id: totrans-191
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '-   析构函数是另一个特殊的成员函数，当对象超出作用域或被显式删除时被调用。析构函数用于释放对象分配的资源，例如动态内存或文件句柄。'
  id: totrans-192
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`class FileHandler {`'
  id: totrans-193
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`public:`'
  id: totrans-194
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`FileHandler(const std::string& filename) {`'
  id: totrans-195
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Constructor: Open the file`'
  id: totrans-196
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`file.open(filename);`'
  id: totrans-197
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-198
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`~FileHandler() {`'
  id: totrans-199
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Destructor: Close the file`'
  id: totrans-200
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`file.close();`'
  id: totrans-201
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-202
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`private:`'
  id: totrans-203
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`std::ifstream file;`'
  id: totrans-204
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`};`'
  id: totrans-205
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '-   在这个例子中，`FileHandler`类有一个构造函数，用于打开文件，并且在对象被销毁时有一个析构函数，用于关闭文件。'
  id: totrans-206
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`3. Dynamic Memory Allocation:`'
  id: totrans-207
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '-   C++提供了如`new`和`delete`这样的操作符用于动态内存分配和释放。当您使用`new`创建对象时，它的构造函数被调用，并在堆上分配内存。'
  id: totrans-208
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Student* studentPtr = new Student(); // Dynamic object creation`'
  id: totrans-209
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '-   要释放内存并调用析构函数，您可以使用`delete`：'
  id: totrans-210
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`delete studentPtr;  // Destructor is called, and memory is freed`'
  id: totrans-211
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 4\. `RAII`（资源获取即初始化）：
  id: totrans-212
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`RAII`是C++编程习惯，它将资源（如内存或文件句柄）的生命周期与对象的生命周期绑定在一起。构造函数获取资源，析构函数释放资源，确保资源得到适当管理。'
  id: totrans-213
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`class DatabaseConnection {`'
  id: totrans-214
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`public:`'
  id: totrans-215
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`DatabaseConnection() {`'
  id: totrans-216
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Constructor: Open a database connection`'
  id: totrans-217
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-218
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`~DatabaseConnection() {`'
  id: totrans-219
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Destructor: Close the database connection`'
  id: totrans-220
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-221
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`};`'
  id: totrans-222
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 使用`RAII`，资源管理变得自动和确定，最小化了资源泄漏的风险。
  id: totrans-223
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 5\. 复制构造函数：
  id: totrans-224
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: C++提供了复制构造函数，用于创建现有对象的副本。默认情况下，C++生成一个执行逐成员复制的复制构造函数。然而，您可以定义自定义复制构造函数，以确保资源的正确复制。
  id: totrans-225
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`class MyString {`'
  id: totrans-226
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`public:`'
  id: totrans-227
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`MyString(const MyString& other) {`'
  id: totrans-228
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Custom copy constructor`'
  id: totrans-229
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`data = new char[strlen(other.data) + 1];`'
  id: totrans-230
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`strcpy(data, other.data);`'
  id: totrans-231
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-232
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`private:`'
  id: totrans-233
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`char* data;`'
  id: totrans-234
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`};`'
  id: totrans-235
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在这个例子中，`MyString`类定义了一个自定义复制构造函数，以创建字符数据的深拷贝。
  id: totrans-236
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 理解C++中的内存管理对于创建健壮和资源高效的程序至关重要。构造函数和析构函数在资源管理中起着关键作用，而`RAII`习惯用法鼓励资源管理的最佳实践。通过有效使用这些特性，C++开发人员可以确保在对象生命周期内正确分配和释放内存及其他资源。
  id: totrans-237
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-238
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 3.4 标准模板库（`STL`）
  id: totrans-239
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: 标准模板库（`STL`）是C++的核心组件，提供了一组预定义的类和函数，用于常见数据结构和算法。它通过提供一组经过良好测试和高效的组件，简化复杂任务并促进代码重用。在本节中，我们将探索`STL`的一些关键组件。
  id: totrans-240
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 1\. 容器：
  id: totrans-241
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`STL`提供了几种容器类，以高效存储和管理数据。一些常用的容器包括：'
  id: totrans-242
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '•            `Vector`: 一个动态数组，在添加或删除元素时自动调整大小。'
  id: totrans-243
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '•            `List`: 一个双向链表，允许在列表的任何位置高效插入和删除元素。'
  id: totrans-244
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '•            `Map`: 一个关联容器，存储键值对，通过键提供快速查找。'
  id: totrans-245
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '•            `Set`: 存储唯一元素的容器，用于维护一组不同的值。'
  id: totrans-246
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`#include <vector>`'
  id: totrans-247
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`#include <map>`'
  id: totrans-248
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`std::vector<int> numbers = {1, 2, 3, 4, 5};`'
  id: totrans-249
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`std::map<std::string, int> ageMap;`'
  id: totrans-250
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 2\. 迭代器：
  id: totrans-251
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 迭代器用于遍历和操作容器中的元素。它们提供了一种统一的方式来访问元素，无论底层容器类型如何。
  id: totrans-252
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`for (auto it = numbers.begin(); it != numbers.end(); ++it) {`'
  id: totrans-253
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Access or modify elements using ''it''`'
  id: totrans-254
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-255
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`3. Algorithms:`'
  id: totrans-256
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'STL includes a wide range of algorithms that operate on containers. These algorithms
    perform tasks like sorting, searching, and modifying elements. Some commonly used
    algorithms include:'
  id: totrans-257
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '• `std::sort`: Sorts elements in a container.'
  id: totrans-258
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '• `std::find`: Searches for an element in a container.'
  id: totrans-259
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '• `std::for_each`: Applies a function to each element in a container.'
  id: totrans-260
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`#include <algorithm>`'
  id: totrans-261
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`std::sort(numbers.begin(), numbers.end());`'
  id: totrans-262
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`auto result = std::find(numbers.begin(), numbers.end(), 3);`'
  id: totrans-263
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`4. Function Objects (Functors):`'
  id: totrans-264
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Functors are objects that behave like functions. They are often used with algorithms
    to customize their behavior. You can define your own functors by overloading the
    `operator()`.
  id: totrans-265
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`struct Square {`'
  id: totrans-266
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`int operator()(int x) const {`'
  id: totrans-267
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`return x * x;`'
  id: totrans-268
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-269
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`};`'
  id: totrans-270
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`std::transform(numbers.begin(), numbers.end(), numbers.begin(), Square());`'
  id: totrans-271
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`5. Strings:`'
  id: totrans-272
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`C++` provides the `std::string` class as part of the STL, offering a more
    user-friendly and versatile alternative to C-style character arrays. `std::string`
    handles memory management and provides various string manipulation functions.'
  id: totrans-273
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`#include <string>`'
  id: totrans-274
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`std::string greeting = "Hello, World!";`'
  id: totrans-275
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`6. Smart Pointers:`'
  id: totrans-276
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: STL includes smart pointers like `std::shared_ptr`, `std::unique_ptr`, and `std::weak_ptr`
    to manage dynamic memory efficiently. These pointers automatically handle memory
    deallocation when the object is no longer needed, reducing the risk of memory
    leaks.
  id: totrans-277
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`#include <memory>`'
  id: totrans-278
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`std::shared_ptr<int> sharedPtr = std::make_shared<int>(42);`'
  id: totrans-279
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`std::unique_ptr<double> uniquePtr = std::make_unique<double>(3.14);`'
  id: totrans-280
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`7. Utility Functions:`'
  id: totrans-281
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: STL provides utility functions like `std::pair` and `std::tuple` for handling
    pairs and tuples of values. These are commonly used in functions and algorithms
    that return multiple values.
  id: totrans-282
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`#include <utility>`'
  id: totrans-283
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`std::pair<int, std::string> person = std::make_pair(25, "Alice");`'
  id: totrans-284
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`std::tuple<int, double, std::string> data = std::make_tuple(42, 3.14, "Hello");`'
  id: totrans-285
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The Standard Template Library is a powerful tool for `C++` developers, offering
    a wide range of reusable components and algorithms that simplify common programming
    tasks. By leveraging the STL effectively, programmers can write more efficient
    and maintainable code, reducing the need for reinventing the wheel when it comes
    to data structures and algorithms. Understanding the STL’s components and how
    to use them is essential for any `C++` developer.
  id: totrans-286
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-287
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`3.5 Real-world Applications of C++`'
  id: totrans-288
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: '`C++` is a versatile programming language known for its performance and efficiency.
    In this section, we’ll explore some real-world applications of `C++` and how it
    is used in various domains.'
  id: totrans-289
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`1. Systems Programming:`'
  id: totrans-290
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`C++` is widely used for systems programming tasks. It plays a crucial role
    in developing operating systems, device drivers, and firmware for embedded systems.
    Its low-level capabilities make it suitable for managing hardware resources and
    interacting with peripherals.'
  id: totrans-291
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Example of systems programming in C++`'
  id: totrans-292
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`#include <iostream>`'
  id: totrans-293
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`#include <fstream>`'
  id: totrans-294
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`#include <unistd.h>`'
  id: totrans-295
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`int main() {`'
  id: totrans-296
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`std::cout << "Hello, C++ Systems Programming!" << std::endl;`'
  id: totrans-297
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`std::ofstream outputFile("data.txt");`'
  id: totrans-298
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`outputFile << "Data written to a file." << std::endl;`'
  id: totrans-299
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`close(1); // Close standard output`'
  id: totrans-300
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`return 0;`'
  id: totrans-301
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-302
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`2. Game Development:`'
  id: totrans-303
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`C++ is a popular choice for game development due to its performance and ability
    to handle resource-intensive tasks. Game engines like Unreal Engine and Unity
    use C++ extensively for their core systems.`'
  id: totrans-304
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Game development in C++`'
  id: totrans-305
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`#include <iostream>`'
  id: totrans-306
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`class Game {`'
  id: totrans-307
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`public:`'
  id: totrans-308
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`void run() {`'
  id: totrans-309
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Game loop`'
  id: totrans-310
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`while (isRunning) {`'
  id: totrans-311
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Game logic and rendering`'
  id: totrans-312
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-313
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-314
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`private:`'
  id: totrans-315
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`bool isRunning = true;`'
  id: totrans-316
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`};`'
  id: totrans-317
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`3. High-Performance Computing (HPC):`'
  id: totrans-318
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`C++ is favored in the field of high-performance computing, where maximum computational
    power is required. C++’s low-level memory control and optimization capabilities
    make it suitable for scientific simulations, weather modeling, and financial analysis.`'
  id: totrans-319
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// High-performance computing in C++`'
  id: totrans-320
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`#include <iostream>`'
  id: totrans-321
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`#include <vector>`'
  id: totrans-322
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`#include <omp.h>`'
  id: totrans-323
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`int main() {`'
  id: totrans-324
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`std::vector<double> data(1000000, 0.0);`'
  id: totrans-325
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`#pragma omp parallel for`'
  id: totrans-326
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`for (int i = 0; i < data.size(); ++i) {`'
  id: totrans-327
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`data[i] = i * 2.0;`'
  id: totrans-328
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-329
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`std::cout << "HPC task completed." << std::endl;`'
  id: totrans-330
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`return 0;`'
  id: totrans-331
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-332
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`4. Aerospace and Defense:`'
  id: totrans-333
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`C++ is used in the aerospace and defense industries for tasks like flight
    control systems, radar signal processing, and simulation software. Its reliability
    and real-time capabilities make it suitable for safety-critical applications.`'
  id: totrans-334
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Aerospace application in C++`'
  id: totrans-335
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`#include <iostream>`'
  id: totrans-336
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`class FlightControlSystem {`'
  id: totrans-337
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`public:`'
  id: totrans-338
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`void controlFlight() {`'
  id: totrans-339
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Flight control logic`'
  id: totrans-340
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-341
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`};`'
  id: totrans-342
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`5. Finance and Trading:`'
  id: totrans-343
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`In the finance sector, C++ is used for algorithmic trading, risk management,
    and high-frequency trading systems. Its low-latency capabilities and efficient
    memory management are critical for processing large volumes of financial data.`'
  id: totrans-344
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Algorithmic trading in C++`'
  id: totrans-345
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`#include <iostream>`'
  id: totrans-346
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`class TradingAlgorithm {`'
  id: totrans-347
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`public:`'
  id: totrans-348
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`void execute() {`'
  id: totrans-349
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Trading strategy implementation`'
  id: totrans-350
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-351
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`};`'
  id: totrans-352
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`6. Game Engines and Graphics Libraries:`'
  id: totrans-353
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`C++ is the language of choice for developing game engines and graphics libraries.
    Libraries like OpenGL and DirectX leverage C++’s performance to create immersive
    gaming experiences.`'
  id: totrans-354
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Graphics programming with C++`'
  id: totrans-355
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`#include <iostream>`'
  id: totrans-356
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`#include <OpenGL/gl.h>`'
  id: totrans-357
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`int main() {`'
  id: totrans-358
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// OpenGL rendering code`'
  id: totrans-359
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`return 0;`'
  id: totrans-360
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-361
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`7. Automotive Industry:`'
  id: totrans-362
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`C++ is used for developing embedded software in vehicles, including engine
    control units (ECUs), infotainment systems, and autonomous driving algorithms.
    Its real-time capabilities and performance are critical for automotive applications.`'
  id: totrans-363
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Automotive software development in C++`'
  id: totrans-364
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`#include <iostream>`'
  id: totrans-365
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`class AutonomousDrivingSystem {`'
  id: totrans-366
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`public:`'
  id: totrans-367
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`void drive() {`'
  id: totrans-368
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Autonomous driving logic`'
  id: totrans-369
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-370
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`};`'
  id: totrans-371
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: C++’s wide range of applications is a testament to its flexibility and power.
    It continues to be a preferred choice for projects that demand high performance,
    efficient memory management, and low-level control. Understanding how C++ is used
    across different domains is valuable for developers looking to specialize in specific
    industries or projects.
  id: totrans-372
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`* * *`'
  id: totrans-373
  prefs: []
  stylish: true
  type: TYPE_NORMAL
