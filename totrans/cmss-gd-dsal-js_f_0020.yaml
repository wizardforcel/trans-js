- en: Deletion
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 删除
- en: Deletion from an array is the process of eliminating the value at a particular
    index.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 从 `array` 中删除是指消除特定索引处的值的过程。
- en: Let’s return to our original example array and delete the value at index `2`。
    In our example, this value is `"cucumbers"`.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们回到最初的示例数组，并删除索引 `2` 处的值。在我们的示例中，这个值是 `"cucumbers"`。
- en: 'Step `1`: We delete `"cucumbers"` from the `array`:'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第 `1` 步：我们从 `array` 中删除 `"cucumbers"`：
- en: '![`images/understanding_arrays/array_16.png`](images/understanding_arrays/array_16.png)'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/understanding_arrays/array_16.png`](images/understanding_arrays/array_16.png)'
- en: 'While the actual deletion of `"cucumbers"` technically took just one step,
    we now have a problem: we have an empty cell sitting smack in the middle of our
    array. An array isn’t effective when there are gaps in the middle of it, so to
    resolve this issue, we need to shift `"dates"` and `"elderberries"` to the left.
    This means our deletion process requires additional steps.'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 尽管实际上删除 `"cucumbers"` 只需一步，但我们现在遇到了一个问题：我们的数组中正好有一个空单元。数组在中间有空缺时并不高效，因此为了解决这个问题，我们需要将
    `"dates"` 和 `"elderberries"` 向左移动。这意味着我们的删除过程需要额外的步骤。
- en: 'Step `2`: We shift `"dates"` to the left:'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第 `2` 步：我们将 `"dates"` 向左移动：
- en: '![`images/understanding_arrays/array_17.png`](images/understanding_arrays/array_17.png)'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/understanding_arrays/array_17.png`](images/understanding_arrays/array_17.png)'
- en: 'Step `3`: We shift `"elderberries"` to the left:'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第 `3` 步：我们将 `"elderberries"` 向左移动：
- en: '![`images/understanding_arrays/array_18.png`](images/understanding_arrays/array_18.png)'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/understanding_arrays/array_18.png`](images/understanding_arrays/array_18.png)'
- en: It turns out that for this deletion, the entire operation took three steps.
    The first step involved the actual deletion, and the other two steps involved
    data shifts to close the gap.
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 结果是，这个删除操作总共花费了三步。第一步是实际的删除，接下来的两步是数据移动以填补空缺。
- en: Like insertion, the worst-case scenario of deleting an element is deleting the
    very first element of the `array`. This is because index `0` would become empty,
    and we’d have to shift all the remaining elements to the left to fill the gap.
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 与插入相似，删除元素的最坏情况是删除 `array` 中的第一个元素。这是因为索引 `0` 会变为空，我们需要将所有剩余元素向左移动以填补空缺。
- en: For an `array` of `5` elements, we’d spend `1` step deleting the first element
    and `4` steps shifting the `4` remaining elements. For an `array` of `500` elements,
    we’d spend `1` step deleting the first element, and `499` steps shifting the remaining
    data. We can say then, that for an `array` containing `N` elements, the maximum
    number of steps that deletion would take is `N` steps.
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 对于一个包含 `5` 个元素的 `array`，我们需要 `1` 步删除第一个元素，并且需要 `4` 步将剩下的 `4` 个元素移动。对于一个包含 `500`
    个元素的 `array`，我们需要 `1` 步删除第一个元素，以及 `499` 步移动剩余数据。因此我们可以说，对于一个包含 `N` 个元素的 `array`，删除操作所需的最大步骤数是
    `N` 步。
- en: Congratulations! We’ve analyzed the time complexity of our first data structure.
    Now that you’ve learned how to analyze a data structure’s efficiency, you can
    discover how different data structures have different efficiencies. This is crucial,
    because choosing the correct data structure for your code can have serious ramifications
    on your software’s performance.
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 恭喜你！我们已经分析了第一个数据结构的时间复杂度。现在你已经学会了如何分析数据结构的效率，你可以发现不同的数据结构具有不同的效率。这一点至关重要，因为为你的代码选择正确的数据结构可能会对软件的性能产生严重影响。
- en: The next data structure—the `set`—seems so similar to the `array` at first glance.
    However, you’ll see that the operations performed on `arrays` and `sets` have
    different efficiencies.
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 下一个数据结构——`set`——乍一看似乎与 `array` 非常相似。然而，你会发现对 `arrays` 和 `sets` 执行的操作具有不同的效率。
