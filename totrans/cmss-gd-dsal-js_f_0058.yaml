- en: Insertion Sort in Action
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s apply Insertion Sort to the array [4, 2, 7, 1, 3].
  prefs: []
  type: TYPE_NORMAL
- en: 'We begin the first pass-through by inspecting the value at index 1\. This happens
    to contain the value 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/insertion_sort_6.png](images/optimizing_for_optimistic_scenarios/insertion_sort_6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 1: We temporarily remove the 2 and keep it inside a variable called tempValue.
    We represent this value by shifting it above the rest of the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/insertion_sort_7.png](images/optimizing_for_optimistic_scenarios/insertion_sort_7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 2: We compare the 4 to the tempValue, which is 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/insertion_sort_8.png](images/optimizing_for_optimistic_scenarios/insertion_sort_8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 3: Because 4 is greater than 2, we shift the 4 to the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/insertion_sort_9.png](images/optimizing_for_optimistic_scenarios/insertion_sort_9.png)'
  prefs: []
  type: TYPE_IMG
- en: Nothing is left to shift, as the gap is now at the left end of the array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4: We insert the tempValue into the gap, completing our first pass-through:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/step_4.png](images/optimizing_for_optimistic_scenarios/step_4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we begin the second pass-through:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 5: In our second pass-through, we temporarily remove the value at index
    2\. We’ll store this in tempValue. In this case, the tempValue is 7:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/insertion_sort_12.png](images/optimizing_for_optimistic_scenarios/insertion_sort_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 6: We compare the 4 to the tempValue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/insertion_sort_13.png](images/optimizing_for_optimistic_scenarios/insertion_sort_13.png)'
  prefs: []
  type: TYPE_IMG
- en: The 4 is lower, so we won’t shift it. Since we reached a value that is less
    than the tempValue, this shifting phase is over.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 7: We insert the tempValue back into the gap, ending the second pass-through:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/insertion_sort_14.png](images/optimizing_for_optimistic_scenarios/insertion_sort_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We now begin the third pass-through:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 8: We temporarily remove the 1 and store it in tempValue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/insertion_sort_16.png](images/optimizing_for_optimistic_scenarios/insertion_sort_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 9: We compare the 7 to the tempValue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/insertion_sort_17.png](images/optimizing_for_optimistic_scenarios/insertion_sort_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 10: The 7 is greater than 1, so we shift the 7 to the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/insertion_sort_18.png](images/optimizing_for_optimistic_scenarios/insertion_sort_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 11: We compare the 4 to the tempValue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/insertion_sort_19.png](images/optimizing_for_optimistic_scenarios/insertion_sort_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 12: The 4 is greater than 1, so we shift it as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/insertion_sort_20.png](images/optimizing_for_optimistic_scenarios/insertion_sort_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 13: We compare the 2 to the tempValue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/insertion_sort_21.png](images/optimizing_for_optimistic_scenarios/insertion_sort_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 14: The 2 is greater, so we shift it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/insertion_sort_22.png](images/optimizing_for_optimistic_scenarios/insertion_sort_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 15: The gap has reached the left end of the array, so we insert the tempValue
    into the gap, concluding this pass-through:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/step_15.png](images/optimizing_for_optimistic_scenarios/step_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we begin the fourth pass-through:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 16: We temporarily remove the value from index 4, making it our tempValue.
    This is the value 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/insertion_sort_24.png](images/optimizing_for_optimistic_scenarios/insertion_sort_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 17: We compare the 7 to the tempValue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/insertion_sort_25.png](images/optimizing_for_optimistic_scenarios/insertion_sort_25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 18: The 7 is greater, so we shift the 7 to the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/insertion_sort_26.png](images/optimizing_for_optimistic_scenarios/insertion_sort_26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 19: We compare the 4 to the tempValue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/insertion_sort_27.png](images/optimizing_for_optimistic_scenarios/insertion_sort_27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 20: The 4 is greater than the 3, so we shift the 4:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/insertion_sort_28.png](images/optimizing_for_optimistic_scenarios/insertion_sort_28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 21: We compare the 2 to the tempValue. The 2 is less than 3, so our shifting
    phase is complete:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/insertion_sort_29.png](images/optimizing_for_optimistic_scenarios/insertion_sort_29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 22: We insert the tempValue back into the gap:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/step_22.png](images/optimizing_for_optimistic_scenarios/step_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Our array is now fully sorted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/optimizing_for_optimistic_scenarios/insertion_sort_31.png](images/optimizing_for_optimistic_scenarios/insertion_sort_31.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Code Implementation: Insertion Sort'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here’s a JavaScript implementation of Insertion Sort:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | ​**function**​ insertionSort(array) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**for**​ (​**let**​ index = 1; index < array.length; index += 1) {
    |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**const**​ tempValue = array[index]; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**let**​ position = index - 1; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**while**​ (position >= 0) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**if**​ (array[position] > tempValue) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | array[position + 1] = array[position]; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | position -= 1; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } ​**else**​ { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**break**​; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: '| ​  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | array[position + 1] = tempValue; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: '| ​  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**return**​ array; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: Let’s walk through this code step by step.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we start a loop beginning at index 1 that runs through the entire array.
    Each round of this loop represents a pass-through:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | ​**for**​ (​**let**​ index = 1; index < array.length; index += 1) {
    |'
  prefs: []
  type: TYPE_TB
- en: 'Within each pass-through, we save the value we’re “removing” in a variable
    called tempValue:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | ​**const**​ tempValue = array[index]; |'
  prefs: []
  type: TYPE_TB
- en: 'Next, we create a variable called position, which will start immediately to
    the left of the index of the tempValue. This position will represent each value
    we compare against the tempValue:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | ​**let**​ position = index - 1; |'
  prefs: []
  type: TYPE_TB
- en: As we move through the pass-through, this position will keep moving leftward
    as we compare each value to the tempValue.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then begin an inner while loop, which runs as long as position is greater
    than or equal to 0:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | ​**while**​ (position >= 0) { |'
  prefs: []
  type: TYPE_TB
- en: 'We then perform our comparison; that is, we check whether the value at position
    is greater than the tempValue:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | ​**if**​ (array[position] > tempValue) { |'
  prefs: []
  type: TYPE_TB
- en: 'If it is, we shift that left value to the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | array[position + 1] = array[position]; |'
  prefs: []
  type: TYPE_TB
- en: 'We then decrement position by 1 to compare the next left value against the
    tempValue in the next round of the while loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | position -= 1; |'
  prefs: []
  type: TYPE_TB
- en: 'If at any point we encounter a value at position that is less than or equal
    to the tempValue, we can get ready to end our pass-through since it’s time to
    move the tempValue into the gap:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | } ​**else**​ { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**break**​; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: 'The final step of each pass-through is moving the tempValue into the gap:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | array[position + 1] = tempValue; |'
  prefs: []
  type: TYPE_TB
- en: 'After all pass-throughs have been completed, we return the sorted array:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | ​**return**​ array; |'
  prefs: []
  type: TYPE_TB
