- en: The Efficiency of `Selection Sort`
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`选择排序`的效率'
- en: '`Selection Sort` contains two types of steps: comparisons and swaps. We compare
    each value with the lowest number we’ve encountered in each pass-through, and
    we swap the lowest number into its correct position.'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`选择排序`包含两种类型的步骤：比较和交换。我们将每个值与每次遍历中遇到的最小数字进行比较，并将最小数字交换到其正确的位置。'
- en: 'Looking back at our example array that contains five elements, we had to make
    a total of 10 comparisons. Let’s break it down in the following table:'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 回顾我们包含五个元素的示例数组，我们总共进行了10次比较。让我们在以下表格中详细分析：
- en: '| Pass-Through # | # of Comparisons |'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 遍历次数 | 比较次数 |'
- en: '| --- | --- |'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 1 | 4 comparisons |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 1 | 4 次比较 |'
- en: '| 2 | 3 comparisons |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 2 | 3 次比较 |'
- en: '| 3 | 2 comparisons |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 3 | 2 次比较 |'
- en: '| 4 | 1 comparison |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 4 | 1 次比较 |'
- en: That’s a grand total of `4 + 3 + 2 + 1 = 10` comparisons.
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 总共是 `4 + 3 + 2 + 1 = 10` 次比较。
- en: To put it in a way that works for arrays of all sizes, we’d say that for `N`
    elements, we make (`N - 1`) + (`N - 2`) + (`N - 3`) … + `1` comparisons.
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 用适合所有大小数组的方式来说，对于`N` 个元素，我们进行 (`N - 1`) + (`N - 2`) + (`N - 3`) … + `1` 次比较。
- en: As for swaps, though, we only need to make a maximum of one swap per pass-through.
    This is because in each pass-through, we make either one or zero swaps, depending
    on whether the lowest number of that pass-through is already in the correct position.
    Contrast this with `Bubble Sort` where in a worst-case scenario we have to make
    a swap for each and every comparison.
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 至于交换，我们每次遍历最多只需进行一次交换。这是因为在每次遍历中，我们要么进行一次交换，要么不进行交换，这取决于该遍历中最小的数字是否已经在正确的位置。与`冒泡排序`相比，在最坏的情况下，我们必须为每一次比较进行交换。
- en: 'Here’s a side-by-side comparison of `Bubble Sort` and `Selection Sort`:'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 下面是`冒泡排序`和`选择排序`的并排比较：
- en: '| `N Elements` | Max # of Steps in `Bubble Sort` | Max # of Steps in `Selection
    Sort` |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `N 个元素` | `冒泡排序`中的最大步骤数 | `选择排序`中的最大步骤数 |'
- en: '| --- | --- | --- |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 5 | 20 | 14 (`10` comparisons + `4` swaps) |'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 5 | 20 | 14 (`10` 次比较 + `4` 次交换) |'
- en: '| 10 | 90 | 54 (`45` comparisons + `9` swaps) |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 10 | 90 | 54 (`45` 次比较 + `9` 次交换) |'
- en: '| 20 | 380 | 209 (`190` comparisons + `19` swaps) |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 20 | 380 | 209 (`190` 次比较 + `19` 次交换) |'
- en: '| 40 | 1560 | 819 (`780` comparisons + `39` swaps) |'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 40 | 1560 | 819 (`780` 次比较 + `39` 次交换) |'
- en: '| 80 | 6320 | 3239 (`3160` comparisons + `79` swaps) |'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 80 | 6320 | 3239 (`3160` 次比较 + `79` 次交换) |'
- en: From this comparison, it’s clear `Selection Sort` takes about half the number
    of steps `Bubble Sort` does, indicating that `Selection Sort` is twice as fast.
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 从这个比较可以看出，`选择排序`的步骤大约是`冒泡排序`的一半，这表明`选择排序`速度快了两倍。
