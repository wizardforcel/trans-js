["```js\n1 const sym = Symbol();\n\n```", "```js\n1 const sym = Symbol();\n2 \n3 const obj = {};\n4 obj[sym] = \"hello\";\n5 \n6 console.log(obj[sym]); // hello\n\n```", "```js\n1 const sym = Symbol();\n2 \n3 const obj = {\n4   [sym]: \"hello\"\n5 };\n6 \n7 console.log(obj[sym]); // hello\n\n```", "```js\n1 const name = \"name\";\n2 \n3 const person = {\n4   [name]: \"John Doe\"\n5 };\n6 \n7 console.log(person.name); // John Doe\n8 console.log(person[\"name\"]); // John Doe\n9 console.log(person[name]); // John Doe\n\n```", "```js\n1 const name = Symbol();\n2 \n3 const person = {\n4   [name]: \"John Doe\"\n5 };\n6 \n7 console.log(person.name); // undefined\n8 console.log(person[\"name\"]); // undefined\n9 console.log(person[name]); // John Doe\n\n```", "```js\n 1 const name = Symbol();\n 2 \n 3 const person = {\n 4  [name]: \"John Doe\",\n 5  age: 20\n 6 };\n 7 \n 8 // only sees the \"age\" property\n 9 for (const prop in person) {\n10   console.log(prop);\n11 }\n12 \n13 console.log(Object.keys(person)); // [\"age\"]\n14 \n15 console.log(Object.getOwnPropertyNames(person)); // [\"age\"]\n\n```", "```js\n 1 const name = Symbol();\n 2 \n 3 const person = {\n 4  [name]: \"John Doe\",\n 5  age: 20\n 6 };\n 7 \n 8 console.log(Object.getOwnPropertyDescriptors(person));\n 9 \n10 console.log(Object.getOwnPropertySymbols(person));\n\n```", "```js\n1 const propSymbol = Symbol(\"property symbol\");\n\n```", "```js\n1 const propSymbol = Symbol(\"property symbol\");\n2 \n3 console.log(propSymbol.description);\n4 // property symbol\n\n```", "```js\n1 const propSymbol = Symbol(\"property symbol\");\n2 \n3 console.log(propSymbol.description);\n4 // property symbol\n5 \n6 propSymbol.description = \"123\";\n7 \n8 console.log(propSymbol.description);\n9 // property symbol\n\n```", "```js\n1 const globalSymbolKey = \"my-global-Symbol\";\n2 const mySymbol = Symbol.for(globalSymbolKey);\n3 \n4 console.log(mySymbol === Symbol.for(globalSymbolKey));\n5 // true\n\n```", "```js\n1 const globalSymbolKey = \"my-global-Symbol\";\n2 const mySymbol = Symbol.for(globalSymbolKey);\n3 \n4 console.log(Symbol.keyFor(mySymbol));\n5 // my-global-Symbol\n\n```", "```js\n 1 const movie = {\n 2  name: \"Jurassic Park\",\n 3  releaseDate: \"09,June,1993\",\n 4 \n 5  [Symbol.toPrimitive](hint) {\n 6    if (hint === \"number\") {\n 7      return new Date(this.releaseDate).getTime();\n 8    } else {\n 9      return this.name;\n10     }\n11   }\n12 };\n13 \n14 console.log(Number(movie));\n15 console.log(String(movie));\n\n```", "```js\n1 console.log({}.toString()); // [object Object]\n\n```", "```js\n1 const arr = [1, 2, 3];\n2 // overridden implementation\n3 console.log(arr.toString()); // \"1,2,3\"\n4 \n5 // default implementation from Object.prototype\n6 console.log(Object.prototype.toString.call(arr)); // [object Array]\n\n```", "```js\n1 const task = {\n2   title: \"exercise\",\n3   isComplete: false,\n4   [Symbol.toStringTag]: \"Task\"\n5 };\n6 \n7 console.log(task.toString()); // [object Task]\n\n```", "```js\n1 const arr = [1, 2, 3];\n2 console.log([].concat(arr));\n3 // [1, 2, 3]\n4 \n5 arr[Symbol.isConcatSpreadable] = false;\n6 console.log([].concat(arr));\n7 // [[1, 2, 3]]\n\n```", "```js\n1 const obj = {\n2   0: 123,\n3   1: 456,\n4   length: 2,\n5   [Symbol.isConcatSpreadable]: true\n6 };\n7 \n8 console.log([].concat(obj));\n9 // [123, 456]\n\n```"]