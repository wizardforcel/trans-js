- en: '`Wrapping Up`'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`总结`'
- en: We’re almost at the end of our journey, as this chapter represents the last
    significant data structure you’ll encounter in this book. You’ve seen that `graphs`
    are extremely powerful tools for dealing with data involving relationships, and
    in addition to making our code fast, they can also help solve tricky problems.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们的旅程快要结束了，这一章代表了你在本书中将遇到的最后一个重要数据结构。你已经看到，`图`是处理涉及关系的数据的极其强大的工具，除了使我们的代码快速外，它们还可以帮助解决棘手的问题。
- en: In truth, I could fill a book just discussing `graphs`. So many interesting
    and useful algorithms surround this data structure, such as the `minimum spanning
    tree`，`topological sort`，`bidirectional search`，the `Floyd--Warshall algorithm`，the
    `Bellman–Ford algorithm`，and `graph coloring`，just to name a few. But this chapter
    should serve as the foundation for you to explore these additional topics.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 事实上，我可以用一本书来讨论`图`。围绕这个数据结构有许多有趣且有用的算法，比如`最小生成树`、`拓扑排序`、`双向搜索`、`弗洛伊德-沃沙尔算法`、`贝尔曼-福特算法`和`图着色`，仅举几例。但这一章应该为你探索这些额外主题奠定基础。
- en: Along our travels, our primary focus has been on how fast our code will run;
    that is, we’ve been measuring how efficient our code performs in terms of time,
    and we’ve been measuring that in terms of counting the number of steps our algorithms
    take.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在我们的旅行中，主要关注的是我们的代码运行速度；也就是说，我们一直在测量代码在时间方面的效率，并通过计算算法所需的步骤数来衡量。
- en: However, efficiency can be measured in ways other than speed alone. In particular,
    we might care about how much memory a data structure or algorithm might consume.
    In the next chapter, you’ll learn how to analyze the efficiency of our code in
    terms of `space`.
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，效率不仅仅可以通过速度来衡量。特别是，我们可能关心数据结构或算法可能消耗的内存。在下一章中，你将学习如何从`空间`的角度分析我们代码的效率。
