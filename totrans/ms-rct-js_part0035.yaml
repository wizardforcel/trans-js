- en: 'Chapter 14: Backend Development with Node.js'
  id: totrans-0
  prefs:
  - PREF_H1
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章：使用Node.js进行后端开发
- en: In the world of web development, the backend is the backbone of web applications,
    responsible for processing requests, handling data, and serving responses to the
    client-side. Node.js, a powerful and popular runtime environment built on Chrome's
    V8 JavaScript engine, has revolutionized backend development by allowing developers
    to use JavaScript on the server-side. In this chapter, we will explore Node.js,
    its key concepts, and how to build robust and scalable backend applications using
    this versatile platform.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在web开发的世界中，后端是web应用程序的支柱，负责处理请求、处理数据并向客户端提供响应。Node.js是一个强大且流行的运行时环境，基于Chrome的V8
    JavaScript引擎构建，它通过允许开发者在服务器端使用JavaScript，彻底改变了后端开发。在本章中，我们将探索Node.js、它的关键概念以及如何利用这一多功能平台构建健壮且可扩展的后端应用程序。
- en: 1\. What is Node.js?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 什么是Node.js？
- en: Node.js is an open-source, cross-platform JavaScript runtime environment that
    allows developers to execute JavaScript code outside the browser. It was created
    by Ryan Dahl in 2009 and has since become widely adopted in the web development
    community. Node.js uses an event-driven, non-blocking I/O model, making it efficient
    and suitable for building scalable network applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js是一个开源的跨平台JavaScript运行时环境，允许开发者在浏览器之外执行JavaScript代码。它由Ryan Dahl于2009年创建，至今已广泛应用于web开发社区。Node.js使用事件驱动的非阻塞I/O模型，使其高效且适合构建可扩展的网络应用程序。
- en: 2\. Key Concepts of Node.js
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. Node.js的关键概念
- en: 'To understand Node.js better, let''s explore its key concepts:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解Node.js，让我们探讨它的关键概念：
- en: a. Event Loop
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: a. 事件循环
- en: Node.js is built on an event-driven architecture, where events trigger callbacks
    that are registered to handle them. The event loop is a central part of Node.js
    that continuously checks for events and executes the associated callbacks.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js基于事件驱动的架构，事件触发回调函数，而回调函数则注册来处理这些事件。事件循环是Node.js的核心部分，它不断检查事件并执行相关的回调函数。
- en: b. Asynchronous Programming
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: b. 异步编程
- en: Node.js promotes asynchronous programming, where I/O operations and other time-consuming
    tasks do not block the execution of other code. This allows Node.js to handle
    multiple requests concurrently, making it highly efficient for handling a large
    number of connections.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js提倡异步编程，其中I/O操作和其他耗时任务不会阻塞其他代码的执行。这使得Node.js能够并发处理多个请求，极大提高了处理大量连接的效率。
- en: c. npm (Node Package Manager)
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: c. npm（Node包管理器）
- en: npm is the package manager for Node.js, allowing developers to install, manage,
    and share reusable JavaScript code packages. It is the largest ecosystem of open-source
    libraries in the world and a crucial tool for Node.js developers.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: npm是Node.js的包管理器，允许开发者安装、管理和共享可重用的JavaScript代码包。它是全球最大的开源库生态系统，是Node.js开发者的重要工具。
- en: d. CommonJS Modules
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: d. CommonJS模块
- en: Node.js uses the CommonJS module system for organizing code into reusable modules.
    Modules allow developers to encapsulate functionality and export it for use in
    other parts of the application.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js使用CommonJS模块系统来组织代码成可重用的模块。模块允许开发者封装功能并将其导出供应用的其他部分使用。
- en: e. Non-blocking I/O
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: e. 非阻塞I/O
- en: Node.js uses a non-blocking I/O model, which means that I/O operations such
    as reading from a file or making a network request do not block the execution
    of other code. Instead, Node.js continues to process other tasks while waiting
    for the I/O operation to complete.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js使用非阻塞I/O模型，这意味着读取文件或发起网络请求等I/O操作不会阻塞其他代码的执行。相反，Node.js在等待I/O操作完成的同时继续处理其他任务。
- en: 3\. Setting Up a Node.js Project
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 设置Node.js项目
- en: To start building a backend application with Node.js, we need to set up a project
    and install the necessary dependencies using npm.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始构建一个基于Node.js的后端应用，我们需要设置一个项目并使用npm安装必要的依赖项。
- en: Initializing a Node.js Project
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初始化Node.js项目
- en: 'To initialize a new Node.js project, open your terminal or command prompt and
    run the following command:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要初始化一个新的Node.js项目，打开终端或命令提示符并运行以下命令：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This command will guide you through a series of prompts to create a package.json
    file, which will contain information about your project and its dependencies.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将引导你完成一系列提示，以创建一个package.json文件，该文件将包含关于你的项目及其依赖项的信息。
- en: Installing Dependencies
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装依赖项
- en: 'Node.js allows you to install third-party libraries or packages using npm.
    For example, to install the Express framework, a popular choice for building backend
    applications, run the following command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js允许你使用npm安装第三方库或包。例如，要安装Express框架，这是构建后端应用的流行选择，可以运行以下命令：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will install Express and add it as a dependency in your package.json file.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装Express并将其作为依赖项添加到你的package.json文件中。
- en: 4\. Creating a Simple HTTP Server
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 创建一个简单的HTTP服务器
- en: One of the fundamental tasks of a backend application is to handle HTTP requests
    and serve responses. Let's create a simple HTTP server using Node.js and Express.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 后端应用的一个基本任务是处理HTTP请求并提供响应。让我们使用Node.js和Express创建一个简单的HTTP服务器。
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the above example, we import the Express module, create an instance of the
    Express application, and define a route that responds with "Hello, World!" when
    the root URL is accessed. We then start the server and listen on port 3000.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们导入了Express模块，创建了一个Express应用实例，并定义了一个路由，当访问根URL时会响应“Hello, World!”。然后我们启动服务器并监听3000端口。
- en: 5\. Handling HTTP Requests
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 处理HTTP请求
- en: Express provides a simple and elegant way to handle different types of HTTP
    requests, such as GET, POST, PUT, DELETE, etc.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Express提供了一种简单而优雅的方式来处理不同类型的HTTP请求，如GET、POST、PUT、DELETE等。
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the above example, we define routes to handle GET, POST, PUT, and DELETE
    requests related to users.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们定义了处理与用户相关的GET、POST、PUT和DELETE请求的路由。
- en: 6\. Working with Middleware
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6\. 使用中间件
- en: Middleware functions are an essential part of Express, allowing developers to
    add custom logic that runs before or after the request is handled.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 中间件函数是 Express 的核心部分，它允许开发人员添加在请求处理前后运行的自定义逻辑。
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the above example, we define a middleware function that logs a message to
    the console and then calls the `next` function to pass control to the next middleware
    or route handler.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们定义了一个中间件函数，它将一条消息记录到控制台，然后调用 `next` 函数将控制权传递给下一个中间件或路由处理程序。
- en: 7\. Connecting to a Database
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7. 连接到数据库
- en: Backend applications often need to interact with databases to store and retrieve
    data. Node.js provides numerous libraries and drivers for different databases,
    such as MongoDB, MySQL, PostgreSQL, etc.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 后端应用通常需要与数据库交互，以存储和检索数据。Node.js 提供了许多用于不同数据库的库和驱动程序，如 MongoDB、MySQL、PostgreSQL
    等。
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the above example,
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，
- en: we connect to a MongoDB database using Mongoose, a popular ODM (Object Data
    Modeling) library for MongoDB.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Mongoose 连接到 MongoDB 数据库，Mongoose 是一个流行的 MongoDB ODM（对象数据建模）库。
- en: 8\. Error Handling
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8. 错误处理
- en: Handling errors is crucial for building robust backend applications. Express
    provides middleware functions to handle errors gracefully.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 处理错误对于构建稳健的后端应用至关重要。Express 提供了中间件函数来优雅地处理错误。
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the above example, we define an error-handling middleware that logs the error
    and sends a generic error response with status code 500.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们定义了一个错误处理中间件，它记录错误并发送一个带有 500 状态码的通用错误响应。
- en: 9\. Authentication and Authorization
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9. 认证与授权
- en: Securing backend applications involves implementing authentication and authorization
    mechanisms to control access to certain resources.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 保护后端应用涉及实施认证和授权机制，以控制对某些资源的访问。
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the above example, we define an authentication middleware that checks if
    the user is authenticated before allowing access to the `/profile` route.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们定义了一个认证中间件，在允许访问 `/profile` 路由之前检查用户是否已认证。
- en: 10\. RESTful API Development
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10. RESTful API 开发
- en: Node.js is well-suited for building RESTful APIs, allowing frontend clients
    to communicate with the backend and perform CRUD (Create, Read, Update, Delete)
    operations on resources.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 非常适合构建 RESTful API，使前端客户端能够与后端通信并对资源执行 CRUD（创建、读取、更新、删除）操作。
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the above example, we define routes for fetching and adding books to a collection,
    forming a simple RESTful API.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们定义了用于获取和添加书籍到集合中的路由，构建了一个简单的 RESTful API。
- en: Conclusion
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter, we explored Node.js, a powerful runtime environment that allows
    developers to build backend applications using JavaScript. We learned about its
    key concepts, including the event loop, asynchronous programming, npm, CommonJS
    modules, and non-blocking I/O.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 Node.js，这是一个强大的运行时环境，允许开发人员使用 JavaScript 构建后端应用。我们了解了它的关键概念，包括事件循环、异步编程、npm、CommonJS
    模块和非阻塞 I/O。
- en: Node.js has revolutionized the backend development landscape, enabling developers
    to use the same language (JavaScript) on both the frontend and backend, making
    it easier to share code and build full-stack applications efficiently.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 彻底改变了后端开发领域，使开发者可以在前端和后端使用相同的语言（JavaScript），从而更容易共享代码并高效地构建全栈应用程序。
- en: As you continue your journey as a backend developer, practice building applications
    with Node.js to gain hands-on experience and improve your skills. Node.js's scalability,
    performance, and vibrant ecosystem make it an excellent choice for building a
    wide range of web applications.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你在后端开发之路上的不断前进，实践使用 Node.js 构建应用程序，以获得实践经验并提高技能。Node.js 的可扩展性、性能和充满活力的生态系统使其成为构建各种
    Web 应用程序的绝佳选择。
