- en: 'Chapter 3: Creating Your First React Component'
  prefs:
  - PREF_H1
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that your React development environment is up and running, it''s time to
    dive into the heart of React: creating components. In this chapter, we''ll guide
    you through the process of building your first React component from scratch. We''ll
    cover everything you need to know, from understanding the anatomy of a React component
    to rendering it in your application. By the end of this chapter, you''ll have
    a solid grasp of how React components work and be ready to start building dynamic
    user interfaces.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Anatomy of a React Component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we jump into creating a React component, let's break down the essential
    elements that make up a component. At its core, a React component is a JavaScript
    function or class that returns a piece of JSX (JavaScript XML) code. JSX is a
    syntax extension that allows you to write HTML-like code within your JavaScript
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Functional Components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Functional components are the simplest type of React component. They are JavaScript
    functions that take in an optional set of inputs called "props" (short for properties)
    and return a React element. Here''s the basic structure of a functional component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this example, `MyComponent` is a functional component that can accept `props`
    as input and return JSX code representing the component's UI. Functional components
    are ideal for simple UI elements and are a great starting point for beginners.
  prefs: []
  type: TYPE_NORMAL
- en: Class Components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Class components are another type of React component that provides more advanced
    features and capabilities. They are JavaScript classes that extend the `React.Component`
    class. Class components have their own state and can define lifecycle methods
    for handling component events. Here''s the basic structure of a class component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this example, `MyComponent` is a class component that can manage its state
    using `this.state` and define a `render` method to return JSX code for rendering
    the component's UI. Class components are suitable for more complex UI elements
    and offer greater control over component behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Your First Functional Component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start by creating your very first React component: a functional component
    called `HelloWorld`. This component will display a simple "Hello, React!" message.
    Follow these steps to create and render your component.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Create a New Component File'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In your React project folder, navigate to the `src` directory. Inside this directory,
    create a new file called `HelloWorld.js`. This file will contain your `HelloWorld`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Define the Functional Component'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open the `HelloWorld.js` file in your text editor or IDE. Define the `HelloWorld`
    functional component as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '- We import the `React` library, which is necessary for creating React components.'
  prefs: []
  type: TYPE_NORMAL
- en: '- We define the `HelloWorld` functional component, which returns a JSX element
    containing an `<h1>` heading with the text "Hello, React!"'
  prefs: []
  type: TYPE_NORMAL
- en: '- Finally, we export the `HelloWorld` component to make it available for use
    in other parts of your application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Render the Component'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you've defined your `HelloWorld` component, it's time to render it
    in your application. Open the `src/App.js` file, which is the main component of
    your Create React App project.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `src/App.js` file, import the `HelloWorld` component at the top of the
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can use the `HelloWorld` component within the `App` component''s `render`
    method. Replace the existing JSX code in the `App` component''s `render` method
    with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what''s happening in this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '- We import the `HelloWorld` component we created earlier.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Inside the `App` component''s `render` method, we include the `HelloWorld`
    component, effectively rendering it within the `App` component''s UI.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4: View Your Component'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Save the changes you made to the `src/App.js` file. If your development server
    is not running, start it by running the following command in your terminal within
    your project directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This command will launch the development server and open your React application
    in a web browser. You should see your "Hello, React!" message displayed on the
    web page.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You've created and successfully rendered your first React component.
    You've taken your first step into the world of building dynamic user interfaces
    with React.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Props
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Props (short for properties) are a fundamental concept in React that allows
    you to pass data from a parent component to a child component. Props enable you
    to make your components dynamic by customizing their behavior and appearance based
    on external data.
  prefs: []
  type: TYPE_NORMAL
- en: Passing Props to a Component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s enhance our `HelloWorld` component by passing a prop to it. We''ll create
    a new functional component called `Greet` that takes a prop for the name to greet.
    Follow these steps to pass props to a component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Create a New Component File'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In your `src` directory, create a new file called `Greet.js`. This file will
    contain your `Greet` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Define the Functional Component'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open the `Greet.js` file and define the `Greet` functional component as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '- We define the `Greet` functional component, which accepts a single prop called
    `name`.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Inside the component''s JSX, we use curly braces `{props.name}` to interpolate
    the value of the `name` prop into the message.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Render the Component with Props'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, let''s render the `Greet` component with a prop value. Open the `src/App.js`
    file again and import the `Greet` component at the top of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, update the `App` component''s `render` method to include the `Greet`
    component with a `name` prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '- We import the `Greet` component.'
  prefs: []
  type: TYPE_NORMAL
- en: '- We include the `Greet` component within the `App` component''s JSX, passing
    a `name` prop with the value "React Enthusiast."'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4: View Your Component with Props'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Save the changes you made to the `src/App.js` file, and make sure your development
    server is running with `npm start
  prefs: []
  type: TYPE_NORMAL
- en: '`.'
  prefs: []
  type: TYPE_NORMAL
- en: When you view your React application in the web browser, you should see the
    message "Hello, React Enthusiast!" displayed on the page. The `name` prop you
    passed to the `Greet` component is dynamically inserted into the message.
  prefs: []
  type: TYPE_NORMAL
- en: Using State in a Class Component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: State is a crucial concept in React that allows components to manage and maintain
    their data. While functional components are excellent for presenting UI based
    on props, class components can also manage internal state. In this section, we'll
    create a class component called `Counter` to explore how to use state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Create a New Component File'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In your `src` directory, create a new file called `Counter.js`. This file will
    contain your `Counter` class component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Define the Class Component'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open the `Counter.js` file and define the `Counter` class component as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '- We import `React` and `Component` from ''react''.'
  prefs: []
  type: TYPE_NORMAL
- en: '- We define the `Counter` class component, which includes a `constructor` method
    to initialize its state with a `count` property set to 0.'
  prefs: []
  type: TYPE_NORMAL
- en: '- In the `render` method, we display the current count using `{this.state.count}`
    and provide a button with an `onClick` event handler.'
  prefs: []
  type: TYPE_NORMAL
- en: '- The `incrementCount` method is defined to update the component''s state when
    the button is clicked. It uses `this.setState` to increment the `count` property.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Render the Class Component'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, let''s render the `Counter` class component in your `src/App.js` file.
    Import the `Counter` component at the top of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, include the `Counter` component within the `App` component''s `render`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 4: View Your Class Component'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Save the changes you made to the `src/App.js` file and ensure your development
    server is running with `npm start`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you view your React application in the web browser, you''ll see the "Count:
    0" message and a button labeled "Increment." Clicking the "Increment" button will
    update the count, demonstrating how state can be used in a class component to
    manage and display data.'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you've taken your first steps in creating and using React components.
    You've learned the fundamentals of functional and class components, how to pass
    props to components, and how to manage component state. These concepts are essential
    building blocks for building dynamic and interactive user interfaces with React.
  prefs: []
  type: TYPE_NORMAL
- en: As you continue your React journey, remember that components are the building
    blocks of your application, and they can be composed together to create complex
    user interfaces. Experiment with creating your own components, passing props,
    and managing state to gain confidence in working with React.
  prefs: []
  type: TYPE_NORMAL
