- en: Exercises
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: The following exercises provide you with the opportunity to practice with Big
    O notation. The solutions to these exercises are found in the section [`Chapter
    3`](f_0208.xhtml#big.o.notation.solutions).
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Use Big O notation to describe the time complexity of the following function
    that determines whether a given year is a leap year:'
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function` isLeapYear(year) { |'
  id: totrans-3
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (year % 100 === 0) { |'
  id: totrans-4
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (year % 400 === 0) { |'
  id: totrans-5
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` `true`; |'
  id: totrans-6
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } `else` { |'
  id: totrans-7
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` `false`; |'
  id: totrans-8
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-9
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-10
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` year % 4 === 0; |'
  id: totrans-11
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-12
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: 'Use Big O notation to describe the time complexity of the following function
    that sums up all the numbers from a given array:'
  id: totrans-13
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function` arraySum(array) { |'
  id: totrans-14
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `let` sum = 0; |'
  id: totrans-15
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-16
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `for` (`const` number `of` array) { |'
  id: totrans-17
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | sum += number; |'
  id: totrans-18
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | }; |'
  id: totrans-19
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-20
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` sum; |'
  id: totrans-21
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-22
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: 'The following function is based on the age-old analogy used to describe the
    power of compounding interest:'
  id: totrans-23
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: Imagine you have a chessboard, and put a single grain of rice on one square.
    On the second square, you put two grains of rice, since that is double the amount
    of rice on the previous square. On the third square, you put four grains. On the
    fourth square, you put eight grains, and on the fifth square, you put sixteen
    grains, and so on.
  id: totrans-24
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: The following function calculates which square you’ll need to place a certain
    number of rice grains. For example, for sixteen grains, the function will return
    5, since you will place the sixteen grains on the fifth square.
  id: totrans-25
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: 'Use Big O notation to describe the time complexity of this function, which
    is below:'
  id: totrans-26
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function` chessboardSpace(numberOfGrains) { |'
  id: totrans-27
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `let` chessboardSpaces = 1; |'
  id: totrans-28
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `let` placedGrains = 1; |'
  id: totrans-29
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-30
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `while` (placedGrains < numberOfGrains) { |'
  id: totrans-31
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | placedGrains *= 2; |'
  id: totrans-32
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | chessboardSpaces += 1; |'
  id: totrans-33
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-34
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-35
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` chessboardSpaces; |'
  id: totrans-36
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-37
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: 'The following function accepts an array of strings and returns a new array
    that only contains the strings that start with the character ’a’. Use Big O notation
    to describe the time complexity of the function:'
  id: totrans-38
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function` selectAStrings(array) { |'
  id: totrans-39
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `const` newArray = []; |'
  id: totrans-40
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-41
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `for` (`const` string `of` array) { |'
  id: totrans-42
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (string[0] === `''a''`) { newArray.push(string); } |'
  id: totrans-43
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | }; |'
  id: totrans-44
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-45
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` newArray; |'
  id: totrans-46
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-47
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: 'The following function calculates the median from an ordered array. Describe
    its time complexity in terms of Big O notation:'
  id: totrans-48
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function` median(array) { |'
  id: totrans-49
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (array.length === 0) { `return` `null`; } |'
  id: totrans-50
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-51
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `const` middle = Math.floor(array.length / 2); |'
  id: totrans-52
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-53
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `// If array has even amount of numbers:` |'
  id: totrans-54
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (array.length % 2 === 0) { |'
  id: totrans-55
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` (array[`middle - 1`] + array[`middle`]) / 2; |'
  id: totrans-56
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } `else` { `// If array has odd amount of numbers:` |'
  id: totrans-57
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` array[`middle`]; |'
  id: totrans-58
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-59
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-60
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: Copyright © 2024, The Pragmatic Bookshelf.
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
