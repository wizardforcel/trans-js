- en: 处理冲突
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: 哈希表非常棒，但也并非没有复杂性。
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 继续我们的同义词例子：如果我们想将以下条目添加到同义词库中，会发生什么？
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `thesaurus[​*"dab"*​] = ​*"pat"*​;` |'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 首先，计算机会对键进行哈希：
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`DAB = 4 * 1 * 2 = 8`'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 然后，它会尝试将`"pat"`添加到我们哈希表的单元格`8`：
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/blazing_fast_lookup_with_hashes/hash_4.png`](images/blazing_fast_lookup_with_hashes/hash_4.png)'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 噢，不。单元格`8`已经被`"evil"`填满了——字面意思！
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 尝试将数据添加到已填满的单元格中称为冲突。幸运的是，有解决方法。
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 一种处理冲突的经典方法称为分离链表。当发生冲突时，它不是将单个值放入单元格，而是放入对一个数组的引用。
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 让我们更仔细地看一下哈希表底层数据存储的一个子部分：
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/blazing_fast_lookup_with_hashes/hash_5.png`](images/blazing_fast_lookup_with_hashes/hash_5.png)'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 在我们的例子中，计算机想将`"pat"`添加到单元格`8`，但它已经包含`"evil"`。所以它用一个数组替换单元格`8`的内容，如下所示：
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/blazing_fast_lookup_with_hashes/hash_6.png`](images/blazing_fast_lookup_with_hashes/hash_6.png)'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 该数组包含子数组，其中第一个值是单词，第二个值是其同义词。
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 让我们逐步了解在这种情况下哈希表查找是如何工作的。假设我们查找以下单词：
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `thesaurus[​*"dab"*​]` |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 计算机执行以下步骤：
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 它对键进行哈希：`DAB = 4 * 1 * 2 = 8`。
  id: totrans-19
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: 它查找单元格`8`。计算机注意到单元格`8`包含一个数组的数组，而不是单个值。
  id: totrans-20
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: 它通过数组线性搜索，查看每个子数组的索引`0`，直到找到我们的键（`"dab"`）。然后返回正确子数组索引`1`的值。
  id: totrans-21
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: 让我们可视化这些步骤。
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: We hash `DAB` into `8`，所以计算机检查那个单元格：
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/blazing_fast_lookup_with_hashes/hash_7.png`](images/blazing_fast_lookup_with_hashes/hash_7.png)'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 由于单元格`8`包含一个子数组的数组，我们开始在线性搜索中遍历每个子数组，从第一个开始。我们检查第一个子数组的索引`0`：
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/blazing_fast_lookup_with_hashes/hash_8.png`](images/blazing_fast_lookup_with_hashes/hash_8.png)'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 它不包含我们要找的键（`"dab"`），所以我们继续检查下一个子数组的索引`0`：
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/blazing_fast_lookup_with_hashes/hash_9.png`](images/blazing_fast_lookup_with_hashes/hash_9.png)'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 我们找到`"dab"`，这表明该子数组索引`1`的值（`"pat"`）就是我们要找的值。
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In a scenario where the computer hits upon a cell that references an array,
    its search can take some extra steps, as it needs to conduct a linear search within
    an array of multiple values. If somehow all of our data ended up within a single
    cell of our hash table, our hash table would be no better than an array. So, it
    actually turns out that the worst-case performance for a hash table lookup is
    `O(N)`.
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Because of this, it’s critical that a hash table is designed in such a way that
    it will have few collisions and, therefore, typically perform lookups in `O(1)`
    time rather than `O(N)` time.
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Luckily, most programming languages implement hash tables and handle these details
    for us. However, by understanding how it all works under the hood, we can appreciate
    how hash tables eke out `O(1)` performance.
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Let’s see how hash tables can be set up to avoid frequent collisions.
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
