- en: Chapter 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Control Structures
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s address one of the pillars of programming: control structures. They
    are fundamental to the logic of any programming language, allowing you to direct
    the flow of execution of your code in an intelligent and efficient way. In JavaScript,
    we have several control structures that help us make decisions and repeat actions
    according to specific conditions. Today, we''ll explore conditional structures,
    repetition structures, functions, and scope. Deepening our understanding of these
    topics is essential to writing clean, efficient code.'
  prefs: []
  type: TYPE_NORMAL
- en: Conditional structures (if, else, switch)
  prefs: []
  type: TYPE_NORMAL
- en: Conditional structures are used to make decisions in code. They allow different
    blocks of code to be executed based on specific conditions.
  prefs: []
  type: TYPE_NORMAL
- en: 'if, else if, else:  These are the most basic and widely used conditional structures
    in JavaScript. They allow a block of code to be executed if a condition is true.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we verify age and print an appropriate message based on age
    range.
  prefs: []
  type: TYPE_NORMAL
- en: 'switch:  The switch is an alternative to if-else, especially useful when you
    have several conditions to check. It compares an expression with multiple cases
    and executes the corresponding block of code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the example above, the switch checks the value of `dayWeek` and prints the
    corresponding day. If no cases are matched, the default block is executed.
  prefs: []
  type: TYPE_NORMAL
- en: Repetition structures (for, while, do-while)
  prefs: []
  type: TYPE_NORMAL
- en: Repetition structures are used to execute a block of code multiple times, based
    on a condition. JavaScript offers several options for this, each suitable for
    different scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: 'for:  The for loop is one of the most common and versatile repetition structures.
    It is used when we know the exact number of iterations we want to perform.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the for loop runs the code block five times, printing the iteration
    number each time.
  prefs: []
  type: TYPE_NORMAL
- en: 'while:  The while loop is used when we don''t know the exact number of iterations
    beforehand, but want to continue executing the block of code as long as a condition
    is true.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The above while loop continues to execute until the value of `counter` is equal
    to or greater than 5.
  prefs: []
  type: TYPE_NORMAL
- en: 'do-while:  The do-while loop is similar to the while loop, but it ensures that
    the code block is executed at least once before checking the condition.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Even if the condition is false at the beginning, the block of code in the do-while
    loop is executed at least once.
  prefs: []
  type: TYPE_NORMAL
- en: Functions and scope
  prefs: []
  type: TYPE_NORMAL
- en: Functions are blocks of code that perform a specific task and can be called
    repeatedly in different parts of the program. They are essential for code modularization
    and reuse.
  prefs: []
  type: TYPE_NORMAL
- en: 'Function declaration: Functions can be declared using the `function` keyword.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `saudacao` function takes a `name` parameter and returns
    a personalized greeting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Function expressions:  Functions can also be defined as expressions and assigned
    to variables.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Arrow functions:  Introduced in ES6, arrow functions offer a shorter syntax
    and are especially useful for callback functions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Scope:  Scope determines the accessibility of variables in different parts
    of the code. In JavaScript, we have two main types of scope: global and local.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Global scope:  Variables declared outside of any function have global scope
    and can be accessed from anywhere in the code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Local scope:  Variables declared within a function have local scope and can
    only be accessed within that function.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Block scope:  With the introduction of `let` and `const` in ES6, block scope
    was added to JavaScript. Variables declared with `let` or `const` are limited
    to the block where they were defined, as in loops or conditionals.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Closures:  One of the powerful features of functions in JavaScript is the closure.
    A closure is a function that remembers the scope where it was created, even after
    that scope has been closed.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the example above, each instance of `criarCounter` creates a new scope for
    the variable `counter`, and the returned function remembers this scope, allowing
    independent manipulation of the variable `counter`.
  prefs: []
  type: TYPE_NORMAL
- en: We explore the control structures in JavaScript, from conditionals and loops
    to functions and scope. Each of these tools is essential for writing efficient,
    modular, and maintainable code. Understanding and mastering these structures will
    allow you to create more complex and robust programs, facing any challenge that
    arises. As we move forward, we will continue to build on these foundations, exploring
    even more advanced applications of JavaScript. Be ready to turn every line of
    code into an opportunity for learning and innovation.
  prefs: []
  type: TYPE_NORMAL
