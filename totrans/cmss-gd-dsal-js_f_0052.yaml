- en: Ignoring Constants
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: 'But here’s the funny thing: in the world of `Big O` notation, `Selection Sort`
    and `Bubble Sort` are described in exactly the same way.'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Again, `Big O` notation answers the key question: if there are `N` data elements,
    how many steps will the algorithm take? Because `Selection Sort` takes roughly
    half of `N²` steps, it would seem reasonable that we’d describe the efficiency
    of `Selection Sort` as being `O(N² / 2)`。 That is, for `N` data elements, there
    are `N² / 2` steps. The following table bears this out:'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| `N Elements` | `N² / 2` | Max # of Steps in `Selection Sort` |'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 5 | `5² / 2 = 12.5` | 14 |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 10 | `10² / 2 = 50` | 54 |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 20 | `20² / 2 = 200` | 209 |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 40 | `40² / 2 = 800` | 819 |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 80 | `80² / 2 = 3200` | 3239 |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 'In reality, however, `Selection Sort` is described in `Big O` as `O(N²)`, just
    like `Bubble Sort`。 This is because of a major rule of `Big O` that I’m now introducing
    for the first time:'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Big O` notation ignores constants.'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: This is simply a mathematical way of saying that `Big O` notation never includes
    regular numbers that aren’t an exponent. We simply drop these regular numbers
    from the expression.
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In our case, then, even though the algorithm takes `N² / 2` steps, we drop the
    “/ 2” because it’s a regular number and express the efficiency as `O(N²)`.
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Dropping the constants is also the reason why an algorithm that’s `O(log[2]
    N)` is written simply as `O(log N)`。 Because of math, the log base of 2 is deemed
    a constant and so we drop it.
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here are a few more examples:'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: For an algorithm that takes `N / 2` steps, we’d call it `O(N)`.
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: An algorithm that takes `N² + 10` steps would be expressed as `O(N²)` since
    we drop the 10, which is a regular number.
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: With an algorithm that takes `2N` steps (meaning `N * 2`)，we drop the regular
    number and call it `O(N)`。
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Even `O(100N)`, which is 100 times slower than `O(N)`, is also referred to as
    `O(N)`.
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Offhand, it would seem that this rule would render `Big O` notation entirely
    useless, as you can have two algorithms that are described in exactly the same
    way with `Big O`, and yet one can be 100 times faster than the other. And that’s
    exactly what we’re seeing here with `Selection Sort` and `Bubble Sort`。 Both are
    described in `Big O` as `O(N²)`，but `Selection Sort` is twice as fast as `Bubble
    Sort`。
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: So, what gives?
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
