- en: © The Author(s), under exclusive license to Springer Fachmedien Wiesbaden GmbH,
    part of Springer Nature 2024J. L. ZuckarelliLearn coding with Python and JavaScript
    [https://doi.org/10.1007/978-3-658-42912-6_19](https://doi.org/10.1007/978-3-658-42912-6_19)
  prefs: []
  type: TYPE_NORMAL
- en: '19. Program Execution & Hello World: What Do I Have to Do to Get a Program
    Running?'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Joachim L. Zuckarelli^([1](#Aff2)  )(1)München, GermanyOverview
  prefs: []
  type: TYPE_NORMAL
- en: Now we finally start programming. We write our first small "Hello World" program
    in Python and at the same time familiarize ourselves with *PyCharm*, the powerful
    Python IDE we installed in the last chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How the user interface of the *PyCharm* IDE is structured
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: how to write and run programs with *PyCharm*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: how to use Python with *PyCharm* in interactive mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: what a simple “Hello World” program in Python looks like.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 19.1 Developing and Executing Programs in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Setting the InterpreterAfter starting *PyCharm* for the first time, you will
    see a dialog that looks something like ◘ Fig. [19.1](#Fig1). Since we want to
    write a new program, click the “Create New Project” button. *PyCharm* will now
    ask you for the Python interpreter you want to use. *PyCharm* can work with different
    Python interpreters. This is important if you want to maintain programs that only
    run on an older Python version. Rewriting these programs for a newer Python version
    might be very costly. Therefore, with *PyCharm,* you can simply use an older interpreter,
    and continue to run your aging programs without any problems. The ability to define
    the environment in which your program will run goes even further. Not only can
    you use a different interpreter than the most recent one, but Python also lets
    you choose which Python libraries (called modules and packages) your program will
    access, and in particular which version of those libraries it will use. This way,
    you can build a custom environment for your program to run in, called a *virtual
    environment*. We will discuss modules, packages, and virtual environments in more
    detail in ► Sect. [23.​3](474412_1_En_23_Chapter.xhtml#Sec7). The main thing here
    is to determine the interpreter we want to use. For reasons of compatibility with
    old programs, in some cases it may make sense to work with an older interpreter.![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig1_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the PyCharm welcome page. The project is selected on the list
    on the left. It displays 3 icons new project, open, and get from V C S.
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 19.1
  prefs: []
  type: TYPE_NORMAL
- en: Start dialog of *PyCharm*
  prefs: []
  type: TYPE_NORMAL
- en: But don’t worry. Normally, version jumps in Python don’t lead to such major
    changes that previously written programs are suddenly no longer executable. However,
    with the transition from Python version 2.X to 3.X, there have indeed been major
    changes that in some cases have had this unfortunate effect. This is where *PyCharm*’s
    ability to handle multiple Python interpreters is a handy functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Even if we want to work with the latest Python interpreter, we need to tell
    *PyCharm* where to find it. To do this, click “Previously Configured Interpreter”
    from the two central options. With the other option, you could create a virtual
    environment for your project. But we don’t need to do that here. In the “Interpreter”
    selection box, you may currently have “<No interpreter>” (◘ Fig. [19.2](#Fig2)).
    If this is the case, click on the button with the three dots, select "Add Local
    Interpreter" and select the option “System Interpreter” from the dialog that opens
    (◘ Fig. [19.3](#Fig3)). There you should already find the path to the executable
    file of the Python interpreter. If this is not the case, you can always search
    for the executable file, which is conveniently named **python**, on your hard
    drive and select it manually in the dialog here. Now, after you have selected
    the interpreter for your project, you can specify under “Location” (at the very
    top of the “New Project” dialog, ◘ Fig. [19.2](#Fig2)) where *PyCharm* should
    save your Python project. Now you’re ready to get started with Python, so click
    on “Create” and off you go!![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig2_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the new project window. It has a location bar and radio icons
    for new environments using and previously configured interpreter. The previously
    configured interpreter is selected.
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 19.2
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the folder location of your new project in *PyCharm*
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig3_HTML.png)'
  prefs: []
  type: TYPE_IMG
- en: A screenshot of the add python interpreter window. The system interpreter is
    selected on the left. A file is selected from the drop-down list of the interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 19.3
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the interpreter for your new project in *PyCharm*
  prefs: []
  type: TYPE_NORMAL
- en: Create Python Programs with PyCharm
  prefs: []
  type: TYPE_NORMAL
- en: The *PyCharm interface* opens. In newer version of PyCharm, the menu is hidden
    behind the icon with the four bars on the left side of the program's title bar.
  prefs: []
  type: TYPE_NORMAL
- en: First, we create a new Python script file. To do this, click the “New…” option
    from the “File” menu and then select the “Python File” (◘ Fig. [19.4](#Fig4)).
    If that doesn't work, click the little folder icon on the top of the sidebar on
    the left, select your project and try again (◘ Fig. [19.5](#Fig5)). Now you need
    to give the file a name, for example **helloworld.py** (Python files generally
    have a **.py** extension). Your new Python script will now open in the right pane
    of the window. So, let’s start programming!![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig4_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of the Pycharm interface for creating a new Python file. The left
    panel indicates the dropdown lists of the first steps with PyTorch and linear
    regression. The section on the right denotes preps and manually 1 iteration under
    linear regression.
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 19.4
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Python file in *PyCharm*
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig5_HTML.png)'
  prefs: []
  type: TYPE_IMG
- en: A screenshot exhibits the interface to create a new Python file. It highlights
    the file path of the Python project on the left panel. The section on the right
    denotes the keyboard shortcuts for different operations.
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 19.5
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Python file from the Project view in *PyCharm*
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following lines of code into the script:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello World")print("This is my first Python program")
  prefs: []
  type: TYPE_NORMAL
- en: You will notice that *PyCharm* supports you in typing, for example by immediately
    creating a closing parenthesis when you type an opening parenthesis. Also, pairs
    of parentheses that belong together are highlighted when you place the text cursor
    in front of or behind one of them. This is especially helpful if you have a lot
    of nested parentheses and want to know which opening and closing parentheses belong
    together. Every now and then, the IDE also displays little light bulb icons. If
    you click on them, you usually get hints on how to better format your code, and
    you can usually implement the formatting directly with a single click.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running Python Programs: In *PyCharm* and on the Command Line'
  prefs: []
  type: TYPE_NORMAL
- en: Now we want to start our program. To do this, right-click in the free space
    in the editor area and select the “Run” option from the context menu (alternatively,
    you can press <CTRL><SHIFT><F10>).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now something is happening in *PyCharm*! At the bottom of the window, an area
    that resembles a tabbed page, titled “Run”, opens. This is the Run console, where
    your Python programs run. And as you can see, Python has run the little program
    you typed into the editor and has output two lines of text to the Run console.
    The output that appears here (using *PyCharm* on a Windows system as an example):'
  prefs: []
  type: TYPE_NORMAL
- en: '**C:\[path to your Python interpreter]\python.exe C:/[path to your project]/helloworld.py**Hello
    worldThis is my first Python program**Process finished with exit code 0**You can
    see what this looks like in the *PyCharm* interface in ◘ Fig. [19.6](#Fig6).![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig6_HTML.png)'
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of a set of program codes and the output. The program consists
    of print statements for 2 sentences. The sentences are displayed on the output
    screen at the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 19.6
  prefs: []
  type: TYPE_NORMAL
- en: Program execution in the Run console
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of running your program through *PyCharm,* you could also have run
    it through your operating system’s terminal/console with the command **python
    helloworld.py** (you may need to add path information to the Python interpreter
    or your Python script, or both, depending on where they are in the directory structure).
    You can also try this out easily, because three icons below the play button-like
    icon (which represents the Run console) in the sidebar, there is a direct access
    to the command line level of your operating system with the "Terminal" tab. But
    don’t worry if you don’t have any knowledge of the commands used in the operating
    system’s terminal, thanks to *PyCharm* you can get along without this at first
    sight archaic operation of the operating system: After all, you can simply run
    your program in the Run console (which, of course, does nothing but call the Python
    interpreter with your program script and display the output on the *PyCharm* interface).
    By the way, you will see the command that *PyCharm* uses for this as the first
    line in the run console. You could copy this line into the terminal/console of
    the operating system (or the “Terminal” tab in *PyCharm*) and execute it immediately.'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to this command and the output of our program, you will also see
    the message **Process finished with exit code 0** in the Run console. It means
    that your program has run through without errors. This is the optimal case, which
    we always want to have. However, as you continue with programming, you will notice
    that you are getting errors – and thus more program terminations – than you would
    like. Searching for and fixing errors is as much a part of everyday programming
    as sawdust is to the carpenter’s workshop – not nice, but unavoidable. This applies
    to beginners and professionals alike.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, let us now “artificially” cause an error! We currently have an executable
    program in the editor area. Just delete one of the closing brackets in one of
    the **print()** calls. Then run the program again. You can do this again with
    the Run command from the context menu (right mouse button), or – now that we had
    already executed the program – also with the green Play arrow in the Run console's
    sidebar, right below its title.
  prefs: []
  type: TYPE_NORMAL
- en: If you have removed one of the closing parentheses, *PyCharm*, which automatically
    checks the syntax of your program in the background, indicates a possible problem
    with a red “underline” at the position of the missing parentheses. In the sidebar,
    you will see an exclamation mark icon with a red circle indicating there is a
    problem. If you click this button in the sidebar, the *Problem* tab will open
    you will get more information about the nature of the problem (◘ Fig. [19.7](#Fig7)).
    However, we will now deliberately ignore all these warnings and stubbornly run
    our (faulty) program. You will then get a red highlighted error message in the
    run console like the following:![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig7_HTML.png)
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of a set of program codes and the Python console. The program consists
    of print statements for 2 sentences. One of the print statements is selected,
    which is displayed on the Python console at the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 19.7
  prefs: []
  type: TYPE_NORMAL
- en: Output in the Python console in *PyCharm*
  prefs: []
  type: TYPE_NORMAL
- en: '**File "C:/[path to your project]/helloworld.py", line 3****^****Unexpected
    EOF while parsing****Process finished with exit code 1**'
  prefs: []
  type: TYPE_NORMAL
- en: The error messages output by the Python interpreter are often of limited help
    in debugging, as you can clearly see in this example. The syntax check provided
    by *PyCharm* in the Problem tab is often much more useful. By the way, in the
    output you can also see the exit code with value 1, which signals that the program
    was terminated prematurely with an error.
  prefs: []
  type: TYPE_NORMAL
- en: Although Python is an interpreted language, and as such is normally slower than
    compiled programming languages, the programs that we will develop in the next
    few chapters will usually run briskly. However, especially when working with looping
    constructs, which we will do in ► Sect. [24.​4](474412_1_En_24_Chapter.xhtml#Sec8),
    it is quite possible for a program to take longer to run, especially if you have
    accidentally built your loop in such a way that it would never (at least not without
    external intervention or a lack of system resources) come to an end. That’s when
    it’s handy to be able to abort a program while it’s running. This is exactly what
    can be done in *PyCharm* with the “Stop” button in the sidebar of the Run console.
    While your script is running, this button is colored red and can be clicked.
  prefs: []
  type: TYPE_NORMAL
- en: '19.2 The Python console: Python in interactive mode'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the tabs at the bottom of the *PyCharm* interface we haven’t looked at
    yet is the *Python console*. It allows us to run Python in *interactive mode.*
    This means we can type in a Python statement and execute it immediately. So, it’s
    not usually a whole sequence of statements that is entered and then executed en
    bloc (although that would be possible too), but just a single statement. The instruction
    is followed by Python’s response (however precise), and you can enter new input.
    Because of this interplay between the input of an instruction and the processing
    of the instruction by Python, it is called interactive mode, and sometimes *REPL*
    (*read-eval-print* loop). The input in this is done at the *prompt*, which is
    nothing more than a request for input. In the Python console, the prompt is marked
    by three greater-than signs (**>>>**).
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of the *PyCharm* sidebar, click on the “Python Console” icon
    (the one with the Python logo on it, right below the "Play" icon symbolizing the
    Run console). Now, at the prompt, type one of the **print()** statements that
    are part of our script above and confirm by pressing <ENTER>:'
  prefs: []
  type: TYPE_NORMAL
- en: '**>>>** print("Hello World")Hello worldYou can see that our instruction is
    executed directly. After that, a new prompt appears directly, where you could
    enter further instructions. ◘ Figure [19.8](#Fig8) shows the Python console in
    *PyCharm* after executing our statement.![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig8_HTML.png)'
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot of a set of program codes and the output. The program consists
    of print statements for 2 sentences with an error. The error is displayed on the
    output screen at the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 19.8
  prefs: []
  type: TYPE_NORMAL
- en: Execution of statements in the Python console in *PyCharm*
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig9_HTML.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A screenshot of the Jupyter notebook. The linear regression section is highlighted.
  prefs: []
  type: TYPE_NORMAL
- en: Fig. 19.9
  prefs: []
  type: TYPE_NORMAL
- en: A notebook in Jupyter
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding code section, as generally in the rest of this part of the
    book, the prompt is symbolized by the string **>>>**. Please note that you must
    not enter these prompt characters! Anything not preceded by a prompt is output
    by Python.
  prefs: []
  type: TYPE_NORMAL
- en: You can use the console to quickly try out Python command instructions. Also,
    as we saw in the previous chapter, you can call **help** from here (try it out
    and type **help(print)** to get help information about the **print()** function.)
    Note that the Python console and the Python script editor are two completely different
    and neatly separated worlds. In particular, you cannot access variables that you
    use in your script from the Python console. But more about this in ► Chap. [21](474412_1_En_21_Chapter.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: Of course, you can also start the Python console directly from the command line
    (console/terminal) of your operating system. To do this, simply run the **python**
    program without any additional parameters. The Python console will then open in
    your operating system terminal. You can exit interactive mode again by entering
    the **quit()** statement, which terminates **python** and returns you to the operating
    system level.
  prefs: []
  type: TYPE_NORMAL
- en: 19.3 Get to Know *PyCharm*
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have already learned about some of the features of *PyCharm*’s interface.
    Of course, *PyCharm* can do much more; however, we will not exhaust the full range
    of *PyCharm*’s features here. Some features are only relevant if you want to develop
    software on a professional level. And as with any traditional office application,
    even the most professional users don’t take advantage of all the features the
    software offers them.
  prefs: []
  type: TYPE_NORMAL
- en: The *PyCharm* interface is, like that of many integrated development environments,
    quite complex with its different panes and tabs, some of which are nested within
    each other. Even though we already get by with a relatively modest set of features
    for our purposes, it’s still a good idea to just play around with *PyCharm* a
    bit and get to know the interface better. Be curious and try things out. Fortunately,
    nothing can break during your explorations. In ► Sect. [23.​3.​3](474412_1_En_23_Chapter.xhtml#Sec10),
    where we talk about working with installed modules, and in ► Sect. [25.​5](474412_1_En_25_Chapter.xhtml#Sec8),
    where we talk about debugging, we will return to the *PyCharm interface* and learn
    about some more features.
  prefs: []
  type: TYPE_NORMAL
- en: 19.4 Some Alternatives to PyCharm for Python Code Execution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If using PyCharm is too complicated for you, you can of course also use another
    Integrated Development Environment. There is no shortage of alternatives on the
    market. The simplest is probably IDLE, the Integrated Development Environment
    that comes with the Python installation. It allows Python code to be executed
    in script/batch mode or interactively in the Python console. IDLE supports syntax
    highlighting, but is otherwise not very convenient. Nevertheless, IDLE serves
    its purpose well. So before you throw in the towel because you feel overwhelmed
    with the “battleship” PyCharm, try IDLE! Everything we do in this book can also
    be done with IDLE instead of PyCharm.
  prefs: []
  type: TYPE_NORMAL
- en: Jupyter is another popular way of executing Python code. Jupyter runs in a web
    browser and, similar to the Python Console, allows you to enter Python commands
    in interactive mode and view the results. However, not only text results are displayed,
    but also graphics, which can be very useful when working with statistical data.
    In addition to the Python code and the ouputs, you can also place headings, explanatory
    texts and other elements. All of this together results in a so-called Jupyter
    notebook, which can be saved, changed at any time and executed again and again
    in whole or in part. The saved notebook can easily be shared with team members,
    colleagues or other interested parties. In this way, Juypter is very useful for
    exploring data and documenting your work steps, for example. In addition to Python,
    Jupyter also supports a whole range of other languages such as R or Scala. Fig.
    [19.9](#Fig9) shows an example of a Jupyter notebook with some code and output
    as well as some headings that are not part of the actual code, but are only used
    to structure the notebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are on the road and don’t have a Python interpreter at hand, you can
    also run Python code with ChatGPT. ChatGPT has an environment in which Python
    code can be executed (formerly known as Code Interpreter). For example, ask ChatGPT:
    “Execute the following Python code and show the results”. You can either write
    the code directly into the prompt or upload it as a file.'
  prefs: []
  type: TYPE_NORMAL
- en: 19.5 Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we looked at how you can use *PyCharm* to develop and run Python
    programs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the key points from this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*PyCharm* is a powerful integrated development environment (IDE) with a wide
    range of features, only a small part of which we use in “normal operation”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*PyCharm* offers practical features through syntax highlighting and live syntax
    checks that support the development of Python programs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*PyCharm* can handle different interpreters. It is therefore necessary that,
    before you start working, you select an interpreter that you want to use. You
    must do this even if you have only one interpreter available (namely the one you
    installed with the latest Python version).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python programs run in the *PyCharm* run console.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition, there is the Python console, which allows Python to run in interactive
    mode; Python commands that are entered here are executed immediately.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python programs can also be run directly with the Python interpreter **python**
    without using *PyCharm*; if the Python interpreter is called without a Python
    script file as an argument, it starts in interactive mode. This can be exited
    at any time by typing **quit()**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use the **print()** function to produce output on the screen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
