- en: © The Author(s), under exclusive license to `Springer Fachmedien Wiesbaden GmbH`,
    part of `Springer Nature 2024` `J. L. Zuckarelli`Learn coding with Python and
    JavaScript [`https://doi.org/10.1007/978-3-658-42912-6_19`](https://doi.org/10.1007/978-3-658-42912-6_19)
  id: totrans-0
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`19. Program Execution & Hello World: What Do I Have to Do to Get a Program
    Running?`'
  id: totrans-1
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: '`Joachim L. Zuckarelli`^([1](#Aff2)  )(1)`München, Germany`Overview'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Now we finally start programming. We write our first small "Hello World" program
    in Python and at the same time familiarize ourselves with `PyCharm`, the powerful
    Python IDE we installed in the last chapter.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'In this chapter you will learn:'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: How the user interface of the `PyCharm` IDE is structured
  id: totrans-5
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: how to write and run programs with `PyCharm`
  id: totrans-6
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: how to use Python with `PyCharm` in interactive mode
  id: totrans-7
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: what a simple “Hello World” program in Python looks like.
  id: totrans-8
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`19.1 Developing and Executing Programs in Python`'
  id: totrans-9
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: '`Setting the Interpreter`After starting `PyCharm` for the first time, you will
    see a dialog that looks something like ◘ `Fig. [19.1](#Fig1)`. Since we want to
    write a new program, click the “Create New Project” button. `PyCharm` will now
    ask you for the Python interpreter you want to use. `PyCharm` can work with different
    Python interpreters. This is important if you want to maintain programs that only
    run on an older Python version. Rewriting these programs for a newer Python version
    might be very costly. Therefore, with `PyCharm`, you can simply use an older interpreter,
    and continue to run your aging programs without any problems. The ability to define
    the environment in which your program will run goes even further. Not only can
    you use a different interpreter than the most recent one, but Python also lets
    you choose which Python libraries (called modules and packages) your program will
    access, and in particular which version of those libraries it will use. This way,
    you can build a custom environment for your program to run in, called a `virtual
    environment`. We will discuss modules, packages, and virtual environments in more
    detail in ► `Sect. [23.​3](474412_1_En_23_Chapter.xhtml#Sec7)`. The main thing
    here is to determine the interpreter we want to use. For reasons of compatibility
    with old programs, in some cases it may make sense to work with an older interpreter.![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig1_HTML.png)'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: A screenshot of the `PyCharm` welcome page. The project is selected on the list
    on the left. It displays 3 icons `new project`, `open`, and `get from V C S`.
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Fig. 19.1`'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Start dialog of `PyCharm`
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: But don’t worry. Normally, version jumps in Python don’t lead to such major
    changes that previously written programs are suddenly no longer executable. However,
    with the transition from Python version `2.X` to `3.X`, there have indeed been
    major changes that in some cases have had this unfortunate effect. This is where
    `PyCharm`’s ability to handle multiple Python interpreters is a handy functionality.
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Even if we want to work with the latest Python interpreter, we need to tell
    `PyCharm` where to find it. To do this, click “Previously Configured Interpreter”
    from the two central options. With the other option, you could create a virtual
    environment for your project. But we don’t need to do that here. In the “Interpreter”
    selection box, you may currently have “<No interpreter>” (◘ `Fig. [19.2](#Fig2)`).
    If this is the case, click on the button with the three dots, select "Add Local
    Interpreter" and select the option “System Interpreter” from the dialog that opens
    (◘ `Fig. [19.3](#Fig3)`). There you should already find the path to the executable
    file of the Python interpreter. If this is not the case, you can always search
    for the executable file, which is conveniently named `python`，on your hard drive
    and select it manually in the dialog here. Now, after you have selected the interpreter
    for your project, you can specify under “Location” (at the very top of the “New
    Project” dialog, ◘ `Fig. [19.2](#Fig2)`) where `PyCharm` should save your Python
    project. Now you’re ready to get started with Python, so click on “Create” and
    off you go!![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig2_HTML.png)
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: A screenshot of the new project window. It has a location bar and radio icons
    for new environments using and previously configured interpreter. The previously
    configured interpreter is selected.
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Fig. 19.2`'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Setting up the folder location of your new project in `PyCharm`
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig3_HTML.png)'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: A screenshot of the `add python interpreter` window. The system interpreter
    is selected on the left. A file is selected from the drop-down list of the interpreter.
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Fig. 19.3`'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Setting up the interpreter for your new project in `PyCharm`
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Create Python Programs with `PyCharm`
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The `PyCharm interface` opens. In newer version of `PyCharm`，the menu is hidden
    behind the icon with the four bars on the left side of the program's title bar.
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: First, we create a new Python script file. To do this, click the “New…” option
    from the “File” menu and then select the “Python File” (◘ `Fig. [19.4](#Fig4)`).
    If that doesn't work, click the little folder icon on the top of the sidebar on
    the left, select your project and try again (◘ `Fig. [19.5](#Fig5)`). Now you
    need to give the file a name, for example `helloworld.py` (Python files generally
    have a `.py` extension). Your new Python script will now open in the right pane
    of the window. So, let’s start programming!![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig4_HTML.png)
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: A screenshot of the `Pycharm` interface for creating a new Python file. The
    left panel indicates the dropdown lists of the first steps with `PyTorch` and
    linear regression. The section on the right denotes preps and manually 1 iteration
    under linear regression.
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Fig. 19.4`'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Creating a new Python file in `PyCharm`
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig5_HTML.png)'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 一张截图展示了创建新Python文件的界面。它在左侧面板中突出显示了Python项目的文件路径。右侧部分表示不同操作的键盘快捷键。
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 图19.5
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 从`*PyCharm*`的项目视图中创建新的Python文件
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在脚本中输入以下代码行：
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`print("Hello World")print("This is my first Python program")`'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 你会注意到`*PyCharm*`支持你输入，例如，当你输入一个左括号时，会立即创建一个右括号。同时，当你将文本光标放在一对括号前面或后面时，这对括号会被高亮显示。这在你有很多嵌套括号，并想知道哪些开闭括号是成对时尤其有帮助。时不时地，IDE还会显示小灯泡图标。如果你点击它们，通常会得到有关如何更好格式化代码的提示，通常可以通过单击直接实现格式化。
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 运行Python程序：在`*PyCharm*`和命令行上
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 现在我们想要启动程序。为此，请在编辑器区域的空白处右键单击，并从上下文菜单中选择“Run”选项（或者，你可以按`<CTRL><SHIFT><F10>`）。
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 现在在`*PyCharm*`中发生了一些事情！在窗口的底部，打开了一个类似于选项卡页面的区域，标题为“Run”。这是运行控制台，你的Python程序在这里运行。正如你所看到的，Python已经运行了你在编辑器中输入的小程序，并将两行文本输出到运行控制台。这里出现的输出（以在Windows系统上使用`*PyCharm*`为例）：
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '**`C:\[path to your Python interpreter]\python.exe C:/[path to your project]/helloworld.py`**Hello
    worldThis is my first Python program**`Process finished with exit code 0`**你可以在`*PyCharm*`界面中看到这是什么样子的，见◘图[19.6](#Fig6)。![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig6_HTML.png)'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 一张程序代码和输出的截图。该程序由两句的`print`语句组成。这两句话在底部的输出屏幕上显示。
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 图19.6
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在运行控制台中执行程序
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Instead of running your program through `PyCharm`，you could also have run it
    through your operating system’s terminal/console with the command `python helloworld.py`（you
    may need to add path information to the `Python` interpreter or your `Python`
    script, or both, depending on where they are in the directory structure）。You can
    also try this out easily, because three icons below the play button-like icon（which
    represents the Run console）in the sidebar, there is a direct access to the command
    line level of your operating system with the `Terminal` tab。但 don’t worry if you
    don’t have any knowledge of the commands used in the operating system’s terminal,
    thanks to `PyCharm` you can get along without this at first sight archaic operation
    of the operating system：After all, you can simply run your program in the Run
    console（which, of course, does nothing but call the `Python` interpreter with
    your program script and display the output on the `PyCharm` interface）。By the
    way, you will see the command that `PyCharm` uses for this as the first line in
    the run console。You could copy this line into the terminal/console of the operating
    system（or the `Terminal` tab in `PyCharm`）and execute it immediately。
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In addition to this command and the output of our program, you will also see
    the message `Process finished with exit code 0` in the Run console。It means that
    your program has run through without errors。这是最优情况，我们总是希望能有的。然而，随着你继续编程，你会注意到你会遇到更多错误
    – 也就是说比你希望的更多程序终止。寻找和修复错误是日常编程的一部分，就像锯末是木匠工作坊的一部分 – 不愉快，但不可避免。这适用于初学者和专业人士。
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Therefore, let us now “artificially” cause an error！We currently have an executable
    program in the editor area。Just delete one of the closing brackets in one of the
    `print()` calls。Then run the program again。You can do this again with the Run
    command from the context menu（right mouse button），or – now that we had already
    executed the program – also with the green Play arrow in the Run console's sidebar,
    right below its title。
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: If you have removed one of the closing parentheses, `PyCharm` , which automatically
    checks the syntax of your program in the background, indicates a possible problem
    with a red “underline” at the position of the missing parentheses. In the sidebar,
    you will see an exclamation mark icon with a red circle indicating there is a
    problem. If you click this button in the sidebar, the `Problem` tab will open
    you will get more information about the nature of the problem (◘ Fig. `[19.7](#Fig7)`).
    However, we will now deliberately ignore all these warnings and stubbornly run
    our (faulty) program. You will then get a red highlighted error message in the
    run console like the following:![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig7_HTML.png)
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: A screenshot of a set of program codes and the Python console. The program consists
    of `print` statements for 2 sentences. One of the `print` statements is selected,
    which is displayed on the Python console at the bottom.
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Fig. 19.7
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Output in the Python console in `PyCharm`
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`File "C:/[path to your project]/helloworld.py", line 3^Unexpected EOF while
    parsingProcess finished with exit code 1`'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The error messages output by the Python interpreter are often of limited help
    in debugging, as you can clearly see in this example. The syntax check provided
    by `PyCharm` in the `Problem` tab is often much more useful. By the way, in the
    output you can also see the exit code with value 1, which signals that the program
    was terminated prematurely with an error.
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Although Python is an interpreted language, and as such is normally slower than
    compiled programming languages, the programs that we will develop in the next
    few chapters will usually run briskly. However, especially when working with looping
    constructs, which we will do in ► Sect. `[24.​4](474412_1_En_24_Chapter.xhtml#Sec8)`,
    it is quite possible for a program to take longer to run, especially if you have
    accidentally built your loop in such a way that it would never (at least not without
    external intervention or a lack of system resources) come to an end. That’s when
    it’s handy to be able to abort a program while it’s running. This is exactly what
    can be done in `PyCharm` with the “Stop” button in the sidebar of the Run console.
    While your script is running, this button is colored red and can be clicked.
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '19.2 The Python console: Python in interactive mode'
  id: totrans-53
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: 在`*PyCharm*`界面底部的标签中，我们尚未查看的是`*Python console*`。它允许我们在`*interactive mode*`下运行`Python`。这意味着我们可以输入一条`Python`语句并立即执行。因此，通常输入的不是一整串语句并一起执行（尽管那也是可能的），而只是单条语句。指令后面跟着`Python`的响应（无论多么精确），然后你可以输入新的内容。由于指令输入和`Python`处理指令之间的这种相互作用，它被称为交互模式，有时称为`*REPL*`（`*read-eval-print*
    loop`）。输入在`*prompt*`中完成，`prompt`仅仅是输入请求。在`Python console`中，提示由三个大于号（`>>>`）标记。
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在`*PyCharm*`侧边栏底部，点击“Python Console”图标（带有`Python`标志的那个图标，就在象征运行控制台的“Play”图标下方）。现在，在`prompt`处，输入我们上面脚本中的一个`**print()**`语句，并通过按下`<ENTER>`键确认：
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`>>>` `print("Hello World")` Hello world 你可以看到我们的指令直接执行。之后，新的提示直接出现，你可以在这里输入进一步的指令。◘
    图`[19.8](#Fig8)`显示了在执行我们的语句后`*PyCharm*`中的`Python console`。![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig8_HTML.png)'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 一组程序代码及其输出的截图。该程序由2个句子的`print`语句组成，带有错误。错误显示在底部的输出屏幕上。
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Fig. 19.8`'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 执行语句在`Python`控制台中的`*PyCharm*`。
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig9_HTML.jpg)'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '`Jupyter`笔记本的截图。线性回归部分被高亮显示。'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Fig. 19.9`'
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Jupyter`中的笔记本'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在前面的代码部分，以及本书其余部分中，提示由字符串`**>>>**`表示。请注意，你必须不输入这些提示字符！任何没有提示前缀的内容都是`Python`的输出。
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 你可以使用控制台快速尝试`Python`命令指令。此外，正如我们在前一章中看到的，你可以从这里调用`**help**`（试试看，输入`**help(print)**`以获取关于`**print()**`函数的帮助信息）。请注意，`Python
    console`和`Python script editor`是两个完全不同且整齐分开的世界。特别是，你不能从`Python console`访问你在脚本中使用的变量。但关于这一点更多内容在►`Chap.
    [21](474412_1_En_21_Chapter.xhtml)`。
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Of course, you can also start the Python console directly from the command line
    (console/terminal) of your operating system. To do this, simply run the `python`
    program without any additional parameters. The Python console will then open in
    your operating system terminal. You can exit interactive mode again by entering
    the `quit()` statement, which terminates `python` and returns you to the operating
    system level.
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`19.3 Get to Know PyCharm`'
  id: totrans-67
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: You have already learned about some of the features of `PyCharm`’s interface.
    Of course, `PyCharm` can do much more; however, we will not exhaust the full range
    of `PyCharm`’s features here. Some features are only relevant if you want to develop
    software on a professional level. And as with any traditional office application,
    even the most professional users don’t take advantage of all the features the
    software offers them.
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The `PyCharm` interface is, like that of many integrated development environments,
    quite complex with its different panes and tabs, some of which are nested within
    each other. Even though we already get by with a relatively modest set of features
    for our purposes, it’s still a good idea to just play around with `PyCharm` a
    bit and get to know the interface better. Be curious and try things out. Fortunately,
    nothing can break during your explorations. In ► Sect. `[23.3.3](474412_1_En_23_Chapter.xhtml#Sec10)`,
    where we talk about working with installed modules, and in ► Sect. `[25.5](474412_1_En_25_Chapter.xhtml#Sec8)`,
    where we talk about debugging, we will return to the `PyCharm interface` and learn
    about some more features.
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`19.4 Some Alternatives to PyCharm for Python Code Execution`'
  id: totrans-70
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: If using `PyCharm` is too complicated for you, you can of course also use another
    Integrated Development Environment. There is no shortage of alternatives on the
    market. The simplest is probably `IDLE`, the Integrated Development Environment
    that comes with the Python installation. It allows Python code to be executed
    in script/batch mode or interactively in the Python console. `IDLE` supports syntax
    highlighting, but is otherwise not very convenient. Nevertheless, `IDLE` serves
    its purpose well. So before you throw in the towel because you feel overwhelmed
    with the “battleship” `PyCharm`，try `IDLE`! Everything we do in this book can
    also be done with `IDLE` instead of `PyCharm`.
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Jupyter`是另一种执行Python代码的流行方式。`Jupyter`在网页浏览器中运行，类似于Python控制台，允许你以交互模式输入Python命令并查看结果。然而，不仅文本结果会显示，还有图形，这在处理统计数据时非常有用。除了Python代码和输出外，你还可以放置标题、解释性文本和其他元素。所有这些合在一起形成了一个所谓的`Jupyter`笔记本，可以随时保存、修改，并且可以整体或部分反复执行。保存的笔记本可以轻松分享给团队成员、同事或其他感兴趣的人。因此，`Jupyter`在探索数据和记录工作步骤方面非常有用。除了Python，`Jupyter`还支持一系列其他语言，如`R`或`Scala`。图`[19.9](#Fig9)`展示了一个包含一些代码和输出的`Jupyter`笔记本示例，以及一些不属于实际代码但仅用于结构化笔记本的标题。'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 如果你在路上而手头没有Python解释器，你也可以使用`ChatGPT`运行Python代码。`ChatGPT`有一个可以执行Python代码的环境（以前称为代码解释器）。例如，可以问`ChatGPT`：“执行以下Python代码并显示结果”。你可以直接在提示框中编写代码或将其作为文件上传。
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 19.5 Summary
  id: totrans-74
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: 在本章中，我们探讨了如何使用`PyCharm`开发和运行Python程序。
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 以下是本章的关键点：
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`PyCharm`是一个功能强大的集成开发环境（IDE），具有广泛的特性，而我们在“正常操作”中仅使用其中的一小部分。'
  id: totrans-77
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`PyCharm`通过语法高亮和实时语法检查提供实用功能，以支持Python程序的开发。'
  id: totrans-78
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`PyCharm`可以处理不同的解释器。因此，在开始工作之前，必须选择你想使用的解释器。即使你只有一个解释器可用（即你与最新Python版本一起安装的那个），你也必须这样做。'
  id: totrans-79
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: Python程序在`PyCharm`的运行控制台中运行。
  id: totrans-80
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 此外，还有Python控制台，允许Python在交互模式下运行；在这里输入的Python命令会立即执行。
  id: totrans-81
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: Python程序也可以直接使用Python解释器`python`运行，而无需使用`PyCharm`；如果在没有Python脚本文件作为参数的情况下调用Python解释器，则会启动交互模式。你可以随时通过输入`quit()`退出。
  id: totrans-82
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 你可以使用`print()`函数在屏幕上输出信息。
  id: totrans-83
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
