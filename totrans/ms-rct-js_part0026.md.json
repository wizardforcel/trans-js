["```jsjavascript\n\n// Example 1: Object literal\n\nconst person = {\n\nname: \"John Doe\",\n\nage: 30,\n\noccupation: \"Software Engineer\",\n\ngreet: function() {\n\nconsole.log(\"Hello, I am \" + this.name);\n\n}\n\n};\n\n```", "```jsjavascript\n\n// Example 2: Accessing object properties\n\nconsole.log(person.name); // Output: \"John Doe\"\n\nconsole.log(person[\"age\"]); // Output: 30\n\n```", "```jsjavascript\n\n// Example 3: Adding and modifying object properties\n\nperson.location = \"New York\";\n\nperson.age = 31;\n\nconsole.log(person); // Output: { name: 'John Doe', age: 31, occupation: 'Software Engineer', greet: [Function] }\n\n```", "```jsjavascript\n\n// Example 4: Object methods\n\nperson.sayHello = function() {\n\nconsole.log(\"Hello, I am \" + this.name);\n\n};\n\nperson.sayHello(); // Output: \"Hello, I am John Doe\"\n\n```", "```jsjavascript\n\n// Example 5: Prototype chain\n\nconst parent = {\n\nparentProp: \"I am from parent\"\n\n};\n\nconst child = {\n\nchildProp: \"I am from child\"\n\n};\n\nObject.setPrototypeOf(child, parent);\n\nconsole.log(child.childProp); // Output: \"I am from child\"\n\nconsole.log(child.parentProp); // Output: \"I am from parent\"\n\n```", "```jsjavascript\n\n// Example 6: The __proto__ property\n\nconst parent = {\n\nparentProp: \"I am from parent\"\n\n};\n\nconst child = {\n\nchildProp: \"I am from child\"\n\n};\n\nchild.__proto__ = parent;\n\nconsole.log(child.childProp); // Output: \"I am from child\"\n\nconsole.log(child.parentProp); // Output: \"I am from parent\"\n\n```", "```jsjavascript\n\n// Example 7: Creating objects with prototypes (using constructors)\n\nfunction Person(name, age) {\n\nthis.name = name;\n\nthis.age = age;\n\n}\n\nPerson.prototype.sayHello = function() {\n\nconsole.log(\"Hello, I am \" + this.name);\n\n};\n\nconst john = new Person(\"John Doe\", 30);\n\njohn.sayHello(); // Output: \"Hello, I am John Doe\"\n\n```", "```jsjavascript\n\n// Example 8: Creating objects with prototypes (using classes)\n\nclass Animal {\n\nconstructor(name) {\n\nthis.name = name;\n\n}\n\nmakeSound() {\n\nconsole.log(this.name + \" makes a sound\");\n\n}\n\n}\n\nconst cat = new Animal(\"Cat\");\n\ncat.makeSound(); // Output: \"Cat makes a sound\"\n\n```", "```jsjavascript\n\n// Example 9: Inheritance with prototypes\n\nfunction Shape() {}\n\nShape.prototype.draw = function() {\n\nreturn \"Drawing a shape\";\n\n};\n\nfunction Circle(radius) {\n\nthis.radius = radius;\n\n}\n\nCircle.prototype = Object.create(Shape.prototype);\n\nCircle.prototype.constructor = Circle;\n\nCircle.prototype.draw = function() {\n\nreturn \"Drawing a circle with radius \" + this.radius;\n\n};\n\nconst circle = new Circle(5);\n\nconsole.log(circle.draw()); // Output: \"Drawing a circle with radius 5\"\n\n```"]