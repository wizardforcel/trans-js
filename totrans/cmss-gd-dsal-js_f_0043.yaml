- en: The Efficiency of Bubble Sort
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: 'The Bubble Sort algorithm contains two significant kinds of steps:'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Comparisons: Two numbers are compared with one another to determine which is
    greater.'
  id: totrans-2
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 'Swaps: Two numbers are swapped with one another to sort them.'
  id: totrans-3
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: Let’s start by determining how many comparisons take place in Bubble Sort.
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Our example array has `five` elements. Looking back, you can see that in our
    first pass-through, we had to make `four` comparisons between sets of two numbers.
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In our second pass-through, we only had to make `three` comparisons. This is
    because we didn’t have to compare the final two numbers, since we knew that the
    final number was in the correct spot due to the first pass-through.
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In our third pass-through, we made `two` comparisons, and in our fourth pass-through,
    we made just `one` comparison.
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: So that’s
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`4 + 3 + 2 + 1 = 10` comparisons.'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: To put this in a way that would hold true for arrays of all sizes, we’d say
    that for `N` elements, we make
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`(N - 1) + (N - 2) + (N - 3) … + 1` comparisons.'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Now that we’ve analyzed the number of comparisons that take place in Bubble
    Sort, let’s analyze the swaps.
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In a worst-case scenario, where the array is sorted in descending order (the
    exact opposite of what we want), we’d actually need a swap for each comparison.
    So we’d have `10` comparisons and `10` swaps in such a scenario for a grand total
    of `20` steps.
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Let’s look at the big picture. With an array containing `five` values in reverse
    order, we make `4 + 3 + 2 + 1 = 10` comparisons. Along with the `10` comparisons,
    we also have `10` swaps, totaling `20` steps.
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: For such an array with `10` values, we get `9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 +
    1 = 45` comparisons, and another `45` swaps. That’s a total of `90` steps.
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'With an array containing `20` values, we’d have:'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`19 + 18 + 17 + 16 + 15 + 14 + 13 + 12 + 11 + 10 + 9 + 8 + 7 + 6 + 5 + 4 +
    3 + 2 + 1 = 190` comparisons, and approximately `190` swaps, for a total of `380`
    steps.'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Notice the inefficiency here. As the number of elements increases, the number
    of steps grows exponentially. (In technical math terms, we’d actually say that
    it grows quadratically.) We can see this clearly in the following table:'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| `N Data Elements` | `Max # of Steps` |'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `---` | `---` |'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `5` | `20` |'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `10` | `90` |'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `20` | `380` |'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `40` | `1560` |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `80` | `6320` |'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 'If you look at the growth of steps as `N` increases, you’ll see that it’s growing
    by approximately `N²`. Take a look at the following table:'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| `N Data Elements` | `# of Bubble Sort Steps` | `N²` |'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `---` | `---` | `---` |'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `5` | `20` | `25` |'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `10` | `90` | `100` |'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `20` | `380` | `400` |'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `40` | `1560` | `1600` |'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `80` | `6320` | `6400` |'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 'Let’s express the time complexity of Bubble Sort with Big O notation. Remember,
    Big O always answers the key question: if there are `N` data elements, how many
    steps will the algorithm take? Because for `N` values, Bubble Sort takes `N²`
    steps, in Big O we say that Bubble Sort has an efficiency of `O(N²)`.'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`O(N²)`被认为是一种相对低效的算法，因为随着数据量的增加，步骤会急剧增加。请看下面的图表，它比较了`O(N²)`与更快的`O(N)`：'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/speeding_up_your_code_with_big_o/bubble_sort_30.png`](images/speeding_up_your_code_with_big_o/bubble_sort_30.png)'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 请注意，`O(N²)`在步骤数量方面随着数据的增长而急剧上升。将其与`O(N)`进行比较，后者沿着一条简单的对角线绘制。
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 最后一点：`O(N²)`也被称为平方时间。
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
