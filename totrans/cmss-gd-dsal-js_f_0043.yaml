- en: The Efficiency of Bubble Sort
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 冒泡排序的效率
- en: 'The Bubble Sort algorithm contains two significant kinds of steps:'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 冒泡排序算法包含两种重要的步骤：
- en: 'Comparisons: Two numbers are compared with one another to determine which is
    greater.'
  id: totrans-2
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 比较：两个数字相互比较以确定哪个更大。
- en: 'Swaps: Two numbers are swapped with one another to sort them.'
  id: totrans-3
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 交换：两个数字互相交换以进行排序。
- en: Let’s start by determining how many comparisons take place in Bubble Sort.
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们先确定冒泡排序中进行的比较次数。
- en: Our example array has `five` elements. Looking back, you can see that in our
    first pass-through, we had to make `four` comparisons between sets of two numbers.
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们的示例数组有 `五` 个元素。回顾一下，你可以看到在第一次遍历中，我们必须进行 `四` 次关于两组数字的比较。
- en: In our second pass-through, we only had to make `three` comparisons. This is
    because we didn’t have to compare the final two numbers, since we knew that the
    final number was in the correct spot due to the first pass-through.
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在我们第二次遍历中，我们只需要进行 `三` 次比较。这是因为我们不需要比较最后两个数字，因为我们知道最后一个数字由于第一次遍历已经在正确的位置。
- en: In our third pass-through, we made `two` comparisons, and in our fourth pass-through,
    we made just `one` comparison.
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在我们第三次遍历中，我们进行了 `两` 次比较，而在第四次遍历中，我们只进行了 `一次` 比较。
- en: So that’s
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 所以就是
- en: '`4 + 3 + 2 + 1 = 10` comparisons.'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`4 + 3 + 2 + 1 = 10` 次比较。'
- en: To put this in a way that would hold true for arrays of all sizes, we’d say
    that for `N` elements, we make
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 用一种适用于所有大小数组的方式来说，我们可以说对于 `N` 个元素，我们进行
- en: '`(N - 1) + (N - 2) + (N - 3) … + 1` comparisons.'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`(N - 1) + (N - 2) + (N - 3) … + 1` 次比较。'
- en: Now that we’ve analyzed the number of comparisons that take place in Bubble
    Sort, let’s analyze the swaps.
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在我们已经分析了冒泡排序中的比较次数，接下来我们来分析交换。
- en: In a worst-case scenario, where the array is sorted in descending order (the
    exact opposite of what we want), we’d actually need a swap for each comparison.
    So we’d have `10` comparisons and `10` swaps in such a scenario for a grand total
    of `20` steps.
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在最坏的情况下，数组按降序排列（正好与我们想要的相反），实际上每次比较都需要进行一次交换。因此，在这种情况下，我们会有 `10` 次比较和 `10` 次交换，总共是
    `20` 步。
- en: Let’s look at the big picture. With an array containing `five` values in reverse
    order, we make `4 + 3 + 2 + 1 = 10` comparisons. Along with the `10` comparisons,
    we also have `10` swaps, totaling `20` steps.
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们看一下整体情况。对于一个包含 `五` 个值的逆序数组，我们进行 `4 + 3 + 2 + 1 = 10` 次比较。再加上 `10` 次交换，总共是
    `20` 步。
- en: For such an array with `10` values, we get `9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 +
    1 = 45` comparisons, and another `45` swaps. That’s a total of `90` steps.
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 对于这样一个包含 `10` 个值的数组，我们有 `9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 = 45` 次比较，以及另外 `45`
    次交换。总共是 `90` 步。
- en: 'With an array containing `20` values, we’d have:'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 对于一个包含 `20` 个值的数组，我们会有：
- en: '`19 + 18 + 17 + 16 + 15 + 14 + 13 + 12 + 11 + 10 + 9 + 8 + 7 + 6 + 5 + 4 +
    3 + 2 + 1 = 190` comparisons, and approximately `190` swaps, for a total of `380`
    steps.'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`19 + 18 + 17 + 16 + 15 + 14 + 13 + 12 + 11 + 10 + 9 + 8 + 7 + 6 + 5 + 4 +
    3 + 2 + 1 = 190` 次比较，约 `190` 次交换，总共是 `380` 步。'
- en: 'Notice the inefficiency here. As the number of elements increases, the number
    of steps grows exponentially. (In technical math terms, we’d actually say that
    it grows quadratically.) We can see this clearly in the following table:'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 注意这里的低效率。随着元素数量的增加，步骤数呈指数增长。（在技术数学术语中，我们可以说它是以二次方增长的。）我们可以在下面的表格中清楚地看到这一点：
- en: '| `N Data Elements` | `Max # of Steps` |'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `N 数据元素` | `最大步骤数` |'
- en: '| `---` | `---` |'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `---` | `---` |'
- en: '| `5` | `20` |'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `5` | `20` |'
- en: '| `10` | `90` |'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `10` | `90` |'
- en: '| `20` | `380` |'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `20` | `380` |'
- en: '| `40` | `1560` |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `40` | `1560` |'
- en: '| `80` | `6320` |'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `80` | `6320` |'
- en: 'If you look at the growth of steps as `N` increases, you’ll see that it’s growing
    by approximately `N²`. Take a look at the following table:'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你观察当 `N` 增加时步骤的增长，你会发现它大约是以 `N²` 的速度增长。看看下面的表格：
- en: '| `N Data Elements` | `# of Bubble Sort Steps` | `N²` |'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `N 数据元素` | `冒泡排序步骤数` | `N²` |'
- en: '| `---` | `---` | `---` |'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `---` | `---` | `---` |'
- en: '| `5` | `20` | `25` |'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `5` | `20` | `25` |'
- en: '| `10` | `90` | `100` |'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `10` | `90` | `100` |'
- en: '| `20` | `380` | `400` |'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `20` | `380` | `400` |'
- en: '| `40` | `1560` | `1600` |'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `40` | `1560` | `1600` |'
- en: '| `80` | `6320` | `6400` |'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `80` | `6320` | `6400` |'
- en: 'Let’s express the time complexity of Bubble Sort with Big O notation. Remember,
    Big O always answers the key question: if there are `N` data elements, how many
    steps will the algorithm take? Because for `N` values, Bubble Sort takes `N²`
    steps, in Big O we say that Bubble Sort has an efficiency of `O(N²)`.'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们用大 O 符号表示冒泡排序的时间复杂度。记住，大 O 总是回答关键问题：如果有 `N` 个数据元素，算法将花费多少步骤？因为对于 `N` 个值，冒泡排序需要
    `N²` 步骤，所以在大 O 表达中，我们说冒泡排序的效率为 `O(N²)`。
- en: '`O(N²)`被认为是一种相对低效的算法，因为随着数据量的增加，步骤会急剧增加。请看下面的图表，它比较了`O(N²)`与更快的`O(N)`：'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`O(N²)`被认为是一种相对低效的算法，因为随着数据量的增加，步骤会急剧增加。请看下面的图表，它比较了`O(N²)`与更快的`O(N)`：'
- en: '![`images/speeding_up_your_code_with_big_o/bubble_sort_30.png`](images/speeding_up_your_code_with_big_o/bubble_sort_30.png)'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/speeding_up_your_code_with_big_o/bubble_sort_30.png`](images/speeding_up_your_code_with_big_o/bubble_sort_30.png)'
- en: 请注意，`O(N²)`在步骤数量方面随着数据的增长而急剧上升。将其与`O(N)`进行比较，后者沿着一条简单的对角线绘制。
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 请注意，`O(N²)`在步骤数量方面随着数据的增长而急剧上升。将其与`O(N)`进行比较，后者沿着一条简单的对角线绘制。
- en: 最后一点：`O(N²)`也被称为平方时间。
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 最后一点：`O(N²)`也被称为平方时间。
