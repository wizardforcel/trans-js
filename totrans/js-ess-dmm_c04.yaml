- en: 第四章
  id: totrans-0
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Controlling the Flow of JavaScript`'
  id: totrans-1
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: '`IN THIS CHAPTER`'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) `Setting up your code to make decisions`'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) `Understanding code looping`'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) `Setting up code loops`'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在默认的脚本流程中，浏览器一次处理`script`元素或外部JavaScript文件中的代码。浏览器读取并执行第一条语句，然后读取并执行第二条语句，以此类推，直到没有更多JavaScript可供读取和执行。
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '这种逐条执行的流程似乎合理，但它的局限性极大。如果你希望代码测试某个条件，然后根据测试的结果跳转到特定代码块，该怎么办？如果你希望代码多次重复某些语句，并在每次重复中发生一些变化，该怎么办？进行测试的代码和重复执行的代码都属于控制JavaScript流程的范畴。在本章中，你将探索这一引人入胜且强大的主题。
    ## `Decision-Making with if Statements`'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 一个智能脚本会对其环境进行测试，然后根据每个测试的结果决定接下来要做什么。例如，假设你已经声明了一个变量，稍后在表达式中用作除数。在使用该变量之前，你应该测试它以确保它的值不是`0`。
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 最基本的测试是简单的真/假决策（也可以被视为是是/否或开/关决策）。在这种情况下，你的程序查看某个条件，确定它当前是`true`还是`false`，并相应地采取行动。比较和逻辑表达式（在[第3章](c03.xhtml)中介绍）在这里发挥了重要作用，因为它们始终返回`true`或`false`的结果。
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在JavaScript中，简单的真/假决策是通过`if`语句处理的。你可以使用`single-line`语法：
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`if (expression) statement;`'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 或者`block`语法：
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`if (expression) { statement1; statement2; … }`'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在这两种情况下，`expression`是一个返回`true`或`false`的比较或逻辑表达式，而`statement(s)`表示如果`expression`返回`true`要执行的JavaScript语句或语句。如果`expression`返回`false`，JavaScript会跳过这些语句。
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Tip](images/tip.png) 这里是一个很好的地方，可以指出JavaScript将以下值视为`false`的等价物：`0`，`""`（即空字符串），`null`和`undefined`。其他所有值都被视为`true`。'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Remember](images/remember.png) 这是您第一次遇到JavaScript的花括号（`{`和`}`），请花一点时间理解它们的作用，因为它们经常出现。花括号包围您希望JavaScript视为单个实体的一条或多条语句。这个实体本身是一种语句，因此整个组合——花括号和它们包含的代码——称为`*block
    statement*`。此外，任何由语句（例如`if`）后跟块语句组成的JavaScript结构称为`*compound statement*`。并且，为了让您保持警惕，请注意包含花括号的行不以分号结束。'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 您使用单行或块语法取决于当`*expression*`返回`true`结果时要运行的语句。如果您只有一个语句，可以使用任一语法。如果您有多个语句，则使用块语法。
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 考虑以下示例：
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``if (totalSales != 0) { const grossMargin = (totalSales - totalExpenses) /
    totalSales; }``'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这段代码假设之前脚本已计算总销售额和总支出，这些值分别存储在`totalSales`和`totalExpenses`变量中。代码现在计算毛利率，定义为毛利（即销售额减去支出）除以销售额。代码使用`if`来测试`totalSales`变量的值是否不等于零。如果`totalSales
    != 0`表达式返回`true`，则执行`grossMargin`计算；否则，什么都不发生。此示例中的`if`测试是合理的，因为它确保计算中的除数——`totalSales`——永远不为零。##
    使用if…else语句分支
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 使用`if`语句进行决策为您的JavaScript工具箱增添了一种强大的新武器。然而，`if`的简单版本存在一个重要限制：`false`结果仅跳过一个或多个语句；它不会执行自己的任何内容。在许多情况下，这很好，但有时您需要在条件返回`true`时运行一组语句，而在结果为`false`时运行另一组语句。要处理这些情况，您需要使用`if…else`语句：
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``if (*expression*) { *statements-if-true* } else { *statements-if-false* }``'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`*expression*`是一个比较或逻辑表达式，返回`true`或`false`。`*statements-if-true*`表示当`*expression*`返回`true`时，您希望JavaScript运行的语句块，`*statements-if-false*`表示当`*expression*`返回`false`时，您希望执行的语句块。'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 作为示例，考虑以下代码：
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``let discountRate; if (currMonth === "December") { discountRate = 0.2; } else
    { discountRate = 0.1; } const discountedPrice = regularPrice * (1 – discountRate);``'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: This code calculates a discounted price of an item, where the discount depends
    on whether the current month is December. The code assumes that earlier, the script
    set the value of the current month (`currMonth`) and the item’s regular price
    (`regularPrice`). After declaring the `discountRate` variable, an `if…else` statement
    checks whether `currMonth` equals December. If it does, `discountRate` is set
    to `0.2`; otherwise, `discountRate` is set to `0.1`。Finally, the code uses the
    `discountRate` value to calculate `discountedPrice`.
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Tip](images/tip.png)`if…else` statements are much easier to read when you
    indent the statements within each block, as I’ve done in my examples. This indentation
    lets you easily identify which block will run if there is a `true` result and
    which block will run if the result is `false`. I find that an indent of four spaces
    does the job, but many programmers prefer either two spaces or a tab.  ## Understanding
    the Value of Code Looping'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: There are some who would say that the only real goal of the programmer should
    be to get the job done. As long as the code produces the correct result or performs
    the correct tasks in the correct order, everything else is superfluous. Perhaps,
    but `real` programmers know that the true goal of programming is not only to get
    the job done, but to get it done `as efficiently as possible.` Efficient scripts
    run faster, take less time to code, and are usually (not always, but usually)
    easier to read and troubleshoot.
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'One of the best ways to introduce efficiency into your coding is to avoid reinventing
    too many wheels. For example, consider the following code fragment:'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`let sum = 0; let num = prompt("Type a number:", 1); sum += Number(num); num
    = prompt("Type a number:", 1); sum += Number(num); num = prompt("Type a number:",
    1); sum += Number(num); document.write("The total of your numbers is " + sum);`'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: This code first declares a variable named `sum`. The code prompts the user for
    a number (using the `prompt` method with a default value of `1`) that gets stored
    in the `num` variable, adds that value to `sum`, and then repeats this prompt-and-sum
    routine two more times. (Note my use of the `Number` function, which ensures that
    the value returned by `prompt` is treated as a number rather than a string.) Finally,
    the sum of the three numbers is displayed to the user.
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Besides being a tad useless, this code just reeks of inefficiency because most
    of the code consists of the following two lines appearing three times:'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`num = prompt("Type a number:", 1); sum += Number(num);`'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Wouldn’t it be more efficient if you put these two statements just once in the
    code and then somehow get JavaScript to repeat these statements as many times
    as necessary?
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Why, yes, it would, and the good news is that not only is it possible to do
    this, but JavaScript also gives you a number of different methods to perform this
    so-called `looping.` I spend the rest of this chapter investigating each of these
    methods.  ## Working with while Loops'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The most straightforward of the JavaScript loop constructions is the `while`
    loop, which uses the following syntax:'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`while (expression) { statements }`'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Here, `expression` is a comparison or logical expression (that is, an expression
    that returns `true` or `false`) that, as long as it returns `true`, tells JavaScript
    to keep executing the `statements` within the block.
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Essentially, JavaScript interprets a `while` loop as follows: “Okay, as long
    as `expression` remains `true`, I’ll keep running through the loop statements,
    but as soon as `expression` becomes `false`, I’m out of there.”'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s a closer look at how a `while` loop works:'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Evaluate the `expression` in the `while` statement.
  id: totrans-41
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: If `expression` is `true`, continue with Step 3; if `expression` is `false`,
    skip to Step 5.
  id: totrans-42
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: Execute each of the statements in the block.
  id: totrans-43
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: Return to Step 1.
  id: totrans-44
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: Exit the loop (that is, execute the next statement that occurs after the `while`
    block).
  id: totrans-45
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: 'The following code demonstrates how to use `while` to rewrite the inefficient
    code shown in the previous section:'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`let sum = 0; let counter = 1; let num; while (counter <= 3) { num = prompt("Type
    a number:", 1); sum += Number(num); counter += 1; } document.write("The total
    of your numbers is " + sum);`'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: To control the loop, the code declares a variable named `counter` and initializes
    it to `1`, which means that the expression `counter <= 3` is `true`, so the code
    enters the block, does the prompt-and-sum thing, and then increments `counter`.
    This is repeated until the third time through the loop, when `counter` is incremented
    to `4`, at which point the expression `counter <= 3` becomes `false` and the loop
    is done.
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Tip](images/tip.png) To make your loop code as readable as possible, always
    use a two- or four-space indent for each statement in the `while` block. The same
    applies to the `for` and `do…while` loops that I talk about later in this chapter.'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The `while` statement isn’t the greatest loop choice when you know exactly
    how many times you want to run through the loop. For that, use the `for` statement,
    described in the next section. The best use of the `while` statement is when your
    script has some naturally occurring condition that you can turn into a comparison
    expression. A good example is when you’re prompting the user for input values.
    You’ll often want to keep prompting the user until they click the Cancel button.
    The easiest way to set that up is to include the prompt inside a `while` loop,
    as shown here:'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`let sum = 0; let num = prompt("Type a number or click Cancel:", 1); while
    (num != null) { sum += Number(num); num = prompt("Type a number or click Cancel:",
    1); } document.write("The total of your numbers is " + sum);`'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The first `` `prompt` `` method displays a dialog box like the one shown in
    [Figure 4-1](#c04-fig-0001) to get the initial value; then it stores it in the
    `` `num` `` variable.
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![A snapshot of paulmcfederies webpage. The message box displays, type a number
    or click cancel. The cancel and ok options are given below.](images/9781394263219-fg0401.png)'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '[FIGURE 4-1:](#rc04-fig-0001) Set up your `` `while` `` expression so that
    the prompting stops when the user clicks the Cancel button.'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Then the `` `while` `` statement checks the following expression:'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`` `num != null` ``'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Two things can happen here:'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: If the user enters a number, this expression returns `` `true` `` and the loop
    continues. In this case, the value of `` `num` `` is added to the `` `sum` ``
    variable, and the user is prompted for the next number.
  id: totrans-58
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 'If the user clicks Cancel, the value returned by `` `prompt` `` is `` `null`
    ``, so the expression becomes `` `false` `` and the looping stops. ## Working
    with for Loops'
  id: totrans-59
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 'Although `` `while` `` is the most straightforward of the JavaScript loops,
    the most common type by far is the `` `for` `` loop. This fact is slightly surprising
    when you consider (as you will shortly) that the `` `for` `` loop’s syntax is
    a bit more complex than that of the `` `while` `` loop. However, the `` `for`
    `` loop excels at one thing: looping when you know exactly how many times you
    want to repeat a group of statements. This is extremely common in all types of
    programming, so it’s no wonder `` `for` `` is so often used in scripts.'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The structure of a typical `` `for` `` loop looks like this:'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`` `for (let `*counter*` = `*start*`; `*counterExpression*`; `*counterUpdate*`)
    { `*statements*` }` ``'
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'There’s a lot going on here, so I’ll take it one bit at a time:'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`` `counter` ``: A numeric variable used as a `` *loop counter.* `` The loop
    counter is a number that counts how many times the procedure has gone through
    the loop. (Note that you need to include `` `let` `` only if this is the first
    time you’ve used the variable in the script.)'
  id: totrans-64
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`` `start` ``: The initial value of `` `counter` ``. This value is usually
    1, but you can use whatever value makes sense for your script.'
  id: totrans-65
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`` `counterExpression` ``: A comparison or logical expression that determines
    the number of times through the loop. This expression usually compares the current
    value of `` `counter` `` to some maximum value.'
  id: totrans-66
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`` `counterUpdate` ``: An expression that changes the value of `` `counter`
    ``. This expression is evaluated after each turn through the loop. Most of the
    time, you’ll increment the value of counter with the expression `` `counter` ``
    `` += 1 ``.'
  id: totrans-67
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`` `statements` ``: The statements you want JavaScript to execute each time
    through the loop.'
  id: totrans-68
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 'When JavaScript stumbles upon the `` `for` `` statement, it changes into its
    for-loop outfit and follows this seven-step process:'
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Set `` `counter` `` equal to `` `start` ``.
  id: totrans-70
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: Evaluate the `` `counterExpression` `` in the `` `for` `` statement.
  id: totrans-71
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: If `` `counterExpression` `` is `` `true` ``, continue with Step 4; if `` `counterExpression`
    `` is `` `false` ``, skip to Step 7.
  id: totrans-72
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: Execute each of the statements in the block.
  id: totrans-73
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: Use `` `counterUpdate` `` to increment (or whatever) `` `counter` ``.
  id: totrans-74
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: 返回到步骤2。
  id: totrans-75
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: 退出循环（即，执行`for`块之后发生的下一条语句）。
  id: totrans-76
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: 作为示例，下面的代码显示如何使用`for`来重写本章早些时候显示的低效代码：
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`let sum = 0; let num; for (let counter = 1; counter <= 3; counter += 1) {
    num = prompt("Type a number:", 1); sum += Number(num); } document.write("The total
    of your numbers is " + sum);`'
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这是迄今为止最有效的版本，因为`counter`变量的声明、初始化和增量都在`for`语句中完成。
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Remember](images/remember.png) 为了尽量减少脚本中声明的变量数量，始终尝试在所有`for`循环计数器中使用相同的名称。字母`i`到`n`通常用于编程中的计数器。为了更清晰，你可能更喜欢使用完整的单词，如`count`或`counter`。'
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这是一个稍微复杂的示例：
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`let sum = 0; for (let counter = 1; counter < 4; counter += 1) { let num; let
    ordinal; switch (counter) { case 1: ordinal = "first"; break; case 2: ordinal
    = "second"; break; case 3: ordinal = "third"; } num = prompt("Enter the " + ordinal
    + " number:", 1); sum += Number(num); } document.write("The average is " + sum
    / 3);`'
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 本脚本的目的是询问用户三个数字，然后显示这些值的平均值。`for`语句设置为循环三次。（注意`counter < 4`与`counter <= 3`是相同的。）循环块首先使用`switch`来确定`ordinal`变量的值：如果`counter`为1，则`ordinal`被设置为`"first"`；如果`counter`为2，则`ordinal`变为`"second"`；以此类推。这些值使脚本能够在每次循环中自定义`prompt`消息（查看[图4-2](#c04-fig-0002)）。在每次循环中，用户输入一个数字，该值被添加到`sum`变量中。当循环退出时，平均值被显示。
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![A snapshot of paulmcfederies webpage. The message box displays, enter the
    first number. The cancel and ok options are given below.](images/9781394263219-fg0402.png)'
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '[FIGURE 4-2:](#rc04-fig-0002) 此脚本使用当前的`counter`变量值来自定义提示消息。'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 也可以使用`for`进行倒计数。你可以通过使用减法赋值运算符而不是加法赋值运算符来实现：
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`for (let *counter = start*; *counterExpression*; *counter -= 1*) { *statements*
    }`'
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在这种情况下，必须将`counter`变量初始化为你想要用于循环计数器的最大值，并使用`counterExpression`将`counter`的值与要用来结束循环的最小值进行比较。
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在以下示例中，我使用递减计数器询问用户以逆序对他们的前三种CSS颜色进行排名：
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``for (let rank = 3; rank >= 1; rank -= 1) { let ordinal; let color; switch
    (rank) { case 1: ordinal = "first"; break; case 2: ordinal = "second"; break;
    case 3: ordinal = "third"; } color = prompt("What is your " + ordinal + "-favorite
    CSS color?", ""); document.write(rank + ". " + color + "<br>"); }``'
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The `for` loop runs by decrementing the `rank` variable from `3` down to `1`.
    Each iteration of the loop prompts the user to type a favorite CSS color, and
    that color is written to the page, with the current value of `rank` being used
    to create a reverse-ordered list, as shown in [Figure 4-3](#c04-fig-0003).
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![A snapshot of paulmcfederies webpage. The reverse ordered list are, 3\. papaya
    whip, 2\. lemon chiffon, 1\. chocolate.](images/9781394263219-fg0403.png)'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '[FIGURE 4-3:](#rc04-fig-0003) The decrementing value of the `rank` variable
    is used to create a reverse-ordered list.'
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Tip](images/tip.png) There’s no reason why the `for` loop counter has to
    be only incremented or decremented. You’re actually free to use any expression
    to adjust the value of the loop counter. For example, suppose you want the loop
    counter to run through only the odd numbers `1`, `3`, `5`, `7`, and `9`. Here’s
    a `for` statement that will do that:'
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``for (let counter = 1; counter <= 9; counter += 2)``'
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The expression `counter += 2` uses the addition assignment operator to tell
    JavaScript to increase the `counter` variable by `2` each time through the loop.  '
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'JavaScript has a third and final type of loop that I’ve left until the last
    because it isn’t one that you’ll use all that often. To understand when you might
    use it, consider this code snippet:'
  id: totrans-97
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``let sum = 0; let num = prompt("Type a number or click Cancel:", 1); while
    (num != null) { sum += Number(num); num = prompt("Type a number or click Cancel:",
    1); }``'
  id: totrans-98
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The code needs the first `prompt` statement so that the `while` loop’s expression
    can be evaluated. The user may not feel like entering *any* numbers, and they
    can avoid it by clicking Cancel in the first prompt box so that the loop will
    be bypassed.
  id: totrans-99
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'That seems reasonable enough, but what if your code requires that the user
    enter at least one value? The following presents one way to change the code to
    ensure that the loop is executed at least once:'
  id: totrans-100
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``let sum = 0; let num = 0; while (num !== null || sum === 0) { num = prompt("Type
    a number; when you''re done, click Cancel:", 1); sum += Number(num); } document.write("The
    total of your numbers is " + sum);``'
  id: totrans-101
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The changes here are that the code initializes both `sum` and `num` as `0`.
    Initializing both to `0` ensures that the `while` expression — `num !== null ||
    sum === 0` — returns `true` the first time through the loop, so the loop will
    definitely execute at least once. If the user clicks Cancel right away, `sum`
    will still be `0`, so the `while` expression — `num !== null || sum === 0` — still
    returns `true` and the loop repeats once again.
  id: totrans-102
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这种方法效果很好，但你也可以转向JavaScript的第三种循环类型，它专门处理这种情况。它被称为`do…while`循环，它的一般语法看起来像这样：
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '```do { statements } while (expression);```'
  id: totrans-104
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在这里，`statements`代表每次循环执行的语句块，而`expression`是一个比较或逻辑表达式，只要它返回`true`，就告诉JavaScript继续执行循环中的`statements`。
  id: totrans-105
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这种结构确保JavaScript至少执行一次循环的语句块。为什么？仔细看看JavaScript如何处理`do…while`循环：
  id: totrans-106
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 执行语句块中的每一个语句。
  id: totrans-107
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: 在`while`语句中评估`expression`。
  id: totrans-108
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: 如果`expression`为`true`，返回到步骤1；如果`expression`为`false`，继续执行步骤4。
  id: totrans-109
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: 退出循环。
  id: totrans-110
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: For example, the following shows you how to use`do…while`来重构我之前展示的提示和求和代码：
  id: totrans-111
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '```let sum = 0; let num; do { num = prompt("Type a number; when you''re done,
    click Cancel:", 1); sum += Number(num); } while (num !== null || sum === 0); document.write("The
    total of your numbers is " + sum);```'
  id: totrans-112
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这段代码与我在本节之前展示的`while`代码非常相似。真正改变的只是`while`语句及其表达式被移到了语句块之后，因此循环必须在评估表达式之前至少执行一次。
  id: totrans-113
  prefs: []
  stylish: true
  type: TYPE_NORMAL
