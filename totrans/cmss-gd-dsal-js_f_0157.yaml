- en: Heap Insertion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To insert a new value into the heap, we perform the following algorithm:'
  prefs: []
  type: TYPE_NORMAL
- en: We create a node containing the new value and insert it at the next available
    rightmost spot in the bottom level. Thus, this value becomes the heap’s last node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we compare this new node with its parent node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the new node is greater than its parent node, we swap the new node with the
    parent node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We repeat Step 3, effectively moving the new node up through the heap, until
    the new node has a parent whose value is greater than it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s see this algorithm in action. Here’s what would happen if we were to insert
    a 40 into the heap.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: We add the 40 as the heap’s last node:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/heaps/add_40.png](images/heaps/add_40.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that doing the following would have been incorrect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/heaps/incorrect_add_40.png](images/heaps/incorrect_add_40.png)'
  prefs: []
  type: TYPE_IMG
- en: Placing the 40 as a child of the 12 node makes the tree incomplete since we’d
    now have a node to the right of an empty position. For a heap to remain a heap,
    it must always be complete.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: We compare the 40 with its parent node, which happens to be the 8\.
    Since the 40 is greater than the 8, we swap the two nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/heaps/swap_40_with_8.png](images/heaps/swap_40_with_8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 3: We compare the 40 with its new parent, the 25\. Since the 40 is greater
    than the 25, we swap them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/heaps/swap_40_with_25.png](images/heaps/swap_40_with_25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 4: We compare the 40 to its parent, which is the 100\. Since the 40 is
    smaller than the 100, we’re done!'
  prefs: []
  type: TYPE_NORMAL
- en: This process of moving the new node up the heap, is called trickling the node
    up through the heap. Sometimes it moves up to the right, and sometimes it moves
    up to the left, but it always moves up until it settles into the correct position.
  prefs: []
  type: TYPE_NORMAL
- en: The efficiency of inserting into a heap is O(log N). As you saw in the previous
    chapter, for N nodes in any binary tree, the tree is organized into about log(N)
    rows. Since at most we’d have to trickle the new value up to the top row, this
    will take log(N) steps at most.
  prefs: []
  type: TYPE_NORMAL
