- en: Chapter 1
  id: totrans-0
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第一章
- en: 'JavaScript: The Big Picture'
  id: totrans-1
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: JavaScript：宏观视角
- en: IN THIS CHAPTER
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 本章内容
- en: '![Bullet](images/check.png) `Getting a feel for programming in general, and
    JavaScript in particular`'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) `感受一下编程的一般过程，尤其是JavaScript`'
- en: '![Bullet](images/check.png) `Checking out the tools you need to get coding`'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) `了解你编程所需的工具`'
- en: '![Bullet](images/check.png) `Adding comments to your JavaScript code`'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) `为JavaScript代码添加注释`'
- en: '![Bullet](images/check.png) `Storing your code in a separate JavaScript file`'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) `将代码存储在单独的JavaScript文件中`'
- en: 'In this chapter, you explore some useful JavaScript basics. Don’t worry if
    you’ve never programmed before. I take you through everything you need to know,
    step-by-step, nice and easy. As you’re about to find out, it really is fun to
    program.  ## Adding JavaScript Code to a Web Page'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在本章中，你将学习一些有用的JavaScript基础知识。即使你之前从未编程过，也不用担心。我会一步一步带你了解所有需要知道的内容，简单易懂。正如你将会发现的那样，编程其实非常有趣。##
    将JavaScript代码添加到网页
- en: Okay, it’s time to roll up your sleeves, crack your knuckles, and start coding.
    This section describes the standard procedure for constructing and testing a script
    and takes you through a couple of examples.
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 好的，现在是时候挽起袖子，活动一下手指，开始编写代码了。本节介绍了构建和测试脚本的标准程序，并带你完成一些示例。
- en: '### The `<script>` tag'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '### `<script>`标签'
- en: 'The basic container for a script is, naturally enough, the HTML `<script>`
    tag and its associated `</script>` end tag:'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 脚本的基本容器自然就是HTML的`<script>`标签及其对应的`</script>`结束标签：
- en: '`<script> JavaScript statements go here </script>`  ### Where do you put the
    `<script>` tag?'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<script> JavaScript语句写在这里 </script>` ### `<script>`标签放在哪儿？'
- en: 'With certain exceptions, it doesn’t matter a great deal where you put your
    `<script>` tag. Some people place the tag between the page’s `</head>` and `<body>`
    tags. The HTML standard recommends placing the `<script>` tag within the page
    header (that is, between `<head>` and `</head>`), so that’s the style I use in
    this book:'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 除了一些特定的例外情况，`<script>`标签放置的位置并不特别重要。有些人将标签放在页面的`</head>`和`<body>`标签之间。HTML标准建议将`<script>`标签放在页面头部（即`<head>`和`</head>`之间），因此我在本书中使用的是这种风格：
- en: '```html'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '```html'
- en: 'Here are the exceptions to the put-your-script-anywhere technique:'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下是放置脚本的任意位置的例外情况：
- en: If your script is designed to write data to the page, the `<script>` tag must
    be positioned within the page body (that is, between the `<body>` and `</body>`
    tags) in the exact position where you want the text to appear.
  id: totrans-15
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你的脚本需要向页面写入数据，则`<script>`标签必须放在页面的主体部分（即`<body>`和`</body>`之间），并且位置要精确到你希望文本出现的位置。
- en: If your script refers to an item on the page (such as a form object), the script
    must be placed `after` that item.
  id: totrans-16
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你的脚本引用了页面上的某个元素（例如一个表单对象），则脚本必须放在该元素之后。
- en: With many HTML tags, you can add one or more JavaScript statements as attributes
    directly within the tag.
  id: totrans-17
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 对于许多HTML标签，你可以直接在标签内作为属性添加一个或多个JavaScript语句。
- en: '![Remember](images/remember.png) It’s perfectly acceptable to insert multiple
    `<script>` tags within a single page, as long as each one has a corresponding
    `</script>` end tag, and as long as you don’t put one `<script>` block within
    another one.  ### Example #1: Displaying a message to the user'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Remember](images/remember.png) 完全可以在单个页面中插入多个`<script>`标签，只要每个标签都有对应的`</script>`结束标签，并且不要把一个`<script>`块放在另一个`<script>`块中。###
    示例 #1：向用户显示消息'
- en: 'You’re now ready to construct and try out your first script. This example shows
    you the simplest of all JavaScript actions: displaying a basic message to the
    user. The following code shows the script within an HTML file:'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在你已经准备好构建并尝试你的第一个脚本了。这个示例展示了所有JavaScript动作中最简单的一种：向用户显示基本消息。以下代码展示了在HTML文件中的脚本：
- en: '```html'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '```html'
- en: As shown in here, place the script within the header of a page, save the file,
    and then open the HTML file within your browser.
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如此处所示，将脚本放在页面的头部，保存文件后，在浏览器中打开HTML文件。
- en: 'This script consists of just a single line:'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这个脚本只有一行：
- en: '`alert("Hello JavaScript World!");`'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`alert("Hello JavaScript World!");`'
- en: This is called a `statement`，and each statement is designed to perform a single
    JavaScript task. Your scripts will range from simple programs with just a few
    statements to huge projects consisting of hundreds of statements.
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这叫做`语句`，每个语句的设计目的是执行一个特定的JavaScript任务。你的脚本可以从只有几个语句的简单程序，到由数百个语句组成的庞大项目不等。
- en: You may be wondering about the semicolon (`;`) that appears at the end of the
    statement. Good eye. You use the semicolon to mark the end of each of your JavaScript
    statements.
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你可能在想，语句末尾的分号（`;`）是什么意思。观察得很仔细。你用分号来标记每个JavaScript语句的结束。
- en: In the example, the statement runs the JavaScript `alert()` method, which displays
    to the user whatever message is enclosed within the parentheses (which could be
    a welcome message, an announcement of new features on your site, an advertisement
    for a promotion, and so on). [Figure 1-1](#c01-fig-0001) shows the message that
    appears when you open the file.
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个示例中，语句运行JavaScript的`alert()`方法，它会显示出括号内的任何消息（这可能是欢迎信息、网站的新功能公告、促销广告等）。[图1-1](#c01-fig-0001)展示了打开文件时出现的消息。
- en: '![A snapshot of an alert message. The message reads, paulmcfederies.com says
    Hello JavaScript World. The OK option is given below.](images/9781394263219-fg0101.png)'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![一个警告消息的截图。消息内容为，paulmcfederies.com说你好，JavaScript世界。下方是确定按钮。](images/9781394263219-fg0101.png)'
- en: '[FIGURE 1-1:](#rc01-fig-0001) This “alert” message appears when you open the
    HTML file containing the example script.'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[图1-1：](#rc01-fig-0001) 当你打开包含示例脚本的HTML文件时，会出现这个“警告”信息。'
- en: How did the browser know to run the JavaScript statement? When a browser processes
    (`parses`，in the vernacular) a page, it basically starts at the beginning of the
    HTML file and works its way down, one line at a time. If it trips over a `<script>`
    tag, it knows one or more JavaScript statements are coming, and it automatically
    executes those statements, in order, as soon as it reads them. The exception is
    when JavaScript statements are enclosed within a `function`，which I explain in
    [Chapter 5](c05.xhtml).
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 浏览器是怎么知道要运行这个JavaScript语句的呢？当浏览器处理（在日常语言中叫做“解析”）一个页面时，它基本上是从HTML文件的开头开始，逐行向下执行。如果它遇到一个`<script>`标签，它就知道接下来会有一个或多个JavaScript语句，然后它会按照顺序自动执行这些语句，直到读取完毕。唯一的例外是当JavaScript语句被包含在`function`中时，我会在[第5章](c05.xhtml)中解释这一点。
- en: '![Warning](images/warning.png) One of the cardinal rules of JavaScript programming
    is “one statement, one line.” That is, each statement must appear on only a single
    line, and there should be no more than one statement on each line. I said “should”
    in the second part of the previous sentence because it is possible to put multiple
    statements on a single line, as long as you separate each statement with a semicolon
    (`;`). There are rare times when it’s necessary to have two or more statements
    on one line, but you should avoid it for the bulk of your programming because
    multiple-statement lines are difficult to read and to troubleshoot.  ### Example
    #2: Writing text to the page'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![警告](images/warning.png) JavaScript编程的基本规则之一是“每行一个语句”。也就是说，每个语句必须只出现在单独的一行上，每行不能有多个语句。我在前一句的第二部分用了“应该”一词，因为你是可以将多个语句放在同一行的，只要你用分号（`;`）将它们分开。在某些情况下，确实有必要将两个或更多语句写在同一行，但你应该避免这样做，因为多语句行不容易阅读和调试。###
    示例 #2：将文本写入页面'
- en: 'One of JavaScript’s most powerful features is the capability to write text
    and even HTML tags and CSS rules to the web page on-the-fly. That is, the text
    (or whatever) gets inserted into the page when a web browser loads the page. What
    good is that? For one thing, it’s ideal for time-sensitive data. For example,
    you may want to display the date and time that a web page was last modified so
    that visitors know how old (or new) the page is. Here’s some code that shows just
    such a script:'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: JavaScript最强大的功能之一是能够动态地将文本甚至HTML标签和CSS规则写入网页。也就是说，文本（或其他内容）会在网页加载时插入到页面中。这有什么好处呢？首先，它非常适合时间敏感的数据。例如，你可能想要显示网页最后修改的日期和时间，以便访客知道页面的更新情况（是旧的还是新的）。下面是展示这种脚本的代码：
- en: '`<html lang="en"> <head> <meta charset="utf-8"> <title>Writing Data to the
    Page</title> </head> <body> This is a regular line of text.<br> <script> document.write("Last
    modified: " + document.lastModified) </script> <br>This is another line of regular
    text. </body> </html>`'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<html lang="en"> <head> <meta charset="utf-8"> <title>Writing Data to the
    Page</title> </head> <body> 这是普通的文本行。<br> <script> document.write("Last modified:
    " + document.lastModified) </script> <br>这是另一行普通文本。 </body> </html>`'
- en: Notice how the script appears within the body of the HTML document, which is
    necessary whenever you want to write data to the page. [Figure 1-2](#c01-fig-0002)
    shows the result.
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 注意脚本是如何出现在HTML文档的主体部分中的，这是每当你想将数据写入页面时必须做的。[图1-2](#c01-fig-0002)展示了结果。
- en: '![A snapshop displays a page, writing data to the page. The text displays the
    date and time the file.](images/9781394263219-fg0102.png)'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![一个快照显示了一个页面，正在向页面写入数据。文本显示了文件的日期和时间。](images/9781394263219-fg0102.png)'
- en: '[FIGURE 1-2:](#rc01-fig-0002) When you open the file, the text displays the
    date and time the file was last modified.'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[图 1-2:](#rc01-fig-0002) 当你打开文件时，文本会显示文件最后修改的日期和时间。'
- en: 'This script makes use of the `document` object, which is a built-in JavaScript
    construct that refers to whatever HTML file (document) the script resides in (check
    out [Chapter 6](c06.xhtml) for more about the `document` object). The `document.write()`
    statement tells the browser to insert whatever is within the parentheses to the
    web page. The `document.lastModified` portion returns the date and time the file
    was last changed and saved.  ## What You Need to Get Started'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '这个脚本利用了 `document` 对象，这是一个内置的 JavaScript 构造，指向脚本所在的 HTML 文件（文档）（更多关于 `document`
    对象的内容，请查看[第六章](c06.xhtml)）。`document.write()` 语句告诉浏览器将括号内的内容插入到网页中。`document.lastModified`
    部分返回文件最后修改并保存的日期和时间。 ## 开始所需的条件'
- en: 'One of the nicest things about `HTML` and `CSS` is that the hurdles you have
    to leap to get started are not only short but few in number. In fact, you really
    need only two things, both of which are free: a text editor to enter the text,
    tags, and properties; and a browser to view the results. (You’ll also need a web
    server to host the finished pages, but the server isn’t necessary when you’re
    creating the pages.) Yes, there are high-end text editors and fancy graphics programs,
    but these fall into the “Bells and Whistles” category; you can create perfectly
    respectable web pages without them.'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`HTML` 和 `CSS` 最棒的地方之一就是，你开始时需要跨越的障碍不仅低，而且很少。实际上，你只需要两样东西，它们都是免费的：一个文本编辑器，用来输入文本、标签和属性；一个浏览器，用来查看结果。（当然，你还需要一个
    web 服务器来托管完成的页面，但在创建页面时，服务器并不是必须的。）是的，也有一些高端的文本编辑器和精美的图形程序，但它们属于“花里胡哨”的范畴；你完全可以在没有它们的情况下创建相当不错的网页。'
- en: 'The basic requirements for JavaScript programming are exactly the same as for
    HTML: a text editor and a browser. Again, programs are available to help you write
    and test your scripts, but you don’t need them.  ## Dealing with Two Exceptional
    Cases'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 'JavaScript 编程的基本要求与 HTML 完全相同：一个文本编辑器和一个浏览器。同样，也有一些程序可以帮助你编写和测试脚本，但你并不需要它们。  ##
    处理两个特殊情况'
- en: 'In this book, I make a couple of JavaScript assumptions related to the people
    who’ll be visiting the pages you post to the web:'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在本书中，我做了一些与访问你发布的网页的用户相关的 JavaScript 假设：
- en: Those people have JavaScript enabled in their web browser.
  id: totrans-40
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 这些人已经在他们的浏览器中启用了 JavaScript。
- en: Those people are using a relatively up-to-date version of a modern web browser,
    such as `Chrome` , `Edge` , `Safari` , or `Firefox`.
  id: totrans-41
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 这些人使用的是现代网页浏览器的相对较新版本，比如 `Chrome`、`Edge`、`Safari` 或 `Firefox`。
- en: These are pretty safe assumptions, but it pays to be a bit paranoid and wonder
    how you may handle the teensy percentage of people who don’t pass one or both
    tests.
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这些假设是相当安全的，但也值得保持一些警觉，想想如何应对那一小部分不符合一个或两个测试的用户。
- en: '### Handling browsers with JavaScript turned off'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '### 处理关闭 JavaScript 的浏览器'
- en: You don’t have to worry about web browsers not being able to handle JavaScript,
    because all modern browsers have supported JavaScript for a very long time. You
    may, however, want to worry about people who don’t support JavaScript. Although
    rare, some folks have turned off their browser’s JavaScript functionality. Why
    would someone do such a thing? Many people disable JavaScript because they’re
    concerned about security, they don’t want cookies written to their hard drives,
    and so on.
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你不必担心网页浏览器无法处理 JavaScript，因为所有现代浏览器都已经支持 JavaScript 很长时间了。然而，你可能需要关注那些不支持 JavaScript
    的人。虽然这种情况很少见，但有些人会关闭浏览器的 JavaScript 功能。为什么有人会这样做呢？很多人禁用 JavaScript 是因为他们担心安全问题，不希望在硬盘上写入
    cookies 等原因。
- en: 'To handle these iconoclasts, place the `<noscript>` tag within the body of
    the page:'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为了处理这些反叛者，可以将 `<noscript>` 标签放置在页面的主体中：
- en: '`<noscript> <p> Hey, your browser has JavaScript turned off! </p> <p> Okay,
    cool, perhaps you''ll prefer this <a href="no-js.html">non-JavaScript version</a>
    of the page. </p> </noscript>`'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<noscript> <p> 嘿，你的浏览器已经关闭了 JavaScript！ </p> <p> 好吧，也许你更喜欢这个 <a href="no-js.html">非
    JavaScript 版本</a> 的页面。 </p> </noscript>`'
- en: If the browser has JavaScript enabled, the browser doesn’t display any of the
    text within the `<noscript>` tag. However, if JavaScript is disabled, the browser
    displays the text and tags within the `<noscript>` tag to the user.
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果浏览器启用了JavaScript，则浏览器不会显示`<noscript>`标签内的任何文本。然而，如果JavaScript被禁用，浏览器会向用户显示`<noscript>`标签内的文本和标签。
- en: 'To test your site with JavaScript turned off, here are the techniques to use
    in some popular browsers:'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 若要在关闭JavaScript的情况下测试你的网站，以下是在一些流行浏览器中使用的技术：
- en: '`**Chrome (desktop):**` Open Settings, click Privacy and Security, click Site
    Settings, click JavaScript, and then select the Don’t Allow Sites to Use JavaScript
    option.'
  id: totrans-49
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`**Chrome (桌面版):**` 打开设置，点击隐私与安全，点击站点设置，点击JavaScript，然后选择不允许站点使用JavaScript选项。'
- en: '`**Chrome (Android):**` Open Settings, tap Site Settings, tap JavaScript, and
    then tap the JavaScript switch to off.'
  id: totrans-50
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`**Chrome (Android):**` 打开设置，点击站点设置，点击JavaScript，然后将JavaScript开关关闭。'
- en: '`**Edge:**` Open Settings, click the Settings menu, click Cookies and Site
    Permissions, click JavaScript, and then click the Allowed switch to off.'
  id: totrans-51
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`**Edge:**` 打开设置，点击设置菜单，点击Cookies和站点权限，点击JavaScript，然后将允许开关关闭。'
- en: '`**Safari (macOS):**` Open Settings, click the Advanced tab, select the Show
    Develop Menu in Menu Bar, and then close Settings. Choose `Develop ⇒ Disable JavaScript`.'
  id: totrans-52
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`**Safari (macOS):**` 打开设置，点击高级标签，选择在菜单栏显示开发菜单，然后关闭设置。选择`开发 ⇒ 禁用JavaScript`。'
- en: '`**Safari (iOS or iPadOS):**` Open Settings, tap Safari, tap Advanced, and
    then tap the JavaScript switch to off.'
  id: totrans-53
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`**Safari (iOS或iPadOS):**` 打开设置，点击Safari，点击高级，然后将JavaScript开关关闭。'
- en: '`**Firefox (desktop):**` In the Address bar, type `about:config` and press
    Enter or Return. If Firefox displays a warning page, click Accept the Risk and
    Continue to display the Advanced Preferences page. In the Search Preference Name
    box, type `javascript`. In the search results, look for the `javascript.enabled`
    preference. On the far right of that preference, click the Toggle button to turn
    the value of the preference from `true` to `false`.  ### Handling very old browsers'
  id: totrans-54
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`**Firefox (桌面版):**` 在地址栏中输入`about:config`并按回车。如果Firefox显示警告页面，点击接受风险并继续，以显示高级偏好设置页面。在搜索偏好设置名称框中输入`javascript`。在搜索结果中，查找`javascript.enabled`偏好设置。在该偏好设置的最右侧，点击切换按钮，将该偏好设置的值从`true`切换为`false`。###
    处理非常旧的浏览器'
- en: 'In this book, you learn the version of JavaScript called `ECMAScript 2015`,
    also known as `ECMAScript 6`, or just `ES6`。 Why this version, in particular,
    and not any of the later versions? Two reasons:'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 本书中你将学习一种名为`ECMAScript 2015`的JavaScript版本，也被称为`ECMAScript 6`，或简称`ES6`。为什么特别选择这个版本，而不是后续版本？有两个原因：
- en: '`ES6` has excellent browser support, with more than 98 percent of all current
    browsers supporting the features released in `ES 6`。 Later versions of JavaScript
    have less support.'
  id: totrans-56
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`ES6`具有出色的浏览器支持，超过98%的当前浏览器支持`ES6`中发布的特性。后续版本的JavaScript支持较少。'
- en: '`ES6` has everything you need to add all kinds of useful and fun dynamic features
    to your pages. Unless you’re a professional programmer, the features released
    in subsequent versions of JavaScript are way beyond what you need.'
  id: totrans-57
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`ES6`包含了你所需要的一切，可以为你的页面添加各种有用且有趣的动态功能。除非你是专业程序员，否则后续版本的JavaScript所发布的特性远超你所需。'
- en: Okay, so what about that couple of percent of browsers that don’t support `ES6`?
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 那么，剩下的那几乎不支持`ES6`的浏览器该怎么办呢？
- en: First, know that the number of browsers that choke on ES6 features is getting
    smaller every day。 Sure, it’s 2 percent now (about 1.7 percent, actually), but
    it will be 1 percent in six months, a 0.5 percent in a year, and so on until the
    numbers just get too small to measure。
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 首先，要知道不支持ES6特性的浏览器数量正在逐渐减少。现在虽然是2%（实际上是1.7%），但六个月后会降至1%，一年后降至0.5%，依此类推，直到这个比例小到无法测量。
- en: Second, the percentage of browsers that don’t support ES6 varies by region (it’s
    higher in many countries in Africa, for example) and by environment。 Most of the
    people running browsers that don’t fully support ES6 are using Internet Explorer
    11, and most of those people are in situations in which they can’t upgrade (some
    corporate environments, for example)。
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 其次，不支持ES6的浏览器百分比因地区而异（例如，许多非洲国家的比例较高），也与环境有关。大多数不完全支持ES6的浏览器用户都在使用Internet Explorer
    11，而且这些用户大多数处于无法升级的环境中（例如某些公司环境）。
- en: 'If luck has it that your web pages draw an inordinate share of these older
    browsers, you may need to eschew the awesomeness of ES6 in favor of the tried-and-true
    features of ECMAScript 5。 To that end, as I introduce each new JavaScript feature,
    I point out those that arrived with ES6 and let you know if there’s a simple fallback
    or workaround (known as a `polyfill` in the JavaScript trade) if you prefer to
    use ES5.  ## Commenting Your Code'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果幸运的话，你的网站可能会有较多的老旧浏览器访问，那么你可能需要放弃 ES6 的一些炫酷特性，转而使用更为稳妥的 ECMAScript 5 特性。为此，每当我介绍新的
    JavaScript 特性时，我都会指出哪些是 ES6 新增的，并告诉你是否有简单的回退或解决方法（在 JavaScript 行业中称为 `polyfill`），如果你倾向于使用
    ES5。## 注释你的代码
- en: A script that consists of just a few lines is usually easy to read and understand。
    However, your scripts won’t stay that simple for long, and these longer and more
    complex creations will be correspondingly more difficult to read。 (This difficulty
    will be particularly acute if you’re looking at the code a few weeks or months
    after you first coded it。) To help you decipher your code, it’s good programming
    practice to make liberal use of comments throughout the script。 A `comment` is
    text that describes or explains a statement or group of statements。 Comments are
    ignored by the browser, so you can add as many as you deem necessary。
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 由几行组成的脚本通常很容易阅读和理解。然而，你的脚本不会一直保持如此简单，这些较长且更复杂的代码会变得更加难以阅读。（如果你在几周或几个月后回过头来看这些代码，这种困难尤其明显。）为了帮助你解读代码，良好的编程实践是广泛使用注释。`注释`是描述或解释某个语句或语句组的文字。浏览器会忽略注释，因此你可以根据需要添加尽可能多的注释。
- en: 'For short, single-line comments, use the double-slash (`//`)。 Put the `//`
    at the beginning of the line, and then type your comment after it。 Here’s an example:'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 对于简短的单行注释，使用双斜杠 (`//`)。将 `//` 放在行的开头，然后在它后面写上你的注释。以下是一个示例：
- en: '`// Display the date and time the page was last modified document.write("This
    page was last modified on " + document.lastModified);`'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 显示页面上次修改的日期和时间 document.write("This page was last modified on " + document.lastModified);`'
- en: 'You can also use `//` comments for two or three lines of text, as long as you
    start each line with `//`。 If you have a comment that stretches beyond that, however,
    you’re better off using multiple-line comments that begin with the `/*` characters
    and end with the `*/` characters。 Here’s an example:'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你也可以使用 `//` 注释来处理两三行文字，只要每一行都以 `//` 开头。如果你的注释超过了这一范围，那么最好使用多行注释，这些注释以 `/*` 开始，并以
    `*/` 结束。以下是一个示例：
- en: '`/* This script demonstrates JavaScript''s ability to write text to the web
    page by using the document.write() method to display the date and time the web
    page file was last modified. This script is Copyright Paul McFedries. */`'
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`/* 该脚本演示了 JavaScript 使用 document.write() 方法将文本写入网页，显示网页文件上次修改的日期和时间。此脚本版权归
    Paul McFedries 所有。*/`'
- en: '![Warning](images/warning.png) Although it’s fine to add quite a few comments
    when you’re just starting out, you don’t have to add a comment to everything。
    If a statement is trivial or its purpose is glaringly obvious, forget the comment
    and move on。  ## Moving to External JavaScript Files'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![警告](images/warning.png) 虽然在刚开始学习时添加一些评论是可以的，但你不必对每一行都加上评论。如果某个语句是微不足道的，或者它的目的显而易见，那么就省略评论，继续前进。##
    转向外部 JavaScript 文件'
- en: Earlier in this chapter, I talk about adding JavaScript code to a web page by
    inserting the `<script>` and `</script>` tags into the page header (that is, between
    the `<head>` and `</head>` tags), or sometimes into the page body (that is, between
    the `<body>` and `</body>` tags). You then write your code between the `<script>`
    and `</script>` tags.
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在本章前面，我讲到了通过在网页的头部（即`<head>`和`</head>`标签之间）插入`<script>`和`</script>`标签来将 JavaScript
    代码添加到网页中，或者有时将其插入到网页的主体部分（即`<body>`和`</body>`标签之间）。然后，你可以在`<script>`和`</script>`标签之间编写代码。
- en: Putting a script inside the page in this way isn’t a problem if the script is
    relatively short. However, if your script (or scripts) take up dozens or hundreds
    of lines, your HTML code can look cluttered. Another problem you may run into
    is needing to use the same code on multiple pages. Sure, you can just copy the
    code into each page that requires it, but if you make changes down the road, you
    need to update every page that uses the code.
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果脚本较短，直接将脚本放入页面中并不会造成问题。然而，如果你的脚本（或多个脚本）有几十行或几百行，那么 HTML 代码看起来可能会显得杂乱无章。另一个可能遇到的问题是需要在多个页面上使用相同的代码。你当然可以将代码复制到每个需要的页面中，但如果以后修改了代码，那么你就需要更新所有使用该代码的页面。
- en: The solution to both problems is to move the code out of the HTML file and into
    an external JavaScript file. Moving the code reduces the JavaScript presence in
    the HTML file to a single line (as you’ll learn shortly) and means that you can
    update the code by editing only the external file.
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 解决这两个问题的方法是将代码从 HTML 文件中移到外部 JavaScript 文件中。将代码移出可以将 HTML 文件中的 JavaScript 代码减少到一行（正如你很快会学到的那样），并且意味着你只需编辑外部文件即可更新代码。
- en: 'Here are some things to note about using an external JavaScript file:'
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里有一些关于使用外部 JavaScript 文件的注意事项：
- en: The file must use a plain text format.
  id: totrans-72
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 该文件必须使用纯文本格式。
- en: Use the `.js` extension when you name the file.
  id: totrans-73
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 命名文件时，请使用 `.js` 扩展名。
- en: Don’t use the `<script>` tag within the file. Just enter your statements exactly
    as you would within an HTML file.
  id: totrans-74
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 不要在文件中使用 `<script>` 标签。只需像在 HTML 文件中一样直接输入你的语句。
- en: The rules for when the browser executes statements within an external file are
    identical to those used for statements within an HTML file. That is, statements
    outside of functions are executed automatically when the browser comes across
    your file reference, and statements within a function aren’t executed until the
    function is called. (Not sure what a “function” is? You get the full scoop in
    [Chapter 5](c05.xhtml).)
  id: totrans-75
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 浏览器执行外部文件中的语句的规则与 HTML 文件中的语句相同。也就是说，函数外的语句在浏览器遇到文件引用时会自动执行，而函数中的语句则需要在函数被调用时才会执行。（不确定什么是“函数”？你将在[第
    5 章](c05.xhtml)中学到所有相关内容。）
- en: 'To let the browser know that an external JavaScript file exists, add the `src`
    attribute to the `<script>` tag. For example, if the external file is named `myscripts.js`,
    your `<script>` tag is set up as follows:'
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为了让浏览器知道外部 JavaScript 文件的存在，可以在 `<script>` 标签中添加 `src` 属性。例如，如果外部文件名为 `myscripts.js`，则
    `<script>` 标签设置如下：
- en: '`<script src="myscripts.js">`'
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<script src="myscripts.js">`'
- en: 'This example assumes that the `myscripts.js` file is in the same directory
    as the HTML file. If the file resides in a different directory, adjust the `src`
    value accordingly. For example, if the `myscripts.js` file is in a subdirectory
    named `scripts`, you use this:'
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这个例子假设 `myscripts.js` 文件与 HTML 文件位于同一目录中。如果文件位于不同目录，请相应调整 `src` 的值。例如，如果 `myscripts.js`
    文件位于名为 `scripts` 的子目录中，则应使用以下方式：
- en: '`<script src="scripts/myscripts.js">`'
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<script src="scripts/myscripts.js">`'
- en: 'You can even specify a file from another site (presumably your own!) by specifying
    a full URL as the `src` value:'
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你甚至可以通过指定完整的 URL 作为 `src` 值来引用其他网站的文件（大概是你自己的网站！）：
- en: '`<script src="http://www.host.com/myscripts.js">`'
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<script src="http://www.host.com/myscripts.js">`'
- en: 'As an example, the following code shows a one-line external JavaScript file
    named `footer.js`:'
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 作为示例，以下代码展示了一个名为 `footer.js` 的一行外部 JavaScript 文件：
- en: '`document.write("This page is Copyright " + new Date().getFullYear());`'
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`document.write("This page is Copyright " + new Date().getFullYear());`'
- en: 'This statement writes the text “Copyright” followed by the current year. (I
    know: This code looks like some real gobbledygook right now. Don’t sweat it, because
    you’ll learn exactly what’s going on here when I discuss the JavaScript Date object
    in [Chapter 8](c08.xhtml).)'
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这行代码写入“Copyright”字样，后跟当前年份。（我知道：现在这段代码看起来像是一些真正的乱码。别担心，因为当我在[第 8 章](c08.xhtml)讨论
    JavaScript Date 对象时，你将确切了解这里发生了什么。）
- en: 'The following code shows an HTML file that includes a reference for the external
    JavaScript file:'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下代码展示了一个包含外部 JavaScript 文件引用的 HTML 文件：
- en: '````html'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '````html'
- en: When you load the page, the browser runs through the HTML line by line. When
    it gets to the `<footer>` tag, it notices the external JavaScript file that’s
    referenced by the `<script>` tag. The browser loads that file and then runs the
    code within the file, which writes the Copyright message to the page, as shown
    in [Figure 1-3](#c01-fig-0003).
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当你加载页面时，浏览器会逐行解析 HTML。当它遇到 `<footer>` 标签时，它会注意到 `<script>` 标签引用的外部 JavaScript
    文件。浏览器加载该文件后，会执行文件中的代码，向页面写入版权信息，如[图 1-3](#c01-fig-0003)所示。
- en: '![A snapshot displays the page that uses an external JavaScript file to display
    a footer message.](images/9781394263219-fg0103.png)'
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![这张截图展示了使用外部 JavaScript 文件来显示页脚信息的页面。](images/9781394263219-fg0103.png)'
- en: '[FIGURE 1-3:](#rc01-fig-0003) This page uses an external JavaScript file to
    display a footer message.'
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[图 1-3：](#rc01-fig-0003) 该页面使用外部 JavaScript 文件来显示页脚信息。'
