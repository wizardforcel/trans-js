- en: The Base Case
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: Let’s continue our walk-through of the `countdown` function. We’ll skip a few
    steps for brevity…
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Step 21: We call `countdown(0)`.'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Step 22: We print `number` (that is, `0`) to the console.'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Step 23: We call `countdown(-1)`.'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Step 24: We print `number` (that is, `-1`) to the console.'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Uh-oh. As you can see, our solution isn’t perfect, as we’ll end up infinitely
    printing negative numbers.
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: To perfect our solution, we need a way to end our countdown at `0` and prevent
    the recursion from continuing on forever.
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'We can solve this problem by adding a conditional statement that ensures that
    if `number` is currently `0`, we don’t call `countdown()` again:'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function` `countdown(number) {` |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `console.log(number);` |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (number === 0) { |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return`; |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } `else` { |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `countdown(number - 1);` |'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
- en: Now when `number` is `0`, our code will not call the `countdown()` function
    again but instead just return, thereby preventing another call of `countdown()`.
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In recursion terminology, the case in which our function will not recurse is
    known as the base case. So `0` is the base case for our `countdown()` function.
    Again, every recursive function needs at least one base case to prevent it from
    calling itself indefinitely.
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
