- en: Hash Tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Most programming languages include a data structure called a hash table, and
    it has an amazing superpower: fast reading. Note that hash tables are called by
    different names in various programming languages. In JavaScript they’re called
    objects, and other languages call them hashes, maps, hash maps, dictionaries,
    or associative arrays. We’ll refer to them as hash tables since that’s a common
    universal way to refer to this data structure.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of the menu as implemented with a hash table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | ​**const**​ menu = { ​*"french fries"*​: 0.75, ​*"hamburger"*​: 2.5,
    |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​*"hot dog"*​: 1.5, ​*"soda"*​: 0.6 }; |'
  prefs: []
  type: TYPE_TB
- en: A hash table is a list of paired values. The first item in each pair is called
    the key, and the second item is called the value. In a hash table, the key and
    value have some significant association with one another. In this example, the
    string "french fries" is the key, and 0.75 is the value. They are paired together
    to indicate that french fries cost 75 cents.
  prefs: []
  type: TYPE_NORMAL
- en: 'In JavaScript, you can look up a key’s value using this syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | menu[​*"french fries"*​]; |'
  prefs: []
  type: TYPE_TB
- en: This would return the value 0.75\. If we tried to look up a value that doesn’t
    exist with the hash table, we’d get back undefined.
  prefs: []
  type: TYPE_NORMAL
- en: Looking up a value in a hash table has an efficiency of O(1) on average, as
    it usually takes just one step. Let’s see why.
  prefs: []
  type: TYPE_NORMAL
