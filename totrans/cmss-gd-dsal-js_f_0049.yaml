- en: Selection Sort
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous chapter, we explored a sorting algorithm known as Bubble Sort,
    which had an efficiency of O(N²). We’re now going to dig into another sorting
    algorithm called Selection Sort and see how it measures up to Bubble Sort.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps of Selection Sort are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We check each cell of the array from left to right to determine which value
    is least. As we move from cell to cell, we keep track of the lowest value we’ve
    encountered so far. (We’ll do this by storing its index in a variable.) If we
    encounter a cell that contains a value that is even lower than the one in our
    variable, we replace it so that the variable now points to the new index. See
    the following diagram:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![images/optimizing_code_with_and_without_big_o/set_of_four.png](images/optimizing_code_with_and_without_big_o/set_of_four.png)![images/optimizing_code_with_and_without_big_o/swap.png](images/optimizing_code_with_and_without_big_o/swap.png)![images/optimizing_code_with_and_without_big_o/post_swap.png](images/optimizing_code_with_and_without_big_o/post_swap.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Once we’ve determined which index contains the lowest value, we swap its value
    with the value we began the pass-through with. This would be index 0 in the first
    pass-through, index 1 in the second pass-through, and so on. The diagram here
    illustrates making the swap of the first pass-through.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each pass-through consists of Steps 1 and 2\. We repeat the pass-throughs until
    we reach a pass-through that would start at the end of the array. By this point,
    the array will have been fully sorted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
