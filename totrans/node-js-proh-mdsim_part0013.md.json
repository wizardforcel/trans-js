["```jsjavascript\n\nconst mongoose = require('mongoose');\n\nconst userSchema = new mongoose.Schema({\n\nusername: { type: String, required: true, unique: true },\n\nemail: { type: String, required: true, unique: true },\n\npassword: { type: String, required: true },\n\n});\n\nconst User = mongoose.model('User', userSchema);\n\nmodule.exports = User;\n\n```", "```jsjavascript\n\nconst express = require('express');\n\nconst router = express.Router();\n\nconst bcrypt = require('bcrypt');\n\nconst User = require('../models/user');\n\n// User registration route\n\nrouter.post('/register', async (req, res) => {\n\nconst { username, email, password } = req.body;\n\ntry {\n\n// Check if the username or email already exists\n\nconst existingUser = await User.findOne({ $or: [{ username }, { email }] });\n\nif (existingUser) {\n\nreturn res.status(409).json({ error: 'Username or email already exists' });\n\n}\n\n// Hash the password\n\nconst hashedPassword = await bcrypt.hash(password, 10);\n\n// Create a new user\n\nconst newUser = new User({ username, email, password: hashedPassword });\n\nawait newUser.save();\n\nres.status(201).json({ message: 'User registered successfully' });\n\n} catch (error) {\n\nres.status(500).json({ error: 'An error occurred while registering the user' });\n\n}\n\n});\n\nmodule.exports = router;\n\n```", "```jsjavascript\n\nconst express = require('express');\n\nconst router = express.Router();\n\nconst bcrypt = require('bcrypt');\n\nconst jwt = require('jsonwebtoken');\n\nconst User = require('../models/user');\n\n// User login route\n\nrouter.post('/login', async (req, res) => {\n\nconst { username, password } = req.body;\n\ntry {\n\n// Check if the user exists\n\nconst user = await User.findOne({ username });\n\nif (!user) {\n\nreturn res.status(401).json({ error: 'Invalid username or password' });\n\n}\n\n// Compare the provided password with the stored hashed password\n\nconst passwordMatch = await bcrypt.compare(password, user.password);\n\nif\n\n(!passwordMatch) {\n\nreturn res.status(401).json({ error: 'Invalid username or password' });\n\n}\n\n// Generate a JWT token\n\nconst token = jwt.sign({ username: user.username }, 'your-secret-key');\n\nres.status(200).json({ token });\n\n} catch (error) {\n\nres.status(500).json({ error: 'An error occurred while logging in' });\n\n}\n\n});\n\nmodule.exports = router;\n\n```", "```jsjavascript\n\nconst jwt = require('jsonwebtoken');\n\n// Authentication middleware\n\nconst authenticate = (req, res, next) => {\n\nconst token = req.headers.authorization;\n\nif (!token) {\n\nreturn res.status(401).json({ error: 'Unauthorized' });\n\n}\n\ntry {\n\nconst decoded = jwt.verify(token, 'your-secret-key');\n\nreq.user = decoded.username;\n\nnext();\n\n} catch (error) {\n\nres.status(401).json({ error: 'Invalid token' });\n\n}\n\n};\n\nmodule.exports = authenticate;\n\n```", "```jsjavascript\n\nconst express = require('express');\n\nconst router = express.Router();\n\nconst Post = require('../models/post');\n\nconst authenticate = require('../middleware/auth');\n\n// Create post route (protected)\n\nrouter.post('/create', authenticate, (req, res) => {\n\n// Rest of the code\n\n});\n\n// Update post route (protected)\n\nrouter.put('/update/:postId', authenticate, (req, res) => {\n\n// Rest of the code\n\n});\n\n// Delete post route (protected)\n\nrouter.delete('/delete/:postId', authenticate, (req, res) => {\n\n// Rest of the code\n\n});\n\nmodule.exports = router;\n\n```"]