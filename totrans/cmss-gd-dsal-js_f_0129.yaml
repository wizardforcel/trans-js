- en: Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following exercises provide you with the opportunity to practice with fast
    sorting. The solutions to these exercises are found in the section [​*Chapter
    13*​](f_0218.xhtml#divide.and.conquer.in.turbo.mode.solutions).
  prefs: []
  type: TYPE_NORMAL
- en: Given an array of positive numbers, write a function that returns the greatest
    product of any three numbers. The approach of using three nested loops would clock
    in at O(N³), which is very slow. Use sorting to implement the function in a way
    that it computes at O(N log N) speed. (Some other implementations are even faster,
    but we’re focusing on using sorting as a technique to make code faster.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following function finds the missing number from an array of integers; that
    is, the array is expected to have all integers from 0 up to the array’s length,
    but one is missing. As examples, the array [5, 2, 4, 1, 0] is missing the number
    3, and the array [9, 3, 2, 5, 6, 7, 1, 0, 4] is missing the number 8.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here’s an implementation that is O(N²) (the clause if (!array.includes(number))
    is itself already O(N), since the computer needs to search the entire array to
    find number):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ​  | ​**function**​ findMissingNumber(array) { |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**for**​ (​**let**​ number = 0; number <= array.length; number += 1)
    { |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**if**​ (!array.includes(number)) { |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**return**​ number; |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | } |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | } |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  |  |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | ​**return**​ ​**null**​; |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ​  | } |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Use sorting to write a new implementation of this function that only takes O(N
    log N). (Some other implementations are even faster, but we’re focusing on using
    sorting as a technique to make code faster.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Write three different implementations of a function that finds the greatest
    number within an array. Write one function that is O(N²), one that is O(N log
    N), and one that is O(N).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copyright © 2024, The Pragmatic Bookshelf.
  prefs: []
  type: TYPE_NORMAL
