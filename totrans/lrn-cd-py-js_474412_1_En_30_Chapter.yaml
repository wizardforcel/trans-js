- en: © The Author(s), under exclusive license to Springer Fachmedien Wiesbaden GmbH,
    part of Springer Nature 2024J. L. ZuckarelliLearn coding with Python and JavaScript
    [https://doi.org/10.1007/978-3-658-42912-6_30](https://doi.org/10.1007/978-3-658-42912-6_30)
  prefs: []
  type: TYPE_NORMAL
- en: '30. Syntax, Comments, Code Style & Documentation: How Do I Make Sure That I
    (And Others) Still Understand My Program Later?'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Joachim L. Zuckarelli^([1](#Aff2)  )(1)München, GermanyOverview
  prefs: []
  type: TYPE_NORMAL
- en: Before we really get into programming with JavaScript, we want to prepare ourselves
    with some important questions about the design of the program code and—you will
    have guessed it already—the commenting of the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How identifiers for variables, functions and other objects are constructed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: how instructions are completed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: what style guides for the design of your JavaScript code are available for your
    orientation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: what types of comments you can use in JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 30.1 Design of the Program Code and Naming Conventions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Identifiers
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript is case-sensitive, i.e., it distinguishes between upper and lower
    case. Identifiers like those of variables, objects, and functions, may contain
    letters, digits, underscores (**_**), and dollar signs (**$**), but may not begin
    with a digit. In JavaScript, identifiers are encoded according to the Unicode
    scheme, which means that umlauts and other non-English letters are also allowed
    in identifiers. However, since these characters do not occur in most natural languages,
    it is recommended to do without them. If you were to post sample code on an internet
    forum to ask for help, the international audience might have trouble reproducing
    these characters if they wanted to edit your code. Think of how the situation
    would be if an Icelander named a variable **húsið1** (meaning **house1**), and
    you wanted to edit that code.
  prefs: []
  type: TYPE_NORMAL
- en: The first term in an identifier often starts with a lowercase letter in JavaScript,
    and the following terms then start with an uppercase letter (even if they are
    terms that are actually lowercase in natural language). A typical JavaScript identifier
    would be, for example, **isCustomerActive** or **startSave()**. This kind of writing,
    also called *camel case* because of the “humps” in the identifiers, may be unusual
    at first, but makes your program look distinctly “javascript-y” in the eyes of
    JavaScript programmers.
  prefs: []
  type: TYPE_NORMAL
- en: End of Statement and Statement Breaks
  prefs: []
  type: TYPE_NORMAL
- en: Statements in JavaScript *can* be terminated with a semicolon. If several statements
    are to be on one line, they *must* be separated by semicolons. Unlike some other
    languages, however, not every statement in JavaScript automatically ends at the
    end of a line. Instead, JavaScript checks without a semicolon at the end of the
    line whether the statement would make sense if it were continued on the following
    line. This strange feature can lead to unexpected and seemingly inexplicable behavior
    in individual cases. Therefore, we will always end statements with a semicolon
    here—knowing that some style guidelines for JavaScript recommend otherwise. The
    fact that we end statements with semicolons does not apply to those statements
    we execute in the JavaScript console, where the end of the statement is clearly
    marked by pressing the <RETURN> or <ENTER> key.
  prefs: []
  type: TYPE_NORMAL
- en: 'Statements can be wrapped, i.e., continued on the following line. However,
    line breaks *within strings are* not permitted. For example, the following wrapped
    output statement for the JavaScript console is syntactically correct:'
  prefs: []
  type: TYPE_NORMAL
- en: '**>** console.log(''Hello'',''World'')The following would also be permissible:**>**
    console.log(''Hello'', ''world'')'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since strings in JavaScript can also be joined with the plus operator, you
    could also write:'
  prefs: []
  type: TYPE_NORMAL
- en: '**>** console.log(''Hello''+ ''world'')'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the next output statement would not be allowed because it contains
    a break within a character string:'
  prefs: []
  type: TYPE_NORMAL
- en: '**>** console.log(''HelloWorld'')If you absolutely want to achieve a break
    within the string, you can create it with the backslash (**"\"**), which will
    not be output itself:**>** console.log(''Hello \World'')'
  prefs: []
  type: TYPE_NORMAL
- en: If you wrap, it is recommended that you indent the second line accordingly.
    In the book, program code is often wrapped to fit the page width. The program
    codes that you can download with the book are of course not subject to this restriction
    and therefore have less wrapping.
  prefs: []
  type: TYPE_NORMAL
- en: General Code Style
  prefs: []
  type: TYPE_NORMAL
- en: As with most other programming languages, smart developers have thought about
    how to format their JavaScript code so that it is clear and readable. The result
    is the style guides, of which there are several for JavaScript. They may well
    give quite different recommendations on one and the same topic, such as the question
    of the use of semicolons when closing statements.
  prefs: []
  type: TYPE_NORMAL
- en: Well-known JavaScript style guides include the *Google JavaScript Style Guide*
    (► [https://​google.​github.​io/​styleguide/​jsguide.​html](https://google.github.io/styleguide/jsguide.html)),
    the one from Airbnb (► [https://​github.​com/​airbnb/​javascript](https://github.com/airbnb/javascript)),
    and the *JavaScript Standard Style Guide* (► [https://​github.​com/​standard/​standard](https://github.com/standard/standard)),
    which—contrary to its name—by no means takes on an official role, as, for example,
    Python’s *Python Enhancement Proposal* (*PEP*) number 8 does. For some style guides,
    including the Standard Style Guide, there is even software, a *linter*, which
    can format the source code fully automatically so that it conforms to the style
    guide’s specifications.
  prefs: []
  type: TYPE_NORMAL
- en: We won’t follow any of these style guides in their entirety in this part of
    the book. Except in a professional environment, where you are working with a number
    of other developers, it is certainly not necessary to implement a style guide
    100%. Nevertheless, it’s a good idea to browse through some of the style guides
    and maybe pick up a thing or two.
  prefs: []
  type: TYPE_NORMAL
- en: 30.2 Comments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScript knows both single-line and multi-line comments. Single-line comments
    are introduced by **//** and identify everything to the right of it as a comment
    that is not processed by the interpreter. Multiline comments start with **/***
    and are terminated with ***/** (so the asterisks always face the comment text).
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples of comments could look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*/***Here comes a multi-line comment explaining**why the assignment a = 5 is
    necessary***/*a = 5;*// This assignment can be explained in a one-line comment*b
    = 10;c = 7; *// c must also be initialized with a meaningful value*'
  prefs: []
  type: TYPE_NORMAL
- en: The last comment is an *inline comment*, it is also syntactically permissible,
    but not appreciated because it is hard to read. If you use inline comments, make
    sure you leave some space (at least two spaces) between the end of the statement
    and the comment symbol, so that the comment stands out visually from the executable
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 30.3 Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter we have dealt with basic issues of JavaScript code design and
    commenting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Be sure to take the following points from this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Identifiers in JavaScript can contain letters, digits, the underscore character,
    and the dollar sign, but cannot begin with a digit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifiers are UTF-8 encoded and may therefore contain umlauts and other non-standard
    characters; however, their use is not recommended.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Typically, identifiers are written in lower case. In the case of identifiers
    composed of several terms, the following terms are each capitalized (“camel case”).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Semicolons at the end of a statement are not mandatory but recommended since
    JavaScript does not always automatically stop interpreting a statement at the
    end of a line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line breaks in code are allowed as long as they do not occur within a string.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the design of the code, which is an area of relative freedom in JavaScript,
    there are numerous guidelines that represent quite different views on various
    topics, including the *Google JavaScript Style Guide*, the *JavaScript Standard
    Style Guide* and the style guide of Airbnb.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript knows single and multiline comments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single-line comments start with **//** and mark everything to the right of it
    as a comment; they can also be used within a line of code (“inline”).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiline comments are placed between **/*** and ***/**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
