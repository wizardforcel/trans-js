- en: © The Author(s), under exclusive license to Springer Fachmedien Wiesbaden GmbH,
    part of Springer Nature 2024J. L. ZuckarelliLearn coding with Python and JavaScript
    [https://doi.org/10.1007/978-3-658-42912-6_30](https://doi.org/10.1007/978-3-658-42912-6_30)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © 作者，专有许可 Springer Fachmedien Wiesbaden GmbH，Springer Nature 的一部分 2024 J. L.
    Zuckarelli 《使用 Python 和 JavaScript 学习编码》[https://doi.org/10.1007/978-3-658-42912-6_30](https://doi.org/10.1007/978-3-658-42912-6_30)
- en: '30. Syntax, Comments, Code Style & Documentation: How Do I Make Sure That I
    (And Others) Still Understand My Program Later?'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 30. 语法、注释、代码风格与文档：如何确保我（以及其他人）以后还能理解我的程序？
- en: Joachim L. Zuckarelli^([1](#Aff2)  )(1)München, GermanyOverview
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Joachim L. Zuckarelli^([1](#Aff2) )(1)德国慕尼黑概述
- en: Before we really get into programming with JavaScript, we want to prepare ourselves
    with some important questions about the design of the program code and—you will
    have guessed it already—the commenting of the code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们真正开始使用 JavaScript 编程之前，我们需要先回答一些关于程序代码设计的重要问题——你已经猜到啦——就是代码的注释问题。
- en: 'In this chapter you will learn:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中你将学到：
- en: How identifiers for variables, functions and other objects are constructed
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量、函数和其他对象的标识符是如何构建的
- en: how instructions are completed
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何完成指令
- en: what style guides for the design of your JavaScript code are available for your
    orientation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有哪些样式指南可以帮助你设计 JavaScript 代码
- en: what types of comments you can use in JavaScript
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 JavaScript 中你可以使用哪些类型的注释
- en: 30.1 Design of the Program Code and Naming Conventions
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 30.1 程序代码的设计和命名规范
- en: Identifiers
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 标识符
- en: JavaScript is case-sensitive, i.e., it distinguishes between upper and lower
    case. Identifiers like those of variables, objects, and functions, may contain
    letters, digits, underscores (**_**), and dollar signs (**$**), but may not begin
    with a digit. In JavaScript, identifiers are encoded according to the Unicode
    scheme, which means that umlauts and other non-English letters are also allowed
    in identifiers. However, since these characters do not occur in most natural languages,
    it is recommended to do without them. If you were to post sample code on an internet
    forum to ask for help, the international audience might have trouble reproducing
    these characters if they wanted to edit your code. Think of how the situation
    would be if an Icelander named a variable **húsið1** (meaning **house1**), and
    you wanted to edit that code.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是区分大小写的，即它区分大写字母和小写字母。像变量、对象和函数的标识符可以包含字母、数字、下划线（**_**）和美元符号（**$**），但不能以数字开头。在
    JavaScript 中，标识符是按照 Unicode 编码的，这意味着变音符号和其他非英语字母也可以出现在标识符中。然而，由于这些字符在大多数自然语言中并不常见，建议尽量避免使用它们。如果你在互联网上发布示例代码寻求帮助，国际观众可能会遇到问题，如果他们想编辑你的代码时，很难复制这些字符。试想一下，如果一个冰岛人将变量命名为
    **húsið1**（意思是 **house1**），而你需要编辑这段代码，那会是什么情况。
- en: The first term in an identifier often starts with a lowercase letter in JavaScript,
    and the following terms then start with an uppercase letter (even if they are
    terms that are actually lowercase in natural language). A typical JavaScript identifier
    would be, for example, **isCustomerActive** or **startSave()**. This kind of writing,
    also called *camel case* because of the “humps” in the identifiers, may be unusual
    at first, but makes your program look distinctly “javascript-y” in the eyes of
    JavaScript programmers.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，标识符的第一个词通常以小写字母开头，后续的词则以大写字母开头（即使这些词在自然语言中通常是小写的）。一个典型的 JavaScript
    标识符可能是 **isCustomerActive** 或 **startSave()**。这种写法被称为 *驼峰命名法*，因为标识符中有类似“驼峰”的结构，刚开始可能不太习惯，但在
    JavaScript 程序员眼中，这会使你的程序看起来特别“JavaScript 风格”。
- en: End of Statement and Statement Breaks
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 语句的结束和语句断开
- en: Statements in JavaScript *can* be terminated with a semicolon. If several statements
    are to be on one line, they *must* be separated by semicolons. Unlike some other
    languages, however, not every statement in JavaScript automatically ends at the
    end of a line. Instead, JavaScript checks without a semicolon at the end of the
    line whether the statement would make sense if it were continued on the following
    line. This strange feature can lead to unexpected and seemingly inexplicable behavior
    in individual cases. Therefore, we will always end statements with a semicolon
    here—knowing that some style guidelines for JavaScript recommend otherwise. The
    fact that we end statements with semicolons does not apply to those statements
    we execute in the JavaScript console, where the end of the statement is clearly
    marked by pressing the <RETURN> or <ENTER> key.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中的语句*可以*以分号结束。如果多个语句位于同一行，它们*必须*用分号分隔。然而，与某些其他语言不同的是，并不是每个 JavaScript
    语句在行尾自动以分号结束。JavaScript 会检查，如果语句在行尾没有分号，继续到下一行时是否语法上仍然正确。这一特性可能导致在某些情况下出现意外且难以解释的行为。因此，在这里我们始终使用分号结束语句——尽管一些
    JavaScript 风格指南建议不同。我们使用分号结束语句的做法并不适用于我们在 JavaScript 控制台中执行的语句，因为在控制台中，语句的结束由按下
    <RETURN> 或 <ENTER> 键明确标记。
- en: 'Statements can be wrapped, i.e., continued on the following line. However,
    line breaks *within strings are* not permitted. For example, the following wrapped
    output statement for the JavaScript console is syntactically correct:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 语句可以换行，即可以在下一行继续。然而，字符串中的*换行是不允许的*。例如，下面这个用于 JavaScript 控制台的换行输出语句在语法上是正确的：
- en: '**>** console.log(''Hello'',''World'')The following would also be permissible:**>**
    console.log(''Hello'', ''world'')'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**>** console.log(''Hello'',''World'') 以下的写法也是允许的：**>** console.log(''Hello'',
    ''world'')'
- en: 'Since strings in JavaScript can also be joined with the plus operator, you
    could also write:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 JavaScript 中的字符串也可以通过加号运算符连接，你也可以这样写：
- en: '**>** console.log(''Hello''+ ''world'')'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**>** console.log(''Hello''+ ''world'')'
- en: 'However, the next output statement would not be allowed because it contains
    a break within a character string:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，下一个输出语句将不被允许，因为它包含了字符串内的换行：
- en: '**>** console.log(''HelloWorld'')If you absolutely want to achieve a break
    within the string, you can create it with the backslash (**"\"**), which will
    not be output itself:**>** console.log(''Hello \World'')'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**>** console.log(''HelloWorld'') 如果你非要在字符串中实现换行，可以使用反斜杠（**"\"**）来创建，它本身不会被输出：**>**
    console.log(''Hello \World'')'
- en: If you wrap, it is recommended that you indent the second line accordingly.
    In the book, program code is often wrapped to fit the page width. The program
    codes that you can download with the book are of course not subject to this restriction
    and therefore have less wrapping.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你要换行，建议相应地缩进第二行。在书中，程序代码通常会换行以适应页面宽度。当然，你可以在书中下载的程序代码并不受此限制，因此换行会较少。
- en: General Code Style
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一般代码风格
- en: As with most other programming languages, smart developers have thought about
    how to format their JavaScript code so that it is clear and readable. The result
    is the style guides, of which there are several for JavaScript. They may well
    give quite different recommendations on one and the same topic, such as the question
    of the use of semicolons when closing statements.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 就像大多数其他编程语言一样，聪明的开发者已经考虑到了如何格式化 JavaScript 代码，使其清晰易读。结果便是风格指南，JavaScript 也有多个这样的指南。它们可能会在同一主题上给出不同的建议，比如关于在语句结束时是否使用分号的问题。
- en: Well-known JavaScript style guides include the *Google JavaScript Style Guide*
    (► [https://​google.​github.​io/​styleguide/​jsguide.​html](https://google.github.io/styleguide/jsguide.html)),
    the one from Airbnb (► [https://​github.​com/​airbnb/​javascript](https://github.com/airbnb/javascript)),
    and the *JavaScript Standard Style Guide* (► [https://​github.​com/​standard/​standard](https://github.com/standard/standard)),
    which—contrary to its name—by no means takes on an official role, as, for example,
    Python’s *Python Enhancement Proposal* (*PEP*) number 8 does. For some style guides,
    including the Standard Style Guide, there is even software, a *linter*, which
    can format the source code fully automatically so that it conforms to the style
    guide’s specifications.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 知名的 JavaScript 风格指南包括 *Google JavaScript 风格指南*（► [https://​google.​github.​io/​styleguide/​jsguide.​html](https://google.github.io/styleguide/jsguide.html)），Airbnb
    的风格指南（► [https://​github.​com/​airbnb/​javascript](https://github.com/airbnb/javascript)），以及
    *JavaScript 标准风格指南*（► [https://​github.​com/​standard/​standard](https://github.com/standard/standard)）。与其名称相反，它并不担任官方角色，举例如
    Python 的 *Python 增强提案*（*PEP*）第 8 号所做的那样。对于一些风格指南，包括标准风格指南，甚至有软件（*linter*），它能够完全自动格式化源代码，使其符合风格指南的规范。
- en: We won’t follow any of these style guides in their entirety in this part of
    the book. Except in a professional environment, where you are working with a number
    of other developers, it is certainly not necessary to implement a style guide
    100%. Nevertheless, it’s a good idea to browse through some of the style guides
    and maybe pick up a thing or two.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的这一部分，我们不会完全遵循任何一个风格指南。除非在专业环境中，和其他开发人员一起工作，否则并不一定需要 100% 实现风格指南。然而，浏览一些风格指南并可能从中学到一些东西，还是个不错的主意。
- en: 30.2 Comments
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 30.2 注释
- en: JavaScript knows both single-line and multi-line comments. Single-line comments
    are introduced by **//** and identify everything to the right of it as a comment
    that is not processed by the interpreter. Multiline comments start with **/***
    and are terminated with ***/** (so the asterisks always face the comment text).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 支持单行注释和多行注释。单行注释以**//**开始，标识符右侧的所有内容都将作为注释，不会被解释器处理。多行注释以**/***开始，***/**结束（所以星号始终面向注释文本）。
- en: 'Examples of comments could look like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注释的示例可能如下所示：
- en: '*/***Here comes a multi-line comment explaining**why the assignment a = 5 is
    necessary***/*a = 5;*// This assignment can be explained in a one-line comment*b
    = 10;c = 7; *// c must also be initialized with a meaningful value*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*/***这里是一个多行注释，解释了为什么赋值 a = 5 是必要的***/*a = 5;*// 这个赋值可以用一行注释解释*b = 10;c = 7;*//
    c 也必须用一个有意义的值进行初始化*'
- en: The last comment is an *inline comment*, it is also syntactically permissible,
    but not appreciated because it is hard to read. If you use inline comments, make
    sure you leave some space (at least two spaces) between the end of the statement
    and the comment symbol, so that the comment stands out visually from the executable
    code.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的注释是*内联注释*，它在语法上也是允许的，但不被推荐，因为它很难阅读。如果使用内联注释，确保在语句末尾和注释符号之间留出一些空格（至少两个空格），以便注释在视觉上能够从可执行代码中突出出来。
- en: 30.3 Summary
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 30.3 总结
- en: In this chapter we have dealt with basic issues of JavaScript code design and
    commenting.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们讨论了 JavaScript 代码设计和注释的基本问题。
- en: 'Be sure to take the following points from this chapter:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保从本章中了解以下几点：
- en: Identifiers in JavaScript can contain letters, digits, the underscore character,
    and the dollar sign, but cannot begin with a digit.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript 中的标识符可以包含字母、数字、下划线字符和美元符号，但不能以数字开头。
- en: Identifiers are UTF-8 encoded and may therefore contain umlauts and other non-standard
    characters; however, their use is not recommended.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标识符采用 UTF-8 编码，因此可能包含变音符号和其他非标准字符；然而，不建议使用这些字符。
- en: Typically, identifiers are written in lower case. In the case of identifiers
    composed of several terms, the following terms are each capitalized (“camel case”).
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常，标识符采用小写字母。如果标识符由多个词组成，则后续词首字母大写（“驼峰命名法”）。
- en: Semicolons at the end of a statement are not mandatory but recommended since
    JavaScript does not always automatically stop interpreting a statement at the
    end of a line.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语句末尾的分号不是强制性的，但建议加上，因为 JavaScript 并不总是在行末自动停止解析语句。
- en: Line breaks in code are allowed as long as they do not occur within a string.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码中的换行是允许的，只要它们不出现在字符串内部。
- en: For the design of the code, which is an area of relative freedom in JavaScript,
    there are numerous guidelines that represent quite different views on various
    topics, including the *Google JavaScript Style Guide*, the *JavaScript Standard
    Style Guide* and the style guide of Airbnb.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于代码设计，这是JavaScript中相对自由的领域，有许多指南代表了对各种主题的截然不同的观点，包括*Google JavaScript风格指南*、*JavaScript标准风格指南*以及Airbnb的风格指南。
- en: JavaScript knows single and multiline comments.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript支持单行和多行注释。
- en: Single-line comments start with **//** and mark everything to the right of it
    as a comment; they can also be used within a line of code (“inline”).
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单行注释以**//**开头，并将其右侧的内容标记为注释；它们也可以在一行代码中使用（“内联”）。
- en: Multiline comments are placed between **/*** and ***/**.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多行注释放置在**/*** 和 ***/**之间。
