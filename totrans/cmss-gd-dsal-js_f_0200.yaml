- en: Greedy Algorithms
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: This next tactic can speed up some of the most stubborn algorithms. It doesn’t
    work in every situation, but when it does, it can be a game changer.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Let’s talk about writing greedy algorithms.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: This may sound like a strange term, but here’s what it means. A greedy algorithm
    is one that, in each step, chooses what appears to be the best option at that
    moment in time. This will make sense with a basic example.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Array Max
  id: totrans-4
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: Let’s write an algorithm that finds the greatest number in an array. One way
    we can do this is to use nested loops and check each number against every other
    number in the array. When we find the number that is greater than every other
    number, it means we’ve found the greatest number in the array.
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: As is typical for such algorithms, this approach takes `O(N²)` time.
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Another approach would be to sort the array in ascending order and return the
    final value from the array. If we use a fast sorting algorithm like `Quicksort`,
    this would take `O(N log N)` time.
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'A third option is the greedy algorithm:'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function` max(`array`) { |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (`array.length === 0`) { `return` `null`; } |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `let` greatestNumber = `array[0]`; |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `for` (`const` `number` `of` `array`) { |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (`number > greatestNumber`) { |'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | greatestNumber = `number`; |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` greatestNumber; |'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 'After ensuring the array isn’t empty, we say the following:'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `let` greatestNumber = `array[0]`; |'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_TB
- en: This line “assumes” that the first number in the array is the greatestNumber.
    Now, this is a “greedy” assumption; that is, we’re declaring the first number
    to be the greatestNumber because it’s the greatest number we’ve encountered so
    far. Of course, it’s also the only number we’ve encountered so far! But that’s
    what a greedy algorithm does—it chooses what appears to be the best option based
    on the information available at that moment in time.
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Next, we iterate over all the numbers in the array. As we find any number that
    is greater than the greatestNumber, we make this new number the greatestNumber.
    Here too, we’re being greedy; each step selects the best option based on what
    we know at that moment in time.
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: We’re basically like a child in a candy shop grabbing the first candy we see,
    but as soon as we see a bigger candy, we drop the first one and grab the bigger
    one.
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Yet, this seemingly naive greediness actually works. By the time we’re done
    with the function, our greatestNumber will indeed be the greatest number in the
    entire array.
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: And while being greedy isn’t a virtue in a societal context, it can do wonders
    for algorithm speed. This algorithm takes just `O(N)` time, as we touch each number
    in the array just once.
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Largest Subsection Sum
  id: totrans-29
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: Let’s see another example of how greed pays off.
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: We’re going to write a function that accepts an array of numbers and returns
    the largest sum that could be computed from any “subsection” of the array.
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s what I mean. Let’s take the following array:'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `[3, -4, 4, -3, 5, -9]` |'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_TB
- en: If we computed the sum of all the numbers in this array, we’d get `-4`。
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'But we can also compute the sum of subsections of the array:'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/tips_for_code_optimization/subsection_sums.png`](images/tips_for_code_optimization/subsection_sums.png)'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: When I refer to subsections, I mean contiguous subsections；that is，一个子区段是包含一系列数字的数组的一部分。
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The following is not a contiguous subsection, since the numbers are not in a
    row：
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/tips_for_code_optimization/not_in_a_row.png`](images/tips_for_code_optimization/not_in_a_row.png)'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: Our job is to find the largest sum that can be computed from any subsection
    within the array. In our example, the largest sum is `6`，derived from the following
    subsection：
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/tips_for_code_optimization/largest_sum_6.png`](images/tips_for_code_optimization/largest_sum_6.png)'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: To make the discussion simpler, let’s assume the array contains at least one
    positive number.
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Now, how can we write the code to calculate the largest subsection sum？
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: One approach would be to calculate the sum of every subsection within the array
    and pick out the greatest one. However, there are about `N² / 2` subsections for
    `N` items in an array, so the mere generation of the different subsections would
    take `O(N²)` time.
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Again, let’s start by dreaming up the best-imaginable Big `O`。We definitely
    need to inspect each number at least once, so we can’t beat `O(N)`。So let’s make
    `O(N)` our goal.
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: At first glance, `O(N)` seems beyond our reach. How can we add up multiple subsections
    by iterating over the array a single time？
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Let’s see what happens if we get a little greedy…
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: A greedy algorithm in this context would attempt to “grab” the greatest sum
    at each step as we iterate over the array. Here’s what this might look like as
    we iterate over the earlier example array.
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Starting at the front of the array, we encounter a `3`。In perfect greedy fashion,
    we’ll say that our greatest sum is `3`：
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/tips_for_code_optimization/encounter_3.png`](images/tips_for_code_optimization/encounter_3.png)'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: Next, we reach the `-4`。When we add this to the previous number of `3`，we get
    a current sum `-1`。So `3` is still our greatest sum：
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/tips_for_code_optimization/encounter_negative_4.png`](images/tips_for_code_optimization/encounter_negative_4.png)'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: We then hit the `4`。If we add this to our current sum, we get `3`：
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/tips_for_code_optimization/encounter_4.png`](images/tips_for_code_optimization/encounter_4.png)'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: As of now, `3` is still the greatest sum.
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The next number we reach is a `-3`。This puts our current sum at `0`：
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/tips_for_code_optimization/encounter_negative_3.png`](images/tips_for_code_optimization/encounter_negative_3.png)'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: Again, while `0` is our current sum, `3` is still our greatest sum.
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Next, we reach the `5`\. This makes our current sum `5`\. In our greed, we’ll
    declare this to be the greatest sum, as it’s the greatest sum we’ve encountered
    so far:'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/encounter_5.png](images/tips_for_code_optimization/encounter_5.png)'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'We then reach the last number, which is `-9`\. This deflates our current sum
    to `-4`:'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/encounter_negative_9.png](images/tips_for_code_optimization/encounter_negative_9.png)'
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: By the time we get to the end of the array, our greatest sum is `5`\. So if
    we follow this pure-greed approach, it would appear that our algorithm should
    return `5`.
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'However, `5` is not the greatest subsection sum. A subsection in the array
    yields a sum of `6`:'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/largest_sum_6.png](images/tips_for_code_optimization/largest_sum_6.png)'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: The problem with our algorithm is that we only calculated the largest sum based
    on subsections that always begin with the first number in the array. But other
    subsections begin with numbers later on in the array as well, and we haven’t accounted
    for those.
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Our greedy algorithm, then, didn’t pan out as we’d hoped.
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: But we shouldn’t give up yet! Often, we need to tweak greedy algorithms a bit
    to get them to work.
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Let’s see if finding a pattern may help. (It usually does.) As we’ve seen before,
    the best way to find a pattern is to generate lots of examples. So let’s come
    up with some examples of arrays with their largest subsection sums and see if
    we discover anything interesting:'
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/largest_sum_examples.png](images/tips_for_code_optimization/largest_sum_examples.png)'
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'When analyzing these cases, an interesting question emerges: why is it that
    in some cases, the greatest sum comes from a subsection that starts at the beginning
    of the array, and in other cases it doesn’t?'
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'In looking at these cases, we can see that when the greatest subsection doesn’t
    start at the beginning, it’s because a negative number broke the streak:'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/streak_breakers.png](images/tips_for_code_optimization/streak_breakers.png)'
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: The greatest subsection would’ve been derived from the beginning of the array,
    but a negative number killed the streak, and the greatest subsection has to start
    later on in the array.
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'But wait a second. In some cases, the greatest subsection includes a negative
    number, and the negative number didn’t break the streak:'
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/unbroken_streak.png](images/tips_for_code_optimization/unbroken_streak.png)'
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: So what’s the difference?
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The pattern is this: if the negative number causes the preceding subsection’s
    sum to sink to a negative number, the streak is broken. But if the negative number
    simply lowers the current subsection’s sum, and the sum remains a positive number,
    the streak isn’t broken.'
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: If we think about it, this makes sense. If, as we’re iterating through the array,
    our current subsection’s sum becomes less than 0, we’re best off just resetting
    the current sum to 0. Otherwise, the current negative sum will just detract from
    the greatest sum we’re trying to find.
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: So let’s use this insight to tweak our greedy algorithm.
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Again, let’s start with the 3. The greatest sum is currently 3:'
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/encounter_3.png](images/tips_for_code_optimization/encounter_3.png)'
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'Next, we encounter the -4. This would make our current sum -1:'
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/encounter_negative_4.png](images/tips_for_code_optimization/encounter_negative_4.png)'
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'Since we’re trying to find the subsection with the greatest sum, and our current
    sum is a negative number, we need to reset the current sum to 0 before continuing
    on to the next number:'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/reset_sum_to_zero.png](images/tips_for_code_optimization/reset_sum_to_zero.png)'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: We’ll also start a brand-new subsection beginning with the next number.
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Again, the reasoning is that if the next number is positive, we may as well
    just start the next subsection from there, without letting the current negative
    number drag down the sum. Instead, we’re going to perform a reset by setting the
    current sum to 0 and considering the next number to be the beginning of a new
    subsection.
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: So let’s continue.
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'We now reach a 4. Again, this is the beginning of a new subsection, so the
    current sum is 4, which also becomes the greatest sum we’ve seen yet:'
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/greatest_sum_is_4.png](images/tips_for_code_optimization/greatest_sum_is_4.png)'
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'Next, we encounter the -3. The current sum is now 1:'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/current_sum_is_1.png](images/tips_for_code_optimization/current_sum_is_1.png)'
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'We next come upon a 5. This makes the current sum 6, which is the greatest
    sum as well:'
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/current_sum_is_6.png](images/tips_for_code_optimization/current_sum_is_6.png)'
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: Finally, we reach the -9. This would make the current sum -3, in which case
    we’d reset it to 0. However, we’ve also reached the end of the array, and we can
    conclude the greatest sum is 6. And, indeed, that is the correct result.
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s the code for this approach:'
  id: totrans-97
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function` maxSum(array) { |'
  id: totrans-98
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `let` currentSum = 0; |'
  id: totrans-99
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `let` greatestSum = 0; |'
  id: totrans-100
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-101
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `for` (`const` num `of` array) { |'
  id: totrans-102
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (currentSum + num < 0) { |'
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | currentSum = 0; |'
  id: totrans-104
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } `else` { |'
  id: totrans-105
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | currentSum += num; |'
  id: totrans-106
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (currentSum > greatestSum) { |'
  id: totrans-107
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `greatestSum = currentSum;` |'
  id: totrans-108
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-109
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-110
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-111
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-112
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` greatestSum; |'
  id: totrans-113
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-114
  prefs: []
  stylish: true
  type: TYPE_TB
- en: Using this greedy algorithm, we were able to solve this thorny problem in just
    `O(N)` time, as we loop through the array of numbers just once. That’s a great
    improvement over our initial `O(N²)` approach. In terms of space, this algorithm
    is `O(1)`, as we don’t generate any extra data.
  id: totrans-115
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: While the discovery of a pattern helped us discover the precise solution, by
    adopting the greedy mindset, we knew what kind of pattern we were looking for
    in the first place.
  id: totrans-116
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Greedy Stock Predictions
  id: totrans-117
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: Let’s look at one more greedy algorithm.
  id: totrans-118
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Say we’re writing financial software that makes stock predictions. The particular
    algorithm we’re working on now looks for a positive trend for a given stock.
  id: totrans-119
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Specifically, we’re writing a function that accepts an array of stock prices
    and determines whether there are any three prices that create an upward trend.
  id: totrans-120
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'For example, take this array of stock prices that represents the price of a
    given stock over time:'
  id: totrans-121
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `[22, 25, 21, 18, 19.6, 17, 16, 20.5]` |'
  id: totrans-122
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 'Although it may be difficult to spot at first, there are three prices that
    form an upward trend:'
  id: totrans-123
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/tips_for_code_optimization/upward_trend.png`](images/tips_for_code_optimization/upward_trend.png)'
  id: totrans-124
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: As we go from left to right, there are three prices where a “right-hand” price
    is greater than a “middle” price, which in turn is greater than a “left-hand”
    price.
  id: totrans-125
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The following array, on the other hand, does not contain a three-point upward
    trend:'
  id: totrans-126
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `[50, 51.25, 48.4, 49, 47.2, 48, 46.9]` |'
  id: totrans-127
  prefs: []
  stylish: true
  type: TYPE_TB
- en: Our function should return `true` if the array contains an upward trend of three
    prices and `false` if it does not.
  id: totrans-128
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: So how do we go about this?
  id: totrans-129
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: One way we can do this is with three nested loops. As one loop iterates over
    each stock price, a second loop iterates over all the stock prices that follow.
    And for each round of the second loop, a third nested loop checks all the prices
    that follow the second price. As we point to each set of three stock prices, we
    check whether they’re in ascending order. As soon as we find such a set, we return
    `true`. But if we complete the loops without finding any such trend, we return
    `false`.
  id: totrans-130
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The time complexity of this algorithm is `O(N³)`. That’s pretty slow! Is there
    any way we can optimize this?
  id: totrans-131
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Let’s first think about the best-imaginable Big O. We definitely need to inspect
    each stock price to find a trend, so we know that our algorithm cannot be faster
    than `O(N)`. Let’s see if we can optimize for such a speed.
  id: totrans-132
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Once again, it’s time to get greedy.
  id: totrans-133
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: To apply the greedy mentality to our case, we’d want to somehow keep grabbing
    what we think is the lowest point of our three-price upward trend. It would also
    be cool if we can use the same greedy approach to constantly grab what we think
    are the middle and highest points of that trend.
  id: totrans-134
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s what we’ll do:'
  id: totrans-135
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: We’ll assume the first price from the array is the lowest point in the three-price
    upward trend.
  id: totrans-136
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 至于中间价格，我们将其初始化为一个保证大于数组中最高股票价格的数字。为此，我们将其设置为`infinity`。这个步骤乍一看可能是最不直观的，但你很快会看到我们为什么需要这样做。
  id: totrans-137
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 然后我们将按照以下步骤对整个数组进行一次遍历：
  id: totrans-138
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 如果当前价格低于我们迄今为止遇到的最低价格，这个价格将成为新的最低价格。
  id: totrans-139
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: 如果当前价格高于最低价格但低于中间价格，我们将中间价格更新为当前价格。
  id: totrans-140
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: 如果当前价格高于中间价格，这意味着我们发现了一个三价格上升趋势！
  id: totrans-141
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: 让我们看看这个操作。首先，我们将从一个简单的例子开始，处理这个股票价格数组：
  id: totrans-142
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/array_of_stocks.png](images/tips_for_code_optimization/array_of_stocks.png)'
  id: totrans-143
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 我们开始遍历数组，从`5`开始。我们一开始就充满贪婪，假设这个`5`是三点趋势中的最小价格，如下数组所示：
  id: totrans-144
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/stock_5.png](images/tips_for_code_optimization/stock_5.png)'
  id: totrans-145
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 接下来，我们处理`2`。因为`2`低于`5`，我们变得更加贪婪，假设`2`现在是趋势中的最低价格：
  id: totrans-146
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/stock_2.png](images/tips_for_code_optimization/stock_2.png)'
  id: totrans-147
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 我们到达数组中的下一个数字，`8`。这个数字高于我们的最低点，所以我们保持最低点为`2`。然而，它低于当前的中间价格，即`infinity`，所以我们现在贪婪地将`8`赋值为我们三点趋势中的中间点：
  id: totrans-148
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/stock_8.png](images/tips_for_code_optimization/stock_8.png)'
  id: totrans-149
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 接下来，我们到达`4`。这个值高于`2`，所以我们继续假设`2`是我们趋势中的最低点。然而，由于`4`低于`8`，我们将`4`作为我们的新中间点，而不是`8`。这也是出于贪婪，因为通过降低我们的中间点，我们增加了找到更高价格的机会，从而形成我们所寻求的趋势。因此，`4`是我们的新中间点：
  id: totrans-150
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/stock_4.png](images/tips_for_code_optimization/stock_4.png)'
  id: totrans-151
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 数组中的下一个数字是`3`。我们将最低价格保持为`2`，因为`3`大于它。但我们将其作为我们的新中间点，因为它低于`4`：
  id: totrans-152
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/stock_3.png](images/tips_for_code_optimization/stock_3.png)'
  id: totrans-153
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 最后，我们到达`7`，这是数组中的最后一个值。因为`7`大于我们的中间价格（`3`），这意味着数组包含一个上升的三点趋势，我们的函数可以返回`true`：
  id: totrans-154
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/stock_7.png](images/tips_for_code_optimization/stock_7.png)'
  id: totrans-155
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: Note that two such trends exist in the array. There’s `2-3-7`，but there’s also
    `2-4-7`。Ultimately, though, this doesn’t matter to us, since we’re just trying
    to determine whether this array contains any upward trend; so finding a single
    instance is enough to return `true`。
  id: totrans-156
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s an implementation of this algorithm:'
  id: totrans-157
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function` `isIncreasingTriplet(array)` { |'
  id: totrans-158
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `let` `lowestPrice = array[0];` |'
  id: totrans-159
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `let` `middlePrice = `**Infinity**`;` |'
  id: totrans-160
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-161
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `for` (`const` price `of` array) { |'
  id: totrans-162
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (price <= `lowestPrice`) { |'
  id: totrans-163
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `lowestPrice = price;` |'
  id: totrans-164
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } `else` `if` (price <= `middlePrice`) { |'
  id: totrans-165
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `middlePrice = price;` |'
  id: totrans-166
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } `else` { |'
  id: totrans-167
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` `true`; |'
  id: totrans-168
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-169
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-170
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-171
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` `false`; |'
  id: totrans-172
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-173
  prefs: []
  stylish: true
  type: TYPE_TB
- en: One counterintuitive aspect of this algorithm is worth pointing out. Specifically,
    in some scenarios it would appear this algorithm wouldn’t work, yet it does.
  id: totrans-174
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Let’s take a look at this scenario:'
  id: totrans-175
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/second_stock_example.png](images/tips_for_code_optimization/second_stock_example.png)'
  id: totrans-176
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: Let’s see what happens when we apply our algorithm to this array.
  id: totrans-177
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'At first, the 8 becomes our lowest point:'
  id: totrans-178
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/second_example_stock_8.png](images/tips_for_code_optimization/second_example_stock_8.png)'
  id: totrans-179
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'Then the 9 becomes our middle point:'
  id: totrans-180
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/second_example_stock_9.png](images/tips_for_code_optimization/second_example_stock_9.png)'
  id: totrans-181
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'Next, we reach the 7。Because this is lower than our lowest point, we update
    the lowest point to be 7:'
  id: totrans-182
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/second_example_stock_7.png](images/tips_for_code_optimization/second_example_stock_7.png)'
  id: totrans-183
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'We then reach the 10:'
  id: totrans-184
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/second_example_stock_10.png](images/tips_for_code_optimization/second_example_stock_10.png)'
  id: totrans-185
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: Because the 10 is greater than the current middle point (9) our function returns
    `true`。Now, this is the correct response since our array indeed contains the trend
    of `8-9-10`。However, by the time our function is done, our lowest point variable
    is pointing to the `7`。But the `7` is not part of the upward trend!
  id: totrans-186
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Despite this being the case, our function still returned the correct response.
    And this is because all our function needs to do is reach a number that is higher
    than the middle point. Because the middle point was only established once we already
    found a lower point before it, as soon as we reach a number higher than the middle
    point, it still means an upward trend is present in the array. This is true even
    though we ended up overwriting the lower point to be some other number later on.
  id: totrans-187
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In any case, our greedy approach paid off, as we only iterated over our array
    a single time. This is an astounding improvement, as we turned an algorithm that
    ran at `O(N³)` into one of `O(N)`。
  id: totrans-188
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 当然，贪心算法并不总是有效。但它是你在优化算法时可以尝试的另一个工具。
  id: totrans-189
  prefs: []
  stylish: true
  type: TYPE_NORMAL
