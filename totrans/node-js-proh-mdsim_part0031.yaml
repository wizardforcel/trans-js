- en: 'Chapter 11: Object-Oriented Programming in JavaScript'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will explore object-oriented programming (OOP) in JavaScript.
    Object-oriented programming is a powerful paradigm that allows us to model real-world
    entities as objects, encapsulate data and behavior within those objects, and interact
    between them. JavaScript supports OOP principles through its prototype-based inheritance
    system.
  prefs: []
  type: TYPE_NORMAL
- en: 11.1 Introduction to Object-Oriented Programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Object-oriented programming is a programming paradigm centered around the concept
    of objects. An object is an instance of a class, which serves as a blueprint defining
    the properties and behaviors of objects belonging to that class.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key principles of object-oriented programming are:'
  prefs: []
  type: TYPE_NORMAL
- en: '- Encapsulation: Encapsulation allows us to encapsulate related data (properties)
    and functionality (methods) within an object, preventing direct access from outside
    and providing controlled access through defined interfaces.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Inheritance: Inheritance enables objects to inherit properties and methods
    from other objects. It promotes code reuse and hierarchical relationships between
    classes.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Polymorphism: Polymorphism allows objects of different classes to be treated
    as objects of a common superclass. It enables flexible and interchangeable usage
    of objects based on their shared behaviors.'
  prefs: []
  type: TYPE_NORMAL
- en: 11.2 Creating Objects in JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In JavaScript, objects can be created using object literals or constructor functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Object literals are a convenient way to create objects by defining their properties
    and methods directly. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Constructor functions provide a way to create objects based on a blueprint
    (class) using the `new` keyword. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we define a `Person` constructor function that takes `name`
    and `age` as parameters. We assign these values to the object using the `this`
    keyword. The `greet()` method is added to the prototype of the `Person` constructor
    function for shared functionality among all instances.
  prefs: []
  type: TYPE_NORMAL
- en: 11.3 Inheritance and Prototypes in JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript uses prototypal inheritance to implement inheritance between objects.
    Each object has an internal property called `[[Prototype]]` that points to its
    prototype object. Prototypes are used to inherit properties and methods from other
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: We can create an inheritance relationship between objects using the `Object.create()`
    method or the `class` syntax introduced in ECMAScript 2015 (ES6).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example using `Object.create()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we create a `personPrototype` object that serves as the prototype
    for our `person` object. The `person` object inherits the `greet()` method from
    the `personPrototype` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, we can use the `class` syntax to define classes and create inheritance
    relationships. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we define a `Person` class with a constructor and a `greet()`
    method. We then create a `Student` class that extends the `Person` class using
    the `extends` keyword. The `Student` class has its own constructor that invokes
    the `super()` method to call the constructor of the parent class. It also has
    a `study()` method specific to students.
  prefs: []
  type: TYPE_NORMAL
- en: By utilizing inheritance, we can create a hierarchy of objects that share common
    properties and behaviors, while also extending and customizing them for specific
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 11.4 Polymorphism in JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Polymorphism allows objects of different classes to be treated as objects of
    a common superclass. In JavaScript, polymorphism can be achieved by defining methods
    with the same name in different classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we define a `Shape` class with a `draw()` method. We then create
    `Circle` and `Square` classes that extend the `Shape` class and override the `draw()`
    method with their own implementations. Despite calling the same method name, each
    object behaves differently based on its specific class.
  prefs: []
  type: TYPE_NORMAL
- en: Polymorphism allows us to write code that can work with objects of different
    classes interchangeably, promoting flexibility and extensibility.
  prefs: []
  type: TYPE_NORMAL
- en: 11.5 Conclusion
  prefs: []
  type: TYPE_NORMAL
- en: Object-oriented programming in JavaScript provides a powerful way to structure
    and organize our code by utilizing objects, encapsulation, inheritance, and polymorphism.
    By understanding the principles and techniques of OOP, we can create more modular,
    reusable, and maintainable JavaScript applications.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we explored the basics of object-oriented programming in JavaScript,
    including creating objects, inheritance, and polymorphism. We also discussed how
    to use constructor functions and the `class` syntax introduced in ES6.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will dive into another essential aspect of JavaScript
    programming: error handling and debugging techniques. Understanding how to handle
    errors and effectively debug our code will greatly enhance our development process
    and help us build robust JavaScript applications.'
  prefs: []
  type: TYPE_NORMAL
