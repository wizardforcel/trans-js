- en: © The Author(s), under exclusive license to Springer Fachmedien Wiesbaden GmbH,
    part of Springer Nature 2024 J. L. Zuckarelli Learn coding with Python and JavaScript
    [`https://doi.org/10.1007/978-3-658-42912-6_20`](https://doi.org/10.1007/978-3-658-42912-6_20)
  id: totrans-0
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`20. Syntax, Comments, Code Style & Documentation: How Do I Make Sure That
    I (And Others) Still Understand My Program Later?`'
  id: totrans-1
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: Joachim L. Zuckarelli^([1](#Aff2) )(1) München, Germany Overview
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Before we really get into Python programming, we will first look at what Python
    code and its most important basic elements look like, and which fundamental conventions
    must be observed when writing code. Compared to many other programming languages,
    Python has a special feature in code design that, at first glance, seems to take
    away some design freedom from us as programmers, but at the same time makes our
    lives easier.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In addition, we will look at how Python code is `commented` and `documented`.
    Commenting is important so that we as developers can still understand our own
    code later, especially if we want to develop it further. Documentation is used
    to provide information so that other developers who want to use our code in their
    programs understand exactly how to do so.
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'In this chapter you will learn:'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: What meaning line indentations have in Python
  id: totrans-6
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: how to terminate statements in Python and how to extend statements over multiple
    lines
  id: totrans-7
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: how identifiers for variables, functions, methods, and modules are usually chosen
    in Python and what restrictions there are in doing so
  id: totrans-8
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: how to formulate comments in Python
  id: totrans-9
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: what docstrings are and how you can use them to document the program code.
  id: totrans-10
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`20.1 Design of the Program Code and Naming Conventions`'
  id: totrans-11
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: '`20.1.1 Indentation and General Code Formatting`'
  id: totrans-12
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: We saw in ► Sect. [`10.​2`](474412_1_En_10_Chapter.xhtml#Sec2) that many programming
    languages give the developer a lot of leeway in how the source code should be
    formatted. By choosing suitable indentations, for example, one can make the program
    code clearer. This freedom of design is ultimately due to the fact that many programming
    languages completely ignore the formatting of the program code. In other words,
    the formatting has no significance for the content of the program.
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: This is different in Python. Where other programming languages have special
    symbols to mark the beginning and end of code blocks (for example, `begin` and
    `end`, or open and closed curly braces), Python uses indentations. Statements
    that are indented the same distance belong to the same code block.
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s an example of a simple function that you can pass a text and a number
    of repetitions, and it will simply output the text to the screen the appropriate
    number of times (in uppercase) and announce the current repetition number. Don’t
    worry that you may not yet understand all the code, you will by the end of this
    part of the book. Here it’s just about the indentations for now:'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`def` repeat_text(`text: str`, `reps: int`):`text = text.upper()` `for` `x`
    `in` `range(1, reps+1):` `output = ''Run no.'' + str(x) + '': '' + text` `print(output)`
    `repeat_text(''Hello world'', 3)`'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'After the function has been created with `def`，it is then called in the last
    line. The program generates the following output with this function call:'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Run No.1: HELLO WORLD` `Run No.2: HELLO WORLD` `Run No.3: HELLO WORLD`'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: You can see that the code block belonging to the `repeat_text()` function is
    indented. The same applies to the code block that is executed in the `for` loop
    and causes the output. This block is even indented twice, it belongs to the function
    `repeat_text()` and within that function to the `for` loop `for x in range(1,
    reps+1):` After the end of the function definition, `repeat_text('Hello world',
    3)` continues on the far left again. This statement does not belong to the code
    block of the `for` loop, not even to the code block of the function definition.
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: So, code blocks in Python are delimited by indentation (and introduced by a
    colon, as you can see in both the function definition using the `def` keyword
    and the `for` loop). Indentations are usually made either with the tab key or
    by entering four spaces. The second type is generally preferred. For the sake
    of consistent code, however, you should especially not mix both types of indentation
    in one program. Due to the enforced indentations, Python code is quite readable,
    so the loss of design freedom is tolerable. This way of delimiting code blocks
    eliminates the need to use parentheses or other keywords, the forgetting of which—especially
    at the end of a code block—is a common source of errors in other programming languages.
    Apart from the indentations, you are completely free regarding the design of the
    code.
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In the form of style guidelines, however, there is a whole series of suggestions
    and recommendations on how to write Python code. Adhering to them helps to make
    the code more readable and understandable. But many of the rules are very detailed
    and are certainly not always followed, even by Python professionals. The official
    style guide can be found as a `Python Enhancement Proposal` (PEP) under the serial
    number PEP 8 on the ► [python.​org](http://python.org) website. It doesn’t hurt
    to take a look there.
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: If you are working with `PyCharm`，the handy “Reformat Code” feature from the
    “Code” menu allows you to have your code automatically formatted according to
    PEP 8 rules. Also, `PyCharm` alerts you to “violations” of the PEP 8 rules with
    wavy, gray underlines and small tooltip overlays, as you see in ◘ Fig. [20.1](#Fig1).
    ![](../images/474412_1_En_20_Chapter/474412_1_En_20_Fig1_HTML.jpg)
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: A screenshot of a set of program codes and a block of tooltip insertion. Repeat
    text of text string and reps integer is defined along with `for` loop statement.
    A Pep 8 block overlays the program.
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Fig. 20.1
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Tool tip insertion for code formatting
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`20.1.2`没有分号的语句结束，跨越多行的语句'
  id: totrans-26
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: '`Python`一般不需要像分号这样的分隔符在语句末尾。每条语句在行末会自动结束。尽管不建议这样做，因为会减少清晰度，你也可以在`Python`中将几条语句写在同一行中。然而，在这种情况下，你必须用分号分隔每个语句。'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 相反，也有可能将指令扩展到多行。如果语句非常长，这样做是有意义的。当然，你也可以简单地将语句写在一行中。然而，你可能需要横向滚动才能看到语句的结尾。这是非常不方便的，应该避免。根据`PEP
    8`的代码样式建议，代码行不应超过79个字符。然而，有些语句实在太长。那么，应该怎么办呢？
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 语句可以很容易地在圆括号、方括号或花括号内换行：
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`repeat_text(''Hello world'', 3)repeat_text(''Hello World'',3)`'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 我们也可以将上面例子的函数调用分成两行。然而，不允许在字符串`'Hello world'`内部换行！缩进在这里没有规定，因此你可以随意缩进，这可以大大提高程序代码的可读性。
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 但是你也可以通过在行末放置反斜杠（`\`）来在圆括号、方括号和花括号之外换行：
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`x = ''Hello World''print(x)`'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 然而，这种方法是不被推荐的，应该仅在绝对必要时使用。大多数情况下，换行是因为函数调用中有很多函数参数，而在这种情况下，你无论如何都在圆括号内部。
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 最后一种包装语句的类型是`docstrings`，或者更一般地说，是用三重引号括起来的字符串（我们将在►节`[20.3](#Sec6)`中更详细地处理`docstrings`）。这些可以跨越多行：
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`x = ''''''This is a very long text which does not fit in one line and therefore
    must be spread over several lines.''''''`'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: “正常”字符串不能这样做。如果我们让字符串跨越行尾，`Python`解释器会认为我们忘记结束字符串，这会导致错误消息：
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`SyntaxError: EOL while scanning string literal`'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`20.1.3`区分大小写和标识符选择'
  id: totrans-39
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: '`Python`是区分大小写的，这意味着一般区分大小写。因此，一个名为`age`的变量与变量`AGE`是完全不同的。当然，区分大小写不仅适用于变量，还适用于函数和方法、类、模块和包的标识符。'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 所有这些元素的标识符可以由字母、数字和`_`组成。然而，它们绝不能以数字开头。`customer_age`因此是一个合法的变量名，`take2`和`_2times4`也是，但`11friends`则不是。以`_`（或两个`__`）开头和/或结尾的标识符在Python中具有特殊意义，我们稍后会详细讨论。一般建议避免以`_`开头或结尾的标识符，并且只在标识符`内`使用下划线，除非你想要与前导或尾随下划线相关联的某种效果。
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 除了这几条规则外，你可以自由选择你的标识符。然而，有一些约定是许多Python程序员遵循的，尽管违反这些规则不会导致程序代码中的语法错误。遵循这些规则会使你的代码看起来更“pythonic”。例如，类名或其组成部分通常以大写字母开头（例如，`MyClass`），模块名以小写字母开头（例如，`myModule`），变量和函数/方法通常以小写字母开头，不同的组成部分通常用下划线分隔（例如，`my_variable`、`my_function`）。
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 顺便提一下，你甚至可以在标识符中使用像变音符号这样的特殊字符。Python支持广泛的UTF-8字符集，这使得这一点成为可能。然而，这种标识符并不推荐。至少，与那些母语（和键盘！）不包含这些字符的开发人员交换代码时会变得更加困难。最好坚持使用可以在标准英语键盘上轻松输入的标识符。
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 当然，你不必遵循所有这些非约束性的约定。但如果你这样做，你的代码看起来会更“Python”，其他开发人员也会更容易与你的代码相处，特别是因为他们可以专注于代码的含义和功能，而不是经常被他们不习惯的标识符样式“卡住”。
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 20.2 Comments
  id: totrans-45
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: 正如你已经知道的，注释是程序代码的部分，它们被解释器简单地忽略，你可以用它们为自己或他人阅读程序代码留下备注和解释。这些注释以井号（`#`）引入。井号右侧的所有内容都被视为注释。注释符号不一定必须位于行的开头。在下面的示例中，你可以看到两种变体，一种在行首，一种在右侧：
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`# Our first little Python program` `print(''Hello world'')` `# Output on the
    screen`'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The comments that start somewhere in the middle of the line are also called
    `inline comments`。They are not welcome in Python, nor in most, if not all programming
    languages, because they make the code a bit more difficult to read. If you use
    them, you should make sure that there are some (officially recommended: two) spaces
    between the end of the actual code line and the comment symbol.'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Of course, you can also use comments to temporarily “turn off” program code
    by removing it from the access of the interpreter, which ignores everything to
    the right of the comment character. It makes sense to speak of `commenting out`
    in this context. This is exactly what happened with the second print statement
    in this example:'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`# Our first little Python program` `print(''Hello World'')` `# print(''Hello,
    world'')`'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Comments always extend to the end of the line; Python does not know multiline
    comments in principle. So, if you want to write over several lines—and you will
    from time to time, because your comments should be fully readable on a normal
    screen even without scrolling horizontally (officially recommended are at most
    79 characters per line)—you have to preface each line with an extra comment symbol.
    Many development environments do the work for you here, though. If you’re working
    with `PyCharm`，you can highlight the lines you want to comment out, then click
    the "Comment With Line Comment" option in the Code menu (or alternatively press
    the `<CTRL>` and `</>` key combination) and `PyCharm` will add a comment symbol
    to the beginning of each of the selected code lines. You can also use the same
    option to remove the comment symbols from commented lines. Apart from that, there
    is also a trick you can use to create something like a true multi-line comment.
    More about this in the next section.
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The sense and nonsense of comments can be philosophized and argued about, especially
    regarding the question about when comments are helpful and when they just make
    the code more extensive and thus less clear. Go back a few pages to ► Sect. `[10.​3](474412_1_En_10_Chapter.xhtml#Sec3)`，where
    we learned about a number of best practices for commenting program code. As a
    rule of thumb we can state: There is usually not enough commenting, so feel free
    to write comments; your “future self” who tries to understand your old code will
    thank you!'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Sometimes you also use comments to document open tasks directly at the appropriate
    place in the program code. If you work with `PyCharm`，you can preface such comments
    with `# TODO`:'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`# TODO: Add more languages here`print(''Hello World'')print(''Hallo Welt'')Similarly,
    you can mark and explain small errors that still need to be fixed at the appropriate
    code location with `# FIXME`. Comments that start like this are specially highlighted
    as part of syntax highlighting and are treated specially by `PyCharm`. `PyCharm`
    displays these kinds of comments in a special sidebar pane called “TODO” as seen
    in ◘ Fig. [20.2](#Fig2). All `TODO` and `FIXME` comments are displayed there;
    double-clicking on an entry in the `TODO` area will take you directly to the corresponding
    place in the code. If you can''t see the `TODO` pane, click the three dots in
    the sidebar to see areas that are currently hidden. ![](../images/474412_1_En_20_Chapter/474412_1_En_20_Fig2_HTML.jpg)'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: A screenshot of a set of 9-line hello world program code in the Python project.
    The `Todo` pane displays the comments at the bottom.
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Fig. 20.2
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The TODO pane in `PyCharm`
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: If you want, you can also define your own comment types analogous to `# TODO`
    and `# FIXME` via `PyCharm`’s settings. In the vast majority of cases, however,
    the two special comment types mentioned above should suffice.
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 20.3 Documentation with `Docstrings`
  id: totrans-59
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: 'In addition to the “real” comments, which are always introduced with the comment
    symbol `#`, there is a second possibility to store information in the code that
    is not executed by the interpreter, namely with the help of so-called `docstrings`.
    `Docstrings` are special strings written between triple quotes. Consider the following
    program as an example:'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`''''''This is a docstring for our hello world program, namely one that even
    spans several lines.''''''print(''Hello world!'')`'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: If you run this program, you will get the output `Hello world!`. The `docstring`,
    on the other hand, is not displayed.
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Let’s try something else: This time we don’t use a docstring with three quotes,
    but a whole ordinary string, similar to `''Hello world!''`，which we output below.
    Unlike docstrings, ordinary strings in Python can’t span multiple lines in program
    code, so we’ve put our ‘comment’ on one line. Now what happens when you run this
    program? Nothing changes! Again, only `''Hello world!''` is output. The reason
    is quite simple: whenever you write text into your Python program code, as we
    did first with the docstring and then with a normal string, this does not result
    in any output on the screen. Instead, the text is simply ignored (not technically
    true, but at least there is no visible effect). The same goes for variables, as
    you’ll see in the next chapter. If we simply enter the name of a variable into
    our program code without any further instruction, nothing happens at all. To display
    the contents of the variable, or just our text from the example above, we must
    explicitly tell Python to output it. We do this by calling the `print()` function.
    It is different in the console. If you enter the name of a variable there and
    press `<ENTER>`，the contents are displayed. If you enter a string in the console,
    the string is immediately displayed again in the console.'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'So, like all other strings, docstrings, if they are in the program code without
    any other instruction, will not be displayed on the screen. If this is so, can’t
    we just use normal strings to explain our code? Yes, that would work. However,
    docstrings have two special properties that make them particularly suitable for
    documenting program code, as their name suggests: First, they can span several
    lines: We’ve already seen that. Second, Python treats these docstrings in a special
    way. If they are at the beginning of a function, class definition, or module,
    they are used as the contents of the help for that function, class, or module.
    If you call the `help()` function (for example, for `print()`: `help(print)`)，you
    will see the docstring that is stored at the beginning of the respective program
    code.'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: There are numerous Python tools that process these docstrings and output them
    in the form of documentation. Python’s own help uses a tool called `pydoc`，which
    extracts the docstring from the code and displays it when `help()` is called.
    In addition, there are several other utilities that work with docstrings, for
    example `autodoc`，`doxygen`，and `pydoctor`。Some of these programs are specifically
    designed for Python, others allow the automatic generation of code documentation
    for different programming languages. The output of this documentation does not
    have to be just text in the Python console. Quite a few tools also support the
    generation of HTML, PDF or even LaTex documents. To structure the documentation
    cleanly, some tools require a special structure of the docstrings.
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Of course, clever minds have long since considered the question of what docstrings
    in general should look like. The official answer to this question can be found
    in the `Python Enhancement Proposals` (PEP) as `PEP 257` (`Docstring Conventions`).
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Unlike comments, docstrings are used more to document code `for other users`
    that is, to explain how to `use` the code for your own purposes, and less to make
    notes about how the code `works`. That’s what comments are usually used for. We
    will come back to docstrings in some later places and use them in our programs.
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: We will also take a closer look at another type of documentation later. These
    are the `function annotations` which allow you to document the expected data types
    of function arguments, as well as the data types of the return values of functions
    in the program code. The annotations are also used by `pydoc` for help and can
    also be processed by other documentation tools.
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Docstrings and `function annotations` are often aimed at an audience other than
    yourself, namely the `users of` your code. When writing Python code to be used
    by other developers, it is important to document what, for example, functions
    do, what their arguments mean, and what return values the developer using your
    code can expect. He doesn’t want to have to read your code to find out this information.
    That’s why it’s important to provide documentation that allows third parties (if
    that’s provided) to use your program code “blindly” and view its inner workings
    like a black box. Relevant for the users of your code is only the `interface`
    i.e., how to use it, not how it works in detail. Docstrings and `function annotations`
    are suitable tools for this.
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`20.4 Summary`'
  id: totrans-70
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: In this chapter we have looked at the special features of Python when it comes
    to formatting the program code, how identifiers (for example, the variables and
    functions/methods) may/must be structured, and how you can comment and document
    your program code.
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'You should definitely take away the following points from this chapter:'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In Python, indentations mark a coherent block of code and can therefore not
    be used arbitrarily; Python already “enforces” an easily readable formatting of
    the program code, so to speak.
  id: totrans-73
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: Statements usually end at the end of a line in Python, no special delimiter
    is needed.
  id: totrans-74
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: Statements can go over several lines if the line break is inside round, square,
    or curly brackets, or is specially marked by the backslash (`\`), although the
    latter type of line break is rather rare.
  id: totrans-75
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: Several statements can be separated by semicolons on a single line.
  id: totrans-76
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: Python is case-sensitive when defining variables or identifiers.
  id: totrans-77
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: Identifiers are allowed to consist of letters, numbers, and the underscore.
  id: totrans-78
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: Unlike digits, letters and underscores may also appear at the beginning of an
    identifier.
  id: totrans-79
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: Since single and double underscores at the beginning (and also at the end) of
    identifiers have a special meaning, identifiers beginning with underscores should
    generally be avoided.
  id: totrans-80
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 变量和函数/方法的标识符通常用小写字母书写，在Python中，如果它们是复合词，其组件之间用下划线分隔。
  id: totrans-81
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 解释代码的注释在Python中总是单行，并由注释符号`#`引入；其右侧的内容不会被解释为程序代码，而是被解释器忽略。
  id: totrans-82
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`Docstrings`，用三重引号括起来，用于在Python中为代码用户提供文档；它们是Python帮助的核心部分，可以通过`help()`调用，并且被众多开发工具进一步处理为各种格式的文档。'
  id: totrans-83
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`Docstrings`可以跨多行。'
  id: totrans-84
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
