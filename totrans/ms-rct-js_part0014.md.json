["```jsjsx\n\nimport React, { useState } from 'react';\n\nfunction Counter() {\n\nconst [count, setCount] = useState(0);\n\nconst increment = () => {\n\nsetCount(count + 1);\n\n};\n\nreturn (\n\n<div>\n\n<p>Count: {count}</p>\n\n<button onClick={increment}>Increment</button>\n\n</div>\n\n);\n\n}\n\n```", "```jsjsx\n\nimport React, { createContext, useContext, useState } from 'react';\n\n// Step 1: Create a context\n\nconst ThemeContext = createContext();\n\n// Step 2: Create a provider component\n\nfunction ThemeProvider({ children }) {\n\nconst [theme, setTheme] = useState('light');\n\nconst toggleTheme = () => {\n\nsetTheme(theme === 'light' ? 'dark' : 'light');\n\n};\n\nreturn (\n\n<ThemeContext.Provider value={{ theme, toggleTheme }}>\n\n{children}\n\n</ThemeContext.Provider>\n\n);\n\n}\n\n// Step 3: Create a custom hook for consuming the context\n\nfunction useTheme() {\n\nreturn useContext(ThemeContext);\n\n}\n\n// Example usage in a component\n\nfunction ThemedButton() {\n\nconst { theme, toggleTheme } = useTheme();\n\nreturn (\n\n<button\n\nstyle={{\n\nbackgroundColor: theme === 'light' ? '#fff' : '#333',\n\ncolor: theme === 'light' ? '#333' : '#fff',\n\n}}\n\nonClick={toggleTheme}\n\n>\n\nToggle Theme\n\n</button>\n\n);\n\n}\n\n// App component\n\nfunction App() {\n\nreturn (\n\n<ThemeProvider>\n\n<div>\n\n<h1>Theme Example</h1>\n\n<ThemedButton />\n\n</div>\n\n</ThemeProvider>\n\n);\n\n}\n\nexport default App;\n\n```"]