- en: Chapter 12
  id: totrans-0
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: 'Angular: Fundamentals and Applications'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Angular is a powerful and complete framework developed by `Google` for creating
    robust and scalable web applications。Let's explore the fundamentals of Angular,
    understand the structure of an Angular application, and delve into concepts like
    directives, services, and dependency injection。By the end, you will be well equipped
    to start developing with Angular, making the most of its features。
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Angular Fundamentals
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Angular is a `TypeScript`-based front-end framework that offers a structured
    approach to developing web applications。Unlike `React`，which is a library focused
    on creating user interfaces，Angular is a complete framework that includes everything
    you need to build an application from start to finish。
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Why use Angular?
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '- TypeScript:  Angular is written in `TypeScript`，which is a superset of `JavaScript`
    that adds optional static typing。这 helps detect errors at compile time and improves
    code maintainability。'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '- Component architecture:  Angular uses a component-based architecture, similar
    to `React`，allowing the creation of modular and reusable user interfaces。'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '- Integrated tools:  Angular CLI (`Command Line Interface`) makes it easy to
    create, develop, test, and deploy Angular applications。'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '- Dependency injection:  Angular has a powerful dependency injection system
    that makes it easy to manage dependencies and separate concerns。'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Structure of an Angular application
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The structure of an Angular application is well defined and follows a modular
    organization。Let's understand the main elements that make up a typical Angular
    project。
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Modules
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: An Angular module is a class decorated with the `@NgModule` decorator。Modules
    organize an application into cohesive, reusable parts。The root module is usually
    called `AppModule`。
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, `AppModule` is the root module that imports `BrowserModule`，declares
    `AppComponent`，and defines the entry point of the bootstrapped application。
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Components
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Components are the foundation of the user interface in Angular。Each component
    is composed of an HTML template, a TypeScript class that defines the logic and
    a CSS style file。
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the example above, `AppComponent` defines a title that is displayed in the
    template。The `app-root` selector is used to embed the component in the application。
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Directives, Services, and Dependency Injection
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Directives
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Directives are classes that can modify the behavior of elements in the DOM。There
    are three main types of directives in Angular:'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '- Attribute directives:  Change the appearance or behavior of an element。'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '- Structural directives:  They change the structure of the DOM by adding or
    removing elements。'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '- Components: Directives with an associated template。'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Example of a `ngIf` structural directive:'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, the text will only be displayed if the expression `show` is
    true。
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`services`'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Services in Angular are classes that encapsulate logic and data that can be
    shared between different components. They are ideal for handling backend operations,
    data manipulation, and business logic.
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Example of a simple service:'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the example above, `DataService` is a service that provides a method to obtain
    data.
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Dependency Injection
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Dependency injection is a design pattern where a class receives its dependencies
    from external sources rather than creating them themselves. Angular makes dependency
    injection easy using decorators like`@Injectable` and Angular's dependency injection
    system.
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Example of dependency injection in a component:'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, `AppComponent` injects `DataService` into the constructor and uses the
    `obterDados` method to fetch data when the component is initialized.
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In this step we explore the fundamentals of Angular, understand the structure
    of an Angular application and discuss directives, services and dependency injection.
    Angular is a powerful tool that allows you to create robust and scalable web applications.
    By mastering these concepts, you will be prepared to develop complex and well-structured
    applications with Angular. Continue to practice and apply this knowledge to achieve
    excellence in web development with this robust framework.
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
