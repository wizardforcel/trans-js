- en: Chapter 12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Angular: Fundamentals and Applications'
  prefs: []
  type: TYPE_NORMAL
- en: Angular is a powerful and complete framework developed by Google for creating
    robust and scalable web applications. Let's explore the fundamentals of Angular,
    understand the structure of an Angular application, and delve into concepts like
    directives, services, and dependency injection. By the end, you will be well equipped
    to start developing with Angular, making the most of its features.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Fundamentals
  prefs: []
  type: TYPE_NORMAL
- en: Angular is a TypeScript-based front-end framework that offers a structured approach
    to developing web applications. Unlike React, which is a library focused on creating
    user interfaces, Angular is a complete framework that includes everything you
    need to build an application from start to finish.
  prefs: []
  type: TYPE_NORMAL
- en: Why use Angular?
  prefs: []
  type: TYPE_NORMAL
- en: '- TypeScript:  Angular is written in TypeScript, which is a superset of JavaScript
    that adds optional static typing. This helps detect errors at compile time and
    improves code maintainability.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Component architecture:  Angular uses a component-based architecture, similar
    to React, allowing the creation of modular and reusable user interfaces.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Integrated tools:  Angular CLI (Command Line Interface) makes it easy to
    create, develop, test, and deploy Angular applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Dependency injection:  Angular has a powerful dependency injection system
    that makes it easy to manage dependencies and separate concerns.'
  prefs: []
  type: TYPE_NORMAL
- en: Structure of an Angular application
  prefs: []
  type: TYPE_NORMAL
- en: The structure of an Angular application is well defined and follows a modular
    organization. Let's understand the main elements that make up a typical Angular
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Modules
  prefs: []
  type: TYPE_NORMAL
- en: An Angular module is a class decorated with the `@NgModule` decorator. Modules
    organize an application into cohesive, reusable parts. The root module is usually
    called `AppModule`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this example, AppModule is the root module that imports BrowserModule, declares
    AppComponent, and defines the entry point of the bootstrapped application.
  prefs: []
  type: TYPE_NORMAL
- en: Components
  prefs: []
  type: TYPE_NORMAL
- en: Components are the foundation of the user interface in Angular. Each component
    is composed of an HTML template, a TypeScript class that defines the logic and
    a CSS style file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the example above, AppComponent defines a title that is displayed in the
    template. The `app-root` selector is used to embed the component in the application.
  prefs: []
  type: TYPE_NORMAL
- en: Directives, Services, and Dependency Injection
  prefs: []
  type: TYPE_NORMAL
- en: Directives
  prefs: []
  type: TYPE_NORMAL
- en: 'Directives are classes that can modify the behavior of elements in the DOM.
    There are three main types of directives in Angular:'
  prefs: []
  type: TYPE_NORMAL
- en: '- Attribute directives:  Change the appearance or behavior of an element.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Structural directives:  They change the structure of the DOM by adding or
    removing elements.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Components: Directives with an associated template.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example of a `ngIf` structural directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the text will only be displayed if the expression `show` is
    true.
  prefs: []
  type: TYPE_NORMAL
- en: services
  prefs: []
  type: TYPE_NORMAL
- en: Services in Angular are classes that encapsulate logic and data that can be
    shared between different components. They are ideal for handling backend operations,
    data manipulation, and business logic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example of a simple service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the example above, DataService is a service that provides a method to obtain
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency Injection
  prefs: []
  type: TYPE_NORMAL
- en: Dependency injection is a design pattern where a class receives its dependencies
    from external sources rather than creating them themselves. Angular makes dependency
    injection easy using decorators like `@Injectable` and Angular's dependency injection
    system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example of dependency injection in a component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here, AppComponent injects DataService into the constructor and uses the `obterDados`
    method to fetch data when the component is initialized.
  prefs: []
  type: TYPE_NORMAL
- en: In this step we explore the fundamentals of Angular, understand the structure
    of an Angular application and discuss directives, services and dependency injection.
    Angular is a powerful tool that allows you to create robust and scalable web applications.
    By mastering these concepts, you will be prepared to develop complex and well-structured
    applications with Angular. Continue to practice and apply this knowledge to achieve
    excellence in web development with this robust framework.
  prefs: []
  type: TYPE_NORMAL
