- en: Chapter 12
  id: totrans-0
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 第12章
- en: 'Angular: Fundamentals and Applications'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: Angular：基础与应用
- en: Angular is a powerful and complete framework developed by `Google` for creating
    robust and scalable web applications。Let's explore the fundamentals of Angular,
    understand the structure of an Angular application, and delve into concepts like
    directives, services, and dependency injection。By the end, you will be well equipped
    to start developing with Angular, making the most of its features。
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: Angular是由`Google`开发的一个强大而完整的框架，用于创建健壮且可扩展的Web应用程序。让我们探讨Angular的基础，理解Angular应用程序的结构，并深入了解指令、服务和依赖注入等概念。到最后，您将能够开始使用Angular开发，充分利用其特性。
- en: Angular Fundamentals
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: Angular基础
- en: Angular is a `TypeScript`-based front-end framework that offers a structured
    approach to developing web applications。Unlike `React`，which is a library focused
    on creating user interfaces，Angular is a complete framework that includes everything
    you need to build an application from start to finish。
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: Angular是一个基于`TypeScript`的前端框架，提供了一种结构化的方法来开发Web应用程序。与专注于创建用户界面的库`React`不同，Angular是一个完整的框架，包含从头到尾构建应用程序所需的一切。
- en: Why use Angular?
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为什么使用Angular？
- en: '- TypeScript:  Angular is written in `TypeScript`，which is a superset of `JavaScript`
    that adds optional static typing。这 helps detect errors at compile time and improves
    code maintainability。'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '- TypeScript：Angular是用`TypeScript`编写的，TypeScript是`JavaScript`的超集，增加了可选的静态类型。这有助于在编译时检测错误，并提高代码的可维护性。'
- en: '- Component architecture:  Angular uses a component-based architecture, similar
    to `React`，allowing the creation of modular and reusable user interfaces。'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '- 组件架构：Angular采用基于组件的架构，类似于`React`，允许创建模块化和可重用的用户界面。'
- en: '- Integrated tools:  Angular CLI (`Command Line Interface`) makes it easy to
    create, develop, test, and deploy Angular applications。'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '- 集成工具：Angular CLI（`命令行界面`）使创建、开发、测试和部署Angular应用程序变得简单。'
- en: '- Dependency injection:  Angular has a powerful dependency injection system
    that makes it easy to manage dependencies and separate concerns。'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '- 依赖注入：Angular有一个强大的依赖注入系统，使管理依赖关系和分离关注变得容易。'
- en: Structure of an Angular application
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: Angular应用程序的结构
- en: The structure of an Angular application is well defined and follows a modular
    organization。Let's understand the main elements that make up a typical Angular
    project。
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: Angular应用程序的结构定义明确，遵循模块化组织。让我们了解构成典型Angular项目的主要元素。
- en: Modules
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 模块
- en: An Angular module is a class decorated with the `@NgModule` decorator。Modules
    organize an application into cohesive, reusable parts。The root module is usually
    called `AppModule`。
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: Angular模块是一个用`@NgModule`装饰器装饰的类。模块将应用程序组织成紧密相关、可重用的部分。根模块通常称为`AppModule`。
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, `AppModule` is the root module that imports `BrowserModule`，declares
    `AppComponent`，and defines the entry point of the bootstrapped application。
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个例子中，`AppModule`是根模块，导入了`BrowserModule`，声明了`AppComponent`，并定义了引导应用程序的入口点。
- en: Components
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 组件
- en: Components are the foundation of the user interface in Angular。Each component
    is composed of an HTML template, a TypeScript class that defines the logic and
    a CSS style file。
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 组件是Angular用户界面的基础。每个组件由一个HTML模板、一个定义逻辑的TypeScript类和一个CSS样式文件组成。
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the example above, `AppComponent` defines a title that is displayed in the
    template。The `app-root` selector is used to embed the component in the application。
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在上面的示例中，`AppComponent`定义了一个在模板中显示的标题。`app-root`选择器用于将组件嵌入到应用程序中。
- en: Directives, Services, and Dependency Injection
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 指令、服务和依赖注入
- en: Directives
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 指令
- en: 'Directives are classes that can modify the behavior of elements in the DOM。There
    are three main types of directives in Angular:'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 指令是可以修改DOM中元素行为的类。Angular中有三种主要类型的指令：
- en: '- Attribute directives:  Change the appearance or behavior of an element。'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '- 属性指令：改变元素的外观或行为。'
- en: '- Structural directives:  They change the structure of the DOM by adding or
    removing elements。'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '- 结构指令：通过添加或删除元素来改变DOM的结构。'
- en: '- Components: Directives with an associated template。'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '- 组件：带有关联模板的指令。'
- en: 'Example of a `ngIf` structural directive:'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`ngIf`结构指令的示例：'
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, the text will only be displayed if the expression `show` is
    true。
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个例子中，只有在表达式`show`为真时，文本才会显示。
- en: '`services`'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`服务`'
- en: Services in Angular are classes that encapsulate logic and data that can be
    shared between different components. They are ideal for handling backend operations,
    data manipulation, and business logic.
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: Angular 中的服务是封装了逻辑和数据的类，这些逻辑和数据可以在不同组件之间共享。它们非常适合处理后台操作、数据处理和业务逻辑。
- en: 'Example of a simple service:'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 简单服务的示例：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the example above, `DataService` is a service that provides a method to obtain
    data.
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在上面的示例中，`DataService` 是一个提供获取数据方法的服务。
- en: Dependency Injection
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 依赖注入
- en: Dependency injection is a design pattern where a class receives its dependencies
    from external sources rather than creating them themselves. Angular makes dependency
    injection easy using decorators like`@Injectable` and Angular's dependency injection
    system.
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 依赖注入是一种设计模式，类通过外部来源接收其依赖项，而不是自己创建它们。Angular 通过使用像 `@Injectable` 的装饰器和 Angular
    的依赖注入系统，使依赖注入变得简单。
- en: 'Example of dependency injection in a component:'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 组件中依赖注入的示例：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, `AppComponent` injects `DataService` into the constructor and uses the
    `obterDados` method to fetch data when the component is initialized.
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这里，`AppComponent` 将 `DataService` 注入构造函数，并在组件初始化时使用 `obterDados` 方法获取数据。
- en: In this step we explore the fundamentals of Angular, understand the structure
    of an Angular application and discuss directives, services and dependency injection.
    Angular is a powerful tool that allows you to create robust and scalable web applications.
    By mastering these concepts, you will be prepared to develop complex and well-structured
    applications with Angular. Continue to practice and apply this knowledge to achieve
    excellence in web development with this robust framework.
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这一步，我们探索 Angular 的基本概念，了解 Angular 应用程序的结构，并讨论指令、服务和依赖注入。Angular 是一个强大的工具，可以让你创建健壮且可扩展的
    web 应用程序。通过掌握这些概念，你将准备好使用 Angular 开发复杂且结构良好的应用程序。继续练习并应用这些知识，以在这个强大的框架中实现卓越的 web
    开发。
