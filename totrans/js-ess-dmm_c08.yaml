- en: '`Chapter 8`'
  id: totrans-0
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`第8章`'
- en: '`Coding Strings and Dates`'
  id: totrans-1
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: '`编码字符串和日期`'
- en: '`IN THIS CHAPTER`'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`在本章中`'
- en: '![Bullet](images/check.png) `Stringing together strings`'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) `连接字符串`'
- en: '![Bullet](images/check.png) `Dealing with dates`'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) `处理日期`'
- en: '![Bullet](images/check.png) `Tinkering with times`'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) `调整时间`'
- en: 尽管你的JavaScript代码在处理网页小玩意（如HTML标签和CSS属性）时会花费大量时间，但它还会执行许多后台工作，这些工作需要操作字符串以及处理日期和时间。为了帮助你完成这些任务，在本章中你将探讨JavaScript的两个内置对象：`String`对象和`Date`对象。你将研究每个对象最重要的属性并掌握最常用的方法。##
    `Manipulating Strings`
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 尽管你的JavaScript代码在处理网页小玩意（如HTML标签和CSS属性）时会花费大量时间，但它还会执行许多后台工作，这些工作需要操作字符串以及处理日期和时间。为了帮助你完成这些任务，在本章中你将探讨JavaScript的两个内置对象：`String`对象和`Date`对象。你将研究每个对象最重要的属性并掌握最常用的方法。##
    `操作字符串`
- en: 到目前为止，我在这本书中使用了数十个字符串的示例。这些示例不仅包括字符串字面量（例如`"JavaScript Essentials For Dummies"`），还包括返回字符串的方法（例如`prompt()`方法）。因此，现在应该清楚，字符串在所有JavaScript编程中扮演着重要角色，几乎没有脚本不以某种方式处理字符串。
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 到目前为止，我在这本书中使用了数十个字符串的示例。这些示例不仅包括字符串字面量（例如`"JavaScript Essentials For Dummies"`），还包括返回字符串的方法（例如`prompt()`方法）。因此，现在应该清楚，字符串在所有JavaScript编程中扮演着重要角色，几乎没有脚本不以某种方式处理字符串。
- en: 出于这个原因，掌握字符串的操作是值得的，包括在字符串中定位文本和从字符串中提取文本。你将在本节中了解到这些内容及更多信息。
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 出于这个原因，掌握字符串的操作是值得的，包括在字符串中定位文本和从字符串中提取文本。你将在本节中了解到这些内容及更多信息。
- en: 你处理的任何字符串——无论是字符串字面量还是返回字符串的方法或函数的结果——都是一个`String`对象。因此，例如，以下两个语句是等效的：
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你处理的任何字符串——无论是字符串字面量还是返回字符串的方法或函数的结果——都是一个`String`对象。因此，例如，以下两个语句是等效的：
- en: '`const bookName = new String("JavaScript Essentials For Dummies"); const bookName
    = "JavaScript Essentials For Dummies";`'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const bookName = new String("JavaScript Essentials For Dummies"); const bookName
    = "JavaScript Essentials For Dummies";`'
- en: 这意味着在应用`String`对象的属性和方法时，你有相当大的灵活性。例如，`String`对象有一个`length`属性，我将在下一节中描述。以下都是使用该属性的合法JavaScript表达式：
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这意味着在应用`String`对象的属性和方法时，你有相当大的灵活性。例如，`String`对象有一个`length`属性，我将在下一节中描述。以下都是使用该属性的合法JavaScript表达式：
- en: '`bookName.length; "JavaScript Essentials For Dummies".length; prompt("Enter
    the book name:").length; myFunction().length;`'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`bookName.length; "JavaScript Essentials For Dummies".length; prompt("Enter
    the book name:").length; myFunction().length;`'
- en: 最后一个示例假设`myFunction()`返回一个字符串值。
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 最后一个示例假设`myFunction()`返回一个字符串值。
- en: '### `Working with string templates`'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '### `使用字符串模板`'
- en: 在深入了解`String`对象的属性和方法之前，花点时间来审视一种特殊类型的字符串，它旨在解决你编程生涯中会反复遇到的三个与字符串相关的问题：
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在深入了解`String`对象的属性和方法之前，花点时间来审视一种特殊类型的字符串，它旨在解决你编程生涯中会反复遇到的三个与字符串相关的问题：
- en: '`Handling internal quotation marks:` 字符串字面量用引号括起来，但当你需要在字符串内部使用相同类型的引号时，该怎么办？'
  id: totrans-16
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`处理内部引号：` 字符串字面量用引号括起来，但当你需要在字符串内部使用相同类型的引号时，该怎么办？'
- en: 一种解决方案是使用不同类型的引号来定界字符串。例如，这样是非法的：
  id: totrans-17
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 一种解决方案是使用不同类型的引号来定界字符串。例如，这样是非法的：
- en: '`''There''s got to be some better way to do this.''`'
  id: totrans-18
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: '`''一定得有更好的方法来做这件事。''`'
- en: 但这样是可以的：
  id: totrans-19
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 但这样是可以的：
- en: '`"There''s got to be some better way to do this."`'
  id: totrans-20
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: '`"一定得有更好的方法来做这件事。"`'
- en: 第二种解决方案是用斜杠转义内部引号，如下所示：
  id: totrans-21
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 第二种解决方案是用斜杠转义内部引号，如下所示：
- en: '`''There\''s got to be some better way to do this.''`'
  id: totrans-22
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: '`''一定得有更好的方法来做这件事。''`'
- en: 这些解决方案效果良好，但`remembering`使用它们比你想象的要困难！
  id: totrans-23
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 这些解决方案效果良好，但`remembering`使用它们比你想象的要困难！
- en: '`Incorporating variable values:` 当你需要在字符串中使用变量的值时，通常会得到一些笨拙的表达式，例如：`const adjective
    = "better"; const lament = "There''s got to be some " + adjective + " way to do
    this.";`'
  id: totrans-24
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`包含变量值：` 当你需要在字符串中使用变量的值时，通常会得到一些笨拙的表达式，例如：`const adjective = "better"; const
    lament = "There''s got to be some " + adjective + " way to do this.";`'
- en: '`Multiline strings:` 它有时用于定义使用多行的字符串。然而，如果你尝试以下操作，你会得到一个 `string literal contains
    an unescaped line break` 错误：`const myHeader = ''<nav class="banner"> <h3 class="nav-heading">Navigation</h3>
    <ul class="nav-links"> <li>Home</li> <li>Away</li> <li>In Between</li> </ul> </nav>''`'
  id: totrans-25
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`多行字符串：` 它有时用于定义使用多行的字符串。然而，如果你尝试以下操作，你会得到一个 `string literal contains an unescaped
    line break` 错误：`const myHeader = ''<nav class="banner"> <h3 class="nav-heading">Navigation</h3>
    <ul class="nav-links"> <li>Home</li> <li>Away</li> <li>In Between</li> </ul> </nav>''`'
- en: 你可以通过使用一个`string template`（也称为`template literal`）来解决所有三个问题，这是一种字符串字面量，其中分隔的引号被反引号（``
    ` ``）替换：
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你可以通过使用一个`string template`（也称为`template literal`）来解决所有三个问题，这是一种字符串字面量，其中分隔的引号被反引号（``
    ` ``）替换：
- en: '`` `*Your string goes here*` ``'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`` `*Your string goes here*` ``'
- en: '![Remember](images/remember.png) 字符串模板是在 ECMAScript 2015 (ES6) 中引入的，因此仅在不需要支持古老的网页浏览器（如
    Internet Explorer 11）时使用它们。'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Remember](images/remember.png) 字符串模板是在 ECMAScript 2015 (ES6) 中引入的，因此仅在不需要支持古老的网页浏览器（如
    Internet Explorer 11）时使用它们。'
- en: 这是你如何使用字符串模板来解决刚刚描述的三个问题：
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是你如何使用字符串模板来解决刚刚描述的三个问题：
- en: '`Handling internal quotation marks:` 你可以在字符串模板中放置任意数量的单引号或双引号： `` `Ah, here''s
    the better way to do this!` ``'
  id: totrans-30
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`处理内部引号：` 你可以在字符串模板中放置任意数量的单引号或双引号： `` `Ah, here''s the better way to do this!`
    ``'
- en: '`Incorporating variable values:` 字符串模板支持一种叫做`variable interpolation`的技术，可以直接在字符串中引用变量值。以下是一个例子：
    ``const adjective = "better"; const paean = `Ah, here''s the ${adjective} way
    to do this!`;``'
  id: totrans-31
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`包含变量值：` 字符串模板支持一种叫做`variable interpolation`的技术，可以直接在字符串中引用变量值。以下是一个例子： ``const
    adjective = "better"; const paean = `Ah, here''s the ${adjective} way to do this!`;``'
- en: 在任何字符串模板中，使用`${*variable*}`会插入`*variable*`的值，毫无疑问。实际上，你不必仅限于变量。字符串模板还可以插入任何JavaScript表达式，包括函数结果。
  id: totrans-32
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 在任何字符串模板中，使用`${*variable*}`会插入`*variable*`的值，毫无疑问。实际上，你不必仅限于变量。字符串模板还可以插入任何JavaScript表达式，包括函数结果。
- en: '`Multiline strings:` 字符串模板乐于与跨越多行的字符串无误地工作： `` const myHeader = `<nav class="banner">
    <h3 class="nav-heading">Navigation</h3> <ul class="nav-links"> <li>Home</li> <li>Away</li>
    <li>In Between</li> </ul> </nav>` ``  ### Determining the length of a string'
  id: totrans-33
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`多行字符串：` 字符串模板乐于与跨越多行的字符串无误地工作： `` const myHeader = `<nav class="banner"> <h3
    class="nav-heading">Navigation</h3> <ul class="nav-links"> <li>Home</li> <li>Away</li>
    <li>In Between</li> </ul> </nav>` ``  ### 确定字符串的长度'
- en: '`String`对象最基本的属性是它的`length`，它告诉你字符串中有多少个字符：'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`String`对象最基本的属性是它的`length`，它告诉你字符串中有多少个字符：'
- en: '`` *string*.length ``'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`` *string*.length ``'
- en: 字符串中的所有字符——包括空格和标点符号——都算作长度。唯一的例外是转义序列（如`\n`），它们始终算作一个字符。以下代码获取各种`String`对象类型的长度属性值。
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 字符串中的所有字符——包括空格和标点符号——都算作长度。唯一的例外是转义序列（如`\n`），它们始终算作一个字符。以下代码获取各种 `String` 对象类型的长度属性值。
- en: '`function myFunction() { return "filename.htm"; } const bookName = "JavaScript
    Essentials For Dummies"; length1 = myFunction().length; // Returns 12 length2
    = bookName.length; // Returns 37 length3 = "123\n5678".length; // Returns 8`'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`function myFunction() { return "filename.htm"; } const bookName = "JavaScript
    Essentials For Dummies"; length1 = myFunction().length; // 返回 12 length2 = bookName.length;
    // 返回 37 length3 = "123\n5678".length; // 返回 8`'
- en: 'What the `String` object lacks in properties, it more than makes up for in
    methods. There are dozens, and they enable your code to perform many useful tasks,
    from converting between uppercase and lowercase letters, to finding text within
    a string, to extracting parts of a string.  ### Searching for substrings'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`String` 对象虽然在属性上有所欠缺，但在方法上却弥补了这一点。它有数十种方法，可以帮助你的代码执行许多有用的任务，从大小写字母转换，到在字符串中查找文本，再到提取字符串的部分内容。
    ### 查找子字符串'
- en: A `substring` is a portion of an existing string. For example, some substrings
    of the string `"JavaScript"` would be `"Java"`，`"Script"`，`"vaSc"`，and `"v"`。When
    working with strings in your scripts, you’ll often have to determine whether a
    given string contains a given substring. For example, if you’re validating a user’s
    email address, you should check that it contains an `@` symbol.
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`substring` 是一个现有字符串的部分。例如，字符串 `"JavaScript"` 的一些子字符串可能是 `"Java"`、`"Script"`、`"vaSc"`
    和 `"v"`。在脚本中处理字符串时，你经常需要确定一个字符串是否包含另一个子字符串。例如，如果你在验证用户的电子邮件地址时，你应该检查其中是否包含 `@`
    符号。'
- en: '[Table 8-1](#c08-tbl-0001) lists the several `String` object methods that find
    substrings within a larger string.'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[表 8-1](#c08-tbl-0001) 列出了几种用于在较大字符串中查找子字符串的 `String` 对象方法。'
- en: '[TABLE 8-1](#rc08-tbl-0001) `String` Object Methods for Searching for Substrings'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[表 8-1](#rc08-tbl-0001) `String` 对象查找子字符串的方法'
- en: '| **Method** | **What It Does** |'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| **方法** | **功能** |'
- en: '| --- | --- |'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `string.endsWith(substring, start)` | Tests whether `substring` appears at
    the end of `string` |'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `string.endsWith(substring, start)` | 检测 `substring` 是否出现在 `string` 的结尾 |'
- en: '| `string.includes(substring, start)` | Tests whether `substring` appears in
    `string` |'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `string.includes(substring, start)` | 检测 `substring` 是否出现在 `string` 中 |'
- en: '| `string.indexOf(substring, start)` | Searches `string` for the first instance
    of `substring` |'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `string.indexOf(substring, start)` | 在 `string` 中搜索第一个出现的 `substring` |'
- en: '| `string.lastIndexOf(substring, start)` | Searches `string` for the last instance
    of `substring` |'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `string.lastIndexOf(substring, start)` | 在 `string` 中搜索最后一个出现的 `substring`
    |'
- en: '| `string.startsWith(substring, start)` | Tests whether `substring` appears
    at the beginning of `string` |  ### Learning the methods that extract substrings'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '| `string.startsWith(substring, start)` | 检测 `substring` 是否出现在 `string` 的开头
    |  ### 学习提取子字符串的方法'
- en: Finding a substring is one thing, but you’ll often have to extract a substring,
    as well. For example, if the user enters an email address, you may need to extract
    just the username (the part to the left of the `@` sign) or the domain name (the
    part to the right of `@`)。For these kinds of operations, JavaScript offers six
    methods, listed in [Table 8-2](#c08-tbl-0002).
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 查找子字符串是一回事，但你经常需要提取子字符串。例如，如果用户输入了一个电子邮件地址，你可能需要提取用户名（`@` 左边的部分）或域名（`@` 右边的部分）。对于这些操作，JavaScript
    提供了六种方法，详见 [表 8-2](#c08-tbl-0002)。
- en: '[TABLE 8-2](#rc08-tbl-0002) `String` Object Methods for Extracting Substrings'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[表 8-2](#rc08-tbl-0002) `String` 对象提取子字符串的方法'
- en: '| **Method** | **What It Does** |'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| **方法** | **功能** |'
- en: '| --- | --- |'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `string.charAt(index)` | Returns the character in `string` that’s at the
    index position specified by `index` |'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `string.charAt(index)` | 返回 `string` 中指定 `index` 位置的字符 |'
- en: '| `string.charCodeAt(index)` | Returns the code of the character in `string`
    that’s at the index position specified by `index` |'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `string.charCodeAt(index)` | 返回 `string` 中指定 `index` 位置字符的编码 |'
- en: '| `string.slice(start, end)` | Returns the substring in `string` that starts
    at the index position specified by `start` and ends immediately before the index
    position specified by `end` |'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `string.slice(start, end)` | 返回 `string` 中从 `start` 索引位置开始、到 `end` 索引位置之前的子字符串
    |'
- en: '| `string.split(separator, limit)` | Returns an array where each item is a
    substring in `string`，where those substrings are separated by the `separator`
    character |'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `string.split(separator, limit)` | 返回一个数组，每个元素是 `string` 中的一个子字符串，这些子字符串由
    `separator` 字符分隔 |'
- en: '| `string.substr(start, length)` | Returns the substring in `string` that starts
    at the index position specified by `start` and is `length` characters long |'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `string.substr(start, length)` | 返回 `string` 中从 `start` 指定的索引位置开始，长度为 `length`
    的子字符串 |'
- en: '| `string.substring(start, end)` | Returns the substring in `string` that starts
    at the index position specified by `start` and ends immediately before the index
    position specified by `end` |  ## Dealing with Dates and Times'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '| `string.substring(start, end)` | 返回 `string` 中从 `start` 指定的索引位置开始，并在 `end`
    指定的索引位置前结束的子字符串 | ## 处理日期和时间'
- en: Dates and times seem like the kind of things that ought to be straightforward
    programming propositions. After all, there are only 12 months in a year, 28 to
    31 days in a month, seven days in a week, 24 hours in a day, 60 minutes in an
    hour, and 60 seconds in a minute. Surely something so set in stone couldn’t get
    even the least bit weird, could it?
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 日期和时间看起来应该是直截了当的编程命题。毕竟，一年只有 12 个月，一个月有 28 到 31 天，一周有 7 天，一天有 24 小时，一小时有 60
    分钟，一分钟有 60 秒。难道如此固定的东西竟然会变得有些奇怪吗？
- en: 'You’d be surprised. Dates and times `can` get strange, but they get much easier
    to deal with if you always keep three crucial points in mind:'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你可能会感到惊讶。日期和时间`可以`变得很奇怪，但如果你始终记住三个关键点，它们会变得更容易处理：
- en: JavaScript time is measured in milliseconds, or thousandths of a second. More
    specifically, JavaScript measures time by counting the number of milliseconds
    that elapsed between January 1, 1970 and the date and time in question. So, for
    example, `you` might come across the date January 1, 2001, and think, “Ah, yes,
    the start of the new millennium.” `JavaScript`, however, comes across that date
    and thinks `978220800000`.
  id: totrans-61
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: JavaScript 时间以毫秒为单位，或者说是千分之一秒。更具体地说，JavaScript 通过计算从 1970 年 1 月 1 日到当前日期和时间之间经过的毫秒数来衡量时间。所以，举个例子，`你`
    可能会遇到 2001 年 1 月 1 日，并且想，“啊，是的，新千年的开始。”然而，`JavaScript` 看到这个日期时，它看到的是 `978220800000`。
- en: In the JavaScript world, time began on January 1, 1970, at midnight Greenwich
    Mean Time. Dates before that have `negative` values in milliseconds.
  id: totrans-62
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 在 JavaScript 的世界里，时间从 1970 年 1 月 1 日格林威治标准时间午夜开始。那之前的日期在毫秒数上是 `负` 值。
- en: Because your JavaScript programs run inside a user’s browser, dates and times
    are almost always the user’s `local` dates and times. That is, the dates and times
    your scripts will manipulate will `not` be those of the server on which your page
    resides. This means that you can never know what time the user is viewing your
    page.
  id: totrans-63
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 因为你的 JavaScript 程序运行在用户的浏览器中，所以日期和时间几乎总是用户的 `本地` 日期和时间。也就是说，你的脚本处理的日期和时间`不是`托管页面的服务器上的日期和时间。这意味着你永远无法知道用户在何时查看你的页面。
- en: '### Learning the arguments used with the Date object'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '### 学习 Date 对象的参数'
- en: Before getting to the nitty-gritty of the `Date` object and its associated methods,
    I’ll take a second to run through the various arguments that JavaScript requires
    for many date-related features. This will save me from repeating these arguments
    tediously later on. [Table 8-3](#c08-tbl-0003) has the details.
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在深入了解 `Date` 对象及其相关方法之前，我会先简单讲解 JavaScript 在许多与日期相关的功能中所需的各个参数。这样可以避免之后重复冗长地提到这些参数。[表
    8-3](#c08-tbl-0003) 提供了详细信息。
- en: '[TABLE 8-3](#rc08-tbl-0003) Arguments Associated with the Date Object'
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[表 8-3](#rc08-tbl-0003) 与 Date 对象相关的参数'
- en: '| **Argument** | **What It Represents** | **Possible Values** |'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| **参数** | **表示的内容** | **可能的值** |'
- en: '| --- | --- | --- |'
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `date` | A variable name | A `Date` object |'
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `date` | 变量名 | `Date` 对象 |'
- en: '| `yyyy` | The year | Four-digit integers |'
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `yyyy` | 年份 | 四位数的整数 |'
- en: '| `yy` | The year | Two-digit integers |'
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `yy` | 年份 | 两位数的整数 |'
- en: '| `month` | The month | The full month name from `"January"` to `"December"`
    |'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `month` | 月份 | 从 `"January"` 到 `"December"` 的完整月份名称 |'
- en: '| `mth` | The month | Integers from 0 (January) to 11 (December) |'
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `mth` | 月份 | 从 0（1 月）到 11（12 月）的整数 |'
- en: '| `dd` | The day of the month | Integers from 1 to 31 |'
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `dd` | 月中的天数 | 从 1 到 31 的整数 |'
- en: '| `hh` | The hour of the day | Integers from 0 (midnight) to 23 (11:00 PM)
    |'
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `hh` | 一天中的小时 | 从 0（午夜）到 23（23:00）的整数 |'
- en: '| `mm` | The minute of the hour | Integers from 0 to 59 |'
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `mm` | 小时中的分钟 | 从 0 到 59 的整数 |'
- en: '| `ss` | The second of the minute | Integers from 0 to 59 |'
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `ss` | 分钟中的秒数 | 从 0 到 59 的整数 |'
- en: '| `ms` | The milliseconds of the second | Integers from 0 to 999 |  ### Getting
    to know the Date object'
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '| `ms` | 秒的毫秒数 | 从 0 到 999 的整数 | ### 了解 Date 对象'
- en: 每当你在JavaScript中处理日期和时间时，你都在处理一个`Date`对象的实例。更准确地说，当你在JavaScript中处理`Date`对象时，你是在处理一个特定的时间点，精确到毫秒。`Date`对象绝不会是一个时间段，也不是一个在脚本运行时一直走的时钟。相反，`Date`对象是一个时间的快照，你可以用来提取它所记录的时间的具体信息：年份、月份、日期、小时等等。
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 每当你在JavaScript中处理日期和时间时，你都在处理一个`Date`对象的实例。更准确地说，当你在JavaScript中处理`Date`对象时，你是在处理一个特定的时间点，精确到毫秒。`Date`对象绝不会是一个时间段，也不是一个在脚本运行时一直走的时钟。相反，`Date`对象是一个时间的快照，你可以用来提取它所记录的时间的具体信息：年份、月份、日期、小时等等。
- en: '#### 指定当前的日期和时间'
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '#### 指定当前的日期和时间'
- en: '`Date`对象最常见的用途是存储当前的日期和时间。你可以通过调用`Date()`函数来实现，这个函数是创建新的`Date`对象的构造函数。以下是一般格式：'
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Date`对象最常见的用途是存储当前的日期和时间。你可以通过调用`Date()`函数来实现，这个函数是创建新的`Date`对象的构造函数。以下是一般格式：'
- en: '`const dateToday = new Date();`  #### 指定任何日期和时间'
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const dateToday = new Date();`  #### 指定任何日期和时间'
- en: 如果你需要处理特定的日期或时间，需要使用`Date()`函数的参数。`Date()`函数语法有五种版本（请参考本章开头的参数列表）：
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你需要处理特定的日期或时间，需要使用`Date()`函数的参数。`Date()`函数语法有五种版本（请参考本章开头的参数列表）：
- en: '`const date = new Date("month dd, yyyy hh:mm:ss"); const date = new Date("month
    dd, yyyy"); const date = new Date(yyyy, mth, dd, hh, mm, ss); const date = new
    Date(yyyy, mth, dd); const date = new Date(ms);`'
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const date = new Date("month dd, yyyy hh:mm:ss"); const date = new Date("month
    dd, yyyy"); const date = new Date(yyyy, mth, dd, hh, mm, ss); const date = new
    Date(yyyy, mth, dd); const date = new Date(ms);`'
- en: 以下语句为每种语法提供了一个示例：
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下语句为每种语法提供了一个示例：
- en: '`const myDate = new Date("August 23, 2024 3:02:01"); const myDate = new Date("August
    23, 2024"); const myDate = new Date(2024, 8, 23, 3, 2, 1); const myDate = new
    Date(2024, 8, 23); const myDate = new Date(1692763200000);`  ### 获取日期信息'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const myDate = new Date("August 23, 2024 3:02:01"); const myDate = new Date("August
    23, 2024"); const myDate = new Date(2024, 8, 23, 3, 2, 1); const myDate = new
    Date(2024, 8, 23); const myDate = new Date(1692763200000);`  ### 获取日期信息'
- en: 当你的脚本简单地输出你存储在变量中的`Date`对象值时，结果并不是特别美观。如果你想以更吸引人的格式显示日期，或者想对日期进行算术运算，你需要深入挖掘`Date`对象，以提取特定信息，比如月份、年份、小时等。你可以使用在[表8-4](#c08-tbl-0004)中列出的`Date`对象方法来实现这一点。
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当你的脚本简单地输出你存储在变量中的`Date`对象值时，结果并不是特别美观。如果你想以更吸引人的格式显示日期，或者想对日期进行算术运算，你需要深入挖掘`Date`对象，以提取特定信息，比如月份、年份、小时等。你可以使用在[表8-4](#c08-tbl-0004)中列出的`Date`对象方法来实现这一点。
- en: '[TABLE 8-4](#rc08-tbl-0004) `Date`对象方法，用于提取日期值'
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[TABLE 8-4](#rc08-tbl-0004) `Date`对象方法，用于提取日期值'
- en: '| `**Method Syntax**` | `**What It Returns**` |'
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `**方法语法**` | `**返回值**` |'
- en: '| --- | --- |'
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `date.getFullYear()` | 四位数的年份（1999, 2000，等等） |'
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `date.getFullYear()` | 四位数的年份（1999，2000，等等） |'
- en: '| `date.getMonth()` | 这一年的月份；从0（1月）到11（12月） |'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `date.getMonth()` | 这一年的月份；从0（1月）到11（12月） |'
- en: '| `date.getDate()` | 月份中的日期；从1到31 |'
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `date.getDate()` | 月份中的日期；从1到31 |'
- en: '| `date.getDay()` | 一周中的天；从0（星期天）到6（星期六） |'
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `date.getDay()` | 一周中的天；从0（星期天）到6（星期六） |'
- en: '| `date.getHours()` | 一天中的小时；从0（午夜）到23（11:00 PM） |'
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `date.getHours()` | 一天中的小时；从0（午夜）到23（11:00 PM） |'
- en: '| `date.getMinutes()` | 这一小时的分钟；从0到59 |'
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `date.getMinutes()` | 这一小时的分钟；从0到59 |'
- en: '| `date.getSeconds()` | 这一分钟的秒；从0到59 |'
  id: totrans-97
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `date.getSeconds()` | 这一分钟的秒；从0到59 |'
- en: '| `date.getMilliseconds()` | 这一秒的毫秒；从0到999 |'
  id: totrans-98
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `date.getMilliseconds()` | 这一秒的毫秒；从0到999 |'
- en: '| `date.getTime()` | 自1970年1月1日格林威治时间以来的毫秒数 |  ### 设置日期'
  id: totrans-99
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '| `date.getTime()` | 自1970年1月1日格林威治时间以来的毫秒数 |  ### 设置日期'
- en: When you perform date arithmetic, you often have to change the value of an existing
    ``Date`` object. For example, an e-commerce script may have to calculate a date
    that is 90 days from the date that a sale occurs. It’s usually easiest to create
    a ``Date`` object and then use an expression or literal value to change the year,
    month, or some other component of the date. You do that by using the ``Date``
    object methods listed in [Table 8-5](#c08-tbl-0005).
  id: totrans-100
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当你执行日期运算时，你通常需要更改现有``Date``对象的值。例如，一个电子商务脚本可能需要计算一个距离销售发生日期90天的日期。通常最简单的方法是创建一个``Date``对象，然后使用表达式或字面量值来更改年份、月份或日期的其他组成部分。你可以通过使用在[表8-5](#c08-tbl-0005)中列出的``Date``对象方法来实现这一点。
- en: '[TABLE 8-5](#rc08-tbl-0005) Date Object Methods That Set Date Values'
  id: totrans-101
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[TABLE 8-5](#rc08-tbl-0005) `Date`对象方法，设置日期值'
- en: '| **Method Syntax** | **What It Sets** |'
  id: totrans-102
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| **方法语法** | **设置值** |'
- en: '| --- | --- |'
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| ``date``.setFullYear(`yyyy`) | The year as a four-digit number (1999, 2000,
    and so on) |'
  id: totrans-104
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``date``.setFullYear(`yyyy`) | 四位数的年份（1999，2000，等等） |'
- en: '| ``date``.setMonth(`mth`) | The month of the year; from 0 (January) to 11
    (December) |'
  id: totrans-105
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``date``.setMonth(`mth`) | 这一年的月份；从0（1月）到11（12月） |'
- en: '| ``date``.setDate(`dd`) | The date in the month; from 1 to 31 |'
  id: totrans-106
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``date``.setDate(`dd`) | 月份中的日期；从1到31 |'
- en: '| ``date``.setHours(`hh`) | The hour of the day; from 0 (midnight) to 23 (11:00
    PM) |'
  id: totrans-107
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``date``.setHours(`hh`) | 一天中的小时；从0（午夜）到23（11:00 PM） |'
- en: '| ``date``.setMinutes(`mm`) | The minute of the hour; from 0 to 59 |'
  id: totrans-108
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``date``.setMinutes(`mm`) | 小时中的分钟；从0到59 |'
- en: '| ``date``.setSeconds(`ss`) | The second of the minute; from 0 to 59 |'
  id: totrans-109
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``date``.setSeconds(`ss`) | 分钟中的秒；从0到59 |'
- en: '| ``date``.setMilliseconds(`ms`) | The milliseconds of the second; from 0 to
    999 |'
  id: totrans-110
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``date``.setMilliseconds(`ms`) | 秒中的毫秒；从0到999 |'
- en: '| ``date``.setTime(`ms`) | The milliseconds since January 1, 1970 GMT |'
  id: totrans-111
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ``date``.setTime(`ms`) | 自1970年1月1日格林威治时间以来的毫秒数 |'
