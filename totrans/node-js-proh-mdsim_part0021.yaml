- en: JAVASCRIPT
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JAVASCRIPT
- en: 'Chapter 1: Introduction to JavaScript'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章：JavaScript 入门
- en: Welcome to the exciting world of JavaScript! In this chapter, we will embark
    on a journey to explore the fundamentals of JavaScript programming. We'll cover
    the basics of what JavaScript is, its role in web development, and how it interacts
    with HTML and CSS.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到 JavaScript 的精彩世界！在本章中，我们将踏上探索 JavaScript 编程基础的旅程。我们将介绍 JavaScript 的基本概念、它在
    Web 开发中的角色，以及它如何与 HTML 和 CSS 交互。
- en: 1.1 What is JavaScript?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.1 什么是 JavaScript？
- en: JavaScript is a high-level, interpreted programming language primarily used
    for adding interactivity to websites. Unlike HTML and CSS, which focus on the
    structure and presentation of web pages, JavaScript enables dynamic and responsive
    behavior. It allows you to create interactive elements, handle user input, manipulate
    content on the page, and much more.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是一种高级的、解释型编程语言，主要用于为网站增加交互性。与专注于网页结构和表现的 HTML 和 CSS 不同，JavaScript
    使网页能够实现动态和响应式的行为。它允许你创建交互元素、处理用户输入、操作页面内容等。
- en: JavaScript is a versatile language that has evolved over the years, gaining
    widespread adoption and becoming an integral part of modern web development. It
    is supported by all major web browsers and can be used for a variety of purposes,
    ranging from simple website enhancements to complex web applications.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是一种多功能的语言，随着时间的推移不断发展，广泛应用并成为现代 Web 开发的核心部分。它被所有主流浏览器支持，且可以用于各种目的，从简单的网站增强功能到复杂的
    Web 应用程序。
- en: 1.2 A Brief History of JavaScript
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.2 JavaScript 简史
- en: To understand JavaScript better, let's take a brief look at its history. JavaScript
    was created by Brendan Eich in 1995 while he was working at Netscape Communications.
    Initially named "LiveScript," it was later renamed JavaScript to leverage the
    popularity of Java at that time. The language was designed to provide a way to
    add interactivity to web pages and bring a programming capability to the browser.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解 JavaScript，我们简要回顾一下它的历史。JavaScript 由 Brendan Eich 在 1995 年创立，当时他在 Netscape
    Communications 工作。最初命名为“LiveScript”，后来为了利用当时 Java 的流行而更名为 JavaScript。该语言的设计目的是为网页添加交互性，并为浏览器带来编程能力。
- en: Over the years, JavaScript has undergone significant advancements. The ECMAScript
    standard, which defines the language's specifications, has seen several versions,
    each introducing new features and improvements. Modern JavaScript, also known
    as ECMAScript 6 (ES6) and beyond, offers powerful features that make development
    more efficient and enjoyable.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，JavaScript 经历了重大的发展。定义语言规范的 ECMAScript 标准已经发布了多个版本，每个版本都引入了新的特性和改进。现代 JavaScript，也被称为
    ECMAScript 6（ES6）及以后的版本，提供了强大的功能，使开发更加高效和愉快。
- en: 1.3 JavaScript and Web Development
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.3 JavaScript 与 Web 开发
- en: JavaScript plays a crucial role in modern web development. It is primarily used
    on the client-side, meaning it runs directly in the web browser. This allows JavaScript
    to interact with the Document Object Model (DOM), a representation of the web
    page's structure, and manipulate its elements in real-time. By leveraging JavaScript,
    web developers can create dynamic, interactive websites that respond to user actions.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 在现代网页开发中扮演着至关重要的角色。它主要用于客户端脚本，也就是说它直接在网页浏览器中运行。这使得 JavaScript 能够与文档对象模型（DOM）交互，DOM
    是网页结构的表现形式，并实时操作其中的元素。通过利用 JavaScript，网页开发者可以创建动态、交互式的网站，响应用户的操作。
- en: In addition to client-side scripting, JavaScript has expanded its reach to other
    areas of web development. With the introduction of Node.js, JavaScript can now
    be used on the server-side as well. This enables developers to build full-stack
    applications using a single programming language, simplifying the development
    process and improving code reusability.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 除了客户端脚本编程，JavaScript 还扩展到了其他网页开发领域。随着 Node.js 的出现，JavaScript 现在也可以用于服务器端。这使得开发者能够使用一种编程语言构建全栈应用程序，简化了开发过程并提高了代码的重用性。
- en: 1.4 Setting Up Your Development Environment
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.4 设置开发环境
- en: Before diving into JavaScript coding, it's essential to set up a suitable development
    environment. Having the right tools and a comfortable setup can greatly enhance
    your productivity as a developer. Let's go through the steps of setting up your
    JavaScript development environment.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入学习 JavaScript 编程之前，设置一个合适的开发环境是至关重要的。拥有合适的工具和舒适的开发环境能够大大提高你的开发效率。接下来，我们将介绍如何设置你的
    JavaScript 开发环境。
- en: First, you'll need a text editor to write your code. There are many options
    available, ranging from lightweight editors to feature-rich integrated development
    environments (IDEs). Some popular choices among developers include Visual Studio
    Code, Sublime Text, Atom, and WebStorm. Choose the one that suits your preferences
    in terms of features, ease of use, and customization options.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要一个文本编辑器来编写代码。有许多可选的编辑器，从轻量级的编辑器到功能丰富的集成开发环境（IDE）都有。开发者中一些流行的选择包括 Visual
    Studio Code、Sublime Text、Atom 和 WebStorm。选择一个符合你需求的编辑器，考虑其功能、易用性和自定义选项。
- en: Once you have a text editor, you'll need a web browser to run and test your
    JavaScript code. All modern web browsers, such as Chrome, Firefox, Safari, and
    Edge, have built-in JavaScript engines that can execute your code. It's a good
    practice to test your code on multiple browsers to ensure compatibility.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了文本编辑器，你还需要一个网页浏览器来运行和测试你的 JavaScript 代码。所有现代网页浏览器，如 Chrome、Firefox、Safari
    和 Edge，都内置了 JavaScript 引擎，可以执行你的代码。最好在多个浏览器上测试代码，以确保兼容性。
- en: In addition to a text editor and a web browser, you may find it helpful to use
    developer tools provided by browsers. These tools offer a range of features for
    debugging, inspecting elements, monitoring network requests, and more. Most browsers
    have their own set of developer tools accessible through keyboard shortcuts or
    menu options.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 除了文本编辑器和网页浏览器，你可能还会发现使用浏览器提供的开发者工具非常有帮助。这些工具提供了多种功能，如调试、检查元素、监控网络请求等。大多数浏览器都有自己的开发者工具，可以通过快捷键或菜单选项访问。
- en: Finally, you may want to consider using version control software, such as Git,
    to manage your code and collaborate with others. Git allows you to track changes
    to your codebase, create branches for feature development, and easily collaborate
    with other developers. Platforms like GitHub, GitLab, and Bitbucket provide hosting
    services for Git repositories, making it convenient to share your code and work
    together with a team.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可能需要考虑使用版本控制软件，如 Git，来管理代码并与他人协作。Git 让你可以跟踪代码库的变化，创建分支以进行功能开发，并与其他开发者轻松协作。像
    GitHub、GitLab 和 Bitbucket 这样的平台提供 Git 仓库的托管服务，使得分享代码和团队协作变得更加方便。
- en: 1.5 Running JavaScript Code
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.5 运行 JavaScript 代码
- en: 'Now that your development environment is set up, let''s explore how to run
    JavaScript code. JavaScript code can be executed in two ways: inline within an
    HTML file or in an external JavaScript file. While inline JavaScript has its use
    cases, it''s generally recommended to place JavaScript code in an external file
    and link it to your HTML file using the `<script>` tag. This separation of concerns
    helps maintain a clean and organized code structure.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的开发环境已经设置好，让我们来探索如何运行 JavaScript 代码。JavaScript 代码可以通过两种方式执行：内嵌在 HTML 文件中或在外部
    JavaScript 文件中执行。虽然内嵌 JavaScript 有其应用场景，但通常建议将 JavaScript 代码放在外部文件中，并通过 `<script>`
    标签将其链接到 HTML 文件。这种关注点分离有助于保持代码结构的清晰和组织性。
- en: 'To include an external JavaScript file, you can use the following syntax in
    your HTML file:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要包含一个外部 JavaScript 文件，你可以在 HTML 文件中使用以下语法：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, we include an external JavaScript file by using the `<script>`
    tag and specifying the `src` attribute with the path to the JavaScript file. The
    browser will load and execute the JavaScript code when it encounters this tag,
    allowing you to separate your HTML and JavaScript code for better organization
    and maintainability.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们通过使用 `<script>` 标签并指定 `src` 属性来包含一个外部 JavaScript 文件，路径指向 JavaScript
    文件。当浏览器遇到这个标签时，它会加载并执行 JavaScript 代码，从而使你能够将 HTML 和 JavaScript 代码分开，以便更好的组织和维护。
- en: 1.6 Your First JavaScript Program
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.6 你的第一个 JavaScript 程序
- en: 'Let''s dive right into coding! In JavaScript, the traditional "Hello, World!"
    program can be written as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们直接开始编写代码吧！在 JavaScript 中，传统的“Hello, World!”程序可以这样写：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, we use the `console.log()` function to display the message "Hello, World!"
    in the browser's console. The console serves as a useful tool for debugging and
    printing outputs during development. By using `console.log()`, you can inspect
    variables, trace the flow of your code, and troubleshoot any issues that may arise.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用 `console.log()` 函数在浏览器控制台中显示消息 "Hello, World!"。控制台作为一个有用的工具，在开发过程中用于调试和打印输出。通过使用
    `console.log()`，你可以检查变量，追踪代码的执行流程，并排查可能出现的问题。
- en: The console is not the only way to interact with JavaScript code. You can also
    display output directly on the web page itself by manipulating the DOM. For example,
    you can use the `document.getElementById()` function to select an element on the
    page and modify its content dynamically.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台并不是与 JavaScript 代码交互的唯一方式。你还可以通过操作 DOM 直接在网页上显示输出。例如，你可以使用 `document.getElementById()`
    函数选择页面上的一个元素，并动态修改其内容。
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, we select the `<h1>` element with the `id` attribute of "output"
    and update its content using the `textContent` property. When the page loads,
    the JavaScript code will execute, and the text "Hello, JavaScript!" will replace
    the initial "Hello, World!" text within the `<h1>` element.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们选择具有 `id` 属性值为 "output" 的 `<h1>` 元素，并使用 `textContent` 属性更新其内容。当页面加载时，JavaScript
    代码将执行，文本 "Hello, JavaScript!" 将替换 `<h1>` 元素中最初的 "Hello, World!" 文本。
- en: 1.7 Variables and Data Types
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.7 变量与数据类型
- en: Variables are fundamental building blocks in any programming language. They
    allow you to store and manipulate data. In JavaScript, you can declare variables
    using the `var`, `let`, or `const` keywords. Let's explore each of these keywords
    and their characteristics.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 变量是任何编程语言中的基本构件块。它们允许你存储和操作数据。在 JavaScript 中，你可以使用 `var`、`let` 或 `const` 关键字来声明变量。让我们探索每个关键字及其特点。
- en: The `var` keyword was historically used to declare variables in JavaScript.
    It has function-level scope, meaning a variable declared with `var` is accessible
    within the function in which it is defined. However, it can also be accessed outside
    the function if it's not explicitly declared within a function.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`var` 关键字在历史上用于声明 JavaScript 中的变量。它具有函数级作用域，这意味着用 `var` 声明的变量仅在其定义的函数内部可访问。然而，如果没有在函数内部显式声明，它也可以在函数外部访问。'
- en: With the introduction of ES6, the `let` and `const` keywords were introduced
    to address some of the shortcomings of `var` and provide block-level scope. Variables
    declared with `let` are block-sc oped. They are limited in scope to the block
    in which they are defined, such as within a loop or an if statement. This helps
    prevent variable name collisions and promotes better code organization.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 ES6 的引入，`let` 和 `const` 关键字被引入，以解决 `var` 的一些缺陷，并提供块级作用域。用 `let` 声明的变量是块级作用域的。它们的作用域仅限于定义它们的块级结构，如循环或
    if 语句。这有助于防止变量名冲突，并促进更好的代码组织。
- en: 'On the other hand, variables declared with the `const` keyword are also block-scoped
    but have an additional characteristic: they are constants. Once a value is assigned
    to a constant, it cannot be reassigned or modified. Constants are useful when
    you have values that should remain unchanged throughout your code.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，使用 `const` 关键字声明的变量也是块级作用域，但有一个额外的特点：它们是常量。一旦给常量赋值，就不能重新赋值或修改。常量在代码中用于那些值应该始终保持不变的场合。
- en: 'When declaring variables, it''s important to consider the data type of the
    values they will hold. JavaScript has several built-in data types, including:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明变量时，考虑它们将要存储的值的数据类型非常重要。JavaScript 有几种内建的数据类型，包括：
- en: '- Strings: Used to represent text and enclosed in single or double quotation
    marks. For example, `"Hello, World!"` or `''JavaScript''`.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '- 字符串：用于表示文本，并用单引号或双引号括起来。例如，`"Hello, World!"` 或 `''JavaScript''`。'
- en: '- Numbers: Used to represent numeric values, both integers and floating-point
    numbers. For example, `42` or `3.14`.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '- 数字：用于表示数值，包括整数和浮点数。例如，`42` 或 `3.14`。'
- en: '- Booleans: Used to represent logical values, either `true` or `false`. Booleans
    are often used in conditional statements and comparisons.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '- 布尔值：用于表示逻辑值，`true` 或 `false`。布尔值通常用于条件语句和比较操作。'
- en: '- Arrays: Used to store multiple values in a single variable. Arrays can contain
    elements of any data type and are denoted by square brackets. For example, `["apple",
    "banana", "orange"]`.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '- 数组：用于在单个变量中存储多个值。数组可以包含任何数据类型的元素，并且用方括号表示。例如，`["apple", "banana", "orange"]`。'
- en: '- Objects: Used to store collections of key-value pairs. Objects are denoted
    by curly braces and can hold properties and methods. For example, `{ name: "John",
    age: 30 }`.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '- 对象：用于存储键值对集合。对象用花括号表示，并可以包含属性和方法。例如，`{ name: "John", age: 30 }`。'
- en: JavaScript is a dynamically typed language, meaning you don't need to explicitly
    specify the data type of a variable when declaring it. The type of a variable
    is determined automatically based on the value assigned to it. This flexibility
    allows you to work with different data types within the same variable throughout
    your code.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是一种动态类型语言，这意味着在声明变量时无需显式指定变量的数据类型。变量的类型是根据赋给它的值自动确定的。这种灵活性使得你可以在同一变量中处理不同的数据类型，贯穿整个代码。
- en: You can perform various operations on variables, such as mathematical calculations,
    string concatenation, and logical comparisons. JavaScript provides a wide range
    of operators, including arithmetic operators (+, -, *, /), string operators (+),
    comparison operators (>, <, ===), and logical operators (&&, ||, !).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以对变量执行各种操作，如数学计算、字符串连接和逻辑比较。JavaScript 提供了多种运算符，包括算术运算符（+、-、*、/）、字符串运算符（+）、比较运算符（>、<、===）和逻辑运算符（&&、||、!）。
- en: Understanding variables and data types is crucial as they form the foundation
    of JavaScript programming. With this knowledge, you can begin writing more complex
    programs, manipulate data dynamically, and build interactive web applications.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 理解变量和数据类型至关重要，因为它们构成了 JavaScript 编程的基础。掌握这些知识后，你可以开始编写更复杂的程序，动态地处理数据，并构建交互式网页应用。
- en: 'This concludes Chapter 1 of "The World of JavaScript: A Beginner''s Guide to
    Web Development." In this chapter, we provided an overview of JavaScript, its
    history, and its importance in web development. We also set up our development
    environment and wrote our first JavaScript program. Finally, we introduced variables
    and data types.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着《JavaScript的世界：Web开发初学者指南》第一章的结束。在这一章中，我们概述了 JavaScript 的基本概念、历史以及它在网页开发中的重要性。我们还设置了开发环境并编写了我们的第一个
    JavaScript 程序。最后，我们介绍了变量和数据类型。
- en: In the next chapter, we will delve deeper into JavaScript syntax, operators,
    and expressions. Get ready to enhance your JavaScript skills and take the next
    step towards becoming a proficient web developer!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨 JavaScript 语法、运算符和表达式。准备好提升你的 JavaScript 技能，迈出成为熟练网页开发者的下一步！
