- en: 作用域
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: 作用域是计算机科学领域中的一个概念，指的是程序中可以访问特定变量、函数等的部分。换句话说，标识符（变量、函数等）的作用域是程序中可见或可引用的部分。
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 现代JavaScript有四种主要的作用域类型，具体如下：
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 全局作用域
  id: totrans-3
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 函数作用域
  id: totrans-4
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 块作用域
  id: totrans-5
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 模块作用域
  id: totrans-6
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 在讨论上述JavaScript中的作用域类型之前，我们需要理解什么是“词法”作用域。
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 词法作用域
  id: totrans-8
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: 在JavaScript中，不同标识符（变量、函数等）的作用域是在**编译时**确定的。在编译过程中，JavaScript引擎通过分析代码结构来确定在代码中声明的不同标识符的作用域。这意味着在JavaScript代码的逐步执行开始之前，JavaScript引擎会确定代码中不同声明的作用域。
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 作用域可以嵌套在其他作用域内，每个嵌套的作用域都有权访问外部或父作用域。
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 在上述代码示例中，有三种不同的声明：
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``myName``变量声明'
  id: totrans-13
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '``hello``函数声明'
  id: totrans-14
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '``greeting``变量声明'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 上述声明的作用域取决于它们在代码结构中的书写位置。``myName``变量和``hello``函数都处于全局作用域，因此在上述代码中全局可用。``greeting``变量声明在``hello``函数内部，因此其作用域是局部于``hello``函数。
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这种作用域在编译时通过分析代码结构确定，称为词法作用域。JavaScript并不是唯一拥有词法作用域的语言。其他语言，如Java，也有词法作用域。
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: :::info
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 词法作用域也称为“静态”作用域。另一种类型的作用域是[动态作用域](https://en.wikipedia.org/wiki/Scope_(computer_science)#Lexical_scope_vs._dynamic_scope)。
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: ':::'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 全局作用域通常是包含所有其他嵌套作用域的最外层作用域。每个嵌套作用域都有权访问全局作用域。在JavaScript中，全局作用域是浏览器窗口，或更准确地说，是浏览器窗口标签。全局作用域通过``window``对象暴露给JavaScript代码。
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 使用``var``关键字创建的变量或在全局作用域中声明的函数声明被添加为``window``对象的属性。以下代码示例验证了这一说法：
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 如果``todoList``是使用``let``或``const``声明的，它就不会作为``window``对象的属性被添加，但它仍然是一个全局变量。同样，如果``emptyTodoList``是函数表达式而不是函数声明，并且引用这个函数表达式的标识符是使用``let``或``const``声明的，它也不会作为``window``对象的属性。相反，它只是一个全局函数表达式。
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 避免污染全局作用域
  id: totrans-26
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: '*“避免污染全局作用域”* - 作为一名`JavaScript`开发者，你要么已经听过这个建议，要么迟早会从某人那里听到。但“污染”全局作用域究竟意味着什么？为什么应该避免它？'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 声明所有内容（不必要地）在全局作用域中被视为“污染”全局作用域。全局作用域中声明过多可能导致不必要的问题。
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 全局作用域是所有其他作用域的父作用域；因此，全局作用域中的声明对所有其他作用域都是可见的。这可能导致变量名称冲突、遮蔽等问题。全局作用域的另一个特点是，直到应用程序关闭，它才会被销毁，因此如果我们不小心，全局作用域中的声明可能会一直保留在内存中，无论它们是否需要，直到应用程序关闭。
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 说到这里，全局作用域中的声明通常是不可避免的。因此，我们能做的就是尽量避免全局作用域。将全局声明保持在最低限度。如果一个变量仅在函数内部使用，就没有必要在全局作用域中声明它。
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 所以，如果你之前没听说过，现在你听到了：“*避免污染全局作用域*。”
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Implicit globals`'
  id: totrans-32
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: '`JavaScript`作为一种语言有许多怪癖。其中之一是隐式创建全局变量。每当对一个*未声明*变量进行赋值时，`JavaScript`会将该未声明的变量声明为一个**全局**变量。这很可能是程序员的错误，而`JavaScript`并不抛出错误，而是通过自动声明一个同名的全局变量来隐藏这一点。'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 下面是上面代码在`Replit`中的实际运行：
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<ReplitEmbed src="https://replit.com/@newlineauthors/global-scope-example3"
    />`'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 注意，`result`变量并未被声明。它被赋值为乘法结果，仿佛它已经被声明。正常情况下，人们会期待在这种情况下抛出错误，但`JavaScript`会为你将`result`声明为全局变量。
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 需要提到的是，这种奇怪的行为仅在非严格模式下发生。在严格模式下，`JavaScript`会抛出错误，通知程序员对未声明变量的赋值。
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这也是始终在严格模式下编写`JavaScript`代码的原因之一。使用严格模式可以避免`JavaScript`的这种混淆行为影响我们的代码。
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`HTML`属性'
  id: totrans-40
  prefs:
  - PREF_H4
  stylish: true
  type: TYPE_NORMAL
- en: 除了对未声明变量的赋值，还有另一种方式我们会获得*隐式*全局变量。`HTML`元素的`id`属性或`name`属性的值也会作为变量添加到`JavaScript`的全局作用域中。
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `id` of the `h1` element above gets added to the global scope as a variable.
    We can access the `h1` element using the `mainHeading` as a variable in JavaScript
    code. This feature is referred to as [Named access on the Window object](https://html.spec.whatwg.org/multipage/nav-history-apis.html#named-access-on-the-window-object).
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: This was first added by the `Internet Explorer` browser and was gradually implemented
    in other browsers as well, simply for compatibility reasons. There are sites out
    there that rely on this behavior, so for the sake of backward compatibility, browsers
    have no choice but to implement this behavior.
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Although this is supported by most browsers, this feature shouldn’t be relied
    upon, and we should always use standard mechanisms to target HTML elements. Functions
    like `getElementById` or `querySelector` should be used instead of relying on
    this behavior.
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Writing code that relies on this feature is a bad idea because it can result
    in code that is hard to read and maintain. Imagine seeing an identifier in the
    code and not being able to identify where it is declared. Such code is vulnerable
    to name clashes with other variables in our code. Also, keep in mind that writing
    code that depends on the HTML markup can break easily if the HTML markup is changed.
    In short, avoid relying on this feature and use better alternatives for targeting
    HTML elements in your JavaScript code.
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-47
  prefs:
  - PREF_H5
  stylish: true
  type: TYPE_NORMAL
- en: '[Global Variables are Bad - (article)](http://wiki.c2.com/?GlobalVariablesAreBad)'
  id: totrans-48
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '[Do DOM tree elements with IDs become global properties? - (stackoverflow post)](https://stackoverflow.com/questions/3434278/do-dom-tree-elements-with-ids-become-global-properties)'
  id: totrans-49
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: The function scope refers to the area of the code within the function body.
    The function scope starts from the opening curly parenthesis of the function body
    and ends before the closing curly parenthesis. Declarations inside the function
    scope are limited to that function’s scope and cannot be directly accessed by
    the code outside that function.
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Shadowing declarations
  id: totrans-51
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: Declarations inside a nested scope can “shadow” the declarations with the `same`
    name in the outer scope. This is referred to as “shadowing declaration” or simply
    “shadowing.”
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Consider the following code example:'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here’s a `Replit` of the code above:'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<ReplitEmbed src="https://replit.com/@newlineauthors/function-scope-example1">`'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The variable `hobby` inside the function is shadowing the `hobby` variable declared
    in the global scope.
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'It is generally not ideal to shadow other declarations because that can reduce
    the readability of the code. It could also make it impossible for code inside
    the nested scope to access the shadowed declarations. Consider the following code
    example:'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here’s a `Replit` of the code above:'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<ReplitEmbed src="https://replit.com/@newlineauthors/function-scope-example2">`'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In the code example above, we have shadowed the `prefix` variable declared in
    the global scope, and the code inside the `log` function is unable to access the
    global `prefix` variable.
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: :::note
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Recall that the `var` declarations in the global scope are added as properties
    on the `window` object. So, if the global `prefix` variable was declared using
    the `var` keyword, we could have used `window.prefix` to access the shadowed variable.
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '::::'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Function parameter scope`'
  id: totrans-66
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: It is a common misconception that the function parameters are defined in the
    function’s local scope or that the parameters behave as if they are defined in
    the function’s local scope, but that is not always true.
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: First, we need to differentiate between “simple” and “non-simple” parameter
    lists. If the function parameters are defined in such a way that they use ES2015+
    features like [Default parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters),
    [Destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment),
    or [Rest parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters),
    such parameters are considered to be `non-simple` parameters; if the parameters
    don’t use any of these features, they are considered to be `simple` parameters.
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If the parameters are simple, they behave like they are declared in the function’s
    local scope, but if the parameters are non-simple, they are declared in their
    own scope. Non-simple parameter scope can be thought of as between the function
    scope and the scope containing the function.
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'If the function with non-simple parameters is defined in the global scope,
    its parameter scope can be conceptually visualized as shown in the image below:'
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![function parameter scope](images/module_03----lesson_03.03----public----assets----parameter-scope.png)'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '`function parameter scope`'
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The following code example proves that the non-simple parameters indeed exist
    in a different scope than the function’s local scope:'
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here’s a `Replit` of the code above:'
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<ReplitEmbed src=”https://replit.com/@newlineauthors/function-scope-example4”>`'
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The `paramScope` function in the code example above has a non-simple parameter
    list; the first parameter, `arr` has an array as a default value, whereas the
    second parameter, `buff` has a function as its default value.
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Inside the function, there is a `var` declaration with the same name as the
    first parameter of the `paramScope` function. The two `console.log` calls inside
    the function log two different values to the console; why is that? Why does the
    `buff` parameter return the default value of the `arr` parameter and not the value
    of the `arr` inside the local scope of the function?
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The answer is that the `arr` parameter and the `arr` variable inside the function
    are two `different` variables that exist in two `different` scopes. The `arr`
    inside the function shadows the `arr` parameter, but calling the `buff` function
    returns the parameter `arr`. If the parameter and the local `arr` were the same
    variable, the `buff` function would return `[1, 2, 3]` instead of the default
    value of the `arr` parameter.
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Remove the `var` keyword inside the function to show the different output:'
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here’s a Replit of the code above:'
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<ReplitEmbed src=”https://replit.com/@newlineauthors/function-scope-example5”>`'
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The `arr` inside the function now refers to the `arr` parameter, so any assignment
    to `arr` inside the function is reflected when the `buff` function is called.
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Function expression name scope
  id: totrans-86
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: 'The function expressions are mostly written as an anonymous function expression,
    as shown below:'
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is an anonymous function expression that is assigned to the `fn` variable.
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'We can also write a `named` function expression as shown below:'
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the code example above, the name of the function expression `namedFn` is
    only accessible inside the function body. As a result, some might incorrectly
    believe that the name of a named function expression is declared inside the function
    body, but that is not correct; the name is declared in a `different` scope. The
    following code proves this claim:'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here’s a Replit of the code above:'
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<ReplitEmbed src=”https://replit.com/@newlineauthors/function-scope-example8”>`'
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The `let` doesn’t allow the re-declaration of a variable. So if the `nameFn`
    was declared inside the function scope, then the code example above should have
    thrown an error; instead, there is no error, and this is valid code. The `nameFn`
    inside the function body is actually shadowing the name of the function expression.
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Named function expression’s name scope is nested between the scope containing
    the function expression and the function expression’s local scope, similar to
    the scope of the non-simple parameter list discussed above.
  id: totrans-97
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-98
  prefs:
  - PREF_H5
  stylish: true
  type: TYPE_NORMAL
- en: '[Where are arguments positioned in the lexical environment? - (stackoverflow
    post)](https://stackoverflow.com/questions/61208843/where-are-arguments-positioned-in-the-lexical-environment/)'
  id: totrans-99
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '[Implied scopes](https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/apA.md#implied-scopes)'
  id: totrans-100
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '[Named function expression - (MDN)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function#named_function_expression)'
  id: totrans-101
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: Block Scope
  id: totrans-102
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: A block scope in JavaScript refers to the scope that exists between blocks of
    code, such as `if` blocks or loops.
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在JavaScript语言引入块作用域的`let`和`const`之前，使用`var`关键字在块中定义的变量在该块外部也可以访问。这是因为使用`var`关键字声明的变量具有函数作用域。然而，使用`let`声明的变量或使用`const`声明的常量仅限于其定义的块，除非它们在全局作用域中声明，这样会使它们成为全局变量。
  id: totrans-104
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 块作用域的`let`和`const`解决了诸如不必要的变量暴露在块外、循环中的闭包等问题。我们将在与闭包主题相关的模块中讨论循环中的闭包问题。
  id: totrans-105
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 另一个关于块作用域需要了解的事情是如何处理块内部的函数声明。这在与提升相关的模块中讨论过。
  id: totrans-106
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Module Scope`'
  id: totrans-107
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: 模块也是近年来添加到JavaScript中的特性之一。模块解决了涉及多个JavaScript文件的代码库中存在的许多代码管理问题。模块使我们能够将代码分割成可管理的块。
  id: totrans-108
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在ES模块内部的代码存在于模块作用域中。换句话说，模块内部的声明仅限于该模块，并且不会暴露到模块外部，除非是`explicitly`从模块导出的代码。模块顶部级别的声明仅限于模块，并不属于全局作用域。
  id: totrans-109
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 进一步阅读
  id: totrans-110
  prefs:
  - PREF_H5
  stylish: true
  type: TYPE_NORMAL
- en: '[JavaScript Modules - (MDN)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules#other_differences_between_modules_and_standard_scripts)'
  id: totrans-111
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '[ES modules: A cartoon deep-dive - (MDN)](https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/)'
  id: totrans-112
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`Scope Chain`'
  id: totrans-113
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: 不同的作用域可以嵌套在其他作用域内部，形成作用域链。这被称为`scope chain`。
  id: totrans-114
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 每次创建新的作用域时，它都会链接到其封闭作用域。不同作用域之间的这种链接创建了一个作用域链，可以用于查找在当前作用域中找不到的标识符。
  id: totrans-115
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 当在特定作用域中遇到标识符时，JavaScript引擎会在当前作用域的父作用域中查找该变量的声明。如果在父作用域中未找到该声明，则JavaScript引擎会在父作用域的外部（父）作用域中查找该变量声明。这个遍历作用域链的过程将继续，直到到达全局作用域，并且没有其他作用域可供查找该声明。
  id: totrans-116
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 考虑以下代码示例：
  id: totrans-117
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 您可以在这个Replit中预览上面的代码：
  id: totrans-119
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<ReplitEmbed src=”https://replit.com/@newlineauthors/scope-chain-example1”>`'
  id: totrans-120
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 由`hello`函数调用创建的作用域链可以概念上可视化如下：
  id: totrans-121
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![scope chain](images/module_03----lesson_03.06----public----assets----scope-chain.png)'
  id: totrans-122
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '`scope chain`'
  id: totrans-123
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The scope chain enables the lookup of identifiers that are not declared in the
    current scope.
  id: totrans-124
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Optimizing scope chain lookup
  id: totrans-125
  prefs:
  - PREF_H4
  stylish: true
  type: TYPE_NORMAL
- en: Modern JavaScript apps contain many lines of JavaScript code that must be compiled
    and executed in the shortest amount of time possible to ensure that app users
    do not experience poor app performance. As a result, modern JavaScript engines
    heavily optimize the JavaScript code we write to allow it to execute as efficiently
    as possible. Different optimizations are performed on the code while it is being
    transformed before it is executed. Optimizations are not only limited to the steps
    `before` the code execution but code is also optimized during its execution (recall
    the `JIT` compilation).
  id: totrans-126
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: As the scope in JavaScript is determined at compile time, in most cases, this
    information allows the JavaScript engine to avoid having to traverse the scope
    chain during the code execution. If the JavaScript already knows what scope a
    particular variable is defined in, it is highly inefficient to traverse the scope
    chain every time a particular variable declaration cannot be found in the current
    scope.
  id: totrans-127
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: So unless the scope of a variable cannot be determined at compile time, JavaScript
    engines don’t need to traverse the scope chain during runtime. However, there
    might be cases where the scope of a particular identifier cannot be determined
    at compile time; in these cases, the JavaScript engine has no choice but to traverse
    the scope chain at runtime to determine what scope that identifier is declared
    in.
  id: totrans-128
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-129
  prefs:
  - PREF_H5
  stylish: true
  type: TYPE_NORMAL
- en: '[The Scope Chain](https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/ch3.md)'
  id: totrans-130
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
