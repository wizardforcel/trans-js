- en: © The Author(s), under exclusive license to Springer Fachmedien Wiesbaden GmbH,
    part of Springer Nature 2024J. L. ZuckarelliLearn coding with Python and JavaScript
    [https://doi.org/10.1007/978-3-658-42912-6_9](https://doi.org/10.1007/978-3-658-42912-6_9)
  prefs: []
  type: TYPE_NORMAL
- en: 9. What Do I Have to Do to Get a Program Running?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Joachim L. Zuckarelli^([1](#Aff2)  )(1)München, GermanyOverview
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve acquired the necessary tools and explored sources of help and information,
    it’s time to work out exactly how you’re going to make a program work. Nothing
    is more frustrating than being excellently prepared with extensive theoretical
    knowledge about your programming language, but ultimately failing to even start
    your first small program.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this unpleasant experience, you should write your first real program
    as early as possible, even if you know almost nothing about your programming language.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter you will learn the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Why it is important to produce a first executable program early on, and thus
    celebrate your first small success as a programmer in the new programming language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What the famous “hello world” program is, and why it is a good first step into
    the new programming language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What the difference is between interactive and script/batch mode when executing
    code and when which mode is preferable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.1 All Beginnings Are Easy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following chapters we will deal with many basic concepts whose implementation
    in your new programming language you need to understand to be able to develop
    really good, useful programs. Nevertheless, it is helpful to start with a very
    simple program right now.
  prefs: []
  type: TYPE_NORMAL
- en: You use this simple piece of code as the basis for step-by-step extensions that
    let you try out every additional element of the language in a practical way. You
    will also immediately learn some specifics of your new programming language that
    can cause you many headaches if you don’t understand them and pay attention to
    them from the beginning. A good example of this is the need to end statements
    with a special character, often a semicolon, as required by a syntactically correct
    statement in many programming languages. Such subtleties are best learned using
    a program that is as simple as possible, because the simpler the program, the
    fewer alternative sources of error there are, and consequently the easier it is
    to troubleshoot. This is important, because you don’t want to start your first
    steps in the new programming language with a long, frustrating error search. It
    is always better to have a first small feeling of success! At this point, it is
    not at all important that you understand absolutely everything you do with your
    first program. The only important thing is that you can write a small, but executable
    program and run it.
  prefs: []
  type: TYPE_NORMAL
- en: “Execute” is the keyword, which immediately brings us to another argument for
    immediately getting started with a small program. By doing so, you will learn
    how to handle the most important functions of the new tools, in particular how
    to compile source code (if this is necessary) and how to execute it. If you are
    working with an IDE, then the relevant commands will probably be accessible via
    menus or toolbars. However, you may decide to work with a combination of a normal
    code editor and a command line interpreter/compiler. In this case, you need to
    understand exactly how to call the command-line program that compiles or directly
    interprets your source code, and what arguments to pass to it. This is true even
    if you can include the compiler or interpreter in your code editor because this
    is regularly done by telling the code editor the command line statement in question.
    Information on this can usually be found in the official documentation of the
    programming language.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of compiled languages, another step is regularly added to the compilation
    of the program, namely *linking*. A special tool, the *linker*, produces the executable
    file of your program. This consists of your program (the source code you wrote,
    translated into machine language by the language’s compiler), compiled program
    libraries and other compiled program components that you access from within your
    program. Linking combines all of these components into a single executable file
    that can then run on its own. If you are working with an IDE, you will often find
    not only separate menu commands for compiling and linking, but also a command
    called “Build”. This does the compiling and linking (the entire generation of
    the executable program file from your source code) with a single click.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, however, it is not done with a few clicks on the interface of
    your IDE or the call of a command line interpreter or compiler. One example is
    JavaScript, which you regularly have to embed in a web page, i.e., in an HTML
    document. This also needs to be learned. A first try with a small example program
    can’t hurt.
  prefs: []
  type: TYPE_NORMAL
- en: However, this does not exhaust the possibilities for executing source code.
    Some programming languages support an *interactive mode* in addition to the execution
    of entire programs. In interactive mode, you first enter a program statement.
    Then, by pressing the <ENTER> key, or a special button, this one statement is
    executed, and the result is displayed immediately (if there is a displayable result).
    After that, you can enter another statement and again get its result presented
    immediately. This procedure, which is also called a read-eval-print-loop (REPL),
    is interesting if, for example, you want to take an exploratory look at a dataset
    and perform statistical analyses on it. No wonder that R and Python, two languages
    that have considerable strengths in this area, have an interactive mode. However,
    interactive mode can also be used for debugging by feeding the interactive interpreter,
    often called a *console*, instructions one by one and then looking at the result
    each time before executing the next instruction. In this way, it is easy to determine
    exactly where the program that you pass to the interpreter for step-by-step execution
    behaves differently than you expect. For this reason, it is not only languages
    used for statistical analysis of data that support an interactive mode.
  prefs: []
  type: TYPE_NORMAL
- en: An interactive mode regularly exists only for interpreted languages. If your
    language requires a compiler, each interactive instruction you enter would have
    to be translated by the compiler into a separate, self-contained program in machine
    language. But then you would not be able to use the next instruction to access
    data that you have previously processed in memory, because after the first program
    has finished, its memory area is released again by the operating system. You would
    not achieve true interactivity this way. Compiled languages therefore normally
    only offer the execution of whole programs. This way of executing programs, which
    also exists in interpreted languages, and which is the more common way of execution,
    is also called *batch* or *script* mode in distinction to interactive mode.
  prefs: []
  type: TYPE_NORMAL
- en: So, familiarize yourself with exactly how to run programs in the language you
    want to learn.
  prefs: []
  type: TYPE_NORMAL
- en: 9.2 Hello, World!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By writing a minimal program, you will learn everything you need to try out
    the programming principles you will learn later, and their implementation in your
    programming language, and to execute programs at will.
  prefs: []
  type: TYPE_NORMAL
- en: But what does such a minimal program look like? The best-known minimal program,
    which probably every programmer knows, is the “Hello, world” program. This is
    a program that does nothing more than display the simple phrase “Hello, world”
    on the screen. The origins of this classic go back to the early 1970s.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some examples of what a hello world program looks like in
    different programming languages. First in C:'
  prefs: []
  type: TYPE_NORMAL
- en: '**#include** <stdio.h>main(){printf("Hello, world!");}'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the actual output statement, the **printf()** function, is surrounded
    by curly braces preceded by a **main()**. If you study C more closely, you will
    learn that a C program is ultimately a function itself, namely the **main()**
    function, which is called automatically when the program is started. In our example,
    this function does nothing more than call another function, **printf()**, which
    then displays the phrase “Hello world!” on the screen. Without the **main()**
    function, your C program will not run. You’ll also run into a problem if you forget
    the trailing semicolon after the **printf()** statement. And in order for **printf()**
    to be callable at all, you have to include a standard library of functions for
    input and output with **#include <stdio.h>.** So, getting a C program to work
    is not all a pleasure. Importantly, the hello-world program teaches you to apply
    some basic rules, even if you may not fully understand their meaning at this point.
    Nevertheless, you would now be able to extend your hello-world program if you
    went deeper into the C language.
  prefs: []
  type: TYPE_NORMAL
- en: 'Considerably simpler in structure is the hello-world program in Ruby on Rails:'
  prefs: []
  type: TYPE_NORMAL
- en: print 'Hello, World!'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Delphi, where you develop a graphical user interface, you learn, in the
    course of the hello-world program, to display a message box with an information
    icon and Okay button on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: MessageDlg('Hello World!', mtInformation, [mbOK], 0);
  prefs: []
  type: TYPE_NORMAL
- en: In practice, you would have to make the display of the message box dependent
    on some user action, such as the user clicking a button. So, your hello-world
    program would also include a minimal graphical user interface, consisting of a
    window with a button. In this way, you would immediately learn to use the basic
    tools for creating graphical user interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, in PHP, it makes sense to learn how to embed a PHP script into a website
    using the tag. Here a hello-world program could then look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: <html><body><?php echo 'Hello world!'; ? ></body></html>
  prefs: []
  type: TYPE_NORMAL
- en: 9.3 Your Roadmap to Learning a New Programming Language
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are learning a new programming language….
  prefs: []
  type: TYPE_NORMAL
- en: start by writing a very simple program, even if you have not yet jumped into
    the depths of the new programming language. This way, you will learn some important
    specifics of the language. A good way to do this is to implement the classic “Hello,
    World” example, which can be found on the internet for practically all languages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: deal with the question of what possibilities there are to execute your programs
    (compilation, interpreter in script/batch mode, or interactive mode) and exactly
    how to accomplish this. It is nice to be able to write programs, but it is only
    useful when you can execute them!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
