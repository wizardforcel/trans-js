- en: © The Author(s), under exclusive license to Springer Fachmedien Wiesbaden GmbH,
    part of Springer Nature 2024J. L. ZuckarelliLearn coding with Python and JavaScript
    [https://doi.org/10.1007/978-3-658-42912-6_9](https://doi.org/10.1007/978-3-658-42912-6_9)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © 作者，Springer Fachmedien Wiesbaden GmbH独家许可，Springer Nature旗下，2024年J. L. Zuckarelli《用Python和JavaScript学习编程》
    [https://doi.org/10.1007/978-3-658-42912-6_9](https://doi.org/10.1007/978-3-658-42912-6_9)
- en: 9. What Do I Have to Do to Get a Program Running?
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9. 如何让程序运行起来？
- en: Joachim L. Zuckarelli^([1](#Aff2)  )(1)München, GermanyOverview
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Joachim L. Zuckarelli^([1](#Aff2)  )(1)慕尼黑，德国概览
- en: After you’ve acquired the necessary tools and explored sources of help and information,
    it’s time to work out exactly how you’re going to make a program work. Nothing
    is more frustrating than being excellently prepared with extensive theoretical
    knowledge about your programming language, but ultimately failing to even start
    your first small program.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在你获得了必要的工具并探索了帮助和信息来源之后，接下来就该仔细思考如何让程序运行。没有什么比在拥有丰富的编程语言理论知识、准备充分的情况下，最终却连第一个小程序都无法启动更令人沮丧的了。
- en: To avoid this unpleasant experience, you should write your first real program
    as early as possible, even if you know almost nothing about your programming language.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种不愉快的经历，你应该尽早编写第一个真正的程序，即使你对编程语言几乎一无所知。
- en: 'In this chapter you will learn the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下内容：
- en: Why it is important to produce a first executable program early on, and thus
    celebrate your first small success as a programmer in the new programming language
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么尽早编写第一个可执行程序很重要，从而在新的编程语言中庆祝你作为程序员的第一个小成功
- en: What the famous “hello world” program is, and why it is a good first step into
    the new programming language
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 著名的“hello world”程序是什么，它为什么是进入新编程语言的一个良好起步
- en: What the difference is between interactive and script/batch mode when executing
    code and when which mode is preferable.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交互模式和脚本/批处理模式在执行代码时的区别，以及在什么情况下更适合使用哪种模式。
- en: 9.1 All Beginnings Are Easy
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9.1 一切开始都很简单
- en: In the following chapters we will deal with many basic concepts whose implementation
    in your new programming language you need to understand to be able to develop
    really good, useful programs. Nevertheless, it is helpful to start with a very
    simple program right now.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将讨论许多基本概念，你需要理解这些概念在新编程语言中的实现，才能开发出真正优秀、实用的程序。然而，现在从一个非常简单的程序开始是非常有帮助的。
- en: You use this simple piece of code as the basis for step-by-step extensions that
    let you try out every additional element of the language in a practical way. You
    will also immediately learn some specifics of your new programming language that
    can cause you many headaches if you don’t understand them and pay attention to
    them from the beginning. A good example of this is the need to end statements
    with a special character, often a semicolon, as required by a syntactically correct
    statement in many programming languages. Such subtleties are best learned using
    a program that is as simple as possible, because the simpler the program, the
    fewer alternative sources of error there are, and consequently the easier it is
    to troubleshoot. This is important, because you don’t want to start your first
    steps in the new programming language with a long, frustrating error search. It
    is always better to have a first small feeling of success! At this point, it is
    not at all important that you understand absolutely everything you do with your
    first program. The only important thing is that you can write a small, but executable
    program and run it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用这段简单的代码作为逐步扩展的基础，允许你以实践的方式尝试语言的每个附加元素。你还将立即学到一些新编程语言的特定细节，如果从一开始就不理解并注意它们，可能会带来许多麻烦。一个很好的例子就是在许多编程语言中，语句需要以一个特殊字符（通常是分号）结束，这是语法正确的语句所要求的。这样的细节最好通过尽可能简单的程序来学习，因为程序越简单，错误的可能来源就越少，从而也更容易排除故障。这一点很重要，因为你不希望在学习新编程语言的第一步时就陷入漫长且令人沮丧的错误排查。总是更好先获得一些小小的成功感！在此阶段，是否完全理解你做的每一件事并不重要。唯一重要的是，你能够写出一个小的、可执行的程序并运行它。
- en: “Execute” is the keyword, which immediately brings us to another argument for
    immediately getting started with a small program. By doing so, you will learn
    how to handle the most important functions of the new tools, in particular how
    to compile source code (if this is necessary) and how to execute it. If you are
    working with an IDE, then the relevant commands will probably be accessible via
    menus or toolbars. However, you may decide to work with a combination of a normal
    code editor and a command line interpreter/compiler. In this case, you need to
    understand exactly how to call the command-line program that compiles or directly
    interprets your source code, and what arguments to pass to it. This is true even
    if you can include the compiler or interpreter in your code editor because this
    is regularly done by telling the code editor the command line statement in question.
    Information on this can usually be found in the official documentation of the
    programming language.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: “执行”是关键字，这让我们立即想到另一个理由：从一个小程序开始，立刻动手。通过这样做，你将学习如何处理新工具中最重要的功能，特别是如何编译源代码（如果需要的话）以及如何执行它。如果你在使用IDE，那么相关的命令可能可以通过菜单或工具栏访问。然而，你也可以选择结合使用普通的代码编辑器和命令行解释器/编译器。在这种情况下，你需要了解如何调用编译或直接解释你的源代码的命令行程序，以及如何向其传递参数。即使你可以将编译器或解释器集成到你的代码编辑器中，因为这通常是通过在代码编辑器中告诉命令行语句来实现的，这一点也需要理解。有关这些信息，通常可以在编程语言的官方文档中找到。
- en: In the case of compiled languages, another step is regularly added to the compilation
    of the program, namely *linking*. A special tool, the *linker*, produces the executable
    file of your program. This consists of your program (the source code you wrote,
    translated into machine language by the language’s compiler), compiled program
    libraries and other compiled program components that you access from within your
    program. Linking combines all of these components into a single executable file
    that can then run on its own. If you are working with an IDE, you will often find
    not only separate menu commands for compiling and linking, but also a command
    called “Build”. This does the compiling and linking (the entire generation of
    the executable program file from your source code) with a single click.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译型语言的情况下，程序的编译通常会增加另一个步骤，即*链接*。一个特殊的工具，*链接器*，会生成你程序的可执行文件。这个文件包括你的程序（你编写的源代码，通过语言的编译器翻译成机器语言）、编译后的程序库以及你在程序中访问的其他编译后的组件。链接将所有这些组件合并成一个单独的可执行文件，之后它就可以独立运行。如果你正在使用IDE，通常你会发现除了编译和链接的独立菜单命令外，还有一个叫做“Build”的命令。这个命令会通过单击一次完成编译和链接（即将你的源代码生成可执行程序文件的整个过程）。
- en: In some cases, however, it is not done with a few clicks on the interface of
    your IDE or the call of a command line interpreter or compiler. One example is
    JavaScript, which you regularly have to embed in a web page, i.e., in an HTML
    document. This also needs to be learned. A first try with a small example program
    can’t hurt.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在某些情况下，这并不是通过在IDE界面上点击几下或调用命令行解释器或编译器来完成的。例如，JavaScript是一个你需要经常嵌入到网页中的语言，也就是嵌入到HTML文档中。这也需要学习。先尝试一个小的示例程序是不会有坏处的。
- en: However, this does not exhaust the possibilities for executing source code.
    Some programming languages support an *interactive mode* in addition to the execution
    of entire programs. In interactive mode, you first enter a program statement.
    Then, by pressing the <ENTER> key, or a special button, this one statement is
    executed, and the result is displayed immediately (if there is a displayable result).
    After that, you can enter another statement and again get its result presented
    immediately. This procedure, which is also called a read-eval-print-loop (REPL),
    is interesting if, for example, you want to take an exploratory look at a dataset
    and perform statistical analyses on it. No wonder that R and Python, two languages
    that have considerable strengths in this area, have an interactive mode. However,
    interactive mode can also be used for debugging by feeding the interactive interpreter,
    often called a *console*, instructions one by one and then looking at the result
    each time before executing the next instruction. In this way, it is easy to determine
    exactly where the program that you pass to the interpreter for step-by-step execution
    behaves differently than you expect. For this reason, it is not only languages
    used for statistical analysis of data that support an interactive mode.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这并不是执行源代码的唯一方式。一些编程语言除了执行完整程序外，还支持*交互模式*。在交互模式下，你首先输入一个程序语句。然后，通过按<ENTER>键或某个特殊按钮，这条语句会被执行，并立即显示结果（如果有可显示的结果）。之后，你可以输入另一条语句，并立即看到其结果。这个过程也叫做读-评估-打印循环（REPL），如果你想探索一个数据集并对其进行统计分析时，这个方式非常有用。难怪
    R 和 Python，这两种在这一领域具有显著优势的语言，都有交互模式。不过，交互模式也可以用于调试，通过逐条输入指令给交互式解释器（通常称为*控制台*），并在每次执行下一条指令之前查看结果。通过这种方式，容易确定在逐步执行过程中，程序在何处行为与预期不同。因此，不仅仅是用于统计数据分析的语言才支持交互模式。
- en: An interactive mode regularly exists only for interpreted languages. If your
    language requires a compiler, each interactive instruction you enter would have
    to be translated by the compiler into a separate, self-contained program in machine
    language. But then you would not be able to use the next instruction to access
    data that you have previously processed in memory, because after the first program
    has finished, its memory area is released again by the operating system. You would
    not achieve true interactivity this way. Compiled languages therefore normally
    only offer the execution of whole programs. This way of executing programs, which
    also exists in interpreted languages, and which is the more common way of execution,
    is also called *batch* or *script* mode in distinction to interactive mode.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 交互模式通常只存在于解释型语言中。如果你的语言需要编译器，那么你输入的每条交互指令都必须通过编译器翻译成一个独立的、完整的机器语言程序。但那样的话，你就无法使用下一条指令访问之前在内存中处理过的数据，因为第一个程序执行完毕后，其内存区域会被操作系统释放。这样，你就无法实现真正的交互性。因此，编译型语言通常只提供整个程序的执行。这种程序执行方式在解释型语言中也存在，并且是更常见的执行方式，通常被称为*批处理*模式或*脚本*模式，与交互模式相对。
- en: So, familiarize yourself with exactly how to run programs in the language you
    want to learn.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，要熟悉如何在你想学习的语言中运行程序。
- en: 9.2 Hello, World!
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9.2 Hello, World!
- en: By writing a minimal program, you will learn everything you need to try out
    the programming principles you will learn later, and their implementation in your
    programming language, and to execute programs at will.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过编写一个最小的程序，你将学到所有需要的知识，来尝试你稍后将学习的编程原则，并了解它们在你的编程语言中的实现方式，从而自由执行程序。
- en: But what does such a minimal program look like? The best-known minimal program,
    which probably every programmer knows, is the “Hello, world” program. This is
    a program that does nothing more than display the simple phrase “Hello, world”
    on the screen. The origins of this classic go back to the early 1970s.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，像这样的最小程序是什么样的呢？最著名的最小程序，可能每个程序员都知道，就是“Hello, world”程序。这个程序什么也不做，只是在屏幕上显示简单的“Hello,
    world”这句话。这个经典的起源可以追溯到 1970 年代初期。
- en: 'The following are some examples of what a hello world program looks like in
    different programming languages. First in C:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些不同编程语言中“Hello World”程序的示例。首先是 C 语言：
- en: '**#include** <stdio.h>main(){printf("Hello, world!");}'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**#include** <stdio.h>main(){printf("Hello, world!");}'
- en: As you can see, the actual output statement, the **printf()** function, is surrounded
    by curly braces preceded by a **main()**. If you study C more closely, you will
    learn that a C program is ultimately a function itself, namely the **main()**
    function, which is called automatically when the program is started. In our example,
    this function does nothing more than call another function, **printf()**, which
    then displays the phrase “Hello world!” on the screen. Without the **main()**
    function, your C program will not run. You’ll also run into a problem if you forget
    the trailing semicolon after the **printf()** statement. And in order for **printf()**
    to be callable at all, you have to include a standard library of functions for
    input and output with **#include <stdio.h>.** So, getting a C program to work
    is not all a pleasure. Importantly, the hello-world program teaches you to apply
    some basic rules, even if you may not fully understand their meaning at this point.
    Nevertheless, you would now be able to extend your hello-world program if you
    went deeper into the C language.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，实际的输出语句 **printf()** 函数被大括号包围，并且前面有 **main()**。如果你深入学习 C 语言，你会发现 C 程序最终本身就是一个函数，即
    **main()** 函数，它在程序启动时自动调用。在我们的例子中，这个函数只是调用了另一个函数 **printf()**，然后在屏幕上显示“Hello world!”这个短语。如果没有
    **main()** 函数，你的 C 程序将无法运行。如果忘记在 **printf()** 语句后加分号，你也会遇到问题。而且，为了使 **printf()**
    能被调用，你必须包含一个标准的输入输出函数库，使用 **#include <stdio.h>**。因此，让 C 程序运行并不完全是件愉快的事。重要的是，hello-world
    程序教会你应用一些基本规则，即使你此时可能并不完全理解它们的含义。尽管如此，如果你深入学习 C 语言，你现在就能够扩展你的 hello-world 程序。
- en: 'Considerably simpler in structure is the hello-world program in Ruby on Rails:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 结构上要简单得多的是 Ruby on Rails 中的 hello-world 程序：
- en: print 'Hello, World!'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: print 'Hello, World!'
- en: 'In Delphi, where you develop a graphical user interface, you learn, in the
    course of the hello-world program, to display a message box with an information
    icon and Okay button on the screen:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Delphi 中，开发图形用户界面时，你会在编写 hello-world 程序的过程中学会在屏幕上显示一个带有信息图标和“确定”按钮的消息框：
- en: MessageDlg('Hello World!', mtInformation, [mbOK], 0);
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: MessageDlg('Hello World!', mtInformation, [mbOK], 0);
- en: In practice, you would have to make the display of the message box dependent
    on some user action, such as the user clicking a button. So, your hello-world
    program would also include a minimal graphical user interface, consisting of a
    window with a button. In this way, you would immediately learn to use the basic
    tools for creating graphical user interfaces.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，你需要将消息框的显示依赖于某些用户操作，比如用户点击按钮。因此，你的 hello-world 程序还需要包含一个最简单的图形用户界面，包含一个带按钮的窗口。通过这种方式，你将立即学会使用创建图形用户界面的基本工具。
- en: 'Finally, in PHP, it makes sense to learn how to embed a PHP script into a website
    using the tag. Here a hello-world program could then look like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 PHP 中，学习如何使用标签将 PHP 脚本嵌入到网站中是有意义的。此时，hello-world 程序可能看起来是这样的：
- en: <html><body><?php echo 'Hello world!'; ? ></body></html>
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: <html><body><?php echo 'Hello world!'; ? ></body></html>
- en: 9.3 Your Roadmap to Learning a New Programming Language
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9.3 学习新编程语言的路线图
- en: If you are learning a new programming language….
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在学习一门新的编程语言……
- en: start by writing a very simple program, even if you have not yet jumped into
    the depths of the new programming language. This way, you will learn some important
    specifics of the language. A good way to do this is to implement the classic “Hello,
    World” example, which can be found on the internet for practically all languages.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从编写一个非常简单的程序开始，即使你还没有深入学习新编程语言的深层次内容。通过这种方式，你将学习到一些语言的关键特性。实现经典的“Hello, World”示例是一个很好的方法，几乎所有语言的互联网资源中都可以找到它。
- en: deal with the question of what possibilities there are to execute your programs
    (compilation, interpreter in script/batch mode, or interactive mode) and exactly
    how to accomplish this. It is nice to be able to write programs, but it is only
    useful when you can execute them!
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理如何执行你的程序的问题（编译、脚本/批处理模式的解释器或交互模式），并且确切了解如何实现这一点。能编写程序是很棒的，但只有当你能执行它们时，这才是有用的！
