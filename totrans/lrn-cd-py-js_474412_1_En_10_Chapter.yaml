- en: © The Author(s), under exclusive license to Springer Fachmedien Wiesbaden GmbH,
    part of Springer Nature 2024 J. L. Zuckarelli Learn coding with Python and JavaScript
    [`https://doi.org/10.1007/978-3-658-42912-6_10`](https://doi.org/10.1007/978-3-658-42912-6_10)
  id: totrans-0
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: © 作者，独家授权Springer Fachmedien Wiesbaden GmbH，Springer Nature的一部分 2024 J. L. Zuckarelli
    《用Python和JavaScript学习编程》[`https://doi.org/10.1007/978-3-658-42912-6_10`](https://doi.org/10.1007/978-3-658-42912-6_10)
- en: '`10. How Do I Make Sure That I (and Others) Still Understand My Program Later?`'
  id: totrans-1
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: '`10. 如何确保我（和他人）以后仍然能理解我的程序？`'
- en: '`Joachim L. Zuckarelli`^([1](#Aff2)  )(1) `München, Germany`'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Joachim L. Zuckarelli`^([1](#Aff2))(1) `德国慕尼黑`'
- en: When I wrote this, only God and I understood what I was doing. Now, only God
    knows.
  id: totrans-3
  prefs:
  - PREF_BQ
  stylish: true
  type: TYPE_NORMAL
  zh: 当我写这段代码时，只有上帝和我知道我在做什么。现在，只有上帝知道。
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: (User `johnc` on `Stack Overflow` “What is the best comment in source code you
    have ever encountered?”)
  id: totrans-5
  prefs:
  - PREF_BQ
  stylish: true
  type: TYPE_NORMAL
  zh: （用户`johnc`在`Stack Overflow`上提问：“你遇到过的源代码中最好的注释是什么？”）
- en: 'There are only two hard things in Computer Science: `cache invalidation` and
    `naming things`.'
  id: totrans-6
  prefs:
  - PREF_BQ
  stylish: true
  type: TYPE_NORMAL
  zh: 计算机科学中只有两件难事：`缓存失效`和`命名问题`。
- en: ''
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: (Phil Karlton)
  id: totrans-8
  prefs:
  - PREF_BQ
  stylish: true
  type: TYPE_NORMAL
  zh: （Phil Karlton）
- en: '`Overview`'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`概述`'
- en: That you should program in a way that allows you to understand later exactly
    how you proceeded and how the solutions you developed work, is a trivial demand
    that should be obvious. But, in fact, many programmers, even professional ones,
    do far too little to put this into practice. So next we’ll look at how you can
    design your code so that it is understandable to you and others who need to work
    with it later.
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你应该以一种可以让你后来准确理解自己是如何进行的，自己开发的解决方案是如何工作的方式来编程，这是一项显而易见的简单要求。然而，事实上，许多程序员，包括专业程序员，做得远远不够，以将这一点付诸实践。所以下面我们将探讨如何设计代码，使其对你和以后需要与之共事的其他人来说都是可以理解的。
- en: 'In this chapter you will learn:'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在本章中，你将学习：
- en: '`How to make program code readable`'
  id: totrans-12
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`如何使程序代码更具可读性`'
- en: What comments are and why they are useful
  id: totrans-13
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 注释是什么，它们为什么有用
- en: How to use comments cleverly to explain your program code
  id: totrans-14
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 如何巧妙地使用注释来解释你的程序代码
- en: What role documentation of the program code plays if other programmers are to
    use it for their own developments.
  id: totrans-15
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 如果其他程序员要使用程序代码进行自己的开发，程序代码的文档化扮演着什么角色。
- en: '`10.1 Understandable Program Code`'
  id: totrans-16
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`10.1 可理解的程序代码`'
- en: Developing understandable program code is tedious and exhausting, and what it
    takes to do it is one of the least favorite tasks of many programmers.
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 开发可理解的程序代码是繁琐且耗费精力的，而为了做到这一点所需要付出的努力，正是许多程序员最不喜欢的任务之一。
- en: For one thing, it takes more effort to program in a comprehensible way, because
    you have to stick to conventions and write notes, `comments` in programmer jargon,
    so that later on you can quickly understand how the program you wrote works. When
    you are mentally deep in the details of a problem solution, most people—including
    the author of this book—tend to massively overestimate their ability to understand
    their own actions later on.
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 一方面，以可理解的方式编程需要更多的努力，因为你必须遵循惯例并写下注释，编程术语中称之为`注释`，这样以后你就能快速理解自己编写的程序是如何工作的。当你在问题解决的细节中深陷时，大多数人——包括本书的作者——往往会大大高估自己以后理解自己行为的能力。
- en: But you should keep in mind, and this may be an additional motivation to invest
    the necessary work, that this “later” does not necessarily have to be in five
    years. It can also be the day after tomorrow that the lack of readability of your
    program code becomes your undoing and causes unnecessary effort that could have
    been avoided with a little more effort when originally writing the code.
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 但你需要记住，这可能是你投入必要工作的额外动力，所谓的“以后”不一定是五年后。也可以是后天，你的程序代码的可读性不足将成为你的失败，并导致不必要的努力，这些努力本来可以在最初编写代码时通过稍微多一点的努力避免。
- en: 'So, it makes sense to start looking at what you can do to counteract this early
    on, and to make sure that you work in such a way from the start that you can always
    get back into your program code without too much difficulty. Three factors can
    contribute significantly to this:'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因此，开始着手从一开始就采取措施应对这个问题是有意义的，并确保你从一开始就以一种方式工作，这样你以后就能毫不费力地重新理解你的程序代码。有三个因素可以显著地为此做出贡献：
- en: '`The visual design of the program code` has an influence on how quickly you
    can orientate yourself in it and recognize connections between different parts.'
  id: totrans-21
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`程序代码的视觉设计`对你在其中快速定位并识别不同部分之间的关联有很大影响。'
- en: The way various elements of a program are `named` (such as variables and functions,
    which we’ll discuss in detail later) goes a long way toward determining how quickly
    you can grasp the content of what certain parts of the code do.
  id: totrans-22
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 程序中各个元素的`命名`方式（例如变量和函数，稍后我们将详细讨论）在很大程度上决定了你能多快理解代码的各个部分所做的工作。
- en: Comments, such as explanations written by the programmer and placed directly
    in the program code, can, if they are well written, explain a lot of things that
    cannot be read out of the code itself.
  id: totrans-23
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 注释，例如程序员写的并直接放在程序代码中的解释，如果写得好，能够解释很多从代码本身无法读出的内容。
- en: '`10.2 Design of the Program Code and Naming of Program Elements`'
  id: totrans-24
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`10.2 程序代码的设计与程序元素的命名`'
- en: One important factor that will help ensure that you still easily understand
    your program code later is how you format it, especially how you use `line indentation`.
    An example:`for(i=1; i<=100; i++) {if(i mod 2 == 0) {for(f=1; f<=100; f++) {printf("field
    (", i, ", ", f, ")");}}printf("\n");}`
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 一个重要的因素，能够帮助确保你以后仍然能轻松理解你的程序代码，就是你如何格式化它，尤其是如何使用`行缩进`。示例：`for(i=1; i<=100; i++)
    {if(i mod 2 == 0) {for(f=1; f<=100; f++) {printf("field (", i, ", ", f, ")");}}printf("\n");}`
- en: 'Even without understanding what this code, written in the `C` programming language,
    does you will see a whole series of curly brackets that open after certain statements
    and close again sometime later. Everything in between is a code block that belongs
    to the preceding statement. The code blocks here are obviously nested within each
    other, meaning that there are code blocks that in turn contain other code blocks.
    In the above notation, however, this nested structure is difficult to see. This
    is especially obvious at the end, where a whole series of blocks is closed in
    a cascade. Which bracket now belongs to which block, and therefore which statement
    is in which block, is not easy to find out. But this question is essential if
    you want to understand what the program does and how it works exactly. (For those
    interested in what this code does: for a matrix with `100` rows and `100` columns,
    it writes all the field coordinates to the screen in the form `(row, column)`,
    but omits the odd rows.)'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 即使不理解这段用`C`编程语言编写的代码是做什么的，你也会看到在某些语句之后有一整串花括号，开头和结尾都在不同的时间出现。所有在其中的内容都是属于前述语句的代码块。这里的代码块显然是嵌套在一起的，意味着有一些代码块又包含其他代码块。然而，在上面的表示法中，这种嵌套结构很难看出。特别是在最后，一整串代码块呈级联方式关闭。现在哪个括号属于哪个代码块，因此哪个语句在哪个代码块内，这一点并不容易找到。但这个问题是至关重要的，因为如果你想理解程序的功能及其具体工作原理，你就必须弄清楚。
    （对于那些对这段代码的功能感兴趣的人：对于一个有`100`行和`100`列的矩阵，它将所有的字段坐标以`(行, 列)`的形式输出到屏幕，但省略了奇数行。）
- en: The code becomes clearer if you insert indentations, for example with the tab
    key:`for(i=1; i<=100; i++) {if(i mod 2 == 0) {for(f=1; f<=100; f++) {printf("field
    (", i, ", ", f, ")");}}printf("\n");}`
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你插入缩进，比如使用Tab键，代码就变得更清晰：`for(i=1; i<=100; i++) {if(i mod 2 == 0) {for(f=1;
    f<=100; f++) {printf("field (", i, ", ", f, ")");}}printf("\n");}`
- en: Now it is much easier to see where a code block starts and where it ends. The
    code becomes more `readable`.
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，更容易看出代码块的开始和结束位置。代码变得更加`可读`。
- en: 'Most programming languages allow you to format code arbitrarily using indentation.
    However, there are some exceptions, such as `Python`, where indentations have
    a content-related meaning and therefore cannot be set arbitrarily. However, the
    all-clear can be given for `Python` as well: The way `Python` requires indentations
    virtually forces the programmer to make his code readable anyway. Or to put it
    another way: a correct syntax (i.e., executable program code) in `Python` automatically
    brings with it a minimum level of readability. We will take a closer look at this
    in the third part of the book, when we learn the fundamentals of `Python`.'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 大多数编程语言允许你通过缩进任意格式化代码。然而，也有一些例外，比如`Python`，其中缩进具有与内容相关的意义，因此不能任意设置。不过，对于`Python`来说，还是可以放心的：`Python`要求的缩进几乎迫使程序员使他的代码具有可读性。换句话说：在`Python`中，正确的语法（即可执行的程序代码）自动带来了最小程度的可读性。我们将在本书的第三部分进一步探讨这一点，当时我们将学习`Python`的基础知识。
- en: 但不仅是源代码的格式在可读性和易懂性方面发挥着重要作用。在编程时，你需要给许多事物命名，例如变量或函数。你的程序的用户将看不到这些名称（在程序员术语中也称为`identifiers`），但这并不是让你在选择标识符时任意发挥的理由。
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 但不仅是源代码的格式在可读性和易懂性方面发挥着重要作用。在编程时，你需要给许多事物命名，例如变量或函数。你的程序的用户将看不到这些名称（在程序员术语中也称为`identifiers`），但这并不是让你在选择标识符时任意发挥的理由。
- en: '作为一个例子，考虑以下用Python编写的程序，该程序计算身体质量指数（BMI）：`a = input("Your weight [in kg]: ")
    b = input("Your height [in m]: ") c = float(a)/float(b)**2 print("Your body mass
    index is: ", c, "\n") print("Your input was:") print("Size:", a, "m") print("Weight:",
    b, "kg")` 不了解Python的人，你注意到了什么吗？该程序首先询问你的体重和身高。例如，如果你输入1.78米的身高和80公斤的体重，身体质量指数的输出为25.25（一个表明轻微超重的值）。之后，最初用于输入程序的值将再次显示；它将如下所示：'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '作为一个例子，考虑以下用Python编写的程序，该程序计算身体质量指数（BMI）：`a = input("Your weight [in kg]: ")
    b = input("Your height [in m]: ") c = float(a)/float(b)**2 print("Your body mass
    index is: ", c, "\n") print("Your input was:") print("Size:", a, "m") print("Weight:",
    b, "kg")` 不了解Python的人，你注意到了什么吗？该程序首先询问你的体重和身高。例如，如果你输入1.78米的身高和80公斤的体重，身体质量指数的输出为25.25（一个表明轻微超重的值）。之后，最初用于输入程序的值将再次显示；它将如下所示：'
- en: 'Your input was:'
  id: totrans-32
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 你的输入是：
- en: 'Size: `80 m`'
  id: totrans-33
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 身高：`80 m`
- en: 'Weight: `1.78 kg`'
  id: totrans-34
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 体重：`1.78 kg`
- en: 使用这些值你将明显体重不足，但如果身高是80米，这将是一个相对不重要的问题！发生了什么？这不是程序错误，而是程序员错误！在程序中，输出体重和身高参数时变量名被调换了。因此，屏幕上显示了错误的值。由于这里的变量被称为`a`和`b`，因此在程序代码中很难一眼就发现这种混淆。
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 使用这些值你将明显体重不足，但如果身高是80米，这将是一个相对不重要的问题！发生了什么？这不是程序错误，而是程序员错误！在程序中，输出体重和身高参数时变量名被调换了。因此，屏幕上显示了错误的值。由于这里的变量被称为`a`和`b`，因此在程序代码中很难一眼就发现这种混淆。
- en: 如果你选择`speaking`的变量名称，错误会更容易被发现：
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你选择`speaking`的变量名称，错误会更容易被发现：
- en: '`weight = input("your weight [in kg]: ") height = input("Your height [in m]:
    ") bmi = float(weight)/float(size)**2 print("Your body mass index is: ", bmi,
    "\n") print("Your input was:") print("Size:", height, "m") print("Weight:", weight,
    "kg")`'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`weight = input("your weight [in kg]: ") height = input("Your height [in m]:
    ") bmi = float(weight)/float(size)**2 print("Your body mass index is: ", bmi,
    "\n") print("Your input was:") print("Size:", height, "m") print("Weight:", weight,
    "kg")`'
- en: 所以，使用易于理解、意义明确的标识符，这些标识符能够传达你所命名的事物包含什么（在变量的情况下）或它的作用是什么（在函数的情况下）。当你快速编程时，使用短小的，通常是一个字母的变量名称（例如，`x`、`y`、`i`、`f`）而不多加考虑是很诱人的，因为它们输入起来很方便。但你应该抵制这种诱惑。你的“未来自我”会感谢你，它试图阅读你的程序代码！
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 所以，使用易于理解、意义明确的标识符，这些标识符能够传达你所命名的事物包含什么（在变量的情况下）或它的作用是什么（在函数的情况下）。当你快速编程时，使用短小的，通常是一个字母的变量名称（例如，`x`、`y`、`i`、`f`）而不多加考虑是很诱人的，因为它们输入起来很方便。但你应该抵制这种诱惑。你的“未来自我”会感谢你，它试图阅读你的程序代码！
- en: 有时，仅使用一个词作为标识符是不够的，例如`size`或`weight`。复合标识符中我们看到了编程语言命名约定的差异。假设我们想根据程序的用户是男性还是女性来区分身高和体重，并为两性引入不同的变量来做到这一点。一些编程语言偏好`heightMan`表示男性的身高，其他语言则使用`height_man`，还有一些使用`height.man`。
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 有时，仅使用一个词作为标识符是不够的，例如`size`或`weight`。复合标识符中我们看到了编程语言命名约定的差异。假设我们想根据程序的用户是男性还是女性来区分身高和体重，并为两性引入不同的变量来做到这一点。一些编程语言偏好`heightMan`表示男性的身高，其他语言则使用`height_man`，还有一些使用`height.man`。
- en: Of course, in the end it doesn’t matter at all whether you follow the convention
    that most programmers follow in your programming language or not. For the syntactic
    correctness and thus the executability of your program, this is of course irrelevant,
    at least as long as you use only the characters permitted in variable names (in
    some languages, for example, `$` is a reserved character; `exchangerate$` would
    then be an invalid variable name and would lead to an error). However, it is recommended
    to stick to `some` standard. This saves thinking, because you don’t have to rethink
    every time, and makes your program more readable later.
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当然，最终不管你是否遵循大多数程序员在你所用编程语言中的约定，这一点根本不重要。对于语法的正确性，以及程序的可执行性来说，这当然是无关紧要的，至少在你只使用变量名称中允许的字符时（例如，在某些语言中，`$`是一个保留字符；`exchangerate$`将是一个无效的变量名，导致错误）。然而，建议你坚持`某些`标准。这节省了思考，因为你不需要每次都重新思考，并且使你的程序在以后更具可读性。
- en: On the question of formatting code, and choosing appropriate identifiers many
    people have done a lot of smart thinking. `Google` has compiled these thoughts
    for a whole range of programming languages in its `Google Style Guides`，and you
    will also find style guides (sometimes slightly deviating from `Google`’s guidelines)
    in many other places on the internet. Feel free to look at such a style guide
    for your programming language. Of course, you don’t have to follow it slavishly.
    More important than following a certain style is to have a style in the first
    place, which you can implement more or less consistently, in order to save yourself
    mental work and to keep your code readable and thus understandable.
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在代码格式化和选择合适标识符的问题上，许多人进行了大量聪明的思考。`Google`已为多种编程语言编写了这些思考，整理成了`Google Style Guides`，你也会在互联网上的许多其他地方找到风格指南（有时稍微偏离`Google`的指导原则）。你可以查看适用于你编程语言的这种风格指南。当然，你不必盲目跟随它。比起盲目遵循某个风格，更重要的是首先要有一个风格，你可以在一定程度上保持一致地实施，从而节省思考工作，使代码更加可读，进而更容易理解。
- en: '`10.3 Comments`'
  id: totrans-42
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`10.3 注释`'
- en: '`10.3.1 Explain Your Own Program Code`'
  id: totrans-43
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`10.3.1 解释你自己的程序代码`'
- en: It is not only good formatting and a sensible choice of identifiers that help
    you to write code that you will understand later. Another important tool on this
    path are `comments`. `Comments` are texts in the program code that are `ignored
    by` the compiler or interpreter. Unlike in the rest of the source code, where
    you have to stick scrupulously to the syntax rules so that the computer understands
    what you want, in `comments` you can write to your heart’s content. The trick
    is to make it clear to the compiler or interpreter that your `comment` is not
    part of the actual program code, and that it can therefore safely disregard it.
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 编写你以后能够理解的代码，不仅需要良好的格式和合理的标识符选择。另一个重要的工具是`注释`。`注释`是程序代码中的文本，这些文本会被编译器或解释器`忽略`。与源代码中的其他部分不同，在那里你必须严格遵守语法规则，以便计算机理解你的意图，在`注释`中，你可以尽情书写。诀窍是要明确告诉编译器或解释器，你的`注释`不是程序的实际代码，因此它可以安全地忽略它。
- en: In order for the compiler or interpreter to know what is program code and what
    is comment, `comments` are always introduced with a special symbol. Depending
    on the programming language, the `comment` then extends either to the end of the
    line or to the point where it is again terminated with a special symbol.
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为了让编译器或解释器知道什么是程序代码，什么是注释，`注释`总是通过一个特殊符号引入的。根据编程语言的不同，`注释`要么扩展到行尾，要么扩展到再次被特殊符号终止的位置。
- en: Some languages only support the first mode, which means that there are only
    single-line comments. If a comment is to extend over several lines, the comment
    must again start with the comment symbol in each line.
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 有些语言只支持第一种模式，这意味着只有单行注释。如果一个注释要跨越多行，则注释必须在每一行的开头重新使用注释符号。
- en: 'Let’s look at some examples. First, an example in the C programming language:
    `// Counter reading has now run up completely.// Output counter reading.` `printf("Counter
    reading: ", counter,"\n"); counter = 0; // Reinitialize counter`'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '让我们看一些例子。首先是C编程语言中的一个例子：`// Counter reading has now run up completely.// Output
    counter reading.` `printf("Counter reading: ", counter,"\n"); counter = 0; //
    Reinitialize counter`'
- en: 在这里引入注释的符号是`//`。在`//`和行尾之间的所有内容都是注释，被C编译器忽略。因此，注释和代码也可以在同一行上，尽管代码必须当然位于注释符号`//`的左侧。有趣的是，C编程语言以及许多基于它的语言不仅知道用`//`进行的单行注释，还知道多行注释。这些注释被`/*`和`*/`符号包围（注意，星号始终面向注释文本）。这使得上面的示例可以写成：
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里引入注释符号是`//`。在`//`和行尾之间的所有内容都是注释，会被C编译器忽略。因此，注释和代码也可以在同一行上，尽管代码必须位于注释符号`//`的左侧。有趣的是，C编程语言以及许多基于它的语言不仅知道用`//`进行的单行注释，还知道多行注释。这些注释被`/*`和`*/`符号包围（注意，星号始终面向注释文本）。这使得上面的示例可以写成：
- en: '`/*`计数器读数现在已完全运行。**输出计数器读数**`printf("Counter reading: ", counter,"\n");counter
    = 0; /* Reinitialize counter */`'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`/*`计数器读数现在已完全运行。**输出计数器读数**`printf("Counter reading: ", counter,"\n");counter
    = 0; /* Reinitialize counter */`'
- en: 正如你所看到的，第一个注释的第二行不需要单独的符号来开始注释，因为我们仍然处于前一行打开的注释区域`/*`中。只有用`*/`才能再次关闭注释。由于此注释有明确的开始和结束，因此它也可以放置在代码中间，尽管这并不推荐，因为它会损害代码的可读性：
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 正如你所看到的，第一个注释的第二行不需要单独的符号来开始注释，因为我们仍然处于前一行打开的注释区域`/*`中。只有用`*/`才能再次关闭注释。由于此注释有明确的开始和结束，因此它也可以放置在代码中间，尽管这并不推荐，因为它会损害代码的可读性：
- en: '`counter /* the loop counter */ = 0;`'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`counter /* the loop counter */ = 0;`'
- en: 当然，每种编程语言都有自己用于注释的符号。然而，上述的`//`、打开的`/*`和关闭的`*/`组合，以及`#`符号（通常用于单行注释）是经常遇到的。
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当然，每种编程语言都有自己用于注释的符号。然而，上述的`//`、打开的`/*`和关闭的`*/`组合，以及`#`符号（通常用于单行注释）是经常遇到的。
- en: 使用注释可以帮助你在代码中直接记录程序的工作原理。每个拥有代码的人都可以同时看到文档。当然，当你与其他人合作时，这尤其有趣。你的合作伙伴肯定会欣赏在特别复杂的地方提供的提示。
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 使用注释可以帮助你在代码中直接记录程序的工作原理。每个拥有代码的人都可以同时看到文档。当然，当你与其他人合作时，这尤其有趣。你的合作伙伴肯定会欣赏在特别复杂的地方提供的提示。
- en: 但是你自己，至少你的“未来的自己”，也会从注释中获得巨大好处。没有什么比查看一段旧代码时更加愉快的事情了，发现当时的开发者（你自己）留下了一个小帮助，这使得理解困难的部分变得更加容易。
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 但是你自己，至少你的“未来的自己”，也会从注释中获得巨大好处。没有什么比查看一段旧代码时更加愉快的事情了，发现当时的开发者（你自己）留下了一个小帮助，这使得理解困难的部分变得更加容易。
- en: 'However, because commenting your solution takes time, you should only use comments
    where it is really necessary, that is, at points in the program where you can
    expect that you will not easily understand them later. So don’t comment every
    triviality but use comments economically. Commenting is probably the least popular
    part of programming work. So, write your comments promptly, ideally right after
    you have written the code in question. This way, you will not only remember exactly
    how your solution works, but you will also avoid having to think about the solution
    again later to write the comment, a mental effort that may discourage not only
    die-hard fans of procrastination from adding comments. Artificial intelligence
    tools such as `ChatGPT` can help here. Ask `ChatGPT` to comment your code once,
    for example with the following prompt: “Comment the following code so that it
    is understandable for beginners”. You will be surprised how much tedious work
    `ChatGPT`，`Gemini`，`Claude` & Co can do for you.'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，由于注释解决方案需要时间，您应该只在真正必要时使用注释，也就是说，在程序中那些您预期以后可能无法轻松理解的地方。因此，不要对每个琐碎的部分都加注释，而应经济地使用注释。注释可能是编程工作中最不受欢迎的部分。所以，请及时写下您的注释，理想情况下是在您写完相关代码后立即写下注释。这样，您不仅能准确记住解决方案的工作原理，还能避免在以后写注释时再次思考解决方案，这种脑力工作可能会让一些热衷于拖延的人不愿添加注释。人工智能工具如`ChatGPT`可以在这里提供帮助。例如，您可以让`ChatGPT`为您的代码添加注释，使用以下提示：“为以下代码添加注释，使其对初学者易于理解”。您会惊讶于`ChatGPT`、`Gemini`、`Claude`等工具能为您做多少繁琐的工作。
- en: 10.3.2 What Else Comments Are Useful For
  id: totrans-56
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 10.3.2 注释的其他用途
- en: With comments, you can not only document the procedure you used, but also, for
    example, note unfinished tasks. A clear `TODO` marks the comment as an open task
    for you. In the same way, you can use `REVIEW` to highlight code segments that
    you want to take a closer look at or assign any other meaningful tags that mark
    specific types of comments.
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 使用注释，您不仅可以记录使用的过程，还可以例如记录未完成的任务。清晰的`TODO`标记将注释标识为您未完成的任务。同样，您可以使用`REVIEW`来突出您希望进一步查看的代码段，或为注释分配任何其他有意义的标签，标明特定类型的注释。
- en: 'You can also use comments in a much more mundane way, namely to better structure
    your source code and make it clearer for you. In this sense, you can use comments
    to visually separate parts of the source code from each other, for example like
    this (in C++):'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 您还可以以更加平凡的方式使用注释，即通过更好地结构化源代码，使其对您更清晰。从这个角度看，您可以使用注释来视觉上将源代码的不同部分分开，例如这样（在C++中）：
- en: '`/* ------------ START READING IN THE DATA ------------ */`'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`/* ------------ START READING IN THE DATA ------------ */`'
- en: 'When you start programming, you will see how helpful it can sometimes be to
    “comment out” a program statement. This means to put the instruction into a comment
    and thus “switch it off”. After all, the compiler or interpreter does not execute
    what is written in a comment. So, by enclosing a statement in a comment, you can
    make that statement temporarily ineffective. A small example in C:'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当您开始编程时，您会发现有时将程序语句“注释掉”是非常有用的。这意味着将指令放入注释中，从而“关闭”它。毕竟，编译器或解释器不会执行注释中写的内容。因此，通过将语句包含在注释中，您可以暂时使该语句失效。下面是一个小的C语言示例：
- en: '`printf("This text is printed on the screen!");` `/*` `printf("This text does
    not appear because the printf statement is commented out");` `*/`'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`printf("This text is printed on the screen!");` `/*` `printf("This text does
    not appear because the printf statement is commented out");` `*/`'
- en: Comments are very helpful when you are just starting to deal with a new programming
    language and want to record the knowledge you gain from trying it out in the code
    of the test programs right away. It is well known that you learn best when you
    write down what you have learned (the acknowledged most effective method for this,
    handwritten notes, is naturally ruled out for program code).
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当您刚开始学习一种新的编程语言，并希望立即在测试程序的代码中记录下您通过尝试获得的知识时，注释非常有用。众所周知，最有效的学习方式是将所学的内容写下来（这种公认的最有效方法，手写笔记，自然不适用于程序代码）。
- en: 10.3.3 Documentation Outside the Program Code
  id: totrans-63
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 10.3.3 程序代码外的文档
- en: 'Comments are a kind of documentation `in the` program code. This is advantageous,
    since the explanations and what is explained are right next to each other. However,
    there is nothing against storing documentation `outside` the source code. This
    is useful, for example, if you want to write more comprehensive explanations,
    or if you want to include other information in the text (such as a table or a
    photograph of a handwritten note or sketch). The same is true if you want to document
    overarching contexts, such as the overall structure of your program or the interrelationship
    of different parts of the program. In all these cases it is okay to separate at
    least part of the documentation from the code and to place it to another document.
    Whether you write this external documentation with a word processor or record
    it in your electronic notebook is completely irrelevant. The principle applies:
    Praise be to that which helps understanding!'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 注释是程序代码的一种文档形式`in the`。这具有优势，因为解释和被解释的内容就在彼此旁边。然而，将文档存储在`outside`源代码中并没有什么不妥。例如，当你想写更全面的解释，或者希望在文中包含其他信息（如表格或手写笔记或草图的照片）时，这就非常有用。如果你想记录一些宏观的上下文，比如程序的整体结构或程序各部分之间的关系，同样如此。在所有这些情况下，将部分文档与代码分离并放到其他文档中是完全可以接受的。无论你是使用文字处理软件写这个外部文档，还是将其记录在电子笔记本中，都没有关系。原则是：赞美那些有助于理解的事物！
- en: 'A special way to generate documentation outside of the source code are special
    `documentation generators`, which are available for many programming languages.
    In their basic function, these tools do little more than automatically read out
    certain comments specially marked in the program code and prepare them in a visually
    appealing form. The result is then usually output as an HTML document or in PDF
    format. Examples of such tools are `Javadoc` for Java, `phpDocumentor` for PHP,
    `roxygen` for R or `Doxygen`, which supports several different languages, including
    Python and C++. Generating documentation in this way is particularly interesting
    when writing program code that will later be called by others (we’ll see below
    how to package parts of programs into modules that can then be called from elsewhere).
    While those who will call the program code do not necessarily need to understand
    in detail how it works, they do need to know how exactly to call the program,
    and how to control its operation for their purposes. Since these developers are
    not interested in the program code as such, but only in its `interface`, it would
    be impractical if they had to rummage through the code to find the relevant hints.
    That’s why the documentation is placed outside the code. This way, it stays “clean”
    and concise, and is easy for the user to use. For the developer of the code, it
    is also easy to write because it is embedded directly in the program code, just
    like conventional comments. In Java, for example, this could look like this: `/*******
    Reads the name of the user****** @author Marc McIntosh*** @version 1.3****** @param
    prompt Text of the prompt shown to the user*** @return Name the user has entered***/`***public
    String** getUserName(prompt) {`***/* Here comes the actual program code */***}`'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 一种生成源代码外部文档的特殊方式是使用专门的`文档生成器`，这些工具适用于许多编程语言。它们的基本功能只是自动读取程序代码中特别标记的某些注释，并将其以一种视觉上吸引人的形式呈现出来。生成的结果通常会以HTML文档或PDF格式输出。此类工具的例子包括适用于Java的`Javadoc`、适用于PHP的`phpDocumentor`、适用于R的`roxygen`以及支持多种编程语言的`Doxygen`，包括Python和C++。以这种方式生成文档在编写后续将被他人调用的程序代码时尤其有意义（稍后我们将看到如何将程序的部分代码打包成可以从其他地方调用的模块）。虽然调用程序代码的人不一定需要详细了解它是如何工作的，但他们需要知道如何准确地调用程序，以及如何根据自己的需求控制它的运行。由于这些开发者并不关心程序代码本身，而只关心它的`接口`，如果他们必须翻阅代码去找到相关提示，那将是非常不便的。因此，文档被放置在代码之外。这样，代码保持“干净”简洁，且用户易于使用。对于代码的开发者来说，编写这些文档也很容易，因为它们直接嵌入在程序代码中，就像常规的注释一样。例如，在Java中，可能像这样写：`/*******
    读取用户的名字 ****** @author Marc McIntosh*** @version 1.3****** @param prompt 显示给用户的提示文本***
    @return 用户输入的名字***/`***public String** getUserName(prompt) {`***/* 这里是实际的程序代码
    */***}`
- en: 'Here, a special part of the program, called a function, is documented using
    `Javadoc`。The function can be called with a prompt, for example `getUserName("Enter
    your name: ")`，then reads a user input and returns the user’s input as a value
    to the person who called the function。 (We’ll deal with functions in more detail
    later.) The important thing here is that this function is a part of a module that
    can be called by other programs。To understand what the function needs to be called
    (the text of the prompt to be displayed to the user) and what it returns (the
    name the user has entered)，the function is documented here in such a way that
    the documentation tool `Javadoc` can automatically generate appealing HTML documentation。`Javadoc`
    uses special comments for this purpose。'
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这里，程序的一个特殊部分，称为函数，使用`Javadoc`进行文档化。函数可以通过提示调用，例如`getUserName("请输入您的名字：")`，然后读取用户输入并将用户的输入作为值返回给调用函数的人。（我们稍后会更详细地讨论函数。）这里重要的是，函数是一个可以被其他程序调用的模块的一部分。为了理解调用此函数所需的内容（要显示给用户的提示文本）以及它返回的内容（用户输入的姓名），该函数在这里的文档化方式使得文档工具`Javadoc`能够自动生成吸引人的HTML文档。`Javadoc`为此目的使用特殊的注释。
- en: Normal comments in `Java` are placed between the symbols `/***` and `***/`。However,
    if a comment is prefixed with `/**`，`Javadoc` knows that this is a comment that
    should become part of the documentation。Special predefined tags prefixed with
    `@` can be used to address specific fields in the documentation。For example，`@param
    prompt` is used to explain what the `prompt` parameter means when calling the
    `getUserName` function。These predefined fields can then be presented in a special
    way in the documentation, for example in a special formatting or at a special
    position within the documentation。
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java`中的普通注释放置在`/***`和`***/`符号之间。然而，如果注释以`/**`为前缀，`Javadoc`就知道这是一个应该成为文档一部分的注释。可以使用以`@`为前缀的特殊预定义标签来表示文档中的特定字段。例如，`@param
    prompt`用于解释在调用`getUserName`函数时`prompt`参数的含义。这些预定义字段随后可以以特殊的方式在文档中呈现，例如使用特殊格式或在文档中的特定位置展示。'
- en: Often a stricter distinction is made between documentation and commenting than
    we do here。Based on the target audience，comments are aimed at the person who wants
    to understand and edit your code (usually yourself, but possibly others as well)。Another
    developer, however, who simply wants to use your code in his own programs, is
    not interested in its inner structure and workings, and will not read your comments
    in the code at all but will only look for information on how exactly to use your
    code properly。Similarly, the user of a word processor is not interested in exactly
    how it works inside, he wants to know how to change the font color for a selected
    text! The provision of this information about the use of the code is done by the
    documentation in the narrower sense, which of course may be generated via documentation
    generators from special comments in the code。
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 通常，文档和注释之间的区别比我们这里提到的要严格。根据目标受众的不同，注释是面向希望理解和编辑代码的人（通常是你自己，但也可能是其他人）。然而，另一位开发者如果仅仅是想在自己的程序中使用你的代码，他并不关心代码的内部结构和工作原理，而只会查找关于如何正确使用你的代码的信息，根本不会阅读代码中的注释。同样，文字处理软件的用户并不关心它如何内部工作，他只关心如何更改选中文本的字体颜色！提供这些代码使用信息的是文档本身，狭义上的文档，它通常是通过文档生成器从代码中的特殊注释生成的。
- en: '`10.4 Your Roadmap to Learning a New Programming Language`'
  id: totrans-69
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`10.4 学习新编程语言的路线图`'
- en: When you learn a new programming language …
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当你学习一门新的编程语言时……
- en: to determine whether the programming language allows you to format your code
    in any way you want (for example, with indentations)，or whether the formatting
    has a meaning in terms of content，take a look at a style guide that gives information
    on how to format your code in the programming language and how to choose the identifiers/names
    of variables, functions and other elements，
  id: totrans-71
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 为了确定编程语言是否允许你以任何方式格式化代码（例如，使用缩进），或者格式化在内容上是否有特定含义，可以查阅一个样式指南，了解如何在该编程语言中格式化代码以及如何选择变量、函数和其他元素的标识符/名称。
- en: decide on a way to format your code and name the variables, functions, and other
    elements。You don’t necessarily have to follow a style guide, but you should remain
    consistent，
  id: totrans-72
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 决定一种格式化代码的方式，并为变量、函数和其他元素命名。你不一定要遵循样式指南，但你应该保持一致。
- en: '`determine how comments can be built into the code`, in particular whether
    comments can be multiline, and whether they are bounded at the front and back,
    or always extend to the end of the line,'
  id: totrans-73
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`确定如何将注释融入代码`，特别是注释是否可以是多行的，以及它们是否在前后有边界，或者是否总是延伸到行尾。'
- en: '`get into the habit of commenting your code` so that you can understand it
    later, but do so economically and concentrate on the difficult parts where there
    is a real risk that you will not understand them later, or only with great difficulty,'
  id: totrans-74
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`养成注释代码的习惯`，以便将来能理解它，但要做到简洁，集中注释那些你以后可能无法理解的部分，或者理解起来非常困难的部分。'
- en: '`determine whether there are documentation generators` that allow you to create
    attractive `HTML` or `PDF` documentation from the comments integrated into the
    program code.'
  id: totrans-75
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`确定是否有文档生成器`，可以让你从集成在程序代码中的注释中创建吸引人的`HTML`或`PDF`文档。'
