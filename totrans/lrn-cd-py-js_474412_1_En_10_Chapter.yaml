- en: © The Author(s), under exclusive license to Springer Fachmedien Wiesbaden GmbH,
    part of Springer Nature 2024 J. L. Zuckarelli Learn coding with Python and JavaScript
    [`https://doi.org/10.1007/978-3-658-42912-6_10`](https://doi.org/10.1007/978-3-658-42912-6_10)
  id: totrans-0
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`10. How Do I Make Sure That I (and Others) Still Understand My Program Later?`'
  id: totrans-1
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: '`Joachim L. Zuckarelli`^([1](#Aff2)  )(1) `München, Germany`'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: When I wrote this, only God and I understood what I was doing. Now, only God
    knows.
  id: totrans-3
  prefs:
  - PREF_BQ
  stylish: true
  type: TYPE_NORMAL
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: (User `johnc` on `Stack Overflow` “What is the best comment in source code you
    have ever encountered?”)
  id: totrans-5
  prefs:
  - PREF_BQ
  stylish: true
  type: TYPE_NORMAL
- en: 'There are only two hard things in Computer Science: `cache invalidation` and
    `naming things`.'
  id: totrans-6
  prefs:
  - PREF_BQ
  stylish: true
  type: TYPE_NORMAL
- en: ''
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: (Phil Karlton)
  id: totrans-8
  prefs:
  - PREF_BQ
  stylish: true
  type: TYPE_NORMAL
- en: '`Overview`'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: That you should program in a way that allows you to understand later exactly
    how you proceeded and how the solutions you developed work, is a trivial demand
    that should be obvious. But, in fact, many programmers, even professional ones,
    do far too little to put this into practice. So next we’ll look at how you can
    design your code so that it is understandable to you and others who need to work
    with it later.
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'In this chapter you will learn:'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`How to make program code readable`'
  id: totrans-12
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: What comments are and why they are useful
  id: totrans-13
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: How to use comments cleverly to explain your program code
  id: totrans-14
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: What role documentation of the program code plays if other programmers are to
    use it for their own developments.
  id: totrans-15
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`10.1 Understandable Program Code`'
  id: totrans-16
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: Developing understandable program code is tedious and exhausting, and what it
    takes to do it is one of the least favorite tasks of many programmers.
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: For one thing, it takes more effort to program in a comprehensible way, because
    you have to stick to conventions and write notes, `comments` in programmer jargon,
    so that later on you can quickly understand how the program you wrote works. When
    you are mentally deep in the details of a problem solution, most people—including
    the author of this book—tend to massively overestimate their ability to understand
    their own actions later on.
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: But you should keep in mind, and this may be an additional motivation to invest
    the necessary work, that this “later” does not necessarily have to be in five
    years. It can also be the day after tomorrow that the lack of readability of your
    program code becomes your undoing and causes unnecessary effort that could have
    been avoided with a little more effort when originally writing the code.
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'So, it makes sense to start looking at what you can do to counteract this early
    on, and to make sure that you work in such a way from the start that you can always
    get back into your program code without too much difficulty. Three factors can
    contribute significantly to this:'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`The visual design of the program code` has an influence on how quickly you
    can orientate yourself in it and recognize connections between different parts.'
  id: totrans-21
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: The way various elements of a program are `named` (such as variables and functions,
    which we’ll discuss in detail later) goes a long way toward determining how quickly
    you can grasp the content of what certain parts of the code do.
  id: totrans-22
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: Comments, such as explanations written by the programmer and placed directly
    in the program code, can, if they are well written, explain a lot of things that
    cannot be read out of the code itself.
  id: totrans-23
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`10.2 Design of the Program Code and Naming of Program Elements`'
  id: totrans-24
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: One important factor that will help ensure that you still easily understand
    your program code later is how you format it, especially how you use `line indentation`.
    An example:`for(i=1; i<=100; i++) {if(i mod 2 == 0) {for(f=1; f<=100; f++) {printf("field
    (", i, ", ", f, ")");}}printf("\n");}`
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Even without understanding what this code, written in the `C` programming language,
    does you will see a whole series of curly brackets that open after certain statements
    and close again sometime later. Everything in between is a code block that belongs
    to the preceding statement. The code blocks here are obviously nested within each
    other, meaning that there are code blocks that in turn contain other code blocks.
    In the above notation, however, this nested structure is difficult to see. This
    is especially obvious at the end, where a whole series of blocks is closed in
    a cascade. Which bracket now belongs to which block, and therefore which statement
    is in which block, is not easy to find out. But this question is essential if
    you want to understand what the program does and how it works exactly. (For those
    interested in what this code does: for a matrix with `100` rows and `100` columns,
    it writes all the field coordinates to the screen in the form `(row, column)`,
    but omits the odd rows.)'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The code becomes clearer if you insert indentations, for example with the tab
    key:`for(i=1; i<=100; i++) {if(i mod 2 == 0) {for(f=1; f<=100; f++) {printf("field
    (", i, ", ", f, ")");}}printf("\n");}`
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Now it is much easier to see where a code block starts and where it ends. The
    code becomes more `readable`.
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Most programming languages allow you to format code arbitrarily using indentation.
    However, there are some exceptions, such as `Python`, where indentations have
    a content-related meaning and therefore cannot be set arbitrarily. However, the
    all-clear can be given for `Python` as well: The way `Python` requires indentations
    virtually forces the programmer to make his code readable anyway. Or to put it
    another way: a correct syntax (i.e., executable program code) in `Python` automatically
    brings with it a minimum level of readability. We will take a closer look at this
    in the third part of the book, when we learn the fundamentals of `Python`.'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 但不仅是源代码的格式在可读性和易懂性方面发挥着重要作用。在编程时，你需要给许多事物命名，例如变量或函数。你的程序的用户将看不到这些名称（在程序员术语中也称为`identifiers`），但这并不是让你在选择标识符时任意发挥的理由。
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '作为一个例子，考虑以下用Python编写的程序，该程序计算身体质量指数（BMI）：`a = input("Your weight [in kg]: ")
    b = input("Your height [in m]: ") c = float(a)/float(b)**2 print("Your body mass
    index is: ", c, "\n") print("Your input was:") print("Size:", a, "m") print("Weight:",
    b, "kg")` 不了解Python的人，你注意到了什么吗？该程序首先询问你的体重和身高。例如，如果你输入1.78米的身高和80公斤的体重，身体质量指数的输出为25.25（一个表明轻微超重的值）。之后，最初用于输入程序的值将再次显示；它将如下所示：'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Your input was:'
  id: totrans-32
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 'Size: `80 m`'
  id: totrans-33
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 'Weight: `1.78 kg`'
  id: totrans-34
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 使用这些值你将明显体重不足，但如果身高是80米，这将是一个相对不重要的问题！发生了什么？这不是程序错误，而是程序员错误！在程序中，输出体重和身高参数时变量名被调换了。因此，屏幕上显示了错误的值。由于这里的变量被称为`a`和`b`，因此在程序代码中很难一眼就发现这种混淆。
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 如果你选择`speaking`的变量名称，错误会更容易被发现：
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`weight = input("your weight [in kg]: ") height = input("Your height [in m]:
    ") bmi = float(weight)/float(size)**2 print("Your body mass index is: ", bmi,
    "\n") print("Your input was:") print("Size:", height, "m") print("Weight:", weight,
    "kg")`'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 所以，使用易于理解、意义明确的标识符，这些标识符能够传达你所命名的事物包含什么（在变量的情况下）或它的作用是什么（在函数的情况下）。当你快速编程时，使用短小的，通常是一个字母的变量名称（例如，`x`、`y`、`i`、`f`）而不多加考虑是很诱人的，因为它们输入起来很方便。但你应该抵制这种诱惑。你的“未来自我”会感谢你，它试图阅读你的程序代码！
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 有时，仅使用一个词作为标识符是不够的，例如`size`或`weight`。复合标识符中我们看到了编程语言命名约定的差异。假设我们想根据程序的用户是男性还是女性来区分身高和体重，并为两性引入不同的变量来做到这一点。一些编程语言偏好`heightMan`表示男性的身高，其他语言则使用`height_man`，还有一些使用`height.man`。
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Of course, in the end it doesn’t matter at all whether you follow the convention
    that most programmers follow in your programming language or not. For the syntactic
    correctness and thus the executability of your program, this is of course irrelevant,
    at least as long as you use only the characters permitted in variable names (in
    some languages, for example, `$` is a reserved character; `exchangerate$` would
    then be an invalid variable name and would lead to an error). However, it is recommended
    to stick to `some` standard. This saves thinking, because you don’t have to rethink
    every time, and makes your program more readable later.
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: On the question of formatting code, and choosing appropriate identifiers many
    people have done a lot of smart thinking. `Google` has compiled these thoughts
    for a whole range of programming languages in its `Google Style Guides`，and you
    will also find style guides (sometimes slightly deviating from `Google`’s guidelines)
    in many other places on the internet. Feel free to look at such a style guide
    for your programming language. Of course, you don’t have to follow it slavishly.
    More important than following a certain style is to have a style in the first
    place, which you can implement more or less consistently, in order to save yourself
    mental work and to keep your code readable and thus understandable.
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`10.3 Comments`'
  id: totrans-42
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: '`10.3.1 Explain Your Own Program Code`'
  id: totrans-43
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: It is not only good formatting and a sensible choice of identifiers that help
    you to write code that you will understand later. Another important tool on this
    path are `comments`. `Comments` are texts in the program code that are `ignored
    by` the compiler or interpreter. Unlike in the rest of the source code, where
    you have to stick scrupulously to the syntax rules so that the computer understands
    what you want, in `comments` you can write to your heart’s content. The trick
    is to make it clear to the compiler or interpreter that your `comment` is not
    part of the actual program code, and that it can therefore safely disregard it.
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In order for the compiler or interpreter to know what is program code and what
    is comment, `comments` are always introduced with a special symbol. Depending
    on the programming language, the `comment` then extends either to the end of the
    line or to the point where it is again terminated with a special symbol.
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Some languages only support the first mode, which means that there are only
    single-line comments. If a comment is to extend over several lines, the comment
    must again start with the comment symbol in each line.
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Let’s look at some examples. First, an example in the C programming language:
    `// Counter reading has now run up completely.// Output counter reading.` `printf("Counter
    reading: ", counter,"\n"); counter = 0; // Reinitialize counter`'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在这里引入注释的符号是`//`。在`//`和行尾之间的所有内容都是注释，被C编译器忽略。因此，注释和代码也可以在同一行上，尽管代码必须当然位于注释符号`//`的左侧。有趣的是，C编程语言以及许多基于它的语言不仅知道用`//`进行的单行注释，还知道多行注释。这些注释被`/*`和`*/`符号包围（注意，星号始终面向注释文本）。这使得上面的示例可以写成：
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`/*`计数器读数现在已完全运行。**输出计数器读数**`printf("Counter reading: ", counter,"\n");counter
    = 0; /* Reinitialize counter */`'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 正如你所看到的，第一个注释的第二行不需要单独的符号来开始注释，因为我们仍然处于前一行打开的注释区域`/*`中。只有用`*/`才能再次关闭注释。由于此注释有明确的开始和结束，因此它也可以放置在代码中间，尽管这并不推荐，因为它会损害代码的可读性：
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`counter /* the loop counter */ = 0;`'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 当然，每种编程语言都有自己用于注释的符号。然而，上述的`//`、打开的`/*`和关闭的`*/`组合，以及`#`符号（通常用于单行注释）是经常遇到的。
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 使用注释可以帮助你在代码中直接记录程序的工作原理。每个拥有代码的人都可以同时看到文档。当然，当你与其他人合作时，这尤其有趣。你的合作伙伴肯定会欣赏在特别复杂的地方提供的提示。
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 但是你自己，至少你的“未来的自己”，也会从注释中获得巨大好处。没有什么比查看一段旧代码时更加愉快的事情了，发现当时的开发者（你自己）留下了一个小帮助，这使得理解困难的部分变得更加容易。
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'However, because commenting your solution takes time, you should only use comments
    where it is really necessary, that is, at points in the program where you can
    expect that you will not easily understand them later. So don’t comment every
    triviality but use comments economically. Commenting is probably the least popular
    part of programming work. So, write your comments promptly, ideally right after
    you have written the code in question. This way, you will not only remember exactly
    how your solution works, but you will also avoid having to think about the solution
    again later to write the comment, a mental effort that may discourage not only
    die-hard fans of procrastination from adding comments. Artificial intelligence
    tools such as `ChatGPT` can help here. Ask `ChatGPT` to comment your code once,
    for example with the following prompt: “Comment the following code so that it
    is understandable for beginners”. You will be surprised how much tedious work
    `ChatGPT`，`Gemini`，`Claude` & Co can do for you.'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 10.3.2 What Else Comments Are Useful For
  id: totrans-56
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: With comments, you can not only document the procedure you used, but also, for
    example, note unfinished tasks. A clear `TODO` marks the comment as an open task
    for you. In the same way, you can use `REVIEW` to highlight code segments that
    you want to take a closer look at or assign any other meaningful tags that mark
    specific types of comments.
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'You can also use comments in a much more mundane way, namely to better structure
    your source code and make it clearer for you. In this sense, you can use comments
    to visually separate parts of the source code from each other, for example like
    this (in C++):'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`/* ------------ START READING IN THE DATA ------------ */`'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'When you start programming, you will see how helpful it can sometimes be to
    “comment out” a program statement. This means to put the instruction into a comment
    and thus “switch it off”. After all, the compiler or interpreter does not execute
    what is written in a comment. So, by enclosing a statement in a comment, you can
    make that statement temporarily ineffective. A small example in C:'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`printf("This text is printed on the screen!");` `/*` `printf("This text does
    not appear because the printf statement is commented out");` `*/`'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Comments are very helpful when you are just starting to deal with a new programming
    language and want to record the knowledge you gain from trying it out in the code
    of the test programs right away. It is well known that you learn best when you
    write down what you have learned (the acknowledged most effective method for this,
    handwritten notes, is naturally ruled out for program code).
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 10.3.3 Documentation Outside the Program Code
  id: totrans-63
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: 'Comments are a kind of documentation `in the` program code. This is advantageous,
    since the explanations and what is explained are right next to each other. However,
    there is nothing against storing documentation `outside` the source code. This
    is useful, for example, if you want to write more comprehensive explanations,
    or if you want to include other information in the text (such as a table or a
    photograph of a handwritten note or sketch). The same is true if you want to document
    overarching contexts, such as the overall structure of your program or the interrelationship
    of different parts of the program. In all these cases it is okay to separate at
    least part of the documentation from the code and to place it to another document.
    Whether you write this external documentation with a word processor or record
    it in your electronic notebook is completely irrelevant. The principle applies:
    Praise be to that which helps understanding!'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'A special way to generate documentation outside of the source code are special
    `documentation generators`, which are available for many programming languages.
    In their basic function, these tools do little more than automatically read out
    certain comments specially marked in the program code and prepare them in a visually
    appealing form. The result is then usually output as an HTML document or in PDF
    format. Examples of such tools are `Javadoc` for Java, `phpDocumentor` for PHP,
    `roxygen` for R or `Doxygen`, which supports several different languages, including
    Python and C++. Generating documentation in this way is particularly interesting
    when writing program code that will later be called by others (we’ll see below
    how to package parts of programs into modules that can then be called from elsewhere).
    While those who will call the program code do not necessarily need to understand
    in detail how it works, they do need to know how exactly to call the program,
    and how to control its operation for their purposes. Since these developers are
    not interested in the program code as such, but only in its `interface`, it would
    be impractical if they had to rummage through the code to find the relevant hints.
    That’s why the documentation is placed outside the code. This way, it stays “clean”
    and concise, and is easy for the user to use. For the developer of the code, it
    is also easy to write because it is embedded directly in the program code, just
    like conventional comments. In Java, for example, this could look like this: `/*******
    Reads the name of the user****** @author Marc McIntosh*** @version 1.3****** @param
    prompt Text of the prompt shown to the user*** @return Name the user has entered***/`***public
    String** getUserName(prompt) {`***/* Here comes the actual program code */***}`'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here, a special part of the program, called a function, is documented using
    `Javadoc`。The function can be called with a prompt, for example `getUserName("Enter
    your name: ")`，then reads a user input and returns the user’s input as a value
    to the person who called the function。 (We’ll deal with functions in more detail
    later.) The important thing here is that this function is a part of a module that
    can be called by other programs。To understand what the function needs to be called
    (the text of the prompt to be displayed to the user) and what it returns (the
    name the user has entered)，the function is documented here in such a way that
    the documentation tool `Javadoc` can automatically generate appealing HTML documentation。`Javadoc`
    uses special comments for this purpose。'
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Normal comments in `Java` are placed between the symbols `/***` and `***/`。However,
    if a comment is prefixed with `/**`，`Javadoc` knows that this is a comment that
    should become part of the documentation。Special predefined tags prefixed with
    `@` can be used to address specific fields in the documentation。For example，`@param
    prompt` is used to explain what the `prompt` parameter means when calling the
    `getUserName` function。These predefined fields can then be presented in a special
    way in the documentation, for example in a special formatting or at a special
    position within the documentation。
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Often a stricter distinction is made between documentation and commenting than
    we do here。Based on the target audience，comments are aimed at the person who wants
    to understand and edit your code (usually yourself, but possibly others as well)。Another
    developer, however, who simply wants to use your code in his own programs, is
    not interested in its inner structure and workings, and will not read your comments
    in the code at all but will only look for information on how exactly to use your
    code properly。Similarly, the user of a word processor is not interested in exactly
    how it works inside, he wants to know how to change the font color for a selected
    text! The provision of this information about the use of the code is done by the
    documentation in the narrower sense, which of course may be generated via documentation
    generators from special comments in the code。
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`10.4 Your Roadmap to Learning a New Programming Language`'
  id: totrans-69
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: When you learn a new programming language …
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: to determine whether the programming language allows you to format your code
    in any way you want (for example, with indentations)，or whether the formatting
    has a meaning in terms of content，take a look at a style guide that gives information
    on how to format your code in the programming language and how to choose the identifiers/names
    of variables, functions and other elements，
  id: totrans-71
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: decide on a way to format your code and name the variables, functions, and other
    elements。You don’t necessarily have to follow a style guide, but you should remain
    consistent，
  id: totrans-72
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`determine how comments can be built into the code`, in particular whether
    comments can be multiline, and whether they are bounded at the front and back,
    or always extend to the end of the line,'
  id: totrans-73
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`get into the habit of commenting your code` so that you can understand it
    later, but do so economically and concentrate on the difficult parts where there
    is a real risk that you will not understand them later, or only with great difficulty,'
  id: totrans-74
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`determine whether there are documentation generators` that allow you to create
    attractive `HTML` or `PDF` documentation from the comments integrated into the
    program code.'
  id: totrans-75
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
