- en: Exercises
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: The following exercises provide you with the opportunity to practice with space
    constraints. The solutions to these exercises are found in the section [`Chapter
    19`](f_0224.xhtml#dealing.with.space.constraints.solutions).
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Following is the word builder algorithm we encountered in [`Word Builder`](f_0066.xhtml#sect.word-builder).
    Describe its space complexity in terms of Big O:'
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | ​`function`​ `wordBuilder(array)` { |'
  id: totrans-3
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`const`​ `collection` = []; |'
  id: totrans-4
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-5
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`for`​ (​`const`​ `[indexI, valueI]` ​`of`​ `array.entries()`) { |'
  id: totrans-6
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`for`​ (​`const`​ `[indexJ, valueJ]` ​`of`​ `array.entries()`) { |'
  id: totrans-7
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`if`​ (`indexI !== indexJ`) { |'
  id: totrans-8
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `collection.push(valueI + valueJ);` |'
  id: totrans-9
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-10
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-11
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-12
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-13
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`return`​ `collection`; |'
  id: totrans-14
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-15
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: 'Following is a function that reverses an array. Describe its space complexity
    in terms of Big O:'
  id: totrans-16
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | ​`function`​ `reverse(array)` { |'
  id: totrans-17
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`const`​ `newArray` = []; |'
  id: totrans-18
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-19
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`for`​ (​`const`​ `value` ​`of`​ `array`) { |'
  id: totrans-20
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `newArray.unshift(value);` |'
  id: totrans-21
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-22
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-23
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`return`​ `newArray`; |'
  id: totrans-24
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-25
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: Create a new function to reverse an array that takes up just O(1) extra space.
  id: totrans-26
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: Following are three different implementations of a function that accepts an
    array of numbers and returns an array containing those numbers multiplied by 2\.
    For example, if the input is `[5, 4, 3, 2, 1]`, the output will be `[10, 8, 6,
    4, 2]`.
  id: totrans-27
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | ​`function`​ `doubleArray1(array)` { |'
  id: totrans-28
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`const`​ `newArray` = []; |'
  id: totrans-29
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-30
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`for`​ (​`const`​ `value` ​`of`​ `array`) { |'
  id: totrans-31
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `newArray.push(value * 2);` |'
  id: totrans-32
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-33
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-34
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`return`​ `newArray`; |'
  id: totrans-35
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-36
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-37
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`function`​ `doubleArray2(array)` { |'
  id: totrans-38
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`for`​ (​`let`​ `i = 0; i < array.length; i += 1`) { |'
  id: totrans-39
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `array[i] *= 2;` |'
  id: totrans-40
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-41
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-42
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`return`​ `array`; |'
  id: totrans-43
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-44
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-45
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`function`​ `doubleArray3(array, index = 0)` { |'
  id: totrans-46
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`if`​ (`index >= array.length`) { ​`return`; } |'
  id: totrans-47
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-48
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `array[index] *= 2;` |'
  id: totrans-49
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `doubleArray3(array, index + 1);` |'
  id: totrans-50
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-51
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`return`​ `array`; |'
  id: totrans-52
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-53
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: 'Fill in the table that follows to describe the efficiency of these three versions
    in terms of both time and space:'
  id: totrans-54
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: '| Version | Time Complexity | Space Complexity |'
  id: totrans-55
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-56
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| Version #1 | ? | ? |'
  id: totrans-57
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| Version #2 | ? | ? |'
  id: totrans-58
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| Version #3 | ? | ? |'
  id: totrans-59
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: Copyright © 2024, The Pragmatic Bookshelf.
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
