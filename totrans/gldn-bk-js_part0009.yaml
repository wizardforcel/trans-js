- en: 第六章
  id: totrans-0
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: JavaScript中的函数式编程
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 让我们深入探讨一种越来越受到重视的编程范式：函数式编程。这个编程风格强调使用纯函数、数据不可变性和函数组合来创建更可预测和可维护的代码。我们将涵盖一等公民函数、高阶函数、柯里化和函数组合的概念，这些都是充分利用现代JavaScript的基础。
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 一等公民函数的概念
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在JavaScript中，函数是一等公民，这意味着它们被视为语言的一等公民。这意味着函数可以分配给变量，可以作为参数传递给其他函数，并且可以由其他函数返回。这个概念是函数式编程的基础。
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 分配函数给变量：
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 在上述示例中，匿名函数被分配给变量`greeting`，我们可以像调用其他函数一样调用它。
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 将函数作为参数传递：
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 在这里，我们将`greeting`函数作为参数传递给`execute`函数，然后`execute`使用给定的值调用`greeting`。
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 函数返回：
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 在上述示例中，`createSaudacao`返回一个新函数，当调用时，它将初始问候与给定的名字结合在一起。返回函数的能力是函数式编程中的一个强大工具。
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 高阶函数
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 高阶函数是可以接受其他函数作为参数或返回它们的函数。它们是函数式编程中的主要构建块之一。
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 高阶函数的示例：
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 在这里，`map`是一个高阶函数，它将`double`函数应用于`numbers`数组的每个元素，返回一个包含双倍值的新数组。
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 另一个示例是`filter`方法，它根据由函数提供的条件过滤数组中的元素：
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 在上述示例中，`filtering`是一个高阶函数，它将`ePar`函数应用于`numbers`数组的每个元素，并返回一个只包含偶数的新数组。
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 柯里化和函数组合
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 柯里化是将一个接受多个参数的函数转换为一系列每个只接受一个参数的函数的技术。这使得您能够创建更具体和可重用的函数。
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 柯里化示例：
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 在上述示例中，`sum`是一个返回另一个函数的函数。`sum(5)`返回一个将5加到给定参数上的函数。这使得您能够以优雅的方式创建部分应用的函数。
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 函数组合是将简单函数组合以构造更复杂函数的实践。在JavaScript中，函数组合可以手动完成或使用诸如`Ramda`或`lodash`等库。
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 手动组合函数的示例：
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 在上述示例中，`compose`是一个将`add1`和`multiply2`组合成一个新函数的函数，该新函数首先加1，然后将结果乘以2。
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 函数式编程的好处
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Functional programming offers several benefits, including:'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '1\. More predictable code: `Pure functions` always produce the same result
    for the same arguments and have no side effects, making code more predictable
    and easier to understand.'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '2\. Ease of testing: Because `pure functions` do not depend on external state,
    they are easier to test.'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '3\. Code Reuse: Small, specific functions can be combined in many ways, promoting
    code reuse.'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '4\. Simplified competition: Immutability and lack of side effects reduce problems
    associated with competition.'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Applying functional programming in `JavaScript`
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Let's apply the concepts discussed in a practical example. Suppose we have a
    list of users and we want to filter the active users, map their names to a new
    list and finally count how many active users we have.
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this example, we use `higher order functions` (`filter` and `map`) and `function
    composition` to perform a series of transformations on the list of users. This
    style of programming makes the code easier to read and maintain.
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: We explore the fundamentals of functional programming in `JavaScript`, covering
    `first-class functions``, `higher-order functions`, `currying`, and `function
    composition`. These concepts not only make your code more elegant and modular,
    but also easier to understand and maintain. By adopting functional programming
    practices, you can create more robust, less error-prone `JavaScript` applications.
    As we move forward, we will continue to build on these concepts, exploring even
    more sophisticated applications and advanced `JavaScript` programming practices.
    Be prepared to transform your approach to code and discover new ways to solve
    problems efficiently and innovatively.
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
