- en: Chapter 6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Functional Programming in JavaScript
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s delve deeper into a programming paradigm that is gaining more and more
    prominence: functional programming. This programming style emphasizes the use
    of pure functions, data immutability, and function composition to create more
    predictable and maintainable code. We''ll cover the concepts of first-class functions,
    higher-order functions, currying, and function composition, all of which are essential
    to getting the most out of modern JavaScript.'
  prefs: []
  type: TYPE_NORMAL
- en: First-class function concepts
  prefs: []
  type: TYPE_NORMAL
- en: In JavaScript, functions are first-class, which means they are treated as first-class
    citizens of the language. This implies that functions can be assigned to variables,
    passed as arguments to other functions, and returned by other functions. This
    concept is fundamental to functional programming.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assigning functions to variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the example above, the anonymous function is assigned to the variable greeting,
    and we can call it like any other function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Passing functions as arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, we pass the greeting function as an argument to the execute function,
    which then calls greeting with the given value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Function return:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the example above, createSaudacao returns a new function that, when called,
    combines the initial greeting with the given name. This ability to return functions
    is a powerful tool in functional programming.
  prefs: []
  type: TYPE_NORMAL
- en: Higher order functions
  prefs: []
  type: TYPE_NORMAL
- en: Higher-order functions are functions that can take other functions as arguments
    or return them. They are one of the main building blocks in functional programming.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example of higher order functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, map is a higher order function that applies the double function to each
    element of the numbers array, returning a new array with the doubled values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another example is the filter method, which filters elements of an array based
    on a condition provided by a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the example above, filtering is a higher order function that applies the
    ePar function to each element of the numbers array and returns a new array containing
    only even numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Currying and function composition
  prefs: []
  type: TYPE_NORMAL
- en: Currying is the technique of transforming a function that accepts multiple arguments
    into a series of functions that accept only one argument each. This allows you
    to create more specific and reusable functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Currying example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the example above, sum is a function that returns another function. sum(5)
    returns a function that adds 5 to the given argument. This allows you to create
    partially applied functions in an elegant way.
  prefs: []
  type: TYPE_NORMAL
- en: Function composition is the practice of combining simple functions to construct
    more complex functions. In JavaScript, function composition can be done manually
    or using libraries such as Ramda or lodash.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example of composing functions manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the example above, compose is a function that combines add1 and multiply2
    into a new function that first adds 1 and then multiplies the result by 2.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of Functional Programming
  prefs: []
  type: TYPE_NORMAL
- en: 'Functional programming offers several benefits, including:'
  prefs: []
  type: TYPE_NORMAL
- en: '1\. More predictable code: Pure functions always produce the same result for
    the same arguments and have no side effects, making code more predictable and
    easier to understand.'
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Ease of testing:  Because pure functions do not depend on external state,
    they are easier to test.'
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Code Reuse:  Small, specific functions can be combined in many ways, promoting
    code reuse.'
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Simplified competition:  Immutability and lack of side effects reduce problems
    associated with competition.'
  prefs: []
  type: TYPE_NORMAL
- en: Applying functional programming in JavaScript
  prefs: []
  type: TYPE_NORMAL
- en: Let's apply the concepts discussed in a practical example. Suppose we have a
    list of users and we want to filter the active users, map their names to a new
    list and finally count how many active users we have.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we use higher order functions (filter and map) and function
    composition to perform a series of transformations on the list of users. This
    style of programming makes the code easier to read and maintain.
  prefs: []
  type: TYPE_NORMAL
- en: We explore the fundamentals of functional programming in JavaScript, covering
    first-class functions, higher-order functions, currying, and function composition.
    These concepts not only make your code more elegant and modular, but also easier
    to understand and maintain. By adopting functional programming practices, you
    can create more robust, less error-prone JavaScript applications. As we move forward,
    we will continue to build on these concepts, exploring even more sophisticated
    applications and advanced JavaScript programming practices. Be prepared to transform
    your approach to code and discover new ways to solve problems efficiently and
    innovatively.
  prefs: []
  type: TYPE_NORMAL
