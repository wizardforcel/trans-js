- en: 'Module 4:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Vue Router for Navigation
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the dynamic landscape of web development, seamless navigation is a cornerstone
    of a positive user experience. Vue.js, a progressive JavaScript framework, excels
    not only in building reactive user interfaces but also in providing a powerful
    routing solution through Vue Router. The module "Vue Router for Navigation" is
    a pivotal section within the comprehensive guide "Vue.js Essentials: For Responsive
    Web Development." Within these pages, readers will embark on a journey to master
    Vue Router, understanding how to architect navigation in Vue.js applications with
    elegance and precision.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Importance of Navigation in Web Development
  prefs: []
  type: TYPE_NORMAL
- en: Before delving into the intricacies of Vue Router, it is essential to recognize
    the significance of navigation in web development. This module initiates with
    an exploration of the challenges developers face in managing navigation within
    single-page applications (SPAs) and how Vue Router addresses these concerns. By
    understanding the role of Vue Router in facilitating seamless navigation, readers
    lay the groundwork for building responsive and user-friendly web applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Vue Router Fundamentals: Routes, Views, and Navigation Guards'
  prefs: []
  type: TYPE_NORMAL
- en: The core of Vue Router lies in its ability to map routes to views, providing
    a structured approach to navigation within a Vue.js application. This segment
    of the module delves into the fundamentals of Vue Router, guiding readers through
    the creation of routes, associating them with views, and understanding the intricacies
    of nested routes. Additionally, the module explores navigation guards, empowering
    developers to exert fine-grained control over the navigation process, ensuring
    security and precise execution of actions at each route transition.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic Routing and Navigation with Vue Router
  prefs: []
  type: TYPE_NORMAL
- en: As web applications grow in complexity, the need for dynamic routing becomes
    apparent. This module unveils the power of dynamic routing with Vue Router, showcasing
    how to create routes dynamically based on data and parameters. Readers will learn
    to leverage dynamic segments in routes, enabling the construction of flexible
    and scalable applications that adapt to varying requirements. The exploration
    extends to programmatically navigating between routes, providing developers with
    the tools to create fluid and responsive user experiences.
  prefs: []
  type: TYPE_NORMAL
- en: 'State Management and Navigation: Vue Router with Vuex'
  prefs: []
  type: TYPE_NORMAL
- en: The synergy between Vue Router and Vuex, Vue.js's state management library,
    is a key aspect explored in this module. By seamlessly integrating Vue Router
    with Vuex, developers can synchronize the application state with the URL, enabling
    deep linking and state persistence. This segment provides insights into managing
    shared state, employing route parameters, and handling complex navigation scenarios.
    Readers will emerge with a holistic understanding of how Vue Router and Vuex collaborate
    to streamline navigation while maintaining a clean and organized application architecture.
  prefs: []
  type: TYPE_NORMAL
- en: '"Vue Router for Navigation" serves as an indispensable module within "Vue.js
    Essentials: For Responsive Web Development," equipping readers with the knowledge
    and skills needed to navigate the complexities of routing in Vue.js applications.
    Through a comprehensive exploration of Vue Router''s features and functionalities,
    developers will gain the expertise required to architect seamless, responsive,
    and user-friendly web navigation experiences.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up Vue Router
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The module "Vue Router for Navigation" within the book "Vue.js Essentials:
    For Responsive Web Development" introduces an integral aspect of Vue.js development
    in the section titled "Setting Up Vue Router." This section marks a pivotal step
    toward creating robust and navigable Vue.js applications by incorporating the
    Vue Router. Vue Router enables developers to implement client-side navigation
    seamlessly, providing a structured and organized approach to handling routes within
    a Vue.js application.'
  prefs: []
  type: TYPE_NORMAL
- en: // main.js
  prefs: []
  type: TYPE_NORMAL
- en: import Vue from 'vue';
  prefs: []
  type: TYPE_NORMAL
- en: import App from './App.vue';
  prefs: []
  type: TYPE_NORMAL
- en: import VueRouter from 'vue-router';
  prefs: []
  type: TYPE_NORMAL
- en: Vue.use(VueRouter);
  prefs: []
  type: TYPE_NORMAL
- en: const routes = [
  prefs: []
  type: TYPE_NORMAL
- en: '{ path: ''/'', component: Home },'
  prefs: []
  type: TYPE_NORMAL
- en: '{ path: ''/about'', component: About },'
  prefs: []
  type: TYPE_NORMAL
- en: '{ path: ''/contact'', component: Contact }'
  prefs: []
  type: TYPE_NORMAL
- en: '];'
  prefs: []
  type: TYPE_NORMAL
- en: const router = new VueRouter({
  prefs: []
  type: TYPE_NORMAL
- en: routes
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: new Vue({
  prefs: []
  type: TYPE_NORMAL
- en: 'render: h => h(App),'
  prefs: []
  type: TYPE_NORMAL
- en: router
  prefs: []
  type: TYPE_NORMAL
- en: '}).$mount(''#app'');'
  prefs: []
  type: TYPE_NORMAL
- en: The provided code snippet showcases the fundamental setup of Vue Router in the
    main entry file, "main.js." Vue Router is imported and registered with Vue through
    Vue.use(VueRouter). Route configurations are defined using the routes array, where
    each route is associated with a specific component. The VueRouter instance is
    then created, incorporating the defined routes. Finally, the router is integrated
    into the Vue instance, enabling seamless navigation within the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating Route Components: Vue.js Page Structure'
  prefs: []
  type: TYPE_NORMAL
- en: In the setup phase, route components such as "Home," "About," and "Contact"
    are associated with corresponding paths. These components represent the pages
    that users will navigate to within the Vue.js application.
  prefs: []
  type: TYPE_NORMAL
- en: // Home.vue
  prefs: []
  type: TYPE_NORMAL
- en: <template>
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: <h2>Home Page</h2>
  prefs: []
  type: TYPE_NORMAL
- en: <!-- Home page content -->
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </template>
  prefs: []
  type: TYPE_NORMAL
- en: // About.vue
  prefs: []
  type: TYPE_NORMAL
- en: <template>
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: <h2>About Page</h2>
  prefs: []
  type: TYPE_NORMAL
- en: <!-- About page content -->
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </template>
  prefs: []
  type: TYPE_NORMAL
- en: // Contact.vue
  prefs: []
  type: TYPE_NORMAL
- en: <template>
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: <h2>Contact Page</h2>
  prefs: []
  type: TYPE_NORMAL
- en: <!-- Contact page content -->
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </template>
  prefs: []
  type: TYPE_NORMAL
- en: Each route component encapsulates the template, style, and script sections,
    providing a modular and maintainable structure. The content within each component
    corresponds to the specific page's layout and functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigation in Vue.js: Utilizing Router Links'
  prefs: []
  type: TYPE_NORMAL
- en: Vue Router facilitates navigation within the application through the use of
    router links. These links are defined using the router-link component, ensuring
    a seamless and reactive transition between pages.
  prefs: []
  type: TYPE_NORMAL
- en: <!-- App.vue -->
  prefs: []
  type: TYPE_NORMAL
- en: <template>
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: <h1>Vue Router App</h1>
  prefs: []
  type: TYPE_NORMAL
- en: <router-link to="/">Home</router-link>
  prefs: []
  type: TYPE_NORMAL
- en: <router-link to="/about">About</router-link>
  prefs: []
  type: TYPE_NORMAL
- en: <router-link to="/contact">Contact</router-link>
  prefs: []
  type: TYPE_NORMAL
- en: <router-view></router-view>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </template>
  prefs: []
  type: TYPE_NORMAL
- en: <script>
  prefs: []
  type: TYPE_NORMAL
- en: export default {
  prefs: []
  type: TYPE_NORMAL
- en: // App component content
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the router-link components represent links to the home, about,
    and contact pages. The router-view component acts as the placeholder where the
    content of the currently active route will be rendered. Vue Router seamlessly
    manages the navigation state, ensuring a smooth and reactive user experience.
  prefs: []
  type: TYPE_NORMAL
- en: '"Setting Up Vue Router" in the "Vue Router for Navigation" module establishes
    a foundation for building navigable Vue.js applications. From configuring Vue
    Router in the main entry file to creating route components and utilizing router
    links for navigation, this section equips developers with the knowledge and tools
    needed to implement client-side navigation efficiently. The provided code examples
    offer a practical guide for setting up Vue Router and building a structured page
    navigation system within Vue.js applications.'
  prefs: []
  type: TYPE_NORMAL
- en: Basic Routing and Navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The "Vue Router for Navigation" module in the book "Vue.js Essentials: For
    Responsive Web Development" delves into an essential aspect of Vue.js development
    with the section titled "Basic Routing and Navigation." This section lays the
    foundation for implementing basic routing features using Vue Router, offering
    developers a systematic approach to handle navigation within their Vue.js applications.'
  prefs: []
  type: TYPE_NORMAL
- en: // main.js
  prefs: []
  type: TYPE_NORMAL
- en: import Vue from 'vue';
  prefs: []
  type: TYPE_NORMAL
- en: import App from './App.vue';
  prefs: []
  type: TYPE_NORMAL
- en: import VueRouter from 'vue-router';
  prefs: []
  type: TYPE_NORMAL
- en: import Home from './components/Home.vue';
  prefs: []
  type: TYPE_NORMAL
- en: import About from './components/About.vue';
  prefs: []
  type: TYPE_NORMAL
- en: import Contact from './components/Contact.vue';
  prefs: []
  type: TYPE_NORMAL
- en: Vue.use(VueRouter);
  prefs: []
  type: TYPE_NORMAL
- en: const routes = [
  prefs: []
  type: TYPE_NORMAL
- en: '{ path: ''/'', component: Home },'
  prefs: []
  type: TYPE_NORMAL
- en: '{ path: ''/about'', component: About },'
  prefs: []
  type: TYPE_NORMAL
- en: '{ path: ''/contact'', component: Contact }'
  prefs: []
  type: TYPE_NORMAL
- en: '];'
  prefs: []
  type: TYPE_NORMAL
- en: const router = new VueRouter({
  prefs: []
  type: TYPE_NORMAL
- en: routes
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: new Vue({
  prefs: []
  type: TYPE_NORMAL
- en: 'render: h => h(App),'
  prefs: []
  type: TYPE_NORMAL
- en: router
  prefs: []
  type: TYPE_NORMAL
- en: '}).$mount(''#app'');'
  prefs: []
  type: TYPE_NORMAL
- en: In the code snippet, Vue Router is configured with a set of routes, each associated
    with a specific component – Home, About, and Contact. This basic setup establishes
    the connection between routes and their corresponding components, laying the groundwork
    for seamless navigation within the Vue.js application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigating with Router Links: Vue.js Reactive Navigation'
  prefs: []
  type: TYPE_NORMAL
- en: Vue Router simplifies navigation by providing the router-link component, enabling
    developers to create navigation links that seamlessly respond to user interactions.
  prefs: []
  type: TYPE_NORMAL
- en: <!-- App.vue -->
  prefs: []
  type: TYPE_NORMAL
- en: <template>
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: <h1>Vue Router App</h1>
  prefs: []
  type: TYPE_NORMAL
- en: <router-link to="/">Home</router-link>
  prefs: []
  type: TYPE_NORMAL
- en: <router-link to="/about">About</router-link>
  prefs: []
  type: TYPE_NORMAL
- en: <router-link to="/contact">Contact</router-link>
  prefs: []
  type: TYPE_NORMAL
- en: <router-view></router-view>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </template>
  prefs: []
  type: TYPE_NORMAL
- en: <script>
  prefs: []
  type: TYPE_NORMAL
- en: export default {
  prefs: []
  type: TYPE_NORMAL
- en: // App component content
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: The router-link components in the template represent links to the home, about,
    and contact pages. When users click these links, Vue Router ensures a reactive
    transition to the associated route, rendering the corresponding component in the
    router-view placeholder. This straightforward approach simplifies navigation within
    Vue.js applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Route Parameters: Dynamic Routes in Vue.js'
  prefs: []
  type: TYPE_NORMAL
- en: The "Basic Routing and Navigation" section introduces the concept of route parameters,
    allowing developers to create dynamic routes that respond to varying data.
  prefs: []
  type: TYPE_NORMAL
- en: // main.js
  prefs: []
  type: TYPE_NORMAL
- en: const routes = [
  prefs: []
  type: TYPE_NORMAL
- en: '{ path: ''/user/:id'', component: UserProfile }'
  prefs: []
  type: TYPE_NORMAL
- en: '];'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the route /user/:id defines a dynamic segment :id in the path.
    This enables Vue.js applications to capture different user IDs from the URL, providing
    a mechanism for dynamic content rendering based on route parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '"Basic Routing and Navigation" in the "Vue Router for Navigation" module establishes
    the fundamental principles of navigation within Vue.js applications. From configuring
    Vue Router with basic routes to leveraging router links for reactive navigation
    and exploring dynamic routes with parameters, this section equips developers with
    the knowledge and tools needed to create well-structured and navigable Vue.js
    applications. The code examples provide a practical guide for implementing basic
    routing features, laying the groundwork for more advanced navigation capabilities
    in subsequent sections.'
  prefs: []
  type: TYPE_NORMAL
- en: Route Parameters and Queries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The "Vue Router for Navigation" module in the book "Vue.js Essentials: For
    Responsive Web Development" advances into a more dynamic realm with the section
    titled "Route Parameters and Queries." This section introduces crucial concepts
    that elevate the navigation experience within Vue.js applications, offering developers
    the tools to work with dynamic routes and query parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: // main.js
  prefs: []
  type: TYPE_NORMAL
- en: const routes = [
  prefs: []
  type: TYPE_NORMAL
- en: '{ path: ''/user/:id'', component: UserProfile },'
  prefs: []
  type: TYPE_NORMAL
- en: '{ path: ''/search'', component: SearchResults }'
  prefs: []
  type: TYPE_NORMAL
- en: '];'
  prefs: []
  type: TYPE_NORMAL
- en: In the code snippet, the route /user/:id includes a dynamic segment :id to capture
    user-specific data, while the route /search sets the stage for incorporating query
    parameters in the Vue.js application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dynamic Routes with Route Parameters: Vue.js Responsive to User-Specific Data'
  prefs: []
  type: TYPE_NORMAL
- en: Route parameters provide a mechanism for creating dynamic routes that respond
    to varying data. In this example, the route /user/:id accommodates user-specific
    information based on the captured :id parameter.
  prefs: []
  type: TYPE_NORMAL
- en: // UserProfile.vue
  prefs: []
  type: TYPE_NORMAL
- en: <template>
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: <h2>User Profile</h2>
  prefs: []
  type: TYPE_NORMAL
- en: '<p>User ID: {{ $route.params.id }}</p>'
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </template>
  prefs: []
  type: TYPE_NORMAL
- en: <script>
  prefs: []
  type: TYPE_NORMAL
- en: export default {
  prefs: []
  type: TYPE_NORMAL
- en: // UserProfile component content
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: The UserProfile component extracts the user ID from the route parameters using
    $route.params.id. This Vue.js feature allows developers to dynamically display
    content based on the captured parameter, enhancing the responsiveness of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Incorporating Query Parameters: Vue.js Search Functionality'
  prefs: []
  type: TYPE_NORMAL
- en: Query parameters extend the capabilities of Vue Router by enabling the incorporation
    of additional information in the URL. This is particularly useful for implementing
    search functionality and other scenarios where supplementary data needs to be
    conveyed.
  prefs: []
  type: TYPE_NORMAL
- en: // SearchResults.vue
  prefs: []
  type: TYPE_NORMAL
- en: <template>
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: <h2>Search Results</h2>
  prefs: []
  type: TYPE_NORMAL
- en: '<p>Query: {{ $route.query.q }}</p>'
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </template>
  prefs: []
  type: TYPE_NORMAL
- en: <script>
  prefs: []
  type: TYPE_NORMAL
- en: export default {
  prefs: []
  type: TYPE_NORMAL
- en: // SearchResults component content
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: In the SearchResults component, the query parameter q is extracted using $route.query.q.
    This Vue.js functionality allows developers to respond to user queries and adjust
    the displayed content accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigating with Dynamic Routes and Queries: Vue.js Seamless User Experience'
  prefs: []
  type: TYPE_NORMAL
- en: The integration of dynamic routes and queries is exemplified by utilizing router-link
    components that reflect the dynamic nature of the application.
  prefs: []
  type: TYPE_NORMAL
- en: <!-- App.vue -->
  prefs: []
  type: TYPE_NORMAL
- en: <template>
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: <h1>Vue Router App</h1>
  prefs: []
  type: TYPE_NORMAL
- en: '<router-link :to="{ path: ''/user/1'' }">User 1</router-link>'
  prefs: []
  type: TYPE_NORMAL
- en: '<router-link :to="{ path: ''/user/2'' }">User 2</router-link>'
  prefs: []
  type: TYPE_NORMAL
- en: '<router-link :to="{ path: ''/search'', query: { q: ''Vue.js'' } }">Search Vue.js</router-link>'
  prefs: []
  type: TYPE_NORMAL
- en: <router-view></router-view>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </template>
  prefs: []
  type: TYPE_NORMAL
- en: <script>
  prefs: []
  type: TYPE_NORMAL
- en: export default {
  prefs: []
  type: TYPE_NORMAL
- en: // App component content
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: In this example, router-link components are dynamically generated, allowing
    users to navigate to specific user profiles and trigger searches based on Vue.js-related
    queries. The use of dynamic paths and queries contributes to a seamless and responsive
    user experience.
  prefs: []
  type: TYPE_NORMAL
- en: '"Route Parameters and Queries" within the "Vue Router for Navigation" module
    expands the capabilities of Vue.js navigation. Developers are empowered to create
    dynamic routes that respond to user-specific data and incorporate query parameters
    for enhanced functionality. The detailed code examples showcase the practical
    implementation of these features, providing a comprehensive guide to leveraging
    dynamic routing and queries within Vue.js applications.'
  prefs: []
  type: TYPE_NORMAL
- en: Navigation Guards in Vue Router
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The "Vue Router for Navigation" module in the book "Vue.js Essentials: For
    Responsive Web Development" introduces an advanced topic with the section titled
    "Navigation Guards." This section dives into the powerful capabilities of navigation
    guards in Vue Router, allowing developers to exert control over the navigation
    flow within their Vue.js applications.'
  prefs: []
  type: TYPE_NORMAL
- en: // main.js
  prefs: []
  type: TYPE_NORMAL
- en: const router = new VueRouter({
  prefs: []
  type: TYPE_NORMAL
- en: routes
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: router.beforeEach((to, from, next) => {
  prefs: []
  type: TYPE_NORMAL
- en: // Navigation guard logic
  prefs: []
  type: TYPE_NORMAL
- en: if (to.meta.requiresAuth && !auth.isAuthenticated) {
  prefs: []
  type: TYPE_NORMAL
- en: next('/login');
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: next();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: new Vue({
  prefs: []
  type: TYPE_NORMAL
- en: 'render: h => h(App),'
  prefs: []
  type: TYPE_NORMAL
- en: router
  prefs: []
  type: TYPE_NORMAL
- en: '}).$mount(''#app'');'
  prefs: []
  type: TYPE_NORMAL
- en: In the code snippet, a beforeEach navigation guard is added to the Vue Router
    instance. This guard is executed before each navigation, providing an opportunity
    to perform logic and influence the navigation process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Global Navigation Guard: Vue.js Authentication Example'
  prefs: []
  type: TYPE_NORMAL
- en: The global navigation guard illustrated in the example addresses authentication
    requirements. The guard checks whether the destination route (to) requires authentication
    (to.meta.requiresAuth) and whether the user is authenticated (auth.isAuthenticated).
    If authentication is required and the user is not authenticated, the navigation
    is redirected to the login page (next('/login')). Otherwise, the navigation proceeds
    as usual.
  prefs: []
  type: TYPE_NORMAL
- en: // App.vue
  prefs: []
  type: TYPE_NORMAL
- en: <template>
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: <h1>Vue Router App</h1>
  prefs: []
  type: TYPE_NORMAL
- en: <router-link to="/">Home</router-link>
  prefs: []
  type: TYPE_NORMAL
- en: <router-link to="/dashboard" v-if="auth.isAuthenticated">Dashboard</router-link>
  prefs: []
  type: TYPE_NORMAL
- en: <router-link to="/login" v-if="!auth.isAuthenticated">Login</router-link>
  prefs: []
  type: TYPE_NORMAL
- en: <router-view></router-view>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </template>
  prefs: []
  type: TYPE_NORMAL
- en: <script>
  prefs: []
  type: TYPE_NORMAL
- en: export default {
  prefs: []
  type: TYPE_NORMAL
- en: 'computed: {'
  prefs: []
  type: TYPE_NORMAL
- en: auth() {
  prefs: []
  type: TYPE_NORMAL
- en: return this.$store.state.auth;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: </script>
  prefs: []
  type: TYPE_NORMAL
- en: In the App component, the presence or absence of certain router links is conditionally
    determined based on the authentication state. This Vue.js integration showcases
    how navigation guards can be seamlessly combined with the overall application
    structure to enforce specific navigation behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Per-Route Navigation Guards: Vue.js Specific Route Control'
  prefs: []
  type: TYPE_NORMAL
- en: Navigation guards can also be applied at the per-route level, allowing developers
    to define specific guards for individual routes.
  prefs: []
  type: TYPE_NORMAL
- en: // main.js
  prefs: []
  type: TYPE_NORMAL
- en: const routes = [
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: 'path: ''/dashboard'','
  prefs: []
  type: TYPE_NORMAL
- en: 'component: Dashboard,'
  prefs: []
  type: TYPE_NORMAL
- en: 'beforeEnter: (to, from, next) => {'
  prefs: []
  type: TYPE_NORMAL
- en: // Per-route guard logic
  prefs: []
  type: TYPE_NORMAL
- en: if (!auth.isAuthenticated) {
  prefs: []
  type: TYPE_NORMAL
- en: next('/login');
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: next();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '];'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the beforeEnter guard is associated directly with the /dashboard
    route. It performs similar authentication checks and redirects the navigation
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '"Navigation Guards in Vue Router" within the "Vue Router for Navigation" module
    introduces a powerful mechanism for controlling the flow of navigation in Vue.js
    applications. Whether implementing global guards for authentication requirements
    or defining per-route guards for specific route control, navigation guards offer
    a sophisticated toolset for developers to enforce logic during the navigation
    lifecycle. The detailed code examples demonstrate the practical implementation
    of these guards, providing a comprehensive guide for integrating navigation guards
    into Vue.js applications for enhanced control and security.'
  prefs: []
  type: TYPE_NORMAL
