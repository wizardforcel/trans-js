- en: '`Hoisting`'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`提升`'
- en: In JavaScript, variables and functions can be accessed `before` their actual
    declaration, and the term used to describe this in JavaScript is `Hoisting`.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在JavaScript中，变量和函数可以在实际声明之前被访问，而在JavaScript中描述这种情况的术语是`提升`。
- en: '`var` declarations'
  id: totrans-2
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`var`声明'
- en: The term “hoisting” is mostly associated with function declarations and variables
    declared with the `var` keyword. Let’s take a look at how `hoisting` is associated
    with the `var` variables.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: “提升”这个术语通常与函数声明和使用`var`关键字声明的变量相关。让我们看看`提升`是如何与`var`变量相关的。
- en: 'Consider the following code example:'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 考虑以下代码示例：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can run the above code in the `Replit` below:'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你可以在下面的`Replit`中运行上述代码：
- en: '`<ReplitEmbed src="https://replit.com/@newlineauthors/hoisting-example1" />`'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<ReplitEmbed src="https://replit.com/@newlineauthors/hoisting-example1" />`'
- en: The output of the above code shows `hoisting` in action. The first line in the
    above code outputs `undefined` on the console, but how is this possible? How are
    we able to access the `result` variable `before` it is actually declared on the
    second line?
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 上述代码的输出显示了`提升`的实际效果。上述代码的第一行在控制台输出`undefined`，但这怎么可能呢？我们如何能够在第二行实际声明之前访问`result`变量？
- en: 'This is made possible because of the `parsing` step before the code is executed.
    The preprocessing of the JavaScript code before its execution allows the JavaScript
    engine to detect some errors early before any code is executed. The following
    code example shows this in action:'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是由于在代码执行之前的`解析`步骤使其成为可能。JavaScript代码在执行前的预处理允许JavaScript引擎提前检测到一些错误，而无需执行任何代码。以下代码示例展示了这一过程：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here’s the `Replit` to run the above code:'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里是运行上述代码的`Replit`：
- en: '`<ReplitEmbed src="https://replit.com/@newlineauthors/hoisting-example2" />`'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<ReplitEmbed src="https://replit.com/@newlineauthors/hoisting-example2" />`'
- en: Without any preprocessing of the code, the JavaScript engine cannot detect the
    syntax error inside the `print` function unless the function is invoked or called,
    and the above code should log `hello world` on the console without throwing any
    errors because the function containing the syntax error hasn’t been called. But
    the above code throws an error instead of logging `hello world` on the console.
    Why is that? The answer is the processing step before the code execution.
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果没有对代码进行任何预处理，JavaScript引擎在函数被调用或调用之前无法检测到`print`函数中的语法错误，而上述代码应该在控制台上记录`hello
    world`，且不会抛出任何错误，因为包含语法错误的函数尚未被调用。但是上述代码却抛出了错误，而不是在控制台上记录`hello world`。这是为什么呢？答案在于代码执行前的处理步骤。
- en: The JavaScript engine scans the code before executing it, allowing it to detect
    some errors before any code is executed. This also enables the engine to handle
    variable declarations by registering the variables declared in the current scope.
    Before any scope starts, all the variables declared in that scope are registered
    for that scope. In other words, all the variables declared in a scope are reserved
    for that scope before the code in that scope is executed. This preprocessing of
    the code before its execution is what enables `hoisting`. This allows us to refer
    to `var` variables `before` they are actually declared in the code.
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: JavaScript引擎在执行代码之前会扫描代码，这使它能够在执行任何代码之前检测到一些错误。这也使引擎能够通过注册当前作用域中声明的变量来处理变量声明。在任何作用域开始之前，该作用域中声明的所有变量都会被注册。换句话说，在该作用域中的代码执行之前，所有在该作用域中声明的变量都为该作用域保留。这种代码执行前的预处理使得`提升`成为可能。这使我们能够在`var`变量实际声明之前引用它们。
- en: Let us revisit the code example given above that logs `undefined` to the console.
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们重新审视上面那个将`undefined`记录到控制台的代码示例。
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If the `var` variables are `hoisted`, and we can refer to them `before` their
    declaration, then why is `undefined` logged on the console instead of the actual
    value of the `result` variable, which should be `15`?
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果`var`变量是`提升`的，并且我们可以在声明之前引用它们，那么为什么在控制台上记录的是`undefined`而不是`result`变量的实际值，后者应该是`15`呢？
- en: The thing with the hoisting of the `var` variables is that only their `declaration`
    is hoisted, not their values. These variables are assigned the value of `undefined`,
    and the actual value, `15` in the above code example, is assigned when their declaration
    is executed during the step-by-step execution of the code.
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`var`变量的提升问题在于只有它们的`声明`被提升，而不是它们的值。这些变量被赋值为`undefined`，而实际值`15`在代码逐步执行的声明阶段被赋值。'
- en: '`Function` declarations'
  id: totrans-19
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`函数`声明'
- en: 'Function declarations, just like variables declared using the `var` keyword,
    are also hoisted. The following code example shows the hoisting of a function
    declaration in action:'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数声明与使用`var`关键字声明的变量一样，也会被提升。以下代码示例展示了函数声明提升的实际情况：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here’s the Replit to run the above code:'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是运行上述代码的Replit：
- en: '`<ReplitEmbed src=”https://replit.com/@newlineauthors/hoisting-example4” />`'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<ReplitEmbed src=”https://replit.com/@newlineauthors/hoisting-example4” />`'
- en: If `var` variables are assigned a value of `undefined` before their declaration
    is executed, how are we able to call the function `before` its declaration? How
    is the hoisting of function declarations different from the hoisting of variables
    declared using the `var` keyword? The difference here is that in the case of function
    declarations, the function’s name is registered as a variable in the scope containing
    the function declaration, and it is initialized with the function itself.
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果在变量声明执行之前`var`变量被赋值为`undefined`，我们如何能够在其声明之前调用函数？函数声明的提升与使用`var`关键字声明的变量的提升有什么不同？不同之处在于，函数声明的情况下，函数的名称作为变量在包含函数声明的作用域中被注册，并用函数本身进行初始化。
- en: In the above code example, the `startCar` is registered as a variable in the
    global scope, and it is assigned the function. Unlike the `var` variables, there
    is no initialization with the `undefined` value in the case of function declarations.
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在上述代码示例中，`startCar`作为变量在全局作用域中注册，并赋值为该函数。与`var`变量不同，函数声明的情况下没有用`undefined`值进行初始化。
- en: It is hard to see how hoisting can be a useful feature for a programming language
    until we see the hoisting of function declarations. To be able to call a function
    `before` or `after` the function declaration is really useful and frees the developer
    from arranging the code in such a way that every function declaration comes `before`
    it is called. This helps in code organization, as we can declare functions together
    either at the top or at the bottom of the code file and call them from anywhere
    we want in that file.
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在看到函数声明的提升之前，很难想象提升会是编程语言的一个有用特性。能够在函数声明`before`或`after`调用函数确实很有用，解放了开发者使代码安排成每个函数声明都在调用之前的方式。这有助于代码组织，因为我们可以在代码文件的顶部或底部一起声明函数，并从文件中的任何位置调用它们。
- en: Function declarations inside blocks
  id: totrans-27
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 块内的函数声明
- en: For a long time, function declarations inside blocks weren’t part of the ECMAScript
    specification, but that changed with the introduction of ES2015. Since the function
    declarations weren’t part of the specification before 2015 and were allowed in
    the language by the JavaScript engines, they were handled differently by different
    engines.
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 很长一段时间内，块内的函数声明并不属于ECMAScript规范，但在ES2015引入后情况发生了变化。由于在2015年前函数声明不属于规范，并且在JavaScript引擎中被允许，因此不同的引擎处理的方式有所不同。
- en: In ES2015, the ECMAScript specification defined `standard` and `legacy` rules
    for handling function declarations.
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在ES2015中，ECMAScript规范定义了处理函数声明的`standard`和`legacy`规则。
- en: Standard rules
  id: totrans-30
  prefs:
  - PREF_H4
  stylish: true
  type: TYPE_NORMAL
  zh: 标准规则
- en: According to the standard rules, the function declarations inside blocks are
    `hoisted` to the top of the block, converted into a function expression, and assigned
    to a variable declared with the `let` keyword.
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 根据标准规则，块内的函数声明会被`hoisted`到块的顶部，转换为函数表达式，并分配给使用`let`关键字声明的变量。
- en: The function hoisted inside the block is limited to the containing block and
    cannot be accessed by code outside the block containing the function.
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在块内提升的函数仅限于包含块，无法被包含该函数的块外的代码访问。
- en: :::note
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: :::note
- en: It is important to note that the standard rules only come into effect in [`strict
    mode`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode).
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 重要的是要注意，标准规则仅在[`strict mode`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)中生效。
- en: ':::'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: ':::'
- en: 'The following code example will help you better understand the standard rules
    for function declarations inside blocks:'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下代码示例将帮助你更好地理解块内函数声明的标准规则：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'According to the standard rules, the function inside the `if` block should
    be treated as shown below:'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 根据标准规则，`if`块内的函数应如下所示：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `fnInsideBlock` function in the above code can only be called from within
    the `if` block.
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 上述代码中的`fnInsideBlock`函数只能在`if`块内被调用。
- en: Legacy rules
  id: totrans-41
  prefs:
  - PREF_H4
  stylish: true
  type: TYPE_NORMAL
  zh: 旧规则
- en: The [legacy rules](https://262.ecma-international.org/13.0/#sec-block-level-function-declarations-web-legacy-compatibility-semantics)
    are applied to the non-strict code in web browsers. According to the legacy rules,
    apart from a `let` variable for a function declaration inside a block, there is
    also a `var` variable in the containing function scope.
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[遗留规则](https://262.ecma-international.org/13.0/#sec-block-level-function-declarations-web-legacy-compatibility-semantics)适用于
    Web 浏览器中的非严格代码。根据遗留规则，除了块内函数声明的`let`变量外，包含函数作用域中还存在一个`var`变量。'
- en: 'Let us take the code example given in the above section and add the function
    calls:'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们以上节中的代码示例为例，添加函数调用：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can run the above code in the Replit below:'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你可以在下面的 Replit 中运行上述代码：
- en: <ReplitEmbed src="https://replit.com/@newlineauthors/hoisting-example7" />
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: <ReplitEmbed src="https://replit.com/@newlineauthors/hoisting-example7" />
- en: As the above code is executed in strict mode, the standard rules apply; as a
    result, the above code throws an error because, as explained in the above section,
    the function inside the block is hoisted to the top of the containing scope and
    is only accessible inside that block. As a result, the function call outside the
    `if` block throws an error.
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当上述代码在严格模式下执行时，标准规则适用；因此，上述代码抛出一个错误，因为如上节所解释的，块内的函数被提升到包含作用域的顶部，并且只能在该块内访问。因此，`if`块外的函数调用会抛出错误。
- en: If the `"use strict"` directive is removed from the above code, it will execute
    without any error. Why is that? This is because, in non-strict mode, the legacy
    rules for function declarations in a block apply, and according to the legacy
    rules, the hoisted function inside the block is assigned to a `var` variable that
    is declared in the containing function scope.
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果上面的代码中移除了`"use strict"`指令，它将会正常执行而不会产生任何错误。这是因为在非严格模式下，块内的函数声明适用遗留规则，而根据遗留规则，块内的提升函数被赋值给在包含函数作用域中声明的`var`变量。
- en: 'The above code, when executed in non-strict mode, is treated by the JavaScript
    engines as shown below:'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 上述代码在非严格模式下执行时，JavaScript 引擎的处理如下所示：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here’s a Replit demonstrating the above code:'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是一个演示上述代码的 Replit：
- en: <ReplitEmbed src="https://replit.com/@newlineauthors/hoisting-example8" />
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: <ReplitEmbed src="https://replit.com/@newlineauthors/hoisting-example8" />
- en: :::note
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: :::note
- en: In the transformed code above, `fnInsideBlockVar` and `fnInsideBlock` are the
    same variables handled behind the scenes by the JavaScript engines. The names
    are shown to be different just for the sake of explaining how the function declarations
    in blocks are handled according to the legacy rules.
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在上面的转换代码中，`fnInsideBlockVar` 和 `fnInsideBlock` 是 JavaScript 引擎背后处理的相同变量。为了说明根据遗留规则块内的函数声明是如何处理的，这些名称看似不同。
- en: ':::'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: ':::'
- en: Now, it should be clear why removing the `"use strict"` directive allows the
    code to be executed without any error. The hoisted function inside the block is
    assigned to a `var` variable defined in the function scope. As a result, the function
    inside the block is accessible outside the containing `if` block.
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，应该清楚为什么移除`"use strict"`指令允许代码在没有任何错误的情况下执行。块内的提升函数被赋值给在函数作用域中定义的`var`变量。因此，块内的函数在包含的`if`块外是可访问的。
- en: :::tip
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: :::tip
- en: The legacy rules are complicated and confusing; as a result, we shouldn’t rely
    on code that depends on the legacy rules for function declarations inside blocks.
    We should write code in strict mode to keep confusing complexities from entering
    our code.
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 遗留规则复杂且令人困惑；因此，我们不应该依赖于依赖遗留规则的代码来进行块内的函数声明。我们应该在严格模式下编写代码，以防混乱的复杂性进入我们的代码。
- en: ':::'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: ':::'
- en: Further reading
  id: totrans-60
  prefs:
  - PREF_H5
  stylish: true
  type: TYPE_NORMAL
  zh: 深入阅读
- en: '[What are the precise semantics of block-level functions in ES6? - (stackoverflow
    post)](https://stackoverflow.com/questions/31419897/what-are-the-precise-semantics-of-block-level-functions-in-es6)'
  id: totrans-61
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '[ES6 中块级函数的精确语义是什么？ - (stackoverflow 帖子)](https://stackoverflow.com/questions/31419897/what-are-the-precise-semantics-of-block-level-functions-in-es6)'
- en: '[Why does block assigned value change global variable? - (stackoverflow post)](https://stackoverflow.com/questions/61191014/why-does-block-assigned-value-change-global-variable)'
  id: totrans-62
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '[为什么块内赋值会改变全局变量？ - (stackoverflow 帖子)](https://stackoverflow.com/questions/61191014/why-does-block-assigned-value-change-global-variable)'
- en: '[Function declaration in block moving temporary value outside of block? - (stackoverflow
    post)](https://stackoverflow.com/questions/58619924/function-declaration-in-block-moving-temporary-value-outside-of-block)'
  id: totrans-63
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '[块内函数声明如何将临时值移出块？ - (stackoverflow 帖子)](https://stackoverflow.com/questions/58619924/function-declaration-in-block-moving-temporary-value-outside-of-block)'
- en: Class declarations
  id: totrans-64
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 类声明
- en: 像函数声明一样，类声明也被提升，但与函数声明相比，它们是*以不同的方式*被提升的。
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 像函数声明一样，类声明也被提升，但与函数声明相比，它们是*以不同的方式*被提升的。
- en: 虽然我们可以在函数声明*之前*访问它，但在类声明的情况下我们不能这样做。这难道不意味着类声明没有被提升吗？不，它们是被提升的，但*以不同的方式*。
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 虽然我们可以在函数声明*之前*访问它，但在类声明的情况下我们不能这样做。这难道不意味着类声明没有被提升吗？不，它们是被提升的，但*以不同的方式*。
- en: 让我们先通过以下代码示例验证类声明确实被提升：
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们先通过以下代码示例验证类声明确实被提升：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 这是一个展示上述代码的Replit：
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是一个展示上述代码的Replit：
- en: '`<ReplitEmbed src="https://replit.com/@newlineauthors/hoisting-example9" />`'
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<ReplitEmbed src="https://replit.com/@newlineauthors/hoisting-example9" />`'
- en: 上述代码抛出错误，证明类声明确实被提升。
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 上述代码抛出错误，证明类声明确实被提升。
- en: 如果类声明没有被提升，那么`console.log`函数调用应该在控制台打印“Honda”，但事实并非如此。这是因为`if`块中的类声明是被提升的，而任何在`Car`声明之前或之后访问`Car`的代码将会访问类声明，而不是在`if`语句之前声明的`Car`变量。`if`块中标识符`Car`指向类声明而不是在`if`语句之前声明的`Car`变量，这证明了类声明确实是被提升的。
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果类声明没有被提升，那么`console.log`函数调用应该在控制台打印“Honda”，但事实并非如此。这是因为`if`块中的类声明是被提升的，而任何在`Car`声明之前或之后访问`Car`的代码将会访问类声明，而不是在`if`语句之前声明的`Car`变量。`if`块中标识符`Car`指向类声明而不是在`if`语句之前声明的`Car`变量，这证明了类声明确实是被提升的。
- en: 所以，如果类声明是被提升的，为什么我们不能在其声明*之前*访问它们呢？这个问题的答案是“**Temporal Dead Zone (TDZ)**”。
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 所以，如果类声明是被提升的，为什么我们不能在其声明*之前*访问它们呢？这个问题的答案是“**Temporal Dead Zone (TDZ)**”。
- en: Temporal Dead Zone (TDZ)
  id: totrans-74
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: Temporal Dead Zone (TDZ)
- en: '[Temporal Dead Zone (TDZ)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz)指的是在块级作用域变量（`let`、`const`）或类声明无法被访问的时间。这个时间从作用域的开始到声明被执行的时间开始。以下代码示例将帮助我们可视化TDZ：'
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[Temporal Dead Zone (TDZ)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz)指的是在块级作用域变量（`let`、`const`）或类声明无法被访问的时间。这个时间从作用域的开始到声明被执行的时间开始。以下代码示例将帮助我们可视化TDZ：'
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: TDZ是类声明无法在其声明被执行之前被访问的原因，发生在代码逐步执行的过程中。
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: TDZ是类声明无法在其声明被执行之前被访问的原因，发生在代码逐步执行的过程中。
- en: '`let`和`const`'
  id: totrans-78
  prefs:
  - PREF_H4
  stylish: true
  type: TYPE_NORMAL
  zh: '`let`和`const`'
- en: 由于TDZ也适用于`let`和`const`，那么使用`let`声明的变量或使用`const`声明的常量也被提升吗？是的，它们也是被提升的，但与类声明一样，它们的提升是*不同的*，因为TDZ的原因。
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 由于TDZ也适用于`let`和`const`，那么使用`let`声明的变量或使用`const`声明的常量也被提升吗？是的，它们也是被提升的，但与类声明一样，它们的提升是*不同的*，因为TDZ的原因。
- en: :::info
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: :::info
- en: 这是一个常见的误解，认为块级作用域变量和常量没有被提升，但正如我们之前讨论的，它们是被提升的；只不过它们的提升与使用`var`关键字声明的变量相比是*不同的*。
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是一个常见的误解，认为块级作用域变量和常量没有被提升，但正如我们之前讨论的，它们是被提升的；只不过它们的提升与使用`var`关键字声明的变量相比是*不同的*。
- en: ':::'
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: ':::'
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 你可以在以下Replit中查看上述代码示例的实际情况：
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你可以在以下Replit中查看上述代码示例的实际情况：
- en: '`<ReplitEmbed src="https://replit.com/@newlineauthors/hoisting-example11" />`'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<ReplitEmbed src="https://replit.com/@newlineauthors/hoisting-example11" />`'
- en: 函数和类表达式
  id: totrans-86
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 函数和类表达式
- en: 函数和类表达式没有被提升。考虑以下代码示例：
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数和类表达式没有被提升。考虑以下代码示例：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 这是上述代码示例在Replit中的实际情况：
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是上述代码示例在Replit中的实际情况：
- en: '`<ReplitEmbed src="https://replit.com/@newlineauthors/hoisting-example12" />`'
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<ReplitEmbed src="https://replit.com/@newlineauthors/hoisting-example12" />`'
- en: 在上述代码示例中，由于变量`Car`和`Person`是使用`var`关键字声明的，我们可以在它们的声明之前访问它们，并且它们的值为`undefined`。这是因为只有声明被提升，而不是它们的值。在上述代码示例中，值是表达式，并没有被提升。
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在上述代码示例中，由于变量`Car`和`Person`是使用`var`关键字声明的，我们可以在它们的声明之前访问它们，并且它们的值为`undefined`。这是因为只有声明被提升，而不是它们的值。在上述代码示例中，值是表达式，并没有被提升。
- en: 如果我们尝试创建`Car`类的实例或调用`Person`构造函数，我们会遇到一个错误。值得注意的是，在这种情况下我们得到的错误不是引用错误（在未声明标识符的情况下抛出的错误），而是类型错误，这是因为`Car`和`Person`被提升并初始化为`undefined`，我们不能将`undefined`作为构造函数调用。请记住，在这种情况下只有声明被提升，而不是它们的值。
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果我们尝试创建`Car`类的实例或调用`Person`构造函数，我们会遇到一个错误。值得注意的是，在这种情况下我们得到的错误不是引用错误（在未声明标识符的情况下抛出的错误），而是类型错误，这是因为`Car`和`Person`被提升并初始化为`undefined`，我们不能将`undefined`作为构造函数调用。请记住，在这种情况下只有声明被提升，而不是它们的值。
- en: 提升可能是一个让人感到困惑的概念，特别是对于初学者，因为提升与`var`变量、函数声明以及ES2015变化（即块作用域变量/常量和ES2015类）之间的差异。
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 提升可能是一个让人感到困惑的概念，特别是对于初学者，因为提升与`var`变量、函数声明以及ES2015变化（即块作用域变量/常量和ES2015类）之间的差异。
- en: 关于提升的常见误解
  id: totrans-94
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 关于提升的常见误解
- en: 许多JavaScript初学者对提升的概念有误解，认为JavaScript引擎*移动*了提升的声明到文件的顶部。虽然这使得理解提升的概念变得容易，但这并不是现实。
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 许多JavaScript初学者对提升的概念有误解，认为JavaScript引擎*移动*了提升的声明到文件的顶部。虽然这使得理解提升的概念变得容易，但这并不是现实。
- en: JavaScript引擎不会将提升的声明移动到文件的顶部。相反，它们只是处理声明，然后逐步执行代码。在`var`变量的情况下，它们在声明被执行之前被赋值为`undefined`。在块作用域变量的情况下，它们被标记为“未初始化”。
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: JavaScript引擎不会将提升的声明移动到文件的顶部。相反，它们只是处理声明，然后逐步执行代码。在`var`变量的情况下，它们在声明被执行之前被赋值为`undefined`。在块作用域变量的情况下，它们被标记为“未初始化”。
