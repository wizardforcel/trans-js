- en: Chapter 16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These are the solutions to the exercises found in the section [​*Exercises*​](f_0165.xhtml#heaps.exercises).
  prefs: []
  type: TYPE_NORMAL
- en: 'After inserting an 11, the heap would look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![images/heaps/solution_1.png](images/heaps/solution_1.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'After deleting the root node, the heap would look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![images/heaps/solution_2.png](images/heaps/solution_2.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The numbers would be in perfect descending order. (This is for a max-heap. For
    a min-heap, they’d be in ascending order.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do you realize what this means? It means you’ve just discovered another sorting
    algorithm!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Heapsort is a sorting algorithm that inserts all the values into a heap and
    then pops each one. As you can see from this exercise, the values always end up
    in sorted order.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Like Quicksort, Heapsort is O(N log N). This is because we need to insert N
    values into the heap, and each insertion takes log N steps.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: While there are fancier versions of Heapsort that try to maximize its efficiency,
    this is the basic idea.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
