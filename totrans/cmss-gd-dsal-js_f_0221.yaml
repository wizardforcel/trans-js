- en: Chapter 16
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: These are the solutions to the exercises found in the section[`Exercises`](f_0165.xhtml#heaps.exercises).
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'After inserting an `11`, the heap would look like this:'
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/heaps/solution_1.png`](images/heaps/solution_1.png)'
  id: totrans-3
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_IMG
- en: 'After deleting the root node, the heap would look like this:'
  id: totrans-4
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/heaps/solution_2.png`](images/heaps/solution_2.png)'
  id: totrans-5
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_IMG
- en: The numbers would be in perfect descending order. (This is for a max-heap. For
    a min-heap, they’d be in ascending order.)
  id: totrans-6
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: Do you realize what this means? It means you’ve just discovered another sorting
    algorithm!
  id: totrans-7
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: Heapsort is a sorting algorithm that inserts all the values into a heap and
    then pops each one. As you can see from this exercise, the values always end up
    in sorted order.
  id: totrans-8
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: Like `Quicksort`, `Heapsort` is `O(N log N)` because we need to insert `N` values
    into the heap, and each insertion takes `log N` steps.
  id: totrans-9
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: While there are fancier versions of `Heapsort` that try to maximize its efficiency,
    this is the basic idea.
  id: totrans-10
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
