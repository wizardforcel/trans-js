- en: 'Chapter 7: Adding Commenting Functionality'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will enhance our blogging application by adding the ability
    for users to comment on blog posts. Comments provide a way for users to engage
    with the content and share their thoughts. Let's dive into implementing commenting
    functionality!
  prefs: []
  type: TYPE_NORMAL
- en: 7.1 Creating a Comment Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, let''s create a new model called `Comment` to represent comments
    on blog posts. In the `models/comment.js` file, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this code, we define the `Comment` schema with the `content` field to store
    the comment content, the `postId` field to establish a relationship with the corresponding
    blog post, and the `createdAt` field to store the creation date of the comment.
    We export the `Comment` model for use in other parts of our application.
  prefs: []
  type: TYPE_NORMAL
- en: 7.2 Adding Comment Creation Route
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, let''s add a route to handle the creation of comments. In the `routes/comments.js`
    file, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this code, we define a route to handle the creation of comments. We extract
    the `content` and `postId` from the request body and validate that both fields
    are provided. If not, we return a 400 status code with an error message.
  prefs: []
  type: TYPE_NORMAL
- en: We create a new instance of the `Comment` model with the extracted data and
    save it to the database using the `save` method. If the save operation is successful,
    we return a 201 status code with a success message. Otherwise, we return a 500
    status code with an error message.
  prefs: []
  type: TYPE_NORMAL
- en: 7.3 Retrieving Comments for a Post
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To retrieve all comments for a specific blog post, we''ll add a route that
    takes a post ID as a parameter. In the `routes/comments.js` file, add the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this code, we define a route that accepts the
  prefs: []
  type: TYPE_NORMAL
- en: '`postId` as a parameter. We use the `Comment` model''s `find` method to retrieve
    all comments associated with the specified post ID. If the retrieval is successful,
    we return a 200 status code with the array of comments. If there''s an error,
    we return a 500 status code with an error message.'
  prefs: []
  type: TYPE_NORMAL
- en: 7.4 Displaying Comments in the Frontend
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To display the comments on the blog post page in the frontend, update your
    blog post template (e.g., `views/post.ejs`) to include the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this code, we iterate over the `comments` array passed from the server and
    display each comment's content and creation date. We also provide a comment form
    that includes a hidden field for the post ID and a textarea for entering the comment
    content.
  prefs: []
  type: TYPE_NORMAL
- en: 7.5 Enhancing the User Experience
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To improve the user experience, we can add some JavaScript functionality to
    enable the submission of comments via AJAX and dynamically update the comments
    section. Add the following code to your frontend JavaScript file (e.g., `public/js/main.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this code, we add an event listener to the comment form's submit event. When
    the form is submitted, we prevent the default form submission behavior and extract
    the comment content and post ID.
  prefs: []
  type: TYPE_NORMAL
- en: We then send a POST request to the `/
  prefs: []
  type: TYPE_NORMAL
- en: comments/create` endpoint with the comment data as JSON. If the request is successful,
    we clear the comment form and fetch the updated comments for the post. The `updateComments`
    function is called to dynamically update the comments section with the new comments.
  prefs: []
  type: TYPE_NORMAL
- en: 7.6 Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Congratulations! In this chapter, we successfully implemented commenting functionality
    in our blogging application. Users can now comment on blog posts, and the comments
    are stored in the database. We also enhanced the user experience by dynamically
    updating the comments section without requiring a page refresh.
  prefs: []
  type: TYPE_NORMAL
