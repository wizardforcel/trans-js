- en: Palindrome Checker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A palindrome is a word or phrase that reads the same both forward and backward.
    Some examples include racecar, kayak, and deified.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a function that determines whether a string is a palindrome:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | ​**function**​ isPalindrome(string) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**let**​ leftIndex = 0; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**let**​ rightIndex = string.length - 1; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​*// Iterate until leftIndex reaches the middle of the array:*​ |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**while**​ (leftIndex < Math.floor(string.length / 2)) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​*// If the character on the left doesn''t equal the character*​ |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​*// on the right, the string is not a palindrome:*​ |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**if**​ (string[leftIndex] !== string[rightIndex]) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**return**​ ​**false**​; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: '| ​  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | leftIndex += 1; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | rightIndex -= 1; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: '| ​  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​*// If we got through the entire loop without finding any*​ |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​*// mismatches, the string must be a palindrome:*​ |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**return**​ ​**true**​; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: Let’s determine the Big O of this algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, N is the size of the string passed to this function.
  prefs: []
  type: TYPE_NORMAL
- en: The guts of the algorithm takes place within the while loop. Now, this loop
    is somewhat interesting because it only runs until it reaches the midpoint of
    the string. That would mean that the loop runs N / 2 steps.
  prefs: []
  type: TYPE_NORMAL
- en: However, Big O ignores constants. Because of this, we drop the division by 2,
    and our algorithm is O(N).
  prefs: []
  type: TYPE_NORMAL
