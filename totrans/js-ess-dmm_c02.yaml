- en: Chapter 2
  id: totrans-0
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Programming with Variables
  id: totrans-1
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: IN THIS CHAPTER
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) `Understanding variables`'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) `Assigning names to variables`'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) `Introducing JavaScript data types`'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) `Figuring out numbers`'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) `Stringing strings together`'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'By default, JavaScript programs live a life without short-term memory. The
    web browser executes your code one statement at a time until there are no more
    statements left to process. It all happens in the perpetual present. Ah, but notice
    that I refer to this lack of short-term memory as the “default” state of your
    scripts. It’s not the only state, so that means things can be different. You have
    the power to give your scripts the gift of short-term memory, and you do that
    by using handy little chunks of code called variables. In this chapter, you delve
    into variables, which is a fundamental and crucial programming topic. You investigate
    what variables are, what you can do with them, and how to wield them in your JavaScript
    code.  ## Getting Your Head around Variables'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Why would a script need short-term memory? Because one of the most common concepts
    that crops up when coding is the need to store a temporary value for use later
    on. In most cases, you want to use that value a bit later in the same script.
    However, you may also need to use it in some other script, to populate an HTML
    form, or as part of a larger or more complex calculation.
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: For example, your page may have a button that toggles the page text between
    a larger font size and the regular font size, so you need some way to “remember”
    that choice. Similarly, if your script performs calculations, you may need to
    set aside one or more calculated values to use later. For example, if you’re constructing
    a shopping cart script, you may need to calculate taxes on the order. To do that,
    you must first calculate the total value of the order, store that value, and then
    later take a percentage of it to work out the tax.
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'In programming, the way you save a value for later use is by storing it in
    a variable. A `variable` is a small area of computer memory that’s set aside for
    holding a chunk of program data. The good news is that the specifics of how the
    data is stored and retrieved from memory happen well behind the scenes, so it
    isn’t something you ever have to worry about. As a coder, working with variables
    involves just three things:'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Creating (or `declaring`) variables
  id: totrans-12
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: Assigning values to those variables
  id: totrans-13
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: Including the variables in other statements in your code
  id: totrans-14
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: The next three sections fill in the details.
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '### Declaring a variable with `let`'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The process of creating a variable is called `declaring` in programming terms.
    All declaring really means is that you’re supplying the variable with a name and
    telling the browser to set aside a bit of room in memory to hold whatever value
    you end up storing in the variable. To declare a variable in JavaScript, you use
    the `let` keyword, followed by a space, the name of the variable, and the usual
    line-ending semicolon. For example, to declare a variable named `interestRate`,
    you use the following statement:'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`let interestRate;`'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Remember](images/remember.png) Here are a few things to bear in mind when
    you’re declaring variables in your scripts:'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '**Declare a variable only once:** Although you’re free to use a variable as
    many times as you need to within a script, you declare the variable only once.
    Trying to declare a variable more than once will cause an error.'
  id: totrans-20
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '**Use a comment to describe each variable:** Variables tend to proliferate
    to the point where it often becomes hard to remember what each variable represents.
    You can make the purpose of each variable clear by adding a comment right after
    the variable declaration, like so: `let interestRate; // Annual interest rate
    for loan calculation`'
  id: totrans-21
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '**Declare each variable before you use it:** If you use a variable before you
    declare it, you’ll get an error.'
  id: totrans-22
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '![Remember](images/remember.png) In the first two items here, when I say that
    you’ll “get an error,” I don’t mean that an error message will pop up on the screen.
    The only thing you’ll notice is that your script doesn’t run. To read the error
    message, you need to access your browser’s web development tools, a task I go
    into in satisfying detail in `Chapter 9`(`c09.xhtml`).'
  id: totrans-23
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: '**Declare each variable right before you first use it:** You’ll make your programming
    and debugging (refer to `Chapter 9`)(`c09.xhtml`) life much easier if you follow
    this one simple rule: Declare each variable just before (or as close as possible
    to) the first use of the variable.'
  id: totrans-24
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '![Remember](images/remember.png) The `let` keyword was introduced in ECMAScript
    2015 (ES6). If you need to support really old browsers — I’m looking at `you,`
    Internet Explorer 11 and earlier — then use the `var` keyword instead.  ### Storing
    a value in a variable'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'After your variable is declared, your next task is to give it a value. You
    use the assignment operator — the equals (`=`) sign — to store a value in a variable,
    as in this general statement:'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``variableName = value;``'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s an example that assigns the value `0.06` to a variable named `interestRate`:'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`interestRate = 0.06;`'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Note, too, that if you know the initial value of the variable in advance, you
    can combine the declaration and initial assignment into a single statement, like
    this:'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`let interestRate = 0.06;`'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'It’s important to remember that, given a variable declared with the `let` keyword,
    you’re free to change that variable’s value any time you want. For example, if
    the value you assign to the `interestRate` variable is an annual rate, later on
    your code may need to work with a monthly rate, which is the annual rate divided
    by `12`。Rather than calculate that by hand, just put it in your code using the
    division operator (`/`):'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`interestRate = 0.06 / 12;`'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'As a final note about using a variable assignment, take a look at a variation
    that often causes some confusion among new programmers. Specifically, you can
    set up a statement that assigns a new value to a variable by changing its existing
    value. Here’s an example:'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`interestRate = interestRate / 12;`'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: If you’ve never come across this kind of statement before, it probably looks
    a bit illogical. How can something equal itself divided by `12`？The secret to
    understanding such a statement is to remember that the browser always evaluates
    the right side of the statement — that is, the expression to the right of the
    equals sign (`=`) — first. In other words, it takes the current value of `interestRate`，which
    is `0.06`，and divides it by `12`。The resulting value is what’s stored in `interestRate`
    when all is said and done. For a more in-depth discussion of operators and expressions,
    head over to [Chapter 3](c03.xhtml).
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Remember](images/remember.png) Because of this evaluate-the-expression-and-`then`-store-the-result
    behavior, JavaScript assignment statements shouldn’t be read as “variable `equals`
    expression.” Instead, it makes more sense to think of them as “variable `is set
    to` expression” or “variable `assumes the value given by` expression.” Reading
    assignment statements this way helps to reinforce the important concept that the
    expression result is being stored in the variable. ### Checking out another way
    to declare a variable: `const`'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The word `variable` implies that the value assigned to a variable is allowed
    to `vary`，which is the case for most variables you declare. Most, but not all.
    Sometimes your scripts will need to use a value that remains constant. For example,
    suppose you’re building a calculator that converts miles to kilometers. The conversion
    factor is `1.60934`，and that value will remain constant throughout your script.
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: It’s good programming practice to store such values in a variable for easier
    reading. However, if you use `let` for this declaration, you run the risk of accidentally
    changing the value somewhere in your code because variables declared with `let`
    can change.
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'To avoid accidentally changing a value that you want to remain constant, you
    can declare the variable using the `const` keyword instead. Here’s the general
    syntax:'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`const variableName = value;`'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Note that, unlike with `let`，you must assign a value to the variable when you
    declare it with `const`. Here’s an example that declares a variable named `milesToKilometers`
    and assigns it the value `1.60934`:'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`const milesToKilometers = 1.60934;`'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Remember](images/remember.png) 在变量的值必须永远不变的情况下，使用`const`而不是`let`是否有实际优势？是的，有两个相当不错的理由：'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 使用`const`关键字提醒您正在处理一个不可更改的值，这有助于您记住不为该变量分配新值。
  id: totrans-45
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 如果您尝试更改用`const`声明的变量的值，您将产生一个错误，这也是提醒您该变量的值不应被更改的另一种方式。
  id: totrans-46
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '![Tip](images/tip.png) 鉴于这些优势，许多JavaScript程序员用`const`声明每个变量，仅在知道变量会变化时使用`let`。随着代码的进展，如果您发现`const`变量需要更改，您可以回去将`const`改为`let`。
    ### 在语句中使用变量'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在声明并赋值变量后，您可以在其他语句中使用该变量。当浏览器遇到该变量时，它会访问计算机的内存，检索变量的当前值，然后将该值替换到语句中。以下代码提供了一个示例：
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`let interestRate = 0.06; interestRate = interestRate / 12; document.write(interestRate);`'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 该代码声明了一个名为`interestRate`的变量，值为`0.06`；然后将该值除以12并将结果存储在变量中。`document.write()`语句随后显示该变量的当前值，如[图
    2-1](#c02-fig-0001)所示。
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![A snapshot displays the browser substituting the current value of a variable.
    The value given is, 0.005.](images/9781394263219-fg0201.png)'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '[FIGURE 2-1:](#rc02-fig-0001) 浏览器替换当前变量的值。'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 以下代码展示了一个略微不同的示例：
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`let firstName; firstName = prompt("Please tell me your first name:"); document.write("Welcome
    to my website, " + firstName);`'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 该脚本使用`prompt()`方法（稍后会解释）询问用户输入他们的名字，如[图 2-2](#c02-fig-0002)所示。当用户点击确定时，他们的名字存储在`firstName`变量中。该脚本随后使用`document.write()`语句显示一条个性化的欢迎消息，使用`firstName`变量的值，如[图
    2-3](#c02-fig-0003)所示。
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![A snapshot displays the script first prompts for the user’s first name. The
    name given is, Alphonse.](images/9781394263219-fg0202.png)'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '[FIGURE 2-2:](#rc02-fig-0002) 该脚本首先提示用户输入他们的名字。'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![A snapshot displays the script uses the name to display a personalized welcome
    message. The message reads, welcome to my website, Alphonse.](images/9781394263219-fg0203.png)'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '[FIGURE 2-3:](#rc02-fig-0003) 该脚本然后使用该名字显示个性化的欢迎消息。'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Remember](images/remember.png) 当您需要从用户那里获取数据时，运行`prompt()`方法：'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`prompt(string, default);`'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s what the various parts are:'
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`string`: A string that instructs the user what to enter into the prompt box.'
  id: totrans-63
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`default`: An optional string that specifies the initial value that appears
    in the prompt box.'
  id: totrans-64
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 'The `prompt()` method always returns a value:'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: If the user clicks OK, `prompt()` returns the value entered into the prompt
    text box.
  id: totrans-66
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 'If the user clicks Cancel, `prompt()` returns `null`.  ## Naming Variables:
    Rules and Best Practices'
  id: totrans-67
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: If you want to write clear, easy-to-follow, and easy-to-debug scripts (and who
    doesn’t?), you can go a long way toward that goal by giving careful thought to
    the names you use for your variables. This section helps by running through the
    rules you need to follow and by giving you some tips and guidelines for creating
    good variable names.
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '### Rules for naming variables'
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'JavaScript has only a few rules for variable names:'
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The first character must be a letter or an underscore (`_`). You can’t use a
    number as the first character.
  id: totrans-71
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: The rest of the variable name can include any letter, any number, or the underscore.
    You can’t use any other characters, including spaces, symbols, and punctuation
    marks.
  id: totrans-72
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: As with the rest of JavaScript, variable names are case sensitive. That is,
    a variable named `InterestRate` is treated as an entirely different variable than
    one named `interestRate`.
  id: totrans-73
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: There’s no limit to the length of the variable name.
  id: totrans-74
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 'You can’t use one of JavaScript’s `reserved words` as a variable name (such
    as `let`, `const`, `var`, `alert`, or `prompt`). All programming languages have
    a supply of words that are used internally by the language and that can’t be used
    for variable names, because doing so would cause confusion (or worse).  ### Ideas
    for good variable names'
  id: totrans-75
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 'The process of declaring a variable doesn’t take much thought, but that doesn’t
    mean you should just type in any old variable name that comes to mind. Take a
    few extra seconds to come up with a good name by following these guidelines:'
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Make your names descriptive. Sure, using names that are just a few characters
    long makes them easier to type, but I guarantee you that you won’t remember what
    the variables represent when you look at the script down the road. For example,
    if you want a variable to represent an account number, use `accountNumber` or
    `accountNum` instead of, say, `acnm` or `accnum`.
  id: totrans-77
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '![Remember](images/remember.png)Mostly avoid single-letter names. Although
    it’s best to avoid single-letter variable names, such short names are accepted
    in some places, such as when constructing loops, as described in [Chapter 4](c04.xhtml).'
  id: totrans-78
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: Use multiple words with no spaces. The best way to create a descriptive variable
    name is to use multiple words. However, because JavaScript doesn’t take kindly
    to spaces in names, you need some way of separating the words to keep the name
    readable. The two standard conventions for using multi-word variable names are
    `camelCase` where you cram the words together and capitalize all but the first
    word (for example, `lastName`), or to separate each word with an underscore (for
    example, `last_name`). I prefer the former style, so I use it throughout this
    book.
  id: totrans-79
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: Use separate naming conventions. Use one naming convention for JavaScript variables
    and a different one for HTML identifiers and CSS classes. For example, if you
    use `camelCase` for multiword JavaScript variables, use dashes to separate words
    for `id` values and class names.
  id: totrans-80
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: Differentiate your variable names from JavaScript keywords. Try to make your
    variable names look as different from JavaScript’s keywords and other built-in
    terms (such as `alert`) as possible. Differentiating variable names helps avoid
    the confusion that can arise when you look at a term and you can’t remember if
    it’s a variable or a JavaScript word.
  id: totrans-81
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 'Don’t make your names too long. Although short, cryptic variable names are
    to be shunned in favor of longer, descriptive names, that doesn’t mean you should
    be using entire sentences. Extremely long names are inefficient because they take
    so long to type, and they’re dangerous because the longer the name, the more likely
    you are to make a typo. Names of 2 to 4 words and 8 to 20 characters should be
    all you need.  '
  id: totrans-82
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 'In programming, a variable’s `data type` specifies what kind of data is stored
    within the variable. The data type is a crucial idea because it determines not
    only how two or more variables are combined (for example, mathematically), but
    also whether they can be combined at all. `Literals` are a special class of data
    type, and they cover those values that are fixed (even if only temporarily). For
    example, consider the following variable assignment statement:'
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`let todaysQuestion = "What color is your parachute?";`'
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here, the text `"What color is your parachute?"` is a literal string value.
    JavaScript supports three kinds of literal data types: numeric, string, and Boolean.
    The next three sections discuss each type.'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '### Working with numeric literals'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Unlike many other programming languages, JavaScript treats all numbers the
    same, so you don’t have to do anything special when working with the two basic
    numeric literals, which are integers and floating-point numbers:'
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '**Integers:** These are numbers that don’t have a fractional or decimal part.
    So, you represent an integer using a sequence of one or more digits, as in these
    examples: `0`, `42`, `2001`, `-20`'
  id: totrans-88
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '**Floating-point numbers:** These are numbers that do have a fractional or
    decimal part. Therefore, you represent a floating-point number by first writing
    the integer part, followed by a decimal point, followed by the fractional or decimal
    part, as in these examples: `0.07 3.14159 -16.6666667 7.6543e+21 1.234567E-89`'
  id: totrans-89
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '#### Exponential notation'
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The last two floating-point examples require a bit more explanation. These two
    use `exponential notation`，which is an efficient way to represent really large
    or really small floating-point numbers. `Exponential notation` uses an `e` (or
    `E`) followed by the `exponent`，which is a number preceded by a plus sign (`+`)
    or a minus sign (`-`)。
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'You multiply the first part of the number (that is, the part before the `e`
    or `E`) by `10` to the power of the exponent. Here’s an example:'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`9.87654e+5;`'
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The exponent is `5`，and `10` to the power of `5` is `100,000`。So, multiplying
    `9.87654` by `100,000` results in the value `987,654`。
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s another example:'
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`3.4567e-4;`'
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The exponent is `-4`，and `10` to the power of `-4` is `0.0001`。So, multiplying
    `3.4567` by `0.0001` results in the value `.00034567`。  #### Hexadecimal integer
    values'
  id: totrans-97
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: You’ll likely deal with the usual decimal (base-10) number system throughout
    most of your JavaScript career. However, just in case you have cause to work with
    hexadecimal (base-16) numbers, this section shows you how JavaScript deals with
    them.
  id: totrans-98
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The hexadecimal number system uses the digits `0` through `9` and the letters
    `A` through `F` (or `a` through `f`)，where these letters represent the decimal
    numbers `10` through `15`。So, what in the decimal system would be `16` is actually
    `10` in hexadecimal。To specify a hexadecimal number in JavaScript，begin the number
    with a `0x` (or `0X`)，as shown in the following examples:'
  id: totrans-99
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`0x23; 0xff; 0X10ce;`  ### Working with string literals'
  id: totrans-100
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'A `string literal` is a sequence of one or more letters, numbers, or punctuation
    marks, enclosed either in double quotation marks (`"`) or single quotation marks
    (`''`)。Here are some examples:'
  id: totrans-101
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`"JavaScript Essentials"; ''August 23, 1959''; ""; "What''s the good word?";`'
  id: totrans-102
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Remember](images/remember.png) The string `""` (or `''''` — two consecutive
    single quotation marks) is called the `null string`。It represents a string that
    doesn’t contain any characters。'
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '#### Using quotation marks within strings'
  id: totrans-104
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The final example in the previous section shows that it’s okay to insert one
    or more instances of one of the quotation marks (such as `''`) inside a string
    that’s enclosed by the other quotation mark (such as `"`). Being able to nest
    quotation marks comes in handy when you need to embed one string inside another，which
    is very common (particularly when using bits of JavaScript within HTML tags)。Here’s
    an example:'
  id: totrans-105
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`onsubmit="processForm(''testing'')";`'
  id: totrans-106
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'However, it’s illegal to insert in a string one or more instances of the same
    quotation mark that encloses the string, as in this example:'
  id: totrans-107
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`"This is "illegal" in JavaScript.";`  #### Understanding escape sequences'
  id: totrans-108
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'What if you must include, say, a double quotation mark within a string that’s
    enclosed by double quotation marks? Having to nest the same type of quotation
    mark is rare, but it is possible if you precede the double quotation mark with
    a backslash (`\`), like this:'
  id: totrans-109
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`"The double quotation mark (\") encloses this string.";`'
  id: totrans-110
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The `\"` combination is called an `escape sequence.` You can combine the backslash
    with a number of other characters to form other escape sequences, and each one
    enables the browser to represent a character that, by itself, would be illegal
    or not representable otherwise. [Table 2-1](#c02-tbl-0001) lists the most commonly
    used escape sequences.
  id: totrans-111
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[TABLE 2-1](#rc02-tbl-0001) Common JavaScript Escape Sequences'
  id: totrans-112
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| **Escape Sequence** | **Character It Represents** |'
  id: totrans-113
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-114
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `\''` | Single quotation mark |'
  id: totrans-115
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `\"` | Double quotation mark |'
  id: totrans-116
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `\b` | Backspace |'
  id: totrans-117
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `\f` | Form feed |'
  id: totrans-118
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `\n` | New line |'
  id: totrans-119
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `\r` | Carriage return |'
  id: totrans-120
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `\t` | Tab |'
  id: totrans-121
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| `\\` | Backslash |'
  id: totrans-122
  prefs: []
  stylish: true
  type: TYPE_TB
- en: The following code shows an example script that uses the `\n` escape sequence
    to display text on multiple lines with an alert box.
  id: totrans-123
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`alert("This is line 1.\nSo what. This is line 2.");`'
  id: totrans-124
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[Figure 2-4](#c02-fig-0004) shows the result.'
  id: totrans-125
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![A snapshot of the webpage of paulmcfederies. The message box reads, This
    is line 1\. So what. This is line 2.](images/9781394263219-fg0204.png)'
  id: totrans-126
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '[FIGURE 2-4:](#rc02-fig-0004) Using the `\n` escape sequence enables you to
    format text so that it displays on different lines.'
  id: totrans-127
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'To learn how to combine two or more string literals, check out [Chapter 3](c03.xhtml).
    Also, JavaScript has a nice collection of string manipulation features, which
    I discuss in [Chapter 8](c08.xhtml).  ### Working with Boolean literals'
  id: totrans-128
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Booleans are the simplest of all the literal data types because they can assume
    only one of two values: `true` or `false`. That simplicity may make it seem as
    though Booleans aren’t particularly useful, but the capability to test whether
    a particular variable or condition is true or false is invaluable in JavaScript
    programming.'
  id: totrans-129
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'You can assign Boolean literals directly to a variable, like this:'
  id: totrans-130
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`taskCompleted = true;`'
  id: totrans-131
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Alternatively, you can work with Boolean values implicitly using expressions:'
  id: totrans-132
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`currentMonth === "August"`'
  id: totrans-133
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The comparison expression `currentMonth === "August"` asks the following: Does
    the value of the `currentMonth` variable equal the string `"August"`? If it does,
    the expression evaluates to the Boolean value `true`; if it doesn’t, the expression
    evaluates to `false`. I discuss much more about comparison expressions in [Chapter
    3](c03.xhtml).'
  id: totrans-134
  prefs: []
  stylish: true
  type: TYPE_NORMAL
