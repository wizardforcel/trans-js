["```jsjsx\n\n// Example 1: Functional Component\n\nfunction Greeting(props) {\n\nreturn <h1>Hello, {props.name}!</h1>;\n\n}\n\n// Example 2: Class-based Component\n\nclass Greeting extends React.Component {\n\nrender() {\n\nreturn <h1>Hello, {this.props.name}!</h1>;\n\n}\n\n}\n\n```", "```jsjsx\n\n// Example 3: Using JSX\n\nfunction Greeting(props) {\n\nreturn <h1>Hello, {props.name}!</h1>;\n\n}\n\n```", "```jsjsx\n\n// Example 4: Using State in Functional Component\n\nimport React, { useState } from 'react';\n\nfunction Counter() {\n\nconst [count, setCount] = useState(0);\n\nconst increment = () => {\n\nsetCount(count + 1);\n\n};\n\nreturn (\n\n<div>\n\n<p>Count: {count}</p>\n\n<button onClick={increment}>Increment</button>\n\n</div>\n\n);\n\n}\n\n```", "```jsjsx\n\n// Example 5: Using Props\n\nfunction Greeting(props) {\n\nreturn <h1>Hello, {props.name}!</h1>;\n\n}\n\nfunction App() {\n\nreturn <Greeting name=\"John\" />;\n\n}\n\n```", "```jsbash\n\nnpx create-react-app my-app\n\ncd my-app\n\nnpm start\n\n```", "```jsjsx\n\n// Example 6: Functional Component\n\nfunction Greeting(props) {\n\nreturn <h1>Hello, {props.name}!</h1>;\n\n}\n\n```", "```jsjsx\n\n// Example 7: Class-based Component\n\nclass Greeting extends React.Component {\n\nrender() {\n\nreturn <h1>Hello, {this.props.name}!</h1>;\n\n}\n\n}\n\n```", "```jsjsx\n\n// Example 8: Component Composition\n\nfunction Greeting(props) {\n\nreturn <h1>Hello, {props.name}!</h1>;\n\n}\n\nfunction App() {\n\nreturn (\n\n<div>\n\n<Greeting name=\"John\" />\n\n<Greeting name=\"Jane\" />\n\n</div>\n\n);\n\n}\n\n```", "```jsjsx\n\n// Example 9: Handling Events\n\nfunction Counter() {\n\nconst [count, setCount] = useState(0);\n\nconst increment = () => {\n\nsetCount(count + 1);\n\n};\n\nreturn (\n\n<div>\n\n<p>Count: {count}</p>\n\n<button onClick={increment}>Increment</button>\n\n</div>\n\n);\n\n}\n\n```", "```jsjsx\n\n// Example 10: Working with Forms\n\nfunction LoginForm() {\n\nconst [username, setUsername] = useState('');\n\nconst [password, setPassword] = useState('');\n\nconst handleUsernameChange = (event) => {\n\nsetUsername(event.target.value);\n\n};\n\nconst handlePasswordChange = (event) => {\n\nsetPassword(event.target.value);\n\n};\n\nconst handleSubmit = (event) => {\n\nevent.preventDefault();\n\n// Submit form data to the server\n\n};\n\nreturn (\n\n<form onSubmit={handleSubmit}>\n\n<input\n\ntype=\"text\"\n\nvalue={username}\n\nonChange={handleUsernameChange}\n\nplaceholder=\"Username\"\n\n/>\n\n<input\n\ntype=\"password\"\n\nvalue={password}\n\nonChange={handlePasswordChange}\n\nplaceholder=\"Password\"\n\n/>\n\n<button type=\"submit\">Login</button>\n\n</form>\n\n);\n\n}\n\n```", "```jsjsx\n\n// Example 11: Working with Lists and Keys\n\nfunction UserList() {\n\nconst users = ['John', 'Jane', 'Bob'];\n\nreturn (\n\n<ul>\n\n{users.map((user) => (\n\n<li key={user}>{user}</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```", "```jsjsx\n\n// Example 12: Styling in React\n\nfunction StyledComponent() {\n\nconst styles = {\n\ncolor: 'blue',\n\nfontSize: '20px',\n\nfontWeight: 'bold',\n\n};\n\nreturn <div style={styles}>Styled Component</div>;\n\n}\n\n```", "```jsjsx\n\n// Example 13: State Management with React Context\n\nconst ThemeContext = React.createContext('light');\n\nfunction ThemedButton() {\n\nconst theme = useContext(ThemeContext);\n\nreturn <button style={{ background: theme }}>Themed Button</button>;\n\n}\n\n```"]