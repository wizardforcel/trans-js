- en: '`Chapter 11`: 函数式编程：一种范式转变'
  id: totrans-0
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: '`Chapter 11`: 函数式编程：一种范式转变'
- en: '`Section 11.1`: 函数式编程简介'
  id: totrans-1
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`Section 11.1`: 函数式编程简介'
- en: 函数式编程是一种编程范式，将计算视为数学函数的评估，避免改变状态和可变数据。由于其优雅和简洁的编码风格，近年来受到了广泛关注，这种风格通常导致更可维护和无bug的代码。
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数式编程是一种编程范式，将计算视为数学函数的评估，避免改变状态和可变数据。由于其优雅和简洁的编码风格，近年来受到了广泛关注，这种风格通常导致更可维护和无bug的代码。
- en: 函数式编程的核心围绕函数作为一等公民的概念。在函数式语言中，函数可以赋值给变量、作为参数传递和作为值返回。这种高阶函数能力是函数式编程语言的一个关键特征。
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数式编程的核心围绕函数作为一等公民的概念。在函数式语言中，函数可以赋值给变量、作为参数传递和作为值返回。这种高阶函数能力是函数式编程语言的一个关键特征。
- en: 函数式编程中的一个基本概念是不可变性。在函数式语言中，一旦数据被赋值，就不能被修改。相反，每次转换都会创建新数据。这种不可变性确保数据保持不变，减少副作用的可能性，使得代码更加可预测。
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数式编程中的一个基本概念是不可变性。在函数式语言中，一旦数据被赋值，就不能被修改。相反，每次转换都会创建新数据。这种不可变性确保数据保持不变，减少副作用的可能性，使得代码更加可预测。
- en: 函数式编程语言通常包括像模式匹配和高阶函数这样的特性，这些特性简化了代码，使其更具表现力。这些语言还鼓励递归作为主要的重复手段，对于某些问题，比传统循环更优雅。
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数式编程语言通常包括像模式匹配和高阶函数这样的特性，这些特性简化了代码，使其更具表现力。这些语言还鼓励递归作为主要的重复手段，对于某些问题，比传统循环更优雅。
- en: 函数式编程的优势
  id: totrans-6
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 函数式编程的优势
- en: 函数式编程提供了几个优势：
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数式编程提供了几个优势：
- en: 简洁性：函数式代码通常比等效的命令式代码更简洁和富有表现力。这可以导致更快的开发和更容易的维护。
  id: totrans-8
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 简洁性：函数式代码通常比等效的命令式代码更简洁和富有表现力。这可以导致更快的开发和更容易的维护。
- en: 'Predictability: 不可变性和缺乏副作用使得函数式程序更加可预测，更容易推理。'
  id: totrans-9
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 可预测性：不可变性和缺乏副作用使得函数式程序更加可预测，更容易推理。
- en: 并行性：函数式编程鼓励使用纯函数，这些函数可以轻松并行化，充分利用多核处理器。
  id: totrans-10
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 并行性：函数式编程鼓励使用纯函数，这些函数可以轻松并行化，充分利用多核处理器。
- en: 可重用性：函数式代码往往更模块化，使得在代码库的各个部分更容易重用函数。
  id: totrans-11
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 可重用性：函数式代码往往更模块化，使得在代码库的各个部分更容易重用函数。
- en: 测试：函数式代码通常更容易测试，因为它依赖于具有明确定义的输入和输出的纯函数。
  id: totrans-12
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 测试：函数式代码通常更容易测试，因为它依赖于具有明确定义的输入和输出的纯函数。
- en: '`Python`和`JavaScript`中的函数式特性'
  id: totrans-13
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`Python`和`JavaScript`中的函数式特性'
- en: 虽然像`Haskell`和`Lisp`这样的语言以其纯函数式方法而闻名，但像`Python`和`JavaScript`这样的主流语言也在不同程度上支持函数式编程。
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 虽然像`Haskell`和`Lisp`这样的语言以其纯函数式方法而闻名，但像`Python`和`JavaScript`这样的主流语言也在不同程度上支持函数式编程。
- en: 在`Python`中，你可以使用像`map`、`filter`和`reduce`这样的函数以函数式风格处理列表。`Python`还支持列表推导，使得列表的简洁迭代和转换成为可能。
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在`Python`中，你可以使用像`map`、`filter`和`reduce`这样的函数以函数式风格处理列表。`Python`还支持列表推导，使得列表的简洁迭代和转换成为可能。
- en: 另一方面，`JavaScript`具有匿名函数、闭包和一等函数等特性，使其适合函数式编程。像`Underscore.js`和`lodash`这样的库提供了在`JavaScript`中进行函数式编程的实用函数。
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 另一方面，`JavaScript`具有匿名函数、闭包和一等函数等特性，使其适合函数式编程。像`Underscore.js`和`lodash`这样的库提供了在`JavaScript`中进行函数式编程的实用函数。
- en: 函数式编程并不是一种非此即彼的选择；你可以选择根据需要将函数式原则融入到你的代码中，即使在那些不是纯函数式的语言中。
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数式编程并不是一种非此即彼的选择；你可以选择根据需要将函数式原则融入到你的代码中，即使在那些不是纯函数式的语言中。
- en: 在接下来的部分中，我们将深入探讨在`Python`和`JavaScript`中的具体函数特性和使用案例，探索函数式编程如何增强你的编码技能和解决问题的能力。
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将深入探讨在`Python`和`JavaScript`中的具体函数特性和使用案例，探索函数式编程如何增强你的编码技能和解决问题的能力。
- en: '`* * *`'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`* * *`'
- en: 第11.2节：`Python`和`JavaScript`中的函数特性
  id: totrans-20
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 第11.2节：`Python`和`JavaScript`中的函数特性
- en: 函数式编程概念并不限于像`Haskell`这样的纯函数式语言；它们也可以有效地应用于像`Python`和`JavaScript`这样的主流语言。在本节中，我们将探索这些语言中的一些函数特性和技术。
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数式编程概念并不限于像`Haskell`这样的纯函数式语言；它们也可以有效地应用于像`Python`和`JavaScript`这样的主流语言。在本节中，我们将探索这些语言中的一些函数特性和技术。
- en: '`Python`与函数式编程'
  id: totrans-22
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`Python`与函数式编程'
- en: '`Python`支持多种函数式编程特性和构造，使得开发人员能够编写更简洁和富有表现力的代码。'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Python`支持多种函数式编程特性和构造，使得开发人员能够编写更简洁和富有表现力的代码。'
- en: Lambda 函数：`Python`允许使用`lambda`关键字创建匿名函数。这些函数常常作为高阶函数的参数，如`map`、`filter`和`reduce`。
  id: totrans-24
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: Lambda函数：`Python`允许使用`lambda`关键字创建匿名函数。这些函数常常作为高阶函数的参数，如`map`、`filter`和`reduce`。
- en: '`square = lambda x: x ** 2`'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`square = lambda x: x ** 2`'
- en: '`result = list(map(square, [1, 2, 3, 4, 5]))  # [1, 4, 9, 16, 25]`'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`result = list(map(square, [1, 2, 3, 4, 5]))  # [1, 4, 9, 16, 25]`'
- en: '`Map`, `Filter`, and `Reduce`: 这些内置函数使得在像列表这样的序列上进行函数式操作成为可能。`map`将一个函数应用于每个元素，`filter`根据条件选择元素，`reduce`聚合元素。'
  id: totrans-27
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '`Map`, `Filter`, and `Reduce`: 这些内置函数使得在像列表这样的序列上进行函数式操作成为可能。`map`将一个函数应用于每个元素，`filter`根据条件选择元素，`reduce`聚合元素。'
- en: 使用`map`将每个元素加倍
  id: totrans-28
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 使用`map`将每个元素加倍
- en: '`numbers = [1, 2, 3, 4]`'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`numbers = [1, 2, 3, 4]`'
- en: '`doubled = list(map(lambda x: x * 2, numbers))  # [2, 4, 6, 8]`'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`doubled = list(map(lambda x: x * 2, numbers))  # [2, 4, 6, 8]`'
- en: 使用`filter`选择偶数
  id: totrans-31
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 使用`filter`选择偶数
- en: '`even = list(filter(lambda x: x % 2 == 0, numbers)) # [2, 4]`'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`even = list(filter(lambda x: x % 2 == 0, numbers)) # [2, 4]`'
- en: 使用`reduce`查找元素的和
  id: totrans-33
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 使用`reduce`查找元素的和
- en: '`from functools import reduce`'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`from functools import reduce`'
- en: '`total = reduce(lambda x, y: x + y, numbers) # 10`'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`total = reduce(lambda x, y: x + y, numbers) # 10`'
- en: 列表推导：`Python`的列表推导提供了一种基于现有列表创建新列表的简洁方式，通常消除了显式循环的需要。
  id: totrans-36
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 列表推导：`Python`的列表推导提供了一种基于现有列表创建新列表的简洁方式，通常消除了显式循环的需要。
- en: '`squares = [x ** 2 for x in range(1, 6)]  # [1, 4, 9, 16, 25]`'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`squares = [x ** 2 for x in range(1, 6)]  # [1, 4, 9, 16, 25]`'
- en: 不可变数据结构：`Python`的元组和冻结集合是不可变数据结构，与函数式编程原则相一致。一旦创建，其值不能更改。
  id: totrans-38
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 不可变数据结构：`Python`的元组和冻结集合是不可变数据结构，与函数式编程原则相一致。一旦创建，其值不能更改。
- en: '`point = (3, 4)`'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`point = (3, 4)`'
- en: '`JavaScript`与函数式编程'
  id: totrans-40
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`JavaScript`与函数式编程'
- en: '`JavaScript`对函数式编程的支持深深植根于其设计中，具有鼓励函数式编码实践的特性。'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`JavaScript`对函数式编程的支持深深植根于其设计中，具有鼓励函数式编码实践的特性。'
- en: 一等公民函数：在`JavaScript`中，函数是一等公民，这意味着它们可以赋值给变量，可以作为参数传递，也可以作为返回值返回。这使得高阶函数的使用成为可能。
  id: totrans-42
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 一等公民函数：在`JavaScript`中，函数是一等公民，这意味着它们可以赋值给变量，可以作为参数传递，也可以作为返回值返回。这使得高阶函数的使用成为可能。
- en: '`const square = x => x ** 2;`'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const square = x => x ** 2;`'
- en: '`const result = [1, 2, 3, 4, 5].map(square);  // [1, 4, 9, 16, 25]`'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const result = [1, 2, 3, 4, 5].map(square);  // [1, 4, 9, 16, 25]`'
- en: 闭包：`JavaScript`闭包允许函数捕获和记住其周围的词法作用域。这对于创建私有变量和数据封装非常有用。
  id: totrans-45
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 闭包：`JavaScript`闭包允许函数捕获和记住其周围的词法作用域。这对于创建私有变量和数据封装非常有用。
- en: '`function makeCounter() {`'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`function makeCounter() {`'
- en: '`let count = 0;`'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`let count = 0;`'
- en: '`return () => {`'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return () => {`'
- en: '`count++;`'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`count++;`'
- en: '`return count;`'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return count;`'
- en: '`};`'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`};`'
- en: '`}`'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`const counter = makeCounter();`'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const counter = makeCounter();`'
- en: '`console.log(counter());`  // 1'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.log(counter());`  // 1'
- en: '`console.log(counter());`  // 2'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.log(counter());`  // 2'
- en: 'Higher-Order Functions: `JavaScript` has a rich set of higher-order functions
    like `map`, `filter`, and `reduce` that make it easy to work with arrays in a
    functional manner.'
  id: totrans-56
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 高阶函数：`JavaScript`拥有丰富的高阶函数集，如`map`、`filter`和`reduce`，使得以函数式方式处理数组变得简单。
- en: '`const numbers = [1,  2,  3,  4];`'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const numbers = [1,  2,  3,  4];`'
- en: '`const doubled = numbers.map(x => x *  2);`  // [2, 4, 6, 8]'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const doubled = numbers.map(x => x *  2);`  // [2, 4, 6, 8]'
- en: '`const even = numbers.filter(x => x %  2  ===  0);`  // [2, 4]'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const even = numbers.filter(x => x %  2  ===  0);`  // [2, 4]'
- en: '`const total = numbers.reduce((x, y) => x + y,  0);`  // 10'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const total = numbers.reduce((x, y) => x + y,  0);`  // 10'
- en: 'Immutability: While `JavaScript`’s objects are mutable, libraries like `Immutable.js`
    provide immutable data structures, promoting functional programming practices.'
  id: totrans-61
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 不变性：虽然`JavaScript`的对象是可变的，像`Immutable.js`这样的库提供不可变数据结构，促进函数式编程实践。
- en: '`const { Map } =  require("immutable");`'
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const { Map } =  require("immutable");`'
- en: '`const map1 =  Map({ a:  1,  b:  2 });`'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const map1 =  Map({ a:  1,  b:  2 });`'
- en: '`const map2 = map1.set("b",  3);`'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const map2 = map1.set("b",  3);`'
- en: Both `Python` and `JavaScript` offer powerful tools for functional programming,
    making it possible to write cleaner, more modular, and often more efficient code.
    By embracing functional principles, developers can write code that is easier to
    reason about and maintain, ultimately leading to higher-quality software.
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Python`和`JavaScript`都提供强大的功能来支持函数式编程，使得编写更清晰、更模块化且通常更高效的代码成为可能。通过采用函数式原则，开发人员可以编写更易于理解和维护的代码，最终带来更高质量的软件。'
- en: '* * *'
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '* * *'
- en: '`Section 11.3`: Comparing `Imperative` and `Functional Approaches`'
  id: totrans-67
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`Section 11.3`: 比较`命令式`和`函数式方法`'
- en: In this section, we will explore the differences between `imperative` and `functional
    programming` approaches and understand when each approach is most suitable.
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨`命令式`和`函数式编程`方法的差异，并理解每种方法在何时最合适。
- en: '`Imperative Programming`'
  id: totrans-69
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`命令式编程`'
- en: '`Imperative programming` is a style of coding that focuses on describing the
    steps necessary to achieve a specific goal. It is often characterized by the use
    of statements that change program state. In an imperative program, you specify
    the how of solving a problem, detailing every action required to reach the desired
    outcome.'
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`命令式编程`是一种侧重于描述达到特定目标所需步骤的编码风格。它通常以改变程序状态的语句为特征。在命令式程序中，您指定了解决问题的具体方法，详细说明达到期望结果所需的每个动作。'
- en: An imperative `Python` function to calculate the sum of squares of numbers from
    1 to `n`.
  id: totrans-71
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 一个命令式的`Python`函数，用于计算从1到`n`的数的平方和。
- en: '`def sum_of_squares(n):`'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`def sum_of_squares(n):`'
- en: '`total =  0`'
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`total =  0`'
- en: '`for i in  range(1, n +  1):`'
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`for i in  range(1, n +  1):`'
- en: '`total += i **  2`'
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`total += i **  2`'
- en: '`return total`'
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return total`'
- en: The above code demonstrates an imperative approach to calculating the sum of
    squares. It explicitly defines a loop and accumulates the result step by step.
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 上述代码展示了计算平方和的命令式方法。它明确定义了一个循环，并逐步累积结果。
- en: '`Functional Programming`'
  id: totrans-78
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`函数式编程`'
- en: '`Functional programming`, on the other hand, emphasizes what needs to be done
    rather than how to do it. It treats computation as the evaluation of mathematical
    functions and avoids changing state and mutable data. Functional code tends to
    be more concise, modular, and easier to reason about.'
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 另一方面，`函数式编程`强调需要做什么而不是如何做到。它将计算视为数学函数的评估，并避免改变状态和可变数据。函数式代码往往更简洁、模块化，更易于理解。
- en: A functional `Python` implementation using a higher-order function.
  id: totrans-80
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 使用高阶函数实现的`Python`函数。
- en: '`def sum_of_squares(n):`'
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`def sum_of_squares(n):`'
- en: '`return  sum(map(lambda x: x **  2, range(1, n +  1)))`'
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return  sum(map(lambda x: x **  2, range(1, n +  1)))`'
- en: In the functional approach, we use the `map` and `sum` functions to express
    the computation more declaratively. We don’t specify the individual steps; instead,
    we describe the transformation to be applied to the data.
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在函数式方法中，我们使用`map`和`sum`函数更声明式地表达计算。我们不指定单个步骤，而是描述要应用于数据的转换。
- en: When to Choose Each Approach
  id: totrans-84
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 何时选择每种方法
- en: 'The choice between `imperative` and `functional programming` depends on the
    problem and the context:'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 选择`命令式`或`函数式编程`取决于问题和上下文：
- en: • `Imperative programming` is often more suitable for tasks that involve complex
    state changes, mutable data structures, and low-level operations. It can be a
    better choice when performance or resource utilization is a critical concern.
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: • `命令式编程`通常更适合涉及复杂状态变化、可变数据结构和低级操作的任务。在性能或资源利用是关键问题时，它可能是更好的选择。
- en: Functional programming shines when you want to emphasize simplicity, maintainability,
    and correctness. It is particularly effective for tasks that involve data transformation,
    filtering, or aggregation, as it encourages a more declarative and less error-prone
    style of coding.
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当您希望强调简单性、可维护性和正确性时，函数式编程非常有效。特别适用于涉及数据转换、过滤或聚合的任务，因为它鼓励更声明式和更少出错的编码风格。
- en: In practice, many modern programming languages, including `Python` and `JavaScript`,
    allow you to mix imperative and functional approaches. This flexibility enables
    developers to choose the most appropriate paradigm for each specific part of their
    codebase.
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在实践中，包括`Python`和`JavaScript`在内的许多现代编程语言，允许你混合使用命令式和函数式方法。这种灵活性使得开发者可以根据代码库的不同部分选择最合适的范式。
- en: It’s essential to strike a balance and choose the approach that best matches
    the problem’s nature and the project’s requirements. This flexibility can lead
    to codebases that are both efficient and maintainable.
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在选择方法时，必须找到平衡，并选择最符合问题性质和项目要求的方法。这种灵活性可以导致既高效又易于维护的代码库。
- en: '* * *'
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Section 11.4: Use Cases for Functional Programming'
  id: totrans-91
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 第11.4节：函数式编程的使用案例
- en: Functional programming (`FP`) is a paradigm with distinct characteristics that
    make it suitable for certain types of problems. In this section, we will explore
    common use cases where `FP` shines.
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数式编程（`FP`）是一种具有独特特征的范式，使其适合解决特定类型的问题。在本节中，我们将探讨`FP`出色表现的常见使用案例。
- en: 1. Data Transformation and Processing
  id: totrans-93
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 1. 数据转换和处理
- en: Functional programming is well-suited for tasks that involve data transformation,
    filtering, and aggregation. Operations like `map`, `filter`, and `reduce` are
    staples in functional programming languages and libraries, making it easy to manipulate
    data in a clean and concise manner.
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数式编程非常适合涉及数据转换、过滤和聚合的任务。像`map`、`filter`和`reduce`这样的操作是函数式编程语言和库的核心，使得以简洁、清晰的方式操作数据变得容易。
- en: Using functional programming to manipulate a list of numbers.
  id: totrans-95
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 使用函数式编程操作数字列表。
- en: '`numbers = [1, 2, 3, 4, 5]`'
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`numbers = [1, 2, 3, 4, 5]`'
- en: Calculate the squares of all numbers greater than 2.
  id: totrans-97
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 计算所有大于2的数字的平方。
- en: '`squares = list(map(lambda x: x ** 2, filter(lambda x: x > 2, numbers)))`'
  id: totrans-98
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`squares = list(map(lambda x: x ** 2, filter(lambda x: x > 2, numbers)))`'
- en: 'Result: `[9, 16, 25]`'
  id: totrans-99
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: '结果: `[9, 16, 25]`'
- en: 2. Parallel and Concurrent Programming
  id: totrans-100
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 2. 并行和并发编程
- en: '`FP`’s emphasis on immutability and statelessness makes it an excellent choice
    for parallel and concurrent programming. Because functions are isolated and don’t
    modify shared state, it’s easier to reason about and manage concurrency.'
  id: totrans-101
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`FP` 强调不可变性和无状态性，使其成为并行和并发编程的理想选择。由于函数是隔离的，并且不修改共享状态，因此更容易推理和管理并发性。'
- en: Using functional programming with `Python`'s multiprocessing library.
  id: totrans-102
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 使用函数式编程结合`Python`的多进程库。
- en: '`from multiprocessing import Pool`'
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`from multiprocessing import Pool`'
- en: '`def square(x):`'
  id: totrans-104
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`def square(x):`'
- en: '`return x ** 2`'
  id: totrans-105
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return x ** 2`'
- en: '`if __name__ == ''__main__'':`'
  id: totrans-106
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`if __name__ == ''__main__'':`'
- en: '`numbers = [1, 2, 3, 4, 5]`'
  id: totrans-107
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`numbers = [1, 2, 3, 4, 5]`'
- en: '`with Pool() as pool:`'
  id: totrans-108
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`with Pool() as pool:`'
- en: '`squares = pool.map(square, numbers)`'
  id: totrans-109
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`squares = pool.map(square, numbers)`'
- en: '# Result: `[1, 4, 9, 16, 25]`'
  id: totrans-110
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '# 结果: `[1, 4, 9, 16, 25]`'
- en: 3. Complex Mathematical Calculations
  id: totrans-111
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 3. 复杂的数学计算
- en: Functional programming languages, especially those with strong support for first-class
    functions, excel in solving mathematical problems. `FP`’s mathematical foundation
    allows for concise and expressive representations of complex mathematical functions
    and algorithms.
  id: totrans-112
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数式编程语言，特别是那些对一等函数支持强大的语言，擅长解决数学问题。`FP`的数学基础使得复杂的数学函数和算法能够以简洁而富有表现力的方式呈现。
- en: -- A simple `Haskell` function to calculate the factorial of a number.
  id: totrans-113
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: -- 一个简单的`Haskell`函数，用于计算一个数字的阶乘。
- en: '`factorial :: Integer -> Integer`'
  id: totrans-114
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`factorial :: Integer -> Integer`'
- en: '`factorial 0 = 1`'
  id: totrans-115
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`factorial 0 = 1`'
- en: '`factorial n = n * factorial (n - 1)`'
  id: totrans-116
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`factorial n = n * factorial (n - 1)`'
- en: 4. Handling Streams and Events
  id: totrans-117
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 4. 处理流和事件
- en: In event-driven or reactive programming, where streams of data and events are
    common, `FP` concepts are valuable. Libraries like `RxJS` in JavaScript and reactive
    frameworks leverage functional programming principles to handle asynchronous data
    flows.
  id: totrans-118
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在事件驱动或反应式编程中，数据流和事件流很常见，`FP`的概念非常有价值。像`RxJS`这样的JavaScript库和反应式框架利用函数式编程原理来处理异步数据流。
- en: '`// Using RxJS to filter and map values in an observable stream.`'
  id: totrans-119
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 使用RxJS在可观察流中过滤和映射值。`'
- en: '`import { from } from ''rxjs'';`'
  id: totrans-120
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`import { from } from ''rxjs'';`'
- en: '`import { filter, map } from ''rxjs/operators'';`'
  id: totrans-121
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`import { filter, map } from ''rxjs/operators'';`'
- en: '`const numbers =  from([1,  2,  3,  4,  5]);`'
  id: totrans-122
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const numbers = from([1, 2, 3, 4, 5]);`'
- en: '`const squares = numbers.pipe(`'
  id: totrans-123
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const squares = numbers.pipe(`'
- en: '`filter(x => x >  2),`'
  id: totrans-124
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`filter(x => x > 2),`'
- en: '`map(x => x **  2)`'
  id: totrans-125
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`map(x => x ** 2)`'
- en: '`);`'
  id: totrans-126
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`);`'
- en: '`// Result: 9, 16, 25 (as an observable)`'
  id: totrans-127
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 结果: 9, 16, 25 (作为可观察对象)`'
- en: '`5\. Domain-Specific Languages (DSLs)`'
  id: totrans-128
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`5\. 领域特定语言（DSLs）`'
- en: 函数式编程常用于创建针对特定问题域量身定制的领域特定语言（`DSLs`）。`DSLs` 使开发者能够编写与问题空间紧密相关的代码，从而提高可读性和可维护性。
  id: totrans-129
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数式编程常用于创建针对特定问题域量身定制的领域特定语言（`DSLs`）。`DSLs` 使开发者能够编写与问题空间紧密相关的代码，从而提高可读性和可维护性。
- en: '`--` An example of a DSL for working with financial transactions in Haskell.'
  id: totrans-130
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`--` 一个用于处理财务交易的 Haskell DSL 示例。'
- en: '`transfer ::  Account  ->  Account  ->  Amount  ->  Transaction`'
  id: totrans-131
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`transfer ::  Account  ->  Account  ->  Amount  ->  Transaction`'
- en: '`transfer fromAccount toAccount amount =`'
  id: totrans-132
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`transfer fromAccount toAccount amount =`'
- en: '`Transaction fromAccount toAccount (negate amount) :+  Transaction toAccount
    fromAccount amount`'
  id: totrans-133
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Transaction fromAccount toAccount (negate amount) :+  Transaction toAccount
    fromAccount amount`'
- en: 函数式编程适用于这些用例，源于其对不变性、纯度和无副作用的重视。虽然并非所有问题都最好用函数式编程解决，但认识到何时应用其原则可以在特定场景中导致更清晰、更易维护的代码。
  id: totrans-134
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数式编程适用于这些用例，源于其对不变性、纯度和无副作用的重视。虽然并非所有问题都最好用函数式编程解决，但认识到何时应用其原则可以在特定场景中导致更清晰、更易维护的代码。
- en: '* * *'
  id: totrans-135
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '* * *'
- en: '`Section 11.5: The Future of Functional Programming`'
  id: totrans-136
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`第11.5节：函数式编程的未来`'
- en: 函数式编程（`FP`）近年来获得了关注，前景看好。在这里，我们将讨论一些趋势和发展，表明`FP`的持续相关性和增长。
  id: totrans-137
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数式编程（`FP`）近年来获得了关注，前景看好。在这里，我们将讨论一些趋势和发展，表明 `FP` 的持续相关性和增长。
- en: '`1\. Wider Adoption in Mainstream Languages`'
  id: totrans-138
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`1\. 主流语言中更广泛的采用`'
- en: Many mainstream programming languages have been incorporating functional programming
    features. Languages like `Python`，`JavaScript`，和 `C#` 有引入函数式构造，使开发者能够更容易地采用函数式编程原则，而无需转向纯函数式语言。
  id: totrans-139
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 许多主流编程语言已经开始融入函数式编程特性。像 `Python`，`JavaScript`，和 `C#` 等语言引入了函数式构造，使开发者能够更容易地采用函数式编程原则，而无需转向纯函数式语言。
- en: '`Python` 的引入的 `lambda` 函数和列表推导。'
  id: totrans-140
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: '`Python` 引入的 `lambda` 函数和列表推导。'
- en: '`squares = [x **  2  for x in  range(1, 6)]`'
  id: totrans-141
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`squares = [x **  2  for x in  range(1, 6)]`'
- en: '`Result: [1, 4, 9, 16, 25]`'
  id: totrans-142
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: '`Result: [1, 4, 9, 16, 25]`'
- en: '`2\. Functional-First Languages`'
  id: totrans-143
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`2\. 函数式优先的语言`'
- en: Functional-first languages like `Haskell`，`Elm`，和 `Clojure` 继续蓬勃发展。它们为函数式编程原则提供强有力的支持，并被选择用于需要正确性、可靠性和可维护性的项目。
  id: totrans-144
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数式优先的语言，如 `Haskell`，`Elm`，和 `Clojure` 继续蓬勃发展。它们为函数式编程原则提供强有力的支持，并被选择用于需要正确性、可靠性和可维护性的项目。
- en: '`--` A simple Haskell function that reverses a list.'
  id: totrans-145
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`--` 一个简单的 Haskell 函数，用于反转列表。'
- en: '`reverseList :: [a] -> [a]`'
  id: totrans-146
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`reverseList :: [a] -> [a]`'
- en: '`reverseList [] = []`'
  id: totrans-147
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`reverseList [] = []`'
- en: '`reverseList (x:xs) = reverseList xs ++ [x]`'
  id: totrans-148
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`reverseList (x:xs) = reverseList xs ++ [x]`'
- en: '`3\. Reactive and Event-Driven Systems`'
  id: totrans-149
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`3\. 响应式和事件驱动系统`'
- en: 随着反应式和事件驱动架构的兴起，函数式编程变得更加相关。像 `Akka` 用于 `Scala` 和 `RxJS` 用于 `JavaScript` 的库和框架使开发者能够使用函数式编程概念构建高度响应和可扩展的系统。
  id: totrans-150
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 随着反应式和事件驱动架构的兴起，函数式编程变得更加相关。像 `Akka` 用于 `Scala` 和 `RxJS` 用于 `JavaScript` 的库和框架使开发者能够使用函数式编程概念构建高度响应和可扩展的系统。
- en: '`// Using Akka Streams for event-driven processing in Scala.`'
  id: totrans-151
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 在 Scala 中使用 Akka Streams 进行事件驱动处理。`'
- en: '`import akka.actor.ActorSystem`'
  id: totrans-152
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`import akka.actor.ActorSystem`'
- en: '`import akka.stream._`'
  id: totrans-153
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`import akka.stream._`'
- en: '`import akka.stream.scaladsl._`'
  id: totrans-154
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`import akka.stream.scaladsl._`'
- en: '`implicit  val system: ActorSystem =  ActorSystem("akka-streams-example")`'
  id: totrans-155
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`implicit  val system: ActorSystem =  ActorSystem("akka-streams-example")`'
- en: '`implicit  val materializer: Materializer =  ActorMaterializer()`'
  id: totrans-156
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`implicit  val materializer: Materializer =  ActorMaterializer()`'
- en: '`val numbers = Source(1 to 5)`'
  id: totrans-157
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`val numbers = Source(1 to 5)`'
- en: '`val squares = numbers.map(x => x * x)`'
  id: totrans-158
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`val squares = numbers.map(x => x * x)`'
- en: '`// Result: 1, 4, 9, 16, 25 (as a stream)`'
  id: totrans-159
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 结果：1, 4, 9, 16, 25（作为一个流）`'
- en: '`4\. Advances in Type Systems`'
  id: totrans-160
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`4\. 类型系统的进展`'
- en: Type systems in functional languages are becoming more sophisticated, enabling
    better type inference and safer code. Features like dependent types, refined types,
    and gradual typing are emerging, enhancing the expressiveness and correctness
    of FP code.
  id: totrans-161
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数式语言中的类型系统正在变得更加复杂，能够更好地进行类型推断和确保代码的安全性。依赖类型、精细类型和渐进类型等特性正在出现，增强了 FP 代码的表达能力和正确性。
- en: '`-- An Elm type alias representing positive integers.`'
  id: totrans-162
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`-- 一个表示正整数的 Elm 类型别名。`'
- en: '`type alias PositiveInt = Int`'
  id: totrans-163
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`type alias PositiveInt = Int`'
- en: '`|> where (\x -> x > 0)`'
  id: totrans-164
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`|> where (\x -> x > 0)`'
- en: 5\. Functional for Data Science and AI
  id: totrans-165
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 5\. 数据科学和人工智能中的函数式编程
- en: Functional programming is finding applications in data science and artificial
    intelligence. Libraries like `TensorFlow` for Python offer functional APIs for
    deep learning, and functional languages like `Scala` are used for distributed
    data processing in big data environments.
  id: totrans-166
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数式编程在数据科学和人工智能中的应用越来越广泛。像 `TensorFlow` 这样的 Python 库为深度学习提供了函数式 API，而像 `Scala`
    这样的函数式语言则用于大数据环境中的分布式数据处理。
- en: Functional API in `TensorFlow` for deep learning.
  id: totrans-167
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: TensorFlow 中用于深度学习的函数式 API。
- en: '`import tensorflow as tf`'
  id: totrans-168
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`import tensorflow as tf`'
- en: '`model = tf.keras.Sequential([`'
  id: totrans-169
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`model = tf.keras.Sequential([`'
- en: '`tf.keras.layers.Dense(128, activation=''relu''),`'
  id: totrans-170
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`tf.keras.layers.Dense(128, activation=''relu''),`'
- en: '`tf.keras.layers.Dense(10, activation=''softmax'')`'
  id: totrans-171
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`tf.keras.layers.Dense(10, activation=''softmax'')`'
- en: '`]`'
  id: totrans-172
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`]`'
- en: 6\. Functional in Blockchain and Smart Contracts
  id: totrans-173
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 6\. 区块链和智能合约中的函数式编程
- en: Blockchain platforms like `Ethereum` are embracing functional languages like
    `Solidity` for writing smart contracts. FP’s deterministic and verifiable nature
    aligns well with the requirements of blockchain systems.
  id: totrans-174
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 像 `Ethereum` 这样的区块链平台正在采用像 `Solidity` 这样的函数式语言来编写智能合约。函数式编程的确定性和可验证性特征与区块链系统的需求高度契合。
- en: '`// A simple smart contract in Solidity.`'
  id: totrans-175
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 一个简单的 Solidity 智能合约示例。`'
- en: '`pragma solidity ^0.8.0;`'
  id: totrans-176
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`pragma solidity ^0.8.0;`'
- en: '`contract SimpleStorage {`'
  id: totrans-177
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`contract SimpleStorage {`'
- en: '`uint256 storedData;`'
  id: totrans-178
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`uint256 storedData;`'
- en: '`function set(uint256 x) public {`'
  id: totrans-179
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`function set(uint256 x) public {`'
- en: '`storedData = x;`'
  id: totrans-180
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`storedData = x;`'
- en: '`}`'
  id: totrans-181
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`function get() public view returns (uint256) {`'
  id: totrans-182
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`function get() public view returns (uint256) {`'
- en: '`return storedData;`'
  id: totrans-183
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return storedData;`'
- en: '`}`'
  id: totrans-184
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-185
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: The future of functional programming is not limited to these trends alone. As
    software development continues to evolve, FP’s principles of immutability, purity,
    and composability are expected to play a significant role in addressing the challenges
    of modern software engineering, making it a valuable skill for developers to learn
    and master.
  id: totrans-186
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数式编程的未来不仅限于这些趋势。随着软件开发的不断发展，函数式编程中关于不变性、纯度和可组合性的原则预计将在解决现代软件工程挑战中发挥重要作用，这使得它成为开发者学习和掌握的宝贵技能。
- en: '* * *'
  id: totrans-187
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '* * *'
