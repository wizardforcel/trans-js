- en: '`Deletion`'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`删除`'
- en: Linked lists also shine when it comes to deletion, especially when deleting
    from the beginning of the list.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 链表在删除方面也表现出色，特别是在从列表的开头删除时。
- en: 'To delete a node from the beginning of a linked list, all we need to do is
    perform one step: we change the `firstNode` of the linked list to now point to
    the second node.'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要从链表的开头删除一个节点，我们只需执行一步：将链表的 `firstNode` 更改为指向第二个节点。
- en: Let’s return to our example of the linked list containing the values `"once"`,
    `"upon"`, `"a"`， and `"time"`。If we want to delete the value `"once"`，we could
    simply change the linked list to begin at `"upon"`：
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们回到包含值 `"once"`、`"upon"`、`"a"` 和 `"time"` 的链表示例。如果我们想要删除值 `"once"`，我们可以简单地将链表的起始点改为
    `"upon"`：
- en: '| ​  | `list`.firstNode = `node2`; |'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `list`.firstNode = `node2`; |'
- en: Contrast this with an array, in which deleting the first element means shifting
    all remaining data one cell to the left, which takes `O(N)` time.
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 与数组对比，在数组中删除第一个元素意味着将所有剩余数据向左移动一个单元，这需要 `O(N)` 的时间。
- en: When it comes to deleting the final node of a linked list, the actual deletion
    takes one step—we just take the second-to-last node and make its link null. However,
    it takes `N` steps to even access the second-to-last node in the first place,
    since we need to start at the beginning of the list and follow the links until
    we reach it.
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在删除链表的最后一个节点时，实际删除只需一步——我们只需将倒数第二个节点的链接设为 null。然而，要访问倒数第二个节点则需要 `N` 步，因为我们需要从链表的开头开始，跟随链接直到达到它。
- en: 'The following table contrasts the various scenarios of deletion for both arrays
    and linked lists. Note how it’s identical to insertion:'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 下表对比了数组和链表的各种删除场景。注意这与插入是相同的：
- en: '| Situation | Array | Linked List |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 情况 | 数组 | 链表 |'
- en: '| --- | --- | --- |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Delete at beginning | Worst case | Best case |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 在开头删除 | 最坏情况 | 最好情况 |'
- en: '| Delete at middle | Average case | Average case |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 在中间删除 | 平均情况 | 平均情况 |'
- en: '| Delete at end | Best case | Worst case |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 在末尾删除 | 最好情况 | 最坏情况 |'
- en: While deleting from the beginning or end of a linked list is straightforward,
    deleting from anywhere in the middle is slightly more involved.
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 虽然从链表的开头或结尾删除是直接的，但从中间的任何位置删除稍微复杂一些。
- en: 'Say we want to delete the value at index 2 (`"purple"`) from our example linked
    list of colors, as shown in the following diagram:'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 假设我们想从示例颜色链表中删除索引为 2 (`"purple"`) 的值，如下图所示：
- en: '![images/pitting_linked_lists_against_arrays/list_of_colors.png](images/pitting_linked_lists_against_arrays/list_of_colors.png)'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/pitting_linked_lists_against_arrays/list_of_colors.png](images/pitting_linked_lists_against_arrays/list_of_colors.png)'
- en: To accomplish this, we need to first access the node immediately preceding the
    one we’re deleting (`"blue"`）。Then we change its link to point to the node that
    is immediately after the node we’re deleting (`"green"`).
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们需要先访问我们要删除的节点（`"blue"`）前面的节点。然后我们将其链接更改为指向删除节点后面的节点（`"green"`）。
- en: The following visualization demonstrates us changing the link of the `"blue"`
    node from `"purple"` to `"green"`：
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 下面的可视化演示了我们将 `"blue"` 节点的链接从 `"purple"` 更改为 `"green"`：
- en: '![images/pitting_linked_lists_against_arrays/linked_list_6.png](images/pitting_linked_lists_against_arrays/linked_list_6.png)'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/pitting_linked_lists_against_arrays/linked_list_6.png](images/pitting_linked_lists_against_arrays/linked_list_6.png)'
- en: It’s interesting to note that whenever we delete a node from our linked list,
    the node still exists in memory somewhere. We’re just removing the node from our
    list by ensuring that no other node from the list links to it. This has the effect
    of deleting the node from our list, even if the node still exists in memory.
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 有趣的是，每当我们从链表中删除一个节点时，该节点在内存中仍然存在。我们只是通过确保链表中的其他节点不再链接到它来将其从链表中移除。这会导致节点在链表中被删除，即使该节点在内存中仍然存在。
- en: (Different programming languages handle these deleted nodes in various ways.
    Some will automatically detect that they’re not being used and will “garbage collect”
    them, freeing up memory.)
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: （不同的编程语言以各种方式处理这些被删除的节点。有些会自动检测到它们不再被使用，并进行“垃圾回收”，释放内存。）
- en: '`Code Implementation`: `Linked List Deletion`'
  id: totrans-21
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`代码实现`：`链表删除`'
- en: 'Here’s what the delete operation might look like in our `LinkedList` class.
    It’s called `delete`， and we pass in the index we’re going to delete:'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 下面是我们 `LinkedList` 类中的删除操作可能的样子。它被称为 `delete`，我们传入要删除的索引：
- en: '| ​  | ​`delete`(index) { |'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`delete`(index) { |'
- en: '| ​  | ​`if` (index === 0) { |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`if` (index === 0) { |'
- en: '| ​  | ​`this`.firstNode = `this`.firstNode.nextNode; |'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`this`.firstNode = `this`.firstNode.nextNode; |'
- en: '| ​  | `return`; |'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return`; |'
- en: '| ​  | } |'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `let` currentNode = `this`.firstNode; |'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` currentNode = `this`.firstNode; |'
- en: '| ​  | `let` currentIndex = 0; |'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` currentIndex = 0; |'
- en: '| ​  |  |'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `while` (currentIndex < (index - 1)) { |'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while` (currentIndex < (index - 1)) { |'
- en: '| ​  | currentNode = currentNode.nextNode; |'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | currentNode = currentNode.nextNode; |'
- en: '| ​  | currentIndex += 1; |'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | currentIndex += 1; |'
- en: '| ​  | } |'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `const` nodeAfterDeletedNode = currentNode.nextNode.nextNode; |'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` nodeAfterDeletedNode = currentNode.nextNode.nextNode; |'
- en: '| ​  | currentNode.nextNode = nodeAfterDeletedNode; |'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | currentNode.nextNode = nodeAfterDeletedNode; |'
- en: '| ​  | } |'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 这个方法与我们之前看到的插入方法非常相似。让我们突出一些新颖之处。
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这个方法与我们之前看到的插入方法非常相似。让我们突出一些新颖之处。
- en: 该方法首先处理一个索引为0的情况，意味着我们打算删除列表的第一个节点。对此的代码简单得离谱：
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 该方法首先处理一个索引为0的情况，意味着我们打算删除列表的第一个节点。对此的代码简单得离谱：
- en: '| ​  | `if` (index === 0) { |'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (index === 0) { |'
- en: '| ​  | `this`.firstNode = `this`.firstNode.nextNode; |'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `this`.firstNode = `this`.firstNode.nextNode; |'
- en: '| ​  | `return`; |'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return`; |'
- en: '| ​  | } |'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 我们所做的就是将列表的`firstNode`指向当前的第二个节点，然后完成！
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们所做的就是将列表的`firstNode`指向当前的第二个节点，然后完成！
- en: 剩下的方法处理从列表中其他位置的删除。为此，我们使用一个`while`循环来访问我们想要删除的节点之前的节点。这成为我们的`currentNode`。
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 剩下的方法处理从列表中其他位置的删除。为此，我们使用一个`while`循环来访问我们想要删除的节点之前的节点。这成为我们的`currentNode`。
- en: 我们然后获取紧跟在我们要删除的节点之后的节点，并将其存储在名为`nodeAfterDeletedNode`的变量中：
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们然后获取紧跟在我们要删除的节点之后的节点，并将其存储在名为`nodeAfterDeletedNode`的变量中：
- en: '| ​  | `const` nodeAfterDeletedNode = currentNode.nextNode.nextNode; |'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` nodeAfterDeletedNode = currentNode.nextNode.nextNode; |'
- en: 请注意我们访问那个节点的小技巧。它只是紧跟在`currentNode`之后的两个节点！
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 请注意我们访问那个节点的小技巧。它只是紧跟在`currentNode`之后的两个节点！
- en: 然后我们修改`currentNode`的链接，使其指向`nodeAfterDeletedNode`：
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然后我们修改`currentNode`的链接，使其指向`nodeAfterDeletedNode`：
- en: '| ​  | currentNode.nextNode = nodeAfterDeletedNode; |'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | currentNode.nextNode = nodeAfterDeletedNode; |'
