- en: 第 10 章
  id: totrans-0
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Dealing with Form Data`'
  id: totrans-1
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: '`IN THIS CHAPTER`'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) `Coding text boxes`'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) `Programming checkboxes, radio buttons, and selection
    lists`'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) `Monitoring and triggering form events`'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) `Dealing with the form data`'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '在本章中，您将学习如何通过将 HTML 表单连接到一些 JavaScript 代码来“接线”。您将探索各种与表单相关的对象，然后开始编码文本字段、复选框、单选按钮和选择列表。您还将深入了解表单事件的有用世界，甚至学习如何使用键盘快捷键增强您的表单控件。最后，您将疯狂学习如何使用
    Web 存储 API 存储表单数据。  ## `Coding Text Fields`'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 基于文本的字段是最常用的表单元素，大多数使用`<input>`标签。`input`元素有很多属性，但从编码的角度来看，您通常只对四个属性感兴趣：
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<input id="textId" type="textType" name="textName" value="textValue">`'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 下面是各部分的说明：
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`textId`: 文本字段的唯一标识符'
  id: totrans-11
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`textType`: 您想在表单中使用的文本字段类型'
  id: totrans-12
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`textName`: 您分配给字段的名称'
  id: totrans-13
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`textValue`: 字段的初始值（如果有）'
  id: totrans-14
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '### 按字段类型引用'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 一种常见的表单脚本技术是在每个相同类型的字段上运行操作。例如，您可能想要对所有 URL 字段应用样式。下面是用于选择给定类型的所有`input`元素的
    JavaScript 选择器：
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`document.querySelectorAll(''input[type=url]'')`'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '**注意：**`fieldType`是您想要选择的`type`属性值，例如`text`或`url`。'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这里是一个示例，其中 JavaScript 返回所有使用类型`url`的`input`元素的集合：
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'HTML:'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<label for="url1"> Site 1: </label> <input id="url1" type="url" name="url1"
    value="https://"> <label for="url2"> Site 2: </label> <input id="url2" type="url"
    name="url2" value="https://"> <label for="url3"> Site 3: </label> <input id="url3"
    type="url" name="url3" value="https://">`'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'JavaScript:'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`const urlFields = document.querySelectorAll(''input[type=url]''); console.log(urlFields);`  ###
    获取文本字段值'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 您的脚本可以通过使用字段对象的值相关属性之一来获取任何文本字段的当前值：
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`field.value field.valueAsDate field.valueAsNumber`'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 下面是一个示例：
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'HTML:'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<label for="search-field"> Search the site: </label> <input id="search-field"
    name="q" type="search">`'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'JavaScript:'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`const searchString = document.getElementById(''search-field'').value; console.log(searchString);`  ###
    设置文本字段值'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 要更改文本字段值，请将新字符串分配给字段对象的`value`属性：
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`field.value = value`'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 下面是各部分的说明：
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`field`: 您想要操作的表单字段对象的引用'
  id: totrans-34
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`value`：你想要分配给文本字段的字符串'
  id: totrans-35
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 这是一个示例：
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'HTML:'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<label for="homepage-field"> Type your homepage address: </label> <input id="homepage-field"
    name="homepage" type="url" value="HTTPS://PAULMCFEDRIES.COM/"">`'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'JavaScript:'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`const homepageField = document.getElementById(''homepage-field''); const homepageURL
    = homepageField.value; homepageField.value = homepageURL.toLowerCase();`'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: HTML定义了一个类型为`url`的`input`元素，其中默认值为全大写字母。JavaScript代码获取一个URL，将其转换为全小写字母，然后返回到同一`url`字段。如[图10-1](#c10-fig-0001)所示，文本框现在显示全小写字母。
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![CaptionThe script converts the input element’s default text to all-lowercase
    letters. The fields below reads, type your homepage address.](images/9781394263219-fg1001.png)'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '[FIGURE 10-1:](#rc10-fig-0001) 该脚本将`input`元素的默认文本转换为全小写字母。 ## 编程复选框'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 你在网页表单中使用复选框来切换设置的开启（即复选框被选中）和关闭（复选框未被选中）。你可以通过在表单中包含以下版本的`<input>`标签来创建复选框：
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<input id="*checkId*" type="checkbox" name="*checkName*" value="*checkValue*"
    [checked]>`'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这是各个部分的说明：
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`checkId`：复选框的唯一标识符。'
  id: totrans-47
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`checkName`：你想要分配给复选框的名称。'
  id: totrans-48
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`checkValue`：你想要分配给复选框的值。请注意，这是一个隐藏值，脚本可以在表单提交时访问；用户不会遇到它。'
  id: totrans-49
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`checked`：当这个可选属性存在时，复选框最初被选中。'
  id: totrans-50
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '### 引用复选框'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 如果你的代码需要引用页面中的所有复选框，请使用以下选择器：
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`document.querySelectorAll(''input[type=checkbox]'')`'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 如果你只想要某个特定表单中的复选框，请在表单的`id`值上使用后代或子选择器：
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`document.querySelectorAll(''#*formid* input[type=checkbox]'')`'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 或者：
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`document.querySelectorAll(''#*formid* > input[type=checkbox]'')`  ### 获取复选框状态'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 你的代码需要知道复选框是被选中还是未选中。这称为复选框`state`。在这种情况下，你需要检查复选框对象的`checked`属性：
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`*checkbox*.checked`'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`checked`属性返回`true`如果复选框被选中，或者`false`如果复选框未被选中。'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这是一个示例：
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'HTML:'
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<label> <input id="autosave" type="checkbox" name="autosave"> Autosave this
    project </label>`'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'JavaScript:'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``const autoSaveCheckBox = document.querySelector(''#autosave''); if (autoSaveCheckBox.checked)
    { console.log(`${autoSaveCheckBox.name} is checked`); } else { console.log(`${autoSaveCheckBox.name}
    is unchecked`); }``'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The JavaScript code stores a reference to the checkbox object in the `autoSaveCheckBox`
    variable. Then an `if` statement examines the object’s `checked` property and
    displays a different message in the console, depending on whether `checked` returns
    `true` or `false`.  ### Setting the checkbox state'
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'To set a checkbox field to either the selected or deselected state, assign
    a Boolean expression to the `checked` property:'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``*checkbox*.checked = true|false``'
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'For example, suppose you have a form with a large number of checkboxes and
    you want to set up that form so that the user can select at most three checkboxes.
    Here’s some code that does the job:'
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``document.querySelector(''form'').addEventListener(''click'', event => {  //
    Make sure a checkbox was clicked if (event.target.type === ''checkbox'') {  //
    Get the total number of selected checkboxes const totalSelected = document.querySelectorAll(''input[type=checkbox]:checked'').length;  //
    Are there more than three selected checkboxes? if (totalSelected > 3) {  // If
    so, deselect the checkbox that was just clicked event.target.checked = false;
    } } });``'
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'This event handler runs when anything inside the `form` element is clicked,
    and it passes a reference to the click event as the parameter `event`. Then the
    code uses the `:checked` selector to return the set of all `checkbox` elements
    that have the `checked` attribute, and the `length` property tells you how many
    are in the set. An `if` test checks whether more than three are now selected.
    If that’s true, the code deselects the checkbox that was just clicked.  ## Coding
    Radio Buttons'
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'You create a radio button using the following variation of the `<input>` tag:'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``<input id="*radioId*" type="radio" name="*radioGroup*" value="*radioValue*"
    [checked]>``'
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s what the various parts are:'
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``*radioId*``: A unique identifier for the radio button.'
  id: totrans-75
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '``*radioGroup*``: The name you want to assign to the group of radio buttons.
    All the radio buttons that use the same `name` value belong to that group.'
  id: totrans-76
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '``*radioValue*``: The value you want to assign to the radio button. If this
    radio button is selected when the form is submitted, this is the value that’s
    included in the submission.'
  id: totrans-77
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '``checked``: When this optional attribute is present, the radio button is initially
    selected.'
  id: totrans-78
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '### Referencing radio buttons'
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'If your code needs to work with all the radio buttons in a page, use this JavaScript
    selector:'
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``document.querySelectorAll(''input[type=radio]'')``'
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'If you want the radio buttons from a particular form, use a descendent or child
    selector on the form’s `id` value:'
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``document.querySelectorAll(''#*formid* input[type=radio]'')``'
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Or:'
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``document.querySelectorAll(''#*formid* > input[type=radio]'')``'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'If you require just the radio buttons from a particular group, use the following
    JavaScript selector, where ``*radioGroup*`` is the common name of the group:'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``document.querySelectorAll(''input[name=*radioGroup*]'')``  ### Getting a
    radio button state'
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: If your code needs to know whether a particular radio button is selected or
    deselected, you need to determine the radio button `state`。你可以通过检查单选按钮的 `checked`
    属性来实现，如下所示：
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`radio.checked`'
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The `checked` attribute returns `true` if the radio button is selected, or `false`
    if the button is deselected.
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'For example, consider the following HTML:'
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<form> <fieldset> <legend> Select a delivery method </legend> <label> <input
    type="radio" id="carrier-pigeon" name="delivery" value="pigeon" checked>Carrier
    pigeon </label> <label> <input type="radio" id="pony-express" name="delivery"
    value="pony">Pony express </label> <label> <input type="radio" id="snail-mail"
    name="delivery" value="postal">Snail mail </label> <label> <input type="radio"
    id="some-punk" name="delivery" value="bikecourier">Some punk on a bike </label>
    </fieldset> </form>`'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'If your code needs to know which radio button in a group is selected, you can
    do that by applying the `:checked` selector to the group and then getting the
    `value` property of the returned object:'
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`const deliveryMethod = document.querySelector(''input[name=delivery]:checked'').value;`
    ### Setting the radio button state'
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'To set a radio button field to either the selected or deselected state, assign
    a Boolean expression to the `checked` attribute:'
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`radio.checked = true|false`'
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'For example, in the HTML code from the previous section, the initial state
    of the form group had the first radio button selected. You can reset the group
    by selecting that button. You could get a reference to the `id` of the first radio
    button, but what if later you change (or someone else changes) the order of the
    radio buttons? A safer way is to get a reference to the first radio button in
    the group, whatever it may be, and then select that element. Here’s some code
    that does this:'
  id: totrans-97
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`const firstRadioButton = document.querySelectorAll(''input[name=delivery]'')[0];
    firstRadioButton.checked = true;`'
  id: totrans-98
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'This code uses `querySelectorAll()` to return a `NodeList` collection of all
    the radio buttons in the `delivery` group; then it uses `[0]` to reference just
    the first element in the collection. Then that element’s `checked` property is
    set to `true`.  ## Programming Selection Lists'
  id: totrans-99
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Selection lists are common sights in HTML forms because they enable the web
    developer to display a relatively large number of choices in a compact control
    that most users know how to operate.
  id: totrans-100
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'To create the list container, you use the `<select>` tag:'
  id: totrans-101
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<select id="selectId" name="selectName" size="selectSize" [multiple]>`'
  id: totrans-102
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s what the various parts are:'
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`selectId`: A unique identifier for the selection list.'
  id: totrans-104
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`selectName`: The name you want to assign to the selection list.'
  id: totrans-105
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`selectSize`: The optional number of rows in the selection list box that are
    visible. If you omit this value, the browser displays the list as a drop-down
    box.'
  id: totrans-106
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '``multiple``: 当此可选属性存在时，用户可以在列表中选择多个选项。'
  id: totrans-107
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 对于列表中的每个项目，您在``<select>``和``</select>``标签之间添加一个``<option>``标签：
  id: totrans-108
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``<option value=`optionValue` [selected]>``'
  id: totrans-109
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这里是各个部分的说明：
  id: totrans-110
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '*``optionValue``*: 您想要分配给列表选项的值。'
  id: totrans-111
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '``selected``: 当此可选属性存在时，列表选项最初被选中。'
  id: totrans-112
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '### 引用选择列表选项'
  id: totrans-113
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 如果您的代码需要处理选择列表中的所有选项，请使用选择列表对象的``options``属性：
  id: totrans-114
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``document.querySelector(`list`).options``'
  id: totrans-115
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 要处理列表中的特定选项，请使用 JavaScript 的方括号运算符（``[]``）来指定选项在列表中的索引位置：
  id: totrans-116
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``document.querySelector(`list`).options[`n`]``'
  id: totrans-117
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这里是各个部分的说明：
  id: totrans-118
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '*``list``*: 指定您要处理的``select``元素的选择器'
  id: totrans-119
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '*``n``*: 返回的``NodeList``集合中选项的索引（``0``是第一个选项，``1``是第二个选项，以此类推）'
  id: totrans-120
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 要获取选项的文本（即在列表中显示的文本），请使用选项对象的``text``属性：
  id: totrans-121
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``document.querySelector(`list`).options[2].text``  ### 获取选中的列表选项'
  id: totrans-122
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 如果您的代码需要知道选择列表中某个特定选项是选中还是未选中，请检查该选项的``selected``属性，如下所示：
  id: totrans-123
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``option.selected``'
  id: totrans-124
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``selected``属性返回``true``如果选项被选中，或``false``如果选项未被选中。'
  id: totrans-125
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 例如，考虑以下选择列表：
  id: totrans-126
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``<select id="hair-color" name="hair-color"> <option value="black">Black</option>
    <option value="blonde">Blonde</option> <option value="brunette" selected>Brunette</option>
    <option value="red">Red</option> <option value="neon">Something neon</option>
    <option value="none">None</option> </select>``'
  id: totrans-127
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 您的代码可能想要知道选择列表中哪个选项被选中。您可以通过列表的``selectedOptions``属性来实现：
  id: totrans-128
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``const hairColor = document.querySelector(''#hair-color'').selectedOptions[0];``'
  id: totrans-129
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这不是一个多选列表，因此指定``selectedOptions[0]``返回选中的``option``元素。在这个例子中，您的代码可以使用``hairColor.text``来获取所选选项的文本。
  id: totrans-130
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 如果列表包括``multiple``属性，``selectedOptions``属性可能会返回一个``HTMLCollection``对象，包含多个元素。您的代码需要考虑这种可能性，例如，通过循环遍历集合：
  id: totrans-131
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: HTML：
  id: totrans-132
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``<select id="hair-products" name="hair-products" size="5" multiple> <option
    value="gel" selected>Gel</option> <option value="grecian-formula" selected>Grecian
    Formula</option> <option value="mousse">Mousse</option> <option value="peroxide">Peroxide</option>
    <option value="shoe-black">Shoe black</option> </select>``'
  id: totrans-133
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'JavaScript:'
  id: totrans-134
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`const selectedHairProducts = document.querySelector(''#hair-products'').selectedOptions;
    for (const hairProduct of selectedHairProducts) { console.log(hairProduct.text);
    }` ### Changing the selected option'
  id: totrans-135
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'To set a selection list option to either the selected or deselected state,
    assign a Boolean expression to the option object’s `selected` property:'
  id: totrans-136
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`option.selected = Boolean`'
  id: totrans-137
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s what the various parts are:'
  id: totrans-138
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`option`: A reference to the `option` element you want to modify.'
  id: totrans-139
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`Boolean`: The Boolean value or expression you want to assign to the option.
    Use `true` to select the option; use `false` to deselect the option.'
  id: totrans-140
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 'Using the HTML code from the previous section, the following statement selects
    the third option in the list:'
  id: totrans-141
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`document.querySelector(''#hair-products'').options[2].selected = true;`'
  id: totrans-142
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'You can reset the list by deselecting all the options. You do that by setting
    the selection list object’s `selectedIndex` property to `-1`:'
  id: totrans-143
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`document.querySelector(''#hair-products'').selectedIndex = -1` ## Working
    with Form Events'
  id: totrans-144
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: With all the clicking, typing, tabbing, and dragging that goes on, web forms
    are veritable event factories. Fortunately, you can let most of these events pass
    you by, but a few do come in handy, both in running code when the event occurs
    and in triggering the events yourself.
  id: totrans-145
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Most form events are clicks, so you can handle them by setting `click` event
    handlers using JavaScript’s `addEventListener()` method (which I cover in [Chapter
    6](c06.xhtml)). Here’s an example:'
  id: totrans-146
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'HTML:'
  id: totrans-147
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<form> <label for="user">Username:</label> <input id="user" type="text" name="username">
    <label for="pwd">Password:</label> <input id="pwd" type="password" name="password">
    </form>`'
  id: totrans-148
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'JavaScript:'
  id: totrans-149
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`document.querySelector(''form'').addEventListener(''click'', () => { console.log(''Thanks
    for clicking the form!''); });`'
  id: totrans-150
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: This example listens for clicks on the entire `form` element, but you can also
    create `click` event handlers for buttons, `input` elements, checkboxes, radio
    buttons, and more.
  id: totrans-151
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '### Setting the focus'
  id: totrans-152
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: One simple feature that can improve the user experience on your form pages is
    to set the focus on the first form field when your page loads. Setting the focus
    saves the user from having to make that annoying click inside the first field.
  id: totrans-153
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'To get this done, run JavaScript’s `focus()` method on the element you want
    to have the focus at startup:'
  id: totrans-154
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`field.focus()`'
  id: totrans-155
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s an example that sets the focus on the text field with `id` equal to
    `user` at startup:'
  id: totrans-156
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'HTML:'
  id: totrans-157
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<form> <label for="user">Username:</label> <input id="user" type="text" name="username">
    <label for="pwd">Password:</label> <input id="pwd" type="password" name="password">
    </form>`'
  id: totrans-158
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'JavaScript:'
  id: totrans-159
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`document.querySelector(''#user'').focus();` ### Monitoring the focus event'
  id: totrans-160
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Rather than set the focus, you may want to monitor when a particular field
    gets the focus (for example, by the user clicking or tabbing into the field).
    You can monitor that by setting up a `focus` event handler on the field:'
  id: totrans-161
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`*field*.addEventListener(''focus'', () => { *Focus code goes here* });`'
  id: totrans-162
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这里有一个例子：
  id: totrans-163
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`document.querySelector(''#user'').addEventListener(''focus'', () => { console.log(''The
    username field has the focus!''); });` ### 监控失去焦点事件'
  id: totrans-164
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 将焦点设置到元素的反面是*失去焦点*，这会移除元素的焦点。你可以通过在元素上运行`blur()`方法来失去元素的焦点：
  id: totrans-165
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`*field*.blur()`'
  id: totrans-166
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 然而，与其让一个元素失去焦点，你更可能想在特定元素失去焦点时运行一些代码（例如，用户点击或切换出该字段时）。你可以通过设置`blur()`事件处理程序来监控特定的失去焦点元素：
  id: totrans-167
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`*field*.addEventListener(''blur'', () => { *Blur code goes here* });`'
  id: totrans-168
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这里有一个例子：
  id: totrans-169
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`document.querySelector(''#user'').addEventListener(''blur'', () => { console.log(''The
    username field no longer has the focus!''); });` ### 监听元素变化'
  id: totrans-170
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 最有用的表单事件之一是`change`事件，当字段的值或状态以某种方式被修改时，该事件会触发。此事件何时触发取决于元素类型：
  id: totrans-171
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 对于`textarea`元素和各种文本相关的`input`元素，当元素失去焦点时，`change`事件会触发。
  id: totrans-172
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 对于复选框、单选按钮、选择列表和选择器，当用户点击要修改选择或值的元素时，`change`事件会立即触发。
  id: totrans-173
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 你通过设置`change()`事件处理程序来监听字段的`change`事件：
  id: totrans-174
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`*field*.addEventListener(''change'', () => { *Change code goes here* });`'
  id: totrans-175
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这里有一个例子：
  id: totrans-176
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'HTML:'
  id: totrans-177
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<label for="bgcolor">Select a background color</label> <input id="bgcolor"
    type="color" name="bg-color" value="#ffffff">`'
  id: totrans-178
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'JavaScript:'
  id: totrans-179
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`document.querySelector(''#bgcolor'').addEventListener(''change'', (event)
    => { const backgroundColor = event.target.value; document.body.bgColor = backgroundColor;
    });`'
  id: totrans-180
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'HTML代码设置了一个颜色选择器。JavaScript代码将`change`事件处理程序应用于颜色选择器。当颜色选择器上的`change`事件触发时，代码通过引用`event.target.value`将新颜色值存储在`backgroundColor`变量中，其中`event.target`指的是绑定事件监听器的元素（在这种情况下是颜色选择器）。然后代码将该颜色应用于`body`元素的`bgColor`属性。
    ## 处理表单数据'
  id: totrans-181
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 有一个表单事件我之前没有提到，那就是一个重要的事件：`submit`事件，它在表单数据要发送到服务器时触发。
  id: totrans-182
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 然而，如果你的脚本仅在本地处理表单数据——也就是说，你从不将数据发送到服务器——那么你就不需要烦恼提交表单。相反，更简单的方法是给表单添加一个按钮，然后使用该按钮的`click`事件处理程序以所需的方式处理表单数据。
  id: totrans-183
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这里有一个例子：
  id: totrans-184
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'HTML:'
  id: totrans-185
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<form> <fieldset> <legend> Settings </legend> <label for="background-color">Select
    a background color</label> <input id="background-color" type="color" name="bg-color"
    value="#ffffff"> <label for="text-color">Select a text color</label> <input id="text-color"
    type="color" name="text-color" value="#000000"> <label for="font-stack">Select
    a typeface:</label> <select id="font-stack" name="font-stack"> <option value="Georgia,
    ''Times New Roman'', serif" selected>Serif</option> <option value="Verdana, Tahoma,
    sans-serif">Sans-serif</option> <option value="''Bradley Hand'', Brush Script
    MT, cursive">Cursive</option> <option value="Luminari">Fantasy</option> <option
    value="Monaco, Courier, monospace">Monospace</option> </select> <button> Save
    Your Settings </button> </fieldset> </form>`'
  id: totrans-186
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`JavaScript:`'
  id: totrans-187
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`// Listen for changes on the #background-color color picker document.querySelector(''#background-color'').addEventListener(''change'',
    function() { const backgroundColor = this.value; document.body.style.backgroundColor
    = backgroundColor; }); // Listen for changes on the #text-color color picker document.querySelector(''#text-color'').addEventListener(''change'',
    function() { const textColor = this.value; document.body.style.color = textColor;
    }); // Listen for changes on the #font-stack selection list document.querySelector(''#font-stack'').addEventListener(''change'',
    function() { const fontStack = this.selectedOptions[0].value; document.body.style.fontFamily
    = fontStack; }); // Listen for the button being clicked document.querySelector(''button'').addEventListener(''click'',
    () => { // Store the form data in a JavaScript object const userSettings = { backgroundColor:
    document.querySelector(''#background-color'').value, textColor: document.querySelector(''#text-color'').value,
    fontStack: document.querySelector(''#font-stack'').selectedOptions[0].value }
    // Save the settings in local storage localStorage.setItem(''user-settings'',
    JSON.stringify(userSettings)); });`'
  id: totrans-188
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`The HTML sets up a form (check out [Figure 10-2](#c10-fig-0002)) to gather
    some user settings — background color, text color, and typeface style — as well
    as a button. The JavaScript sets up change event handlers for the two color pickers
    and the selection list. Finally, the code listens for click events on the button,
    and the handler stores the form data in a JavaScript object and then saves the
    data to local storage.`'
  id: totrans-189
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![A snapshot of a form used to gather user settings for the page. The setting
    fields include, select a background color, select a text color, and select a typeface.](images/9781394263219-fg1002.png)'
  id: totrans-190
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '[FIGURE 10-2:](#rc10-fig-0002) A form used to gather user settings for the
    page.'
  id: totrans-191
  prefs: []
  stylish: true
  type: TYPE_NORMAL
