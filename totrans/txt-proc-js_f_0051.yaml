- en: '| Recipe 40 | Generating Indices for Matches with the d Flag |'
  prefs: []
  type: TYPE_TB
- en: Task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Suppose you’re building a tool that helps detect errors and potential problems
    in JavaScript code. You need your tool to be able to detect the use of reserved
    words in variables and functions and warn the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ideally, you want to program your tool to pinpoint the exact part of the code
    where the reserved word is misused rather than outputting just a line number.
    So, if the code has a variable assignment with a reserved word like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **let** **default** = 7; |'
  prefs: []
  type: TYPE_TB
- en: 'You want to indicate the error like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **let** **default** = 7; |'
  prefs: []
  type: TYPE_TB
- en: '|   | **↑**------ Invalid variable name |'
  prefs: []
  type: TYPE_TB
- en: To achieve this task, you need a regex that provides the start and end indices
    of the match.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Send the supplied code one line at a time to a function that looks for an invalid
    variable/function name. Use the d flag to obtain the start and end indices of
    the name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/flag_indices/indices_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/flag_indices/indices_ex1.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | *// The js code you want to check.* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// In production, you''ll likely use the FileReader API* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// or a textarea to grab the code.* |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** code = *`* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *let a = 123;* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *let b = 456;* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *let default = 7;* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *`*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// A short list of js reserved words.* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// A full list is available here:* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// https://mzl.la/3XG92DO* |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** reserved = [*"class"*, *"default"*, *"this"*, *"case"*, *"if"*];
    |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// Build a regex pattern with the reserved words* |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** re = **new** RegExp(*`(?:var&#124;let&#124;const&#124;function)\\s+(*${reserved.join(*"&#124;"*)}*)`*,
    |'
  prefs: []
  type: TYPE_TB
- en: '|   | *"d"*); |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// Find and display the location of the reserved word* |'
  prefs: []
  type: TYPE_TB
- en: '|   | **function** locateReservedWord(line) { |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** match = line.match(re); |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// If no match is found, return* |'
  prefs: []
  type: TYPE_TB
- en: '|   | **if** (match === **null**) {**return**;} |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// Assign the start and end indices using the destructuring assignment.*
    |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// indices[0] holds the indices of the matched string.* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// indices[1] holds the indices of the first capturing group.* |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** [start, end] = match.indices[1]; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// Build the error message* |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** error = |'
  prefs: []
  type: TYPE_TB
- en: '|   | *" "*.repeat(start) + *// Add spaces before the arrow* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *"↑"* + |'
  prefs: []
  type: TYPE_TB
- en: '|   | *"-"*.repeat(end - start - 1) + |'
  prefs: []
  type: TYPE_TB
- en: '|   | *" Invalid name (reserved word)"*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | console.log(line); |'
  prefs: []
  type: TYPE_TB
- en: '|   | console.log(error); |'
  prefs: []
  type: TYPE_TB
- en: '|   | } |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// Split the code into separate lines,* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// then send each line to locateReservedWord()* |'
  prefs: []
  type: TYPE_TB
- en: '|   | code.split(*/**\n**&#124;**\r**&#124;**\r\n**/*).forEach(line => { |'
  prefs: []
  type: TYPE_TB
- en: '|   | locateReservedWord(line); |'
  prefs: []
  type: TYPE_TB
- en: '|   | }); |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// Logs:* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// → let default = 7;* |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// → ↑------ Invalid name (reserved word)* |'
  prefs: []
  type: TYPE_TB
- en: Your code can now indicate the exact position of a reserved word in a variable
    or function name.
  prefs: []
  type: TYPE_NORMAL
- en: '| Browser Compatibility |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| ![images/aside-icons/info.png](images/aside-icons/info.png) | Despite being
    a newcomer to the regex family, the d Flag is supported by all modern browsers.^([[23]](f_0064.xhtml#FOOTNOTE-23))
    In the Node environment, you’ll need a minimum version of 16.0.0 (Released 2021-04-20).
    To support older browsers, you can use a polyfill available in the regexp-match-indices
    package on NPM.^([[24]](f_0064.xhtml#FOOTNOTE-24)) |'
  prefs: []
  type: TYPE_TB
- en: Discussion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The hasIndices flag (d) indicates that the matching result should provide additional
    information about the start and end positions of each matched substring. The information
    will be stored in a property named indices. Consider this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/flag_indices/indices_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/flag_indices/indices_ex2.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** str = *"word1 word2"*; |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** re = */word/*dg; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | console.log(re.exec(str).indices[0]); *// → [ 0, 4 ]* |'
  prefs: []
  type: TYPE_TB
- en: '|   | console.log(re.exec(str).indices[0]); *// → [ 6, 10 ]* |'
  prefs: []
  type: TYPE_TB
- en: When we set the d flag in a regex, an indices property will be available in
    the result of exec(), match(), and matchAll(). Here, we’re using the exec() method,
    which is similar to match() except that it provides indices in the global mode
    too (see Appendix 2, [*Implementing Regex in JavaScript*](f_0089.xhtml#apx2)).
  prefs: []
  type: TYPE_NORMAL
- en: The regex in this recipe requires using the RegExp() constructor because we’re
    constructing the pattern dynamically with an array of reserved words. Any backslash
    in RegExp() must be escaped with another backslash. So, we write the shorthand
    character class to match whitespaces in the form of \\s rather than \s. Remember,
    if your dynamically created list contains a backslash, you must escape it too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, pay attention to the second parameter of RegExp(). The RegExp() constructor
    uses a different approach to set the flags: it takes an optional second parameter
    containing the letters of the flags to set. Here, we want to set the hasIndices
    flag, so we pass d. As with the first argument, the second argument must be a
    string. Do not wrap it in slashes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s analyze the regex in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | (?:var&#124;let&#124;const&#124;function)\\s+(${reserved.join("&#124;")})
    |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | ● (?:var&#124;let&#124;const&#124;function) non-capturing group |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ 1st alternative: matches the characters "var" literally |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ 2nd alternative: matches the characters "let" literally |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ 3rd alternative: matches the characters "const" literally |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ 4th alternative: matches the characters "function" literally |'
  prefs: []
  type: TYPE_TB
- en: '|   | ● \\s matches any whitespace character |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ + matches the previous token between one and unlimited times |'
  prefs: []
  type: TYPE_TB
- en: '|   | ● (${reserved.join("&#124;")}) 1st Capturing Group |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ ${reserved.join("&#124;")} retrieves the array of reserved words and
    joins its |'
  prefs: []
  type: TYPE_TB
- en: '|   | items with a vertical bar, resulting in class&#124;default&#124;this&#124;case&#124;if
    |'
  prefs: []
  type: TYPE_TB
- en: '|   | ● Flags |'
  prefs: []
  type: TYPE_TB
- en: '|   | ○ d provides information about the start and end indices |'
  prefs: []
  type: TYPE_TB
- en: Take advantage of the hasIndices flag to obtain information about the start
    and end positions of matches. Remember, when using the RegExp() constructor, you
    can’t append flags to the regex pattern the way you typically do with regex literals.
    Instead, you should pass a string containing the flags as the second argument
    of the constructor.
  prefs: []
  type: TYPE_NORMAL
