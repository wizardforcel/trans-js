- en: 递归类别：计算
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 递归类别：计算
- en: 在前面的部分，我们讨论了第一类递归函数——那些反复执行任务的函数。在本章的其余部分，我将详细阐述第二类一般类别：基于子问题执行计算。
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在前面的部分，我们讨论了第一类递归函数——那些反复执行任务的函数。在本章的其余部分，我将详细阐述第二类一般类别：基于子问题执行计算。
- en: 许多函数的目标是执行计算。返回两个数字之和的函数，或在数组中找到最大值的函数，都是例子。这些函数接收某种输入并返回涉及该输入的计算结果。
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 许多函数的目标是执行计算。返回两个数字之和的函数，或在数组中找到最大值的函数，都是例子。这些函数接收某种输入并返回涉及该输入的计算结果。
- en: 在第10章，[`Recursively Recurse with Recursion`](f_0096.xhtml#chp.recursion)，我们发现递归特别擅长处理具有任意深度层级的问题。递归的第二个优势是能够基于手头问题的子问题进行计算。
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在第10章，[`Recursively Recurse with Recursion`](f_0096.xhtml#chp.recursion)，我们发现递归特别擅长处理具有任意深度层级的问题。递归的第二个优势是能够基于手头问题的子问题进行计算。
- en: 在我定义什么是子问题之前，让我们回顾一下前一章的阶乘问题。如你所学到的，6的阶乘如下：
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在我定义什么是子问题之前，让我们回顾一下前一章的阶乘问题。如你所学到的，6的阶乘如下：
- en: '`6 * 5 * 4 * 3 * 2 * 1`'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`6 * 5 * 4 * 3 * 2 * 1`'
- en: 要编写一个计算数字阶乘的函数，我们可以使用一个经典的循环，从1开始并逐步构建。也就是说，我们将2乘以1，然后将3乘以结果，然后是4，依此类推，直到达到6。
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要编写一个计算数字阶乘的函数，我们可以使用一个经典的循环，从1开始并逐步构建。也就是说，我们将2乘以1，然后将3乘以结果，然后是4，依此类推，直到达到6。
- en: 这样的函数可能看起来像这样：
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这样的函数可能看起来像这样：
- en: '| ​  | `function` factorial(n) { |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` factorial(n) { |'
- en: '| ​  | `let` product = 1; |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` product = 1; |'
- en: '| ​  |  |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `for` (`let` num = 1; num <= n; num += 1) { |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`let` num = 1; num <= n; num += 1) { |'
- en: '| ​  | product *= num; |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | product *= num; |'
- en: '| ​  | } |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return` product; |'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` product; |'
- en: '| ​  | } |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 然而，我们可以以不同的方式处理这个问题：我们可以基于其子问题计算阶乘。
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，我们可以以不同的方式处理这个问题：我们可以基于其子问题计算阶乘。
- en: 子问题是应用于较小输入的同一问题的版本。让我们将此应用于我们的情况。
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 子问题是应用于较小输入的同一问题的版本。让我们将此应用于我们的情况。
- en: 如果你考虑一下，`factorial(6)`将是6乘以`factorial(5)`的结果。
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你考虑一下，`factorial(6)`将是6乘以`factorial(5)`的结果。
- en: 因为`factorial(6)`是：
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因为`factorial(6)`是：
- en: '`6 * 5 * 4 * 3 * 2 * 1`'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`6 * 5 * 4 * 3 * 2 * 1`'
- en: 而`factorial(5)`是：
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 而`factorial(5)`是：
- en: '`5 * 4 * 3 * 2 * 1`'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`5 * 4 * 3 * 2 * 1`'
- en: 我们可以得出`factorial(6)`等价于：
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们可以得出`factorial(6)`等价于：
- en: '`6 * factorial(5)`。'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`6 * factorial(5)`。'
- en: 也就是说，一旦我们得到了`factorial(5)`的结果，我们可以简单地将该结果乘以6来得到`factorial(6)`的答案。
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 也就是说，一旦我们得到了`factorial(5)`的结果，我们可以简单地将该结果乘以6来得到`factorial(6)`的答案。
- en: 由于`factorial(5)`是可以用来计算更大问题的较小问题，因此我们称`factorial(5)`为`factorial(6)`的子问题。
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 由于`factorial(5)`是可以用来计算更大问题的较小问题，因此我们称`factorial(5)`为`factorial(6)`的子问题。
- en: 这是上一章的实现：
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是上一章的实现：
- en: '| ​  | `function` factorial(number) { |'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` factorial(number) { |'
- en: '| ​  | `if` (number <= 1) { |'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (number <= 1) { |'
- en: '| ​  | `return` 1; |'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` 1; |'
- en: '| ​  | } `else` { |'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } `else` { |'
- en: '| ​  | `return` number * factorial(number - 1); |'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` number * factorial(number - 1); |'
- en: '| ​  | } |'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 这里的关键行是`return number * factorial(number - 1)`，其中我们将结果计算为`number`乘以我们的子问题，即`factorial(number
    - 1)`。
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里的关键行是`return number * factorial(number - 1)`，其中我们将结果计算为`number`乘以我们的子问题，即`factorial(number
    - 1)`。
- en: Two Approaches to Calculations
  id: totrans-37
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 计算的两种方法
- en: 'We’ve seen that when writing a function that makes a calculation, there are
    two potential approaches: we can try to build the solution from the “bottom-up,”
    or we can attack the problem going “top-down” by making the calculation based
    on the problem’s subproblem. Indeed, computer science literature refers to the
    terms bottom-up and top-down in regard to recursion strategies.'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们已经看到，在编写一个进行计算的函数时，有两种潜在的方法：我们可以尝试从“底向上”构建解决方案，或者我们可以通过基于问题的子问题进行计算，从“顶向下”攻击问题。实际上，计算机科学文献中将底向上和顶向下的术语用来描述递归策略。
- en: The truth is that both approaches can be achieved through recursion. We previously
    saw the bottom-up approach using a classic loop; we can also use recursion to
    implement the bottom-up strategy.
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 事实是，这两种方法都可以通过递归实现。我们之前看到的底向上方法使用了经典的循环；我们也可以使用递归来实现底向上策略。
- en: 'To do this, we need to use our trick of passing extra parameters, as follows:'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为此，我们需要利用传递额外参数的技巧，如下所示：
- en: '| ​  | `function` factorial(n, i=1, product=1) { |'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` factorial(n, i=1, product=1) { |'
- en: '| ​  | `if` (i > n) { `return` product; } |'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (i > n) { `return` product; } |'
- en: '| ​  |  |'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return` factorial(n, i + 1, product * i); |'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` factorial(n, i + 1, product * i); |'
- en: '| ​  | } |'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: In this implementation, we have three parameters. `n`, as before, is the number
    whose factorial we’re computing. `i` is a simple variable that starts at 1 and
    increments by one in each successive call until it reaches `n`. Finally, `product`
    is the variable in which we store the calculation as we keep multiplying each
    successive number. We keep passing the `product` to the successive call so we
    can keep track of it as we go.
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个实现中，我们有三个参数。`n`，如之前所述，是我们正在计算阶乘的数字。`i`是一个简单的变量，从1开始，在每次调用时增加1，直到达到`n`。最后，`product`是我们存储计算结果的变量，在此过程中不断乘以每一个后续数字。我们不断将`product`传递给后续的调用，以便在过程中跟踪它。
- en: While we can use recursion in this way to achieve the bottom-up approach, it’s
    not particularly elegant and doesn’t add much value over using a classic `loop`.
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 虽然我们可以使用递归以这种方式实现底向上方法，但这并不特别优雅，并且在使用经典的`loop`时并没有增加太多价值。
- en: When going bottom-up, we’re employing the same strategy for making the calculation
    whether we’re using a loop or recursion. The computational approach is the same.
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当我们从底向上进行计算时，我们无论是使用循环还是递归，所采用的策略是相同的。计算方法是一样的。
- en: But to go top-down, we need recursion. And because recursion is the only way
    to achieve a top-down strategy, it’s one of the key factors that makes recursion
    a powerful tool.
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 但是要采用自上而下的方法，我们需要递归。因为递归是实现自上而下策略的唯一方法，所以它是使递归成为强大工具的关键因素之一。
