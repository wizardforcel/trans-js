- en: 'Module 6:'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 模块 6：
- en: '|'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Form Handling in Vue.js
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 中的表单处理
- en: '|'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'In the world of web development, forms are the gateway for user interaction,
    making efficient form handling a crucial aspect of creating responsive and user-friendly
    applications. The module "Form Handling in Vue.js" takes center stage in the book
    "Vue.js Essentials: For Responsive Web Development," guiding readers through the
    intricacies of handling forms with Vue.js. Within these pages, developers will
    gain a comprehensive understanding of Vue.js'' capabilities in simplifying form-related
    tasks and enhancing the overall user experience.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '在 web 开发的世界里，表单是用户交互的入口，因此高效的表单处理是创建响应式且用户友好应用程序的关键。本模块《Vue.js 中的表单处理》在《Vue.js
    Essentials: For Responsive Web Development》一书中占据了核心地位，带领读者深入了解如何在 Vue.js 中处理表单。在这些页面中，开发者将全面了解
    Vue.js 在简化表单相关任务和提升用户体验方面的能力。'
- en: The Significance of Form Handling in Web Development
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 表单处理在 Web 开发中的重要性
- en: Before delving into the specifics of form handling in Vue.js, it is imperative
    to grasp the significance of this aspect in web development. This module initiates
    with an exploration of the challenges associated with traditional form handling
    and introduces Vue.js as a solution that brings simplicity and reactivity to the
    process. Understanding the pivotal role of form handling lays the groundwork for
    developers to streamline user interactions, validate inputs, and create dynamic
    and responsive interfaces.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨 Vue.js 中表单处理的具体内容之前，必须首先理解这一方面在 web 开发中的重要性。本模块首先探讨了传统表单处理所面临的挑战，并介绍了
    Vue.js 作为一个简化且具备响应性的解决方案。理解表单处理的核心作用为开发者提供了优化用户交互、验证输入以及创建动态和响应式界面的基础。
- en: 'Vue.js Form Basics: Two-Way Data Binding and v-model'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 表单基础：双向数据绑定与 v-model
- en: At the core of form handling in Vue.js lies the concept of two-way data binding,
    facilitated by the v-model directive. This segment of the module delves into the
    fundamentals of Vue.js form handling, explaining how v-model establishes a dynamic
    link between form inputs and underlying data. Readers will gain insights into
    binding form elements to data properties, enabling real-time updates and synchronization
    between the user interface and the application state.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 表单处理的核心概念是双向数据绑定，通过 v-model 指令实现。本模块的这一部分将深入讲解 Vue.js 表单处理的基本原理，解释 v-model
    如何在表单输入与底层数据之间建立动态链接。读者将了解如何将表单元素绑定到数据属性，实现用户界面与应用程序状态之间的实时更新与同步。
- en: Validation and Error Handling Strategies
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 验证与错误处理策略
- en: Ensuring data integrity and user input validity is paramount in form handling.
    The module explores Vue.js' robust validation and error handling strategies, demonstrating
    how developers can implement custom validation logic and utilize built-in features
    to enhance the user experience. From simple input validation to handling complex
    form scenarios, readers will acquire the skills needed to create forms that provide
    meaningful feedback and guide users through the input process effectively.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 确保数据完整性和用户输入有效性在表单处理过程中至关重要。本模块深入探讨了 Vue.js 强大的验证和错误处理策略，展示了开发者如何实现自定义验证逻辑，并利用内置功能来提升用户体验。从简单的输入验证到处理复杂的表单场景，读者将掌握创建提供有意义反馈并有效引导用户完成输入过程的表单所需的技能。
- en: Handling Form Submissions and Asynchronous Operations
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 处理表单提交和异步操作
- en: As web applications become more interactive, handling form submissions and asynchronous
    operations becomes a critical consideration. This segment guides readers through
    the process of handling form submissions in Vue.js, exploring methods to prevent
    default form behavior, validate inputs before submission, and manage asynchronous
    operations. Developers will gain practical insights into creating forms that seamlessly
    integrate with backend services, ensuring a smooth and responsive user experience.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 Web 应用变得更加互动，处理表单提交和异步操作成为一个关键考虑因素。本节引导读者学习如何在 Vue.js 中处理表单提交，探索防止表单默认行为、在提交前验证输入并管理异步操作的方法。开发者将获得如何创建与后端服务无缝集成、确保流畅且响应迅速的用户体验的实用见解。
- en: '"Form Handling in Vue.js" stands as a pivotal module within "Vue.js Essentials:
    For Responsive Web Development," equipping readers with the knowledge and skills
    necessary to master form-related tasks in Vue.js applications. By unraveling the
    intricacies of two-way data binding, validation strategies, error handling, and
    form submissions, developers will be well-prepared to create dynamic, user-friendly,
    and responsive interfaces that elevate the overall quality of their web applications.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '《Vue.js Essentials: For Responsive Web Development》中的“Vue.js中的表单处理”模块是一个重要的模块，帮助读者掌握在
    Vue.js 应用中处理表单相关任务所需的知识和技能。通过揭示双向数据绑定、验证策略、错误处理和表单提交的复杂性，开发者将做好充分准备，创建动态、用户友好且响应迅速的界面，提升其
    Web 应用的整体质量。'
- en: Basics of Form Handling
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表单处理基础
- en: 'The "Form Handling in Vue.js" module within the book "Vue.js Essentials: For
    Responsive Web Development" kicks off with a fundamental exploration in the section
    titled "Basics of Form Handling." This section guides developers through the foundational
    principles and techniques for efficiently managing forms in Vue.js applications,
    emphasizing user interaction and data synchronization.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '本书《Vue.js Essentials: For Responsive Web Development》中的“Vue.js中的表单处理”模块以名为“表单处理基础”的章节开始。本章节引导开发者学习在
    Vue.js 应用程序中高效管理表单的基本原则和技巧，强调用户交互和数据同步。'
- en: <!-- SimpleForm.vue -->
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- SimpleForm.vue -->
- en: <template>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <form @submit.prevent="submitForm">
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <form @submit.prevent="submitForm">
- en: <label for="username">Username:</label>
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: <label for="username">用户名：</label>
- en: <input type="text" id="username" v-model="username" />
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <input type="text" id="username" v-model="username" />
- en: <label for="password">Password:</label>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <label for="password">密码：</label>
- en: <input type="password" id="password" v-model="password" />
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <input type="password" id="password" v-model="password" />
- en: <button type="submit">Submit</button>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: <button type="submit">提交</button>
- en: </form>
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: </form>
- en: </template>
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'username: '''','
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 'username: '''','
- en: 'password: '''''
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 'password: '''''
- en: '};'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: submitForm() {
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: submitForm() {
- en: // Logic for handling form submission
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: // 处理表单提交的逻辑
- en: console.log('Form submitted:', this.username, this.password);
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('表单已提交:', this.username, this.password);
- en: '}'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In this basic form handling example, a Vue.js component named SimpleForm is
    created. The template includes input fields for a username and password, and the
    v-model directive establishes a two-way binding between the input fields and the
    component's data properties username and password. The @submit.prevent directive
    prevents the default form submission behavior, and the submitForm method logs
    the entered username and password to the console.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个基本的表单处理示例中，创建了一个名为SimpleForm的Vue.js组件。模板中包含了用于用户名和密码的输入字段，v-model指令建立了输入字段与组件数据属性username和password之间的双向绑定。@submit.prevent指令阻止了默认的表单提交行为，而submitForm方法将输入的用户名和密码打印到控制台。
- en: 'Two-Way Data Binding: Vue.js Synchronization Between Form and State'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 双向数据绑定：Vue.js表单与状态的同步
- en: Vue.js leverages two-way data binding through the v-model directive, enabling
    seamless synchronization between the form elements and the component's data properties.
    As users interact with the form, the underlying data is automatically updated,
    providing a reactive and efficient approach to form handling.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js通过v-model指令实现双向数据绑定，能够在表单元素与组件的数据属性之间进行无缝同步。当用户与表单交互时，底层数据会自动更新，提供了一种响应式和高效的表单处理方法。
- en: <!-- TwoWayBinding.vue -->
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- TwoWayBinding.vue -->
- en: <template>
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <label for="message">Enter Message:</label>
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: <label for="message">输入消息：</label>
- en: <input type="text" id="message" v-model="userMessage" />
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: <input type="text" id="message" v-model="userMessage" />
- en: '<p>Your Message: {{ userMessage }}</p>'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: <p>您的消息：{{ userMessage }}</p>
- en: </div>
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'userMessage: '''''
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 'userMessage: '''''
- en: '};'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '}'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In this example, the userMessage data property is bound to the input field using
    v-model. As users type in the input field, the displayed message dynamically updates
    in real-time, showcasing the seamless synchronization facilitated by Vue.js two-way
    data binding.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，userMessage数据属性通过v-model与输入字段绑定。当用户在输入字段中输入时，显示的消息会实时动态更新，展示了Vue.js双向数据绑定所提供的无缝同步。
- en: 'Form Submission and Event Handling: Vue.js Form Interaction'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 表单提交与事件处理：Vue.js表单交互
- en: Form submission is a crucial aspect of form handling, and Vue.js simplifies
    the process by providing event handling mechanisms. In the previous SimpleForm
    example, the submitForm method is triggered upon form submission, allowing developers
    to implement custom logic for handling form data.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 表单提交是表单处理中的一个关键环节，Vue.js 通过提供事件处理机制简化了这一过程。在前面的 SimpleForm 示例中，submitForm 方法在表单提交时被触发，允许开发者为处理表单数据实现自定义逻辑。
- en: <!-- CustomValidation.vue -->
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- CustomValidation.vue -->
- en: <template>
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <form @submit.prevent="validateForm">
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: <form @submit.prevent="validateForm">
- en: <label for="email">Email:</label>
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: <label for="email">电子邮件：</label>
- en: <input type="email" id="email" v-model="email" />
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: <input type="email" id="email" v-model="email" />
- en: <button type="submit">Submit</button>
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: <button type="submit">提交</button>
- en: </form>
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: </form>
- en: </template>
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'email: '''''
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 'email: '''''
- en: '};'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: validateForm() {
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: validateForm() {
- en: // Custom validation logic
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: // 自定义验证逻辑
- en: if (this.email.includes('@')) {
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: if (this.email.includes('@')) {
- en: console.log('Form submitted:', this.email);
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('表单提交：', this.email);
- en: '} else {'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '} else {'
- en: console.error('Invalid email format');
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: console.error('无效的电子邮件格式');
- en: '}'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In the CustomValidation example, the validateForm method is invoked upon form
    submission. It includes custom validation logic to check if the entered email
    contains the '@' symbol. Depending on the validation result, the form submission
    is either logged to the console or an error message is displayed.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CustomValidation 示例中，validateForm 方法在表单提交时被调用。该方法包含自定义验证逻辑，用于检查输入的电子邮件是否包含
    '@' 符号。根据验证结果，表单提交要么被记录到控制台，要么显示错误信息。
- en: '"Basics of Form Handling" within the "Form Handling in Vue.js" module provides
    developers with foundational knowledge and practical examples to effectively manage
    forms in Vue.js applications. By exploring two-way data binding, form submission,
    and event handling, developers gain insights into creating interactive and responsive
    forms, enhancing the overall user experience in Vue.js applications.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '"Form Handling in Vue.js" 模块中的 "表单处理基础" 为开发者提供了基础知识和实用示例，帮助他们有效管理 Vue.js 应用中的表单。通过探索双向数据绑定、表单提交和事件处理，开发者能够深入了解如何创建互动性强、响应迅速的表单，从而提升
    Vue.js 应用的整体用户体验。'
- en: Two-Way Data Binding
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 双向数据绑定
- en: 'The "Form Handling in Vue.js" module of "Vue.js Essentials: For Responsive
    Web Development" delves into an essential aspect of form interactivity with the
    section titled "Two-Way Data Binding." This section illuminates developers on
    the power and convenience of two-way data binding in Vue.js, providing an efficient
    means to synchronize form elements with underlying data properties.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '"Vue.js Essentials: For Responsive Web Development" 中的 "Form Handling in Vue.js"
    模块深入探讨了表单交互的一个重要方面，名为 "双向数据绑定"。这一部分向开发者展示了 Vue.js 中双向数据绑定的强大功能和便利性，为开发者提供了一种高效的方式，将表单元素与底层数据属性同步。'
- en: <!-- TwoWayBinding.vue -->
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- TwoWayBinding.vue -->
- en: <template>
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <label for="message">Enter Message:</label>
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: <label for="message">输入消息：</label>
- en: <input type="text" id="message" v-model="userMessage" />
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: <input type="text" id="message" v-model="userMessage" />
- en: '<p>Your Message: {{ userMessage }}</p>'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: <p>您的消息：{{ userMessage }}</p>
- en: </div>
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'userMessage: '''''
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 'userMessage: '''''
- en: '};'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '}'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In this illustrative example, a Vue.js component named TwoWayBinding features
    an input field labeled "Enter Message." The v-model directive establishes a two-way
    binding between the input field and the userMessage data property. As users type
    in the input field, the displayed message dynamically updates in real-time within
    the accompanying paragraph, showcasing the seamless synchronization facilitated
    by Vue.js two-way data binding.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，一个名为 TwoWayBinding 的 Vue.js 组件包含一个标记为“输入消息”的输入框。v-model 指令在输入框和 userMessage
    数据属性之间建立了双向绑定。用户在输入框中输入内容时，显示的消息会实时更新在随附的段落中，展示了 Vue.js 双向数据绑定所带来的无缝同步。
- en: 'Reactive Updates: Vue.js Real-Time Interaction Between Form and State'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 反应式更新：Vue.js 实时交互：表单与状态之间的互动
- en: Vue.js employs a reactive approach to two-way data binding, ensuring that any
    changes in the form elements instantly reflect in the underlying data properties
    and vice versa. This reactivity enhances the user experience by providing a real-time
    and responsive interaction between users and the Vue.js application.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 采用反应式的双向数据绑定方式，确保表单元素中的任何变化会立即反映到底层数据属性中，反之亦然。这种反应性通过提供实时且响应迅速的用户交互，提升了用户体验。
- en: <!-- ReactiveUpdate.vue -->
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- ReactiveUpdate.vue -->
- en: <template>
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <label for="counter">Counter:</label>
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: <label for="counter">计数器：</label>
- en: <input type="number" id="counter" v-model="counter" />
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: <input type="number" id="counter" v-model="counter" />
- en: '<p>Current Count: {{ counter }}</p>'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: <p>当前计数：{{ counter }}</p>
- en: </div>
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'counter: 0'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 'counter: 0'
- en: '};'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '}'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In the ReactiveUpdate example, a numeric input field is bound to the counter
    data property. As users modify the input value, the displayed count updates in
    real-time, showcasing Vue.js reactivity in action.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ReactiveUpdate 示例中，一个数字输入框与 counter 数据属性绑定。当用户修改输入值时，显示的计数会实时更新，展示了 Vue.js
    的反应性特性。
- en: 'Handling Complex Forms: Vue.js Simplified Form Development'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 处理复杂表单：Vue.js 简化表单开发
- en: Two-way data binding simplifies the development of complex forms in Vue.js applications.
    It alleviates the need for manual DOM manipulations and facilitates a declarative
    approach to form development. Developers can focus on the logic and functionality
    of the form without being burdened by intricate data synchronization tasks.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 双向数据绑定简化了 Vue.js 应用中复杂表单的开发。它消除了手动 DOM 操作的需求，并促进了声明式的表单开发方式。开发者可以专注于表单的逻辑和功能，而不必被复杂的数据同步任务所困扰。
- en: <!-- ComplexForm.vue -->
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- ComplexForm.vue -->
- en: <template>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <form @submit.prevent="submitForm">
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: <form @submit.prevent="submitForm">
- en: <label for="firstName">First Name:</label>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: <label for="firstName">名字：</label>
- en: <input type="text" id="firstName" v-model="user.firstName" />
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: <input type="text" id="firstName" v-model="user.firstName" />
- en: <label for="lastName">Last Name:</label>
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: <label for="lastName">姓氏：</label>
- en: <input type="text" id="lastName" v-model="user.lastName" />
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: <input type="text" id="lastName" v-model="user.lastName" />
- en: <button type="submit">Submit</button>
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: <button type="submit">提交</button>
- en: </form>
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: </form>
- en: </template>
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'user: {'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 'user: {'
- en: 'firstName: '''','
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 'firstName: '''','
- en: 'lastName: '''''
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 'lastName: '''''
- en: '}'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: submitForm() {
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: submitForm() {
- en: // Logic for handling form submission
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: // 处理表单提交的逻辑
- en: console.log('Form submitted:', this.user);
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('表单已提交:', this.user);
- en: '}'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In the ComplexForm example, a form is created with separate input fields for
    the first name and last name. The entire user object is bound to the form using
    two-way data binding, providing a clean and organized approach to handling complex
    forms in Vue.js applications.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ComplexForm 示例中，创建了一个表单，分别包含了名和姓的输入框。整个用户对象通过双向数据绑定与表单绑定，为在 Vue.js 应用中处理复杂表单提供了一种简洁且有序的方法。
- en: '"Two-Way Data Binding" in the "Form Handling in Vue.js" module unveils the
    power of Vue.js in simplifying form development and enhancing user interactions.
    The detailed examples showcase the real-time synchronization between form elements
    and underlying data properties, demonstrating the efficiency and convenience of
    Vue.js two-way data binding in creating responsive and interactive forms.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 《Vue.js 表单处理》模块中的“两-way 数据绑定”揭示了 Vue.js 在简化表单开发和增强用户交互方面的强大功能。详细的示例展示了表单元素与底层数据属性之间的实时同步，证明了
    Vue.js 双向数据绑定在创建响应式和交互式表单时的高效性和便利性。
- en: Form Validation in Vue.js
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Vue.js 中的表单验证
- en: 'Within the module "Form Handling in Vue.js" from the book "Vue.js Essentials:
    For Responsive Web Development," the section titled "Form Validation in Vue.js"
    takes center stage. This segment delves into the crucial aspect of validating
    user input in forms, highlighting Vue.js''s capabilities in ensuring data integrity
    and providing user-friendly experiences.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '在《Vue.js Essentials: For Responsive Web Development》书中的“Vue.js 表单处理”模块内，“Vue.js
    中的表单验证”部分成为焦点。该部分深入探讨了表单中用户输入验证的关键问题，突出显示了 Vue.js 在确保数据完整性和提供用户友好体验方面的能力。'
- en: <!-- SimpleValidation.vue -->
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- SimpleValidation.vue -->
- en: <template>
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <form @submit.prevent="submitForm">
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: <form @submit.prevent="submitForm">
- en: <label for="email">Email:</label>
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: <label for="email">电子邮件：</label>
- en: <input type="email" id="email" v-model="email" />
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: <input type="email" id="email" v-model="email" />
- en: <span v-if="!isValidEmail">Invalid email format</span>
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: <span v-if="!isValidEmail">无效的电子邮件格式</span>
- en: <button type="submit">Submit</button>
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: <button type="submit">提交</button>
- en: </form>
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: </form>
- en: </template>
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'email: '''','
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 'email: '''','
- en: 'isValidEmail: true'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 'isValidEmail: true'
- en: '};'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: submitForm() {
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: submitForm() {
- en: if (this.isValidEmail) {
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: if (this.isValidEmail) {
- en: // Logic for handling form submission
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: // 处理表单提交的逻辑
- en: console.log('Form submitted:', this.email);
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('表单已提交:', this.email);
- en: '}'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '},'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'watch: {'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 'watch: {'
- en: email() {
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: email() {
- en: // Basic email validation
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: // 基本的邮箱验证
- en: this.isValidEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(this.email);
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: this.isValidEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(this.email);
- en: '}'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In this example, a Vue.js component named SimpleValidation showcases form validation
    for an email input field. The v-model directive binds the input field to the email
    data property, and a watch property monitors changes to the email input, triggering
    basic email validation. If the email format is invalid, a message is displayed,
    providing immediate feedback to the user.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，一个名为 SimpleValidation 的 Vue.js 组件展示了邮箱输入框的表单验证。v-model 指令将输入框与邮箱数据属性绑定，watch
    属性监视邮箱输入的变化，触发基本的邮箱验证。如果邮箱格式无效，将显示一条信息，为用户提供即时反馈。
- en: 'Dynamic Validation Messages: Vue.js Responsive Feedback Mechanism'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 动态验证信息：Vue.js 响应式反馈机制
- en: Vue.js facilitates the creation of dynamic validation messages, enhancing the
    feedback mechanism for users interacting with forms. By conditionally rendering
    elements based on validation checks, developers can create a responsive and user-friendly
    form validation experience.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 促进了动态验证信息的创建，增强了用户在与表单交互时的反馈机制。通过基于验证检查有条件地渲染元素，开发人员可以创建一个响应式且用户友好的表单验证体验。
- en: <!-- DynamicValidation.vue -->
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- DynamicValidation.vue -->
- en: <template>
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <form @submit.prevent="submitForm">
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: <form @submit.prevent="submitForm">
- en: <label for="password">Password:</label>
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: <label for="password">密码：</label>
- en: <input type="password" id="password" v-model="password" />
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: <input type="password" id="password" v-model="password" />
- en: <span v-if="!isValidPassword" class="error-message">Password must be at least
    8 characters</span>
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: <span v-if="!isValidPassword" class="error-message">密码必须至少包含 8 个字符</span>
- en: <button type="submit">Submit</button>
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: <button type="submit">提交</button>
- en: </form>
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: </form>
- en: </template>
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'password: '''','
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 'password: '''','
- en: 'isValidPassword: true'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 'isValidPassword: true'
- en: '};'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: submitForm() {
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: submitForm() {
- en: if (this.isValidPassword) {
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: if (this.isValidPassword) {
- en: // Logic for handling form submission
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: // 处理表单提交的逻辑
- en: console.log('Form submitted:', this.password);
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('表单已提交：', this.password);
- en: '}'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '},'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'watch: {'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 'watch: {'
- en: password() {
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: password() {
- en: // Basic password length validation
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: // 基本的密码长度验证
- en: this.isValidPassword = this.password.length >= 8;
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: this.isValidPassword = this.password.length >= 8;
- en: '}'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: <style scoped>
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: <style scoped>
- en: .error-message {
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: .error-message {
- en: 'color: red;'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: red;'
- en: '}'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: In the DynamicValidation example, a password input field is validated for a
    minimum length of 8 characters. An error message is dynamically displayed if the
    validation condition is not met. Vue.js's reactivity ensures that the error message
    appears or disappears in real-time as users interact with the form.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DynamicValidation 示例中，密码输入框会验证最小长度为 8 个字符。如果验证条件未满足，则会动态显示错误信息。Vue.js 的响应式特性确保了在用户与表单交互时，错误信息会实时出现或消失。
- en: 'Integration with Third-Party Libraries: Vue.js Extensibility in Form Validation'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方库集成：Vue.js 在表单验证中的可扩展性
- en: Vue.js seamlessly integrates with various third-party validation libraries,
    allowing developers to harness additional features and validation rules effortlessly.
    By incorporating such libraries, complex validation scenarios can be handled with
    ease, expanding the capabilities of Vue.js form validation.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 无缝集成了多种第三方验证库，使开发者能够轻松利用额外的功能和验证规则。通过结合这些库，可以轻松处理复杂的验证场景，扩展 Vue.js 表单验证的能力。
- en: <!-- VeeValidateIntegration.vue -->
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- VeeValidateIntegration.vue -->
- en: <template>
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <form @submit.prevent="submitForm">
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: <form @submit.prevent="submitForm">
- en: <label for="username">Username:</label>
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: <label for="username">用户名：</label>
- en: <input type="text" id="username" v-model="username" />
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: <input type="text" id="username" v-model="username" />
- en: <span v-if="!$veeValidate.errors.has('username')" class="error-message">Invalid
    username</span>
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: <span v-if="!$veeValidate.errors.has('username')" class="error-message">无效的用户名</span>
- en: <button type="submit">Submit</button>
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: <button type="submit">提交</button>
- en: </form>
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: </form>
- en: </template>
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'username: '''''
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 'username: '''''
- en: '};'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: submitForm() {
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: submitForm() {
- en: this.$validator.validateAll().then(result => {
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: this.$validator.validateAll().then(result => {
- en: if (result) {
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: if (result) {
- en: // Logic for handling form submission
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: // 处理表单提交的逻辑
- en: console.log('Form submitted:', this.username);
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('表单已提交:', this.username);
- en: '}'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '});'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: <style scoped>
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: <style scoped>
- en: .error-message {
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: .error-message {
- en: 'color: red;'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: red;'
- en: '}'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: In the VeeValidateIntegration example, the VeeValidate library is integrated
    with Vue.js for form validation. The $validator object provides methods for checking
    validation status, and the validateAll method is used to validate all fields.
    If any validation fails, an error message is dynamically displayed.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在 VeeValidateIntegration 示例中，VeeValidate 库与 Vue.js 集成，用于表单验证。$validator 对象提供了检查验证状态的方法，validateAll
    方法用于验证所有字段。如果任何验证失败，错误信息将动态显示。
- en: '"Form Validation in Vue.js" within the "Form Handling in Vue.js" module showcases
    the importance of data integrity and user-friendly experiences in web forms. Vue.js
    empowers developers to implement robust form validation mechanisms, from basic
    checks to dynamic feedback mechanisms and integration with third-party libraries.
    The provided examples demonstrate Vue.js''s versatility in creating interactive
    and reliable forms, contributing to a positive user experience in web applications.'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '"Vue.js 中的表单验证" 在 "Vue.js 表单处理" 模块中展示了数据完整性和用户友好体验在网页表单中的重要性。Vue.js 使开发者能够实现强大的表单验证机制，从基本的检查到动态反馈机制以及与第三方库的集成。提供的示例展示了
    Vue.js 在创建互动和可靠表单方面的多功能性，为网页应用提供了积极的用户体验。'
- en: Handling Forms with Vuex
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Vuex 处理表单
- en: 'The "Form Handling in Vue.js" module of the book "Vue.js Essentials: For Responsive
    Web Development" delves deeper into the intricacies of managing forms, introducing
    the section titled "Handling Forms with Vuex." This segment explores the integration
    of Vuex, Vue.js''s state management library, to streamline the handling of form
    data and enhance the reactivity and maintainability of Vue.js applications.'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 《Vue.js精要：响应式网页开发》一书中的“Vue.js中的表单处理”模块深入探讨了表单管理的复杂性，介绍了标题为“使用Vuex处理表单”的部分。该部分探讨了Vuex（Vue.js的状态管理库）的集成，旨在简化表单数据的处理，并增强Vue.js应用的响应性和可维护性。
- en: <!-- FormWithVuex.vue -->
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- FormWithVuex.vue -->
- en: <template>
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <form @submit.prevent="submitForm">
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: <form @submit.prevent="submitForm">
- en: <label for="username">Username:</label>
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: <label for="username">用户名：</label>
- en: <input type="text" id="username" v-model="formData.username" />
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: <input type="text" id="username" v-model="formData.username" />
- en: <label for="email">Email:</label>
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: <label for="email">电子邮件：</label>
- en: <input type="email" id="email" v-model="formData.email" />
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: <input type="email" id="email" v-model="formData.email" />
- en: <button type="submit">Submit</button>
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: <button type="submit">提交</button>
- en: </form>
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: </form>
- en: </template>
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: 'computed: {'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 'computed: {'
- en: 'formData: {'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 'formData: {'
- en: get() {
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: get() {
- en: return this.$store.state.form;
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: return this.$store.state.form;
- en: '},'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: set(value) {
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: set(value) {
- en: this.$store.commit('updateFormData', value);
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: this.$store.commit('updateFormData', value);
- en: '}'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '},'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: submitForm() {
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: submitForm() {
- en: // Access form data from the store
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: // 从存储中访问表单数据
- en: const formData = this.$store.state.form;
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: const formData = this.$store.state.form;
- en: // Logic for handling form submission
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: // 表单提交的逻辑
- en: console.log('Form submitted:', formData);
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('表单已提交：', formData);
- en: '}'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In this example, a Vue.js component named FormWithVuex features a form with
    input fields for a username and email. The v-model directive binds these input
    fields to the formData computed property. The formData property is both a getter
    and a setter, allowing seamless integration with Vuex for state management. When
    the form is submitted, the method submitForm accesses the form data from the Vuex
    store.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，一个名为FormWithVuex的Vue.js组件包含一个带有用户名和电子邮件输入字段的表单。v-model指令将这些输入字段绑定到formData计算属性。formData属性既是getter也是setter，允许与Vuex进行无缝集成以进行状态管理。当表单提交时，submitForm方法从Vuex存储中获取表单数据。
- en: 'Centralized State Management: Vue.js Forms with Vuex Store'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 集中式状态管理：使用Vuex存储管理Vue.js表单
- en: By using Vuex to manage form data, Vue.js applications benefit from centralized
    state management. The Vuex store acts as a single source of truth for the entire
    application, ensuring that form data is consistent and accessible across various
    components.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用Vuex来管理表单数据，Vue.js应用能够受益于集中式状态管理。Vuex存储作为整个应用的唯一数据源，确保表单数据在各个组件之间保持一致且可访问。
- en: // store/index.js
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: // store/index.js
- en: import Vue from 'vue';
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: import Vue from 'vue';
- en: import Vuex from 'vuex';
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: import Vuex from 'vuex';
- en: Vue.use(Vuex);
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.use(Vuex);
- en: const store = new Vuex.Store({
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: const store = new Vuex.Store({
- en: 'state: {'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 'state: {'
- en: 'form: {'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 'form: {'
- en: 'username: '''','
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 'username: '''','
- en: 'email: '''''
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 'email: '''''
- en: '}'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '},'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'mutations: {'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 'mutations: {'
- en: updateFormData(state, formData) {
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: updateFormData(state, formData) {
- en: state.form = { ...state.form, ...formData };
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: state.form = { ...state.form, ...formData };
- en: '}'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '});'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: export default store;
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: export default store;
- en: In the Vuex store's state property, the initial form data structure is defined.
    The updateFormData mutation allows for dynamic updates to the form data, ensuring
    that the state remains reactive and in sync with the user's input.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vuex存储的state属性中，定义了初始的表单数据结构。updateFormData突变函数允许动态更新表单数据，确保状态保持响应式，并与用户输入同步。
- en: 'Vuex Getters for Enhanced Reactivity: Vue.js Form Optimization'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: Vuex Getters用于增强响应性：Vue.js表单优化
- en: Vuex getters enhance the reactivity of form data in Vue.js applications. By
    utilizing getters, developers can derive computed properties from the form data
    stored in Vuex, providing a clean and efficient way to access and manipulate form-related
    information.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: Vuex getters提升了Vue.js应用程序中表单数据的响应性。通过使用getters，开发人员可以从存储在Vuex中的表单数据派生出计算属性，提供了一种简洁高效的方式来访问和操作与表单相关的信息。
- en: // store/index.js
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: // store/index.js
- en: const store = new Vuex.Store({
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: const store = new Vuex.Store({
- en: // ...
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: // ...
- en: 'getters: {'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 'getters: {'
- en: 'isFormValid: state => {'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 'isFormValid: state => {'
- en: // Custom validation logic
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: // 自定义验证逻辑
- en: return state.form.username.length > 0 && state.form.email.includes('@');
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: return state.form.username.length > 0 && state.form.email.includes('@');
- en: '}'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '});'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: In this snippet, a Vuex getter named isFormValid is introduced. It performs
    custom validation logic to determine if the form is valid based on specified criteria.
    This getter can be used in Vue.js components to conditionally enable or disable
    form submission buttons, showcasing the flexibility and power of Vuex getters
    in managing form-related state.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码片段中，引入了一个名为isFormValid的Vuex getter。它执行自定义验证逻辑，根据指定的标准判断表单是否有效。这个getter可以在Vue.js组件中使用，用于有条件地启用或禁用表单提交按钮，展示了Vuex
    getters在管理表单相关状态时的灵活性和强大功能。
- en: '"Handling Forms with Vuex" in the "Form Handling in Vue.js" module underscores
    the advantages of leveraging Vuex for state management in Vue.js applications.
    The provided examples demonstrate how Vuex centralizes and optimizes the handling
    of form data, enhancing reactivity and maintainability. Through a Vuex store,
    Vue.js developers can streamline the management of form-related state, providing
    a robust foundation for building interactive and responsive forms in their applications.'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 在《Vue.js中的表单处理》模块中的“使用Vuex处理表单”强调了在Vue.js应用程序中利用Vuex进行状态管理的优势。提供的示例展示了Vuex如何集中和优化表单数据的处理，提升了响应性和可维护性。通过Vuex存储，Vue.js开发人员可以简化表单相关状态的管理，为构建交互式和响应式表单提供强大的基础。
