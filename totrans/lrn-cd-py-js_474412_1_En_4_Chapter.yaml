- en: © The Author(s), under exclusive license to Springer Fachmedien Wiesbaden GmbH,
    part of Springer Nature 2024J. L. ZuckarelliLearn coding with Python and JavaScript
    [https://doi.org/10.1007/978-3-658-42912-6_4](https://doi.org/10.1007/978-3-658-42912-6_4)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © 作者（们），独家授权Springer Fachmedien Wiesbaden GmbH，Springer Nature的一部分，2024年J. L.
    Zuckarelli《用Python和JavaScript学习编码》[https://doi.org/10.1007/978-3-658-42912-6_4](https://doi.org/10.1007/978-3-658-42912-6_4)
- en: 4. Why Are There So Many Programming Languages?
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4. 为什么有这么多编程语言？
- en: Joachim L. Zuckarelli^([1](#Aff2)  )(1)München, GermanyOverview
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Joachim L. Zuckarelli^([1](#Aff2) )(1)德国慕尼黑概览
- en: There are literally hundreds of different programming languages and new ones
    are being developed all the time. Why is that? Wouldn’t it be enough to have one
    programming language that all programmers understand and all computers can be
    programmed with?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言有数百种，而且新的编程语言不断被开发出来。这是为什么呢？难道拥有一种所有程序员都能理解、所有计算机都能编程的编程语言就足够了吗？
- en: In this chapter, we explore the question of why the world of programming languages
    is so colorful, multifaceted, but unfortunately also cluttered.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了为什么编程语言的世界如此丰富多彩、多面性，但不幸的是，也显得有些杂乱。
- en: The three early languages ALGOL, COBOL and FORTRAN that we mentioned in the
    last chapter only form a small part of the universe of the programming languages
    that exist today. There are contradictory statements about their exact number.
    This is partly because it is a matter of definition about when two languages should
    be considered “different.” Should a slight variation of a language (a “dialect”)
    really be counted as a separate programming language? And what about the declarative
    (descriptive) programming languages (such as HTML and CSS, which are used to design
    web pages, among other things), i.e., languages that do not contain any real flow
    logic? So, it is not easy to decide what you want to count as a new language.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一章提到的三种早期语言——ALGOL、COBOL和FORTRAN，只是今天存在的编程语言宇宙中的一小部分。关于它们的确切数量有矛盾的说法。这部分是因为这涉及到定义的问题，即什么时候两个语言应该被视为“不同”的语言。语言的轻微变化（如“方言”）是否真的应该被计为一种独立的编程语言？那么像HTML和CSS这样的声明式（描述性）编程语言（它们用于设计网页等）呢？也就是说，那些不包含任何实际流程逻辑的语言呢？因此，决定什么算作一种新语言并不容易。
- en: At the time of writing, Wikipedia lists 713 different programming languages.
    This confronts anyone who wants to learn programming with the question of which
    language he or she should learn. We will deal with this in the following chapter.
    Here, we will look at the question of why there are so many programming languages
    in the first place. The answer to this question lies primarily in the different
    *fields of application* for which the languages have been designed, the different
    ways in which the languages fundamentally work (the so-called *programming paradigms*),
    and the *further development of* existing programming languages in a separate
    branch.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 截至写作时，维基百科列出了713种不同的编程语言。这使得任何想要学习编程的人都面临着选择学习哪种语言的问题。我们将在下一章讨论这个问题。在这里，我们将探讨为什么一开始会有这么多编程语言。这个问题的答案主要在于编程语言设计的不同*应用领域*、这些语言基本运作的不同方式（即所谓的*编程范式*），以及现有编程语言在独立分支中的*进一步发展*。
- en: 4.1 Different Fields of Application
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.1 不同的应用领域
- en: 'Programming languages have been developed for different purposes and are therefore
    well suited for “their” main purpose, but possibly less so for other purposes.
    Examples include:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言是为不同的目的而开发的，因此它们非常适合“它们”的主要用途，但可能不太适合其他用途。以下是一些例子：
- en: the *R* language, which is particularly strong in the field of statistics,
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*R*语言，特别擅长统计领域，'
- en: Apple’s *Swift*, which was developed specifically for app programming,
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 苹果的*Swift*语言，专门为应用程序编程而开发，
- en: the *Structured Query Language* (*SQL*), which is the standard for database
    queries,
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*结构化查询语言*（*SQL*），它是数据库查询的标准。'
- en: '*PHP*, whose main purpose is to develop dynamic websites (websites that respond
    to user input).'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*PHP*，其主要用途是开发动态网站（对用户输入做出响应的网站）。'
- en: The languages have special features for their respective “main purpose,” which
    make it possible to solve problems in this area easily. The statistics language
    R, for example, can handle tables and data columns (or vectors) very well, which
    may be difficult to accomplish in other languages. In the database query language
    SQL, it is very easy to query databases for information and, for example, to determine
    “all customers who have bought our new product via the homepage at least twice
    in the last 12 months.” The web language PHP makes it very easy to output the
    results of a search in a product catalog or to process the login data of the user
    of a social media platform and then grant or deny the user access.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 各种编程语言有其各自针对“主要用途”的特殊特性，这使得在这一领域解决问题变得更加容易。例如，统计语言R非常擅长处理表格和数据列（或向量），而这些在其他语言中可能比较难以实现。在数据库查询语言SQL中，查询数据库信息非常容易，比如可以轻松查询出“过去12个月内，通过主页至少购买我们新产品两次的所有客户”。而Web语言PHP则非常方便输出产品目录的搜索结果，或处理社交媒体平台用户的登录数据，进而授权或拒绝用户访问权限。
- en: Not all programming languages have a special field of application though. These
    languages are therefore not called *special-purpose languages*, but *general-purpose
    languages*. These include the better-known heavyweights such as Java, C/C++, Python
    and VisualBasic. Nevertheless, due to the characteristics of these languages,
    areas have often developed in which they have become particularly popular. For
    example, C/C++, is the standard for system-oriented programming (i.e., the development
    of operating systems or device drivers), Python for data science (i.e., complex
    analyses of data, including the application of artificial intelligence methods).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，并非所有编程语言都有特别的应用领域。因此，这些语言不被称为*专用语言*，而是*通用语言*。这些语言包括一些更为知名的重量级语言，如Java、C/C++、Python和VisualBasic。然而，由于这些语言的特点，往往在一些领域中发展出它们特别受欢迎的应用。例如，C/C++是面向系统的编程标准（即操作系统或设备驱动程序的开发），而Python则广泛应用于数据科学（即复杂的数据分析，包括人工智能方法的应用）。
- en: However, the distinction between special-purpose and general-purpose languages
    is somewhat fluid. The widely used Java programming language, for example, is
    based on the idea of compiling the same source code once (into bytecode, see the
    previous chapter for more details) and then being able to execute it on all possible
    devices. In a sense, this is also a kind of special purpose. Nevertheless, Java
    is used today in many places where the portability of the developed programs from
    one system architecture to another is not at all important.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，专用语言和通用语言之间的区别在某种程度上是流动的。以广泛使用的Java编程语言为例，它的设计理念是编译同一份源代码一次（编译成字节码，详细内容见前一章），然后可以在所有可能的设备上执行。从某种意义上说，这也是一种特殊的用途。然而，今天Java也被广泛用于许多地方，其中开发的程序在不同系统架构之间的可移植性并不重要。
- en: The purposes and fields of application for which programming languages are needed
    are changing, and so is the range of languages that is particularly favorable
    for the currently popular purposes. In the first half of the 1990s, web applications
    played a completely subordinate role. Instead, languages for programs that were
    permanently installed on the computer, for example from floppy disk or CD-ROM,
    were important. The key requirements were to design attractive and easy-to-use
    program interfaces in a simple way (preferably by drag & drop) and then to be
    able to react to the user’s behavior on these interfaces in an event-driven manner;
    and perhaps to be able to provide a convenient installation program without much
    effort. This made developers happy at that time. Then internet applications became
    more important and with them completely new languages that had to run in web browsers.
    They also had to be able to generate or modify HTML pages and communicate with
    web servers, for example to read data from databases on the server and display
    it for the user. Thus, languages for stand-alone applications permanently installed
    on a computer became less important relative to the new “upstarts.” To some extent,
    this also applies to Java, whose cross-platform approach was no longer so crucial
    now that the new languages were interpreted directly by the browser or ran on
    the server and simply returned a complete, dynamically generated website to the
    browser.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言的用途和应用领域正在发生变化，特别适合当前流行用途的语言种类也在变化。在1990年代前半期，网页应用程序扮演的是完全从属的角色。相反，那时对于永久安装在计算机上的程序语言（例如来自软盘或CD-ROM）更为重要。关键要求是以简单的方式设计出既吸引人又易于使用的程序界面（最好是通过拖放操作），然后能够以事件驱动的方式响应用户在这些界面上的行为；并且可能需要提供一个无需太多努力就能实现的方便安装程序。这使得当时的开发者非常满意。随后，互联网应用程序变得更加重要，并且随着这些应用程序，完全新的语言应运而生，这些语言必须能在网页浏览器中运行。它们还需要能够生成或修改HTML页面，并与网络服务器通信，例如从服务器数据库中读取数据并展示给用户。因此，相对于这些新的“后起之秀”，计算机上永久安装的独立应用程序语言的重要性下降了。在某种程度上，这也适用于Java，它的跨平台方法不再像以前那么重要，因为新语言直接由浏览器解释或在服务器上运行，简单地将完整的动态生成网站返回给浏览器。
- en: 4.2 Different Paradigms
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.2 不同的编程范式
- en: Programming languages are based on different *programming paradigms*. A paradigm
    in this sense is the fundamental principle of how programs are constructed and
    function in the particular language. The paradigms used in programming are not
    without overlap, although some combinations are mutually exclusive; in fact, most
    languages follow multiple paradigms.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言基于不同的*编程范式*。在这种意义上，范式是构建和运行程序的基本原则。编程中使用的范式并非没有重叠，尽管某些组合是互斥的；实际上，大多数语言遵循多种范式。
- en: 'A particularly important paradigm (because it is followed by many programming
    languages) is *object-oriented programming* (*OOP*). Simply put, OOP allows you
    to recreate objects as they occur in the real world, with their properties (attributes),
    and to work with them by applying certain actions (methods) that are suitable
    for this kind of object. Let us use a car as an example. A car is an object with
    various properties such as color, manufacturer, acceleration, and so on. In an
    object-oriented language, you could easily create a data construct representing
    a car, and set its properties to: color = midnight blue, manufacturer = BMW, acceleration
    = 9.1 s from 0 to 100 miles/h. There could also be properties that reflect the
    current driving state of the car, such as its current speed, how many people are
    in the car, and whether the turn signal is currently on. For many purposes, such
    a representation of objects is very useful. We will look at object-oriented programming
    in more detail later.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一个特别重要的范式（因为它被许多编程语言遵循）是*面向对象编程*（*OOP*）。简单来说，OOP允许你以现实世界中出现的对象形式重新创建对象，具有它们的属性（特征），并通过应用适合这种对象的特定操作（方法）来与它们互动。让我们以汽车为例。汽车是一个具有多种属性的对象，例如颜色、制造商、加速度等等。在面向对象的语言中，你可以轻松创建一个代表汽车的数据构造，并将其属性设置为：颜色
    = 午夜蓝，制造商 = 宝马，加速度 = 0到100英里/小时需9.1秒。还可以有反映汽车当前行驶状态的属性，例如当前速度、车内人数，以及转向灯是否开启。对于许多用途，这样的对象表示非常有用。我们稍后会更详细地探讨面向对象编程。
- en: Another example of a (completely different) programming paradigm is the so-called
    *logical programming*, which is followed, for example, by the language *Prolog*
    (Programmation en logique). In the logical programming paradigm, the programmer
    defines rules that contain knowledge about a certain domain. For example, one
    could define as a rule that two children are siblings if and only if they have
    the same parents. Then one could tell the Prolog interpreter that Paul’s father
    is Mark, and his mother is Julia; and further, that Beverly’s father is Mark and
    Beverly’s mother is Julia. Fed with this knowledge and the previously defined
    rule about the relationship between parents and children, the Prolog interpreter
    would now be able to draw the logical conclusion that Paul and Beverly are siblings
    completely independently and without the need for any further programming.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个（完全不同的）编程范式的例子是所谓的*逻辑编程*，例如语言*Prolog*（Programmation en logique）遵循这一范式。在逻辑编程范式中，程序员定义包含某一领域知识的规则。例如，可以定义一个规则：如果两个孩子有相同的父母，则他们是兄妹。然后，可以告诉Prolog解释器保罗的父亲是马克，母亲是朱莉娅；此外，贝弗利的父亲是马克，母亲是朱莉娅。基于这些知识和关于父母与孩子关系的已定义规则，Prolog解释器现在能够完全独立地得出保罗和贝弗利是兄妹的逻辑结论，而无需进一步编程。
- en: Like so much in the world, programming paradigms are subject to fashions and
    trends. When a paradigm becomes fashionable, more languages are created that follow
    this paradigm.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 就像世界上的许多事物一样，编程范式也会受到时尚和趋势的影响。当某个范式变得流行时，更多的语言会随之诞生，遵循这一范式。
- en: 4.3 Further Developments and Dialects
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.3 进一步的发展和方言
- en: Part of the diversity of programming languages can also be explained by the
    fact that “dialects” of languages have emerged, i.e., new languages that are closely
    based on another language but are further developments or (at least from the language
    inventor’s point of view) improvements over the original language. Examples of
    this are C++ and C# (or “C sharp”), both of which are evolutions of the C programming
    language and have converted the original C language to the object-oriented programming
    paradigm.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言的多样性的一部分也可以通过“方言”语言的出现来解释，也就是说，基于另一种语言的新语言，但它们是进一步的发展或（至少从语言发明者的角度来看）对原始语言的改进。C++和C#（或“C
    sharp”）就是这样的例子，它们都是C编程语言的演变，并将原始的C语言转化为面向对象编程范式。
- en: But why not just adapt the original language instead of opening a new “branch”
    with the dialect? Reasons for this could be that the developer of the original
    language does not support the intended changes; or to ensure that code written
    in the original language is still executable, even if serious changes in the new
    language would make all programs written in the original language no longer being
    able to execute without errors.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，为什么不直接改进原始语言，而是开辟一个新的“分支”来处理方言呢？这种做法的原因可能是原始语言的开发者不支持预期的变更；或者是为了确保用原始语言编写的代码仍然可以执行，即使在新语言中进行了重大更改，这可能会导致用原始语言编写的所有程序无法无错误地执行。
- en: Practically all programming languages (even if they are not further developments
    of other languages) are influenced by other languages. This can be seen quite
    clearly in the Wikipedia articles of the languages, that show systematically which
    other languages the language in question has been influenced by, and which other
    languages it has influenced.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有的编程语言（即使它们不是其他语言的进一步发展）都受到其他语言的影响。我们可以通过查看这些语言的维基百科条目清楚地看到这一点，这些条目系统地展示了该语言受哪些其他语言的影响，以及它又影响了哪些其他语言。
- en: If a language is a dialect of another language, it often has a name that is
    based on the name of the original language, as we have just seen with C++ and
    C#. Other examples of this phenomenon are VisualBasic (an evolution of BASIC)
    and Object Pascal (an object-oriented variant of Pascal). The latter is a good
    example of how a conversion of the original language to the object-oriented programming
    paradigm often leads to an extension of the name by “Object” or “++” (based on
    the “original pair,” C/C++).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一种语言是另一种语言的方言，它通常会以原始语言的名称为基础，就像我们刚刚看到的C++和C#。这种现象的其他例子包括VisualBasic（BASIC的演变）和Object
    Pascal（Pascal的面向对象变体）。后者是一个很好的例子，说明将原始语言转换为面向对象编程范式通常会导致名称中加上“Object”或“++”（基于“原始对”，即C/C++）。
- en: Otherwise, the naming landscape of programming languages is very colorful and
    varied. Some programming languages have names that are based on the names of persons
    (the name of the developer or of persons honored by the naming), for example Ada
    (after the programming pioneer Augusta Ada Byron), Eiffel (after the French engineer
    and builder of the Eiffel Tower), Gödel (after the Austrian mathematician), or
    Wolfram Language (after the British mathematician and computer scientist Stephen
    Wolfram). The names of some other languages are abbreviations, as in the case
    of SQL (Structured Query Language), VBA (Visual Basic for Applications), FORTRAN
    (Formula Translation), COBOL (Common Business Oriented Language) or Prolog (“programmation
    en logique”), while still others are purely fanciful names, such as Delphi or
    Python.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，编程语言的命名世界是非常丰富多彩和多样化的。一些编程语言的名字来源于人的名字（开发者的名字或因命名而被纪念的人物），例如 Ada（以编程先驱奥古斯塔·阿达·拜伦命名）、Eiffel（以法国工程师和埃菲尔铁塔的建筑师命名）、Gödel（以奥地利数学家命名）或
    Wolfram Language（以英国数学家和计算机科学家斯蒂芬·沃尔夫拉姆命名）。还有一些语言的名字是缩写，例如 SQL（结构化查询语言）、VBA（面向应用程序的
    Visual Basic）、FORTRAN（公式翻译）、COBOL（面向商业的通用语言）或 Prolog（“逻辑编程”），而另一些则是纯粹的幻想名称，如 Delphi
    或 Python。
- en: 'Many (especially professional) programmers today are somewhat language-agnostic:
    they simply use the language that is best suited for their current project. In
    doing so, they look at the problem to be solved and then decide what they want
    to work with. They will not know all languages, of course, but they do know a
    certain range from which they can then choose. And this range of languages is
    usually much wider than that of professional translators. This works because programmers
    have internalized the basic concepts of programming and can therefore pick up
    new language easily. That’s what we hope to learn with this book. But before that,
    in the next chapter, we’ll look at how to choose a suitable language.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的许多（尤其是专业）程序员在语言选择上相对中立：他们只是使用最适合当前项目的语言。在这样做时，他们会首先看待需要解决的问题，然后决定选择什么语言来进行工作。当然，他们不可能掌握所有语言，但他们确实知道一些语言，并能够从中做出选择。而且，这些语言的范围通常比专业翻译的语言范围要广得多。这之所以能实现，是因为程序员已经内化了编程的基本概念，因此能够轻松地掌握新的编程语言。这正是我们希望通过本书学习到的内容。但在此之前，在下一章中，我们将探讨如何选择适合的编程语言。
