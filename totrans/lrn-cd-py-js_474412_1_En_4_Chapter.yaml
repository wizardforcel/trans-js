- en: © The Author(s), under exclusive license to Springer Fachmedien Wiesbaden GmbH,
    part of Springer Nature 2024J. L. ZuckarelliLearn coding with Python and JavaScript
    [https://doi.org/10.1007/978-3-658-42912-6_4](https://doi.org/10.1007/978-3-658-42912-6_4)
  prefs: []
  type: TYPE_NORMAL
- en: 4. Why Are There So Many Programming Languages?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Joachim L. Zuckarelli^([1](#Aff2)  )(1)München, GermanyOverview
  prefs: []
  type: TYPE_NORMAL
- en: There are literally hundreds of different programming languages and new ones
    are being developed all the time. Why is that? Wouldn’t it be enough to have one
    programming language that all programmers understand and all computers can be
    programmed with?
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we explore the question of why the world of programming languages
    is so colorful, multifaceted, but unfortunately also cluttered.
  prefs: []
  type: TYPE_NORMAL
- en: The three early languages ALGOL, COBOL and FORTRAN that we mentioned in the
    last chapter only form a small part of the universe of the programming languages
    that exist today. There are contradictory statements about their exact number.
    This is partly because it is a matter of definition about when two languages should
    be considered “different.” Should a slight variation of a language (a “dialect”)
    really be counted as a separate programming language? And what about the declarative
    (descriptive) programming languages (such as HTML and CSS, which are used to design
    web pages, among other things), i.e., languages that do not contain any real flow
    logic? So, it is not easy to decide what you want to count as a new language.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, Wikipedia lists 713 different programming languages.
    This confronts anyone who wants to learn programming with the question of which
    language he or she should learn. We will deal with this in the following chapter.
    Here, we will look at the question of why there are so many programming languages
    in the first place. The answer to this question lies primarily in the different
    *fields of application* for which the languages have been designed, the different
    ways in which the languages fundamentally work (the so-called *programming paradigms*),
    and the *further development of* existing programming languages in a separate
    branch.
  prefs: []
  type: TYPE_NORMAL
- en: 4.1 Different Fields of Application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Programming languages have been developed for different purposes and are therefore
    well suited for “their” main purpose, but possibly less so for other purposes.
    Examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: the *R* language, which is particularly strong in the field of statistics,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apple’s *Swift*, which was developed specifically for app programming,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the *Structured Query Language* (*SQL*), which is the standard for database
    queries,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*PHP*, whose main purpose is to develop dynamic websites (websites that respond
    to user input).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The languages have special features for their respective “main purpose,” which
    make it possible to solve problems in this area easily. The statistics language
    R, for example, can handle tables and data columns (or vectors) very well, which
    may be difficult to accomplish in other languages. In the database query language
    SQL, it is very easy to query databases for information and, for example, to determine
    “all customers who have bought our new product via the homepage at least twice
    in the last 12 months.” The web language PHP makes it very easy to output the
    results of a search in a product catalog or to process the login data of the user
    of a social media platform and then grant or deny the user access.
  prefs: []
  type: TYPE_NORMAL
- en: Not all programming languages have a special field of application though. These
    languages are therefore not called *special-purpose languages*, but *general-purpose
    languages*. These include the better-known heavyweights such as Java, C/C++, Python
    and VisualBasic. Nevertheless, due to the characteristics of these languages,
    areas have often developed in which they have become particularly popular. For
    example, C/C++, is the standard for system-oriented programming (i.e., the development
    of operating systems or device drivers), Python for data science (i.e., complex
    analyses of data, including the application of artificial intelligence methods).
  prefs: []
  type: TYPE_NORMAL
- en: However, the distinction between special-purpose and general-purpose languages
    is somewhat fluid. The widely used Java programming language, for example, is
    based on the idea of compiling the same source code once (into bytecode, see the
    previous chapter for more details) and then being able to execute it on all possible
    devices. In a sense, this is also a kind of special purpose. Nevertheless, Java
    is used today in many places where the portability of the developed programs from
    one system architecture to another is not at all important.
  prefs: []
  type: TYPE_NORMAL
- en: The purposes and fields of application for which programming languages are needed
    are changing, and so is the range of languages that is particularly favorable
    for the currently popular purposes. In the first half of the 1990s, web applications
    played a completely subordinate role. Instead, languages for programs that were
    permanently installed on the computer, for example from floppy disk or CD-ROM,
    were important. The key requirements were to design attractive and easy-to-use
    program interfaces in a simple way (preferably by drag & drop) and then to be
    able to react to the user’s behavior on these interfaces in an event-driven manner;
    and perhaps to be able to provide a convenient installation program without much
    effort. This made developers happy at that time. Then internet applications became
    more important and with them completely new languages that had to run in web browsers.
    They also had to be able to generate or modify HTML pages and communicate with
    web servers, for example to read data from databases on the server and display
    it for the user. Thus, languages for stand-alone applications permanently installed
    on a computer became less important relative to the new “upstarts.” To some extent,
    this also applies to Java, whose cross-platform approach was no longer so crucial
    now that the new languages were interpreted directly by the browser or ran on
    the server and simply returned a complete, dynamically generated website to the
    browser.
  prefs: []
  type: TYPE_NORMAL
- en: 4.2 Different Paradigms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Programming languages are based on different *programming paradigms*. A paradigm
    in this sense is the fundamental principle of how programs are constructed and
    function in the particular language. The paradigms used in programming are not
    without overlap, although some combinations are mutually exclusive; in fact, most
    languages follow multiple paradigms.
  prefs: []
  type: TYPE_NORMAL
- en: 'A particularly important paradigm (because it is followed by many programming
    languages) is *object-oriented programming* (*OOP*). Simply put, OOP allows you
    to recreate objects as they occur in the real world, with their properties (attributes),
    and to work with them by applying certain actions (methods) that are suitable
    for this kind of object. Let us use a car as an example. A car is an object with
    various properties such as color, manufacturer, acceleration, and so on. In an
    object-oriented language, you could easily create a data construct representing
    a car, and set its properties to: color = midnight blue, manufacturer = BMW, acceleration
    = 9.1 s from 0 to 100 miles/h. There could also be properties that reflect the
    current driving state of the car, such as its current speed, how many people are
    in the car, and whether the turn signal is currently on. For many purposes, such
    a representation of objects is very useful. We will look at object-oriented programming
    in more detail later.'
  prefs: []
  type: TYPE_NORMAL
- en: Another example of a (completely different) programming paradigm is the so-called
    *logical programming*, which is followed, for example, by the language *Prolog*
    (Programmation en logique). In the logical programming paradigm, the programmer
    defines rules that contain knowledge about a certain domain. For example, one
    could define as a rule that two children are siblings if and only if they have
    the same parents. Then one could tell the Prolog interpreter that Paul’s father
    is Mark, and his mother is Julia; and further, that Beverly’s father is Mark and
    Beverly’s mother is Julia. Fed with this knowledge and the previously defined
    rule about the relationship between parents and children, the Prolog interpreter
    would now be able to draw the logical conclusion that Paul and Beverly are siblings
    completely independently and without the need for any further programming.
  prefs: []
  type: TYPE_NORMAL
- en: Like so much in the world, programming paradigms are subject to fashions and
    trends. When a paradigm becomes fashionable, more languages are created that follow
    this paradigm.
  prefs: []
  type: TYPE_NORMAL
- en: 4.3 Further Developments and Dialects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Part of the diversity of programming languages can also be explained by the
    fact that “dialects” of languages have emerged, i.e., new languages that are closely
    based on another language but are further developments or (at least from the language
    inventor’s point of view) improvements over the original language. Examples of
    this are C++ and C# (or “C sharp”), both of which are evolutions of the C programming
    language and have converted the original C language to the object-oriented programming
    paradigm.
  prefs: []
  type: TYPE_NORMAL
- en: But why not just adapt the original language instead of opening a new “branch”
    with the dialect? Reasons for this could be that the developer of the original
    language does not support the intended changes; or to ensure that code written
    in the original language is still executable, even if serious changes in the new
    language would make all programs written in the original language no longer being
    able to execute without errors.
  prefs: []
  type: TYPE_NORMAL
- en: Practically all programming languages (even if they are not further developments
    of other languages) are influenced by other languages. This can be seen quite
    clearly in the Wikipedia articles of the languages, that show systematically which
    other languages the language in question has been influenced by, and which other
    languages it has influenced.
  prefs: []
  type: TYPE_NORMAL
- en: If a language is a dialect of another language, it often has a name that is
    based on the name of the original language, as we have just seen with C++ and
    C#. Other examples of this phenomenon are VisualBasic (an evolution of BASIC)
    and Object Pascal (an object-oriented variant of Pascal). The latter is a good
    example of how a conversion of the original language to the object-oriented programming
    paradigm often leads to an extension of the name by “Object” or “++” (based on
    the “original pair,” C/C++).
  prefs: []
  type: TYPE_NORMAL
- en: Otherwise, the naming landscape of programming languages is very colorful and
    varied. Some programming languages have names that are based on the names of persons
    (the name of the developer or of persons honored by the naming), for example Ada
    (after the programming pioneer Augusta Ada Byron), Eiffel (after the French engineer
    and builder of the Eiffel Tower), Gödel (after the Austrian mathematician), or
    Wolfram Language (after the British mathematician and computer scientist Stephen
    Wolfram). The names of some other languages are abbreviations, as in the case
    of SQL (Structured Query Language), VBA (Visual Basic for Applications), FORTRAN
    (Formula Translation), COBOL (Common Business Oriented Language) or Prolog (“programmation
    en logique”), while still others are purely fanciful names, such as Delphi or
    Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many (especially professional) programmers today are somewhat language-agnostic:
    they simply use the language that is best suited for their current project. In
    doing so, they look at the problem to be solved and then decide what they want
    to work with. They will not know all languages, of course, but they do know a
    certain range from which they can then choose. And this range of languages is
    usually much wider than that of professional translators. This works because programmers
    have internalized the basic concepts of programming and can therefore pick up
    new language easily. That’s what we hope to learn with this book. But before that,
    in the next chapter, we’ll look at how to choose a suitable language.'
  prefs: []
  type: TYPE_NORMAL
