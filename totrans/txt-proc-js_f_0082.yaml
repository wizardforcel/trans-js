- en: '| Recipe 70 | Matching Nearby Words |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: '| 配方70 | 匹配邻近单词 |'
- en: Task
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务
- en: Suppose you want to search for the term “client-side” in a tutorial database
    because you’ve been asked to assess whether client-side issues are sufficiently
    covered for new hires. If you write a regex that matches only the exact word,
    it would be unable to retrieve results for instances that contain the words “client”
    and “side” without being adjacent to each other. For example, tutorials with phrases
    such as “client- and server-side” or “client and server side” would not be included
    in the search results.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想在教程数据库中搜索术语“client-side”，因为你被要求评估新员工是否已充分掌握客户端相关问题。如果你编写的正则表达式仅匹配确切的单词，它将无法检索那些包含“client”和“side”这两个词，但它们之间并不相邻的实例。例如，包含“client-
    和 server-side”或“client 和 server side”等短语的教程将不会包含在搜索结果中。
- en: But if you specify a proximity search for the words, where they appear within
    a certain number of characters of each other, it will help you to find more relevant
    results. So, what you need is to create a pattern that can locate words, as long
    as they appear within a specific distance of each other.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你指定一个邻近搜索，要求单词出现在彼此相距一定字符数以内，这将帮助你找到更相关的结果。所以，你需要创建一个模式来定位这些单词，只要它们出现在彼此特定距离以内。
- en: Solution
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'To find words near each other, use the following function:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找彼此靠近的单词，可以使用以下函数：
- en: '[part_3/proximity_search/proximity_search_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_3/proximity_search/proximity_search_ex1.js)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_3/proximity_search/proximity_search_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_3/proximity_search/proximity_search_ex1.js)'
- en: '|   | **function** findNearbyWords(text, word1, word2, maxDistance) { |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '|   | **function** findNearbyWords(text, word1, word2, maxDistance) { |'
- en: '|   | **const** regex = **new** RegExp(*`*${word1}*.{0,*${maxDistance}*}*${word2}*`*,
    *"gi"*); |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** regex = **new** RegExp(*`*${word1}*.{0,*${maxDistance}*}*${word2}*`*,
    *"gi"*); |'
- en: '|   | **const** matches = text.match(regex); |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** matches = text.match(regex); |'
- en: '|   | **return** matches; |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '|   | **return** matches; |'
- en: '|   | } |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '|   | } |'
- en: '|   |  |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | **const** text = *"Both client- and server-side scripts must validate
    form data."*; |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** text = *"客户端和服务器端脚本必须验证表单数据。"*; |'
- en: '|   | **const** word1 = *"client"*; |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** word1 = *"client"*; |'
- en: '|   | **const** word2 = *"side"*; |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** word2 = *"side"*; |'
- en: '|   | **const** maxDistance = 20; |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** maxDistance = 20; |'
- en: '|   |  |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | findNearbyWords(text, word1, word2, maxDistance); |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '|   | findNearbyWords(text, word1, word2, maxDistance); |'
- en: '|   | *// → ["client- and server-side"]* |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '|   | *// → ["client- 和 server-side"]* |'
- en: This function performs a proximity search for “client” and “side” within 20
    characters of each other and retrieves the part of the string that contains them.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数执行一个邻近搜索，用于查找“client”和“side”这两个词，在彼此相距不超过20个字符的情况下，并检索包含它们的字符串部分。
- en: Discussion
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论
- en: 'We construct the pattern by using a template literal that contains the word1
    and word2 variables, as well as the maxDistance variable as a quantifier {0,${maxDistance}}
    to match between word1 and word2. Note that ${word1}, ${maxDistance}, and ${word2}
    are JavaScript placeholders for performing substitutions, and they are entirely
    distinct from the regex syntax. Let’s take a closer look:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过使用模板字面量构造模式，该字面量包含 word1 和 word2 变量，以及作为量词 {0,${maxDistance}} 的 maxDistance
    变量，用于匹配 word1 和 word2 之间的内容。请注意，${word1}、${maxDistance} 和 ${word2} 是用于执行替换的 JavaScript
    占位符，它们与正则表达式语法完全不同。让我们更深入地了解一下：
- en: '|   | ${word1}.{0,${maxDistance}}${word2} |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '|   | ${word1}.{0,${maxDistance}}${word2} |'
- en: '|   |  |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | ● ${word1} gets replaced with "client" |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '|   | ● ${word1} 被替换为 "client" |'
- en: '|   | ● . matches any character that is not a line break character |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '|   | ● . 匹配任何不是换行符的字符 |'
- en: '|   | ○ {0,${maxDistance}} gets replaced with {0,20}, so it matches the previous
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ {0,${maxDistance}} 被替换为 {0,20}，因此匹配之前的内容 |'
- en: '|   | token between 0 to 20 times |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '|   | token 出现 0 到 20 次 |'
- en: '|   | ● ${word2} gets replaced with "side" |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '|   | ● ${word2} 被替换为 "side" |'
- en: Additionally, we add the g and i flags to the regex to make it global and case-insensitive.
    Then, we call the match() method on the text with the regex object as an argument.
    The output will be an array of matches that contain word1 and word2 within maxDistance
    characters of each other.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们向正则表达式添加了 g 和 i 标志，使其成为全局和大小写不敏感的。然后，我们在文本上调用 match() 方法，并将正则表达式对象作为参数。输出将是一个包含
    word1 和 word2 在最大距离字符范围内的匹配项数组。
- en: Proximity search techniques can be especially useful when searching for complex
    or technical information. By specifying that we want to see results where certain
    words or phrases appear near each other, we can find the text we’re looking for
    more accurately.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接近性搜索技术在搜索复杂或技术性信息时特别有用。通过指定我们希望看到某些单词或短语出现在彼此附近的结果，我们可以更准确地找到我们要找的文本。
