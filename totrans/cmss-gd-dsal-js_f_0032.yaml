- en: '`Big O`: 与`N`个元素相关的步骤数？'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: '`Big O`通过关注算法所需步骤的数量，但以特定方式实现一致性。让我们开始将`Big O`应用于线性搜索的算法。'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在最坏情况下，线性搜索将需要与数组中的元素数量一样多的步骤。正如我们之前所说的：对于数组中的`N`个元素，线性搜索最多可以需要`N`步。用`Big O`符号恰当地表达这一点是：
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`O(N)`'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 有人读作“Big Oh of N”。其他人称其为“Order of N”。不过，我个人更喜欢称其为“哦的N”。
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这里的符号表示的意义是它表达了我们称之为关键问题的答案。关键问题是这样的：如果有`N`个数据元素，算法将需要多少步？请再读一遍这句话。然后，把它铭记于心，因为这就是我们在本书中将使用的`Big
    O`符号的定义。
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 关键问题的答案在我们`Big O`表达式的括号内。`O(N)`表示关键问题的答案是算法将需要`N`步。
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 让我们快速回顾一下用`Big O`符号表达时间复杂度的思路，再次使用线性搜索的例子。首先，我们问关键问题：如果数组中有`N`个数据元素，线性搜索将需要多少步？因为这个问题的答案是线性搜索将需要`N`步，我们将其表示为`O(N)`。顺便说一下，`O(N)`的算法也被称为线性时间。
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 让我们对比一下`Big O`如何表达从标准数组读取的效率。正如你在第1章[*Why Data Structures Matter*](f_0013.xhtml#chp.understanding_data_structures)中学到的，从数组读取只需一步，无论数组多大。为了找出如何用`Big
    O`术语表达这一点，我们再次问关键问题：如果有`N`个数据元素，从数组中读取需要多少步？答案是读取只需一步。因此我们将其表示为`O(1)`，我读作“哦的一”。
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`O(1)`是有趣的，因为尽管我们关键的问题围绕着`N`（“如果有`N`个数据元素，算法会执行多少步？”），答案与`N`无关。这实际上就是重点：无论数组有多少元素，从数组中读取总是只需一步。'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这就是为什么`O(1)`被认为是“最快”的算法类型。即使数据增加，`O(1)`算法也不需要额外的步骤。无论`N`是多少，算法始终只需固定的步数。实际上，`O(1)`算法也可以被称为恒定时间。
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 那么，数学在哪里？
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'As I mentioned earlier in this book, I’m taking an easy-to-understand approach
    to the topic of `Big O`. That’s not the only way to do it; if you were to take
    a traditional college course on algorithms, you’d probably be introduced to `Big
    O` from a mathematical perspective. `Big O` is originally a concept from mathematics,
    and therefore, it’s often described in mathematical terms. For example, one way
    of describing `Big O` is that it describes the upper bound of the growth rate
    of a function, or that if a function `g(x)` grows no faster than a function `f(x)`,
    then `g` is said to be a member of `O(f)`. Depending on your mathematics background,
    that either makes sense or doesn’t help very much. I’ve written this book so that
    you don’t need as much math to understand the concept. If you want to dig further
    into the math behind `Big O`, check out `Introduction to Algorithms` by `Thomas
    H. Cormen`, `Charles E. Leiserson`, `Ronald L. Rivest`, and `Clifford Stein` (`MIT
    Press, 2009`) for a full mathematical explanation. `Justin Abrahms` also provides
    a pretty good definition in his article: [`https://justin.abrah.ms/computer-science/understanding-big-o-formal-definition.html`](https://justin.abrah.ms/computer-science/understanding-big-o-formal-definition.html).'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
