- en: '-   Hash Tables for Organization'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: '-   Because hash tables keep data in pairs, they’re useful in many scenarios
    for organizing data.'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '-   Some data exists naturally in paired form. The fast-food menu and thesaurus
    scenarios from this chapter are classic examples. The menu contains each food
    item paired with its price. The thesaurus contains each word paired with its synonym.
    In fact, this is why JavaScript refers to hash tables as dictionaries. A dictionary
    is a common form of paired data; it’s a list of words with their respective definitions.'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '-   Other examples of naturally paired data can include tallies, such as political
    candidates and the number of votes each received:'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `{​"Candidate A"​: 1402021, ​"Candidate B"​: 2321443, ​"Candidate C"​:
    432}` |'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '-   An inventory tracking system, which keeps track of how much of each item
    is in supply, is another tally example:'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `{​"Yellow Shirt"​: 1203, ​"Blue Jeans"​: 598, ​"Green Felt Hat"​: 65}`
    |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '-   Hash tables are such a natural fit for paired data that we can even use
    them to simplify conditional logic in certain instances.'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '-   Say we encounter a function that returns the meaning of common HTTP status
    code numbers:'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function` statusCodeMeaning(number) { |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (number === 200) { |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` ​*''OK''*​; |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } `else` `if` (number === 301) { |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` ​*''Moved Permanently''*​; |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } `else` `if` (number === 401) { |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` ​*''Unauthorized''*​; |'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } `else` `if` (number === 404) { |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` ​*''Not Found''*​; |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } `else` `if` (number === 500) { |'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` ​*''Internal Server Error''*​; |'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '-   If we think about this code, we’ll realize that the conditional logic revolves
    around paired data, namely, the status code numbers and their respective meanings.'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '-   By using a hash table, we can completely eliminate the conditional logic:'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `const` statusCodes = { |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | 200: ​*''OK''*​, |'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | 301: ​*''Moved Permanently''*​, |'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | 401: ​*''Unauthorized''*​, |'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | 404: ​*''Not Found''*​, |'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | 500: ​*''Internal Server Error''*​, |'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | }; |'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `function` statusCodeMeaning(number) { |'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` statusCodes[number]; |'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '-   Another common use for hash tables is to represent objects that have various
    attributes. For example, here’s a representation of a dog:'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `{​"name"​: ​"Fido"​, ​"breed"​: ​"Pug"​, ​"age"​: 3, ​"gender"​: ​"Male"​}`
    |'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '-   As you can see, attributes are a kind of paired data, since the attribute
    name becomes the key, and the actual attribute becomes the value.'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '-   We can create an entire list of dogs if we place multiple hash tables inside
    an array:'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | [ |'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `{​"name"​: ​"Fido"​, ​"breed"​: ​"Pug"​, ​"age"​: 3, ​"gender"​: ​"Male"​},
    |'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `{​"name"​: ​"Lady"​, ​"breed"​: ​"Poodle"​, ​"age"​: 6, ​"gender"​:
    ​"Female"​}, |'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `{"name": "Spot", "breed": "Dalmatian", "age": 2, "gender": "Male"}`
    |'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ] |'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_TB
