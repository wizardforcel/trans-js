- en: Average Celsius Reading
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: Here’s another example that involves mean averages. Let’s say we’re building
    weather-forecasting software. To determine the temperature of a city, we take
    temperature readings from many thermometers across the city, and we calculate
    the mean average of those temperatures.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: We’d also like to display the temperatures in both Fahrenheit and Celsius, but
    our readings are initially only provided to us in Fahrenheit.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'To get the average Celsius temperature, our algorithm does two things: first,
    it converts all the readings from Fahrenheit to Celsius. Then it calculates the
    mean average of all the Celsius numbers.'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Below is some code that accomplishes this. What is its Big O?
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function` averageCelsius(fahrenheitReadings) { |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (fahrenheitReadings.length === 0) { `return` `null`; } |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `const` celsiusNumbers = []; |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `// Convert each reading to Celsius and append to array:` |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `for` (`const` fahrenheitReading `of` fahrenheitReadings) { |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `const` celsiusConversion = (fahrenheitReading - 32) / 1.8; |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `celsiusNumbers.push(celsiusConversion);` |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `// Calculate average:` |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `let` sum = 0; |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `for` (`const` celsiusNumber `of` celsiusNumbers) { |'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `sum += celsiusNumber;` |'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` Math.floor(sum / celsiusNumbers.length); |'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
- en: First, we can say that N is the number of fahrenheitReadings passed into our
    method.
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Inside the method, we run two loops. The first converts the readings to Celsius,
    and the second sums all the Celsius numbers. Since we have two loops that each
    iterate over all N elements, we have N + N, which is 2N (plus a few constant steps).
    Because Big O notation drops the constants, this gets reduced to O(N).
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Don’t get thrown off by the fact that in the earlier word builder example, two
    loops led to an efficiency of O(N²). There, the loops were nested, which led to
    N steps multiplied by N steps. In our case, however, we simply have two loops,
    one after the other. This is N steps plus N steps (2N), which is a mere O(N).
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
