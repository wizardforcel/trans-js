- en: The Importance of Constrained Data Structures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By definition, if a stack is just a constrained version of an array, that means
    an array can do anything a stack can do. If so, what advantage does a stack provide?
  prefs: []
  type: TYPE_NORMAL
- en: Constrained data structures like the stack (and the queue, which we’ll encounter
    shortly) are important for several reasons.
  prefs: []
  type: TYPE_NORMAL
- en: First, when we work with a constrained data structure, we can prevent potential
    bugs. The linting algorithm, for example, only works if we exclusively remove
    items from the top of the stack. If a programmer inadvertently writes code that
    removes items from the middle of the array, the algorithm will break down. By
    using a stack, we’re forced into only removing items from the top, as it’s impossible
    to get the stack to remove any other item.
  prefs: []
  type: TYPE_NORMAL
- en: Second, data structures like stacks give us a new mental model for tackling
    problems. The stack, for example, gives us the whole idea of a last-in, first-out
    process. We can then apply this LIFO mindset to solve all sorts of problems, such
    as the linter just described.
  prefs: []
  type: TYPE_NORMAL
- en: And once we’re familiar with the stack and its LIFO nature, the code we write
    using the stack becomes familiar and elegant to other developers who read our
    code. As soon as someone sees a stack being used within an algorithm, they immediately
    know that the algorithm is working with a LIFO-based process.
  prefs: []
  type: TYPE_NORMAL
- en: Stack Wrap-Up
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Stacks are ideal for processing any data that should be handled last in, first
    out. The undo function in a word processor, for example, is a great use case for
    a stack. As the user types, we keep track of each keystroke by pushing the keystroke
    onto the stack. Then, when the user hits the undo key, we pop the most recent
    keystroke from the stack and eliminate it from the document. At this point, their
    next-to-most recent keystroke is now sitting at the top of the stack, ready to
    be undone if need be.
  prefs: []
  type: TYPE_NORMAL
