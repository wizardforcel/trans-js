- en: © The Author(s), under exclusive license to Springer Fachmedien Wiesbaden GmbH,
    part of Springer Nature 2024J. L. ZuckarelliLearn coding with Python and JavaScript
    [https://doi.org/10.1007/978-3-658-42912-6_25](https://doi.org/10.1007/978-3-658-42912-6_25)
  prefs: []
  type: TYPE_NORMAL
- en: '25. Loops: How Do I Repeat Program Instructions Efficiently?'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Joachim L. Zuckarelli^([1](#Aff2)  )(1)München, GermanyOverview
  prefs: []
  type: TYPE_NORMAL
- en: Next, we focus on the effective repetition of (almost) identical program instructions,
    a technique that allows for the elegant resolution of a lot of problems that would
    be hard so solve otherwise. Python employs both counting (for) and conditional
    (while) loops. A unique feature of Python is list comprehension expressions **derived
    from for loops**, enabling the concise comfortable of lists.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How to formulate (counting) **for-**loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: how to formulate (conditional) **while** loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: how to nest loops inside each other
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: what list comprehension expressions are, and how you can use them to create
    lists in an elegant way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: how to end loops or individual passes of loops early, and when this is useful
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 25.1 Counting Loops (for)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 25.1.1 Simple for-Loops
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Structure of for-Loops
  prefs: []
  type: TYPE_NORMAL
- en: Counting loops in Python are introduced with the keyword **for**; therefore,
    we will refer to them simply as **for**-loops in the following. With **for**-loops
    in Python, a run variable is not incremented with each loop pass, as is the case
    in many other languages, but an *object* is always *passed through* that has elements
    that can be addressed one after the other. Such an object is also called *iterable*
    in Python because you can “shimmy” from one element to the next step by step.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of such objects are lists or tuples. They all have elements that a
    counting loop can process one after the other. It is not important that the elements
    in the object are in a fixed order, as is the case with lists and tuples. The
    only thing that matters is that (except for the last one, of course) a *next*
    element can always be found. This is also the case, for example, with sets and
    dictionaries, in which the elements are not stored sequentially, or in an order
    that can be exploited by the programmer. Nevertheless, the elements of sets and
    dictionaries naturally do have an internal sequence (usually the sequence in which
    the elements were added to the set or dictionary) and thus a *next* element can
    always be determined for these objects as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the iterability of objects and the traversal of their elements seems rather
    abstract to you, don’t worry: In the following example, you can see how simple
    **for**-loops are constructed in Python. Here we have a loop that does nothing
    but output the numbers between 1 and 10 on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '**for** i **in** [1,2,3,4,5,6,7,8,9,10]:print(i)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Python, **for**-loops also have a run variable, in our example **i**. It
    is defined directly after the **for** keyword. The run variable takes the value
    of an element of the traversed object on each loop pass. In our example, the object
    being passed through is a list with the numbers 1 to 10\. In sequence, the run
    variable **i** is now loaded with the value of a list element; in the first loop
    pass with 1, in the second with 2, until the run variable finally takes on the
    value of the last list element, 10\. Our list is iterable, so Python always knows
    which element is next in line for the next loop pass. We can also work with the
    changing value of the run variable in the code block that is executed on each
    loop pass, and that’s exactly what we’re doing here in the example: the code block
    is indented following the *head* of the loop introduced with the **for** keyword
    and terminated with a colon. In our example, the code block consists of only one
    statement, the output of the run variable. If you execute the code of the example,
    you will get the numbers from 1 to 10 as output, as expected.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is not always practical to specify a list of numbers as explicitly as we
    did in our example, especially if the list is very long, or if its bounds are
    not yet known at the time the program is developed and result from variables in
    the program. In these cases, the function **range(*****start*****,** ***stop*****,**
    ***step*****=1)** is a useful tool. It generates a sequence of numbers between
    **start** and **stop** in the interval of **step**, where the latter is an optional
    argument and is assumed to be 1 if it is not explicitly specified when calling
    the range. Note: The value **stop** itself is not part of the generated sequence
    of numbers. You may recognize here the analogy to indexing with an index range;
    in ► Sect. [21.​6.​1.​2](474412_1_En_21_Chapter.xhtml#Sec16) we discussed this
    kind of indexing using the colon operator. You can easily visualize this by typing
    **list(range(1,10))** in the Python console. You get a sequence of integers from
    1 to 9\. The return object of **range()** is an object of class **range** and
    must first be converted to a list for output, because the **__str__()** method
    (see ► Sect. [21.​1](474412_1_En_21_Chapter.xhtml#Sec1) for details on **__str__()**)
    of the **range** class does not display the sequence of numbers itself—try it!.
    However, this object can be iterated.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This would simplify our example above to:'
  prefs: []
  type: TYPE_NORMAL
- en: '**for** i **in** range(1,11):print(i)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now consider the following example, where we adjust the value of our run variable
    during the loop:'
  prefs: []
  type: TYPE_NORMAL
- en: my_range = range(1,11)**for** i **in** my_range:i = 2print(my_range)
  prefs: []
  type: TYPE_NORMAL
- en: The output generated by the final **print()** statement shows that the object
    **my_range** has not changed, although we assign the value 2 to our run variable
    **i**, which represents a different element of **my_range** on each loop pass.
    However, this obviously has no effect. The reason is that the run variable in
    a **for**-loop always represents only a *copy of* the element that is currently
    in focus. Thus, by assigning **i=2**, we do not change the respective element
    of our **range** object at all, but only the run variable itself.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of for-Loops
  prefs: []
  type: TYPE_NORMAL
- en: Now, outputting a sequence of numbers is not necessarily a particularly useful
    application of **for**-loops. Therefore, in the next example, we look at a simple
    encryption algorithm, also known as *ROT13*. Each character of a string can be
    interpreted as a numeric code that uniquely identifies the character in the particular
    character set. For example, in the very common UTF-8 character set, the number
    code 65 represents the capital “A”, 66, the capital “B”, and so on. The lowercase
    letters follow from 97\. The ROT13 algorithm takes advantage of this convertibility
    of letters into numbers by simply incrementing each letter code by a specific
    number—13 in the original. Thus, “A” (code 65) becomes “N” (code 78), “B” (code
    66) becomes “O” (code 79), and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to develop a function **rot13(s: str, decode: bool, shift: int=13)**
    that takes the string argument **s**, and depending on the **bool** argument **decode**
    either encodes or decodes this string. This should use a character code shift
    of 13 by default, but it should also be possible to set a different shift using
    the argument of the same name.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, the question arises as to where exactly a **for**-loop comes into
    play here. But you probably already guessed: As you already know, the string **s**
    can of course be broken down into a list of characters; we can run through this
    list and thus process each individual character of the string in turn. To do this,
    we use the functions **ord(*****character*****)** and **chr(*****code*****)**,
    which return the numeric code for a given character and the character for a numeric
    code, respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The function **rot13()** could then look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**def** rot13(s: str, decode: bool, shift: int = 13) -> str:s = list(s)res
    = list()**for** c **in** s:**if** decode == **True**:res.append(chr(ord(c) - shift))**else**:res.append(chr(ord(c)
    + shift))**return** ''''.join(res)'
  prefs: []
  type: TYPE_NORMAL
- en: The **for**-loop runs through the string **s**, which we have previously converted
    into a list of individual characters. The run variable **c** therefore represents
    a different character of the string **s** in each loop pass.
  prefs: []
  type: TYPE_NORMAL
- en: With **append()** we gradually build a new list containing characters of the
    encoded or decoded string. Finally, we **join()** the characters of the list to
    a string, append it to an empty string (whose **join()** method we use for this)
    and return it as a return value.
  prefs: []
  type: TYPE_NORMAL
- en: We can now call the function with **print(rot13('HELLO WORLD', False))**, for
    example, which prints **URYY\-d\_YQ** to the console. With **print(rot13('URYY\-d\_YQ',
    True))** we can decode the encoded text again. If the end result is **'HELLO WORLD'**
    again, you know your function is working correctly!
  prefs: []
  type: TYPE_NORMAL
- en: To conclude this section, let’s look at another example. This time, we want
    to write a program that lets the user enter a directory and then lists the subdirectories
    and files it contains. To do this, we will use functions from the standard Python
    package **os**. This package provides ways to access operating system functionality
    and resources. This includes functions that allow you to work with the file system.
    The beauty of **os** here is that it is designed to be cross-platform; therefore,
    a program that uses **os** functions and works on your Windows computer will work
    just as well on a Mac or Linux computer. You do not have to worry about the specifics
    of these different operating systems. The **os** package provides a uniform, cross-platform
    programming interface for all of these systems that abstracts from the specifics
    of the systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code of our program could now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**from** os **import** listdir, sep**from** os.path **import** isdir, isfile,
    getsizedirectory = input(''Please enter a directory: '')**if** isdir(directory):**if**
    directory[directory.__len__() - 1] != sep:directory = directory + sepprint(''\nContents
    of:'', directory)content = listdir(directory)print(''\n----- Directories:'')**for**
    elem **in** content:**if** isdir(directory + elem):print(elem)print(''\n-----
    Files:'')**for** elem **in** content:**if** isfile(directory + elem):print(directory
    + elem, ''\tSize: '',getsize(directory + elem), sep = '''')'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can tell from the imports which elements of the **os** module we want to
    use. The **listdir(*****path*****)** function returns the contents of the specified
    directory as a list. The constant **sep** represents the separator used in path
    specifications on the respective system, i.e., the backslash (**\**) for Windows,
    the forward slash (**/**) for Linux. Finally, using the **isdir(*****path*****)**
    and **isfile(*****path*****)** functions from the **path** module, we can determine
    whether a given directory or file path leads to a valid directory or file. Both
    functions return a **bool** value. The last imported function, **getsize(*****filename*****)**,
    returns the size of the specified file in bytes. Please note: Whenever you specify
    a file, the full path must be included, otherwise the file will not be found.'
  prefs: []
  type: TYPE_NORMAL
- en: The code uses two **for**-loops that step through the directory contents determined
    by **listdir()**. The first loop processes only the directories, so that these
    are then at the top in the program output, the second only files, which then appear
    below the directory list in the output.
  prefs: []
  type: TYPE_NORMAL
- en: 25.1 [10 min]
  prefs: []
  type: TYPE_NORMAL
- en: Write a function that removes all vowels from a string.
  prefs: []
  type: TYPE_NORMAL
- en: 25.2 [10 min]
  prefs: []
  type: TYPE_NORMAL
- en: Write a function that completely reverses a string, converting it to uppercase.
  prefs: []
  type: TYPE_NORMAL
- en: 25.1.2 Nested for-Loops
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**for**-loops can also be nested within each other. Consider the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: letters = ['A','B','C','D','E','F','G']numbers = [1,2,3,4,5,6,7,8,8,10]**for**
    b **in** letters:**for** z **in** numbers:print(b + str(z), ' ', end = '')print('\n')
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we see two **for**-loops: an *outer* loop that runs through the list of
    letters from A to G and an *inner* loop that takes care of the numbers from 1
    to 10\. The inner loop is indented in the code block of the outer loop. With each
    run of the outer loop, the inner **for** construct is run through completely,
    i.e. the numbers from 1 to 10 are processed. After that, the outer loop goes into
    its next pass, that is, into processing the next letter. What do you think this
    little program will output?'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what we see when we run the program:'
  prefs: []
  type: TYPE_NORMAL
- en: A1 A2 A3 A4 A5 A6 A7 A8 A10B1 B2 B3 B4 B5 B6 B7 B8 B10C1 C2 C3 C4 C5 C6 C7 C8
    C10D1 D2 D3 D4 D5 D6 D7 D8 D10E1 E2 E3 E4 E5 E6 E7 E8 E10F1 F2 F3 F4 F5 F6 F7
    F8 F10G1 G2 G3 G4 G5 G6 G7 G8 G10
  prefs: []
  type: TYPE_NORMAL
- en: Thus, for the letter currently being passed through in the outer loop, **b from**
    in the list **letters**, the program writes the combination of this letter and
    *all* numbers from 1 to 10 passed through in the inner loop, one after the other;
    note the argument assignment **end = ''** in the function **print()**, which causes
    *no* line break to occur after each output. Only after the inner loop has been
    completely traversed is a newline (**\n**) output and the outer loop goes into
    the next pass. Note, that the **print('\n')** is on the indentation level of the
    outer, not the inner loop. So, the outer loop code block consists of the complete
    inner **for**-loop and the **print()** statement that creates the newline.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, not only two but even more **for**-loops can be nested in this way.
    However, you have to be careful with the runtime of the program, because each
    additional **for**-loop basically multiplies the number of loop passes by its
    own pass count.
  prefs: []
  type: TYPE_NORMAL
- en: 25.1.3 List Comprehension Expressions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A special feature in Python are *list comprehension expressions*. What may sound
    scary at first is nothing more than a **for**-loop that generates a list. For
    such **for**-loops there is a compact, elegant notation, the list comprehension
    expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the last section, we used the **listdir()** function from the **os** module
    to determine the contents of a directory as a list and then used the **isfile()**
    function in a **for**-loop to check each element to see whether it was a file
    (and not a directory). Only if it was indeed a file did we output the item to
    the screen. We did the same with directories in another **for**-loop. This way
    we could cleanly separate directories and files in the output. It would have been
    easier to create two lists from the beginning, one with the files, one with the
    directories, and then display them with two simple **for**-loop**s**. This is
    a task that is tailor-made for the use of list comprehension expressions. Consider
    the following formulation:'
  prefs: []
  type: TYPE_NORMAL
- en: content = listdir(directory)files = [f **for** f **in** content **if** isfile(directory
    + f)]directories = [f **for** f **in** content **if** isdir(directory + f)]
  prefs: []
  type: TYPE_NORMAL
- en: First, we get the contents of our selected directory with **listdir()**. Then
    we use two list comprehension expressions to filter out the files and directories
    from the list **content**. The list comprehension expression returns something,
    namely the elements that should be in the result list. What is returned is initially
    enclosed in the square brackets that signal the construction of a list; in our
    example, this is **f**. Now follows a **for**-loop, namely **for f in content**.
    This loops through each element of the list **content**. However, only those elements
    are returned that satisfy the condition defined by **if**, i.e., in our first
    example, all those elements for which the function **isfile()** returns the value
    **True**. The list comprehension expression thus goes through all elements of
    **content**, the list with the directory contents, and returns those that are
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **if** condition is optional. For example, if we wanted to get a list of
    all items in the directory, but in upper case, we could omit the condition, but
    we would still modify the result before returning it by calling the **upper()**
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: content_capitalized = [f.upper() **for** f **in** content]
  prefs: []
  type: TYPE_NORMAL
- en: This example also shows that the expression that is “fed” with new elements
    by the **for**-loop of the list comprehension expression can also be a more complex
    expression than simply the object itself returned by the **for**-loop; in this
    case, a method is called for this object.
  prefs: []
  type: TYPE_NORMAL
- en: Another example is the following, where we square the value of the variable
    returned by the **for**-loop if the variable itself is evenly divisible by two,
    that is, an even number. To do this, we use the modulo operator **%**, which returns
    the remainder of a division.
  prefs: []
  type: TYPE_NORMAL
- en: squares = [x*x **for** x **in** range(1,11) **if** x % 2 == 0]
  prefs: []
  type: TYPE_NORMAL
- en: Here, the expression that is fed with values by the **for**-loop is just **x*x**.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, list comprehension expressions generally have the following form (where,
    we have already seen, the condition is optional):'
  prefs: []
  type: TYPE_NORMAL
- en: list = [*expression* **for** *variable* **in** *iterable_object* **if** *condition*]25.3
    [5 min]
  prefs: []
  type: TYPE_NORMAL
- en: 'Write a list comprehension expression that summarizes the uppercase letters
    from A to Z as a list. Tip: Work with functions the **ord(*****characters*****)**
    and **chr(*****code*****)** that we also used in ► Sect. [25.1.1](#Sec2).'
  prefs: []
  type: TYPE_NORMAL
- en: What would an equivalent **for**-loop look like that produces the letter list
    without a list comprehension expression?
  prefs: []
  type: TYPE_NORMAL
- en: 25.2 Conditional Loops (while)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python allows a conditional loop construction with the **while** loop, i.e.,
    a loop that runs as long as a run condition is fulfilled. Python’s **while** loop
    is *head-controlled*, which means that the condition is checked *before* each
    run. If the condition is not fulfilled even before the first potential run, the
    loop is not run at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'A **while** loop can of course be used to simulate the same behavior as a **for**-loop.
    In the following example, a **while** loop outputs the numbers 1 to 10 on the
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: i = 1**while** i <= 10:print(i)i = i + 1
  prefs: []
  type: TYPE_NORMAL
- en: We initialize a variable **i**, which we use as a run variable, with the value
    1\. Before each run, the loop checks whether the condition that **i** is less
    than or equal to 10 is still met. If it is, the block of code that begins after
    the colon, indented as usual, is run. The loop then jumps back to the loop head,
    where the run condition is checked again.
  prefs: []
  type: TYPE_NORMAL
- en: The most common mistake in such a construction is to forget to also increment
    the run variable (as happened to the author in his first attempt), because unlike
    the **for**-loop, the **while** loop does not perform this task itself. The **while**
    loop stubbornly continues to run as long as the run condition is met. We have
    to take care of the rest ourselves. If the run condition is *always* fulfilled,
    we have created an infinite loop, which is usually undesirable.
  prefs: []
  type: TYPE_NORMAL
- en: The **while** loop shows its true strength, however, when—unlike in the example
    above—the number of loop passes cannot be determined in advance. For example,
    because the passing through the loop depends on an event that results from an
    interaction with the user. Consider the following example. It lists all files
    contained in a directory selected by the user and allows him to open or start
    one of these files. We accomplish the latter with the **startfile(*****file*****)**
    function from the **os** module, which we have already used in the previous sections.
    In our simple application, the user can specify the file to be opened/started
    by a number with which the file is listed. We also offer the user the possibility
    to change the directory or to quit the program completely. The core of the program
    consists of a **while** loop, in which we ask the user again and again for his
    action wishes (variable **choice**), and which enters via a letter (**'d'** for
    read directory, **'s'** for open/start file, **'q'** for quit). The condition
    of the **while** loop is that the user’s choice is different from **'q'**. As
    long as this is the case, the program continues to run, if this is no longer the
    case, the program ends.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the complete program code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**from** os **import** listdir, startfile**from** os.path **import** isfile,
    isdirchoice = ''''dir_exists = **False****while** choice != ''q'':choice = input(''Read
    directory (d), start file (s),'' \''quit (q)? '')**if** choice != ''q'':**if**
    choice == ''d'':directory = input(''Please enter a directory: '')**if** isdir(directory):dir_exists
    = **True**files = [f **for** f **in** listdir(directory) **if** isfile(f) == **True**]number
    = 0**for** f **in** files:**if** isfile(directory + f):number = number + 1print(number,
    '': '', f, sep = '''')**else**:print(''"'', directory, ''" is not a valid directory!","Please
    try again.'', sep = '''')dir_exists = **False****elif** choice == ''s'':**if**
    dir_exists == **True**:number = int(input(''Please enter file number: ''))**if**
    number >= 1 **and** number <= files.__len__():startfile(directory + files[number
    - 1])**else**:print(''No directory loaded!'')**else**:print(''Input '', choice,
    '' is not permitted! Please try again.'',sep = '''')'
  prefs: []
  type: TYPE_NORMAL
- en: When you run the program, please note that the directory specification must
    always end with a path separator, i.e. the backslash (**\**) on Windows systems
    or the forward slash (**/**) on Mac and Linux systems, otherwise the file path
    assembled in the program will be invalid.
  prefs: []
  type: TYPE_NORMAL
- en: Within the **while** loop, the query of the action desired by the user takes
    place first. If this choice is different from **'q'**, the actions **'s'** (start)
    and **'d'** (read directory) are checked and processed. Otherwise, if the user
    has entered **'x'**, nothing happens inside the **while** loop, so the loop jumps
    back to checking the run condition in the loop head and determines that the run
    condition **choice != 'q'** is no longer met. Therefore, the program processing
    continues after the code block of the **while** loop. In our example, this terminates
    the program.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from this program example, with **while** loops we can ultimately
    create event control by waiting for user input, processing it when it comes, and
    then waiting again for the next user input, until the user wants to exit the program.
    The **main**loop**()** function in the **tkinter** programs from ► Sect. [22.​2](474412_1_En_22_Chapter.xhtml#Sec2)
    ultimately does nothing else. Event control is therefore not witchcraft but can
    be implemented with classic control structures such as **while** and **if**.
  prefs: []
  type: TYPE_NORMAL
- en: 25.4 [20 min]
  prefs: []
  type: TYPE_NORMAL
- en: Write a program that uses the **convert_temperature()** function from ► Sect.
    [24.​1.​2](474412_1_En_24_Chapter.xhtml#Sec3) to convert temperatures between
    Kelvin and degrees Celsius (and vice versa). The user of the program should be
    offered a “menu” of actions **'k'** (conversion from degrees Celsius to Kelvin),
    **'c'** (conversion from Kelvin to degrees Celsius) and **'q'** (exit program)
    until they enter **'q'** to exit the program.
  prefs: []
  type: TYPE_NORMAL
- en: 25.3 Exiting Loops Prematurely and Restarting Them
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ending Loops by Statement
  prefs: []
  type: TYPE_NORMAL
- en: With the statements **break** and **continue**, Python offers possibilities
    to control the flow of **for** and **while** loops even more precisely. Calling
    the **break** statement causes the loop to terminate and program execution and
    to continue *after* the loop code block.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '**while True:**x = input(''Your input: '')**if** x == ''x'':**break**print(''Your
    input was: '', x)print(''Loop completed.'')'
  prefs: []
  type: TYPE_NORMAL
- en: This **while** loop has a condition (**True**), which by definition is always
    met. Principally, it would run forever. However, we put in a condition that makes
    sure it only runs until the user enters **'x'**. When that happens, the loop is
    terminated with the **break** statement in place. The call to **print()**, which
    is inside the loop code block but after the **break** is no longer executed.
  prefs: []
  type: TYPE_NORMAL
- en: The following function uses **break** to exit a **for**-loop early. This can
    be useful, for example, when determining whether something exists. Once an instance
    of what is being searched for has been found, further loop passes no longer make
    sense, since they can no longer change the result of the search. In this situation,
    it is smart to exit the loop to save computation time and speed up program execution.
  prefs: []
  type: TYPE_NORMAL
- en: The following example shows a function that checks the files in a directory
    to see if there is an Excel file with a size of more than 1 MB (= 1,000,000 bytes).
  prefs: []
  type: TYPE_NORMAL
- en: '**from** os **import** listdir**from** os.path **import** isfile, getsize**def**
    big_excel(directory: str) -> bool:files = [f **for** f **in** listdir(directory)
    **if** isfile(directory + f)**and** (f[-5:].lower()== ''.xlsx''**or** f[-4:].lower()
    == ''.xls'')]res = **False****for** f **in** files:**if** getsize(directory +
    f) > 1000000:res = **True****break****return** res'
  prefs: []
  type: TYPE_NORMAL
- en: To do this, a list of Excel files in the directory to be searched, which is
    passed to the function as the **directory** argument, is first generated, using
    a list comprehension expression. This checks which file names have an extension
    that indicates Excel files (for the sake of simplicity, we will only search for
    **.xls** and **.xlsx** files here and ignore other possible file name extensions
    of Excel files). The list comprehension expression thus checks the condition that
    the respective directory content item is a file and that its name ends in **.xls**
    or **.xlsx**.
  prefs: []
  type: TYPE_NORMAL
- en: Then a **for**-loop goes through the list generated by the list comprehension
    expression and checks with the **getsize(file)** function whether any of these
    files is larger than 1 MB. Once such a file is found, the loop is exited with
    **break**. Before that, the return value **res** of the function is switched from
    its default value **False**, to which it was initialized before the start of the
    loop, to **True**. After the loop, the **return** statement is executed, which
    returns this value to the caller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, the condition that the file size must exceed 1 MB could have been
    included in the list comprehension expression and then the **for**-loop could
    have been omitted altogether (How? Try it out!) But the example shows how you
    can make a search loop efficient by terminating it as soon as the thing you are
    looking for has been found. The same effect could have been achieved with a **while**
    loop, which would have to look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: i = 0res = **False****while** i <= files.length() **and** res == **False**:**if**
    getsize(directory + files[i]) > 1000000:res = **True**i = i + 1
  prefs: []
  type: TYPE_NORMAL
- en: The formulation with the **for**-loop seems a bit more intuitive (and avoids
    the risk of forgetting to increment the run variable **i**).
  prefs: []
  type: TYPE_NORMAL
- en: Continue Loops per Instruction with the Next Run
  prefs: []
  type: TYPE_NORMAL
- en: 'While **break** completely exits the loop within which it is called, the **continue**
    statement causes the loop execution to simply continue with the next loop pass.
    This can be seen in the following example, where we loop through the numbers from
    1 to 10 in a **for**-loop, but “pinch off” the **print()** statement located in
    the loop code block for all even numbers by sending the loop into its next pass
    beforehand with **continue**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**for** i **in** range(1,10):**if** i % 2 == 0:**continue**print(i)'
  prefs: []
  type: TYPE_NORMAL
- en: Here we use the *modulo operator* **%**, which returns the division remainder;
    if this is 0, it is an even number and the loop continues with the next pass,
    the call to **print()** at the end of the loop code block is then not reached
    at all. It is only reached for odd numbers, so that only these are output to the
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: 25.4 Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we have looked at **for** and **while** loops, as well as list
    comprehension expressions based on the **for**-loops**.** We also saw how loops
    or the current loop pass can be exited early.
  prefs: []
  type: TYPE_NORMAL
- en: 'Be sure to take the following points from this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Python knows the **for** construct as a counting loop that iterates through
    the elements of an iterable object; an object is iterable if Python can “shimmy”
    from one element/component of the object to the next (as is the case with lists,
    tuples, sets, or dictionaries, for example).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The basic structure of the **for**-loop is: **for** ***variable*** **in** ***iterable_object*****:**
    ***code_block***; the **variable** represents a different element that is part
    of ***iterable_object*** on each loop pass.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes to the run variable do *not* change the element of the traversed iterable
    object that it represents.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**for**-loops can be nested arbitrarily.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A special kind of **for**-loop is the list comprehension expression. It produces
    a list with a very compact syntax; the general form is: **list = [*****expression***
    **for variable in** ***iterable_object*** **if** ***condition*****]**, so for
    example the list of squared even numbers from 1 to 10: **squared = [x*x for x
    in range(1,11) if x % 2 == 0]**, where **%** is the modulo operator that returns
    the remainder of a division.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Conditional loops are constructed with **while**; their general form is: **while**
    ***condition*****:** ***code_block***.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both **for** and **while** loops can be exited early with the **break** statement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **continue** statement terminates the current loop pass and continues the
    loop with the next pass.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 25.5 Solutions to the Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Exercise 25.1
  prefs: []
  type: TYPE_NORMAL
- en: 'A function that removes all vowels from a string might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**def** remove_vowels(s: str) -> str:res = list()s = list(s)**for** i **in**
    range(0,s.__len__(),1):**if** s[i] **not in** (''a'',''e'',''i'',''o'',''u''):res.append(s[i])**return**
    ''''.join(res)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Test whether the function has the desired effect:'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(remove_vowels(''Hello world!''))Exercise 25.2To reverse the characters
    in the string, the string, which has been converted into a list of individual
    characters, is run through *from back to front* in a **for**-loop. The increment,
    the third argument of the **range()** function, is therefore −1\. Because **range()**
    runs to *before* the specified boundary, the second range boundary must also be
    −1 so that the last index value returned is 0, thus allowing access to the first
    character of **s**.**def** invert_capitalization(s: str) -> str:s = list(s)res
    = list()**for** i **in** range(s.__len__() - 1, -1, -1):res.append(s[i].capitalize())**return**
    str(''''.join(res))'
  prefs: []
  type: TYPE_NORMAL
- en: 'The function could then, for example, be called like this:'
  prefs: []
  type: TYPE_NORMAL
- en: print(invert_ capitalization('Hello world!'))Exercise 25.3
  prefs: []
  type: TYPE_NORMAL
- en: 'A list comprehension expression that summarizes the letters from **A** to **Z**
    as a list might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: capital_letters = [chr(b) **for** b **in** range(ord('A'), ord('Z')+1)]
  prefs: []
  type: TYPE_NORMAL
- en: 'So we run through the character codes with the variable **b** starting with
    the code of the letter A, up to the code of the letter Z (Note: **range()** returns
    a range of values which no longer contains the specified right/upper limit, therefore
    **+1**). We then convert these codes back into letters using the **chr()** function.'
  prefs: []
  type: TYPE_NORMAL
- en: 'An equivalent **for**-loop would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: capital_letters = list()**for** b **in** range(ord('A'), ord('Z')+1):capital_letters.append(chr(b))Exercise
    25.4
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the program might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'choice = ''''**while** choice != ''q'':choice = input(''Conversion Celsius
    to Kelvin (k), Kelvin to Celsius (c), quit (q)? '')**if** choice == ''k'':temp
    = input(''Please enter a temperature in degrees Celsius: '')orig_unit = ''Grad
    Celsius''target_unit = ''Kelvin''to_celsius = False**elif** choice == ''c'':temp
    = input(''Please enter a temperature in Kelvin: '')orig_unit = ''Kelvin''target_unit
    = ''degrees Celsius''to_celsius = True**elif** choice == ''q'':**pass****else**:print(''"'',
    choice, ''" is not a valid input. Please try again.'', sep = '''')**if** choice
    == ''k'' **or** choice == ''c'':res = convert_temperature(float(temp), to_celsius)**if**
    res != -1000:print(temp, orig_unit, ''are'', res, target_unit)'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the program uses the **convert_temperature()** function from ► Sect.
    [24.​1.​2](474412_1_En_24_Chapter.xhtml#Sec3). You will need this code to run
    the program. Furthermore, please note that the variable **choice**, which takes
    the user’s command, must already be initialized before the **while** loop. Otherwise,
    the **while** loop will encounter a non-existent variable when checking its run
    condition, which will trigger an error message.
  prefs: []
  type: TYPE_NORMAL
