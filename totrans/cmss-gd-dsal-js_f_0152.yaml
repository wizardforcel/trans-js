- en: Exercises
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: The following exercises provide you with the opportunity to practice with binary
    search trees. The solutions to these exercises are found in the section [`Chapter
    15`](f_0220.xhtml#binary.trees.solutions).
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Imagine you were to take an empty binary search tree and insert the following
    sequence of numbers in this order: [1, 5, 9, 2, 4, 10, 6, 3, 8].'
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: Draw a diagram showing what the binary search tree would look like. Remember,
    the numbers are being inserted in the order presented here.
  id: totrans-3
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: If a well-balanced binary search tree contains 1,000 values, what is the maximum
    number of steps it would take to search for a value within it?
  id: totrans-4
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: Write an algorithm that finds the greatest value within a binary search tree.
  id: totrans-5
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: 'In the text, I demonstrated how to use inorder traversal to print a list of
    all the book titles. Another way to traverse a tree is known as preorder traversal.
    Here’s the code for it as applied to our book app:'
  id: totrans-6
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function` `traverseAndPrint(node) {` |'
  id: totrans-7
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (!node) { `return`; } |'
  id: totrans-8
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-9
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `console.log(node.value);` |'
  id: totrans-10
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `traverseAndPrint(node.leftChild);` |'
  id: totrans-11
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `traverseAndPrint(node.rightChild);` |'
  id: totrans-12
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-13
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: 'For the example tree in the text (the one with “Moby Dick” and the other book
    titles), write out the order in which the book titles are printed with preorder
    traversal. As a reminder, here’s the example tree:'
  id: totrans-14
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: '![images/binary_trees/bst_26.png](images/binary_trees/bst_26.png)'
  id: totrans-15
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_IMG
- en: 'Yet another form of traversal is called postorder traversal. Here’s the code
    as applied to our book app:'
  id: totrans-16
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function` `traverseAndPrint(node) {` |'
  id: totrans-17
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (!node) { `return`; } |'
  id: totrans-18
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-19
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `traverseAndPrint(node.leftChild);` |'
  id: totrans-20
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `traverseAndPrint(node.rightChild);` |'
  id: totrans-21
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `console.log(node.value);` |'
  id: totrans-22
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-23
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: For the example tree in the text (which also appears in the previous exercise),
    write out the order in which the book titles are printed with postorder traversal.
  id: totrans-24
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: Copyright © 2024, The Pragmatic Bookshelf.
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
