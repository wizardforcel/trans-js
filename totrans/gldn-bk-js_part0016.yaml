- en: Chapter 13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Vue.js: Fundamentals and Applications'
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js is a progressive framework for building user interfaces. It is known
    for its simplicity, flexibility and ease of integration. Let's explore the fundamentals
    of Vue.js, understand reactive components and properties, and learn about directives
    and lifecycle methods. This knowledge will be essential to create modern and efficient
    applications with Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js Fundamentals
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js was created by Evan You and released in 2014\. It was designed to be
    scalable, meaning you can use it to add interactivity to an existing page or build
    complete single-page applications (SPA). Vue is especially popular for its smooth
    learning curve and clear documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Why use Vue.js?
  prefs: []
  type: TYPE_NORMAL
- en: '- Simplicity:  Vue is easy to learn and use. Its syntax is intuitive and straightforward,
    making it accessible to beginners and experienced developers alike.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Reactivity:  Vue offers a reactive system that facilitates data synchronization
    between application logic and the user interface.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Flexibility:  You can use Vue for small, simple projects or large, complex
    applications. It is highly modular and can be expanded as needed.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Community and ecosystem:  Vue has an active community and growing ecosystem,
    with many libraries and tools that complement development.'
  prefs: []
  type: TYPE_NORMAL
- en: Reactive components and properties
  prefs: []
  type: TYPE_NORMAL
- en: Components are the foundation of a Vue.js application. They allow you to divide
    the user interface into smaller, reusable parts, each managing its own state and
    logic.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic component
  prefs: []
  type: TYPE_NORMAL
- en: A Vue component can be defined in a `.vue` file or directly in the script.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the example above, we have a component that displays a message. The `data`
    object returns the local state of the component, and the message is displayed
    in the template using `{{ message }}` interpolation.
  prefs: []
  type: TYPE_NORMAL
- en: Properties (props)
  prefs: []
  type: TYPE_NORMAL
- en: Props are used to pass data from a parent component to a child component. They
    are declared in the child component and received as arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the example above, `title` is a prop that can be passed to the child component.
    In the parent component you can use the child component and pass the prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Reactivity
  prefs: []
  type: TYPE_NORMAL
- en: Responsiveness is a key feature of Vue. When a component's data changes, the
    user interface is automatically updated to reflect those changes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the value of `counter` is displayed in the UI and automatically
    updated when the button is clicked, thanks to Vue's reactive system.
  prefs: []
  type: TYPE_NORMAL
- en: Lifecycle Policies and Methods
  prefs: []
  type: TYPE_NORMAL
- en: Directives
  prefs: []
  type: TYPE_NORMAL
- en: Directives are special attributes in the template that provide instructions
    to the DOM. The most common directives include `v-bind`, `v-model`, `v-if`, `v-for`
    and `v-on`.
  prefs: []
  type: TYPE_NORMAL
- en: '- `v-bind`:  Binds an attribute or property to a JavaScript expression.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '- `v-model`:  Creates a two-way link between a form element and data.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '- `v-if`:  Renders a block conditionally.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '- `v-for`:  Renders a list of items using a loop.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '- `v-on`: Links an event to a method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Life cycle methods
  prefs: []
  type: TYPE_NORMAL
- en: 'Lifecycle methods allow you to run code at specific steps in a component''s
    lifecycle. Some of the most important lifecycle methods include:'
  prefs: []
  type: TYPE_NORMAL
- en: '- `created`:  Called after the component instance is created.'
  prefs: []
  type: TYPE_NORMAL
- en: '- `mounted`:  Called after the component is inserted into the DOM.'
  prefs: []
  type: TYPE_NORMAL
- en: '- `updated`:  Called after a reactive update.'
  prefs: []
  type: TYPE_NORMAL
- en: '- `destroyed`:  Called after the component is destroyed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example of using lifecycle methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We explored the fundamentals of Vue.js, understood the creation and use of components,
    reactive properties, directives and lifecycle methods. Vue.js offers a simple
    and powerful approach to user interface development, allowing you to build dynamic
    and efficient web applications. Keep practicing and applying these concepts to
    master Vue.js and create modern, responsive applications.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tests in JavaScript
  prefs: []
  type: TYPE_NORMAL
- en: 'Testing your code is a fundamental practice to ensure that it works correctly
    and maintains its quality over time. Testing helps detect bugs early, facilitates
    maintenance and improves application reliability. Let''s explore the importance
    of testing, learn about some popular testing tools like Jest, Mocha, and Chai,
    and understand the different types of testing: unit, integration, and end-to-end.'
  prefs: []
  type: TYPE_NORMAL
- en: Importance of testing
  prefs: []
  type: TYPE_NORMAL
- en: 'Testing your code is essential for several reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '- Bug detection:  Testing helps find errors in code before they become problems
    in the production environment.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Maintainability:  Tests make code refactoring easier by ensuring that changes
    do not introduce new bugs.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Reliability:  Tests provide a solid basis for trusting that code is working
    as expected.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Documentation:  Tests serve as a form of living documentation, showing how
    code should behave in different situations.'
  prefs: []
  type: TYPE_NORMAL
- en: Testing Tools
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several tools available for testing JavaScript applications. Let''s
    focus on three of the most popular: Jest, Mocha and Chai.'
  prefs: []
  type: TYPE_NORMAL
- en: Is
  prefs: []
  type: TYPE_NORMAL
- en: Jest is a testing framework developed by Facebook, designed to work with React
    applications, but can also be used to test any JavaScript code. It comes with
    everything you need to write tests, including a test runner, an assertion framework,
    and support for mocks and spies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Basic example of a test with Jest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we are testing the `add` function to ensure that `1 + 2` results
    in `3`.
  prefs: []
  type: TYPE_NORMAL
- en: Mocha
  prefs: []
  type: TYPE_NORMAL
- en: Mocha is a flexible and extensible testing framework that runs on Node.js and
    in the browser. It stands out for its simplicity and for allowing you to use assertion
    libraries of your choice, such as Chai.
  prefs: []
  type: TYPE_NORMAL
- en: 'Basic example of a test with Mocha and Chai:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here, we use Mocha to define the test structure and Chai for the assertions.
  prefs: []
  type: TYPE_NORMAL
- en: Chai
  prefs: []
  type: TYPE_NORMAL
- en: Chai is an assertion library that can be used with various testing frameworks,
    such as Mocha. It provides an expressive and readable interface for writing assertions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example of using Chai:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Types of tests
  prefs: []
  type: TYPE_NORMAL
- en: There are different types of tests, each with a specific purpose. Let's explore
    unit, integration, and end-to-end testing.
  prefs: []
  type: TYPE_NORMAL
- en: Unitary tests
  prefs: []
  type: TYPE_NORMAL
- en: Unit tests check isolated parts of code, such as functions or methods, ensuring
    that they work correctly. They are quick to execute and provide immediate feedback
    on tested functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example of a unit test with Jest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Integration Tests
  prefs: []
  type: TYPE_NORMAL
- en: Integration tests verify the interaction between different parts of the system,
    ensuring that the components work correctly together. They are more complex and
    can take longer to perform, but they are essential to ensuring that the parts
    of the system are integrated correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example of an integration test with Mocha and Chai:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Testes end-to-end
  prefs: []
  type: TYPE_NORMAL
- en: End-to-end (E2E) tests simulate user behavior and verify that the system as
    a whole works correctly. They run in an environment that replicates the production
    environment as closely as possible, testing complete application usage flows.
  prefs: []
  type: TYPE_NORMAL
- en: Popular tools for E2E testing include Cypress and Selenium.
  prefs: []
  type: TYPE_NORMAL
- en: 'Basic example of an E2E test with Cypress:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Testing your code is an essential practice to ensure the quality and reliability
    of JavaScript applications. We understand the importance of testing, explore popular
    tools like Jest, Mocha, and Chai, and understand the different types of testing:
    unit, integration, and end-to-end. By implementing a comprehensive testing strategy,
    you can develop more robust applications and maintain confidence that your code
    works as expected. Continue improving your testing skills and apply these concepts
    to create high-quality software.'
  prefs: []
  type: TYPE_NORMAL
