- en: Chapter 18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Connecting Everything with Graphs
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say we’re building a social network that allows people to be friends with
    one another. These friendships are mutual, so if Alice is friends with Bob, then
    Bob is also friends with Alice.
  prefs: []
  type: TYPE_NORMAL
- en: How can we best organize this data?
  prefs: []
  type: TYPE_NORMAL
- en: 'One basic approach might be to use a two-dimensional array that stores the
    list of friendships:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | friendships = [ |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | [​*"Alice"*​, ​*"Bob"*​], |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | [​*"Bob"*​, ​*"Cynthia"*​], |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | [​*"Alice"*​, ​*"Diana"*​], |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | [​*"Bob"*​, ​*"Diana"*​], |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | [​*"Elise"*​, ​*"Fred"*​], |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | [​*"Diana"*​, ​*"Fred"*​], |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | [​*"Fred"*​, ​*"Alice"*​] |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ] |'
  prefs: []
  type: TYPE_TB
- en: Here, each subarray containing a pair of names represents a friendship between
    two people.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, with this approach, there’s no quick way to see who Alice’s friends
    are. If we look carefully, we can see that Alice is friends with Bob, Diana, and
    Fred. But for the computer to determine this, it would have to comb through all
    the relationships in the list since Alice can be present in any of them. This
    is O(N), which is very slow.
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, we can do much, much better than this. With a data structure known
    as a graph, we can find Alice’s friends in just O(1) time.
  prefs: []
  type: TYPE_NORMAL
