- en: 'Start Here: The Best-Imaginable Big O'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 从这里开始：最佳想象的 Big O
- en: While all the techniques in this chapter are useful, you’ll find that some come
    in handy for certain scenarios, while others are effective for other scenarios.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 尽管本章中的所有技术都很有用，但你会发现，有些在特定场景中很方便，而其他则在其他场景中有效。
- en: This first technique, however, applies to all algorithms and should be the first
    step of your optimization process.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，这第一种技术适用于所有算法，应该是你优化过程的第一步。
- en: And here it is.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这就是它的所在。
- en: Once you’ve determined the efficiency of your current algorithm (the prereq),
    come up with what you believe to be what I call the “best-imaginable Big O.” (I’ve
    seen others refer to this as the “best-conceivable runtime” when applied to speed.)
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 一旦你确定了当前算法的效率（先决条件），就想出你认为的我所称的“最佳想象的 Big O”。（我见过其他人称之为“最佳可想象运行时间”，应用于速度时。）
- en: Essentially, the best-imaginable Big O is the absolute best Big O you could
    dream of for the problem at hand. This is the Big O you know is absolutely impossible
    to beat.
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 本质上，最佳想象的 Big O 是你对手头问题可以梦想的绝对最佳 Big O。这是你知道绝对不可能被超越的 Big O。
- en: For example, if we were to write a function that prints every item from an array,
    we’d probably say that the best-imaginable Big O for this task is `O(N)`. Given
    that we have to print each of the `N` items in the array, we have no choice but
    to process each of the `N` items. There’s no way around this fact, as we need
    to “touch” each item to print it. Because of this, `O(N)` is the best-imaginable
    Big O we could imagine for this scenario.
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，如果我们要编写一个打印数组中每个项的函数，我们可能会说这个任务的最佳想象 Big O 是 `O(N)`。因为我们必须打印每个 `N` 项，所以我们别无选择，只能处理每个
    `N` 项。这个事实无可避免，因为我们需要“接触”每个项才能打印它。因此，`O(N)` 是我们对这个场景所能想象的最佳想象 Big O。
- en: When optimizing an algorithm, then, we need to determine two Big Os. We need
    to know the Big O our algorithm currently takes (the prereq), and we need to come
    up with the best-imaginable Big O the task could possibly take.
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因此，在优化算法时，我们需要确定两个 Big O。我们需要知道我们算法当前的 Big O（先决条件），并且需要想出该任务可能达到的最佳想象 Big O。
- en: If these two Big Os are not the same, it means we have something to optimize.
    If, say, my current algorithm has a runtime of `O(N²)` but the best-imaginable
    Big O is `O(N)`, we now have an improvement to strive for. The gap between the
    two Big Os shows us the potential gains we can make through optimization.
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果这两个 Big O 不相同，意味着我们有优化的空间。假设，我当前的算法运行时间为 `O(N²`)，但最佳想象的 Big O 是 `O(N)`，那么我们就有了努力改进的目标。两个
    Big O 之间的差距显示了我们通过优化可以实现的潜在收益。
- en: 'Let’s summarize these steps:'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们总结一下这些步骤：
- en: Determine the Big O category of your current algorithm. (This is the prereq.)
  id: totrans-10
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 确定你当前算法的 Big O 类别。（这就是先决条件。）
- en: Determine the best-imaginable Big O you could dream of for the problem at hand.
  id: totrans-11
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 确定你对手头问题能够梦想的最佳想象 Big O。
- en: If the best-imaginable Big O is faster than your current Big O, you can now
    try to optimize your code, with the goal of bringing your algorithm as close to
    the best-imaginable Big O as possible.
  id: totrans-12
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 如果最佳想象的 Big O 比你当前的 Big O 更快，那么你可以尝试优化代码，目标是尽可能将算法接近最佳想象的 Big O。
- en: It’s important to stress that it’s not always possible to achieve the best-imaginable
    Big O. After all, just because you can dream of something doesn’t mean it can
    become reality.
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 需要强调的是，达到最佳想象 Big O 并不总是可能的。毕竟，仅仅因为你能梦想某件事情，并不意味着它能变成现实。
- en: In fact, it might turn out that your current implementation cannot be optimized
    further. However, the best-imaginable Big O is still a tool for giving us a goal
    to shoot for with our optimization.
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 事实上，你当前的实现可能无法进一步优化。然而，最佳想象的 Big O 仍然是一个工具，可以为我们的优化提供一个目标。
- en: Often, I find that I can successfully optimize an algorithm to a speed that
    is in between my current Big O and the best-imaginable Big O.
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 通常，我发现我能够成功地将算法优化到一个介于我当前的 Big O 和最佳想象的 Big O 之间的速度。
- en: For example, if my current implementation is `O(N²)` and my best-imaginable
    Big O is `O(log N)`, I’ll aim to optimize my algorithm to become `O(log N)`. If,
    in the end, my optimizations speed up my code to “just” `O(N)`, that’s still a
    great success, and the best-imaginable Big O will have served a useful purpose.
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，如果我当前的实现是 `O(N²)`，而我能想象的最佳 Big O 是 `O(log N)`，我会努力优化我的算法，使其变为 `O(log N)`。如果最后我的优化使代码“仅仅”达到
    `O(N)`，那依然是一个伟大的成功，想象中的最佳 Big O 将发挥有用的作用。
- en: Stretching the Imagination
  id: totrans-17
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 伸展想象力
- en: As you’ve seen, the benefit of coming up with the best-imaginable `Big O` is
    that it gives us an optimization goal to shoot for. To really make the most of
    this, it’s worth stretching the imagination a bit to come up with a best-imaginable
    `Big O` that is amazing. In fact, I recommend making your best-imaginable `Big
    O` the fastest `Big O` you can think of that isn’t outright impossible.
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 正如你所看到的，提出最佳想象`Big O`的好处在于，它给我们提供了一个优化目标。为了充分利用这一点，值得稍微扩展一下想象力，想出一个惊人的最佳想象`Big
    O`。事实上，我建议将你能想到的最快的`Big O`设为最佳想象`Big O`，前提是它不是完全不可能的。
- en: Here’s another mental trick I use for stoking my imagination. I pick a really
    fast `Big O` for the problem at hand—let’s call it “Amazing `Big O`.” I then ask
    myself, “If someone told me that they know how to pull off the Amazing `Big O`
    for this problem, would I believe them?” If I’d believe someone who said that
    they figured out how to solve this problem with the efficiency of Amazing `Big
    O`, I then make the Amazing `Big O` my best-imaginable `Big O`.
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里有另一个我用来激发想象力的心理技巧。我为当前问题选择一个非常快速的`Big O`——我们称之为“惊人的`Big O`”。然后我问自己：“如果有人告诉我他们知道如何实现这个问题的惊人`Big
    O`，我会相信他们吗？”如果我会相信某人说他们找到了以惊人`Big O`的效率解决这个问题的方法，那么我就将惊人`Big O`设为我能想象的最佳`Big O`。
- en: Once we know the `Big O` of our current algorithm and the best-imaginable `Big
    O` that we’re aiming for, we’re primed for optimization.
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 一旦我们知道当前算法的`Big O`和我们所追求的最佳想象`Big O`，我们就准备好进行优化了。
- en: In the remainder of this chapter, we’re going to explore additional optimization
    techniques and mental strategies that can help us boost the efficiency of our
    code.
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在本章的剩余部分，我们将探讨其他优化技术和心理策略，以帮助我们提升代码的效率。
