- en: Practical Examples
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: '-   Here’s some typical JavaScript code that prints all the items from a list:'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `let` things = [`''apples''`, `''baboons''`, `''cribs''`, `''dulcimers''`];
    |'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `for` (`const` thing `of` things) { |'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `console.log(`Here''s a thing: ${thing}`);` |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '-   How would we describe the efficiency of this algorithm in Big O notation?'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '-   The first thing to realize is that this is an example of an algorithm.
    While it may not be fancy, any code that does anything at all is technically an
    algorithm—it’s a particular process for solving a problem. In this case, the problem
    is that we want to print all the items from a list. The algorithm we use to solve
    this problem is a for loop containing a `console.log` statement.'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '-   To break this down, we need to analyze how many steps this algorithm takes.
    In this case, the main part of the algorithm—the for loop—takes four steps. In
    this example, there are four things in the list, and we print each one out a single
    time.'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '-   However, the number of steps isn’t constant. If the list contained ten
    elements, the for loop would take ten steps. Since this for loop takes as many
    steps as there are elements, we’d say that this algorithm has an efficiency of
    O(N).'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '-   The next example is a simple JavaScript-based algorithm for determining
    whether a number is prime:'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function` isPrime(number) { |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `for` (`let` i = 2; i < number; i += 1) { |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (number % i === 0) { |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return false;` |'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return true;` |'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '-   The preceding code accepts a number as an argument and begins a for loop
    in which we divide the number by every integer from 2 up to (but not including)
    that number and see if there’s a remainder. If there’s no remainder, we know that
    the number is not prime and we immediately return `false`. If we make it all the
    way up to the number and always find a remainder, then we know that the number
    is prime and we return `true`.'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '-   In this case, the key question is slightly different than in the previous
    examples. In the previous examples, our key question asked how many steps the
    algorithm would take if there were N data elements in an array. Here, we’re not
    dealing with an array, but we are dealing with a number that we pass into this
    function. Depending on the number we pass in, this will affect how many times
    the function’s loop runs.'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '-   In this case, then, our key question will be this: when passing in the
    number N, how many steps will the algorithm take?'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '-   If we pass the number 7 into `isPrime`，the for loop runs about 7 times.
    (It technically runs 5 times, since it starts at 2 and ends right before the actual
    number.) For the number 101, the loop runs about 101 times. Because the number
    of steps increases in lockstep with the number passed into the function, this
    is a classic example of O(N).'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Again, the key question here dealt with a different kind of `N`，since our primary
    piece of data was a `number` rather than an `array`。We’ll get more practice in
    identifying our `Ns` as we progress through the future chapters。
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
