- en: Practical Examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here’s some typical JavaScript code that prints all the items from a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | ​**let**​ things = [​*''apples''*​, ​*''baboons''*​, ​*''cribs''*​,
    ​*''dulcimers''*​]; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**for**​ (​**const**​ thing ​**of**​ things) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | console.log(​*`Here''s a thing:* ​${thing}​*`*​); |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: How would we describe the efficiency of this algorithm in Big O notation?
  prefs: []
  type: TYPE_NORMAL
- en: The first thing to realize is that this is an example of an algorithm. While
    it may not be fancy, any code that does anything at all is technically an algorithm—it’s
    a particular process for solving a problem. In this case, the problem is that
    we want to print all the items from a list. The algorithm we use to solve this
    problem is a for loop containing a console.log statement.
  prefs: []
  type: TYPE_NORMAL
- en: To break this down, we need to analyze how many steps this algorithm takes.
    In this case, the main part of the algorithm—the for loop—takes four steps. In
    this example, there are four things in the list, and we print each one out a single
    time.
  prefs: []
  type: TYPE_NORMAL
- en: However, the number of steps isn’t constant. If the list contained ten elements,
    the for loop would take ten steps. Since this for loop takes as many steps as
    there are elements, we’d say that this algorithm has an efficiency of O(N).
  prefs: []
  type: TYPE_NORMAL
- en: 'The next example is a simple JavaScript-based algorithm for determining whether
    a number is prime:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | ​**function**​ isPrime(number) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**for**​ (​**let**​ i = 2; i < number; i += 1) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**if**​ (number % i === 0) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**return**​ ​**false**​; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**return**​ ​**true**​; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: The preceding code accepts a number as an argument and begins a for loop in
    which we divide the number by every integer from 2 up to (but not including) that
    number and see if there’s a remainder. If there’s no remainder, we know that the
    number is not prime and we immediately return false. If we make it all the way
    up to the number and always find a remainder, then we know that the number is
    prime and we return true.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the key question is slightly different than in the previous examples.
    In the previous examples, our key question asked how many steps the algorithm
    would take if there were N data elements in an array. Here, we’re not dealing
    with an array, but we are dealing with a number that we pass into this function.
    Depending on the number we pass in, this will affect how many times the function’s
    loop runs.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, then, our key question will be this: when passing in the number
    N, how many steps will the algorithm take?'
  prefs: []
  type: TYPE_NORMAL
- en: If we pass the number 7 into isPrime, the for loop runs about 7 times. (It technically
    runs 5 times, since it starts at 2 and ends right before the actual number.) For
    the number 101, the loop runs about 101 times. Because the number of steps increases
    in lockstep with the number passed into the function, this is a classic example
    of O(N).
  prefs: []
  type: TYPE_NORMAL
- en: Again, the key question here dealt with a different kind of N, since our primary
    piece of data was a number rather than an array. We’ll get more practice in identifying
    our Ns as we progress through the future chapters.
  prefs: []
  type: TYPE_NORMAL
