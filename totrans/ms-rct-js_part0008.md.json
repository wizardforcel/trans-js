["```jsjsx\n\nimport React from 'react';\n\nimport Child from './Child';\n\nfunction Parent() {\n\n// Define data to be passed as props\n\nconst greeting = \"Hello, React!\";\n\nreturn (\n\n<div>\n\n{/* Pass the 'greeting' prop to the 'Child' component */}\n\n<Child message={greeting} />\n\n</div>\n\n);\n\n}\n\nexport default Parent;\n\n```", "```jsjsx\n\nimport React from 'react';\n\nfunction Child(props) {\n\nreturn (\n\n<div>\n\n<p>{props.message}</p>\n\n</div>\n\n);\n\n}\n\nexport default Child;\n\n```", "```jsjsx\n\n<p>{props.message}</p>\n\n```", "```jsjsx\n\nclass MyComponent extends React.Component {\n\nconstructor(props) {\n\nsuper(props);\n\nthis.state = {\n\ncount: 0,\n\nisActive: true,\n\ninputValue: '',\n\n};\n\n}\n\n// ...\n\n}\n\n```", "```jsjsx\n\nrender() {\n\nreturn (\n\n<div>\n\n<p>Count: {this.state.count}</p>\n\n<p>Active: {this.state.isActive ? 'Yes' : 'No'}</p>\n\n<input\n\ntype=\"text\"\n\nvalue={this.state.inputValue}\n\nonChange={this.handleInputChange}\n\n/>\n\n</div>\n\n);\n\n}\n\n```", "```jsjsx\n\nincrementCount = () => {\n\nthis.setState({ count: this.state.count + 1 });\n\n};\n\ntoggleActive = () => {\n\nthis.setState({ isActive: !this.state.isActive });\n\n};\n\nhandleInputChange = (event) => {\n\nthis.setState({ inputValue: event.target.value });\n\n};\n\n```", "```jsjsx\n\nthis.setState({ count: this.state.count + 1 }, () => {\n\nconsole.log('Updated count:', this.state.count);\n\n});\n\n```", "```jsjsx\n\nimport\n\nReact, { useState } from 'react';\n\nfunction Counter() {\n\n// Initialize state using the 'useState' hook\n\nconst [count, setCount] = useState(0);\n\n// Define a function to update the state\n\nconst incrementCount = () => {\n\nsetCount(count + 1);\n\n};\n\nreturn (\n\n<div>\n\n<p>Count: {count}</p>\n\n<button onClick={incrementCount}>Increment</button>\n\n</div>\n\n);\n\n}\n\nexport default Counter;\n\n```", "```jsjsx\n\n// Before destructuring\n\nfunction MyComponent(props) {\n\nreturn <div>{props.message}</div>;\n\n}\n\n// After destructuring\n\nfunction MyComponent({ message }) {\n\nreturn <div>{message}</div>;\n\n}\n\n```"]