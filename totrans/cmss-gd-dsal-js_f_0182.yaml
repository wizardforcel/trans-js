- en: '`Depth-First Search`'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: 图搜索的两种著名方法是深度优先搜索和广度优先搜索。这两种方法都能完成任务，但在特定情况下各自提供独特的优势。我们将首先介绍深度优先搜索，也称为`DFS`，因为它实际上与我们之前讨论的`Binary
    Search Tree Traversal`的算法非常相似。实际上，它也是我们在`Filesystem Traversal`中看到的同一基本算法。
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 如前所述，图搜索可以用来找到特定顶点或简单地遍历图形。我们将首先使用深度优先搜索来遍历图，因为该算法稍微简单一些。
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 任何图搜索算法的关键是跟踪我们到目前为止访问过的顶点。如果我们不这样做，可能会陷入无限循环。以下图形就是一个例子：
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/graphs/cycle_graph.png](images/graphs/cycle_graph.png)'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 在这里，`Mohammad`与`Felicia`是朋友。`Felicia`也恰好与`Zeina`是朋友。但是`Zeina`与`Mohammad`是朋友。因此，除非我们跟踪已经遍历的顶点，否则我们的代码会陷入循环。
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 当我们处理树（或文件系统遍历）时，这个问题并不存在，因为树不能有循环。但由于图可以有循环，我们现在需要解决这个问题。
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 跟踪我们已访问的顶点的一种方法是使用哈希表。当我们访问每个顶点时，将顶点（或其值）作为哈希表中的键，并为其分配一个任意值，如布尔值`true`。如果某个顶点在哈希表中，则意味着我们已经访问过它。
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 考虑到这一点，深度优先搜索算法的工作方式如下。
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 从图中的任何随机顶点开始。
  id: totrans-9
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: 将当前顶点添加到哈希表中，以标记它为已访问。
  id: totrans-10
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: 遍历当前顶点的相邻顶点。
  id: totrans-11
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: 对于每个相邻顶点，如果该相邻顶点已经被访问过，则忽略它。
  id: totrans-12
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: 如果相邻顶点尚未被访问，则对该顶点递归执行深度优先搜索。
  id: totrans-13
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '`Depth-First Search Walk-Through`'
  id: totrans-14
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: 让我们看看这如何实现。
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在这个演示中，我们将从`Alice`开始。在下面的图示中，带有线条的顶点是当前顶点。一个勾号意味着我们已经正式标记该顶点为已访问（并添加到哈希表中）。
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 步骤 1：我们从`Alice`开始，并给她一个勾号以表示我们已经正式访问了她的顶点：
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/graphs/visited_alice.png](images/graphs/visited_alice.png)'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 接下来，我们将使用循环遍历`Alice`的邻居。这些邻居将是`Bob`、`Candy`、`Derek`和`Elaine`。
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 访问邻居的顺序无关紧要，所以我们就从`Bob`开始吧。他看起来很好。
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Step 2: We now perform depth-first search on `Bob`。 Note that this is making
    a recursive call, as we’re already in the middle of a depth-first search of `Alice`。'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: As with all recursion, the computer needs to remember which function calls it’s
    still in the middle of，so it first adds `Alice` to the call stack：
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/graphs/alice_call_stack.png`](images/graphs/alice_call_stack.png)'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: We can now begin the depth-first search on `Bob`，which makes `Bob` the current
    vertex。 We mark him as visited，as shown in the [graph](#fig.ch18.visit_bob)。
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/graphs/visit_bob.png`](images/graphs/visit_bob.png)'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: We then iterate over `Bob`’s adjacent vertices。 These are `Alice` and `Fred`。
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Step 3: `Alice` has already been visited, so we can ignore her。'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Step 4: The only other neighbor, then, is `Fred`。 We call the depth-first search
    function on `Fred`’s vertex。 The computer first adds `Bob` to the call stack to
    remember that it’s still in the middle of searching `Bob`：'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/graphs/bob_call_stack.png`](images/graphs/bob_call_stack.png)'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: We now perform depth-first search on `Fred`。 He’s now the current vertex，so
    we mark him as visited：
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/graphs/visit_fred.png`](images/graphs/visit_fred.png)'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: Next, we iterate over Fred’s adjacent vertices, which are `Bob` and `Helen`。
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Step 5: `Bob` has already been visited, so we ignore him。'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Step 6: The only remaining adjacent vertex is `Helen`。 We recursively perform
    depth-search first on `Helen`，so the computer first adds `Fred` to the call stack：'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/graphs/fred_call_stack.png`](images/graphs/fred_call_stack.png)'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: We now begin depth-first search on `Helen`。 She’s the current vertex，so we mark
    her as visited：
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/graphs/visit_helen.png`](images/graphs/visit_helen.png)'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '`Helen` has two adjacent vertices: `Fred` and `Candy`。'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Step 7: We’ve already visited `Fred`，so we can ignore him。'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Step 8: `Candy` has not yet been visited, so we recursively perform depth-search
    on `Candy`。 First, though, `Helen` gets added to the call stack：'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/graphs/helen_call_stack.png`](images/graphs/helen_call_stack.png)'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: We perform depth-first search on `Candy`。 She’s now the current vertex, and
    we mark her as visited：
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/graphs/visit_candy.png`](images/graphs/visit_candy.png)'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '`Candy` has two adjacent vertices: `Alice` and `Helen`。'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Step 9: We’ve already visited `Alice`，so we can ignore her。'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Step 10: We’ve already visited `Helen`，so we can ignore her as well。'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Since `Candy` has no other neighbors, we’re done performing depth-first search
    on `Candy`。 At this point, then, the computer begins to unwind the call stack。
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: First, it pops off `Helen` from the call stack。 We’ve already iterated over
    all her neighbors, so the depth-first search on `Helen` is complete。
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The computer pops off `Fred`。 We’ve iterated over all his neighbors too，so we’re
    done searching him as well。
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The computer pops off `Bob`，but we’re done with him as well。
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 计算机随后将`Alice`从调用栈中弹出。在我们搜索`Alice`的过程中，我们正在循环遍历`Alice`的所有邻居。现在，这个循环已经遍历过`Bob`。（这是步骤2。）这留下了`Candy`、`Derek`和`Elaine`。
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 步骤11：`Candy`已经被访问过，所以没有必要对她进行搜索。
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 然而，我们还没有访问`Derek`或`Elaine`。
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 步骤12：让我们通过递归地对`Derek`执行深度优先搜索来进行。计算机再次将`Alice`添加到调用栈中：
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/graphs/alice_call_stack.png`](images/graphs/alice_call_stack.png)'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '`Derek`的深度优先搜索现在开始。`Derek`是当前顶点，因此我们将他标记为已访问：'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/graphs/visit_derek.png`](images/graphs/visit_derek.png)'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '`Derek`有三个相邻顶点：`Alice`、`Elaine`和`Gina`。'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 步骤13：`Alice`已经被访问过，因此我们不需要对她进行另一次搜索。
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 步骤14：接下来让我们访问`Elaine`，通过递归地对她的顶点执行深度优先搜索。在我们执行之前，计算机将`Derek`添加到调用栈中：
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/graphs/derek_call_stack.png`](images/graphs/derek_call_stack.png)'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 我们现在对`Elaine`执行深度优先搜索。我们将`Elaine`标记为已访问，如图所示[graph](#fig.ch18.visit_elaine)。
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/graphs/visit_elaine.png`](images/graphs/visit_elaine.png)'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '`Elaine`有两个相邻顶点：`Alice`和`Derek`。'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 步骤15：`Alice`已经被访问过，因此没有必要再对她进行一次搜索。
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 步骤16：`Derek`也已经被访问过。
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 由于我们已经遍历了所有`Elaine`的邻居，因此我们完成了对`Elaine`的搜索。计算机现在从调用栈中弹出`Derek`，并遍历他剩余的相邻顶点。在这种情况下，`Gina`是最后一个要访问的邻居。
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 步骤17：我们之前从未访问过`Gina`，所以我们对她的顶点递归地执行深度优先搜索。不过，计算机首先再次将`Derek`添加到调用栈中：
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/graphs/derek_call_stack.png`](images/graphs/derek_call_stack.png)'
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 我们开始对`Gina`进行深度优先搜索，并将她标记为已访问，如图所示[graph](#fig.ch18.visit_gina)。
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/graphs/visit_gina.png`](images/graphs/visit_gina.png)'
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '`Gina`有两个邻居：`Derek`和`Irena`。'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 步骤18：`Derek`已经被访问过。
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 步骤19：`Gina`有一个未访问的相邻顶点——即`Irena`。`Gina`被添加到调用栈中，以便我们可以递归地对`Irena`执行深度优先搜索：
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/graphs/gina_call_stack.png`](images/graphs/gina_call_stack.png)'
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 我们开始对`Irena`进行搜索，并将她标记为已访问：
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/graphs/visit_irena.png`](images/graphs/visit_irena.png)'
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 我们遍历`Irena`的邻居。`Irena`只有一个邻居：`Gina`。
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 步骤20：`Gina`已经被访问过。
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 计算机随后逐个弹出调用栈，依次将每个顶点弹出。然而，由于调用栈中的每个顶点已经遍历过它的所有邻居，计算机对每个顶点没有更多操作。
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这意味着我们完成了！
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 代码实现：深度优先搜索
  id: totrans-82
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: '-   下面是深度优先遍历的实现：'
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | ​`function`​ `dfsTraverse(vertex, visitedVertices={})` { |'
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `visitedVertices[vertex.value]` = ​`true`​; |'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `console.log(vertex.value);` |'
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`for`​ (​`const`​ `adjacentVertex` ​`of`​ `vertex.adjacentVertices`)
    { |'
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`if`​ (!`visitedVertices[adjacentVertex.value]`) { |'
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `dfsTraverse(adjacentVertex, visitedVertices);` |'
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '-   Our `dfsTraverse`方法接受一个单独的顶点和一个`visitedVertices`哈希表。第一次调用这个`function`时，`visitedVertices`默认为一个空的哈希表。对于上述示例，我们将从`alice`顶点开始执行深度优先遍历，过程如下：'
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `dfsTraverse(alice);` |'
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '-   当我们访问顶点时，我们会将已访问的顶点填充到这个哈希表中，并在每次递归调用中传递相同的哈希表。'
  id: totrans-97
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '-   在`function`内我们做的第一件事是将当前顶点标记为已访问。我们通过将顶点的值添加到哈希中来实现这一点：'
  id: totrans-98
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `visitedVertices[vertex.value]` = ​`true`​; |'
  id: totrans-99
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '-   然后我们可选地打印顶点的值，以便反馈我们确实遍历了它：'
  id: totrans-100
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `console.log(vertex.value);` |'
  id: totrans-101
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '-   接下来，我们迭代当前顶点的所有相邻顶点：'
  id: totrans-102
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | ​`for`​ (​`const`​ `adjacentVertex` ​`of`​ `vertex.adjacentVertices`)
    { |'
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '-   我们检查每个相邻顶点，看它是否已经被访问。如果已访问，我们什么也不做；但如果从未被访问，我们就递归调用`dfsTraverse`，传入该相邻顶点：'
  id: totrans-104
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | ​`if`​ (!`visitedVertices[adjacentVertex.value]`) { |'
  id: totrans-105
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `dfsTraverse(adjacentVertex, visitedVertices);` |'
  id: totrans-106
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-107
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '-   同样，我们也传入`visitedVertices`哈希表，以便后续调用可以访问它。'
  id: totrans-108
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '-   如果我们想使用深度优先搜索来搜索特定顶点，可以使用之前`function`的修改版：'
  id: totrans-109
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | ​`function`​ `dfs(vertex, searchValue, visitedVertices={})` { |'
  id: totrans-110
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `visitedVertices[vertex.value]` = ​`true`​; |'
  id: totrans-111
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-112
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`if`​ (`vertex.value` === `searchValue`) { ​`return`​ `vertex`; } |'
  id: totrans-113
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-114
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`for`​ (​`const`​ `adjacentVertex` ​`of`​ `vertex.adjacentVertices`)
    { |'
  id: totrans-115
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`if`​ (`adjacentVertex.value` === `searchValue`) { |'
  id: totrans-116
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`return`​ `adjacentVertex;` |'
  id: totrans-117
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-118
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-119
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`if`​ (!`visitedVertices[adjacentVertex.value]`) { |'
  id: totrans-120
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`const`​ `vertexWeAreSearchingFor` = |'
  id: totrans-121
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `dfs(adjacentVertex, searchValue, visitedVertices);` |'
  id: totrans-122
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-123
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`if`​ (`vertexWeAreSearchingFor`) { |'
  id: totrans-124
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`return`​ `vertexWeAreSearchingFor;` |'
  id: totrans-125
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-126
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-127
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-128
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-129
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`return`​ ​`null`​; |'
  id: totrans-130
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-131
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '-   这个实现也会递归调用自身，对于每个顶点，如果找到正确的顶点，则返回`vertexWeAreSearchingFor`。'
  id: totrans-132
  prefs: []
  stylish: true
  type: TYPE_NORMAL
