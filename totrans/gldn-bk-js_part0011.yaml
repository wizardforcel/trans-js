- en: '`Chapter 8`  '
  id: totrans-0
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: '`第8章`  '
- en: '`Asynchronous Programming`  '
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`异步编程`  '
- en: '让我们探索JavaScript开发中最迷人且富有挑战性的领域之一：异步编程。本章对于理解如何处理可能需要时间的操作（如网络请求或文件读写操作）而不阻塞程序的主要流程至关重要。我们将讨论回调和`promises`，深入了解强大的`async/await`语法，并讨论异步错误处理。  '
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '让我们探索JavaScript开发中最迷人且富有挑战性的领域之一：异步编程。本章对于理解如何处理可能需要时间的操作（如网络请求或文件读写操作）而不阻塞程序的主要流程至关重要。我们将讨论回调和`promises`，深入了解强大的`async/await`语法，并讨论异步错误处理。  '
- en: '`Callbacks and promises`  '
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`回调和承诺`  '
- en: '异步编程对于创建响应迅速且高效的应用程序至关重要。在`promises`和`async/await`出现之前，回调是处理异步操作的主要方式。  '
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '异步编程对于创建响应迅速且高效的应用程序至关重要。在`promises`和`async/await`出现之前，回调是处理异步操作的主要方式。  '
- en: '`Callbacks`'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`回调`  '
- en: '回调是作为参数传递给另一个函数的函数，该函数将在操作完成后执行。尽管它们功能强大，但当嵌套过深时，回调可能导致所谓的“回调地狱”。  '
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '回调是作为参数传递给另一个函数的函数，该函数将在操作完成后执行。尽管它们功能强大，但当嵌套过深时，回调可能导致所谓的“回调地狱”。  '
- en: '`Callback example:`  '
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`回调示例:`  '
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '在这个例子中，`BuscaDados`使用一个回调来处理请求响应。如果有错误，它将被传递给回调，否则数据将被处理。  '
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '在这个例子中，`BuscaDados`使用一个回调来处理请求响应。如果出现错误，它将被传递给回调，否则数据将被处理。  '
- en: '`Promises`  '
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Promises`  '
- en: '`Promises`的引入旨在解决与回调相关的许多问题。`Promise`是一个对象，表示异步操作的最终完成或失败。  '
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Promises`的引入旨在解决与回调相关的许多问题。`Promise`是一个对象，表示异步操作的最终完成或失败。  '
- en: '`Promise example:`  '
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Promise 示例:`  '
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`Promises`使异步代码更具可读性，更易于管理，通过使用`then`链式操作并使用`catch`处理错误。  '
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Promises`使异步代码更具可读性，更易于管理，通过使用`then`链式操作并使用`catch`处理错误。  '
- en: '`Async/await`  '
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Async/await`  '
- en: '`async/await`是ES2017中引入的一种语法，允许你以更同步和可读的方式编写异步代码。`async`标记一个函数为异步，`await`暂停函数的执行，直到承诺被解决。  '
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`async/await`是ES2017中引入的一种语法，允许你以更同步和可读的方式编写异步代码。`async`标记一个函数为异步，`await`暂停函数的执行，直到承诺被解决。'
- en: '`Async/await example:`  '
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Async/await 示例:`  '
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '使用`async/await`大大简化了异步代码的阅读和维护，消除了复杂的承诺链的需要。  '
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '使用`async/await`大大简化了异步代码的阅读和维护，消除了复杂的承诺链的需求。  '
- en: '`Asynchronous error handling`  '
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`异步错误处理`  '
- en: '有效地处理错误对于任何应用程序的健壮性至关重要。在异步编程中，正确捕获和处理错误是防止它们中断程序流的关键。  '
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '有效处理错误对于任何应用程序的健壮性至关重要。在异步编程中，正确捕获和处理错误是防止它们中断程序流程的关键。  '
- en: '`Errors with callbacks:`  '
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`处理回调的错误:`  '
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '在上面的例子中，`onerror`捕获网络错误并将其传递给回调。  '
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '在上面的例子中，`onerror`捕获网络错误并将其传递给回调。  '
- en: '`Errors with promises:`  '
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`处理承诺的错误:`  '
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '使用`promises`时，错误是通过使用`catch`方法捕获的。  '
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '使用`promises`时，错误是通过使用`catch`方法捕获的。  '
- en: '`Errors with async/await:`  '
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`处理 async/await 的错误:`  '
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '使用`async/await`时，`try/catch`块用于以更结构化的方式捕获错误。  '
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '使用`async/await`时，`try/catch`块用于以更结构化的方式捕获错误。  '
- en: We explore the main concepts and techniques of asynchronous programming in `JavaScript`，including
    `callbacks`，`promises`，and `async/await`。Each approach has its own merits and
    appropriate use cases, but language evolution has made managing asynchronous operations
    much more intuitive and efficient with the introduction of `promises` and `async/await`。Understanding
    these tools is essential for developing modern and responsive applications。As
    we move forward, these skills will be critical to dealing with the increasing
    complexity of web applications and ensuring they are robust, efficient and easy
    to maintain。Keep practicing and applying these concepts to master the art of asynchronous
    programming in `JavaScript`。
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '我们探讨了`JavaScript`中异步编程的主要概念和技术，包括`回调`、`承诺`和`async/await`。每种方法都有其优点和适用场景，但语言的演变使得通过引入`承诺`和`async/await`来管理异步操作变得更加直观和高效。理解这些工具对于开发现代和响应迅速的应用程序至关重要。随着我们前进，这些技能将对处理网络应用程序日益复杂的情况至关重要，并确保它们稳健、高效且易于维护。持续练习并应用这些概念，以掌握在`JavaScript`中异步编程的艺术。  '
