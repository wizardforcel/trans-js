- en: Chapter 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Asynchronous Programming
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s explore one of the most fascinating and challenging areas of JavaScript
    development: asynchronous programming. This chapter is essential for understanding
    how to handle operations that can take time, such as network requests or file
    read/write operations, without blocking the main flow of your program. We''ll
    cover callbacks and promises, dive into the powerful async/await syntax, and discuss
    asynchronous error handling.'
  prefs: []
  type: TYPE_NORMAL
- en: Callbacks and promises
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous programming is essential for creating responsive and efficient
    applications. Before the advent of promises and async/await, callbacks were the
    main way to handle asynchronous operations.
  prefs: []
  type: TYPE_NORMAL
- en: Callbacks
  prefs: []
  type: TYPE_NORMAL
- en: A callback is a function passed as an argument to another function that will
    be executed after an operation is completed. Although they are powerful, callbacks
    can lead to so-called "callback hell" when nested deeply.
  prefs: []
  type: TYPE_NORMAL
- en: 'Callback example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this example, BuscaDados uses a callback to process the request response.
    If there is an error it will be passed to the callback otherwise the data will
    be processed.
  prefs: []
  type: TYPE_NORMAL
- en: Promises
  prefs: []
  type: TYPE_NORMAL
- en: Promises were introduced to solve many of the problems associated with callbacks.
    A promise is an object that represents the eventual completion or failure of an
    asynchronous operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Promise example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Promises make asynchronous code more readable and easier to manage by chaining
    operations with then and handling errors with catch.
  prefs: []
  type: TYPE_NORMAL
- en: Async/await
  prefs: []
  type: TYPE_NORMAL
- en: async/await is a syntax introduced in ES2017 that allows you to write asynchronous
    code in a more synchronous and readable way. async marks a function as asynchronous
    and await pauses the function's execution until the promise is resolved.
  prefs: []
  type: TYPE_NORMAL
- en: 'Async/await example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Using async/await greatly simplifies reading and maintaining asynchronous code,
    eliminating the need for complex promise chaining.
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous error handling
  prefs: []
  type: TYPE_NORMAL
- en: Handling errors effectively is crucial to the robustness of any application.
    In asynchronous programming, it is essential to catch and handle errors correctly
    to prevent them from interrupting the flow of your program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Errors with callbacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the example above, onerror captures network errors and passes it to the callback.
  prefs: []
  type: TYPE_NORMAL
- en: 'Errors with promises:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: With promises, errors are caught using the catch method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Errors with async/await:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: With async/await, the try/catch block is used to catch errors in a more structured
    way.
  prefs: []
  type: TYPE_NORMAL
- en: We explore the main concepts and techniques of asynchronous programming in JavaScript,
    including callbacks, promises, and async/await. Each approach has its own merits
    and appropriate use cases, but language evolution has made managing asynchronous
    operations much more intuitive and efficient with the introduction of promises
    and async/await. Understanding these tools is essential for developing modern
    and responsive applications. As we move forward, these skills will be critical
    to dealing with the increasing complexity of web applications and ensuring they
    are robust, efficient and easy to maintain. Keep practicing and applying these
    concepts to master the art of asynchronous programming in JavaScript.
  prefs: []
  type: TYPE_NORMAL
