- en: Searching
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As I stated previously, searching an array means looking to see whether a particular
    value exists within an array and if so, at which index it’s located.
  prefs: []
  type: TYPE_NORMAL
- en: In a sense, it’s the inverse of reading. Reading means providing the computer
    an index and asking it to return the value contained there. Searching, on the
    other hand, means providing the computer a value and asking it to return the index
    of that value’s location.
  prefs: []
  type: TYPE_NORMAL
- en: While these two operations sound similar, there’s a world of difference between
    them when it comes to efficiency. Reading from an index is fast, since a computer
    can jump immediately to any index and discover the value contained there. Searching,
    though, is tedious since the computer has no way to immediately locate a particular
    value.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an important fact about computers: a computer has immediate access
    to all of its memory addresses, but it has no idea offhand what values are contained
    at each memory address.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take our earlier array of fruits and veggies, for example. The computer
    can’t immediately see the actual contents of each cell. To the computer, the array
    looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/understanding_arrays/linear_search_1.png](images/understanding_arrays/linear_search_1.png)'
  prefs: []
  type: TYPE_IMG
- en: To search for a fruit within the array, the computer has no choice but to inspect
    the content of the cells, one at a time.
  prefs: []
  type: TYPE_NORMAL
- en: The following diagrams demonstrate the process the computer would use to search
    for "dates" within our array.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, the computer checks index 0:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/understanding_arrays/linear_search_2.png](images/understanding_arrays/linear_search_2.png)'
  prefs: []
  type: TYPE_IMG
- en: Since the value at index 0 is "apples", and not the "dates" we’re looking for,
    the computer moves on to the next index, as shown in the [diagram](#fig.ch1.linear_search_3).
  prefs: []
  type: TYPE_NORMAL
- en: '![images/understanding_arrays/linear_search_3.png](images/understanding_arrays/linear_search_3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since index 1 doesn’t contain the "dates" we’re looking for either, the computer
    moves on to index 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/understanding_arrays/linear_search_4.png](images/understanding_arrays/linear_search_4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once again, we’re out of luck, so the computer moves to the next cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/understanding_arrays/linear_search_5.png](images/understanding_arrays/linear_search_5.png)'
  prefs: []
  type: TYPE_IMG
- en: Aha! We’ve found the elusive "dates" and now know that the "dates" are found
    at index 3\. At this point, the computer doesn’t need to move on to the next cell
    of the array, since it already found what we’re looking for.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, because the computer had to check four different cells until
    it found the value we were searching for, we’d say that this particular operation
    took a total of four steps.
  prefs: []
  type: TYPE_NORMAL
- en: In Chapter 2, [​*Why Algorithms Matter*​](f_0024.xhtml#chp.binary_search), you’ll
    learn about another way to search an array, but this basic search operation—in
    which the computer checks each cell one at a time—is known as linear search.
  prefs: []
  type: TYPE_NORMAL
- en: Now, what is the maximum number of steps a computer would need to perform to
    conduct a linear search on an array?
  prefs: []
  type: TYPE_NORMAL
- en: If the value we’re seeking happens to be in the final cell in the array (like
    "elderberries"), then the computer would end up searching through every cell of
    the array until it finally finds the value it’s looking for. Also, if the value
    we’re looking for doesn’t occur in the array at all, the computer likewise would
    have to search every cell so that it can be sure the value doesn’t exist within
    the array.
  prefs: []
  type: TYPE_NORMAL
- en: So it turns out that for an array of 5 cells, the maximum number of steps linear
    search would take is 5\. For an array of 500 cells, the maximum number of steps
    linear search would take is 500.
  prefs: []
  type: TYPE_NORMAL
- en: Another way of saying this is that for N cells in an array, linear search would
    take a maximum of N steps. In this context, N is just a variable that can be replaced
    by any number.
  prefs: []
  type: TYPE_NORMAL
- en: In any case, it’s clear that searching is less efficient than reading, since
    searching can take many steps, while reading always takes just one step, no matter
    the length of the array.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll analyze the operation of insertion.
  prefs: []
  type: TYPE_NORMAL
