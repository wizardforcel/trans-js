- en: Searching
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 搜索
- en: As I stated previously, searching an array means looking to see whether a particular
    value exists within an array and if so, at which index it’s located。
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 正如我之前所说，搜索数组意味着查看某个特定值是否存在于数组中，以及它位于哪个索引。
- en: In a sense, it’s the inverse of reading。Reading means providing the computer
    an index and asking it to return the value contained there。Searching, on the other
    hand, means providing the computer a value and asking it to return the index of
    that value’s location。
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 从某种意义上说，这与读取是相反的。读取意味着提供一个索引给计算机，并要求它返回其中包含的值。而搜索则是提供一个值给计算机，并要求它返回该值的位置索引。
- en: While these two operations sound similar, there’s a world of difference between
    them when it comes to efficiency。Reading from an index is fast, since a computer
    can jump immediately to any index and discover the value contained there。Searching,
    though, is tedious since the computer has no way to immediately locate a particular
    value。
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 虽然这两种操作听起来相似，但在效率方面却有天壤之别。读取索引是快速的，因为计算机可以立即跳转到任何索引并发现其中包含的值。而搜索则是繁琐的，因为计算机无法立即定位特定值。
- en: 'This is an important fact about computers: a computer has immediate access
    to all of its memory addresses, but it has no idea offhand what values are contained
    at each memory address。'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是一个关于计算机的重要事实：计算机可以立即访问所有内存地址，但它并不知道每个内存地址包含什么值。
- en: Let’s take our earlier array of fruits and veggies, for example。The computer
    can’t immediately see the actual contents of each cell。To the computer, the array
    looks something like this：
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以我们之前的水果和蔬菜数组为例。计算机无法立即看到每个单元的实际内容。对于计算机来说，数组看起来是这样的：
- en: '![images/understanding_arrays/linear_search_1.png](images/understanding_arrays/linear_search_1.png)'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/understanding_arrays/linear_search_1.png](images/understanding_arrays/linear_search_1.png)'
- en: To search for a fruit within the array, the computer has no choice but to inspect
    the content of the cells，one at a time。
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要在数组中搜索一种水果，计算机别无选择，只能逐个检查单元的内容。
- en: The following diagrams demonstrate the process the computer would use to search
    for`"dates"` within our array。
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 下图展示了计算机在我们的数组中搜索`"dates"`的过程。
- en: First, the computer checks index`0`：
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 首先，计算机检查索引`0`：
- en: '![images/understanding_arrays/linear_search_2.png](images/understanding_arrays/linear_search_2.png)'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/understanding_arrays/linear_search_2.png](images/understanding_arrays/linear_search_2.png)'
- en: Since the value at index`0` is`"apples"`，and not the`"dates"` we’re looking
    for, the computer moves on to the next index, as shown in the [diagram](#fig.ch1.linear_search_3)。
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 由于索引`0`的值是`"apples"`，而不是我们要找的`"dates"`，计算机继续检查下一个索引，如[图](#fig.ch1.linear_search_3)所示。
- en: '![images/understanding_arrays/linear_search_3.png](images/understanding_arrays/linear_search_3.png)'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/understanding_arrays/linear_search_3.png](images/understanding_arrays/linear_search_3.png)'
- en: Since index`1` doesn’t contain the`"dates"` we’re looking for either, the computer
    moves on to index`2`：
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 由于索引`1`也不包含我们要找的`"dates"`，计算机继续检查索引`2`：
- en: '![images/understanding_arrays/linear_search_4.png](images/understanding_arrays/linear_search_4.png)'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/understanding_arrays/linear_search_4.png](images/understanding_arrays/linear_search_4.png)'
- en: Once again, we’re out of luck, so the computer moves to the next cell：
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们再次失利，所以计算机移动到下一个单元：
- en: '![images/understanding_arrays/linear_search_5.png](images/understanding_arrays/linear_search_5.png)'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/understanding_arrays/linear_search_5.png](images/understanding_arrays/linear_search_5.png)'
- en: Aha! We’ve found the elusive`"dates"` and now know that the`"dates"` are found
    at index`3`。At this point, the computer doesn’t need to move on to the next cell
    of the array, since it already found what we’re looking for。
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 啊！我们找到了难以捉摸的`"dates"`，现在知道`"dates"`位于索引`3`。此时，计算机无需继续检查数组的下一个单元，因为它已经找到了我们要找的内容。
- en: In this example, because the computer had to check four different cells until
    it found the value we were searching for, we’d say that this particular operation
    took a total of four steps。
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个例子中，由于计算机必须检查四个不同的单元，直到找到我们要搜索的值，我们可以说这个特定操作总共花费了四个步骤。
- en: In Chapter 2, [​*Why Algorithms Matter*​](f_0024.xhtml#chp.binary_search)，you’ll
    learn about another way to search an array, but this basic search operation—in
    which the computer checks each cell one at a time—is known as linear search。
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在第二章，[​*算法为何重要*​](f_0024.xhtml#chp.binary_search)中，你将学习另一种搜索数组的方法，但这种基本的搜索操作——计算机逐个检查每个单元——被称为线性搜索。
- en: Now, what is the maximum number of steps a computer would need to perform to
    conduct a `linear search` on an array?
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 那么，计算机在对数组进行`线性搜索`时，最多需要执行多少步呢？
- en: If the value we’re seeking happens to be in the final cell in the array (like
    `"elderberries"`), then the computer would end up searching through every cell
    of the array until it finally finds the value it’s looking for. Also, if the value
    we’re looking for doesn’t occur in the array at all, the computer likewise would
    have to search every cell so that it can be sure the value doesn’t exist within
    the array.
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果我们要寻找的值恰好在数组的最后一个单元格中（比如说`"elderberries"`），那么计算机最终会搜索数组中的每一个单元格，直到找到它所寻找的值。此外，如果我们要寻找的值根本不在数组中，计算机同样需要搜索每一个单元格，以确保该值在数组中不存在。
- en: So it turns out that for an array of 5 cells, the maximum number of steps `linear
    search` would take is 5\. For an array of 500 cells, the maximum number of steps
    `linear search` would take is 500.
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因此，对于一个包含5个单元格的数组，`线性搜索`最多需要执行5步。对于一个包含500个单元格的数组，`线性搜索`最多需要执行500步。
- en: Another way of saying this is that for `N` cells in an array, `linear search`
    would take a maximum of `N` steps. In this context, `N` is just a variable that
    can be replaced by any number.
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 换句话说，对于数组中的`N`个单元格，`线性搜索`最多需要`N`步。在这个上下文中，`N`只是一个可以被任何数字替代的变量。
- en: In any case, it’s clear that searching is less efficient than reading, since
    searching can take many steps, while reading always takes just one step, no matter
    the length of the array.
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 无论如何，很明显搜索的效率低于读取，因为搜索可能需要多步，而读取无论数组的长度如何始终只需一步。
- en: Next, we’ll analyze the operation of `insertion`.
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 接下来，我们将分析`插入`操作。
