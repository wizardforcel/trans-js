- en: 'Module 17:'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 第 17 模块：
- en: '|'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Vue.js and Mobile Development
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 和移动开发
- en: '|'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'In the era of mobile computing, the demand for responsive and cross-platform
    applications has skyrocketed. The module "Vue.js and Mobile Development" takes
    a central role in the book "Vue.js Essentials: For Responsive Web Development,"
    guiding readers through the intricate process of building mobile-friendly applications
    using Vue.js. Within these pages, developers will gain comprehensive insights
    into mobile development strategies, responsive design principles, and Vue.js features
    tailored for creating seamless user experiences on a variety of mobile devices.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动计算时代，对响应式和跨平台应用的需求激增。本模块《Vue.js 与移动开发》在《Vue.js 基础：响应式 Web 开发》一书中占据核心地位，引导读者通过使用
    Vue.js 构建移动友好型应用的复杂过程。在这些页面中，开发者将获得关于移动开发策略、响应式设计原理和 Vue.js 功能的全面洞察，帮助他们在各种移动设备上创建无缝的用户体验。
- en: Mobile Development Landscape and the Need for Responsiveness
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 移动开发现状及响应式需求
- en: Before delving into the specifics of Vue.js in mobile development, it is essential
    to recognize the evolving landscape of mobile technology and the imperative need
    for responsive applications. This module initiates by highlighting the prevalence
    of mobile devices, ranging from smartphones to tablets, and the diverse ecosystems
    they operate in. Readers will gain an understanding of the challenges posed by
    varied screen sizes, touch interactions, and different platforms, setting the
    stage for the importance of responsive design in Vue.js mobile applications.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨 Vue.js 在移动开发中的应用之前，首先需要认识到移动技术的不断发展以及响应式应用的迫切需求。本模块通过强调智能手机、平板电脑等移动设备的普及，以及它们所处的多样化生态系统来开篇。读者将了解由不同屏幕尺寸、触控交互和平台差异带来的挑战，为理解响应式设计在
    Vue.js 移动应用中的重要性打下基础。
- en: 'Responsive Design Principles in Vue.js: Adapting to Varying Screen Sizes'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 中的响应式设计原理：适应不同屏幕尺寸
- en: This segment explores the principles of responsive design within the context
    of Vue.js mobile development. Developers will delve into strategies for creating
    flexible and adaptive layouts using Vue.js features such as dynamic styles, media
    queries, and flexible components. By mastering responsive design principles, developers
    can ensure that Vue.js applications seamlessly adapt to different screen sizes,
    providing an optimal viewing and interaction experience on both small and large
    screens.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本节探讨了在 Vue.js 移动开发背景下响应式设计的原理。开发者将深入研究如何使用 Vue.js 的功能，如动态样式、媒体查询和灵活组件，创建灵活且适应性强的布局。通过掌握响应式设计原理，开发者可以确保
    Vue.js 应用程序能够无缝适应不同的屏幕尺寸，提供在大屏和小屏上的最佳浏览和交互体验。
- en: Vue.js for Mobile Navigation and Touch Interactions
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 在移动导航和触控交互中的应用
- en: Central to the success of mobile applications is an efficient navigation system
    and intuitive touch interactions. This module delves into Vue.js features tailored
    for mobile navigation, such as the Vue Router, and explores strategies for creating
    touch-friendly interfaces. Readers will gain insights into building navigation
    menus, handling touch gestures, and optimizing Vue.js components for smooth and
    responsive interactions on mobile devices.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用成功的核心在于高效的导航系统和直观的触摸交互。本模块深入研究了专为移动导航量身定制的 Vue.js 功能，如 Vue Router，并探索创建触摸友好界面的策略。读者将了解如何构建导航菜单、处理触摸手势以及优化
    Vue.js 组件，以实现移动设备上流畅、响应迅速的交互体验。
- en: 'Vue.js and Cross-Platform Development: Navigating Hybrid and Native Approaches'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 与跨平台开发：探索混合与原生方法
- en: The module navigates through the landscape of cross-platform development in
    the context of Vue.js. Readers will explore strategies for building mobile applications
    that can be deployed across multiple platforms, including hybrid frameworks like
    Cordova and native approaches like Vue Native. By understanding the nuances of
    each approach, developers can choose the best-suited method for their Vue.js mobile
    projects, balancing factors like performance, code reusability, and platform-specific
    features.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本模块探讨了在 Vue.js 环境下的跨平台开发。读者将探索构建可部署到多个平台的移动应用程序的策略，包括 Cordova 等混合框架和 Vue Native
    等原生方法。通过理解每种方法的细微差别，开发者可以为其 Vue.js 移动项目选择最适合的开发方式，平衡性能、代码重用性和平台特定特性等因素。
- en: '"Vue.js and Mobile Development" stands as a pivotal module within "Vue.js Essentials:
    For Responsive Web Development," providing readers with a comprehensive guide
    to building responsive and cross-platform applications using Vue.js. By unraveling
    the landscape of mobile development, exploring responsive design principles, addressing
    mobile navigation and touch interactions, and navigating cross-platform approaches,
    developers gain the knowledge and skills needed to create Vue.js applications
    that deliver a seamless and engaging user experience across a diverse array of
    mobile devices. This module serves as an indispensable resource for developers
    committed to crafting mobile-friendly applications that harness the power and
    versatility of Vue.js.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 《Vue.js 与移动开发》是《Vue.js 基础：响应式网页开发》中的一个重要模块，为读者提供了使用 Vue.js 构建响应式和跨平台应用程序的全面指南。通过揭示移动开发的全景，探索响应式设计原则，解决移动导航和触摸交互问题，并深入探讨跨平台方法，开发者能够获得必要的知识和技能，创建能够在各种移动设备上提供无缝且引人入胜的用户体验的
    Vue.js 应用程序。本模块是致力于开发适配移动设备的应用程序并充分发挥 Vue.js 强大功能和多样性的开发者必备资源。
- en: Responsive Design with Vue.js
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Vue.js 实现响应式设计
- en: 'In the module "Vue.js and Mobile Development" from the book "Vue.js Essentials:
    For Responsive Web Development," the section on responsive design with Vue.js
    explores strategies for creating adaptable and user-friendly interfaces that cater
    to various devices and screen sizes. This section emphasizes the importance of
    responsive design in the Vue.js ecosystem, providing insights into techniques
    and best practices to ensure an optimal user experience across different devices.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '在《Vue.js Essentials: For Responsive Web Development》一书的“Vue.js 与移动开发”模块中，关于
    Vue.js 响应式设计的部分探讨了如何创建适应性强且用户友好的界面，以满足不同设备和屏幕尺寸的需求。本节强调了响应式设计在 Vue.js 生态系统中的重要性，提供了确保在不同设备上获得最佳用户体验的技术和最佳实践。'
- en: Media Queries and Vue.js Components
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体查询与 Vue.js 组件
- en: The section begins by introducing the fundamental concept of media queries and
    their synergy with Vue.js components. Developers are guided on how to leverage
    CSS media queries to conditionally apply styles based on the device's characteristics.
    Practical examples demonstrate the integration of media queries within Vue.js
    component styles, ensuring that the layout and presentation adapt gracefully to
    different screen sizes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本节首先介绍了媒体查询的基本概念及其与 Vue.js 组件的协同作用。开发者将学习如何利用 CSS 媒体查询根据设备特性有条件地应用样式。通过实际示例，展示了媒体查询如何与
    Vue.js 组件样式集成，确保布局和呈现能够优雅地适应不同的屏幕尺寸。
- en: <template>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div class="responsive-container">
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: <div class="responsive-container">
- en: <!-- Component content -->
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- 组件内容 -->
- en: </div>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <style scoped>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: <style scoped>
- en: .responsive-container {
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: .responsive-container {
- en: 'width: 100%;'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 'width: 100%;'
- en: '}'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '@media (min-width: 768px) {'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '@media (min-width: 768px) {'
- en: .responsive-container {
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: .responsive-container {
- en: 'max-width: 768px;'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 'max-width: 768px;'
- en: 'margin: 0 auto;'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 'margin: 0 auto;'
- en: '}'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: In this code snippet, the responsive container adapts its width based on the
    screen size, with a maximum width of 768 pixels for larger screens.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码片段中，响应式容器根据屏幕大小调整其宽度，对于大屏幕最大宽度为 768 像素。
- en: Vue.js Directives for Responsive Behavior
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 指令用于响应式行为
- en: The section explores Vue.js directives as powerful tools for achieving responsive
    behavior within components. Developers are introduced to directives like v-if
    and v-show to conditionally render or display elements based on screen characteristics.
    Additionally, the use of the v-bind directive facilitates dynamic styling based
    on computed properties, enabling a responsive design approach within Vue.js components.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 本节探讨了 Vue.js 指令作为实现组件响应式行为的强大工具。开发者将学习如何使用像 v-if 和 v-show 这样的指令，根据屏幕特性有条件地渲染或显示元素。此外，使用
    v-bind 指令可以根据计算属性动态调整样式，从而在 Vue.js 组件中实现响应式设计。
- en: <template>
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h1 v-if="isLargeScreen">Large Screen Heading</h1>
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <h1 v-if="isLargeScreen">大屏幕标题</h1>
- en: <h1 v-else>Small Screen Heading</h1>
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <h1 v-else>小屏幕标题</h1>
- en: </div>
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'isLargeScreen: window.innerWidth >= 768,'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 'isLargeScreen: window.innerWidth >= 768,'
- en: '};'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: mounted() {
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: mounted() {
- en: window.addEventListener('resize', this.handleResize);
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: window.addEventListener('resize', this.handleResize);
- en: '},'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: handleResize() {
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: handleResize() {
- en: this.isLargeScreen = window.innerWidth >= 768;
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: this.isLargeScreen = window.innerWidth >= 768;
- en: '},'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: This example demonstrates the use of the v-if directive to conditionally render
    different headings based on the screen size, with dynamic updating triggered by
    the window resize event.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例演示了如何使用 v-if 指令根据屏幕尺寸有条件地渲染不同的标题，并通过窗口大小调整事件动态更新。
- en: Vue Router and Mobile Navigation
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Vue Router 与移动端导航
- en: The section extends its focus to mobile navigation using Vue Router, an essential
    aspect of responsive design. Developers are guided on adapting navigation structures
    for mobile devices, implementing navigation drawers, and creating a seamless user
    experience for both desktop and mobile users. Code snippets demonstrate the integration
    of Vue Router to achieve responsive navigation in Vue.js applications.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分扩展了使用 Vue Router 进行移动端导航的内容，这是响应式设计的一个重要方面。开发者将学习如何为移动设备调整导航结构，实施导航抽屉，并为桌面和移动用户创造无缝的用户体验。代码示例展示了如何集成
    Vue Router，实现 Vue.js 应用中的响应式导航。
- en: <template>
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <router-link to="/">Home</router-link>
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: <router-link to="/">首页</router-link>
- en: <router-link to="/about">About</router-link>
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <router-link to="/about">关于</router-link>
- en: <!-- Additional navigation links -->
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- 其他导航链接 -->
- en: </template>
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: By leveraging Vue Router, developers can seamlessly transition between different
    views and adapt the navigation structure to suit the varying needs of users on
    different devices.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用 Vue Router，开发者可以在不同视图之间无缝切换，并根据不同设备用户的需求调整导航结构。
- en: The "Responsive Design with Vue.js" section provides developers with a comprehensive
    understanding of responsive design principles and their integration within Vue.js
    applications. By incorporating media queries, Vue.js directives, and Vue Router,
    developers can create versatile and user-friendly interfaces that deliver a consistent
    and engaging experience across a spectrum of devices.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: “使用 Vue.js 进行响应式设计”部分为开发者提供了响应式设计原理的全面理解，并讲解了如何将这些原理整合到 Vue.js 应用中。通过使用媒体查询、Vue.js
    指令和 Vue Router，开发者可以创建多功能、用户友好的界面，在各种设备上提供一致且吸引人的体验。
- en: Building Mobile-First Vue.js Apps
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建移动优先的 Vue.js 应用
- en: 'In the module "Vue.js and Mobile Development" from the book "Vue.js Essentials:
    For Responsive Web Development," the section on building mobile-first Vue.js apps
    underscores the significance of prioritizing mobile design considerations from
    the outset. This section provides developers with insights into adopting a mobile-first
    approach, optimizing performance, and leveraging Vue.js features to ensure a seamless
    and responsive experience on mobile devices.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在《Vue.js 精要：响应式网页开发》一书中的“Vue.js 与移动开发”模块中，关于构建移动优先的 Vue.js 应用的部分强调了从一开始就优先考虑移动端设计的重要性。该部分为开发者提供了有关采纳移动优先策略、优化性能以及利用
    Vue.js 特性确保移动设备上无缝响应体验的见解。
- en: Mobile-First Design Principles
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 移动优先设计原则
- en: The section commences by elucidating the core principles of mobile-first design,
    emphasizing the importance of designing for smaller screens before scaling up
    to larger ones. Developers are encouraged to prioritize essential content and
    functionalities for mobile users, creating a foundation that progressively enhances
    as the screen size expands. This approach ensures a streamlined and efficient
    experience on mobile devices, aligning with the preferences and behaviors of an
    increasingly mobile-centric user base.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 本节首先阐述了移动优先设计的核心原则，强调在设计时应优先考虑小屏幕的布局，再逐步扩展到更大的屏幕。开发者被鼓励优先考虑移动用户的核心内容和功能，为移动设备创建一个基础，随着屏幕尺寸的增大逐步优化设计。这种方法确保了在移动设备上的简洁高效体验，符合日益倾向移动设备的用户行为和偏好。
- en: <!-- Mobile-first CSS styles -->
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- 移动优先的 CSS 样式 -->
- en: <style scoped>
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: <style scoped>
- en: .mobile-content {
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: .mobile-content {
- en: /* Styles for mobile devices */
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: /* 针对移动设备的样式 */
- en: '}'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '@media (min-width: 768px) {'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '@media (min-width: 768px) {'
- en: .mobile-content {
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: .mobile-content {
- en: /* Additional styles for larger screens */
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: /* 针对大屏幕设备的附加样式 */
- en: '}'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: In this code snippet, the CSS styles are initially tailored for mobile devices
    and then extended for larger screens using a media query.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，CSS 样式最初为移动设备量身定制，随后通过媒体查询扩展到更大的屏幕。
- en: Vue.js Components for Mobile Optimization
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 组件用于移动优化
- en: The section dives into leveraging Vue.js components to optimize the user interface
    for mobile devices. Developers are guided on structuring components to prioritize
    mobile layouts, utilizing flexible grids, and incorporating touch-friendly interactions.
    Practical examples demonstrate the integration of Vue.js directives such as v-if
    and v-else to conditionally render content based on screen size, ensuring an adaptive
    and responsive design.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 本节深入探讨了如何利用 Vue.js 组件优化移动设备的用户界面。开发者将学习如何结构化组件，优先考虑移动布局，使用灵活的网格布局，并结合触摸友好的交互方式。实际示例演示了如何使用
    Vue.js 指令，如 v-if 和 v-else，根据屏幕尺寸条件渲染内容，确保设计具有适应性和响应性。
- en: <template>
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <div v-if="isMobile" class="mobile-content">
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: <div v-if="isMobile" class="mobile-content">
- en: <!-- Mobile-specific content -->
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- 针对移动设备的内容 -->
- en: </div>
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: <div v-else class="desktop-content">
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: <div v-else class="desktop-content">
- en: <!-- Desktop-specific content -->
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- 针对桌面设备的内容 -->
- en: </div>
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </div>
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'isMobile: window.innerWidth < 768,'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 'isMobile: window.innerWidth < 768,'
- en: '};'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: mounted() {
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: mounted() {
- en: window.addEventListener('resize', this.handleResize);
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: window.addEventListener('resize', this.handleResize);
- en: '},'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: handleResize() {
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: handleResize() {
- en: this.isMobile = window.innerWidth < 768;
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: this.isMobile = window.innerWidth < 768;
- en: '},'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: This example showcases the dynamic rendering of content based on the screen
    size using the v-if directive, coupled with a responsive approach to window resizing.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例展示了如何使用 v-if 指令根据屏幕尺寸动态渲染内容，并结合响应式的窗口调整方法。
- en: Vue.js and Progressive Web Apps (PWAs)
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 和渐进式 Web 应用（PWA）
- en: The section extends its focus to building Progressive Web Apps (PWAs) with Vue.js,
    emphasizing the advantages of this approach for mobile users. Developers are guided
    on incorporating service workers, enabling offline functionality, and optimizing
    the performance of Vue.js applications for mobile networks. Code snippets demonstrate
    the integration of Vue CLI plugins to facilitate the creation of PWAs.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章节进一步扩展了使用 Vue.js 构建渐进式 Web 应用（PWA）的内容，强调这种方法对移动用户的优势。开发者将学习如何集成 service workers，启用离线功能，并优化
    Vue.js 应用在移动网络下的性能。代码示例展示了如何通过 Vue CLI 插件简化 PWA 的创建过程。
- en: vue add pwa
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: vue add pwa
- en: By adding the PWA plugin through the Vue CLI, developers can effortlessly transform
    their Vue.js applications into Progressive Web Apps, enhancing the user experience
    with features like offline access and improved performance.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Vue CLI 添加 PWA 插件，开发者可以轻松将 Vue.js 应用转化为渐进式 Web 应用，从而增强用户体验，如提供离线访问和提升性能等功能。
- en: The "Building Mobile-First Vue.js Apps" section equips developers with the knowledge
    and tools needed to embrace a mobile-first approach in Vue.js development. By
    adhering to mobile-first design principles, optimizing Vue.js components for mobile
    devices, and exploring the potential of Progressive Web Apps, developers can create
    applications that not only meet the expectations of mobile users but also deliver
    a responsive and engaging experience across diverse devices and network conditions.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: “构建移动优先的 Vue.js 应用”章节为开发者提供了采用移动优先策略的知识和工具。通过遵循移动优先的设计原则，优化 Vue.js 组件以适应移动设备，并探索渐进式
    Web 应用的潜力，开发者能够创建出不仅满足移动用户期望，还能在各种设备和网络条件下提供响应迅速、引人入胜的体验的应用。
- en: Cordova and Vue.js for Cross-Platform Mobile Apps
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cordova 和 Vue.js 跨平台移动应用开发
- en: 'Within the module "Vue.js and Mobile Development" in the book "Vue.js Essentials:
    For Responsive Web Development," the section on Cordova and Vue.js explores the
    integration of these technologies to develop cross-platform mobile applications.
    This section provides a comprehensive guide for developers seeking to leverage
    Cordova alongside Vue.js, enabling them to create hybrid mobile apps that run
    seamlessly across different platforms.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '在《Vue.js Essentials: For Responsive Web Development》一书中的“Vue.js 和移动开发”模块中，关于
    Cordova 和 Vue.js 的章节探讨了这两种技术的集成，旨在开发跨平台的移动应用。该章节为开发者提供了全面的指南，帮助他们在 Vue.js 中利用
    Cordova，创建能够在不同平台上无缝运行的混合移动应用。'
- en: Introduction to Cordova and Vue.js Integration
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Cordova 和 Vue.js 集成简介
- en: The section begins by introducing Apache Cordova, a platform for building native
    mobile applications using web technologies, and its integration with Vue.js. Developers
    are guided through the process of setting up a Cordova project, configuring dependencies,
    and establishing the foundation for building cross-platform mobile applications.
    This integration allows Vue.js developers to use their existing skills to create
    mobile apps without delving into native development languages.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 本节首先介绍了 Apache Cordova，这是一个使用 Web 技术构建原生移动应用的平台，并展示了它与 Vue.js 的集成。开发者将了解如何设置
    Cordova 项目、配置依赖关系，以及为构建跨平台移动应用奠定基础。这种集成使得 Vue.js 开发者可以利用现有的技能，创建移动应用，而无需深入学习原生开发语言。
- en: cordova create my-vue-app
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: cordova create my-vue-app
- en: cd my-vue-app
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: cd my-vue-app
- en: cordova platform add android
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: cordova platform add android
- en: This code snippet demonstrates the initial setup of a Cordova project named
    "my-vue-app" with Android as the targeted platform.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码片段展示了名为 "my-vue-app" 的 Cordova 项目的初始设置，目标平台为 Android。
- en: Vue.js Components in Cordova Applications
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 组件在 Cordova 应用中的应用
- en: The section delves into the seamless integration of Vue.js components within
    Cordova applications. Developers are provided with insights into structuring Vue.js
    components to fit within the Cordova application architecture. Practical examples
    showcase the creation of Vue.js components that serve as the building blocks for
    the user interface of cross-platform mobile apps.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 本节深入探讨了 Vue.js 组件在 Cordova 应用中的无缝集成。开发者将获得有关如何构建符合 Cordova 应用架构的 Vue.js 组件的见解。实际示例展示了如何创建
    Vue.js 组件，这些组件作为跨平台移动应用用户界面的构建模块。
- en: <template>
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h1>{{ appTitle }}</h1>
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: <h1>{{ appTitle }}</h1>
- en: <!-- Additional Vue.js components -->
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- 额外的 Vue.js 组件 -->
- en: </div>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'appTitle: ''My Cordova Vue App'','
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 'appTitle: ''我的 Cordova Vue 应用'','
- en: '};'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In this example, a basic Vue.js component is integrated into a Cordova application,
    showcasing the usage of the appTitle data property.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，一个基本的 Vue.js 组件被集成到 Cordova 应用程序中，展示了 appTitle 数据属性的使用。
- en: Navigating Between Views with Vue Router and Cordova
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Vue Router 和 Cordova 在视图之间导航
- en: The section explores navigation in Cordova applications by integrating Vue Router.
    Developers are guided on setting up routes, navigating between views, and managing
    the application's state seamlessly. Code snippets illustrate the incorporation
    of Vue Router into a Cordova project, enabling developers to create structured
    and dynamic navigation within their cross-platform mobile applications.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 本节通过集成 Vue Router 探讨了在 Cordova 应用中的导航。开发者将了解如何设置路由、在视图之间导航，以及如何无缝管理应用程序的状态。代码示例展示了如何将
    Vue Router 融入到 Cordova 项目中，从而使开发者能够在他们的跨平台移动应用中创建结构化且动态的导航。
- en: npm install vue-router
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: npm install vue-router
- en: This command installs the Vue Router package, an essential dependency for managing
    routes in a Vue.js application within a Cordova project.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令安装了 Vue Router 包，这是在 Cordova 项目中管理 Vue.js 应用路由的必要依赖。
- en: Accessing Device Features with Cordova Plugins
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Cordova 插件访问设备功能
- en: A highlight of this section is the utilization of Cordova plugins to access
    device features. Developers are introduced to a variety of Cordova plugins that
    facilitate interactions with native device functionalities such as camera, geolocation,
    and device sensors. Practical code examples demonstrate the integration of Cordova
    plugins within Vue.js components, unlocking the potential to create feature-rich
    cross-platform mobile applications.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的亮点是利用 Cordova 插件访问设备功能。开发者将接触到多种 Cordova 插件，这些插件可以便捷地与设备的本地功能（如相机、地理定位和设备传感器）进行交互。通过实际的代码示例，展示了如何在
    Vue.js 组件中集成 Cordova 插件，释放出开发功能丰富的跨平台移动应用的潜力。
- en: cordova plugin add cordova-plugin-camera
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: cordova plugin add cordova-plugin-camera
- en: This command adds the Cordova Camera plugin, allowing Vue.js developers to easily
    incorporate camera functionality into their cross-platform mobile apps.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令添加了 Cordova Camera 插件，使 Vue.js 开发者能够轻松将相机功能集成到他们的跨平台移动应用中。
- en: The "Cordova and Vue.js for Cross-Platform Mobile Apps" section equips developers
    with the knowledge and practical skills needed to harness the capabilities of
    Cordova and Vue.js for creating versatile and cross-platform mobile applications.
    By seamlessly integrating Vue.js components, managing navigation with Vue Router,
    and leveraging Cordova plugins for device interactions, developers can extend
    their Vue.js expertise into the realm of cross-platform mobile development, offering
    a unified experience for users across various mobile platforms.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: “Cordova 和 Vue.js 跨平台移动应用”部分为开发者提供了必备的知识和实用技能，帮助他们利用 Cordova 和 Vue.js 的功能创建多用途的跨平台移动应用。通过无缝集成
    Vue.js 组件、使用 Vue Router 管理导航，并通过 Cordova 插件实现设备交互，开发者可以将其 Vue.js 专业技能扩展到跨平台移动开发领域，为不同平台的用户提供统一的体验。
- en: Integrating Native Features with Vue Native
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Vue Native 集成本地功能
- en: 'In the module "Vue.js and Mobile Development" from the book "Vue.js Essentials:
    For Responsive Web Development," the section on integrating native features with
    Vue Native explores the seamless fusion of Vue.js with native mobile capabilities.
    Vue Native, a framework for building cross-platform mobile applications using
    Vue.js, serves as the focal point for this section. Developers are introduced
    to the methodology of incorporating native features into Vue Native applications,
    offering a bridge between web development and native mobile functionalities.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '在《Vue.js Essentials: For Responsive Web Development》一书的“Vue.js 和移动开发”模块中，关于将本地功能与
    Vue Native 集成的部分，探讨了 Vue.js 与本地移动能力的无缝融合。Vue Native 是一个基于 Vue.js 构建跨平台移动应用的框架，它是本节的核心内容。开发者将了解如何将本地功能集成到
    Vue Native 应用中，从而架起了网页开发与本地移动功能之间的桥梁。'
- en: Introduction to Vue Native and NativeScript-Vue
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Vue Native 和 NativeScript-Vue 简介
- en: The section commences by introducing Vue Native as an extension of Vue.js specifically
    tailored for mobile app development. Additionally, it touches upon NativeScript-Vue,
    an alternative approach for creating native mobile apps with Vue.js. Developers
    gain insights into setting up a Vue Native project, configuring dependencies,
    and establishing a development environment that seamlessly integrates with native
    capabilities.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 本节开始时介绍了 Vue Native，作为专为移动应用开发量身定制的 Vue.js 扩展。此外，还简要介绍了 NativeScript-Vue，这是一种使用
    Vue.js 创建原生移动应用的替代方法。开发者将学习如何设置 Vue Native 项目、配置依赖项，并建立与原生功能无缝集成的开发环境。
- en: vue init vuejs-templates/vue-native-template my-vue-native-app
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: vue init vuejs-templates/vue-native-template my-vue-native-app
- en: cd my-vue-native-app
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: cd my-vue-native-app
- en: npm install
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: npm install
- en: This code snippet demonstrates the initialization of a Vue Native project named
    "my-vue-native-app" using the Vue Native template and the subsequent installation
    of dependencies.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码片段展示了如何使用 Vue Native 模板初始化一个名为“my-vue-native-app”的 Vue Native 项目，并随后安装依赖项。
- en: Vue Native Components and Navigation
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Vue Native 组件与导航
- en: Developers are guided on the integration of Vue Native components to build the
    user interface of cross-platform mobile applications. The section emphasizes the
    usage of Vue Native's components, which closely resemble native mobile elements,
    to ensure a native look and feel. Practical examples illustrate the creation of
    navigation structures using Vue Native's built-in navigation components, providing
    a smooth and intuitive user experience.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 本节指导开发者如何整合 Vue Native 组件，构建跨平台移动应用的用户界面。重点强调 Vue Native 组件的使用，这些组件与原生移动元素非常相似，从而确保原生的外观和感觉。通过实际示例，展示了如何使用
    Vue Native 内置的导航组件创建导航结构，提供流畅且直观的用户体验。
- en: // Vue Native component example
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: // Vue Native 组件示例
- en: <template>
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <View>
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: <View>
- en: <Text>{{ message }}</Text>
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: <Text>{{ message }}</Text>
- en: </View>
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: </View>
- en: </template>
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'message: ''Hello from Vue Native!'','
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 'message: ''来自 Vue Native 的问候！'','
- en: '};'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In this example, a basic Vue Native component is showcased, featuring the View
    and Text components that closely resemble native mobile elements.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，展示了一个基本的 Vue Native 组件，包含 View 和 Text 组件，这些组件与原生移动元素非常相似。
- en: Accessing Device Features with Native Modules
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 使用原生模块访问设备功能
- en: The section delves into the integration of native modules to access device features
    in Vue Native applications. Developers are introduced to the concept of native
    modules, which serve as bridges between Vue.js and native functionalities such
    as camera, geolocation, and device sensors. Code examples demonstrate how to incorporate
    these native modules into Vue Native components, unlocking the potential to utilize
    the full spectrum of device capabilities.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 本节深入探讨了如何集成原生模块，以便在 Vue Native 应用中访问设备功能。开发者将了解原生模块的概念，原生模块作为 Vue.js 与相机、地理位置、设备传感器等原生功能之间的桥梁。代码示例展示了如何将这些原生模块集成到
    Vue Native 组件中，充分挖掘设备功能的潜力。
- en: // Native module integration example
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: // 原生模块集成示例
- en: import { Camera } from 'vue-native-camera';
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: import { Camera } from 'vue-native-camera';
- en: export default {
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: 'components: {'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 'components: {'
- en: Camera,
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Camera,
- en: '},'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: This code snippet illustrates the integration of the Vue Native Camera module
    into a Vue Native component, enabling developers to easily incorporate camera
    functionality.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码示例展示了如何将 Vue Native 相机模块集成到 Vue Native 组件中，使开发者能够轻松地添加相机功能。
- en: Enhancing Performance with NativeScript-Vue Directives
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 NativeScript-Vue 指令提升性能
- en: The section concludes by highlighting how developers can enhance performance
    in Vue Native applications using NativeScript-Vue directives. Developers gain
    insights into leveraging directives for optimizing UI rendering, ensuring a smooth
    and responsive user experience. Practical examples showcase the integration of
    directives within Vue Native components to boost performance.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 本节通过强调开发者如何使用 NativeScript-Vue 指令来提升 Vue Native 应用的性能来做总结。开发者可以深入了解如何利用指令来优化
    UI 渲染，确保流畅且响应迅速的用户体验。实际示例展示了指令如何集成到 Vue Native 组件中以提高性能。
- en: <!-- NativeScript-Vue directive example -->
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- NativeScript-Vue 指令示例 -->
- en: <template>
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <Label v-tkExampleDirective>{{ message }}</Label>
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: <Label v-tkExampleDirective>{{ message }}</Label>
- en: </template>
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'message: ''Optimizing Vue Native with Directives'','
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 'message: ''使用指令优化 Vue Native'','
- en: '};'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: This example illustrates the usage of the NativeScript-Vue directive (v-tkExampleDirective)
    within a Vue Native component to enhance performance.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例展示了如何在 Vue Native 组件中使用 NativeScript-Vue 指令 (v-tkExampleDirective) 来提升性能。
- en: The "Integrating Native Features with Vue Native" section equips developers
    with the knowledge and practical skills needed to seamlessly integrate Vue.js
    with native mobile capabilities. Through Vue Native's components, navigation structures,
    native modules, and performance-enhancing directives, developers can create cross-platform
    mobile applications that leverage the strengths of both Vue.js and native mobile
    development, offering a powerful and versatile solution for mobile app development.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '"使用 Vue Native 集成原生功能" 章节为开发者提供了无缝集成 Vue.js 和原生移动能力所需的知识和实用技能。通过 Vue Native
    的组件、导航结构、原生模块和性能增强指令，开发者可以创建跨平台移动应用程序，充分利用 Vue.js 和原生移动开发的优势，为移动应用开发提供强大而多样化的解决方案。'
