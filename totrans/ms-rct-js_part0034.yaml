- en: 'Chapter 13: Frontend Frameworks: Angular'
  id: totrans-0
  prefs:
  - PREF_H1
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 13 章：前端框架：Angular
- en: 'In Chapter 12, we explored React, a powerful JavaScript library for building
    user interfaces. Now, let''s delve into another popular frontend framework: Angular.
    Developed and maintained by Google, Angular is a comprehensive framework that
    simplifies the process of building dynamic and scalable web applications. Angular
    follows a component-based architecture and provides a rich set of features for
    managing data, handling routing, and interacting with APIs. In this chapter, we
    will explore Angular, its key concepts, and how to build robust and feature-rich
    web applications using this frontend framework.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 12 章中，我们探讨了 React，一个强大的 JavaScript 库，用于构建用户界面。现在，让我们深入了解另一个流行的前端框架：Angular。Angular
    由 Google 开发和维护，是一个全面的框架，简化了构建动态和可扩展 Web 应用的过程。Angular 遵循基于组件的架构，并提供了一整套功能来管理数据、处理路由和与
    API 交互。在本章中，我们将深入探讨 Angular、它的关键概念，以及如何使用这个前端框架构建强大且功能丰富的 Web 应用。
- en: 1\. What is Angular?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 什么是 Angular？
- en: Angular is an open-source frontend framework for building single-page applications
    (SPAs) and dynamic web applications. It provides a complete solution for frontend
    development, including data binding, component-based architecture, dependency
    injection, and much more. Angular is written in TypeScript, a superset of JavaScript,
    which adds static typing and other features to enhance the development experience.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 是一个开源的前端框架，用于构建单页应用（SPA）和动态 Web 应用。它为前端开发提供了一个完整的解决方案，包括数据绑定、基于组件的架构、依赖注入等功能。Angular
    使用 TypeScript 编写，TypeScript 是 JavaScript 的超集，添加了静态类型和其他功能，以增强开发体验。
- en: 2\. Key Concepts of Angular
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. Angular 的关键概念
- en: 'To understand Angular, let''s explore its key concepts:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解 Angular，让我们探讨它的关键概念：
- en: a. Modules
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: a. 模块
- en: In Angular, modules are used to organize the application into logical blocks.
    A module is a container for related components, services, and other application
    features. Each Angular application has at least one root module, which is the
    entry point of the application.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Angular 中，模块用于将应用程序组织成逻辑模块。模块是相关组件、服务和其他应用功能的容器。每个 Angular 应用至少有一个根模块，它是应用程序的入口点。
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the above example, we define an Angular module with its metadata, including
    the components, directives, modules, services, and the root component to bootstrap
    the application.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们定义了一个 Angular 模块及其元数据，包括组件、指令、模块、服务和用于引导应用程序的根组件。
- en: b. Components
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: b. 组件
- en: Components are the building blocks of Angular applications. Each component is
    responsible for a specific section of the user interface and its associated behavior.
    Components can be reused throughout the application and communicate with other
    components using inputs and outputs.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 组件是 Angular 应用的构建块。每个组件负责用户界面的特定部分及其相关行为。组件可以在应用中重复使用，并通过输入和输出与其他组件进行通信。
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the above example, we define a simple Angular component called `GreetingComponent`,
    which displays a greeting message.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们定义了一个名为 `GreetingComponent` 的简单 Angular 组件，它显示问候消息。
- en: c. Templates
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: c. 模板
- en: Templates define the UI of an Angular component. They use Angular's template
    syntax, which is similar to HTML, to render dynamic content and data.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 模板定义了 Angular 组件的用户界面。它们使用 Angular 的模板语法，这与 HTML 相似，用于渲染动态内容和数据。
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the above example, we use a template in the `GreetingComponent` to display
    the greeting message with the dynamic `name` property.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们在 `GreetingComponent` 中使用模板来显示包含动态 `name` 属性的问候消息。
- en: d. Data Binding
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: d. 数据绑定
- en: 'Data binding in Angular allows us to synchronize data between the component
    and the template. There are four types of data binding:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 中的数据绑定允许我们在组件和模板之间同步数据。数据绑定有四种类型：
- en: '- Interpolation: Binding data from the component to the template using double
    curly braces `{{ }}`.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '- 插值绑定：使用双大括号 `{{ }}` 将数据从组件绑定到模板。'
- en: '- Property Binding: Binding data from the component to a DOM property.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '- 属性绑定：将数据从组件绑定到 DOM 属性。'
- en: '- Event Binding: Binding events from the template to the component.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '- 事件绑定：将事件从模板绑定到组件。'
- en: '- Two-Way Binding: Combining property and event binding to create a two-way
    data binding between the component and the template.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '- 双向绑定：将属性绑定和事件绑定结合起来，在组件和模板之间创建双向数据绑定。'
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the above example, we use data binding to display and update the `count`
    property.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们使用数据绑定来显示和更新 `count` 属性。
- en: e. Services
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: e. 服务
- en: Services in Angular are used to share data and logic across multiple components.
    They provide a way to centralize functionality and separate concerns in the application.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 中的服务用于在多个组件之间共享数据和逻辑。它们提供了一种集中功能并分离应用程序关注点的方法。
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the above example, we define a simple service called `DataService` that provides
    data to components.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们定义了一个名为 `DataService` 的简单服务，它为组件提供数据。
- en: f. Dependency Injection
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: f. 依赖注入
- en: Angular's dependency injection system allows us to inject services or other
    dependencies into components. This promotes loose coupling and makes components
    more modular and reusable.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 的依赖注入系统允许我们将服务或其他依赖项注入到组件中。这促进了松耦合，使组件更加模块化和可重用。
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the above example, we inject the `ProductService` into the `ProductComponent`
    using dependency injection.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们通过依赖注入将 `ProductService` 注入到 `ProductComponent` 中。
- en: 3\. Setting Up an Angular Project
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3. 设置 Angular 项目
- en: To start building an Angular application, we need to set up a project using
    the Angular CLI (Command Line Interface).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始构建一个 Angular 应用程序，我们需要使用 Angular CLI（命令行界面）来设置一个项目。
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the above example, we install the Angular CLI globally and use it to create
    a new Angular project named "my-app" and start the development server.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们全局安装了 Angular CLI，并使用它创建了一个名为 "my-app" 的新 Angular 项目，并启动了开发服务器。
- en: 4\. Working with Angular Components
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4. 使用 Angular 组件
- en: Once the project is set up, we can start building Angular components to create
    the UI.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦项目设置完成，我们可以开始构建 Angular 组件来创建用户界面。
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the above example, we use the `GreetingComponent` we defined earlier in the
    template.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们在模板中使用了之前定义的`GreetingComponent`。
- en: 5\. Handling Events in Angular
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 在 Angular 中处理事件
- en: Angular provides event binding to handle user interactions and trigger actions
    in the components.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 提供事件绑定来处理用户交互并触发组件中的操作。
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the above example, we use event binding to handle the click event on a button
    and call the `increment()` method.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们使用事件绑定来处理按钮的点击事件并调用`increment()`方法。
- en: 6\. Working with Forms in Angular
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6\. 在 Angular 中处理表单
- en: Angular provides powerful form handling capabilities, including form validation
    and form submission.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 提供强大的表单处理功能，包括表单验证和表单提交。
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the above example, we use Angular's template-driven forms with two-way data
    binding using `ngModel`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们使用 Angular 的模板驱动表单，并使用`ngModel`进行双向数据绑定。
- en: 7\. Working with Angular Services
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7\. 与 Angular 服务一起工作
- en: Angular services are used to handle business logic and data management.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 服务用于处理业务逻辑和数据管理。
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the above example, we define a `DataService` to provide data to components.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们定义了一个`DataService`来为组件提供数据。
- en: 8\. Routing in Angular
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8\. 在 Angular 中的路由
- en: Angular provides a powerful router for managing navigation and creating single-page
    applications.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 提供了一个强大的路由器，用于管理导航和创建单页面应用。
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the above example, we set up routing for the `HomeComponent` and `AboutComponent`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们为`HomeComponent`和`AboutComponent`设置了路由。
- en: 9\. Angular CLI Commands
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9\. Angular CLI 命令
- en: Angular CLI provides several commands to generate components, services, modules,
    and more.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI 提供了多个命令，用于生成组件、服务、模块等。
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the above example, we use Angular CLI commands to generate a component and
    a service.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们使用 Angular CLI 命令来生成一个组件和一个服务。
- en: Conclusion
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter, we explored Angular, a comprehensive frontend framework developed
    by Google. We learned about its key concepts, including modules, components, templates,
    data binding, services, dependency injection, and routing.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 Angular，这是一款由 Google 开发的全面前端框架。我们了解了其核心概念，包括模块、组件、模板、数据绑定、服务、依赖注入和路由。
- en: Angular provides a powerful and organized way to build dynamic and scalable
    web applications. Its component-based architecture and powerful tooling make it
    a popular choice among developers for building modern web applications.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 提供了一种强大且有组织的方式来构建动态且可扩展的 Web 应用。其基于组件的架构和强大的工具使其成为开发者构建现代 Web 应用的热门选择。
- en: As you continue your journey as a frontend developer, practice building applications
    with Angular to gain hands-on experience and improve your skills. Keep exploring
    and experimenting with the features and capabilities of Angular to create powerful
    and sophisticated web applications.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你作为前端开发者的成长，实践使用 Angular 构建应用程序以获得实践经验并提升你的技能。不断探索和实验 Angular 的特性和功能，以创建强大而复杂的
    web 应用程序。
