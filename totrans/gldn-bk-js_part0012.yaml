- en: Chapter 9
  id: totrans-0
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: Asynchronous Programming
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'We''re about to dive into one of the most powerful and practical aspects of
    modern web development: interacting with APIs and making AJAX requests。These concepts
    are essential for creating dynamic, interactive applications that can communicate
    with servers to send and receive data in real time。We will explore the concepts
    of APIs and AJAX, learn how to perform AJAX requests and understand how to consume
    `RESTful APIs` efficiently。'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: API and AJAX concepts
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: APIs (`Application Programming Interfaces`) are sets of rules and definitions
    that allow different software systems to communicate with each other。An API defines
    the methods and data that an application can use to connect to a service or other
    software。There are different types of APIs, but one of the most common and widely
    used are `RESTful APIs`。
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`AJAX` (`Asynchronous JavaScript and XML`) is a technique that allows asynchronous
    communication between the browser and the server without reloading the page。这使得用户体验更流畅和响应，因为页面的部分可以动态更新。'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Making AJAX requests
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Let's start by learning how to perform AJAX requests using pure JavaScript。One
    of the oldest ways to do this is using the `XMLHttpRequest` object。
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Example of AJAX request with `XMLHttpRequest`:'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, we create a new instance of `XMLHttpRequest`，configure the
    request with `open` and send it with `send`。We use the `onload` and `onerror`
    events to handle the request response and possible errors。
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: With the advancement of the language, the `Fetch API` emerged, which offers
    a more modern and simplified way of making AJAX requests。
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Example of AJAX request with `Fetch`:'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`Fetch` simplifies syntax, making code more readable and easier to understand。It
    returns a promise that can be manipulated with `then` and `catch` to handle the
    response and errors respectively。'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Consumption of `RESTful APIs`
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`RESTful` (`Representational State Transfer`) APIs are an architectural style
    for creating web services。They use standard HTTP methods (`GET`, `POST`, `PUT`,
    `DELETE`) to perform CRUD (`Create`, `Read`, `Update`, `Delete`) operations。'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Let's explore how to consume a `RESTful API` using `Fetch`，covering the most
    common operations。
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`GET`:  Recover data'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`POST`:  Send data'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`PUT`: Update data'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`DELETE`:  Remove data'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Error handling
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: When consuming APIs, it is important to handle errors effectively to ensure
    that the application can handle network issues or unexpected server responses。
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Error handling with `Fetch`:'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this example, we use a `try/catch` block to capture and handle errors during
    the request and data processing。This allows the application to gracefully handle
    errors and provide feedback to the user。
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在本章中，我们探索API和AJAX的概念，学习如何使用`XMLHttpRequest`和`Fetch`执行AJAX请求，并理解如何高效地消费RESTful
    APIs。这些知识对于开发现代和动态的Web应用程序至关重要，这些应用程序依赖于与服务器的持续通信以发送和接收数据。随着你继续你的Web开发旅程，掌握与API的交互和处理AJAX请求将对创建丰富、响应迅速的用户体验至关重要。继续练习并应用这些概念，成为JavaScript网页编程艺术的高手。
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
