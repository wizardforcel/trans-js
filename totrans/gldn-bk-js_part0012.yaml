- en: Chapter 9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Asynchronous Programming
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re about to dive into one of the most powerful and practical aspects of
    modern web development: interacting with APIs and making AJAX requests. These
    concepts are essential for creating dynamic, interactive applications that can
    communicate with servers to send and receive data in real time. We will explore
    the concepts of APIs and AJAX, learn how to perform AJAX requests and understand
    how to consume RESTful APIs efficiently.'
  prefs: []
  type: TYPE_NORMAL
- en: API and AJAX concepts
  prefs: []
  type: TYPE_NORMAL
- en: APIs (Application Programming Interfaces) are sets of rules and definitions
    that allow different software systems to communicate with each other. An API defines
    the methods and data that an application can use to connect to a service or other
    software. There are different types of APIs, but one of the most common and widely
    used are RESTful APIs.
  prefs: []
  type: TYPE_NORMAL
- en: AJAX (Asynchronous JavaScript and XML) is a technique that allows asynchronous
    communication between the browser and the server without reloading the page. This
    makes the user experience more fluid and responsive as parts of the page can be
    updated dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: Making AJAX requests
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by learning how to perform AJAX requests using pure JavaScript.
    One of the oldest ways to do this is using the `XMLHttpRequest` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example of AJAX request with `XMLHttpRequest`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we create a new instance of `XMLHttpRequest`, configure the
    request with `open` and send it with `send`. We use the `onload` and `onerror`
    events to handle the request response and possible errors.
  prefs: []
  type: TYPE_NORMAL
- en: With the advancement of the language, the Fetch API emerged, which offers a
    more modern and simplified way of making AJAX requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example of AJAX request with Fetch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Fetch simplifies syntax, making code more readable and easier to understand.
    It returns a promise that can be manipulated with `then` and `catch` to handle
    the response and errors respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Consumption of RESTful APIs
  prefs: []
  type: TYPE_NORMAL
- en: RESTful (Representational State Transfer) APIs are an architectural style for
    creating web services. They use standard HTTP methods (GET, POST, PUT, DELETE)
    to perform CRUD (Create, Read, Update, Delete) operations.
  prefs: []
  type: TYPE_NORMAL
- en: Let's explore how to consume a RESTful API using Fetch, covering the most common
    operations.
  prefs: []
  type: TYPE_NORMAL
- en: GET:  Recover data
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: POST:  Send data
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'PUT: Update data'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: DELETE:  Remove data
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Error handling
  prefs: []
  type: TYPE_NORMAL
- en: When consuming APIs, it is important to handle errors effectively to ensure
    that the application can handle network issues or unexpected server responses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Error handling with Fetch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we use a try/catch block to capture and handle errors during
    the request and data processing. This allows the application to gracefully handle
    errors and provide feedback to the user.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we explore the concepts of APIs and AJAX, learn how to perform
    AJAX requests using `XMLHttpRequest` and Fetch, and understand how to consume
    RESTful APIs efficiently. This knowledge is fundamental to developing modern and
    dynamic web applications that depend on constant communication with servers to
    send and receive data. As you continue your web development journey, mastering
    interacting with APIs and handling AJAX requests will be essential to creating
    rich, responsive user experiences. Keep practicing and applying these concepts
    to become a master of the art of web programming with JavaScript.
  prefs: []
  type: TYPE_NORMAL
