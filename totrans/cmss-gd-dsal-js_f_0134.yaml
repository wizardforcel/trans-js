- en: Searching
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: As you know, searching means looking for a value within the list and returning
    its index. We’ve seen that linear search on an array has a speed of O(N), since
    the computer needs to inspect each value one at a time.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Linked lists also have a search speed of O(N). To search for a value, we need
    to go through a similar process to the one we did with reading; that is, we begin
    with the head and follow the links of each node to the next one. Along the way,
    we inspect each value until we find what we’re looking for.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Code Implementation: Linked List Search'
  id: totrans-3
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s how we can implement the search operation in JavaScript. We’ll call
    this method `search` and pass in the value we’re searching for:'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `search(value) {` |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `let` currentNode = `this`.firstNode; |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `let` currentIndex = 0; |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `while` (`true`) { |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (currentNode.data === value) { |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` currentIndex; |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | currentNode = currentNode.nextNode; |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (!currentNode) { |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `break`; |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | currentIndex += 1; |'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` `null`; |'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 'We can then search for any value within the list, like so:'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `list.search`(`''time''`); |'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_TB
- en: Using this, we would get back the index of where `time` is located within the
    list. In our example above, this would be 3.
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: As you can see, the mechanics of searching are similar to reading. The main
    difference is that the loop doesn’t stop at a particular index but runs until
    we either find the value or reach the end of the list.
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
