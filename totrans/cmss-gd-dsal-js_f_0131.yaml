- en: '`Linked Lists`'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: Like an array, a linked list is a data structure that represents a list of items.
    While on the surface arrays and linked lists look and act quite similarly, under
    the hood there are big differences.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: As mentioned in Chapter 1, [​*Why Data Structures Matter*​](f_0013.xhtml#chp.understanding_data_structures),
    memory inside a computer can be visualized as a giant set of cells in which bits
    of data are stored. You learned that when creating an array, your code finds a
    contiguous group of empty cells in memory and designates them to store data for
    your application, as [shown](#fig.ch14.array_3).
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/understanding_arrays/array_3.png](images/understanding_arrays/array_3.png)'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: You also saw that the computer has the ability to access any memory address
    in one step and can use that power to also immediately access any index within
    the array. If you wrote code that said, “Look up the value at index `4`,” your
    computer could locate that cell in a single step. Again, this is because your
    program knows which memory address the array starts at—say, memory address `1000`—and
    therefore knows that if it wants to look up index `4`, it should simply jump to
    memory address `1004`.
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Linked lists, on the other hand, work differently. Instead of being a contiguous
    block of memory, the data from linked lists can be scattered across different
    cells throughout the computer’s memory.
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Connected data that are dispersed throughout memory are known as `nodes`. In
    a linked list, each `node` represents one item in the list. The big question,
    then, is this: if the `nodes` are not next to each other in memory, how does the
    computer know which `nodes` are part of the same linked list?'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'This is the key to the linked list: each `node` also comes with a little extra
    information—namely, the memory address of the next `node` in the list.'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'This extra piece of data—this pointer to the next node’s memory address—is
    known as a `link`. Here’s a visual depiction of a linked list:'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/pitting_linked_lists_against_arrays/linked_list_1.png](images/pitting_linked_lists_against_arrays/linked_list_1.png)'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: 'In this example, we have a linked list that contains four pieces of data: `"a"`,
    `"b"`, `"c"`, and `"d"`. However, it uses eight cells of memory to store this
    data, because each `node` consists of two memory cells. The first cell holds the
    actual data, while the second cell serves as a `link` that indicates where in
    memory the next `node` begins. The final `node`’s `link` contains `null` since
    the linked list ends there.'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: A linked list’s first node is also referred to as its `head` and its last node
    its `tail`. We may use the terms `head` and `first node` interchangeably.
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: If the computer knows at which memory address the linked list begins, it has
    all it needs to begin working with the list! Since each `node` contains a `link`
    to the next `node`, all the computer needs to do is follow each `link` to string
    together the entire list.
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`The fact that a linked list’s data can be spread throughout the computer’s
    memory` is a potential advantage it has over the `array`. `An array`, by contrast,
    needs to find an entire block of contiguous cells to store its data, which can
    get increasingly difficult as the `array` size grows. `These details are managed
    by your programming language under the hood`, so you may not have to worry about
    them. However, you’ll see shortly that there are more tangible differences between
    `linked lists` and `arrays` that we can sink our teeth into.'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
