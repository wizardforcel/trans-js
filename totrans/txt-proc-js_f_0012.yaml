- en: '| Recipe 2 | Checking a String for Specific Words with includes() |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: '| 配方 2 | 使用 includes() 检查字符串中特定的单词 |'
- en: Task
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务
- en: Suppose you’re building an online bakeshop and want to filter messages so they
    can be routed to the correct baker. You need to check the strings in incoming
    emails to account for different spellings of words like “doughnut” versus “donut.”
    You can’t use the includes() method alone because it allows you to look for only
    a single word.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在构建一个在线烘焙店，并希望过滤消息，以便它们可以路由到正确的面包师。你需要检查传入电子邮件中的字符串，以考虑像“doughnut”和“donut”这样的单词的不同拼写。你不能单独使用
    includes() 方法，因为它只能查找单个单词。
- en: Solution
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Put the words you want to search for in an array. Then create a function that
    accepts two arguments: a string to search and an array of words. Inside the function,
    search for each word in the string and return true if at least one search is successful:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 将你想搜索的单词放入一个数组中。然后创建一个接受两个参数的函数：一个要搜索的字符串和一个单词数组。在函数内部，逐个检查字符串中的单词，如果至少有一个搜索成功，则返回
    true：
- en: '[part_1/checking_specific_words/includes_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/checking_specific_words/includes_ex1.js)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_1/checking_specific_words/includes_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/checking_specific_words/includes_ex1.js)'
- en: '|   | **const** msg = *"I''d like to order two donuts"*; |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** msg = *"我想点两个donuts"*; |'
- en: '|   | **const** words = [*"doughnut"*, *"donut"*]; |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** words = [*"doughnut"*, *"donut"*]; |'
- en: '|   |  |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | **function** hasSomeWords(str, arr) { |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '|   | **function** hasSomeWords(str, arr) { |'
- en: '|   | **return** arr.some(el => str.includes(el)); |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '|   | **return** arr.some(el => str.includes(el)); |'
- en: '|   | } |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '|   | } |'
- en: '|   |  |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | hasSomeWords(msg, words); *// → true* |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '|   | hasSomeWords(msg, words); *// → true* |'
- en: The some() method returns true if at least one element in the array passes the
    test implemented by the given function. In this case, that means includes() first
    searches for “doughnut.” Since there’s no such a word in the string, the method
    returns false. The second time includes() searches for “donut,” and this time
    it returns true. So, the return value of some() will be true.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: some() 方法如果数组中的至少一个元素通过了给定函数的测试，则返回 true。在这种情况下，这意味着 includes() 首先搜索“doughnut”。由于字符串中没有这个单词，方法返回
    false。第二次 includes() 搜索“donut”，这次返回 true。所以，some() 的返回值将是 true。
- en: Discussion
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论
- en: 'ECMAScript added includes() to the language in ES2015 to enable developers
    to easily determine whether a string contains another string. The second argument
    of includes() is optional and lets you specify the position at which to begin
    searching. For example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 在 ES2015 中添加了 includes() 方法，以便开发者轻松判断一个字符串是否包含另一个字符串。includes() 的第二个参数是可选的，它允许你指定从哪个位置开始搜索。例如：
- en: '[part_1/checking_specific_words/includes_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/checking_specific_words/includes_ex2.js)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_1/checking_specific_words/includes_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/checking_specific_words/includes_ex2.js)'
- en: '|   | **const** quote = *"Sachertorte is a torte of Austrian origin."*; |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** quote = *"Sachertorte 是一种奥地利起源的蛋糕。"*; |'
- en: '|   |  |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | quote.includes(*"Sachertorte"*, 15); *// → false* |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '|   | quote.includes(*"Sachertorte"*, 15); *// → false* |'
- en: This code starts the search at index 15\. Because no word matches “Sachertorte”
    from index 15 onwards, the return value is false.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码从索引15开始搜索。由于从索引15开始没有任何词与“Sachertorte”匹配，因此返回值为false。
- en: 'Remember, includes() is case sensitive. If you search for “Sachertorte” in
    a string containing “SacherTorte,” the result is false:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，includes()是区分大小写的。如果你在包含“SacherTorte”的字符串中搜索“Sachertorte”，结果会是false：
- en: '[part_1/checking_specific_words/includes_ex3.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/checking_specific_words/includes_ex3.js)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_1/checking_specific_words/includes_ex3.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/checking_specific_words/includes_ex3.js)'
- en: '|   | **const** quote = *"I''d like to order a SacherTorte."*; |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** quote = *"我想点一份萨赫蛋糕。"*; |'
- en: '|   | **const** word = *"Sachertorte"*; |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** word = *"Sachertorte"*; |'
- en: '|   |  |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | quote.includes(word); *// → false* |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '|   | quote.includes(word); *// → false* |'
- en: 'Some desserts could have internal capitalization because they are made up of
    two words such as Dobostorta/DobosTorta, Leibnizkeks/LeibnizKeks, and SacherTorte/Sachertorte.
    So, in most cases, you want to perform a case-insensitive search by converting
    both the string and the keyword to lowercase, like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一些甜点可能会有内部的大写字母，因为它们由两个词组成，比如Dobostorta/DobosTorta、Leibnizkeks/LeibnizKeks和SacherTorte/Sachertorte。因此，在大多数情况下，你需要通过将字符串和关键词都转换为小写来执行不区分大小写的搜索，如下所示：
- en: '[part_1/checking_specific_words/includes_ex4.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/checking_specific_words/includes_ex4.js)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_1/checking_specific_words/includes_ex4.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/checking_specific_words/includes_ex4.js)'
- en: '|   | **const** quote = *"I''d like to order a SacherTorte."*.toLowerCase();
    |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** quote = *"我想点一份萨赫蛋糕。"*.toLowerCase(); |'
- en: '|   | **const** word = *"Sachertorte"*.toLowerCase(); |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** word = *"Sachertorte"*.toLowerCase(); |'
- en: '|   |  |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | quote.includes(word); *// → true* |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '|   | quote.includes(word); *// → true* |'
- en: 'But what if you want to check if a string contains multiple words simultaneously?
    In that case, you should use the every() method. every() is similar to some()
    in that it executes a function for each element of an array. But it returns true
    only if every item in the array passes the test. Here’s an example:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想检查一个字符串是否同时包含多个词呢？在这种情况下，你应该使用every()方法。every()与some()类似，它会对数组的每个元素执行一个函数。但是，它只有在数组中的每一项都通过测试时才返回true。以下是一个示例：
- en: '[part_1/checking_specific_words/includes_ex5.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/checking_specific_words/includes_ex5.js)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_1/checking_specific_words/includes_ex5.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/checking_specific_words/includes_ex5.js)'
- en: '|   | **const** msg = *"1 sachertorte, 3 pretzels, and 2 donuts please."*;
    |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** msg = *"1个萨赫蛋糕，3个椒盐卷饼和2个甜甜圈，谢谢。"*; |'
- en: '|   | **const** wordsArr1 = [*"sachertorte"*, *"donut"*]; |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** wordsArr1 = [*"sachertorte"*, *"甜甜圈"*]; |'
- en: '|   | **const** wordsArr2 = [*"sachertorte"*, *"sourdough"*]; |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** wordsArr2 = [*"sachertorte"*, *"酸面包"*]; |'
- en: '|   |  |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | **function** hasEveryWord(str, arr) { |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '|   | **function** hasEveryWord(str, arr) { |'
- en: '|   | **return** arr.every(el => str.includes(el)); |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '|   | **return** arr.every(el => str.includes(el)); |'
- en: '|   | } |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '|   | } |'
- en: '|   |  |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | hasEveryWord(msg, wordsArr1); *// → true* |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '|   | hasEveryWord(msg, wordsArr1); *// → true* |'
- en: '|   | hasEveryWord(msg, wordsArr2); *// → false* |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '|   | hasEveryWord(msg, wordsArr2); *// → false* |'
- en: Here, “sachertorte” and “donut” pass the test because they both exist in the
    string, but that’s not the case for “sachertorte” and “sourdough.”
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，“sachertorte”和“donut”通过了测试，因为它们都出现在字符串中，但“sachertorte”和“sourdough”则不行。
- en: Although includes() is designed to search for only a single word, with a little
    effort, you can take advantage of it to search for more words. But be careful
    when looking for words that also have a compound form.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然includes()是设计用来搜索单个单词的，但通过一点努力，你可以利用它来搜索多个单词。但在查找也具有复合形式的单词时要小心。
- en: If you search for “cake” in “I’d like to order two pancakes,” includes() returns
    true. If you don’t want that to happen, you should use a regex token known as
    a word boundary. See Recipe 25, [*Looking For Whole Words Only with the Word Boundary
    (\b)*](f_0036.xhtml#rcp.word_boundary).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在“I’d like to order two pancakes”中搜索“cake”，includes()会返回true。如果你不希望出现这种情况，你应该使用一个称为单词边界的正则表达式标记。参见配方25，[*仅使用单词边界(\b)查找完整单词*](f_0036.xhtml#rcp.word_boundary)。
