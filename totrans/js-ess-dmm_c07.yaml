- en: Chapter 7
  prefs: []
  type: TYPE_NORMAL
- en: Working with Arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IN THIS CHAPTER
  prefs: []
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) **Declaring an array variable**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) **Populating an array with data**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) **Iterating an array**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) **Working with JavaScript’s `Array` object**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you take your coding efficiency to an even higher level by
    exploring one of JavaScript’s most important concepts: the array. Arrays are important
    not only because they’re extremely efficient and very powerful but also because
    after you know how to use them, you’ll think of a thousand and one uses for them.
    To make sure you’re ready for your new array-filled life, this chapter explains
    what they are and why they’re so darn useful, and then explores all the fantastic
    ways that arrays can make your coding life easier.  ## What Is an Array?'
  prefs: []
  type: TYPE_NORMAL
- en: 'In JavaScript, whenever you have a collection of variables with related data,
    you can group them together into a single variable called an *array*. You can
    enter as many values as you want into the array, and JavaScript tracks each value
    using an *index number.* For example, the first value you add is given the index
    0\. The second value you put into the array is given the index 1; the third value
    gets 2; and so on. You can then access any value in the array by specifying the
    index number you want.  ## Declaring an Array'
  prefs: []
  type: TYPE_NORMAL
- en: 'Because an array is a type of variable, you need to declare it before using
    it. There are four syntaxes you can use. Here’s the syntax that’s the most informative:'
  prefs: []
  type: TYPE_NORMAL
- en: '`const *arrayName* = new Array();`'
  prefs: []
  type: TYPE_NORMAL
- en: Here, *`arrayName`* is the name you want to use for the array variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'In JavaScript, an array is actually an object, so what the `new` keyword is
    doing here is creating a new `Array` object. The `Array()` part of the statement
    is called a *constructor* because its job is to construct the object in memory.
    For example, to create a new array named `dogPhotos`, you’d use the following
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '`const dogPhotos = new Array();`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The second syntax is useful if you know in advance the number of values (or
    *elements*) you’ll be putting into the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '`const *arrayName* = new Array(*num*);`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the various parts are:'
  prefs: []
  type: TYPE_NORMAL
- en: '*`arrayName`*: The name you want to use for the array variable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*`num`*: The number of values you’ll be placing into the array'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, here’s a statement that declares a new `dogPhotos` array with
    five elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '`const dogPhotos = new Array(5);`  ## Populating an Array'
  prefs: []
  type: TYPE_NORMAL
- en: 'After your array is declared, you can start populating it with the data values
    you want to store. Here’s the general syntax for doing this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*arrayName*[*index*] = *value*;`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the various parts are:'
  prefs: []
  type: TYPE_NORMAL
- en: '*`arrayName`*: The name of the array variable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*`index`*: The array index number where you want the value stored'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*`value`*: The value you’re storing in the array'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript is willing to put just about any type of data inside an array, including
    numbers, strings, Boolean values, and even other arrays! You can even mix multiple
    data types within a single array.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, here are a few statements that declare a new array named `dogPhotos`
    and then enter five string values into the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '`const dogPhotos = new Array(5); dogPhotos[0] = "dog-1"; dogPhotos[1] = "dog-2";
    dogPhotos[2] = "dog-3"; dogPhotos[3] = "dog-4"; dogPhotos[4] = "dog-5";`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To reference an array value (say, to use it within an expression), you specify
    the appropriate index:'
  prefs: []
  type: TYPE_NORMAL
- en: '`strURL + dogPhotos[3]`'
  prefs: []
  type: TYPE_NORMAL
- en: '### Declaring and populating an array at the same time'
  prefs: []
  type: TYPE_NORMAL
- en: Earlier, I mentioned that JavaScript has two other syntaxes for declaring an
    array. Both enable you to declare an array *and* populate it with values by using
    just a single statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first method uses the `Array()` constructor in the following general format:'
  prefs: []
  type: TYPE_NORMAL
- en: '`const *arrayName* = new Array(*value1*, *value2*, …);`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the various parts are:'
  prefs: []
  type: TYPE_NORMAL
- en: '*`arrayName`*: The name you want to use for the array variable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*value1*, *value2*, …`: The initial values with which you want to populate
    the array'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`const dogPhotos = new Array("dog-1", "dog-2", "dog-3", "dog-4", "dog-5");`'
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaScript also supports the creation of *array literals*. You create an array
    literal by enclosing one or more values in square brackets. Here’s the general
    format:'
  prefs: []
  type: TYPE_NORMAL
- en: '`const *arrayName* = [*value1*, *value2*, …];`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the various parts are:'
  prefs: []
  type: TYPE_NORMAL
- en: '*`arrayName`*: The name you want to use for the array variable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*value1*, *value2*, …`: The initial values with which you want to populate
    the array'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`const dogPhotos= ["dog-1", "dog-2", "dog-3", "dog-4", "dog-5"];`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Most JavaScript programmers prefer this syntax over using the `Array` constructor.  ###
    Populating an array using a loop'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can populate an array using a loop and some kind of counter variable to
    access an array’s index number programmatically. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`const dogPhotos = []; for (let counter = 0; counter < 5; counter += 1) { dogPhotos[counter]
    = "dog-" + (counter + 1); }`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The statement inside the `for()` loop uses the variable `counter` as the array’s
    index. For example, when `counter` is `0`, the statement looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dogPhotos[0] = "dog-" + (0 + 1);`'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, the expression to the right of the equals sign evaluates to `"dog-1"`,
    which is the correct value.  ## Iterating Arrays'
  prefs: []
  type: TYPE_NORMAL
- en: Arrays can really help make your code more efficient by enabling you to reduce
    these kinds of long-winded procedures to a much shorter routine that fits inside
    a function. These routines are iterative methods of the `Array` object, where
    *iterative* means that the method runs through the items in the array, and for
    each item, a function (called a *callback*) performs some operation on or with
    the item.
  prefs: []
  type: TYPE_NORMAL
- en: The `Array` object actually has 14 iterative methods. I don’t cover them all,
    but over the next few sections I talk about the most useful ones.
  prefs: []
  type: TYPE_NORMAL
- en: '### Iterating an array: forEach()'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Array` object’s `forEach()` method runs a callback function for each element
    in the array. That callback takes up to three arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '*`value`*: The value of the element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*`index`*: (Optional) The array index of the element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*`array`*: (Optional) The array being iterated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can use any of the following syntaxes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*array*.forEach(*namedFunction*); *array*.forEach(function (*value*, *index*,
    *array*) { *code* }); *array*.forEach((*value*, *index*, *array* ) => { *code*
    });`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the various parts are:'
  prefs: []
  type: TYPE_NORMAL
- en: '*`array`*: The `Array` object you want to iterate over.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*`namedFunction`*: The name of an existing function. This function should accept
    the *`value`* argument and perhaps also the optional *`index`* and *`array`* arguments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*`code`*: The statements to run during each iteration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Declare the array const dogPhotos= ["dog-1", "dog-2", "dog-3", "dog-4",
    "dog-5"];  // Iterate through the array dogPhotos.forEach((value, index) => {
    console.log("Element " + index + " has the value " + value); });`  ### Iterating
    to create a new array: map()'
  prefs: []
  type: TYPE_NORMAL
- en: When you iterate over an array, it’s common to apply some operation to each
    element value. In some cases, however, you want to preserve the original array
    values and create a new array that contains the updated values.
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to create a new array that stores updated values of an existing
    array is to use the `Array` object’s `map()` method. There are three syntaxes
    you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*array*.map(*namedFunction*); *array*.map(function (*value*, *index*, *array*)
    { *code* }); *array*.map((*value*, *index*, *array* ) => { *code* });`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the various parts are:'
  prefs: []
  type: TYPE_NORMAL
- en: '*`array`*: The `Array` object with the values you want to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*`namedFunction`*: The name of an existing function that performs the operation
    on each array value. This function should accept the *`value`* argument and perhaps
    also the optional *`index`* and *`array`* arguments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*`code`*: The statements to run during each iteration to perform the operation
    on each value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `map()` method returns an `Array` object that contains the updated values,
    so be sure to store the result in a variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Declare an array of Fahrenheit temperatures const tempsFahrenheit = [-40,
    0, 32, 100, 212];  // Convert each array value to Celsius const tempsCelsius =
    tempsFahrenheit.map(currentTemp => { return (currentTemp - 32) * 0.5556; });  //
    Output the result console.log(tempsCelsius);`  ### Iterating an array down to
    a value: reduce()'
  prefs: []
  type: TYPE_NORMAL
- en: One common iteration pattern is to perform a cumulative operation on every element
    in an array to produce a value. For example, you may want to know the sum of all
    the values in the array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Iterating an array in this way to produce a value is the job of the `Array`
    object’s `reduce()` method. There are three syntaxes you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*array*.reduce(*namedFunction*, *initialValue*); *array*.reduce(function (*accumulator*,
    *value*, *index*, *array*) { *code* }, *initialValue*); *array*.reduce((*accumulator*,
    *value*, *index*, *array*) => { *code* }, *initialValue*);`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the various parts are:'
  prefs: []
  type: TYPE_NORMAL
- en: '*`array`*: The `Array` object with the values you want to reduce.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*`namedFunction`*: The name of an existing function that performs the reducing
    operation on each array value. This function should accept the *`accumulator`*
    and *`value`* arguments and perhaps also the optional *`index`* and *`array`*
    arguments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*`code`*: The statements to run during each iteration to perform the reducing
    operation on each value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*`initialValue`*: The starting value of *`accumulator`*. If you omit *`initialValue`*,
    JavaScript uses the value of the first element in *`array`*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Declare an array of product inventory const unitsInStock = [547, 213, 156,
    844, 449, 71, 313, 117];  // Get the total units in stock const initialUnits =
    0; const totalUnits = unitsInStock.reduce((accumulatedUnits, currentInventoryValue)
    => { return accumulatedUnits + currentInventoryValue; }, initialUnits);  // Output
    the result console.log("Total units in stock: " + totalUnits);`  ### Iterating
    to locate an element: find()'
  prefs: []
  type: TYPE_NORMAL
- en: 'To search within an array for the first element that matches some condition,
    use the `Array` object’s `find()` method. There are three syntaxes you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*array*.find(*namedFunction*); *array*.find(function (*value*, *index*, *array*)
    { *code* }); *array*.find((*value*, *index*, *array* ) => { *code* });`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the various parts are:'
  prefs: []
  type: TYPE_NORMAL
- en: '*`array`*: The `Array` object with the values in which you want to search.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*`namedFunction`*: The name of an existing function that applies the condition
    to each array value. This function should accept the *`value`* argument and perhaps
    also the optional *`index`* and *`array`* arguments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*`code`*: The statements to run during each iteration to apply the condition
    to each value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the *`namedFunction`* or *`code`*, you set up a logical condition that tests
    each element in the array and use a `return` statement to send the result of the
    test back to the `find()` method. The final value returned by `find()` is the
    first element for which the test is `true`, or `undefined` if the test is `false`
    for all the array elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Declare an array of product objects const products = [ { name: ''doodad'',
    units: 547 }, { name: ''gizmo'', units: 213 }, { name: ''gimcrackery'', units:
    156 }, { name: ''knickknack'', units: 844 }, { name: ''bric-a-brac'', units: 449
    }, { name: ''thingamajig'', units: 71 }, { name: ''watchamacallit'', units: 313
    }, { name: ''widget'', units: 117 } ];  // Query the array const strQuery = "gizmo";
    const stock = products.find((currentProduct) => { return currentProduct.name ===
    strQuery; });  // Output the result if (stock) { console.log("Product " + stock.name
    + " has " + stock.units + " units in stock."); } else { console.log("Product "
    + strQuery + " not found."); }`  ## Manipulating Arrays'
  prefs: []
  type: TYPE_NORMAL
- en: Like any good object, `Array` comes with a large collection of properties and
    methods that you can work with and manipulate. The rest of this chapter takes
    a look at a few of the most useful of these properties and methods.
  prefs: []
  type: TYPE_NORMAL
- en: '### The length property'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Array` object has just a couple of properties, but the only one of these
    that you’ll use frequently is the `length` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*array*.length`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `length` property returns the number of elements that are currently in
    the specified array.  ### Some useful array methods'
  prefs: []
  type: TYPE_NORMAL
- en: Many methods are associated with arrays, but the proverbial space limitations
    prevent me from going into them in any detail. To whet your appetite, [Table 7-1](#c07-tbl-0001)
    lists a few of the most useful array methods.
  prefs: []
  type: TYPE_NORMAL
- en: '[TABLE 7-1](#rc07-tbl-0001) Useful Array Methods'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method** | **Syntax** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `concat()` | `*array*.concat(*array1*, *array2*, …)` | Takes the elements
    of one or more existing arrays and concatenates them to an existing array to create
    a new array. |'
  prefs: []
  type: TYPE_TB
- en: '| `join()` | `*array*.join(*separator*)` | Takes the existing values in an
    array and concatenates them to form a string. |'
  prefs: []
  type: TYPE_TB
- en: '| `pop()` | `*array*.pop()` | Removes the last element from an array and returns
    the value of that element. |'
  prefs: []
  type: TYPE_TB
- en: '| `push()` | `*array*.push(*value1*, *value2*, …)` | Adds one or more elements
    to the end of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| `reverse()` | `*array*.reverse()` | Reverses the order of the element in
    the specified array. |'
  prefs: []
  type: TYPE_TB
- en: '| `shift()` | `*array*.shift()` | Removes the first element from an array and
    returns the value of that element. |'
  prefs: []
  type: TYPE_TB
- en: '| `slice()` | `*array*.slice(*start*, *end*)` | Returns a new array that contains
    a subset of the elements in an existing array. |'
  prefs: []
  type: TYPE_TB
- en: '| `sort()` | `*array*.sort()` | Sorts the specified array. |'
  prefs: []
  type: TYPE_TB
- en: '| `unshift()` | `*array*.unshift(*value1*, *value2*, …)` | Inserts one or more
    values at the beginning of an array and returns the new length of the array. |'
  prefs: []
  type: TYPE_TB
