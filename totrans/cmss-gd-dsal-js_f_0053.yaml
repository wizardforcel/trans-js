- en: '`Big O Categories`'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`Big O 类别`'
- en: 这引导我们进入 Big O 的下一个概念：Big O 符号仅关注算法速度的一般类别。
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这引导我们进入 Big O 的下一个概念：Big O 符号仅关注算法速度的一般类别。
- en: 作为类比，让我们谈谈物理建筑。当然，建筑有许多不同类型。有单层的独立住宅，双层的独立住宅，以及三层的独立住宅。还有各种楼层数的高层公寓楼。以及各种高度和形状的摩天大楼。
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 作为类比，让我们谈谈物理建筑。当然，建筑有许多不同类型。有单层的独立住宅，双层的独立住宅，以及三层的独立住宅。还有各种楼层数的高层公寓楼。以及各种高度和形状的摩天大楼。
- en: 如果我们要比较两栋建筑，一栋是独立住宅，另一栋是摩天大楼，那么提及每栋建筑有多少层几乎是无关紧要的。因为这两栋建筑在大小和功能上差异巨大，我们无需说，“这是一栋两层的房子，而另一栋是一百层的摩天大楼。”我们可以简单地称一个为房子，另一个为摩天大楼。用它们的一般类别来称呼就足以表明它们之间的巨大差异。
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果我们要比较两栋建筑，一栋是独立住宅，另一栋是摩天大楼，那么提及每栋建筑有多少层几乎是无关紧要的。因为这两栋建筑在大小和功能上差异巨大，我们无需说，“这是一栋两层的房子，而另一栋是一百层的摩天大楼。”我们可以简单地称一个为房子，另一个为摩天大楼。用它们的一般类别来称呼就足以表明它们之间的巨大差异。
- en: 同样，这也适用于算法效率。如果我们比较一个`O(N)`算法和一个`O(N²)`算法，这两种效率是如此不同，以至于`O(N)`算法实际上是`O(2N)`、`O(N
    / 2)`甚至`O(100N)`也无关紧要。
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 同样，这也适用于算法效率。如果我们比较一个`O(N)`算法和一个`O(N²)`算法，这两种效率是如此不同，以至于`O(N)`算法实际上是`O(2N)`、`O(N
    / 2)`甚至`O(100N)`也无关紧要。
- en: 现在，以下是为什么`O(N)`和`O(N²)`被视为两个独立类别，而`O(N)`和`O(100N)`属于同一类别的原因。
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，以下是为什么`O(N)`和`O(N²)`被视为两个独立类别，而`O(N)`和`O(100N)`属于同一类别的原因。
- en: 记住`[​*The Soul of Big O*​](f_0033.xhtml#sect.soul-of-big-o)`。Big O 符号不仅仅关心算法所需的步骤数量。它关心的是随着数据增长，算法步骤的长期轨迹。`O(N)`讲述的是线性增长的故事——步骤数量根据数据的某种比例以直线增加。这在步骤为`100N`时也是如此。`O(N²)`讲述的是一个不同的故事——一个指数增长的故事。
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 记住`[​*Big O 的灵魂*​](f_0033.xhtml#sect.soul-of-big-o)`。Big O 符号不仅仅关心算法所需的步骤数量。它关心的是随着数据增长，算法步骤的长期轨迹。`O(N)`讲述的是线性增长的故事——步骤数量根据数据的某种比例以直线增加。这在步骤为`100N`时也是如此。`O(N²)`讲述的是一个不同的故事——一个指数增长的故事。
- en: 指数增长与任何形式的`O(N)`相比是一个完全不同的类别。当我们考虑到`O(N²)`在数据增长的某个时刻将变得比`O(N)`乘以任何因子更慢时，这一点得到了强调。
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 指数增长与任何形式的`O(N)`相比是一个完全不同的类别。当我们考虑到`O(N²)`在数据增长的某个时刻将变得比`O(N)`乘以任何因子更慢时，这一点得到了强调。
- en: 在下面的图表中，你可以看到`O(N²)`如何比各种`N`的因子更慢：
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在下面的图表中，你可以看到`O(N²)`如何比各种`N`的因子更慢：
- en: '![images/optimizing_code_with_and_without_big_o/o_n_2_vs_o_n_graph.png](images/optimizing_code_with_and_without_big_o/o_n_2_vs_o_n_graph.png)'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/optimizing_code_with_and_without_big_o/o_n_2_vs_o_n_graph.png](images/optimizing_code_with_and_without_big_o/o_n_2_vs_o_n_graph.png)'
- en: 因此，在比较属于两个不同 Big O 类别的两种效率时，按其一般类别进行识别就足够了。在与`O(N²)`进行比较时谈论`O(2N)`就像在谈论一栋两层的房子与一栋摩天大楼。我们不妨说`O(2N)`是`O(N)`一般类别的一部分。
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因此，在比较属于两个不同 Big O 类别的两种效率时，按其一般类别进行识别就足够了。在与`O(N²)`进行比较时谈论`O(2N)`就像在谈论一栋两层的房子与一栋摩天大楼。我们不妨说`O(2N)`是`O(N)`一般类别的一部分。
- en: 我们遇到的所有 Big O 类型，无论是`O(1)`、`O(log N)`、`O(N)`、`O(N²)`，还是我们在本书后面会遇到的类型，都是相互之间差异巨大的
    Big O 一般类别。将步骤数量乘以或除以一个常数并不会使其变成另一个类别。
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们遇到的所有 Big O 类型，无论是`O(1)`、`O(log N)`、`O(N)`、`O(N²)`，还是我们在本书后面会遇到的类型，都是相互之间差异巨大的
    Big O 一般类别。将步骤数量乘以或除以一个常数并不会使其变成另一个类别。
- en: However, when two algorithms fall under the same classification of Big O, it
    doesn’t necessarily mean that both algorithms have the same speed. After all,
    `Bubble Sort` is twice as slow as `Selection Sort` even though both are `O(N²)`。
    So while Big O is perfect for contrasting algorithms that fall under different
    classifications of Big O, when two algorithms fall under the same classification,
    further analysis is required to determine which algorithm is faster.
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，当两个算法属于同一 Big O 分类时，并不一定意味着这两个算法具有相同的速度。毕竟，`Bubble Sort`比`Selection Sort`慢一倍，即便两者都是`O(N²)`。因此，虽然
    Big O 非常适合对比属于不同分类的算法，但当两个算法属于同一分类时，仍需进一步分析以确定哪个算法更快。
- en: A Practical Example
  id: totrans-13
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 一个实际的例子
- en: 'Let’s return to the first code example from Chapter 1, with minor changes:'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们回到第一章的第一个代码示例，做一些小改动：
- en: '| ​  | `function` `printNumbersVersionOne`(`upperLimit`) { |'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` `printNumbersVersionOne`(`upperLimit`) { |'
- en: '| ​  | `let` number = 2; |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` number = 2; |'
- en: '| ​  |  |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `while` (number <= `upperLimit`) { |'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while` (number <= `upperLimit`) { |'
- en: '| ​  | `if` (number % 2 === 0) { |'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (number % 2 === 0) { |'
- en: '| ​  | `console.log(number);` |'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `console.log(number);` |'
- en: '| ​  | } |'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | number += 1; |'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | number += 1; |'
- en: '| ​  | } |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `function` `printNumbersVersionTwo`(`upperLimit`) { |'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` `printNumbersVersionTwo`(`upperLimit`) { |'
- en: '| ​  | `let` number = 2; |'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` number = 2; |'
- en: '| ​  |  |'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `while` (number <= `upperLimit`) { |'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while` (number <= `upperLimit`) { |'
- en: '| ​  | `console.log(number);` |'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `console.log(number);` |'
- en: '| ​  |  |'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | number += 2; |'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | number += 2; |'
- en: '| ​  | } |'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: Here we have two algorithms for accomplishing the same task, namely printing
    all even numbers starting from 2 to some `upperLimit`. (In Chapter 1, the `upperLimit`
    was fixed at 100, while here we let the user pass in a number as the `upperLimit`.)
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这里我们有两个算法用于完成相同的任务，即打印所有从 2 开始到某个 `upperLimit` 的偶数。（在第一章中，`upperLimit` 固定为
    100，而在这里我们允许用户传入一个数字作为 `upperLimit`。）
- en: I noted in Chapter 1 that the first version takes twice as many steps as the
    second version, but now let’s see how this plays out in terms of Big O.
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我在第一章中提到，第一种版本的步骤数量是第二种版本的两倍，但现在让我们看看这在 Big O 的意义上是如何表现的。
- en: 'Again, Big O expresses the answer to the key question: if there are N data
    elements, how many steps will the algorithm take? In this case, though, N isn’t
    the size of an array, but simply the number we pass into the function to serve
    as the `upperLimit`。'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 再次强调，Big O 表达了一个关键问题的答案：如果有 N 个数据元素，算法需要多少步骤？在这种情况下，N 不是数组的大小，而是我们传入函数的数字，用于作为
    `upperLimit`。
- en: The first version takes about N steps. That is, if the `upperLimit` is 100,
    the function takes about 100 steps. (It really takes 99 steps since it starts
    the count at 2.) So we can safely say that the first algorithm has a time complexity
    of `O(N)`。
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第一个版本大约需要 N 步。也就是说，如果`upperLimit`是 100，函数大约需要 100 步。（实际上只需要 99 步，因为它从 2 开始计数。）所以我们可以安全地说第一个算法的时间复杂度是`O(N)`。
- en: The second version takes N / 2 steps. When the `upperLimit` is 100, the function
    takes just 50 steps. While it would be tempting to call this `O(N / 2)`，you’ve
    now learned that we drop the constants and reduce the expression to `O(N)`。
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第二个版本需要 N / 2 步。当`upperLimit`为 100 时，函数只需要 50 步。虽然将其称为`O(N / 2)`很诱人，但你现在已经学会了我们会省略常数并将表达式简化为`O(N)`。
- en: Now, the second version is twice as fast as the first one and would naturally
    be the better choice. This is another great example of where two algorithms can
    be expressed the same way using Big O notation but further analysis is needed
    to figure out which algorithm is faster.
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，第二个版本的速度是第一个版本的两倍，自然会是更好的选择。这是另一个很好的例子，展示了两个算法可以用大 O 表示法以相同方式表达，但需要进一步分析才能确定哪个算法更快。
- en: Significant Steps
  id: totrans-42
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 重要步骤
- en: Let’s apply one more level of analysis to the previous example. If we look again
    at the first version, `printNumbersVersionOne`，we said that it takes N steps.
    This is because the loop runs N times, with N being the `upperLimit`。
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们对之前的例子再进行一个层次的分析。如果我们再看第一个版本`printNumbersVersionOne`，我们说它需要 N 步。这是因为循环运行了
    N 次，N 是`upperLimit`。
- en: But does the function really take just N steps?
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 但是这个函数真的只需要 N 步吗？
- en: If we really break things down, we can see that multiple steps occur in each
    round of the loop.
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果我们仔细分析，可以看到每一轮循环中发生了多个步骤。
- en: First, we have the comparison step (`if number % 2 == 0`), which checks whether
    the number is divisible by `2`。 This comparison happens in each round of the loop.
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 首先，我们有比较步骤（`if number % 2 == 0`），用于检查数字是否能被`2`整除。这个比较在每轮循环中都会发生。
- en: Second, we have the print step (`console.log(number)`), which happens just for
    the even numbers. This, then, occurs in every other round of the loop.
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 其次，我们有打印步骤（`console.log(number)`），它仅在偶数时发生。这发生在每隔一轮的循环中。
- en: And third, we have `number += 1`，which runs in each round of the loop.
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第三步是`number += 1`，它在每轮循环中都会执行。
- en: In the previous chapters, I alluded to the fact that you’d learn how to determine
    which steps are significant enough to be counted when expressing the `Big O` of
    an algorithm. In our case, then, which of these steps are considered significant?
    Do we care about the comparisons, the printing, or the incrementing of number?
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在前面的章节中，我提到过你将学习如何确定在表达算法的`Big O`时哪些步骤是足够重要的。那在我们的案例中，哪些步骤被认为是重要的？我们关心比较、打印还是数字的增量？
- en: The answer is that all steps are significant. It’s just that when we express
    the steps in `Big O` terms, we drop the constants and thereby simplify the expression.
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 答案是所有步骤都是重要的。只是当我们用`Big O`术语表达步骤时，我们省略常数，从而简化了表达式。
- en: Let’s apply this here. If we count all the steps, we have `N` comparisons, `N`
    incrementings, and `N / 2` printings. This adds up to `2.5N` steps. However, because
    we eliminate the constant of `2.5`, we express this as `O(N)`。 So which step was
    significant? They all were, but by dropping the constant, we effectively focus
    more on the number of times the loop runs rather than the exact details of what
    happens within the loop.
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们在这里应用这个原则。如果我们计算所有步骤，我们有 `N` 次比较、`N` 次增量和 `N / 2` 次打印。这加起来是 `2.5N` 步。然而，因为我们去掉了常数
    `2.5`，我们将其表示为 `O(N)`。那么，哪些步骤是重要的？它们都是，但通过去掉常数，我们实际上更关注循环运行的次数，而不是循环内发生的具体细节。
