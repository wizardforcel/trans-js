- en: Bubble Sort in Action
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s walk through a complete example of Bubble Sort.
  prefs: []
  type: TYPE_NORMAL
- en: Assume we want to sort the array [4, 2, 7, 1, 3]. It’s currently out of order,
    and we want to produce an array that contains the same values in ascending order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s begin the first pass-through. This is our starting array:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_5.png](images/speeding_up_your_code_with_big_o/bubble_sort_5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 1: First, we compare the 4 and the 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_6.png](images/speeding_up_your_code_with_big_o/bubble_sort_6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 2: They’re out of order, so we swap them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_7.png](images/speeding_up_your_code_with_big_o/bubble_sort_7.png)![images/speeding_up_your_code_with_big_o/bubble_sort_8.png](images/speeding_up_your_code_with_big_o/bubble_sort_8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 3: Next, we compare the 4 and the 7:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_9.png](images/speeding_up_your_code_with_big_o/bubble_sort_9.png)'
  prefs: []
  type: TYPE_IMG
- en: They’re in the correct order, so we don’t need to perform a swap.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4: We now compare the 7 and the 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_10.png](images/speeding_up_your_code_with_big_o/bubble_sort_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 5: They’re out of order, so we swap them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_11.png](images/speeding_up_your_code_with_big_o/bubble_sort_11.png)![images/speeding_up_your_code_with_big_o/bubble_sort_12.png](images/speeding_up_your_code_with_big_o/bubble_sort_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 6: We compare the 7 and the 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_13.png](images/speeding_up_your_code_with_big_o/bubble_sort_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 7: They’re out of order, so we swap them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_14.png](images/speeding_up_your_code_with_big_o/bubble_sort_14.png)![images/speeding_up_your_code_with_big_o/bubble_sort_15.png](images/speeding_up_your_code_with_big_o/bubble_sort_15.png)'
  prefs: []
  type: TYPE_IMG
- en: We now know for a fact that the 7 is in its correct position within the array
    because we kept moving it along to the right until it reached its proper place.
    The previous diagram has little lines surrounding the 7 to indicate that the 7
    is officially in its correct position.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is actually the reason why this algorithm is called Bubble Sort: in each
    pass-through, the highest unsorted value “bubbles” up to its correct position.'
  prefs: []
  type: TYPE_NORMAL
- en: Because we made at least one swap during this pass-through, we need to conduct
    another pass-through.
  prefs: []
  type: TYPE_NORMAL
- en: 'We begin the second pass-through:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 8: We compare the 2 and the 4:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_17.png](images/speeding_up_your_code_with_big_o/bubble_sort_17.png)'
  prefs: []
  type: TYPE_IMG
- en: They’re in the correct order, so we can move on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 9: We compare the 4 and the 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_18.png](images/speeding_up_your_code_with_big_o/bubble_sort_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 10: They’re out of order, so we swap them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_19.png](images/speeding_up_your_code_with_big_o/bubble_sort_19.png)![images/speeding_up_your_code_with_big_o/bubble_sort_20.png](images/speeding_up_your_code_with_big_o/bubble_sort_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 11: We compare the 4 and the 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/speeding_up_your_code_with_big_o/step_11.png](images/speeding_up_your_code_with_big_o/step_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 12: They’re out of order, so we swap them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_21.png](images/speeding_up_your_code_with_big_o/bubble_sort_21.png)![images/speeding_up_your_code_with_big_o/bubble_sort_22.png](images/speeding_up_your_code_with_big_o/bubble_sort_22.png)'
  prefs: []
  type: TYPE_IMG
- en: We don’t have to compare the 4 and the 7, because we know that the 7 is already
    in its correct position from the previous pass-through. And now we also know that
    the 4 has bubbled up to its correct position as well. This concludes our second
    pass-through.
  prefs: []
  type: TYPE_NORMAL
- en: Because we made at least one swap during this pass-through, we need to conduct
    another pass-through.
  prefs: []
  type: TYPE_NORMAL
- en: 'We begin the third pass-through:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 13: We compare the 2 and the 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_23.png](images/speeding_up_your_code_with_big_o/bubble_sort_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 14: They’re out of order, so we swap them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_24.png](images/speeding_up_your_code_with_big_o/bubble_sort_24.png)![images/speeding_up_your_code_with_big_o/bubble_sort_24b.png](images/speeding_up_your_code_with_big_o/bubble_sort_24b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 15: We compare the 2 and the 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_25.png](images/speeding_up_your_code_with_big_o/bubble_sort_25.png)'
  prefs: []
  type: TYPE_IMG
- en: They’re in the correct order, so we don’t need to swap them.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now know that the 3 has bubbled up to its correct spot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_26.png](images/speeding_up_your_code_with_big_o/bubble_sort_26.png)'
  prefs: []
  type: TYPE_IMG
- en: Since we made at least one swap during this pass-through, we need to perform
    another one.
  prefs: []
  type: TYPE_NORMAL
- en: 'And so begins the fourth pass-through:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 16: We compare the 1 and the 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_27.png](images/speeding_up_your_code_with_big_o/bubble_sort_27.png)'
  prefs: []
  type: TYPE_IMG
- en: Because they’re in order, we don’t need to swap. We can end this pass-through,
    since all the remaining values are already correctly sorted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we’ve made a pass-through that didn’t require any swaps, we know that
    our array is completely sorted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_28.png](images/speeding_up_your_code_with_big_o/bubble_sort_28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Code Implementation: Bubble Sort'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here’s an implementation of Bubble Sort in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | ​**function**​ bubbleSort(array) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**let**​ unsortedUntilIndex = array.length - 1; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**let**​ sorted = ​**false**​; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**while**​ (!sorted) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | sorted = ​**true**​; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**for**​ (​**let**​ i = 0; i < unsortedUntilIndex; i++) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**if**​ (array[i] > array[i + 1]) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | [array[i], array[i + 1]] = [array[i + 1], array[i]]; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | sorted = ​**false**​; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | unsortedUntilIndex -= 1; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: '| ​  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**return**​ array; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: 'To use this function, we can pass an unsorted array to it, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | console.log(bubbleSort([65, 55, 45, 35, 25, 15, 10])); |'
  prefs: []
  type: TYPE_TB
- en: This function will then return the sorted array.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s break the function down line by line to see how it works. I’ll explain
    each line by first providing the explanation, followed by the line of code itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we do is create a variable called unsortedUntilIndex. This
    keeps track of the rightmost index of the array that has not yet been sorted.
    When we first start the algorithm, the array is completely unsorted, so we initialize
    this variable to be the final index in the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | ​**let**​ unsortedUntilIndex = array.length - 1; |'
  prefs: []
  type: TYPE_TB
- en: 'We also create a variable called sorted that will keep track of whether the
    array is fully sorted. Of course, when our code first runs, it isn’t, so we set
    it to false:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | ​**let**​ sorted = ​**false**​; |'
  prefs: []
  type: TYPE_TB
- en: 'We begin a while loop that continues to run as long as the array is not sorted.
    Each round of this loop represents a pass-through of the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | ​**while**​ (!sorted) { |'
  prefs: []
  type: TYPE_TB
- en: 'Next, we preliminarily establish sorted to be true:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | sorted = ​**true**​; |'
  prefs: []
  type: TYPE_TB
- en: The approach here is that in each pass-through, we’ll assume the array is sorted
    until we encounter a swap, in which case we’ll change the variable back to false.
    If we get through an entire pass-through without having to make any swaps, sorted
    will remain true, and we’ll know that the array is completely sorted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the while loop, we begin a for loop in which we point to each pair of
    values in the array. We use the variable i as our first pointer, and it starts
    from the beginning of the array and goes until the index that hasn’t yet been
    sorted:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | ​**for**​ (​**let**​ i = 0; i < unsortedUntilIndex; i += 1) { |'
  prefs: []
  type: TYPE_TB
- en: 'Within this loop, we compare each pair of adjacent values and swap those values
    if they’re out of order. We also change sorted to false if we have to make a swap:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | ​**if**​ (array[i] > array[i + 1]) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | [array[i], array[i + 1]] = [array[i + 1], array[i]]; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | sorted = ​**false**​; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: 'At the end of each pass-through, we know that the value we bubbled up all the
    way to the right is now in its correct position. Because of this, we decrement
    the unsortedUntilIndex by 1 since the index it was already pointing to is now
    sorted:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | unsortedUntilIndex -= 1; |'
  prefs: []
  type: TYPE_TB
- en: 'The while loop ends once sorted is true, meaning the array is completely sorted.
    Once this is the case, we return the sorted array:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | ​**return**​ array; |'
  prefs: []
  type: TYPE_TB
