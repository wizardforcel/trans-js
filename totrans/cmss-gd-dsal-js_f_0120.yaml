- en: Exercises
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 练习
- en: The following exercises provide you with the opportunity to practice with dynamic
    programming. The solutions to these exercises are found in the section [`Chapter
    12`](f_0217.xhtml#dynamic.programming.solutions).
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下练习为你提供了练习动态编程的机会。这些练习的解答在章节 [`第12章`](f_0217.xhtml#dynamic.programming.solutions)
    中可以找到。
- en: 'The following function accepts an array of numbers and returns the sum, as
    long as a particular number doesn’t bring the sum above 100\. If adding a particular
    number will make the sum higher than 100, that number is ignored. However, this
    function makes unnecessary recursive calls. Fix the code to eliminate the unnecessary
    recursion:'
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 以下函数接受一个数字数组，并返回其总和，只要某个特定数字没有使总和超过100。如果添加某个特定数字会使总和高于100，则忽略该数字。然而，这个函数做了不必要的递归调用。修复代码以消除不必要的递归：
- en: '| ​  | `function` addUntil100(array) { |'
  id: totrans-3
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` addUntil100(array) { |'
- en: '| ​  | `if` (array.length === 0) { `return` 0; } |'
  id: totrans-4
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (array.length === 0) { `return` 0; } |'
- en: '| ​  |  |'
  id: totrans-5
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `if` (array[0] + addUntil100(array.slice(1)) > 100) { |'
  id: totrans-6
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (array[0] + addUntil100(array.slice(1)) > 100) { |'
- en: '| ​  | `return` addUntil100(array.slice(1)); |'
  id: totrans-7
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` addUntil100(array.slice(1)); |'
- en: '| ​  | } `else` { |'
  id: totrans-8
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } `else` { |'
- en: '| ​  | `return` array[0] + addUntil100(array.slice(1)); |'
  id: totrans-9
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` array[0] + addUntil100(array.slice(1)); |'
- en: '| ​  | } |'
  id: totrans-10
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-11
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: The following function uses recursion to calculate the Nth number from a mathematical
    sequence known as the Golomb sequence. It’s terribly inefficient, though! Use
    memoization to optimize it. (You don’t have to understand how the Golomb sequence
    works to do this exercise.)
  id: totrans-12
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 以下函数使用递归来计算一个称为 Golomb 序列的数学序列中的第 N 个数字。然而，它的效率非常低！使用备忘录来优化它。（你不需要理解 Golomb
    序列的工作原理就可以完成这个练习。）
- en: '| ​  | `function` golomb(n) { |'
  id: totrans-13
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` golomb(n) { |'
- en: '| ​  | `if` (n === 1) { `return` 1; } |'
  id: totrans-14
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (n === 1) { `return` 1; } |'
- en: '| ​  |  |'
  id: totrans-15
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return` 1 + golomb(n - golomb(golomb(n - 1))); |'
  id: totrans-16
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` 1 + golomb(n - golomb(golomb(n - 1))); |'
- en: '| ​  | } |'
  id: totrans-17
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 'Here is a solution to the unique paths problem from an exercise in the previous
    chapter. (Sorry, it’s a bit of a spoiler if you haven’t tried doing that exercise
    yet.) Use memoization to improve its efficiency:'
  id: totrans-18
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 这里是上章练习中唯一路径问题的解答。（抱歉，如果你还没有尝试这个练习，这有点剧透。）使用备忘录来提高其效率：
- en: '| ​  | `function` uniquePaths(rows, columns) { |'
  id: totrans-19
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` uniquePaths(rows, columns) { |'
- en: '| ​  | `if` (rows === 1 `||` columns === 1) { |'
  id: totrans-20
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (rows === 1 `||` columns === 1) { |'
- en: '| ​  | `return` 1; |'
  id: totrans-21
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` 1; |'
- en: '| ​  | } |'
  id: totrans-22
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-23
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return` uniquePaths(rows - 1, columns) + uniquePaths(rows, columns
    - 1); |'
  id: totrans-24
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` uniquePaths(rows - 1, columns) + uniquePaths(rows, columns
    - 1); |'
- en: '| ​  | } |'
  id: totrans-25
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: Copyright © 2024, The Pragmatic Bookshelf.
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 版权所有 © 2024, The Pragmatic Bookshelf.
