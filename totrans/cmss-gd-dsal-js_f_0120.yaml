- en: Exercises
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: The following exercises provide you with the opportunity to practice with dynamic
    programming. The solutions to these exercises are found in the section [`Chapter
    12`](f_0217.xhtml#dynamic.programming.solutions).
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The following function accepts an array of numbers and returns the sum, as
    long as a particular number doesn’t bring the sum above 100\. If adding a particular
    number will make the sum higher than 100, that number is ignored. However, this
    function makes unnecessary recursive calls. Fix the code to eliminate the unnecessary
    recursion:'
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function` addUntil100(array) { |'
  id: totrans-3
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (array.length === 0) { `return` 0; } |'
  id: totrans-4
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-5
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (array[0] + addUntil100(array.slice(1)) > 100) { |'
  id: totrans-6
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` addUntil100(array.slice(1)); |'
  id: totrans-7
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } `else` { |'
  id: totrans-8
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` array[0] + addUntil100(array.slice(1)); |'
  id: totrans-9
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-10
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-11
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: The following function uses recursion to calculate the Nth number from a mathematical
    sequence known as the Golomb sequence. It’s terribly inefficient, though! Use
    memoization to optimize it. (You don’t have to understand how the Golomb sequence
    works to do this exercise.)
  id: totrans-12
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function` golomb(n) { |'
  id: totrans-13
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (n === 1) { `return` 1; } |'
  id: totrans-14
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-15
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` 1 + golomb(n - golomb(golomb(n - 1))); |'
  id: totrans-16
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-17
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: 'Here is a solution to the unique paths problem from an exercise in the previous
    chapter. (Sorry, it’s a bit of a spoiler if you haven’t tried doing that exercise
    yet.) Use memoization to improve its efficiency:'
  id: totrans-18
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function` uniquePaths(rows, columns) { |'
  id: totrans-19
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (rows === 1 `||` columns === 1) { |'
  id: totrans-20
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` 1; |'
  id: totrans-21
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-22
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-23
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` uniquePaths(rows - 1, columns) + uniquePaths(rows, columns
    - 1); |'
  id: totrans-24
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-25
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: Copyright © 2024, The Pragmatic Bookshelf.
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
