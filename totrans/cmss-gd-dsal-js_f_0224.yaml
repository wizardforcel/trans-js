- en: Chapter 19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These are the solutions to the exercises found in the section [​*Exercises*​](f_0194.xhtml#dealing.with.space.constraints.exercises).
  prefs: []
  type: TYPE_NORMAL
- en: The space complexity is O(N²). This is because the function creates the array
    called collection, which will end up holding N² strings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This implementation takes up O(N) space, as we create a newArray containing
    N items.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following implementation uses this algorithm: we swap the first item with
    the last item in place. Then we swap the second item with the second-to-last item
    in place. We then proceed to swap the third item with the third-to-last item in
    place, and so on. Since everything is done in place and we don’t create any new
    data, this has a space complexity of O(1).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ​  | ​**function**​ reverse(array) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**let**​ i = 0; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**while**​ (i < Math.floor(array.length / 2)) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**const**​ mirrorOfI = array.length - 1 - i; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | [array[i], array[mirrorOfI]] = [array[mirrorOfI], array[i]]; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | i += 1; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: '| ​  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**return**​ array; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: (While JavaScript may, under the hood, be creating a temporary variable to accomplish
    each swap, we never have more than that one piece of data stored at any time during
    the algorithm’s execution.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the completed table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Version | Time Complexity | Space Complexity |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Version #1 | O(N) | O(N) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Version #2 | O(N) | O(1) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Version #3 | O(N) | O(N) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: All three versions run for as many steps as there are numbers in the array,
    so the time complexity is O(N) for all of them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Version #1 creates a brand-new array to store the doubled numbers. This array
    will have the same length as the original array, so takes up O(N) space.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Version #2 modifies the original array in place, so takes up zero extra space.
    This is expressed as O(1).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Version #3 also modifies the original array in place. However, since the function
    is recursive, the call stack at its peak will have N calls on it, taking up O(N)
    space.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
