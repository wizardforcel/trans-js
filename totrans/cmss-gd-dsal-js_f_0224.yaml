- en: Chapter `19`
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: These are the solutions to the exercises found in the section [`Exercises`](f_0194.xhtml#dealing.with.space.constraints.exercises).
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The space complexity is `O(N²)`. This is because the function creates the array
    called `collection`, which will end up holding `N²` strings.
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: This implementation takes up `O(N)` space, as we create `newArray` containing
    `N` items.
  id: totrans-3
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: 'The following implementation uses this algorithm: we swap the first item with
    the last item in place. Then we swap the second item with the second-to-last item
    in place. We then proceed to swap the third item with the third-to-last item in
    place, and so on. Since everything is done in place and we don’t create any new
    data, this has a space complexity of `O(1)`.'
  id: totrans-4
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '|  | `function` reverse(array) { |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '|  | `let` i = `0`; |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '|  |  |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '|  | `while` (i < `Math.floor(array.length / 2)`) { |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '|  | `const` mirrorOfI = `array.length - 1 - i`; |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '|  | `[array[i], array[mirrorOfI]] = [array[mirrorOfI], array[i]]; |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '|  |  |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '|  | i += `1`; |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '|  | } |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '|  |  |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '|  | `return` array; |'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '|  | } |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
- en: (While JavaScript may, under the hood, be creating a temporary variable to accomplish
    each swap, we never have more than that one piece of data stored at any time during
    the algorithm’s execution.)
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s the completed table:'
  id: totrans-18
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '| Version | Time Complexity | Space Complexity |'
  id: totrans-19
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-20
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| Version `#1` | `O(N)` | `O(N)` |'
  id: totrans-21
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| Version `#2` | `O(N)` | `O(1)` |'
  id: totrans-22
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| Version `#3` | `O(N)` | `O(N)` |'
  id: totrans-23
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: All three versions run for as many steps as there are numbers in the array,
    so the time complexity is `O(N)` for all of them.
  id: totrans-24
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: Version `#1` creates a brand-new array to store the doubled numbers. This array
    will have the same length as the original array, so takes up `O(N)` space.
  id: totrans-25
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: Version `#2` modifies the original array in place, so takes up zero extra space.
    This is expressed as `O(1)`.
  id: totrans-26
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
- en: Version `#3` also modifies the original array in place. However, since the function
    is recursive, the call stack at its peak will have `N` calls on it, taking up
    `O(N)` space.
  id: totrans-27
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
