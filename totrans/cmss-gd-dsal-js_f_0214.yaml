- en: '`Chapter 9`'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: These are the solutions to the exercises found in the section [`Exercises`](f_0095.xhtml#stacks.and.queues.exercises).
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Presumably, we’d want to be nice to the callers and answer their phone calls
    in the order in which they were received. For this we’d use a queue, which processes
    data FIFO (first in, first out)。
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: We’d be able to read the `4`，which is now the top element in the stack. This
    is because we’ll have popped the `6` and the `5`，which were previously sitting
    on top of the `4`。
  id: totrans-3
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: We’d be able to read the `3`，which is now at the front of the queue，after having
    dequeued the `1` and the `2`。
  id: totrans-4
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: 'We can take advantage of the stack because of the fact that we pop each item
    in the reverse order of which they were pushed onto the stack. So we’ll first
    push each character of the string onto the stack. Then we’ll pop each one off
    while adding them to the end of a new string:'
  id: totrans-5
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `import` Stack `from` *''./stack.js''*; |'
  id: totrans-6
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-7
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `function` reverse(string) { |'
  id: totrans-8
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `const` stack = `new` Stack(); |'
  id: totrans-9
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `let` newString = *''''*; |'
  id: totrans-10
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-11
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `for` (`const` **char** `of` string) { |'
  id: totrans-12
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `stack.push(`**char**`);` |'
  id: totrans-13
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-14
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-15
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `while` (stack.read()) { |'
  id: totrans-16
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | newString += stack.pop(); |'
  id: totrans-17
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-18
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-19
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` newString; |'
  id: totrans-20
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-21
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
- en: The Stack class imported at the beginning of our code is our homegrown Stack
    implementation from `Chapter 9`，which we’ve saved in a file called `stack.js`。
  id: totrans-22
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
