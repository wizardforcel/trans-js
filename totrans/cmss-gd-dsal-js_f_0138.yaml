- en: Linked Lists in Action
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One case where linked lists shine is when we examine a single list and delete
    many elements from it. Let’s say, for example, we’re building an application that
    combs through existing lists of email addresses and removes any email address
    that has an invalid format.
  prefs: []
  type: TYPE_NORMAL
- en: No matter whether the list is an array or a linked list, we need to comb through
    the entire list one element at a time to inspect each email address. This, naturally,
    takes N steps. However, let’s examine what happens when we actually delete each
    email address.
  prefs: []
  type: TYPE_NORMAL
- en: With an array, each time we delete an email address, we need another O(N) steps
    to shift the remaining data to the left to close the gap. All this shifting will
    happen before we can even inspect the next email address.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s assume that 1 in 10 email addresses are invalid. If we had a list of 1,000
    email addresses, we’d have about 100 invalid ones. Our algorithm, then, would
    take 1,000 steps to read all 1,000 email addresses. On top of that, though, it
    might take up to an additional 100,000 steps for deletion, as for each of the
    100 deleted addresses, we might shift up to 1,000 other elements.
  prefs: []
  type: TYPE_NORMAL
- en: With a linked list, however, as we comb through the list, each deletion takes
    just one step, as we can simply change a node’s link to point to the appropriate
    node and move on. For our 1,000 emails, then, our algorithm would take just 1,100
    steps, as there are 1,000 reading steps and 100 deletion steps.
  prefs: []
  type: TYPE_NORMAL
- en: It turns out, then, that linked lists are an amazing data structure for moving
    through an entire list while making insertions or deletions, as we never have
    to worry about shifting other data as we make an insertion or deletion.
  prefs: []
  type: TYPE_NORMAL
