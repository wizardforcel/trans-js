- en: Chapter 5
  id: totrans-0
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Harnessing the Power of Functions
  id: totrans-1
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: IN THIS CHAPTER
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) Getting to know JavaScript functions'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) Creating and using custom functions'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) Passing and returning function values'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Bullet](images/check.png) Working with anonymous and arrow functions'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Almost every JavaScript project beyond the simplest scripts will require one
    or more (usually a lot more) tasks or calculations that aren’t part of the JavaScript
    language or any Web API. What’s a coder to do? You roll up your sleeves and then
    roll your own code that accomplishes the task or runs the calculation.
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'This chapter shows you how to create such do-it-yourself code. In the pages
    that follow, you explore the powerful and infinitely useful realm of custom functions,
    where you craft reusable code that performs tasks that out-of-the-box JavaScript
    can’t do. ## Getting to Know the Function Structure'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: A `function` is a group of JavaScript statements that are separate from the
    rest of the script and that perform a designated task. When your script needs
    to perform that task, you tell it to run — or `execute`, in the vernacular — the
    function.
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The basic structure of a function looks like this:'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`function *functionName*([*arguments*]) { *JavaScript statements* }`'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s a summary of the various parts of a function:'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`function`: Identifies the block of code that follows it as a function.'
  id: totrans-13
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`functionName`: A unique name for the function. The naming rules and guidelines
    that I outline for variables in [Chapter 2](c02.xhtml) also apply to function
    names.'
  id: totrans-14
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`arguments`: One or more values that are passed to the function and that act
    as variables within the function. Arguments (or `parameters`, as they’re sometimes
    called) are typically one or more values that the function uses as the raw materials
    for its tasks or calculations. You always enter arguments between parentheses
    after the function name, and you separate multiple arguments with commas. If you
    don’t use arguments, you must still include the parentheses after the function
    name.'
  id: totrans-15
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '`JavaScript statements`: This is the code that performs the function’s tasks
    or calculations.'
  id: totrans-16
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 'Note, too, the use of braces (`{` and `}`). These are used to enclose the function’s
    statements within a block, which tells you (and the browser) where the function’s
    code begins and ends. There are only two rules for where these braces appear:'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The opening brace must appear after the function’s parentheses and before the
    first function statement.
  id: totrans-18
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 'The closing brace must appear after the last function statement.  ## Making
    a Function Call'
  id: totrans-19
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 'After your function is defined, you’ll eventually need to tell the browser
    to execute — or `call` — the function. There are three main ways to do this:'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: When the browser parses the `<script>` tag.
  id: totrans-21
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: After the page is loaded.
  id: totrans-22
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: In response to an event, such as the user clicking a button.
  id: totrans-23
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: The next three sections cover each of these scenarios.
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '### When the browser parses the `<script>` tag'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The simplest way to call a function is to include in your script a statement
    consisting of only the function name, followed by parentheses (assuming for the
    moment that your function uses no arguments). The following code provides an example.
    (I’ve listed the entire page to show you where the function and the statement
    that calls it appear in the page code.)
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <title>Calling
    a function when the <script> tag is parsed</title> <script> function displayGreeting()
    { const currentHour = new Date().getHours(); if (currentHour < 12) { console.log("Good
    morning!"); } else { console.log("Good day!"); } } displayGreeting(); </script>
    </head> <body> </body> </html>`'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The `<script>` tag includes a function named `displayGreeting`, which determines
    the current hour of the day and then writes a greeting to the console (check out
    [Figure 5-1](#c05-fig-0001); you learn about the console in [Chapter 9](c09.xhtml))
    based on whether it’s currently morning. The function is called by the `displayGreeting`
    statement that appears just after the function.
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Snapshot of an example of calling a function when the `<script>` tag is parsed.](images/9781394263219-fg0501.png)'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '[FIGURE 5-1:](#rc05-fig-0001) An example of calling a function when the `<script>`
    tag is parsed.  ### When the page load is complete'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: If your function references a page element, then calling the function from within
    the page’s head section won’t work because when the browser parses the script,
    the rest of the page hasn’t loaded yet, so your element reference will fail.
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'To work around this problem, place another `<script>` tag at the end of the
    body section, just before the closing `</body>` tag, as shown here:'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <title>Calling
    a function after the page is loaded</title> <script> function makeBackgroundRed()
    { document.body.style.backgroundColor = "red"; console.log("The background is
    now red."); } </script> </head> <body> <!-- Other body elements go here -->  <script>
    makeBackgroundRed(); </script> </body> </html>`'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The `makeBackgroundRed` function does two things: It uses `document.body.style.backgroundColor`
    to change the background color of the `body` element to red, and it uses `console.log`
    to write a message to that effect on the console.'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'In the function, `document.body` is a reference to the `body` element, which
    doesn’t “exist” until the page is fully loaded. That means that if you try to
    call the function with the initial script, you’ll get an error. To execute the
    function properly, a second `<script>` tag appears at the bottom of the `body`
    element, and that script calls the function with the following statement:'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`makeBackgroundRed();`'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: By the time the browser executes that statement, the `body` element exists,
    so the function runs without an error (check out [Figure 5-2](#c05-fig-0002)).
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Snapshot of an example of calling a function after the page has loaded.](images/9781394263219-fg0502.png)'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '`[FIGURE 5-2:](#rc05-fig-0002)` An example of calling a function after the
    page has loaded.  '
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'One of the most common ways that JavaScript functions are called is in response
    to some event. Events are such an important topic that I devote a big chunk of
    `[Chapter 6](c06.xhtml)` to them. For now, check out a relatively straightforward
    application: executing the function when the user clicks a button. The following
    code shows one way to do it:'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <title>Calling
    a function in response to an event</title> <script> function makeBackgroundRed()
    { document.body.style.backgroundColor= "red"; } function makeBackgroundWhite()
    { document.body.style.backgroundColor= "white"; } </script> </head> <body> <button
    onclick="makeBackgroundRed()"> Make Background Red </button> <button onclick="makeBackgroundWhite()">
    Make Background White </button> </body> </html>`'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'What I’ve done here is place two functions in the script: `makeBackgroundRed`
    changes the page background to red, as before, and `makeBackgroundWhite` changes
    the background color back to white.'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The buttons are standard HTML `button` elements (check out `[Figure 5-3](#c05-fig-0003)`),
    each of which includes the `onclick` attribute. This attribute defines a `handler`
    — that is, the function to execute — for the event that occurs when the user clicks
    the button. For example, consider the first button:'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<button onclick="makeBackgroundRed()">`'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Snapshot of an example of calling a function in response to an event.](images/9781394263219-fg0503.png)'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '`[FIGURE 5-3:](#rc05-fig-0003)` An example of calling a function in response
    to an event.'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The `onclick` attribute here says, in effect, “When somebody clicks this button,
    call the function named `makeBackgroundRed`.”  '
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: One of the main reasons to use functions is to gain control over when some chunk
    of JavaScript code gets executed. The previous section, for example, discusses
    how easy it is to use functions to set things up so that code doesn’t run until
    the user clicks a button.
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'However, there’s another major reason to use functions: to avoid repeating
    code unnecessarily. To understand what I mean, consider the two functions from
    the previous section:'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`function makeBackgroundRed() { document.body.style.backgroundColor= "red";
    } function makeBackgroundWhite() { document.body.style.backgroundColor= "white";
    }`'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: These functions perform the same task — changing the background color — and
    the only difference between them is that one changes the color to red and the
    other changes it to white. Whenever you end up with two or more functions that
    do essentially the same thing, you know that your code is inefficient.
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: So how do you make the code more efficient? That’s where the arguments mentioned
    earlier come into play. An `argument` is a value that is “sent” — or `passed,`
    in programming terms — to the function. The argument acts just like a variable,
    and it automatically stores whatever value is sent.
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '### Passing one value to a function'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'As an example, you can take the previous two functions, reduce them to a single
    function, and set up the color value as an argument. Here’s a new function that
    does just that:'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`function changeBackgroundColor(newColor) { document.body.style.backgroundColor
    = newColor; }`'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The argument is named `newColor` and is added between the parentheses that
    occur after the function name. JavaScript declares `newColor` as a variable automatically,
    so you don’t need a separate `let` or `const` statement. The function then uses
    the `newColor` value to change the background color. So how do you pass a value
    to the function? The following code presents a sample file that does so:'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <title>Passing
    a single value to a function</title> <script> function changeBackgroundColor(newColor)
    { document.body.style.backgroundColor = newColor; } </script> </head> <body> <button
    onclick="changeBackgroundColor(''red'')"> Make Background Red </button> <button
    onclick="changeBackgroundColor(''white'')"> Make Background White </button> </body>
    </html>`'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The key here is the `onclick` attribute that appears in both `<button>` tags.
    For example:'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`onclick="changeBackgroundColor(''red'')"`'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The string `'red'` is inserted into the parentheses after the function name,
    so that value is passed to the function itself. The other button passes the value
    `'white'`, and the function result changes accordingly.
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Warning](images/warning.png) In the two `onclick` attributes in the example
    code, notice that the values passed to the function are enclosed in single quotation
    marks (`''`). This is necessary because the `onclick` value as a whole is enclosed
    in double quotation marks (`"`).  ### Passing two or more values to a function'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'For more complex functions, you may need to use multiple arguments so that
    you can pass different kinds of values. If you use multiple arguments, separate
    each one with a comma, like this:'
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`function changeColors(newBackColor, newForeColor) { document.body.style.backgroundColor
    = newBackColor; document.body.style.color = newForeColor; }`'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'In this function, the `document.body.style.color` statement changes the foreground
    color (that is, the color of the page text). The following code shows a revised
    page where the buttons pass two values to the function:'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <title>Passing
    multiple values to a function</title> <script> function changeColors(newBackColor,
    newForeColor) { document.body.style.backgroundColor = newBackColor; document.body.style.color
    = newForeColor; } </script> </head> <body> <h1>Passing Multiple Values to a Function</h1>
    <button onclick="changeColors(''red'', ''white'')"> Red Background, White Text
    </button> <button onclick="changeColors(''white'', ''red'')"> White Background,
    Red Text </button> </body> </html>`'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Warning](images/warning.png) If you define a function to have multiple arguments,
    you must always pass values for each of those arguments to the function. If you
    don’t, the “value” `undefined` is passed, instead, which can cause problems.  ##
    Getting a Value from a Function'
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'So far, I’ve outlined two major advantages of using functions:'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: You can use them to control when code is executed.
  id: totrans-68
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: You can use them to consolidate repetitive code into a single routine.
  id: totrans-69
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 'The third major benefit that functions bring to the JavaScript table is that
    you can use them to perform calculations and then return the result. As an example,
    here’s a function that calculates the tip on a restaurant bill:'
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`function calculateTip(preTip, tipPercent) { const tipResult = preTip * tipPercent;
    return tipResult; }  const preTipTotal = 100.00; const tipPercentage = 0.15; const
    tipCost = calculateTip(preTipTotal, tipPercentage); const totalBill = preTipTotal
    + tipCost; document.write("Your total bill is $" + totalBill);`'
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The function named `calculateTip` takes two arguments: `preTip` is the total
    of the bill before the tip, and `tipPercent` is the percentage used to calculate
    the tip. The function then declares a variable named `tipResult` and uses it to
    store the calculation — `preTip` multiplied by `tipPercent`. The key for this
    example is the second line of the function:'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`return tipResult;`'
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The `return` statement is JavaScript’s way of sending a value `back` to the
    statement that called the function. That statement comes after the function:'
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`tipCost = calculateTip(preTipTotal, tipPercentage);`'
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: This statement first passes the value of `preTipTotal` (initialized as `100.00`
    earlier in the script) and `tipPercentage` (initialized as `0.15` earlier) to
    the `calculateTip` function. When that function returns its result, the entire
    expression `calculateTip(preTipTotal, tipPercentage)` is replaced by that result,
    meaning that it gets stored in the `tipCost` variable. Then `preTipTotal` and
    `tipCost` are added together, the result is stored in `totalBill`, and a `document.write`
    statement displays the final calculation (check out [Figure 5-4](#c05-fig-0004)).
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![A snapshot displays the output as follows. Your total bill is 115 dollars.](images/9781394263219-fg0504.png)'
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: '[FIGURE 5-4:](#rc05-fig-0004) The output includes the return value of the custom
    function calculation.  ## Working with Anonymous Functions'
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这里是本章早些时候函数语法的另一个视角：
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`function *functionName*([arguments]) { JavaScript statements }`'
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这种函数语法创建了一个所谓的`named function`，因为——你猜对了——这个函数有一个名字。
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 然而，创建一个没有名字的函数也是可能的：
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`function ([arguments]) { JavaScript statements }`'
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这种函数语法创建了一个所谓的`anonymous function`，因为——没错——这个函数没有名字。
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 为什么使用匿名函数？好吧，首先，如果你不想的话，你并不需要。其次，使用匿名函数的主要原因是为了避免在不需要时创建一个命名对象。每个大型网页项目都有一个巨大的`namespace`，它指的是你分配给变量和函数等事物的标识符的完整集合。命名空间越大，发生`namespace
    collision`的可能性就越大，即你为两个不同的事物使用相同的标识符。坏消息！
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Remember](images/remember.png) 匿名函数是在ES6中引入的，因此如果你需要支持非常旧的浏览器，比如Internet
    Explorer 11，就不要使用它们。'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 如果你有一个只在项目中使用一次的函数，现代编程实践认为将其设为匿名函数是一个好主意，这样可以在命名空间中减少一个标识符。
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 好吧，我听到你在想，早些时候你说我们通过使用函数名来调用函数。如果一个匿名函数没有名字，我们该如何运行它？好问题！我们可以看两个主要方法：
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 将函数赋值给变量
  id: totrans-89
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: 用函数本身替换函数调用
  id: totrans-90
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
- en: '### 将匿名函数赋值给变量'
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 上一节的示例代码定义了命名函数`calculateTip()`，并稍后使用`tipCost`变量存储函数结果。这是一个完美的示例，说明在仅使用命名函数计算`tipCost`值时不需要命名函数。当你不需要时给命名空间添加一个身份被称为`polluting`命名空间，在现代JavaScript编程中这是一个大忌。
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 你可以将这段代码重写为使用匿名函数：
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`const preTipTotal = 100.00; const tipPercentage = 0.15;  // 使用匿名函数声明tipCost
    const tipCost = function (preTip, tipPercent) { const tipResult = preTip * tipPercent;
    return (tipResult); } const totalBill = preTipTotal + tipCost(preTipTotal, tipPercentage);
    document.write("Your total bill is $" + totalBill);`'
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '这里最大的变化是，我将`tipCost`变量的值声明为一个匿名函数。这个匿名函数与之前的`calculateTip()`命名函数是相同的，只是没有名字。在倒数第二个语句中，我通过使用`tipCost(preTipTotal,
    tipPercentage)`调用了匿名函数。 ### 用匿名函数替换函数调用'
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 匿名函数最常见的用途之一是当你需要将一个函数作为参数传递给另一个函数时。被传递的函数被称为`callback`函数。
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 首先，这里是一个使用命名函数的示例：
  id: totrans-97
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<body> <button id="bgRed"> Make Background Red </button> <button id="bgWhite">
    Make Background White </button> <script> function makeBackgroundRed() { document.body.style.backgroundColor=
    ''red''; } function makeBackgroundWhite() { document.body.style.backgroundColor=
    ''white''; } document.getElementById(''bgRed'').addEventListener( ''click'', makeBackgroundRed
    ); document.getElementById(''bgWhite'').addEventListener( ''click'', makeBackgroundWhite
    ); </script> </body>`'
  id: totrans-98
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 脚本声明了两个命名函数：`makeBackgroundRed()`和`makeBackgroundWhite()`。代码然后创建了两个事件监听器。其中一个监听`id`值为`bgRed`的按钮的点击事件，当检测到点击时，运行`makeBackgroundRed()`回调函数。另一个事件监听器监听`id`值为`bgWhite`的按钮的点击事件，当检测到点击时，运行`makeBackgroundWhite()`回调函数。有关`document`对象以及`getElementById()`和`addEventListener()`方法的详细信息，请参阅[第6章](c06.xhtml)。
  id: totrans-99
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 再次，你有两个不需要命名的函数，因此你可以通过用匿名函数替换回调函数来将它们从命名空间中移除。以下是修订后的代码：
  id: totrans-100
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`<body> <button id="bgRed"> Make Background Red </button> <button id="bgWhite">
    Make Background White </button> <script> document.getElementById(''bgRed'').addEventListener(
    ''click'', function() { document.body.style.backgroundColor= ''red''; } ); document.getElementById(''bgWhite'').addEventListener(
    ''click'', function() { document.body.style.backgroundColor= ''white''; } ); </script>
    </body>`  ## Working with Arrow Functions'
  id: totrans-101
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 随着你在JavaScript中的进步，你会发现自己不断使用匿名函数。当你达到那个阶段时，你会高兴地知道ES6还提供了一种更简单的匿名函数语法。也就是说，而不是使用这个：
  id: totrans-102
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``function ([*arguments*]) { *JavaScript statements* }``'
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 你可以使用这个：
  id: totrans-104
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``([*arguments*]) => { *JavaScript statements* }``'
  id: totrans-105
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 所有我在这里做的就是去掉`function`关键字，并用字符`=`和`>`替换了参数和打开大括号之间的字符。字符`=>`看起来像箭头（JavaScripters称之为`fat
    arrow`），因此这种语法版本被称为`arrow function`。
  id: totrans-106
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![Remember](images/remember.png) `Arrow functions`是ES6的发明，因此如果你需要支持非常旧的浏览器，如Internet
    Explorer 11，请不要使用它们。'
  id: totrans-107
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 例如，这里有一个来自早些时候的匿名函数（“[Assigning an anonymous function to a variable](#c05-sec-0012)”部分）：
  id: totrans-108
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '``// Declare tipCost using an anonymous function const tipCost = function (preTip,
    tipPercent) { const tipResult = preTip * tipPercent; return (tipResult); }``'
  id: totrans-109
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 你可以使用箭头函数重写它：
  id: totrans-110
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '```javascript'
  id: totrans-111
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 如果你的匿名函数由单个语句组成，你可以利用一个称为*隐式返回*的箭头函数特性：
  id: totrans-112
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '```javascript'
  id: totrans-113
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这里，JavaScript假设单语句函数意味着函数在执行完语句后立即返回，因此你可以省略花括号和`return`关键字。这是一个例子：
  id: totrans-114
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '```javascript'
  id: totrans-115
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 类似地，这里是上一节中的一个匿名回调函数：
  id: totrans-116
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '```javascript'
  id: totrans-117
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 你可以将这段代码重写如下，以使用带有隐式返回的箭头函数：
  id: totrans-118
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '```javascript'
  id: totrans-119
  prefs: []
  stylish: true
  type: TYPE_NORMAL
