- en: Chapter 5
  id: totrans-0
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第五章
- en: Harnessing the Power of Functions
  id: totrans-1
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 函数的强大力量
- en: IN THIS CHAPTER
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 本章内容
- en: '![Bullet](images/check.png) Getting to know JavaScript functions'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) 了解 JavaScript 函数'
- en: '![Bullet](images/check.png) Creating and using custom functions'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) 创建并使用自定义函数'
- en: '![Bullet](images/check.png) Passing and returning function values'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) 传递和返回函数值'
- en: '![Bullet](images/check.png) Working with anonymous and arrow functions'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) 使用匿名函数和箭头函数'
- en: Almost every JavaScript project beyond the simplest scripts will require one
    or more (usually a lot more) tasks or calculations that aren’t part of the JavaScript
    language or any Web API. What’s a coder to do? You roll up your sleeves and then
    roll your own code that accomplishes the task or runs the calculation.
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 几乎每个超出最简单脚本的 JavaScript 项目都会需要一个或多个（通常更多）任务或计算，这些任务或计算不属于 JavaScript 语言或任何 Web
    API。那么程序员该怎么办呢？你挽起袖子，写自己的代码来完成任务或执行计算。
- en: 'This chapter shows you how to create such do-it-yourself code. In the pages
    that follow, you explore the powerful and infinitely useful realm of custom functions,
    where you craft reusable code that performs tasks that out-of-the-box JavaScript
    can’t do. ## Getting to Know the Function Structure'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 本章将向你展示如何创建这样的自定义代码。在接下来的页面中，你将探索自定义函数这一强大且无穷有用的领域，在哪里你可以编写可重用的代码，执行一些 JavaScript
    原生无法做到的任务。
- en: A `function` is a group of JavaScript statements that are separate from the
    rest of the script and that perform a designated task. When your script needs
    to perform that task, you tell it to run — or `execute`, in the vernacular — the
    function.
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`function` 是一组与脚本其他部分分开的 JavaScript 语句，执行指定的任务。当脚本需要执行该任务时，你会告诉它运行——或者用通俗的说法就是
    `执行`——该函数。'
- en: 'The basic structure of a function looks like this:'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数的基本结构如下所示：
- en: '`function *functionName*([*arguments*]) { *JavaScript statements* }`'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`function *functionName*([*arguments*]) { *JavaScript 语句* }`'
- en: 'Here’s a summary of the various parts of a function:'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 下面是函数各部分的总结：
- en: '`function`: Identifies the block of code that follows it as a function.'
  id: totrans-13
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`function`：标识紧随其后的代码块为一个函数。'
- en: '`functionName`: A unique name for the function. The naming rules and guidelines
    that I outline for variables in [Chapter 2](c02.xhtml) also apply to function
    names.'
  id: totrans-14
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`functionName`：函数的唯一名称。我在[第 2 章](c02.xhtml)中为变量概述的命名规则和准则也适用于函数名。'
- en: '`arguments`: One or more values that are passed to the function and that act
    as variables within the function. Arguments (or `parameters`, as they’re sometimes
    called) are typically one or more values that the function uses as the raw materials
    for its tasks or calculations. You always enter arguments between parentheses
    after the function name, and you separate multiple arguments with commas. If you
    don’t use arguments, you must still include the parentheses after the function
    name.'
  id: totrans-15
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`arguments`：传递给函数的一个或多个值，作为函数内部的变量。参数（有时也称为 `parameters`）通常是一个或多个值，函数用它们作为任务或计算的原料。你总是将参数放在函数名后的圆括号中，并用逗号分隔多个参数。如果你不使用参数，仍然需要在函数名后加上圆括号。'
- en: '`JavaScript statements`: This is the code that performs the function’s tasks
    or calculations.'
  id: totrans-16
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`JavaScript 语句`：这是执行函数任务或计算的代码。'
- en: 'Note, too, the use of braces (`{` and `}`). These are used to enclose the function’s
    statements within a block, which tells you (and the browser) where the function’s
    code begins and ends. There are only two rules for where these braces appear:'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 还要注意花括号（`{` 和 `}`）的使用。这些花括号用于将函数的语句括在一个代码块中，告诉你（以及浏览器）函数的代码从哪里开始，到哪里结束。关于花括号的位置，只有两条规则：
- en: The opening brace must appear after the function’s parentheses and before the
    first function statement.
  id: totrans-18
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 开始的花括号必须出现在函数的圆括号之后，并在第一个函数语句之前。
- en: 'The closing brace must appear after the last function statement.  ## Making
    a Function Call'
  id: totrans-19
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '结束的花括号必须出现在最后一个函数语句之后。 ## 调用函数'
- en: 'After your function is defined, you’ll eventually need to tell the browser
    to execute — or `call` — the function. There are three main ways to do this:'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在函数定义后，你最终需要告诉浏览器执行——或者 `调用`——该函数。主要有三种方式来实现这一点：
- en: When the browser parses the `<script>` tag.
  id: totrans-21
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 当浏览器解析 `<script>` 标签时。
- en: After the page is loaded.
  id: totrans-22
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 页面加载后。
- en: In response to an event, such as the user clicking a button.
  id: totrans-23
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 响应事件，例如用户点击按钮。
- en: The next three sections cover each of these scenarios.
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 接下来的三节将分别涵盖这些场景。
- en: '### When the browser parses the `<script>` tag'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '### 当浏览器解析 `<script>` 标签时'
- en: The simplest way to call a function is to include in your script a statement
    consisting of only the function name, followed by parentheses (assuming for the
    moment that your function uses no arguments). The following code provides an example.
    (I’ve listed the entire page to show you where the function and the statement
    that calls it appear in the page code.)
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 调用函数的最简单方法是，在脚本中包含一个仅由函数名和圆括号组成的语句（暂时假设你的函数不使用参数）。以下代码提供了一个示例。（我列出了整个页面，以便向你展示函数及其调用语句在页面代码中的位置。）
- en: '`<!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <title>Calling
    a function when the <script> tag is parsed</title> <script> function displayGreeting()
    { const currentHour = new Date().getHours(); if (currentHour < 12) { console.log("Good
    morning!"); } else { console.log("Good day!"); } } displayGreeting(); </script>
    </head> <body> </body> </html>`'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <title>在 `<script>`
    标签解析时调用函数</title> <script> function displayGreeting() { const currentHour = new
    Date().getHours(); if (currentHour < 12) { console.log("早上好！"); } else { console.log("你好！");
    } } displayGreeting(); </script> </head> <body> </body> </html>`'
- en: The `<script>` tag includes a function named `displayGreeting`, which determines
    the current hour of the day and then writes a greeting to the console (check out
    [Figure 5-1](#c05-fig-0001); you learn about the console in [Chapter 9](c09.xhtml))
    based on whether it’s currently morning. The function is called by the `displayGreeting`
    statement that appears just after the function.
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<script>` 标签中包含一个名为 `displayGreeting` 的函数，该函数根据当前时间确定是早上还是其他时间，然后将问候语写入控制台（请查看
    [图 5-1](#c05-fig-0001)；你将在 [第9章](c09.xhtml) 学到更多关于控制台的内容）。该函数通过紧跟其后的 `displayGreeting`
    语句被调用。'
- en: '![Snapshot of an example of calling a function when the `<script>` tag is parsed.](images/9781394263219-fg0501.png)'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![调用函数时 `<script>` 标签被解析的示例快照。](images/9781394263219-fg0501.png)'
- en: '[FIGURE 5-1:](#rc05-fig-0001) An example of calling a function when the `<script>`
    tag is parsed.  ### When the page load is complete'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[图 5-1：](#rc05-fig-0001) 在 `<script>` 标签解析时调用函数的示例。  ### 当页面加载完成时'
- en: If your function references a page element, then calling the function from within
    the page’s head section won’t work because when the browser parses the script,
    the rest of the page hasn’t loaded yet, so your element reference will fail.
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你的函数引用了页面元素，那么从页面头部部分调用函数将不起作用，因为当浏览器解析脚本时，页面的其余部分尚未加载，因此你的元素引用将失败。
- en: 'To work around this problem, place another `<script>` tag at the end of the
    body section, just before the closing `</body>` tag, as shown here:'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为了解决这个问题，可以在页面的 `body` 部分末尾、闭合的 `</body>` 标签之前放置另一个 `<script>` 标签，如下所示：
- en: '`<!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <title>Calling
    a function after the page is loaded</title> <script> function makeBackgroundRed()
    { document.body.style.backgroundColor = "red"; console.log("The background is
    now red."); } </script> </head> <body> <!-- Other body elements go here -->  <script>
    makeBackgroundRed(); </script> </body> </html>`'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <title>在页面加载后调用函数</title>
    <script> function makeBackgroundRed() { document.body.style.backgroundColor =
    "red"; console.log("背景现在是红色的。"); } </script> </head> <body> <!-- 其他页面元素在这里 -->  <script>
    makeBackgroundRed(); </script> </body> </html>`'
- en: 'The `makeBackgroundRed` function does two things: It uses `document.body.style.backgroundColor`
    to change the background color of the `body` element to red, and it uses `console.log`
    to write a message to that effect on the console.'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`makeBackgroundRed` 函数做了两件事：它使用 `document.body.style.backgroundColor` 将 `body`
    元素的背景色改为红色，并使用 `console.log` 将这个信息写入控制台。'
- en: 'In the function, `document.body` is a reference to the `body` element, which
    doesn’t “exist” until the page is fully loaded. That means that if you try to
    call the function with the initial script, you’ll get an error. To execute the
    function properly, a second `<script>` tag appears at the bottom of the `body`
    element, and that script calls the function with the following statement:'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个函数中，`document.body` 是指向 `body` 元素的引用，而该元素在页面完全加载之前是“不存在”的。这意味着，如果你尝试在初始脚本中调用该函数，将会出现错误。为了正确执行该函数，第二个
    `<script>` 标签出现在 `body` 元素的底部，该脚本通过以下语句调用函数：
- en: '`makeBackgroundRed();`'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`makeBackgroundRed();`'
- en: By the time the browser executes that statement, the `body` element exists,
    so the function runs without an error (check out [Figure 5-2](#c05-fig-0002)).
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当浏览器执行该语句时，`body` 元素已经存在，因此函数可以顺利运行而不会出错（请查看 [图 5-2](#c05-fig-0002)）。
- en: '![Snapshot of an example of calling a function after the page has loaded.](images/9781394263219-fg0502.png)'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![页面加载后响应事件调用函数的示例快照。](images/9781394263219-fg0502.png)'
- en: '`[FIGURE 5-2:](#rc05-fig-0002)` An example of calling a function after the
    page has loaded.  '
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`[图 5-2:](#rc05-fig-0002)` 页面加载后调用函数的示例。'
- en: 'One of the most common ways that JavaScript functions are called is in response
    to some event. Events are such an important topic that I devote a big chunk of
    `[Chapter 6](c06.xhtml)` to them. For now, check out a relatively straightforward
    application: executing the function when the user clicks a button. The following
    code shows one way to do it:'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: JavaScript 函数最常见的调用方式之一是响应某个事件。事件是一个非常重要的话题，我在 `[第 6 章](c06.xhtml)` 中专门讲解了它们。现在，来看一个相对简单的应用：当用户点击按钮时执行函数。以下代码展示了实现这一点的其中一种方法：
- en: '`<!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <title>Calling
    a function in response to an event</title> <script> function makeBackgroundRed()
    { document.body.style.backgroundColor= "red"; } function makeBackgroundWhite()
    { document.body.style.backgroundColor= "white"; } </script> </head> <body> <button
    onclick="makeBackgroundRed()"> Make Background Red </button> <button onclick="makeBackgroundWhite()">
    Make Background White </button> </body> </html>`'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <title>响应事件调用函数</title>
    <script> function makeBackgroundRed() { document.body.style.backgroundColor= "red";
    } function makeBackgroundWhite() { document.body.style.backgroundColor= "white";
    } </script> </head> <body> <button onclick="makeBackgroundRed()"> 使背景变红 </button>
    <button onclick="makeBackgroundWhite()"> 使背景变白 </button> </body> </html>`'
- en: 'What I’ve done here is place two functions in the script: `makeBackgroundRed`
    changes the page background to red, as before, and `makeBackgroundWhite` changes
    the background color back to white.'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我在这里做的是将两个函数放入脚本中：`makeBackgroundRed`将页面背景更改为红色，`makeBackgroundWhite`将背景颜色恢复为白色。
- en: 'The buttons are standard HTML `button` elements (check out `[Figure 5-3](#c05-fig-0003)`),
    each of which includes the `onclick` attribute. This attribute defines a `handler`
    — that is, the function to execute — for the event that occurs when the user clicks
    the button. For example, consider the first button:'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这些按钮是标准的 HTML `button` 元素（参见 `[图 5-3](#c05-fig-0003)`），每个按钮都包括 `onclick` 属性。这个属性定义了一个
    `handler`——即要执行的函数——用于响应用户点击按钮时触发的事件。例如，考虑第一个按钮：
- en: '`<button onclick="makeBackgroundRed()">`'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<button onclick="makeBackgroundRed()">`'
- en: '![Snapshot of an example of calling a function in response to an event.](images/9781394263219-fg0503.png)'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![响应事件调用函数的示例快照。](images/9781394263219-fg0503.png)'
- en: '`[FIGURE 5-3:](#rc05-fig-0003)` An example of calling a function in response
    to an event.'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`[图 5-3:](#rc05-fig-0003)` 响应事件调用函数的示例。'
- en: 'The `onclick` attribute here says, in effect, “When somebody clicks this button,
    call the function named `makeBackgroundRed`.”  '
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里的`onclick`属性实际上是说：“当有人点击这个按钮时，调用名为`makeBackgroundRed`的函数。”
- en: One of the main reasons to use functions is to gain control over when some chunk
    of JavaScript code gets executed. The previous section, for example, discusses
    how easy it is to use functions to set things up so that code doesn’t run until
    the user clicks a button.
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 使用函数的主要原因之一是能够控制某些 JavaScript 代码执行的时机。例如，上一节就讨论了如何利用函数来设置，确保代码在用户点击按钮之前不会执行。
- en: 'However, there’s another major reason to use functions: to avoid repeating
    code unnecessarily. To understand what I mean, consider the two functions from
    the previous section:'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，使用函数还有另一个重要原因：避免不必要的重复代码。为了理解我的意思，考虑一下上一节中的两个函数：
- en: '`function makeBackgroundRed() { document.body.style.backgroundColor= "red";
    } function makeBackgroundWhite() { document.body.style.backgroundColor= "white";
    }`'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`function makeBackgroundRed() { document.body.style.backgroundColor= "red";
    } function makeBackgroundWhite() { document.body.style.backgroundColor= "white";
    }`'
- en: These functions perform the same task — changing the background color — and
    the only difference between them is that one changes the color to red and the
    other changes it to white. Whenever you end up with two or more functions that
    do essentially the same thing, you know that your code is inefficient.
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这两个函数执行相同的任务——改变背景颜色——它们之间的唯一区别是一个将颜色更改为红色，而另一个将其更改为白色。每当你遇到两个或更多本质上做同样事情的函数时，你就知道你的代码效率不高。
- en: So how do you make the code more efficient? That’s where the arguments mentioned
    earlier come into play. An `argument` is a value that is “sent” — or `passed,`
    in programming terms — to the function. The argument acts just like a variable,
    and it automatically stores whatever value is sent.
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 那么，如何提高代码的效率呢？这时前面提到的参数就发挥了作用。`argument`（参数）是一个被“传送”——或者在编程术语中称为“传递”——给函数的值。参数就像一个变量，它会自动存储传递给它的任何值。
- en: '### Passing one value to a function'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '### 向函数传递一个值'
- en: 'As an example, you can take the previous two functions, reduce them to a single
    function, and set up the color value as an argument. Here’s a new function that
    does just that:'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 作为一个例子，你可以将之前的两个函数合并为一个函数，并将颜色值设置为参数。这里有一个实现这一功能的新函数：
- en: '`function changeBackgroundColor(newColor) { document.body.style.backgroundColor
    = newColor; }`'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`function changeBackgroundColor(newColor) { document.body.style.backgroundColor
    = newColor; }`'
- en: 'The argument is named `newColor` and is added between the parentheses that
    occur after the function name. JavaScript declares `newColor` as a variable automatically,
    so you don’t need a separate `let` or `const` statement. The function then uses
    the `newColor` value to change the background color. So how do you pass a value
    to the function? The following code presents a sample file that does so:'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 参数被命名为`newColor`，并被添加到函数名称后的括号中。JavaScript会自动将`newColor`声明为一个变量，因此你不需要单独使用`let`或`const`语句。然后，函数使用`newColor`的值来改变背景颜色。那么，如何向函数传递一个值呢？以下代码展示了一个实现这一功能的示例文件：
- en: '`<!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <title>Passing
    a single value to a function</title> <script> function changeBackgroundColor(newColor)
    { document.body.style.backgroundColor = newColor; } </script> </head> <body> <button
    onclick="changeBackgroundColor(''red'')"> Make Background Red </button> <button
    onclick="changeBackgroundColor(''white'')"> Make Background White </button> </body>
    </html>`'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <title>向函数传递一个值</title>
    <script> function changeBackgroundColor(newColor) { document.body.style.backgroundColor
    = newColor; } </script> </head> <body> <button onclick="changeBackgroundColor(''red'')">
    设置背景为红色 </button> <button onclick="changeBackgroundColor(''white'')"> 设置背景为白色
    </button> </body> </html>`'
- en: 'The key here is the `onclick` attribute that appears in both `<button>` tags.
    For example:'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里的关键是出现在两个`<button>`标签中的`onclick`属性。例如：
- en: '`onclick="changeBackgroundColor(''red'')"`'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`onclick="changeBackgroundColor(''red'')"`'
- en: The string `'red'` is inserted into the parentheses after the function name,
    so that value is passed to the function itself. The other button passes the value
    `'white'`, and the function result changes accordingly.
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 字符串`'red'`被插入到函数名称后的括号中，这样该值就会传递给函数本身。另一个按钮传递值`'white'`，函数结果会相应地变化。
- en: '![Warning](images/warning.png) In the two `onclick` attributes in the example
    code, notice that the values passed to the function are enclosed in single quotation
    marks (`''`). This is necessary because the `onclick` value as a whole is enclosed
    in double quotation marks (`"`).  ### Passing two or more values to a function'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![警告](images/warning.png) 在示例代码中的两个`onclick`属性中，请注意传递给函数的值被单引号（`''`）括起来。这是必要的，因为`onclick`的值整体是用双引号（`"`）括起来的。###
    向函数传递两个或更多值'
- en: 'For more complex functions, you may need to use multiple arguments so that
    you can pass different kinds of values. If you use multiple arguments, separate
    each one with a comma, like this:'
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 对于更复杂的函数，你可能需要使用多个参数，以便传递不同类型的值。如果使用多个参数，每个参数之间需要用逗号分隔，如下所示：
- en: '`function changeColors(newBackColor, newForeColor) { document.body.style.backgroundColor
    = newBackColor; document.body.style.color = newForeColor; }`'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`function changeColors(newBackColor, newForeColor) { document.body.style.backgroundColor
    = newBackColor; document.body.style.color = newForeColor; }`'
- en: 'In this function, the `document.body.style.color` statement changes the foreground
    color (that is, the color of the page text). The following code shows a revised
    page where the buttons pass two values to the function:'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个函数中，`document.body.style.color`语句改变了前景色（即页面文本的颜色）。以下代码展示了一个修改后的页面，其中按钮将两个值传递给函数：
- en: '`<!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <title>Passing
    multiple values to a function</title> <script> function changeColors(newBackColor,
    newForeColor) { document.body.style.backgroundColor = newBackColor; document.body.style.color
    = newForeColor; } </script> </head> <body> <h1>Passing Multiple Values to a Function</h1>
    <button onclick="changeColors(''red'', ''white'')"> Red Background, White Text
    </button> <button onclick="changeColors(''white'', ''red'')"> White Background,
    Red Text </button> </body> </html>`'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <title>将多个值传递给函数</title>
    <script> function changeColors(newBackColor, newForeColor) { document.body.style.backgroundColor
    = newBackColor; document.body.style.color = newForeColor; } </script> </head>
    <body> <h1>将多个值传递给函数</h1> <button onclick="changeColors(''red'', ''white'')">
    红色背景，白色文本 </button> <button onclick="changeColors(''white'', ''red'')"> 白色背景，红色文本
    </button> </body> </html>`'
- en: '![Warning](images/warning.png) If you define a function to have multiple arguments,
    you must always pass values for each of those arguments to the function. If you
    don’t, the “value” `undefined` is passed, instead, which can cause problems.  ##
    Getting a Value from a Function'
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![警告](images/warning.png) 如果你定义一个函数有多个参数，你必须始终为每个参数传递值。如果不传递值，`undefined`会被传递，这可能会导致问题。  ##
    从函数获取值'
- en: 'So far, I’ve outlined two major advantages of using functions:'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 到目前为止，我已经概述了使用函数的两个主要优点：
- en: You can use them to control when code is executed.
  id: totrans-68
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 你可以用它们来控制代码的执行时机。
- en: You can use them to consolidate repetitive code into a single routine.
  id: totrans-69
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 你可以用它们将重复的代码整合成一个单一的例程。
- en: 'The third major benefit that functions bring to the JavaScript table is that
    you can use them to perform calculations and then return the result. As an example,
    here’s a function that calculates the tip on a restaurant bill:'
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数为JavaScript带来的第三大好处是，你可以用它们来执行计算并返回结果。作为示例，这里是一个计算餐厅账单小费的函数：
- en: '`function calculateTip(preTip, tipPercent) { const tipResult = preTip * tipPercent;
    return tipResult; }  const preTipTotal = 100.00; const tipPercentage = 0.15; const
    tipCost = calculateTip(preTipTotal, tipPercentage); const totalBill = preTipTotal
    + tipCost; document.write("Your total bill is $" + totalBill);`'
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`function calculateTip(preTip, tipPercent) { const tipResult = preTip * tipPercent;
    return tipResult; }  const preTipTotal = 100.00; const tipPercentage = 0.15; const
    tipCost = calculateTip(preTipTotal, tipPercentage); const totalBill = preTipTotal
    + tipCost; document.write("Your total bill is $" + totalBill);`'
- en: 'The function named `calculateTip` takes two arguments: `preTip` is the total
    of the bill before the tip, and `tipPercent` is the percentage used to calculate
    the tip. The function then declares a variable named `tipResult` and uses it to
    store the calculation — `preTip` multiplied by `tipPercent`. The key for this
    example is the second line of the function:'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 名为`calculateTip`的函数接受两个参数：`preTip`是小费之前账单的总额，`tipPercent`是用于计算小费的百分比。函数接着声明一个名为`tipResult`的变量，并用它来存储计算结果——`preTip`乘以`tipPercent`。这个示例的关键是函数的第二行：
- en: '`return tipResult;`'
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return tipResult;`'
- en: 'The `return` statement is JavaScript’s way of sending a value `back` to the
    statement that called the function. That statement comes after the function:'
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return`语句是JavaScript返回值给调用函数语句的方式。该语句位于函数之后：'
- en: '`tipCost = calculateTip(preTipTotal, tipPercentage);`'
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`tipCost = calculateTip(preTipTotal, tipPercentage);`'
- en: This statement first passes the value of `preTipTotal` (initialized as `100.00`
    earlier in the script) and `tipPercentage` (initialized as `0.15` earlier) to
    the `calculateTip` function. When that function returns its result, the entire
    expression `calculateTip(preTipTotal, tipPercentage)` is replaced by that result,
    meaning that it gets stored in the `tipCost` variable. Then `preTipTotal` and
    `tipCost` are added together, the result is stored in `totalBill`, and a `document.write`
    statement displays the final calculation (check out [Figure 5-4](#c05-fig-0004)).
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 该语句首先将`preTipTotal`（之前在脚本中初始化为`100.00`）和`tipPercentage`（之前初始化为`0.15`）的值传递给`calculateTip`函数。当该函数返回其结果时，整个表达式`calculateTip(preTipTotal,
    tipPercentage)`会被该结果替换，这意味着结果会存储在`tipCost`变量中。然后，`preTipTotal`和`tipCost`相加，结果存储在`totalBill`中，`document.write`语句显示最终计算结果（查看[图
    5-4](#c05-fig-0004)）。
- en: '![A snapshot displays the output as follows. Your total bill is 115 dollars.](images/9781394263219-fg0504.png)'
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![一张快照显示输出如下。您的总账单是115美元。](images/9781394263219-fg0504.png)'
- en: '[FIGURE 5-4:](#rc05-fig-0004) The output includes the return value of the custom
    function calculation.  ## Working with Anonymous Functions'
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[图 5-4：](#rc05-fig-0004) 输出包括自定义函数计算的返回值。 ## 使用匿名函数'
- en: 这里是本章早些时候函数语法的另一个视角：
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里是本章早些时候函数语法的另一个视角：
- en: '`function *functionName*([arguments]) { JavaScript statements }`'
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`function *functionName*([arguments]) { JavaScript statements }`'
- en: 这种函数语法创建了一个所谓的`named function`，因为——你猜对了——这个函数有一个名字。
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这种函数语法创建了一个所谓的`named function`，因为——你猜对了——这个函数有一个名字。
- en: 然而，创建一个没有名字的函数也是可能的：
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，创建一个没有名字的函数也是可能的：
- en: '`function ([arguments]) { JavaScript statements }`'
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`function ([arguments]) { JavaScript statements }`'
- en: 这种函数语法创建了一个所谓的`anonymous function`，因为——没错——这个函数没有名字。
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这种函数语法创建了一个所谓的`anonymous function`，因为——没错——这个函数没有名字。
- en: 为什么使用匿名函数？好吧，首先，如果你不想的话，你并不需要。其次，使用匿名函数的主要原因是为了避免在不需要时创建一个命名对象。每个大型网页项目都有一个巨大的`namespace`，它指的是你分配给变量和函数等事物的标识符的完整集合。命名空间越大，发生`namespace
    collision`的可能性就越大，即你为两个不同的事物使用相同的标识符。坏消息！
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为什么使用匿名函数？好吧，首先，如果你不想的话，你并不需要。其次，使用匿名函数的主要原因是为了避免在不需要时创建一个命名对象。每个大型网页项目都有一个巨大的`namespace`，它指的是你分配给变量和函数等事物的标识符的完整集合。命名空间越大，发生`namespace
    collision`的可能性就越大，即你为两个不同的事物使用相同的标识符。坏消息！
- en: '![Remember](images/remember.png) 匿名函数是在ES6中引入的，因此如果你需要支持非常旧的浏览器，比如Internet
    Explorer 11，就不要使用它们。'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![记住](images/remember.png) 匿名函数是在ES6中引入的，因此如果你需要支持非常旧的浏览器，比如Internet Explorer
    11，就不要使用它们。'
- en: 如果你有一个只在项目中使用一次的函数，现代编程实践认为将其设为匿名函数是一个好主意，这样可以在命名空间中减少一个标识符。
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你有一个只在项目中使用一次的函数，现代编程实践认为将其设为匿名函数是一个好主意，这样可以在命名空间中减少一个标识符。
- en: 好吧，我听到你在想，早些时候你说我们通过使用函数名来调用函数。如果一个匿名函数没有名字，我们该如何运行它？好问题！我们可以看两个主要方法：
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 好吧，我听到你在想，早些时候你说我们通过使用函数名来调用函数。如果一个匿名函数没有名字，我们该如何运行它？好问题！我们可以看两个主要方法：
- en: 将函数赋值给变量
  id: totrans-89
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 将函数赋值给变量
- en: 用函数本身替换函数调用
  id: totrans-90
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 用函数本身替换函数调用
- en: '### 将匿名函数赋值给变量'
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '### 将匿名函数赋值给变量'
- en: 上一节的示例代码定义了命名函数`calculateTip()`，并稍后使用`tipCost`变量存储函数结果。这是一个完美的示例，说明在仅使用命名函数计算`tipCost`值时不需要命名函数。当你不需要时给命名空间添加一个身份被称为`polluting`命名空间，在现代JavaScript编程中这是一个大忌。
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 上一节的示例代码定义了命名函数`calculateTip()`，并稍后使用`tipCost`变量存储函数结果。这是一个完美的示例，说明在仅使用命名函数计算`tipCost`值时不需要命名函数。当你不需要时给命名空间添加一个身份被称为`polluting`命名空间，在现代JavaScript编程中这是一个大忌。
- en: 你可以将这段代码重写为使用匿名函数：
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你可以将这段代码重写为使用匿名函数：
- en: '`const preTipTotal = 100.00; const tipPercentage = 0.15;  // 使用匿名函数声明tipCost
    const tipCost = function (preTip, tipPercent) { const tipResult = preTip * tipPercent;
    return (tipResult); } const totalBill = preTipTotal + tipCost(preTipTotal, tipPercentage);
    document.write("Your total bill is $" + totalBill);`'
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const preTipTotal = 100.00; const tipPercentage = 0.15;  // 使用匿名函数声明tipCost
    const tipCost = function (preTip, tipPercent) { const tipResult = preTip * tipPercent;
    return (tipResult); } const totalBill = preTipTotal + tipCost(preTipTotal, tipPercentage);
    document.write("Your total bill is $" + totalBill);`'
- en: '这里最大的变化是，我将`tipCost`变量的值声明为一个匿名函数。这个匿名函数与之前的`calculateTip()`命名函数是相同的，只是没有名字。在倒数第二个语句中，我通过使用`tipCost(preTipTotal,
    tipPercentage)`调用了匿名函数。 ### 用匿名函数替换函数调用'
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '这里最大的变化是，我将`tipCost`变量的值声明为一个匿名函数。这个匿名函数与之前的`calculateTip()`命名函数是相同的，只是没有名字。在倒数第二个语句中，我通过使用`tipCost(preTipTotal,
    tipPercentage)`调用了匿名函数。 ### 用匿名函数替换函数调用'
- en: 匿名函数最常见的用途之一是当你需要将一个函数作为参数传递给另一个函数时。被传递的函数被称为`callback`函数。
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 匿名函数最常见的用途之一是当你需要将一个函数作为参数传递给另一个函数时。被传递的函数被称为`callback`函数。
- en: 首先，这里是一个使用命名函数的示例：
  id: totrans-97
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 首先，这里是一个使用命名函数的示例：
- en: '`<body> <button id="bgRed"> Make Background Red </button> <button id="bgWhite">
    Make Background White </button> <script> function makeBackgroundRed() { document.body.style.backgroundColor=
    ''red''; } function makeBackgroundWhite() { document.body.style.backgroundColor=
    ''white''; } document.getElementById(''bgRed'').addEventListener( ''click'', makeBackgroundRed
    ); document.getElementById(''bgWhite'').addEventListener( ''click'', makeBackgroundWhite
    ); </script> </body>`'
  id: totrans-98
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<body> <button id="bgRed"> 将背景设为红色 </button> <button id="bgWhite"> 将背景设为白色
    </button> <script> function makeBackgroundRed() { document.body.style.backgroundColor=
    ''red''; } function makeBackgroundWhite() { document.body.style.backgroundColor=
    ''white''; } document.getElementById(''bgRed'').addEventListener( ''click'', makeBackgroundRed
    ); document.getElementById(''bgWhite'').addEventListener( ''click'', makeBackgroundWhite
    ); </script> </body>`'
- en: 脚本声明了两个命名函数：`makeBackgroundRed()`和`makeBackgroundWhite()`。代码然后创建了两个事件监听器。其中一个监听`id`值为`bgRed`的按钮的点击事件，当检测到点击时，运行`makeBackgroundRed()`回调函数。另一个事件监听器监听`id`值为`bgWhite`的按钮的点击事件，当检测到点击时，运行`makeBackgroundWhite()`回调函数。有关`document`对象以及`getElementById()`和`addEventListener()`方法的详细信息，请参阅[第6章](c06.xhtml)。
  id: totrans-99
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 脚本声明了两个命名函数：`makeBackgroundRed()`和`makeBackgroundWhite()`。代码然后创建了两个事件监听器。其中一个监听`id`值为`bgRed`的按钮的点击事件，当检测到点击时，运行`makeBackgroundRed()`回调函数。另一个事件监听器监听`id`值为`bgWhite`的按钮的点击事件，当检测到点击时，运行`makeBackgroundWhite()`回调函数。有关`document`对象以及`getElementById()`和`addEventListener()`方法的详细信息，请参阅[第6章](c06.xhtml)。
- en: 再次，你有两个不需要命名的函数，因此你可以通过用匿名函数替换回调函数来将它们从命名空间中移除。以下是修订后的代码：
  id: totrans-100
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 再次，你有两个不需要命名的函数，因此你可以通过用匿名函数替换回调函数来将它们从命名空间中移除。以下是修订后的代码：
- en: '`<body> <button id="bgRed"> Make Background Red </button> <button id="bgWhite">
    Make Background White </button> <script> document.getElementById(''bgRed'').addEventListener(
    ''click'', function() { document.body.style.backgroundColor= ''red''; } ); document.getElementById(''bgWhite'').addEventListener(
    ''click'', function() { document.body.style.backgroundColor= ''white''; } ); </script>
    </body>`  ## Working with Arrow Functions'
  id: totrans-101
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<body> <button id="bgRed"> 将背景设为红色 </button> <button id="bgWhite"> 将背景设为白色
    </button> <script> document.getElementById(''bgRed'').addEventListener( ''click'',
    function() { document.body.style.backgroundColor= ''red''; } ); document.getElementById(''bgWhite'').addEventListener(
    ''click'', function() { document.body.style.backgroundColor= ''white''; } ); </script>
    </body>`  ## 使用箭头函数'
- en: 随着你在JavaScript中的进步，你会发现自己不断使用匿名函数。当你达到那个阶段时，你会高兴地知道ES6还提供了一种更简单的匿名函数语法。也就是说，而不是使用这个：
  id: totrans-102
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 随着你在JavaScript中的进步，你会发现自己不断使用匿名函数。当你达到那个阶段时，你会高兴地知道ES6还提供了一种更简单的匿名函数语法。也就是说，而不是使用这个：
- en: '``function ([*arguments*]) { *JavaScript statements* }``'
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '``function ([*arguments*]) { *JavaScript statements* }``'
- en: 你可以使用这个：
  id: totrans-104
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你可以使用这个：
- en: '``([*arguments*]) => { *JavaScript statements* }``'
  id: totrans-105
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '``([*arguments*]) => { *JavaScript statements* }``'
- en: 所有我在这里做的就是去掉`function`关键字，并用字符`=`和`>`替换了参数和打开大括号之间的字符。字符`=>`看起来像箭头（JavaScripters称之为`fat
    arrow`），因此这种语法版本被称为`arrow function`。
  id: totrans-106
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 所有我在这里做的就是去掉`function`关键字，并用字符`=`和`>`替换了参数和打开大括号之间的字符。字符`=>`看起来像箭头（JavaScripters称之为`fat
    arrow`），因此这种语法版本被称为`arrow function`。
- en: '![Remember](images/remember.png) `Arrow functions`是ES6的发明，因此如果你需要支持非常旧的浏览器，如Internet
    Explorer 11，请不要使用它们。'
  id: totrans-107
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![记住](images/remember.png) `箭头函数`是ES6的发明，因此如果你需要支持非常旧的浏览器，如Internet Explorer
    11，请不要使用它们。'
- en: 例如，这里有一个来自早些时候的匿名函数（“[Assigning an anonymous function to a variable](#c05-sec-0012)”部分）：
  id: totrans-108
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，这里有一个来自早些时候的匿名函数（“[将匿名函数赋值给变量](#c05-sec-0012)”部分）：
- en: '``// Declare tipCost using an anonymous function const tipCost = function (preTip,
    tipPercent) { const tipResult = preTip * tipPercent; return (tipResult); }``'
  id: totrans-109
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '``// 使用匿名函数声明tipCost const tipCost = function (preTip, tipPercent) { const
    tipResult = preTip * tipPercent; return (tipResult); }``'
- en: 你可以使用箭头函数重写它：
  id: totrans-110
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你可以使用箭头函数重写它：
- en: '```javascript'
  id: totrans-111
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '```javascript'
- en: 如果你的匿名函数由单个语句组成，你可以利用一个称为*隐式返回*的箭头函数特性：
  id: totrans-112
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你的匿名函数由单个语句组成，你可以利用一个称为*隐式返回*的箭头函数特性：
- en: '```javascript'
  id: totrans-113
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '```javascript'
- en: 这里，JavaScript假设单语句函数意味着函数在执行完语句后立即返回，因此你可以省略花括号和`return`关键字。这是一个例子：
  id: totrans-114
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里，JavaScript假设单语句函数意味着函数在执行完语句后立即返回，因此你可以省略花括号和`return`关键字。这是一个例子：
- en: '```javascript'
  id: totrans-115
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '```javascript'
- en: 类似地，这里是上一节中的一个匿名回调函数：
  id: totrans-116
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 类似地，这里是上一节中的一个匿名回调函数：
- en: '```javascript'
  id: totrans-117
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '```javascript'
- en: 你可以将这段代码重写如下，以使用带有隐式返回的箭头函数：
  id: totrans-118
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你可以将这段代码重写如下，以使用带有隐式返回的箭头函数：
- en: '```javascript'
  id: totrans-119
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '```javascript'
