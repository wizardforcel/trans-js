- en: © The Author(s), under exclusive license to Springer Fachmedien Wiesbaden GmbH,
    part of Springer Nature 2024J. L. ZuckarelliLearn coding with Python and JavaScript
    [https://doi.org/10.1007/978-3-658-42912-6_27](https://doi.org/10.1007/978-3-658-42912-6_27)
  prefs: []
  type: TYPE_NORMAL
- en: 27. Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Joachim L. Zuckarelli^([1](#Aff2)  )(1)München, GermanyOverview
  prefs: []
  type: TYPE_NORMAL
- en: In this part, we will now turn to JavaScript, the second programming language
    we will deal with in this book. Again, as with Python, we will follow the 9-question
    scheme to get to grips with the language. In this first chapter of this part,
    we will get a brief overview of the origins and application areas of JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript is the language of the web. Probably no other language is used more
    often when it comes to programming web frontends, i.e. modern web user interfaces,
    than JavaScript. Hardly any site with a high number of visitors can do without
    JavaScript these days. When you see forms on web pages that validate your input,
    for example, checking whether the email address or phone number you entered is
    in a valid format, JavaScript is usually involved. If you see suggestions for
    possible search terms after entering just a few letters in a search field, JavaScript
    is usually doing the job in the background. If a web page works with animations,
    for example showing or hiding elements depending on your clicks or mouse movements,
    or highlighting them, there is often a JavaScript program in the background. No
    wonder, then, that JavaScript appears among the most popular programming languages
    on virtually all rankings (see also ► Chap. [6](474412_1_En_6_Chapter.xhtml)).
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaScript has—contrary to what you might think when reading it for the first
    time—little to do with another popular, but much harder to learn programming language:
    Java. There are only a few syntactic similarities between the two namesakes.'
  prefs: []
  type: TYPE_NORMAL
- en: The beginnings of the language go back to the time when a program called *Netscape
    Navigator* was the market-dominating browser. In 1995, shortly before the “browser
    war” between Netscape and Microsoft broke out for dominance in what was then considered
    a key market, Netscape released a language called *LiveScript*. It had been developed
    by *Brendan Eich* and was renamed *JavaScript* a little later in the course of
    a cooperation with Sun Microsystems. It is not entirely clear whether the naming
    had to do with the fact that JavaScript was actually supposed to work with small
    Java applications (also called Java applets) on web pages, or whether the naming
    was mainly done for marketing reasons, in order to bask a little in the glow of
    Java’s growing popularity; what is certain, however, is that JavaScript quickly
    rose to become the dominant programming language of the Web and drove competitors
    such as Microsoft’s VBScript from the market.
  prefs: []
  type: TYPE_NORMAL
- en: Netscape made an early effort to have the language standardized and called the
    standardization organization Ecma (whose name at that time was still a capitalized
    acronym for *European Computer Manufacturers Association*). As a result, they
    published the ECMA-262 standard, which defines a language called *ECMAScript*.
    From then on, JavaScript was considered an implementation of ECMAScript, alongside
    other languages that also implement the standard (supplemented by their own specifics),
    such as Adobe’s *ActionScript* or Microsoft’s *TypeScript*.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of JavaScript, however, the discussion about standardization strictly
    speaking leads in the wrong direction, because JavaScript is anything but standardized.
    This is mainly because there are several popular implementations of JavaScript.
    JavaScript programs run in the web browser, so they are downloaded by it and then
    interpreted. Each browser that supports JavaScript brings its own interpreter,
    a JavaScript engine, and these engines certainly differ between vendors. Microsoft’s
    JavaScript dialect called *JScript*, which follows the ECMA-262 standard but brings
    several specifics, therefore works differently in nuances than, say, the JavaScript
    variant interpreted by Google’s *Chrome* browser. At worst, these differences
    can mean that certain features of a web page work in one browser but not another.
    The devil is in the details. Of course, we will hardly encounter the devil in
    the following chapters, since we are dealing with language elements that are ECMA-262
    compliant and are supported practically everywhere JavaScript is interpreted.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript is a language that is normally interpreted by the web browser, and
    thus on the *client side*. In a sense, it is the counterpart to *PHP*, which runs
    on the web server and can modify the web page before it is even sent to the browser
    (for example, by reading data records, such as product information, from a database
    and displaying them on the web page). However, there are runtime environments
    such as *Node.JS* that provide a JavaScript implementation with which JavaScript
    can also be executed on the server side.
  prefs: []
  type: TYPE_NORMAL
- en: In the following Chapters, however, we will concentrate on the classic variant,
    namely JavaScript, which runs in a web page and thus makes the web page dynamic.
    As in the Python part of this book, we again follow the nine major questions to
    get an overview of the language.
  prefs: []
  type: TYPE_NORMAL
