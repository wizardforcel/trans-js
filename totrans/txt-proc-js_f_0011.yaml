- en: '| Recipe 1 | Determining If a Value Is a String with the typeof Operator |'
  prefs: []
  type: TYPE_TB
- en: Task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Javascript, you will often need to validate that a value is a string. For
    example, in the next recipe, we’ll build a function that searches for multiple
    words in a string. Before you pass a value to the function, you’d want to check
    if it’s a string. Any other data type, like a number or Boolean, would cause your
    function to throw an error.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book, you will see functions of this sort repeatedly, so it’s
    a good place to start.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use the typeof operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_1/determining_valid_strings/typeof_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/determining_valid_strings/typeof_ex1.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **function** isString(value) { |'
  prefs: []
  type: TYPE_TB
- en: '|   | **return** **typeof** value === *"string"*; |'
  prefs: []
  type: TYPE_TB
- en: '|   | } |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | isString(123); *// → false* |'
  prefs: []
  type: TYPE_TB
- en: '|   | isString(*"abc"*); *// → true* |'
  prefs: []
  type: TYPE_TB
- en: The typeof operator returns a string indicating a value’s type.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In JavaScript, you can create a string literal with single or double quotes
    or the backticks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_1/determining_valid_strings/typeof_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/determining_valid_strings/typeof_ex2.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **let** str1 = *"string"*; |'
  prefs: []
  type: TYPE_TB
- en: '|   | **let** str2 = *''string''*; |'
  prefs: []
  type: TYPE_TB
- en: '|   | **let** str3 = *`string`*; |'
  prefs: []
  type: TYPE_TB
- en: 'So, a number enclosed in quotation marks or backticks is not a number anymore
    but a string. You can also create a string with the String() constructor if you
    call it without the new keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_1/determining_valid_strings/typeof_ex3.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/determining_valid_strings/typeof_ex3.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | String(123); *// → "123"* |'
  prefs: []
  type: TYPE_TB
- en: 'In a string, each character occupies a position. Index 0 corresponds to the
    first character, index 1 to the second character, and so on. So, to get the second
    character in a string, you can type str[1]:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_1/determining_valid_strings/typeof_ex4.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/determining_valid_strings/typeof_ex4.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **let** str = *"string"*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | console.log(str[1]); *// → t* |'
  prefs: []
  type: TYPE_TB
- en: Up next, we’ll begin our journey into the realm of JavaScript text processing
    methods by building a function that checks whether a string contains a list of
    words.
  prefs: []
  type: TYPE_NORMAL
