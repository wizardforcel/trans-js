- en: 'Module 11:'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 模块 11：
- en: '|'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Progressive Web Apps (PWAs) with Vue.js
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Vue.js 开发渐进式 Web 应用（PWAs）
- en: '|'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'In the ever-evolving landscape of web development, Progressive Web Apps (PWAs)
    have emerged as a transformative approach, seamlessly blending the web''s ubiquity
    with the performance and capabilities of native applications. The module "Progressive
    Web Apps (PWAs) with Vue.js" takes center stage in the book "Vue.js Essentials:
    For Responsive Web Development," guiding readers through the process of harnessing
    Vue.js to create PWAs. Within these pages, developers will gain comprehensive
    insights into the principles, technologies, and best practices that define PWAs
    and their implementation using Vue.js.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '在不断发展的 Web 开发领域，渐进式 Web 应用（PWAs）作为一种变革性的方式脱颖而出，完美融合了 Web 的普及性与原生应用的性能和功能。模块“使用
    Vue.js 开发渐进式 Web 应用（PWAs）”在《Vue.js Essentials: For Responsive Web Development》一书中占据重要地位，引导读者通过
    Vue.js 创建 PWA。在本章中，开发者将深入了解定义 PWA 的原则、技术和最佳实践，并学习如何使用 Vue.js 实现这些理念。'
- en: Understanding the Essence of Progressive Web Apps (PWAs)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 理解渐进式 Web 应用（PWAs）的本质
- en: Before delving into the intricacies of building PWAs with Vue.js, it is essential
    to understand the essence of Progressive Web Apps. This module begins by elucidating
    the characteristics that define PWAs—responsiveness, connectivity independence,
    app-like interactions, and the ability to be discoverable. Readers will grasp
    the significance of creating web applications that provide a native-app-like experience,
    ensuring user engagement, and accessibility across various devices and network
    conditions.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨如何使用 Vue.js 构建 PWA 之前，理解渐进式 Web 应用的本质至关重要。本模块首先阐明了定义 PWA 的特征——响应性、独立于连接的能力、类似应用的交互方式以及可发现性。读者将理解创建提供原生应用般体验的
    Web 应用的重要性，确保用户参与度，并在各种设备和网络环境下提供可访问性。
- en: Key Technologies and Vue.js for PWA Development
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: PWA 开发的关键技术与 Vue.js
- en: Central to the success of PWAs is the utilization of key technologies that enable
    enhanced performance and user experience. This segment explores the role of technologies
    such as Service Workers, Web App Manifests, and the App Shell architecture in
    PWA development. Readers will gain insights into how Vue.js seamlessly integrates
    with these technologies, facilitating the creation of PWAs that are not only performant
    but also adhere to the best practices of modern web development.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 渐进式 Web 应用（PWAs）成功的核心在于利用关键技术，这些技术能够提升性能和用户体验。本节将探讨如 Service Workers、Web App
    Manifests 和 App Shell 架构等技术在 PWA 开发中的作用。读者将深入了解 Vue.js 如何与这些技术无缝集成，促进创建既高效又符合现代
    Web 开发最佳实践的 PWA。
- en: Implementing Service Workers for Offline and Background Capabilities
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 Service Workers 以支持离线和后台功能
- en: A core component of PWAs is the implementation of Service Workers, enabling
    offline capabilities and background processes. This module delves into the intricacies
    of Service Workers, guiding readers through the process of registering, installing,
    and handling events to achieve seamless offline experiences. Developers will explore
    strategies for caching assets, handling updates, and leveraging the background
    capabilities of Service Workers to enhance the responsiveness of their Vue.js-powered
    PWAs.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: PWA的核心组件之一是实现服务工作者（Service Workers），它使离线功能和后台进程成为可能。本模块深入探讨服务工作者的复杂性，引导读者了解如何注册、安装以及处理事件，以实现流畅的离线体验。开发者将探索缓存资产、处理更新以及利用服务工作者的后台功能来增强Vue.js驱动的PWA响应性的策略。
- en: Vue.js for PWA User Interface and Interactions
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js在PWA用户界面和交互中的应用
- en: With a solid understanding of PWA principles and technologies, the focus shifts
    to leveraging Vue.js for crafting the user interface and interactions. This segment
    explores strategies for optimizing Vue.js components, employing lazy loading,
    and ensuring a smooth and responsive user experience. Developers will gain practical
    insights into how Vue.js facilitates the creation of engaging, app-like interactions
    within the PWA context, ensuring a delightful user experience across various devices
    and screen sizes.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在对PWA原理和技术有了扎实的理解后，重点转向利用Vue.js来打造用户界面和交互。本部分探讨了优化Vue.js组件、采用延迟加载以及确保顺畅和响应式用户体验的策略。开发者将获得如何利用Vue.js在PWA环境中创造引人入胜的、类似应用的交互的实用见解，从而确保在各种设备和屏幕尺寸下都能提供愉悦的用户体验。
- en: '"Progressive Web Apps (PWAs) with Vue.js" stands as a pivotal module within
    "Vue.js Essentials: For Responsive Web Development," providing readers with a
    comprehensive guide to incorporating PWA principles into Vue.js applications.
    By unraveling the essence of PWAs, exploring key technologies, and delving into
    the implementation details with Vue.js, developers gain the knowledge and skills
    needed to create web applications that not only meet the standards of modern web
    development but also deliver exceptional user experiences. This module equips
    developers to harness the full potential of Vue.js in crafting PWAs that seamlessly
    blend the best of web and native app experiences.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '"与Vue.js结合的渐进式Web应用（PWAs）"是"Vue.js Essentials: For Responsive Web Development"中的一个重要模块，为读者提供了一个全面的指南，帮助他们将PWA原理应用于Vue.js应用程序。通过揭示PWA的本质，探索关键技术，并深入探讨与Vue.js的实现细节，开发者能够掌握创建不仅符合现代Web开发标准，还能提供卓越用户体验的Web应用的知识和技能。本模块使开发者能够充分利用Vue.js的潜力，打造无缝结合Web和原生应用最佳体验的PWAs。'
- en: Understanding PWAs
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解PWA
- en: 'The "Progressive Web Apps (PWAs) with Vue.js" module in "Vue.js Essentials:
    For Responsive Web Development" introduces developers to the transformative world
    of Progressive Web Apps and their integration with Vue.js. In the section titled
    "Understanding PWAs," developers embark on a journey to grasp the fundamental
    concepts and principles that underpin the creation of modern, user-centric web
    experiences through Progressive Web Apps.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '《Vue.js Essentials: For Responsive Web Development》中的“使用 Vue.js 构建渐进式 Web 应用（PWA）”模块向开发者介绍了渐进式
    Web 应用的变革性世界及其与 Vue.js 的集成。在“理解 PWA”这一章节中，开发者将开始学习构建现代用户中心化 Web 体验的基本概念和原则，这些体验是通过渐进式
    Web 应用得以实现的。'
- en: // vue.config.js
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: // vue.config.js
- en: module.exports = {
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: module.exports = {
- en: 'pwa: {'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 'pwa: {'
- en: 'name: ''My Vue PWA'','
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: ''My Vue PWA'','
- en: 'themeColor: ''#4DBA87'','
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 'themeColor: ''#4DBA87'','
- en: 'msTileColor: ''#000000'','
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 'msTileColor: ''#000000'','
- en: 'appleMobileWebAppCapable: ''yes'','
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 'appleMobileWebAppCapable: ''yes'','
- en: 'appleMobileWebAppStatusBarStyle: ''black'','
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 'appleMobileWebAppStatusBarStyle: ''black'','
- en: 'manifestOptions: {'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 'manifestOptions: {'
- en: 'short_name: ''VuePWA'','
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 'short_name: ''VuePWA'','
- en: 'background_color: ''#ffffff'','
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 'background_color: ''#ffffff'','
- en: '},'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'workboxOptions: {'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 'workboxOptions: {'
- en: // ...Workbox options
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: // ...Workbox 选项
- en: '},'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: Vue.js seamlessly integrates with the development of Progressive Web Apps, and
    the vue.config.js file becomes a pivotal tool for configuring PWA-related settings.
    In this configuration example, crucial PWA settings such as the app's name, theme
    color, and manifest options are defined, setting the foundation for a robust PWA
    built with Vue.js.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 无缝集成了渐进式 Web 应用（PWA）的开发，vue.config.js 文件成为配置 PWA 相关设置的关键工具。在这个配置示例中，定义了应用的名称、主题颜色和清单选项等关键
    PWA 设置，为使用 Vue.js 构建强大的 PWA 打下基础。
- en: 'Service Workers: The Backbone of PWAs for Offline Capabilities'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者：PWAs 离线功能的支柱
- en: Central to the PWA architecture are Service Workers, which empower web applications
    with offline capabilities, enhanced performance, and background data synchronization.
    By understanding the role of Service Workers, developers can harness their potential
    to create seamless user experiences.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: PWA 架构的核心是服务工作者，它使 Web 应用具备离线能力、增强性能和后台数据同步功能。通过理解服务工作者的作用，开发者可以利用其潜力创造无缝的用户体验。
- en: // service-worker.js
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: // service-worker.js
- en: self.addEventListener('install', (event) => {
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: self.addEventListener('install', (event) => {
- en: // Perform install steps
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: // 执行安装步骤
- en: '});'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: self.addEventListener('fetch', (event) => {
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: self.addEventListener('fetch', (event) => {
- en: // Intercept and handle network requests
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: // 拦截和处理网络请求
- en: '});'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: self.addEventListener('push', (event) => {
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: self.addEventListener('push', (event) => {
- en: // Handle push notifications
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: // 处理推送通知
- en: '});'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: In this simplified Service Worker snippet, the install event is used for initial
    setup, the fetch event intercepts and handles network requests, and the push event
    manages push notifications. These event listeners enable developers to customize
    the behavior of the Service Worker, adapting it to the specific needs of their
    Vue.js PWA.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简化的Service Worker代码片段中，install事件用于初始设置，fetch事件拦截并处理网络请求，push事件则管理推送通知。这些事件监听器使开发者能够定制Service
    Worker的行为，依据Vue.js PWA的具体需求进行适配。
- en: 'Caching Strategies: Enhancing Performance and Responsiveness'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存策略：提升性能和响应速度
- en: Effective caching strategies lie at the heart of PWAs, ensuring that resources
    are intelligently stored and retrieved to optimize performance. By implementing
    caching strategies, developers can control how assets are cached, reducing load
    times and providing a smoother user experience.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的缓存策略是PWA的核心，确保资源能够智能地存储和获取，以优化性能。通过实现缓存策略，开发者可以控制资源如何被缓存，从而减少加载时间并提供更流畅的用户体验。
- en: // workboxOptions in vue.config.js
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: // vue.config.js中的workboxOptions
- en: 'workboxOptions: {'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 'workboxOptions: {'
- en: 'runtimeCaching: ['
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 'runtimeCaching: ['
- en: '{'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'urlPattern: new RegExp(''^https://api.example.com/''),'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 'urlPattern: new RegExp(''^https://api.example.com/''),'
- en: 'handler: ''networkFirst'','
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 'handler: ''networkFirst'','
- en: 'options: {'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 'options: {'
- en: 'networkTimeoutSeconds: 10,'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 'networkTimeoutSeconds: 10,'
- en: '},'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '],'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '},'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: In the workboxOptions section of the vue.config.js file, developers can define
    runtime caching strategies. In this example, the networkFirst strategy is applied
    to API requests, prioritizing fetching data from the network while considering
    a timeout of 10 seconds.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在vue.config.js文件中的workboxOptions部分，开发者可以定义运行时缓存策略。在此示例中，networkFirst策略应用于API请求，优先从网络获取数据，同时考虑10秒的超时。
- en: 'Web App Manifest: Configuring PWA Appearance and Behavior'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用清单：配置PWA的外观和行为
- en: The Web App Manifest is a crucial component of PWAs, shaping how the application
    appears and behaves when installed on a user's device. Developers can define essential
    details such as the app's name, theme color, and iconography to ensure a cohesive
    and branded user experience.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用清单（Web App Manifest）是PWA的关键组成部分，它决定了应用在用户设备上安装后的外观和行为。开发者可以定义应用的名称、主题颜色和图标等基本信息，以确保一致性和品牌化的用户体验。
- en: // manifest.json
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: // manifest.json
- en: '{'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"name": "My Vue PWA",'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '"name": "My Vue PWA",'
- en: '"short_name": "VuePWA",'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '"short_name": "VuePWA",'
- en: '"start_url": "/",'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '"start_url": "/",'
- en: '"display": "standalone",'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '"display": "standalone",'
- en: '"background_color": "#ffffff",'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '"background_color": "#ffffff",'
- en: '"theme_color": "#4DBA87",'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '"theme_color": "#4DBA87",'
- en: '"icons": ['
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '"icons": ['
- en: // ...Icon configurations
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: // ...图标配置
- en: '],'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '}'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: The manifest.json file encapsulates the app's metadata, including its name,
    display mode, background color, and theme color. Icon configurations are also
    defined, allowing developers to control the visual representation of their Vue.js
    PWA.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: manifest.json文件封装了应用的元数据，包括名称、显示模式、背景色和主题色等。图标配置也在其中定义，允许开发者控制Vue.js PWA的视觉表现。
- en: Empowering Vue.js Development with PWAs
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 赋能Vue.js开发：通过PWA提升用户体验
- en: '"Understanding PWAs" in the "Progressive Web Apps (PWAs) with Vue.js" module
    equips developers with foundational insights into the principles and components
    that define modern web experiences. By embracing Service Workers, implementing
    caching strategies, and configuring the Web App Manifest, developers leverage
    Vue.js to create PWAs that offer offline capabilities, enhanced performance, and
    a seamless user interface. As Vue.js continues to evolve, the integration of PWAs
    propels web development into the future, providing users with responsive, reliable,
    and engaging experiences across various devices and network conditions. Developers
    armed with the knowledge gained from this section are well-prepared to embark
    on the journey of PWA development, elevating their Vue.js applications to new
    heights of interactivity and user satisfaction.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在《Progressive Web Apps (PWAs) with Vue.js》模块中的“理解PWA”部分，开发者将获得关于定义现代网页体验的原则和组件的基础性见解。通过运用服务工作者、实现缓存策略和配置Web应用清单，开发者可以利用Vue.js创建具有离线功能、增强性能和无缝用户界面的PWA。随着Vue.js的不断发展，PWA的集成推动了网页开发走向未来，为用户提供了在各种设备和网络环境下的响应式、可靠和互动性强的体验。掌握本节内容的开发者将为PWA开发之旅做好充分准备，提升他们的Vue.js应用程序，达到新的互动性和用户满意度的高度。
- en: Building a Basic PWA with Vue.js
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Vue.js构建基础PWA
- en: 'In the module "Progressive Web Apps (PWAs) with Vue.js" within the book "Vue.js
    Essentials: For Responsive Web Development," the section titled "Building a Basic
    PWA with Vue.js" immerses developers in the hands-on process of crafting a Progressive
    Web App using the Vue.js framework. This section serves as a practical guide,
    providing step-by-step instructions and insights into the key components that
    constitute a basic PWA built with Vue.js.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '在《Vue.js Essentials: For Responsive Web Development》一书中的《Progressive Web Apps
    (PWAs) with Vue.js》模块里，名为“使用Vue.js构建基础PWA”的章节让开发者亲身体验如何使用Vue.js框架制作渐进式网页应用（PWA）。这一部分作为一个实践指南，提供了逐步的指引和关于构建基础PWA所需的关键组件的见解。'
- en: Terminal
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 终端
- en: vue create vue-pwa-demo
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: vue create vue-pwa-demo
- en: cd vue-pwa-demo
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: cd vue-pwa-demo
- en: vue add pwa
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: vue add pwa
- en: To kickstart the journey, developers initiate the creation of a new Vue.js project
    and set the foundation for a PWA using the Vue CLI. The vue add pwa command seamlessly
    integrates the necessary PWA scaffolding into the project, laying the groundwork
    for the subsequent development steps.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启动这一过程，开发者首先创建一个新的Vue.js项目，并使用Vue CLI为PWA搭建基础框架。vue add pwa命令将必要的PWA框架无缝集成到项目中，为后续开发步骤打下基础。
- en: 'Exploring the Generated Service Worker: The Backbone of Offline Capabilities'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 探索生成的服务工作者：离线功能的支柱
- en: // src/service-worker.js
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: // src/service-worker.js
- en: 'workbox.core.setCacheNameDetails({ prefix: ''vue-pwa-demo'' });'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 'workbox.core.setCacheNameDetails({ prefix: ''vue-pwa-demo'' });'
- en: self.addEventListener('install', (event) => {
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: self.addEventListener('install', (event) => {
- en: const preCache = async () => {
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: const preCache = async () => {
- en: const cache = await caches.open(workbox.core.cacheNames.preCache);
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: const cache = await caches.open(workbox.core.cacheNames.preCache);
- en: return cache.addAll(workbox.precaching.getCacheKeyForURLs([
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: return cache.addAll(workbox.precaching.getCacheKeyForURLs([
- en: // ...Precached assets
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: // ...预缓存的资源
- en: ']));'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: ']));'
- en: '};'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: event.waitUntil(preCache());
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: event.waitUntil(preCache());
- en: '});'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: Delving into the generated Service Worker (service-worker.js), developers encounter
    the install event, where pre-caching of essential assets takes place. The Service
    Worker becomes the backbone of offline capabilities, ensuring that critical resources
    are cached for seamless user experiences, even in the absence of a network connection.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 深入研究生成的 Service Worker（service-worker.js），开发人员会遇到安装事件，其中会进行关键资源的预缓存。Service
    Worker 成为离线功能的核心，确保即使没有网络连接，重要资源也能被缓存，以提供无缝的用户体验。
- en: 'Customizing PWA Configuration in vue.config.js: Tailoring the PWA Experience'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 定制 vue.config.js 中的 PWA 配置：量身打造 PWA 体验
- en: // vue.config.js
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: // vue.config.js
- en: module.exports = {
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: module.exports = {
- en: 'pwa: {'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 'pwa: {'
- en: 'name: ''Vue PWA Demo'','
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: ''Vue PWA 演示'','
- en: 'themeColor: ''#41b883'','
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 'themeColor: ''#41b883'','
- en: 'msTileColor: ''#41b883'','
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 'msTileColor: ''#41b883'','
- en: 'appleMobileWebAppCapable: ''yes'','
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 'appleMobileWebAppCapable: ''yes'','
- en: 'appleMobileWebAppStatusBarStyle: ''black'','
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 'appleMobileWebAppStatusBarStyle: ''黑色'','
- en: 'manifestOptions: {'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 'manifestOptions: {'
- en: 'short_name: ''VuePWA'','
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 'short_name: ''VuePWA'','
- en: 'start_url: ''/'','
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 'start_url: ''/'','
- en: 'display: ''standalone'','
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 'display: ''独立模式'','
- en: 'background_color: ''#ffffff'','
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 'background_color: ''#ffffff'','
- en: '},'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: The vue.config.js file becomes a playground for customizing the PWA configuration.
    Developers can define crucial details such as the app's name, theme color, start
    URL, and display mode, tailoring the PWA experience to align with the desired
    branding and user interface specifications.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: vue.config.js 文件成为定制 PWA 配置的操作场所。开发人员可以定义诸如应用名称、主题颜色、启动 URL 和显示模式等关键信息，从而根据所需的品牌形象和用户界面规范调整
    PWA 体验。
- en: 'Testing the PWA Locally: Ensuring a Smooth User Experience'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 本地测试 PWA：确保流畅的用户体验
- en: Terminal
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 终端
- en: npm run serve
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: npm run serve
- en: Testing the PWA locally is a crucial step in the development process. The npm
    run serve command launches a local development server, allowing developers to
    interact with the PWA and ensure that offline capabilities, caching, and other
    PWA features function as expected.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地测试 PWA 是开发过程中的一个关键步骤。`npm run serve` 命令启动本地开发服务器，允许开发人员与 PWA 进行交互，确保离线功能、缓存以及其他
    PWA 特性按预期工作。
- en: From Concept to Reality - Building PWAs with Vue.js
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 从概念到现实 - 使用 Vue.js 构建 PWA
- en: '"Building a Basic PWA with Vue.js" in the "Progressive Web Apps (PWAs) with
    Vue.js" module offers developers a practical journey from concept to reality.
    By leveraging the Vue CLI, exploring the generated Service Worker, customizing
    PWA configurations, and locally testing the PWA, developers gain hands-on experience
    in the creation of a basic yet functional PWA. Armed with this foundational knowledge,
    developers are well-equipped to advance their PWA development skills, infusing
    Vue.js applications with the transformative capabilities that Progressive Web
    Apps bring to the forefront of modern web development.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 《Progressive Web Apps (PWAs) with Vue.js》模块中的“构建基础 PWA”部分为开发者提供了从概念到实现的实践旅程。通过利用
    Vue CLI、探索生成的 Service Worker、定制 PWA 配置和本地测试 PWA，开发者能够获得创建基本而功能完备的 PWA 的实践经验。掌握了这些基础知识后，开发者将能够进一步提升他们的
    PWA 开发技能，为 Vue.js 应用注入渐进式 Web 应用带来的革新能力，这些能力使得现代 Web 开发迈向了新的前沿。
- en: Adding Offline Support
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加离线支持
- en: 'Within the module "Progressive Web Apps (PWAs) with Vue.js" in the book "Vue.js
    Essentials: For Responsive Web Development," the section titled "Adding Offline
    Support" delves into the pivotal aspect of PWA development. This section equips
    developers with the knowledge and tools necessary to fortify Vue.js applications
    against the unpredictability of network connectivity, ensuring a robust and resilient
    user experience even in offline scenarios.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '在《Vue.js Essentials: For Responsive Web Development》一书中的《Progressive Web Apps
    (PWAs) with Vue.js》模块内，名为“添加离线支持”的章节深入探讨了 PWA 开发中的关键环节。本章节为开发者提供了必要的知识和工具，帮助加强
    Vue.js 应用应对网络连接不可预测性的能力，确保即使在离线情况下也能提供强大且具有韧性的用户体验。'
- en: // src/service-worker.js
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: // src/service-worker.js
- en: self.addEventListener('fetch', (event) => {
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: self.addEventListener('fetch', (event) => {
- en: const handleFetch = async () => {
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: const handleFetch = async () => {
- en: const cachedResponse = await caches.match(event.request);
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: const cachedResponse = await caches.match(event.request);
- en: if (cachedResponse) {
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: if (cachedResponse) {
- en: return cachedResponse;
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: return cachedResponse;
- en: '}'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: return fetch(event.request);
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: return fetch(event.request);
- en: '};'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: event.respondWith(handleFetch());
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: event.respondWith(handleFetch());
- en: '});'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: At the core of offline support lies the Service Worker's ability to intercept
    and handle network requests. In the provided code snippet, the fetch event is
    harnessed to check whether a cached response exists for a given request. If cached,
    the response is retrieved from the cache; otherwise, the request is forwarded
    to the network. This intelligent caching mechanism enhances the resilience of
    Vue.js applications, enabling seamless user interactions regardless of network
    availability.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 离线支持的核心在于 Service Worker 能够拦截并处理网络请求。在提供的代码片段中，fetch 事件被用来检查是否存在给定请求的缓存响应。如果有缓存，响应会从缓存中取出；否则，请求将转发到网络。这种智能缓存机制增强了
    Vue.js 应用的弹性，使用户能够无缝地进行交互，无论网络是否可用。
- en: 'Strategies for Dynamic Caching: Tailoring Offline Experiences'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 动态缓存策略：定制离线体验
- en: // src/service-worker.js
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: // src/service-worker.js
- en: workbox.routing.registerRoute(
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: workbox.routing.registerRoute(
- en: /^https:\/\/api\.example\.com\//,
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: /^https:\/\/api\.example\.com\//,
- en: new workbox.strategies.NetworkFirst({
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: new workbox.strategies.NetworkFirst({
- en: 'networkTimeoutSeconds: 5,'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 'networkTimeoutSeconds: 5,'
- en: 'cacheName: ''api-cache'','
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 'cacheName: ''api-cache'','
- en: '})'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: );
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Developers can implement dynamic caching strategies to optimize offline experiences
    for specific routes, such as API calls. In this example, the NetworkFirst strategy
    is employed for requests to the API, prioritizing fetching from the network while
    considering a timeout of 5 seconds. This approach ensures that real-time data
    is prioritized when available, enhancing the responsiveness of Vue.js applications.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员可以实施动态缓存策略，以优化特定路由的离线体验，例如 API 调用。在这个示例中，采用了 NetworkFirst 策略来请求 API，优先从网络获取数据，并考虑
    5 秒的超时设置。这种方法确保了在网络可用时优先获取实时数据，从而提升 Vue.js 应用程序的响应速度。
- en: 'Offline Indicator: Enhancing User Awareness'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 离线指示器：提升用户意识
- en: // src/main.js
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: // src/main.js
- en: new Vue({
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: new Vue({
- en: // ...Vue instance options
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: // ...Vue 实例选项
- en: created() {
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: created() {
- en: window.addEventListener('offline', () => {
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: window.addEventListener('offline', () => {
- en: this.$root.$emit('offline');
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: this.$root.$emit('offline');
- en: '});'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: window.addEventListener('online', () => {
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: window.addEventListener('online', () => {
- en: this.$root.$emit('online');
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: this.$root.$emit('online');
- en: '});'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '},'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '});'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: To enhance user awareness of the offline state, developers can implement an
    offline indicator in the Vue.js application. By utilizing event listeners for
    the offline and online events, the application can emit events to signal changes
    in network status. This allows for dynamic updates to the user interface, keeping
    users informed about their connection status.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增强用户对离线状态的意识，开发人员可以在 Vue.js 应用中实现离线指示器。通过使用离线和在线事件的监听器，应用可以触发事件，向用户传达网络状态的变化。这使得用户界面可以动态更新，帮助用户了解当前的连接状态。
- en: <!-- src/components/OfflineIndicator.vue -->
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- src/components/OfflineIndicator.vue -->
- en: <template>
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div v-if="offline" class="offline-indicator">
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: <div v-if="offline" class="offline-indicator">
- en: You are currently offline. Some features may be limited.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 您当前处于离线状态，某些功能可能受限。
- en: </div>
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'offline: false,'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 'offline: false,'
- en: '};'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: created() {
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: created() {
- en: this.$root.$on('offline', () => {
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: this.$root.$on('offline', () => {
- en: this.offline = true;
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: this.offline = true;
- en: '});'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: this.$root.$on('online', () => {
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: this.$root.$on('online', () => {
- en: this.offline = false;
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: this.offline = false;
- en: '});'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '},'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: <style scoped>
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: <style scoped>
- en: /* Styles for the offline indicator */
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: /* 离线指示器样式 */
- en: </style>
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: The OfflineIndicator component exemplifies how to visually communicate the offline
    status to users. By listening for custom events emitted by the Vue instance, the
    component dynamically updates its state, displaying a message when the application
    is offline.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: OfflineIndicator 组件展示了如何通过视觉方式将离线状态传达给用户。通过监听 Vue 实例发出的自定义事件，组件可以动态更新其状态，当应用处于离线状态时，显示相应的信息。
- en: Paving the Way for Uninterrupted Experiences
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 为无缝体验铺平道路
- en: '"Adding Offline Support" in the "Progressive Web Apps (PWAs) with Vue.js" module
    empowers developers to fortify Vue.js applications against the uncertainties of
    network connectivity. Through intelligent caching strategies, dynamic offline
    indicators, and strategic handling of network requests, developers elevate their
    applications to ensure uninterrupted user experiences. By mastering these offline
    support techniques, Vue.js applications become resilient, providing users with
    a consistent and reliable experience, regardless of their network environment.
    This section serves as a key milestone in the journey of creating robust PWAs
    with Vue.js, setting the stage for enhanced user satisfaction and engagement.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在《使用 Vue.js 开发渐进式 Web 应用（PWAs）》模块中的“添加离线支持”部分，使开发人员能够增强 Vue.js 应用程序，抵御网络连接不稳定的风险。通过智能的缓存策略、动态的离线指示器以及对网络请求的策略性处理，开发人员可以提升应用的稳定性，确保用户体验不中断。通过掌握这些离线支持技术，Vue.js
    应用程序将变得更具弹性，为用户提供一致且可靠的体验，无论其网络环境如何。此部分是创建强大 PWAs 的关键里程碑，为提升用户满意度和参与度奠定了基础。
- en: Optimizing for Performance
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能优化
- en: 'In the module "Progressive Web Apps (PWAs) with Vue.js" within "Vue.js Essentials:
    For Responsive Web Development," the section titled "Optimizing for Performance"
    serves as a crucial guide for developers seeking to unlock the full potential
    of their Vue.js PWAs. This section goes beyond the fundamentals, diving into advanced
    strategies and techniques to enhance the performance of Vue.js applications, ensuring
    a seamless and responsive user experience.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '在《Vue.js Essentials: For Responsive Web Development》中的“使用 Vue.js 开发渐进式 Web
    应用（PWAs）”模块里，“优化性能”这一章节是开发人员了解如何释放 Vue.js PWAs 最大潜力的重要指南。本节内容超越了基础知识，深入探讨了提高 Vue.js
    应用性能的高级策略和技巧，确保无缝和响应式的用户体验。'
- en: // src/service-worker.js
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: // src/service-worker.js
- en: workbox.routing.registerRoute(
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: workbox.routing.registerRoute(
- en: /\.(?:png|jpg|jpeg|svg|gif)$/,
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: /\.(?:png|jpg|jpeg|svg|gif)$/,
- en: new workbox.strategies.CacheFirst({
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: new workbox.strategies.CacheFirst({
- en: 'cacheName: ''image-cache'','
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 'cacheName: ''image-cache'','
- en: 'plugins: ['
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 'plugins: ['
- en: new workbox.expiration.Plugin({
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: new workbox.expiration.Plugin({
- en: 'maxEntries: 50,'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 'maxEntries: 50,'
- en: 'maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 'maxAgeSeconds: 30 * 24 * 60 * 60, // 30天'
- en: '}),'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '}),'
- en: '],'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '})'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: );
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Efficiently managing the caching of assets is crucial for performance optimization.
    In this example, the CacheFirst strategy is employed for image files. Additionally,
    the expiration.Plugin is utilized to control the caching duration, ensuring that
    images are refreshed at appropriate intervals. By intelligently caching and expiring
    assets, developers can strike a balance between performance and ensuring users
    receive the latest content.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 高效管理资源的缓存对于性能优化至关重要。在这个示例中，使用了 CacheFirst 策略来缓存图像文件。此外，使用 expiration.Plugin
    控制缓存的持续时间，确保图像在适当的时间间隔内被刷新。通过智能地缓存和过期资产，开发人员可以在性能和确保用户获得最新内容之间找到平衡。
- en: 'Code Splitting with Vue.js: Enhancing Load Times'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Vue.js 进行代码拆分：提升加载时间
- en: // src/views/Home.vue
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: // src/views/Home.vue
- en: 'const LazyComponent = () => import(/* webpackChunkName: "lazy-component" */
    ''./LazyComponent.vue'');'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 'const LazyComponent = () => import(/* webpackChunkName: "lazy-component" */
    ''./LazyComponent.vue'');'
- en: export default {
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: // ...Vue component options
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: // ...Vue 组件选项
- en: 'components: {'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 'components: {'
- en: LazyComponent,
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 懒加载组件，
- en: '},'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: Code splitting is a powerful technique to enhance load times by deferring the
    loading of certain components until they are needed. In Vue.js, the import statement
    with a dynamic comment instructs Webpack to create a separate chunk for the specified
    component. This ensures that components are only loaded when they are required,
    contributing to a more performant PWA.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 代码分割是一种强大的技术，可以通过推迟加载某些组件，直到它们需要时，再加载它们，从而提高加载速度。在 Vue.js 中，带有动态注释的 import 语句指示
    Webpack 为指定的组件创建一个独立的代码块。这确保了只有在需要时才加载组件，从而有助于构建性能更优的 PWA。
- en: 'Vue Performance Devtools: Insightful Performance Monitoring'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Vue 性能开发工具：深刻的性能监控
- en: Terminal
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 终端
- en: vue add @vue/cli-plugin-vue-performance
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: vue add @vue/cli-plugin-vue-performance
- en: For in-depth performance monitoring, developers can leverage the Vue Performance
    Devtools. By adding the performance plugin to the Vue CLI, developers gain access
    to insightful metrics and visualizations that aid in identifying bottlenecks,
    optimizing components, and fine-tuning their Vue.js PWA for optimal performance.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 对于深入的性能监控，开发者可以利用 Vue 性能开发工具。通过将性能插件添加到 Vue CLI，开发者可以访问有价值的度量和可视化数据，这些数据有助于识别瓶颈、优化组件，并对
    Vue.js PWA 进行微调，以实现最佳性能。
- en: // src/main.js
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: // src/main.js
- en: import { createApp } from 'vue';
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: import { createApp } from 'vue';
- en: import { createInspector } from '@performance/vue-inspector';
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: import { createInspector } from '@performance/vue-inspector';
- en: const app = createApp(App);
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: const app = createApp(App);
- en: app.use(createInspector());
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: app.use(createInspector());
- en: app.mount('#app');
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: app.mount('#app');
- en: Integrating the Vue Performance Devtools is a straightforward process. In the
    main entry file (main.js), developers import the necessary functions and create
    an instance of the inspector, enhancing their ability to diagnose and address
    performance issues.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 集成 Vue 性能开发工具是一项简单的过程。在主入口文件（main.js）中，开发者导入必要的函数并创建一个检查器实例，从而提升他们诊断和解决性能问题的能力。
- en: Elevating Vue.js PWAs to Peak Performance
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 提升 Vue.js PWA 的最佳性能
- en: '"Optimizing for Performance" propels Vue.js PWAs to new heights by introducing
    advanced strategies for caching, code splitting, and performance monitoring. Developers
    equipped with these techniques can fine-tune their applications to deliver an
    exceptional user experience, characterized by swift load times, efficient resource
    utilization, and responsive interactions. As Vue.js continues to evolve, the optimization
    journey becomes an ongoing endeavor, ensuring that Vue.js PWAs remain at the forefront
    of performance excellence. With the insights gained from this section, developers
    are well-prepared to navigate the intricacies of performance optimization, establishing
    their Vue.js PWAs as exemplars of speed, efficiency, and user satisfaction.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: “性能优化”通过引入先进的缓存、代码分割和性能监控策略，将 Vue.js PWA 推向了新的高度。掌握这些技巧的开发者可以精细调整他们的应用程序，以提供卓越的用户体验，表现为快速的加载时间、高效的资源利用和流畅的互动。随着
    Vue.js 的不断发展，优化之旅也成为一个持续的努力，确保 Vue.js PWA 始终处于性能卓越的前沿。通过这一部分的洞察，开发者已做好充分准备，能够驾驭性能优化的复杂性，打造出速度、效率和用户满意度的典范
    Vue.js PWA。
