- en: Recognizing Patterns
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: One of the most helpful strategies for both code optimization and algorithm
    development in general is to find patterns within the problem at hand. Often,
    the discovery of a pattern can help you cut through all the complexity of a problem
    and develop an algorithm that is simple.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The Coin Game
  id: totrans-2
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s a great example. A game I call “the coin game” has two players who compete
    in the following way: they start with a pile of coins, and each player has the
    choice of removing either one or two coins from the pile. The player who removes
    the last coin loses. Fun, right?'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: It turns out that this isn’t a game of random chance, and with the right strategy,
    you can force your opponent to take the last coin and lose the game. To make this
    clear, let’s start with some really small coin piles and see how the game plays
    out.
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: If there’s just one coin in the pile, the player whose turn it is loses, since
    they have no choice but to take the last coin.
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: If there are two coins left, the player whose turn it is can force a win. This
    is because they can take just one coin and thereby force their opponent to take
    the final coin.
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: When there are three coins remaining, the player whose turn it is can also force
    a win, since they can remove two coins, forcing their opponent to take the final
    coin.
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Now, when there are four coins left, the current player is in trouble. If they
    remove one coin, the opponent is given a pile of three coins, which we established
    earlier can allow that player to force a win. Similarly, if the current player
    removes two coins, the opponent is left with two coins, which can also allow the
    opponent to force a win.
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: If we were to write a function that calculated whether you can win the game
    when presented with a coin pile of a given size, what approach should we take?
    If we think about this carefully, we may realize we can use subproblems to help
    calculate an accurate result for any number of coins. This would make top-down
    recursion a natural fit for solving this problem.
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s a JavaScript implementation of a recursive approach:'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | ​`function` gameWinner(numberOfCoins, currentPlayer=`*''you''*`) { |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`let` nextPlayer; |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`if` (numberOfCoins <= 0) { |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`return` currentPlayer; |'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`if` (currentPlayer === `*''you''*`) { |'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | nextPlayer = `*''them''*`; |'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } `else` `if` (currentPlayer === `*''them''*`) { |'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | nextPlayer = `*''you''*`; |'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`if` (gameWinner(numberOfCoins - 1, nextPlayer) === currentPlayer |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `||` gameWinner(numberOfCoins - 2, nextPlayer) === currentPlayer) {
    |'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`return` currentPlayer; |'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } `else` { |'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ​`return` nextPlayer; |'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_TB
- en: This `gameWinner`函数接受一个硬币数量和当前玩家（“you”或“them”）。然后该函数返回“you”或“them”作为游戏的赢家。当函数第一次被调用时，`currentPlayer`是“you”。
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: We define our base case as when the `currentPlayer` is dealt 0 or fewer coins.
    This means the other player took the last coin and the current player, by default,
    won the game.
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: We then define a `nextPlayer`变量，它跟踪下一个将要进行游戏的玩家。
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Then we do our recursion. We recursively call our `gameWinner`函数在当前堆的硬币数量比当前堆小1和2的硬币堆上，看看下一个玩家在这些场景中会赢还是输。如果`nextPlayer`在这两种情况下都输，那么`currentPlayer`就会赢。
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: This isn’t an easy algorithm, but we pulled it off. Now let’s see if we can
    optimize it.
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: To satisfy our prereq, we first need to figure out our algorithm’s current speed.
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: You may have noticed that this function makes multiple recursive calls. If alarm
    bells are going off in your head, that’s for good reason. The time complexity
    of this function is a whopping `O(2^N)`，这可能是令人难以忍受的慢。
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: We can improve this by using the memoization technique you learned about in
    Chapter 12, `[*Dynamic Programming*](f_0112.xhtml#chp.dynamic_programming)`，这可以将速度提高到`O(N)`，其中`N`是起始堆中的硬币数量。这是一个巨大的改进。
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: But let’s see if we can push our algorithm’s speed even further.
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: To determine whether we can optimize our algorithm further, we need to ask ourselves
    what we think the best-imaginable Big O is.
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Because `N` is just a single number, I could conceive that we can make an algorithm
    that takes just `O(1)` time. Since we don’t actually have to touch `N` items in
    an array or anything like that, if someone told me they figured out an algorithm
    for the coin game that was just `O(1)`，我会相信他们。所以让我们争取达到`O(1)`。
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: But how do we get there? This is where finding a pattern can help.
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Generating Examples
  id: totrans-43
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: While each problem has a unique pattern, I found a technique for finding patterns
    that helps across all problems—and that is to generate numerous examples. This
    means we should take a bunch of example inputs, calculate their respective outputs,
    and see if we can detect a pattern.
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Let’s apply this to our case.
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'If we map out who wins for coin piles of size 1 through 10, we get this table:'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| Number of Coins | Winner |'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 1 | Them |'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 2 | You |'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 3 | You |'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 4 | Them |'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 5 | You |'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 6 | You |'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 7 | Them |'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 8 | You |'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 9 | You |'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 10 | Them |'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_TB
- en: The pattern becomes clear when we lay it out this way. Basically, starting with
    1 coin, every third number gives victory to the opponent. Otherwise, you are the
    winner.
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'So if we take the number of coins and subtract `1`, each `"them"` ends up at
    a number that is divisible by `3`\. At this point, then, we can determine who
    will win based on a single division calculation:'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function` gameWinner(`numberOfCoins`) { |'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` ((`numberOfCoins` - `1`) % `3` === `0`) { |'
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return`​ `''them''`; |'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } `else` { |'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return`​ `''you''`; |'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_TB
- en: This code is saying that if after subtracting `1`, the `numberOfCoins` is divisible
    by `3`, the winner is `"them"`. Otherwise, `"you"` are the winner.
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Because this algorithm consists of a single mathematical operation, it’s `O(1)`
    in both time and space. It’s also a lot simpler! This is a real win-win-win.
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: By generating many examples of coin piles (as inputs) and seeing who’d win the
    game (as outputs), we were able to identify a pattern in how the coin game works.
    We were then able to use this pattern to cut to the heart of the problem and turn
    a slow algorithm into an instantaneous one.
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The Sum Swap Problem
  id: totrans-71
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
- en: Here’s an example where we can use both pattern recognition and magical lookups
    together to optimize an algorithm.
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'The next problem, known as the sum swap problem, goes like this:'
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'We want to write a `function` that accepts two arrays of integers. As an example,
    let’s say these are our arrays:'
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/two_arrays.png](images/tips_for_code_optimization/two_arrays.png)'
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: Currently, the numbers in `array1` add up to `20`, while the numbers in `array2`
    add up to `18`.
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Our `function` needs to find one number from each array that can be swapped
    to cause the two array sums to be equal.
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'In this example, if we swapped the `2` from `array1` and the `1` from `array2`,
    we’d get:'
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/tips_for_code_optimization/swap_2_and_1.png](images/tips_for_code_optimization/swap_2_and_1.png)'
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: And both arrays would now have the same sum—namely, `19`.
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: To keep things simple, our `function` won’t actually perform the swap but will
    return the two indexes that we’d have to swap. We can do this as an array containing
    the two indexes. So, in this case, we swapped index `2` of `array1` with index
    `0` of `array2`, so we’ll return an array of `[2, 0]`. In a case where there’s
    no possible swap that makes the two arrays equal, we’ll return `null`.
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: One way we can write this algorithm is to use nested loops; that is, as our
    outer loop points to each number from `array1`, an inner loop can iterate over
    each number from `array2` and test the sums of each array if we were to swap the
    two numbers.
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: To begin optimizing this, we must first satisfy our prereq of knowing the Big
    O of our current algorithm.
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Because our nested-loops approach visits `M` numbers from the second array for
    each of the `N` numbers of the first array, this algorithm is `O(N * M)`. (I’m
    discussing `N` and `M` because the arrays may be two different sizes.)
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Can we do better? To find out, let’s determine what we think the best-imaginable
    Big O may be.
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: It would seem that we absolutely have to visit each number from the two arrays
    at least once since we need to be aware of what all the numbers are. But it’s
    possible that this may be all we need to do. If so, this would be `O(N + M)`。Let’s
    make this our best-imaginable Big O and aim for that。
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Next, we need to try to dig up any patterns hidden within the problem. Again,
    the best technique to dig up patterns is to come up with numerous examples and
    look for patterns among them。
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: So let’s look at a number of different examples where swapping numbers will
    cause the two arrays to have equal sums, as shown in the [`diagram`](#fig.ch20.multiple_swap_examples)。
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/tips_for_code_optimization/multiple_swap_examples.png`](images/tips_for_code_optimization/multiple_swap_examples.png)'
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: In looking at these examples, a few patterns begin to emerge. Some of these
    patterns may seem obvious, but let’s look at them anyway。
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: One pattern is that to achieve equal sums, the larger array needs to trade a
    larger number with a smaller number from the smaller array。
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: A second pattern is that with a single swap, each array’s sum changes by the
    same amount. For example, when we swap a `7` with a `4`，one array’s sum decreases
    by `3`，while the other array’s sum increases by `3`。
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: A third interesting pattern is that the swaps always cause the two array sums
    to fall out exactly in the middle of where the two array sums began。
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In the first case, for example, `array1` was `18` and `array2` was `12`。When
    making a correct swap, the two arrays land at `15`，which is exactly in the middle
    between `18` and `12`。
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: When we think about it further, this third pattern is a logical outgrowth of
    the other patterns. Since a swap causes the two arrays to shift their sums by
    the same amount, the only way to make their sums equal is to meet in the middle。
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Based on this, if we know the sums of the two arrays, we should be able to look
    at any number in one of the arrays and calculate what number it should be swapped
    with。
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Let’s take this example again：
  id: totrans-97
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![`images/tips_for_code_optimization/second_example.png`](images/tips_for_code_optimization/second_example.png)'
  id: totrans-98
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: We know that for a swap to work successfully, we’ll need the two arrays’ sums
    to land in the middle. The exact middle between `18` and `12` is `15`。
  id: totrans-99
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Let’s look at different numbers from `array1` and figure out what number we’d
    want to swap it with. We can call this other number its counterpart. Let’s start
    with the first number from `array1`，which is the number `5`。
  id: totrans-100
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: What number would we want to swap the `5` with? Well, we know that we want `array1`
    to decrease by `3`，and `array2` to increase by `3`，so we’d need to swap the `5`
    with a number `2`。It just so happens that `array2` doesn’t contain a `2`，so the
    `5` cannot be successfully swapped with any number from `array2`。
  id: totrans-101
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: If we look at the next number from `array1`，it’s a `3`。We’d have to swap this
    with a `0` from `array2` to get the two sums to be equal. Alas, a `0` doesn’t
    exist in `array2`。
  id: totrans-102
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`array1`中的最后一个数字是7。我们可以计算出我们想用4交换7，以使两个和都为15。幸运的是，`array2`中确实包含4，因此我们可以成功交换。'
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 那么，我们如何在代码中表达这种模式呢？
  id: totrans-104
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 好吧，我们可以首先使用这个计算来确定数组和需要移动多少：
  id: totrans-105
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `shiftAmount = Math.floor((sum1 - sum2) / 2);` |'
  id: totrans-106
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 在这里，`sum1`是`array1`的和，而`sum2`是`array2`的和。如果`sum1`是18而`sum2`是12，我们得到的差是6。然后我们将其除以2以确定每个数组需要移动多少。这就是`shiftAmount`。
  id: totrans-107
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 在这种情况下，`shiftAmount`是3，这意味着`array2`需要增加3以达到目标和。（同样，`array1`需要减少3。）
  id: totrans-108
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 所以我们可以通过首先计算两个数组的和来开始构建我们的算法。然后我们可以循环遍历其中一个数组的所有数字，并在另一个数组中寻找对应的数字。
  id: totrans-109
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 如果我们迭代`array2`中的每个数字，例如，我们知道当前数字必须与其对应的数字交换，该数字是当前数字加上`shiftAmount`。例如，如果当前数字是4，寻找其对应数字时我们加上`shiftAmount`（3），得到7。这意味着我们需要在`array1`中找到一个7来与当前数字交换。
  id: totrans-110
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 所以，我们已经弄清楚，我们可以查看任一数组中的任何数字，并确切知道它在另一个数组中应该是什么对应数字。但这有什么帮助呢？难道我们仍然需要使用嵌套循环，使算法的复杂度为O(N
    * M)吗？这意味着对于一个数组中的每个数字，我们必须在整个另一个数组中搜索对应的数字。
  id: totrans-111
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这是我们可以调用神奇查找的地方，问自己：“如果我能以O(1)的时间神奇地找到所需的信息，我能让我的算法更快吗？”
  id: totrans-112
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 确实，如果我们能以O(1)的时间找到一个数字在另一个数组中的对应数字，我们的算法会快得多。我们可以通过采用通常的方法，即引入我们的老朋友哈希表来实现快速查找。
  id: totrans-113
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 如果我们首先将一个数组中的数字存储在哈希表中，那么在遍历另一个数组时，我们可以立即以O(1)的时间找到任何数字。
  id: totrans-114
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这是完整的代码：
  id: totrans-115
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function`​ `sumSwap(array1, array2) {` |'
  id: totrans-116
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `const`​ `hashTable = {};` |'
  id: totrans-117
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `let`​ `sum1 = 0;` |'
  id: totrans-118
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `let`​ `sum2 = 0;` |'
  id: totrans-119
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-120
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `for`​ (`const`​ `[index, num]` ​`of`​ `array1.entries()) {` |'
  id: totrans-121
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `sum1 += num;` |'
  id: totrans-122
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `hashTable[num] = index;` |'
  id: totrans-123
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `}` |'
  id: totrans-124
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-125
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `for`​ (`const`​ `num` ​`of`​ `array2) {` |'
  id: totrans-126
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `sum2 += num;` |'
  id: totrans-127
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `}` |'
  id: totrans-128
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-129
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `// If the input consists of integers and the difference`​ |'
  id: totrans-130
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `// between the two sums is odd, it''s impossible to find`​ |'
  id: totrans-131
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `// an integer smack in the middle, so no swap is possible:`​ |'
  id: totrans-132
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if`​ (`Math.abs((sum1 - sum2) % 2) === 1) {` |'
  id: totrans-133
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return`​ `null`; |'
  id: totrans-134
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `}` |'
  id: totrans-135
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-136
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `const`​ `shiftAmount` = `Math.floor((sum1 - sum2) / 2);` |'
  id: totrans-137
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-138
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `for` (`const` [`index, num`] `of` `array2.entries()`) { |'
  id: totrans-139
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if`(`hashTable[num + shiftAmount]` &#124;&#124; `hashTable[num + shiftAmount]
    === 0`) { |'
  id: totrans-140
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return`​[`hashTable[num + shiftAmount], index]; |'
  id: totrans-141
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-142
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-143
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-144
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` `null`; |'
  id: totrans-145
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-146
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 这种方法比我们原来的`O(N * M)`方法快得多。如果我们认为`array1`为`N`，`array2`为`M`，我们可以说这个算法在`O(N + M)`时间内运行。虽然我们确实遍历`array2`两次，技术上是`2M`，但由于我们忽略常数，它变为`M`。
  id: totrans-147
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 这种方法占用额外的`O(N)`空间，因为我们将数组`array1`中的所有`N`个数字复制到哈希表中。再次强调，我们牺牲了空间来获得时间，但如果速度是我们的主要关注点，这是一项巨大的胜利。
  id: totrans-148
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 无论如何，这是另一个例子，展示了发现模式如何让我们直击问题核心，并开发出简单快速的解决方案。
  id: totrans-149
  prefs: []
  stylish: true
  type: TYPE_NORMAL
