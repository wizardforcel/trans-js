["```jsjavascript\n\n// Example 1: Using arrow functions\n\n// Regular function\n\nfunction add(a, b) {\n\nreturn a + b;\n\n}\n\n// Arrow function\n\nconst add = (a, b) => a + b;\n\n```", "```jsjavascript\n\n// Example 2: Using let and const\n\nlet x = 10; // Variable that can be reassigned\n\nconst y = 20; // Constant variable, cannot be reassigned\n\nfunction exampleFunction() {\n\nif (true) {\n\nlet x = 5; // Block-scoped variable\n\nconst y = 15; // Block-scoped constant variable\n\nconsole.log(x, y); // Output: 5 15\n\n}\n\nconsole.log(x, y); // Output: 10 20\n\n}\n\nexampleFunction();\n\n```", "```jsjavascript\n\n// Example 3: Using destructuring assignment\n\n// Array destructuring\n\nconst [a, b, c] = [1, 2, 3];\n\nconsole.log(a, b, c); // Output: 1 2 3\n\n// Object destructuring\n\nconst person = { name: \"John\", age: 30 };\n\nconst { name, age } = person;\n\nconsole.log(name, age); // Output: John 30\n\n```", "```jsjavascript\n\n// Example 4: Using spread syntax\n\n// Array spreading\n\nconst numbers = [1, 2, 3];\n\nconst copiedNumbers = [...numbers];\n\nconsole.log(copiedNumbers); // Output: [1, 2, 3]\n\n// Merging arrays\n\nconst arr1 = [1, 2, 3];\n\nconst arr2 = [4, 5, 6];\n\nconst mergedArray = [...arr1, ...arr2];\n\nconsole.log(mergedArray); // Output: [1, 2, 3, 4, 5, 6]\n\n// Object spreading\n\nconst person = { name: \"John\", age: 30 };\n\nconst copiedPerson = { ...person };\n\nconsole.log(copiedPerson); // Output: { name: \"John\", age: 30 }\n\n```", "```jsjavascript\n\n// Example 5: Using template literals\n\nconst name = \"John\";\n\nconst age = 30;\n\n// Without template literals\n\nconst message = \"My name is \" + name + \" and I am \" + age + \" years old.\";\n\n// With template literals\n\nconst message = `My name is ${name} and I am ${age} years old.`;\n\n```", "```jsjavascript\n\n// Example 6: Using classes for OOP\n\nclass Person {\n\nconstructor(name, age) {\n\nthis.name = name;\n\nthis.age = age;\n\n}\n\ngreet() {\n\nconsole.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);\n\n}\n\n}\n\nconst john = new Person(\"John\", 30);\n\njohn.greet(); // Output: Hello, my name is John and I am 30 years old.\n\n```", "```jsjavascript\n\n// Example 7: Using promises and async/await\n\nfunction fetchData() {\n\nreturn new Promise(function(resolve, reject) {\n\nsetTimeout(function() {\n\nconst data = \"Data from the server\";\n\nresolve(data);\n\n}, 1000);\n\n});\n\n}\n\nasync function getData() {\n\ntry {\n\nconst data = await fetchData();\n\nconsole.log(\"Fetched data:\", data);\n\n} catch (error) {\n\nconsole.log(\"Error:\", error);\n\n}\n\n}\n\ngetData();\n\n```", "```jsjavascript\n\n// Example 8: Using modules\n\n// math.js\n\nexport function add(a, b) {\n\nreturn a + b;\n\n}\n\nexport function subtract(a, b) {\n\nreturn a - b;\n\n}\n\n// main.js\n\nimport { add, subtract } from \"./math.js\";\n\nconst result1 = add(5, 10);\n\nconsole.log(result1); // Output: 15\n\nconst result2 = subtract(20, 5);\n\nconsole.log(result2); // Output: 15\n\n```", "```jsjavascript\n\n// Example 9: Using enhanced object literals\n\nconst name = \"John\";\n\nconst age = 30;\n\n// Without enhanced object literals\n\nconst person = {\n\nname: name,\n\nage: age,\n\n};\n\n// With enhanced object literals\n\nconst person = {\n\nname,\n\nage,\n\n};\n\n```", "```jsjavascript\n\n// Example 10: Using default parameters\n\nfunction greet(name = \"Guest\") {\n\nconsole.log(`Hello, ${name}!`);\n\n}\n\ngreet(); // Output: Hello, Guest!\n\ngreet(\"John\"); // Output: Hello, John!\n\n```"]