- en: Chapter 8
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 第8章
- en: These are the solutions to the exercises found in the section [Exercises](f_0086.xhtml#blazing.fast.lookup.with.hashes.exercises).
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这些是[练习](f_0086.xhtml#blazing.fast.lookup.with.hashes.exercises)部分中的题目解答。
- en: 'The following implementation first stores the values of the first array in
    a hash table and then checks each value of the second array against that hash
    table:'
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 以下实现首先将第一个数组的值存储在哈希表中，然后检查第二个数组的每个值与该哈希表的匹配：
- en: '| ​  | `function` getIntersection(array1, array2) { |'
  id: totrans-3
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` getIntersection(array1, array2) { |'
- en: '| ​  | `const` intersection = []; |'
  id: totrans-4
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` intersection = []; |'
- en: '| ​  | `const` hashTable = {}; |'
  id: totrans-5
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` hashTable = {}; |'
- en: '| ​  |  |'
  id: totrans-6
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | array1.forEach((value) => { |'
  id: totrans-7
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | array1.forEach((value) => { |'
- en: '| ​  | hashTable[value] = `true`; |'
  id: totrans-8
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | hashTable[value] = `true`; |'
- en: '| ​  | }); |'
  id: totrans-9
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | }); |'
- en: '| ​  |  |'
  id: totrans-10
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | array2.forEach((value) => { |'
  id: totrans-11
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | array2.forEach((value) => { |'
- en: '| ​  | `if` (hashTable[value]) { |'
  id: totrans-12
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (hashTable[value]) { |'
- en: '| ​  | intersection.push(value); |'
  id: totrans-13
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | intersection.push(value); |'
- en: '| ​  | } |'
  id: totrans-14
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | }); |'
  id: totrans-15
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | }); |'
- en: '| ​  |  |'
  id: totrans-16
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return` intersection; |'
  id: totrans-17
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` intersection; |'
- en: '| ​  | } |'
  id: totrans-18
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: This algorithm has an efficiency of O(N).
  id: totrans-19
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 该算法的效率为O(N)。
- en: 'The following implementation checks each string in the array. If the string
    isn’t yet in the hash table, the string gets added. If the string is in the hash
    table, that means it’s been added before, which means it’s a duplicate! This algorithm
    has a time complexity of O(N):'
  id: totrans-20
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 以下实现检查数组中的每个字符串。如果字符串尚不在哈希表中，则将字符串添加。如果字符串在哈希表中，这意味着它之前已经被添加过，这意味着它是重复的！该算法的时间复杂度为O(N)：
- en: '| ​  | `function` findDuplicate(array) { |'
  id: totrans-21
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` findDuplicate(array) { |'
- en: '| ​  | `const` hashTable = {}; |'
  id: totrans-22
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` hashTable = {}; |'
- en: '| ​  |  |'
  id: totrans-23
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `for` (`const` value `of` array) { |'
  id: totrans-24
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`const` value `of` array) { |'
- en: '| ​  | `if` (hashTable[value]) { |'
  id: totrans-25
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (hashTable[value]) { |'
- en: '| ​  | `return` value; |'
  id: totrans-26
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` value; |'
- en: '| ​  | } `else` { |'
  id: totrans-27
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } `else` { |'
- en: '| ​  | hashTable[value] = `true`; |'
  id: totrans-28
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | hashTable[value] = `true`; |'
- en: '| ​  | } |'
  id: totrans-29
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-30
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-31
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return` `null`; |'
  id: totrans-32
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` `null`; |'
- en: '| ​  | } |'
  id: totrans-33
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 'The following implementation begins by creating a hash table out of all the
    characters we encounter in the string. Next, we iterate over each character of
    the alphabet and check to see whether the character is contained within our hash
    table. If it isn’t, it means the character is missing from the string, so we return
    it:'
  id: totrans-34
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 以下实现首先创建一个哈希表，其中包含我们在字符串中遇到的所有字符。接下来，我们遍历字母表中的每个字符，检查该字符是否包含在我们的哈希表中。如果不包含，这意味着该字符在字符串中缺失，因此我们返回它：
- en: '| ​  | `function` findMissingLetter(string) { |'
  id: totrans-35
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` findMissingLetter(string) { |'
- en: '| ​  | `const` hashTable = {}; |'
  id: totrans-36
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` hashTable = {}; |'
- en: '| ​  |  |'
  id: totrans-37
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `for` (`const` `char` `of` string) { |'
  id: totrans-38
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`const` `char` `of` string) { |'
- en: '| ​  | hashTable[`char`] = `true`; |'
  id: totrans-39
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | hashTable[`char`] = `true`; |'
- en: '| ​  | } |'
  id: totrans-40
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-41
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `const` alphabet = ''abcdefghijklmnopqrstuvwxyz''; |'
  id: totrans-42
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` alphabet = ''abcdefghijklmnopqrstuvwxyz''; |'
- en: '| ​  |  |'
  id: totrans-43
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `for` (`const` `char` `of` alphabet) { |'
  id: totrans-44
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`const` `char` `of` alphabet) { |'
- en: '| ​  | `if` (!hashTable[`char`]) { |'
  id: totrans-45
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (!hashTable[`char`]) { |'
- en: '| ​  | `return` `char`; |'
  id: totrans-46
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` `char`; |'
- en: '| ​  | } |'
  id: totrans-47
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-48
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-49
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return` `null`; |'
  id: totrans-50
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` `null`; |'
- en: '| ​  | } |'
  id: totrans-51
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: The following implementation begins by iterating over each character in the
    string. If the character doesn’t yet exist in the hash table, the character is
    added to the hash table as a key with the value of 1, indicating the character
    has been found once so far. If the character is already in the hash table, we
    simply increment the value by 1. So if the character "e" has the value of 3, it
    means the "e" exists three times within the string.
  id: totrans-52
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 以下实现首先遍历字符串中的每个字符。如果字符尚不存在于哈希表中，则将字符作为键添加到哈希表，值为1，表示该字符到目前为止被找到一次。如果字符已经在哈希表中，我们只需将值加1。因此，如果字符"e"的值为3，这意味着"e"在字符串中出现了三次。
- en: 'Then we iterate over the characters again and return the first character that
    only exists once within the string. This algorithm is O(N):'
  id: totrans-53
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 然后我们再次遍历字符，返回字符串中仅出现一次的第一个字符。该算法的时间复杂度为O(N)：
- en: '| ​  | `function` firstNonDuplicate(string) { |'
  id: totrans-54
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` firstNonDuplicate(string) { |'
- en: '| ​  | `const` hashTable = {}; |'
  id: totrans-55
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` hashTable = {}; |'
- en: '| ​  |  |'
  id: totrans-56
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `for`(`const` `char` `of` string) { |'
  id: totrans-57
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for`(`const` `char` `of` string) { |'
- en: '| ​  | `if` (hashTable[`char`]) { |'
  id: totrans-58
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (hashTable[`char`]) { |'
- en: '| ​  | `hashTable[` `char` `] += 1;` |'
  id: totrans-59
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `hashTable[` `char` `] += 1;` |'
- en: '| ​  | } `else` { |'
  id: totrans-60
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } `else` { |'
- en: '| ​  | `hashTable[` `char` `] = 1;` |'
  id: totrans-61
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `hashTable[` `char` `] = 1;` |'
- en: '| ​  | } |'
  id: totrans-62
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-63
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-64
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `for`(`const` `char` `of` string) { |'
  id: totrans-65
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for`(`const` `char` `of` string) { |'
- en: '| ​  | `if` (hashTable[`char`] === 1) { |'
  id: totrans-66
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (hashTable[`char`] === 1) { |'
- en: '| ​  | `return` `char`; |'
  id: totrans-67
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` `char`; |'
- en: '| ​  | } |'
  id: totrans-68
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-69
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | `return` `null`; |'
  id: totrans-70
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` `null`; |'
- en: '| ​  | } |'
  id: totrans-71
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
