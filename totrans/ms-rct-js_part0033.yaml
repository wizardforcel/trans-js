- en: 'Chapter 12: Frontend Frameworks: React'
  prefs:
  - PREF_H1
  - PREF_H1
  type: TYPE_NORMAL
- en: In the rapidly evolving world of web development, frontend frameworks play a
    vital role in simplifying the process of building modern and interactive user
    interfaces. Among these frameworks, React stands out as one of the most popular
    and widely used libraries for building web applications. Developed and maintained
    by Facebook, React has gained tremendous traction in the web development community
    due to its simplicity, reusability, and performance. In this chapter, we will
    explore React, its key concepts, and how to build robust and dynamic web applications
    using this powerful frontend library.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. What is React?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: React is an open-source JavaScript library for building user interfaces. It
    was created by Jordan Walke, a software engineer at Facebook, and was first deployed
    on Facebook's newsfeed in 2011\. React allows developers to build reusable UI
    components and manage the state of web applications efficiently. It follows a
    component-based architecture, making it easier to maintain and scale complex applications.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Key Concepts of React
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To understand React better, let''s explore its key concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: a. Components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Components are the building blocks of React applications. A component is a self-contained
    and reusable piece of UI that can be composed to form the user interface of a
    web application. Components can be either functional or class-based.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the above examples, we define a functional component and a class-based component
    that display a greeting message.
  prefs: []
  type: TYPE_NORMAL
- en: b. JSX (JavaScript XML)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JSX is a syntax extension for JavaScript used in React to describe what the
    UI should look like. It allows developers to write HTML-like code within JavaScript,
    making it easier to create UI components.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, we use JSX to create a component that displays a greeting
    message.
  prefs: []
  type: TYPE_NORMAL
- en: c. State and Props
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: State and props are two fundamental concepts in React.
  prefs: []
  type: TYPE_NORMAL
- en: '- State: State represents the internal data of a component. It can change over
    time and is managed by the component itself. To handle state, we use the `useState`
    hook in functional components or the `setState` method in class-based components.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '- Props: Props (short for properties) are used to pass data from a parent component
    to a child component. Props are read-only and cannot be modified by the child
    component.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the above examples, we use state and props to manage internal data and pass
    data to child components.
  prefs: []
  type: TYPE_NORMAL
- en: d. Virtual DOM
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: React uses a virtual DOM (Document Object Model) to optimize UI updates. The
    virtual DOM is a lightweight copy of the actual DOM, and React compares it with
    the real DOM to determine the minimum number of changes required for an update,
    improving performance.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Setting Up a React Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start building a React application, we need to set up a project using tools
    like Create React App or manually configure a build system with tools like Webpack
    and Babel.
  prefs: []
  type: TYPE_NORMAL
- en: Create React App
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create React App is a popular tool for creating React applications with a pre-configured
    build system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, we use Create React App to set up a new React project
    named "my-app" and start the development server.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Working with React Components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the project is set up, we can start building React components to create
    the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: a. Functional Components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Functional components are simple functions that take props as input and return
    JSX elements as output.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: b. Class-based Components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Class-based components are ES6 classes that extend `React.Component`. They have
    more features, such as state and lifecycle methods.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: c. Component Composition
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: React encourages component composition, where components can be nested within
    each other to create more complex UIs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, we use component composition to render two greetings in
    the `App` component.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Handling Events in React
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: React allows us to handle events, such as button clicks or form submissions,
    using event handlers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, we use the `onClick` event handler to increment the count
    when the button is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Working with Forms in React
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: React provides a straightforward way to handle form inputs and manage form state.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, we create a login form with controlled inputs that handle
    changes in the username and password fields.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Working with Lists and Keys
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: React provides efficient ways to work with lists of data, such as rendering
    dynamic lists and adding unique keys to elements for improved performance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, we use the `map` method to render a list of users with
    unique keys.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Styling in React
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: React allows us to style components using CSS or inline styles.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, we use inline styles to style the `StyledComponent`.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. State Management with React Context
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: React Context provides a way to pass data down the component tree without the
    need for prop drilling.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, we use React Context to pass the theme down the component
    tree.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we explored React, a powerful frontend library for building
    user interfaces. We learned about its key concepts, including components, JSX,
    state, props, and the virtual DOM. React's component-based architecture and declarative
    nature make it an excellent choice for building interactive and scalable web applications.
  prefs: []
  type: TYPE_NORMAL
- en: As you continue your journey as a frontend developer, practice building applications
    with React to gain hands-on experience and improve your skills. React's popularity
    and active community ensure that it will remain a prominent tool in the frontend
    development landscape for years to come.
  prefs: []
  type: TYPE_NORMAL
