- en: 'Chapter 12: Frontend Frameworks: React'
  id: totrans-0
  prefs:
  - PREF_H1
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 12 章：前端框架：React
- en: In the rapidly evolving world of web development, frontend frameworks play a
    vital role in simplifying the process of building modern and interactive user
    interfaces. Among these frameworks, React stands out as one of the most popular
    and widely used libraries for building web applications. Developed and maintained
    by Facebook, React has gained tremendous traction in the web development community
    due to its simplicity, reusability, and performance. In this chapter, we will
    explore React, its key concepts, and how to build robust and dynamic web applications
    using this powerful frontend library.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在快速发展的 Web 开发领域，前端框架在简化构建现代化、互动性强的用户界面过程中扮演着至关重要的角色。在这些框架中，React 凭借其简单性、可重用性和高性能，成为构建
    Web 应用的最受欢迎且广泛使用的库之一。React 由 Facebook 开发和维护，因其简洁、易于复用以及出色的性能，在 Web 开发社区中获得了极大的关注。在本章中，我们将探索
    React，它的关键概念，以及如何使用这个强大的前端库构建稳健且动态的 Web 应用。
- en: 1\. What is React?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 什么是 React？
- en: React is an open-source JavaScript library for building user interfaces. It
    was created by Jordan Walke, a software engineer at Facebook, and was first deployed
    on Facebook's newsfeed in 2011\. React allows developers to build reusable UI
    components and manage the state of web applications efficiently. It follows a
    component-based architecture, making it easier to maintain and scale complex applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: React 是一个开源的 JavaScript 库，用于构建用户界面。它由 Facebook 的软件工程师 Jordan Walke 创建，并于 2011
    年首次部署到 Facebook 的新闻推送中。React 允许开发者构建可重用的 UI 组件，并高效地管理 Web 应用的状态。它遵循组件化架构，使得维护和扩展复杂应用程序变得更加容易。
- en: 2\. Key Concepts of React
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. React 的关键概念
- en: 'To understand React better, let''s explore its key concepts:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解 React，让我们探索它的关键概念：
- en: a. Components
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: a. 组件
- en: Components are the building blocks of React applications. A component is a self-contained
    and reusable piece of UI that can be composed to form the user interface of a
    web application. Components can be either functional or class-based.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 组件是 React 应用程序的构建模块。组件是一个自包含、可重用的 UI 元素，可以组合成一个 Web 应用的用户界面。组件可以是功能性的，也可以是基于类的。
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the above examples, we define a functional component and a class-based component
    that display a greeting message.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们定义了一个功能组件和一个基于类的组件，它们会显示一个问候消息。
- en: b. JSX (JavaScript XML)
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: b. JSX（JavaScript XML）
- en: JSX is a syntax extension for JavaScript used in React to describe what the
    UI should look like. It allows developers to write HTML-like code within JavaScript,
    making it easier to create UI components.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: JSX 是一种 JavaScript 语法扩展，在 React 中用于描述用户界面应该是什么样子。它允许开发者在 JavaScript 中编写类似 HTML
    的代码，从而更容易创建 UI 组件。
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the above example, we use JSX to create a component that displays a greeting
    message.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们使用 JSX 创建了一个显示问候消息的组件。
- en: c. State and Props
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: c. 状态和属性
- en: State and props are two fundamental concepts in React.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 状态和属性是 React 中的两个基本概念。
- en: '- State: State represents the internal data of a component. It can change over
    time and is managed by the component itself. To handle state, we use the `useState`
    hook in functional components or the `setState` method in class-based components.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '- 状态：状态表示组件的内部数据。它可以随时间变化，并由组件本身管理。要处理状态，我们可以在函数组件中使用 `useState` 钩子，或在基于类的组件中使用
    `setState` 方法。'
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '- Props: Props (short for properties) are used to pass data from a parent component
    to a child component. Props are read-only and cannot be modified by the child
    component.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '- Props：Props（属性的缩写）用于将数据从父组件传递到子组件。Props 是只读的，子组件无法修改它们。'
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the above examples, we use state and props to manage internal data and pass
    data to child components.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们使用状态和 props 来管理内部数据并将数据传递给子组件。
- en: d. Virtual DOM
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: d. 虚拟 DOM
- en: React uses a virtual DOM (Document Object Model) to optimize UI updates. The
    virtual DOM is a lightweight copy of the actual DOM, and React compares it with
    the real DOM to determine the minimum number of changes required for an update,
    improving performance.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: React 使用虚拟 DOM（文档对象模型）来优化 UI 更新。虚拟 DOM 是实际 DOM 的轻量级副本，React 将其与真实的 DOM 进行比较，以确定更新所需的最小更改，从而提高性能。
- en: 3\. Setting Up a React Project
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3. 设置 React 项目
- en: To start building a React application, we need to set up a project using tools
    like Create React App or manually configure a build system with tools like Webpack
    and Babel.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始构建一个 React 应用程序，我们需要使用 Create React App 等工具设置项目，或手动配置构建系统，使用 Webpack 和 Babel
    等工具。
- en: Create React App
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Create React App
- en: Create React App is a popular tool for creating React applications with a pre-configured
    build system.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Create React App 是一个流行的工具，用于创建具有预配置构建系统的 React 应用程序。
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the above example, we use Create React App to set up a new React project
    named "my-app" and start the development server.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们使用 Create React App 设置了一个名为 "my-app" 的新 React 项目，并启动了开发服务器。
- en: 4\. Working with React Components
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4. 使用 React 组件
- en: Once the project is set up, we can start building React components to create
    the user interface.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦项目设置完成，我们就可以开始构建 React 组件来创建用户界面。
- en: a. Functional Components
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: a. 函数组件
- en: Functional components are simple functions that take props as input and return
    JSX elements as output.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 函数组件是简单的函数，接受 props 作为输入，并返回 JSX 元素作为输出。
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: b. Class-based Components
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: b. 基于类的组件
- en: Class-based components are ES6 classes that extend `React.Component`. They have
    more features, such as state and lifecycle methods.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 基于类的组件是扩展了`React.Component`的 ES6 类。它们具有更多功能，例如状态和生命周期方法。
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: c. Component Composition
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: c. 组件组合
- en: React encourages component composition, where components can be nested within
    each other to create more complex UIs.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: React 鼓励组件组合，组件可以嵌套在彼此内部，创建更复杂的 UI。
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the above example, we use component composition to render two greetings in
    the `App` component.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们使用组件组合在`App`组件中渲染了两个问候语。
- en: 5\. Handling Events in React
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5. 在 React 中处理事件
- en: React allows us to handle events, such as button clicks or form submissions,
    using event handlers.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: React 允许我们通过事件处理器来处理事件，如按钮点击或表单提交。
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the above example, we use the `onClick` event handler to increment the count
    when the button is clicked.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们使用 `onClick` 事件处理器在按钮点击时增加计数。
- en: 6\. Working with Forms in React
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6\. 在 React 中使用表单
- en: React provides a straightforward way to handle form inputs and manage form state.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: React 提供了一种直接的方式来处理表单输入并管理表单状态。
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the above example, we create a login form with controlled inputs that handle
    changes in the username and password fields.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们创建了一个登录表单，使用受控输入来处理用户名和密码字段的变化。
- en: 7\. Working with Lists and Keys
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7\. 使用列表和键
- en: React provides efficient ways to work with lists of data, such as rendering
    dynamic lists and adding unique keys to elements for improved performance.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: React 提供了高效的方式来处理数据列表，如渲染动态列表和为元素添加唯一键以提高性能。
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the above example, we use the `map` method to render a list of users with
    unique keys.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们使用 `map` 方法渲染一个包含唯一键的用户列表。
- en: 8\. Styling in React
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8\. 在 React 中的样式处理
- en: React allows us to style components using CSS or inline styles.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: React 允许我们使用 CSS 或内联样式来为组件添加样式。
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the above example, we use inline styles to style the `StyledComponent`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们使用内联样式为 `StyledComponent` 添加样式。
- en: 9\. State Management with React Context
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9\. 使用 React Context 进行状态管理
- en: React Context provides a way to pass data down the component tree without the
    need for prop drilling.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: React Context 提供了一种在组件树中传递数据的方法，而无需进行属性传递（prop drilling）。
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the above example, we use React Context to pass the theme down the component
    tree.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们使用 React Context 将主题传递到组件树中。
- en: Conclusion
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter, we explored React, a powerful frontend library for building
    user interfaces. We learned about its key concepts, including components, JSX,
    state, props, and the virtual DOM. React's component-based architecture and declarative
    nature make it an excellent choice for building interactive and scalable web applications.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 React，这是一个用于构建用户界面的强大前端库。我们学习了它的关键概念，包括组件、JSX、状态、属性和虚拟 DOM。React
    的组件化架构和声明式特性使其成为构建交互式和可扩展的 Web 应用程序的绝佳选择。
- en: As you continue your journey as a frontend developer, practice building applications
    with React to gain hands-on experience and improve your skills. React's popularity
    and active community ensure that it will remain a prominent tool in the frontend
    development landscape for years to come.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在你继续作为前端开发者的旅程中，练习使用 React 构建应用程序，以获得实际经验并提升技能。React 的流行和活跃的社区确保它将在未来几年继续成为前端开发领域的重要工具。
