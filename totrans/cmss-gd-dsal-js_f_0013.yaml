- en: Chapter 1
  id: totrans-0
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: Why Data Structures Matter
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'When people first learn to code, their focus is—and should be—on getting their
    code to run properly. Their code is measured using one simple metric: does the
    code actually work?'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: As software engineers gain more experience, though, they begin to learn about
    additional layers and nuances regarding the quality of their code. They learn
    that there can be two snippets of code that both accomplish the same task, but
    that one snippet is better than the other.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: There are numerous measures of code quality. One important measure is code maintainability.
    Maintainability of code involves aspects such as the readability, organization,
    and modularity of one’s code.
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: However, another aspect of high-quality code is code efficiency. For example,
    you can have two code snippets that both achieve the same goal, but one runs faster
    than the other.
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Take a look at these two functions, both of which print all the even numbers
    from `2` to `100`:'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function`​ `printNumbersVersionOne()` { |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `let`​ `number = 2;` |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `while`​ (`number <= 100`) { |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `// If number is even, print it:`​ |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if`​ (`number % 2 === 0`) { |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `console.log(number);` |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `number += 1;` |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `function`​ `printNumbersVersionTwo()` { |'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `let`​ `number = 2;` |'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `while`​ (`number <= 100`) { |'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `console.log(number);` |'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `// Increase number by 2, which, by definition, is the next even number:`​
    |'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `number += 2;` |'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_TB
- en: Which of these functions do you think runs faster?
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: If you said `Version 2`，you’re thinking along the right lines. `Version 1` ends
    up looping `100` times, while `Version 2` only loops `50` times. The first version,
    then, takes twice as many steps as the second version.
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: This book is about writing efficient code. Having the ability to write code
    that runs quickly is an important aspect of becoming a better software developer.
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The first step in writing fast code is to understand what data structures are
    and how different data structures can affect the speed of our code. So let’s dive
    in.
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
