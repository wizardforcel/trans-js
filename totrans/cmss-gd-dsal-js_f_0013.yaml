- en: Chapter 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why Data Structures Matter
  prefs: []
  type: TYPE_NORMAL
- en: 'When people first learn to code, their focus is—and should be—on getting their
    code to run properly. Their code is measured using one simple metric: does the
    code actually work?'
  prefs: []
  type: TYPE_NORMAL
- en: As software engineers gain more experience, though, they begin to learn about
    additional layers and nuances regarding the quality of their code. They learn
    that there can be two snippets of code that both accomplish the same task, but
    that one snippet is better than the other.
  prefs: []
  type: TYPE_NORMAL
- en: There are numerous measures of code quality. One important measure is code maintainability.
    Maintainability of code involves aspects such as the readability, organization,
    and modularity of one’s code.
  prefs: []
  type: TYPE_NORMAL
- en: However, another aspect of high-quality code is code efficiency. For example,
    you can have two code snippets that both achieve the same goal, but one runs faster
    than the other.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at these two functions, both of which print all the even numbers
    from 2 to 100:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | ​**function**​ printNumbersVersionOne() { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**let**​ number = 2; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**while**​ (number <= 100) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​*// If number is even, print it:*​ |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**if**​ (number % 2 === 0) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | console.log(number); |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: '| ​  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | number += 1; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**function**​ printNumbersVersionTwo() { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**let**​ number = 2; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**while**​ (number <= 100) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | console.log(number); |'
  prefs: []
  type: TYPE_TB
- en: '| ​  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​*// Increase number by 2, which, by definition, is the next even number:*​
    |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | number += 2; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: Which of these functions do you think runs faster?
  prefs: []
  type: TYPE_NORMAL
- en: If you said Version 2, you’re thinking along the right lines. Version 1 ends
    up looping 100 times, while Version 2 only loops 50 times. The first version,
    then, takes twice as many steps as the second version.
  prefs: []
  type: TYPE_NORMAL
- en: This book is about writing efficient code. Having the ability to write code
    that runs quickly is an important aspect of becoming a better software developer.
  prefs: []
  type: TYPE_NORMAL
- en: The first step in writing fast code is to understand what data structures are
    and how different data structures can affect the speed of our code. So let’s dive
    in.
  prefs: []
  type: TYPE_NORMAL
