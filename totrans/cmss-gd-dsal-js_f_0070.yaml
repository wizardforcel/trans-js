- en: Count the Ones
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 计算 `1` 的数量
- en: Here’s another algorithm where the Big O is different from what it seems at
    first glance. This function accepts an array of arrays, where the inner arrays
    contain `1s` and `0s`。 The function then returns how many `1s` there are.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是另一个算法，其 Big O 与初看似乎不同。该函数接受一个数组的数组，内部数组包含 `1` 和 `0`。然后，函数返回 `1` 的数量。
- en: 'So take a look at this example input:'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 所以看看这个示例输入：
- en: '| ​  | `[ |'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `[ |'
- en: '| ​  | `[0, 1, 1, 1, 0]`，|'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `[0, 1, 1, 1, 0]`，|'
- en: '| ​  | `[0, 1, 0, 1, 0, 1]`，|'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `[0, 1, 0, 1, 0, 1]`，|'
- en: '| ​  | `[1, 0]` |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `[1, 0]` |'
- en: '| ​  | ] |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ] |'
- en: Our function will return `7` since there are seven `1s`。
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们的函数将返回 `7`，因为有七个 `1`。
- en: 'Here’s the function:'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是函数：
- en: '| ​  | `function` countOnes(outerArray) { |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` countOnes(outerArray) { |'
- en: '| ​  | `let` count = 0; |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` count = 0; |'
- en: '| ​  |  |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `for` (`const` innerArray `of` outerArray) { |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`const` innerArray `of` outerArray) { |'
- en: '| ​  | `for` (`const` number `of` innerArray) { |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`const` number `of` innerArray) { |'
- en: '| ​  | `if` (number === `1`) { |'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (number === `1`) { |'
- en: '| ​  | `count` += 1; |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `count` += 1; |'
- en: '| ​  | } |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return` `count`; |'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` `count`; |'
- en: '| ​  | } |'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: What’s the Big O of this algorithm?
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这个算法的 Big O 是什么？
- en: Again, it’s easy to notice the nested loops and jump to the conclusion that
    it’s `O(N²)`。 However, the two loops are iterating over two completely different
    things.
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 再次，我们很容易注意到嵌套循环，并得出结论它是 `O(N²)`。然而，这两个循环是在遍历完全不同的内容。
- en: The outer loop is iterating over the inner arrays, and the inner loop is iterating
    over the actual numbers. At the end of the day, our inner loop only runs for as
    many numbers as there are in total.
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 外层循环遍历内部数组，而内层循环遍历实际的数字。最终，我们的内层循环只会运行与总数字数量相等的次数。
- en: Because of this, we can say that `N` represents how many numbers there are.
    And since our algorithm simply processes each number, the function’s time complexity
    is `O(N)`.
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因此，我们可以说 `N` 代表有多少个数字。由于我们的算法仅仅处理每个数字，函数的时间复杂度是 `O(N)`。
