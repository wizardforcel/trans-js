- en: Count the Ones
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: Here’s another algorithm where the Big O is different from what it seems at
    first glance. This function accepts an array of arrays, where the inner arrays
    contain `1s` and `0s`。 The function then returns how many `1s` there are.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'So take a look at this example input:'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `[ |'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `[0, 1, 1, 1, 0]`，|'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `[0, 1, 0, 1, 0, 1]`，|'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `[1, 0]` |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ] |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
- en: Our function will return `7` since there are seven `1s`。
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Here’s the function:'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function` countOnes(outerArray) { |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `let` count = 0; |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `for` (`const` innerArray `of` outerArray) { |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `for` (`const` number `of` innerArray) { |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `if` (number === `1`) { |'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `count` += 1; |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `return` `count`; |'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | } |'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_TB
- en: What’s the Big O of this algorithm?
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Again, it’s easy to notice the nested loops and jump to the conclusion that
    it’s `O(N²)`。 However, the two loops are iterating over two completely different
    things.
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The outer loop is iterating over the inner arrays, and the inner loop is iterating
    over the actual numbers. At the end of the day, our inner loop only runs for as
    many numbers as there are in total.
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Because of this, we can say that `N` represents how many numbers there are.
    And since our algorithm simply processes each number, the function’s time complexity
    is `O(N)`.
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
