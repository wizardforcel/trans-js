- en: Count the Ones
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here’s another algorithm where the Big O is different from what it seems at
    first glance. This function accepts an array of arrays, where the inner arrays
    contain 1s and 0s. The function then returns how many 1s there are.
  prefs: []
  type: TYPE_NORMAL
- en: 'So take a look at this example input:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | [ |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | [0, 1, 1, 1, 0], |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | [0, 1, 0, 1, 0, 1], |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | [1, 0] |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ] |'
  prefs: []
  type: TYPE_TB
- en: Our function will return 7 since there are seven 1s.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ​  | ​**function**​ countOnes(outerArray) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**let**​ count = 0; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**for**​ (​**const**​ innerArray ​**of**​ outerArray) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**for**​ (​**const**​ number ​**of**​ innerArray) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**if**​ (number === 1) { |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | count += 1; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: '| ​  |  |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | ​**return**​ count; |'
  prefs: []
  type: TYPE_TB
- en: '| ​  | } |'
  prefs: []
  type: TYPE_TB
- en: What’s the Big O of this algorithm?
  prefs: []
  type: TYPE_NORMAL
- en: Again, it’s easy to notice the nested loops and jump to the conclusion that
    it’s O(N²). However, the two loops are iterating over two completely different
    things.
  prefs: []
  type: TYPE_NORMAL
- en: The outer loop is iterating over the inner arrays, and the inner loop is iterating
    over the actual numbers. At the end of the day, our inner loop only runs for as
    many numbers as there are in total.
  prefs: []
  type: TYPE_NORMAL
- en: Because of this, we can say that N represents how many numbers there are. And
    since our algorithm simply processes each number, the function’s time complexity
    is O(N).
  prefs: []
  type: TYPE_NORMAL
