- en: The Efficiency of Graph Search
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 图搜索的效率
- en: Let’s analyze the time complexity of graph search using `Big O` notation.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们使用`Big O`符号分析图搜索的时间复杂度。
- en: In both `depth-first search` and `breadth-first search`, we traverse all the
    vertices in a worst-case scenario. The worst-case scenario may be that we’re intending
    to do a full-graph traversal, or we may be searching for a vertex that doesn’t
    exist in the graph. Or, the vertex we’re searching for may just happen to be the
    last vertex in the graph that we check.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在`深度优先搜索`和`广度优先搜索`中，我们在最坏情况下遍历所有顶点。最坏情况下，可能是我们打算进行全图遍历，或者我们可能正在搜索一个不存在于图中的顶点。或者，我们要搜索的顶点可能正好是我们检查的最后一个顶点。
- en: In any case, we touch all vertices in the graph. At first glance, this would
    seem to be `O(N)` with `N` being the number of vertices.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 无论如何，我们会接触到图中的所有顶点。乍一看，这似乎是`O(N)`，其中`N`是顶点的数量。
- en: However, in both search algorithms, for each vertex we traverse, we also iterate
    over all of its adjacent vertices. We may ignore an adjacent vertex if it has
    already been visited, but we still spend a step checking that vertex to see whether
    we’ve visited it.
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，在两种搜索算法中，对于每个我们遍历的顶点，我们还会遍历所有相邻的顶点。如果一个相邻顶点已经被访问过，我们可以忽略它，但我们仍然需要花一步去检查该顶点是否已被访问。
- en: So for each vertex we visit, we also spend steps checking each of the vertex’s
    adjacent neighbors. This would seem tough to peg down using `Big O` notation since
    each vertex may have a different number of adjacent vertices.
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 所以，对于每个我们访问的顶点，我们还花步骤检查每个顶点的相邻邻居。这似乎很难用`Big O`符号来确定，因为每个顶点可能有不同数量的相邻顶点。
- en: 'Let’s analyze a simple graph to make this clear:'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们分析一个简单的图以便明确：
- en: '`![images/graphs/abcde_graph.png](images/graphs/abcde_graph.png)`'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '`![images/graphs/abcde_graph.png](images/graphs/abcde_graph.png)`'
- en: Here, `Vertex A` has four neighbors. By contrast, `B`, `C`, `D`, and `E` each
    have three neighbors. Let’s count the number of steps it takes to search this
    graph.
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这里，`Vertex A`有四个邻居。相反，`B`、`C`、`D`和`E`各有三个邻居。让我们计算搜索该图所需的步骤数。
- en: At the very least, we have to visit each of the five vertices. This alone takes
    five steps.
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 至少，我们必须访问每个五个顶点。这本身就需要五步。
- en: Then, for each vertex, we iterate over each of its neighbors.
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然后，对于每个顶点，我们遍历它的每个邻居。
- en: 'This would add the following steps:'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这将增加以下步骤：
- en: '`A`: 4 steps to iterate over 4 neighbors'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`A`：4步遍历4个邻居'
- en: '`B`: 3 steps to iterate over 3 neighbors'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`B`：3步遍历3个邻居'
- en: '`C`: 3 steps to iterate over 3 neighbors'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`C`：3步遍历3个邻居'
- en: '`D`: 3 steps to iterate over 3 neighbors'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`D`：3步遍历3个邻居'
- en: '`E`: 3 steps to iterate over 3 neighbors'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`E`：3步遍历3个邻居'
- en: This yields sixteen iterations.
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这产生了十六次迭代。
- en: So we have the visiting of the five vertices, plus sixteen iterations over adjacent
    neighbors. That’s a total of twenty-one steps.
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们访问了五个顶点，加上对相邻邻居的十六次迭代。这总共是二十一步。
- en: 'But here’s another graph with five vertices:'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 但这是另一个有五个顶点的图：
- en: '`![images/graphs/vwxyz_graph.png](images/graphs/vwxyz_graph.png)`'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '`![images/graphs/vwxyz_graph.png](images/graphs/vwxyz_graph.png)`'
- en: 'This graph has five vertices, but the count of iterations over adjacent neighbors
    is as follows:'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这个图有五个顶点，但对相邻邻居的迭代次数如下：
- en: '`V`: 4 steps to iterate over 4 neighbors'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`V`：4步遍历4个邻居'
- en: '`W`: 1 step to iterate over 1 neighbor'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`W`：1步遍历1个邻居'
- en: '`X`: 1 step to iterate over 1 neighbor'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`X`：1步遍历1个邻居'
- en: '`Y`: 1 step to iterate over 1 neighbor'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Y`：1步遍历1个邻居'
- en: '`Z`: 1 step to iterate over 1 neighbor'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Z`：1步遍历1个邻居'
- en: This is a total of eight iterations.
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 总共进行八次迭代。
- en: We have the five vertices, plus eight iterations over adjacent neighbors. This
    is a total of thirteen steps.
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们访问了五个顶点，加上对相邻邻居的八次迭代。这总共是十三步。
- en: So, we have two graphs, each containing five vertices. However, searching one
    takes twenty-one steps, while searching the other takes thirteen steps.
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因此，我们有两个图，每个图包含五个顶点。然而，搜索一个需要二十一步，而搜索另一个只需十三步。
- en: It emerges that we can’t just count how many vertices are in the graph. Instead,
    we also need to consider how many adjacent neighbors each vertex has.
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 结果表明，我们不能仅仅计算图中有多少个顶点。相反，我们还需要考虑每个顶点有多少个相邻的邻居。
- en: To effectively describe the efficiency of graph search, then, we’re going to
    need to use two variables. We need one to represent the number of vertices in
    the graph and another to be the total number of adjacent neighbors each vertex
    has.
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因此，为了有效地描述图搜索的效率，我们需要使用两个变量。我们需要一个来表示图中顶点的数量，另一个来表示每个顶点的总相邻邻居数量。
- en: '`O(V + E)`'
  id: totrans-32
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`O(V + E)`'
- en: Interestingly enough, Big O notation doesn’t use the variable `N` to describe
    either of these things. Instead, it uses the variables `V` and `E`.
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 有趣的是，大O符号并不使用变量`N`来描述这两者。相反，它使用变量`V`和`E`。
- en: The `V` is the easier one. `V` stands for vertex and represents the number of
    vertices in the graph.
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`V`是比较简单的。`V`代表顶点，表示图中顶点的数量。'
- en: '`E`，有趣的是，代表边，意味着图中边的数量。'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`E`，有趣的是，代表边，意味着图中边的数量。'
- en: Now, computer scientists describe the efficiency of graph search as `O(V + E)`。这意味着步骤的数量是图中顶点的数量加上图中边的数量。让我们看看为什么这是图搜索的效率，因为这并不是立刻直观的。
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，计算机科学家将图搜索的效率描述为`O(V + E)`。这意味着步骤的数量是图中顶点的数量加上图中边的数量。让我们看看为什么这是图搜索的效率，因为这并不是立刻直观的。
- en: Specifically, if you look at our two earlier examples, you’ll notice that `V
    + E` doesn’t seem to be accurate.
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 特别是，如果你看看我们之前的两个例子，你会注意到`V + E`似乎并不准确。
- en: In the `A-B-C-D-E` graph, there are five vertices and eight edges. This would
    be a total of thirteen steps. However, we noted that there’s actually a total
    of twenty-one steps.
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在`A-B-C-D-E`图中，有五个顶点和八条边。这将总共是十三个步骤。然而，我们注意到实际上总共有二十一条步骤。
- en: And in the `V-W-X-Y-Z` graph, there are five vertices and four edges. `O(V +
    E)` says that graph search would have nine steps. But we saw that there are actually
    thirteen.
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在`V-W-X-Y-Z`图中，有五个顶点和四条边。`O(V + E)`表示图搜索将有九个步骤。但我们看到实际上有十三个步骤。
- en: The reason for this discrepancy is that while `O(V + E)` only counts the number
    of edges once, in reality graph search touches each edge more than once.
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 造成这种差异的原因是，虽然`O(V + E)`只计算边的数量一次，但实际上图搜索多次接触每一条边。
- en: In the `V-W-X-Y-Z` graph, for example, there are only four edges. However, the
    edge between `V` and `W` is used twice; that is, when `V` is the current vertex,
    we find its adjacent neighbor `W` using that edge. But when `W` is the current
    vertex, we find its adjacent vertex `V` using that same edge.
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在`V-W-X-Y-Z`图中，例如，只有四条边。然而，`V`和`W`之间的边被使用了两次；也就是说，当`V`是当前顶点时，我们通过那条边找到它的相邻邻居`W`。但当`W`是当前顶点时，我们又通过那条边找到它的相邻顶点`V`。
- en: 'With this in mind, the most accurate way to describe the efficiency of graph
    search in the `V-W-X-Y-Z` graph would be to count the five vertices plus the following:'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 考虑到这一点，描述`V-W-X-Y-Z`图中图搜索效率的最准确方式是计算五个顶点，加上以下内容：
- en: '`2 * edge` between `V` and `W`'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`2 * edge`在`V`和`W`之间'
- en: '`2 * edge` between `V` and `X`'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`2 * edge`在`V`和`X`之间'
- en: '`2 * edge` between `V` and `Y`'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`2 * edge`在`V`和`Y`之间'
- en: '`2 * edge` between `V` and `Z`'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`2 * edge`在`V`和`Z`之间'
- en: So this comes out to be `V + 2E` since we visit all the vertices once (that’s
    the `V`) and use each edge twice (that’s the `2E`).
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 所以这得出结果为`V + 2E`，因为我们访问所有顶点一次（那就是`V`），并且每条边使用两次（那就是`2E`）。
- en: In this example, `V` is 5, as we visit 5 vertices. And since we use each of
    the four edges twice, `2E` comes out to be 8。这是`V + 2E`给我们一个总共的十三步。
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个例子中，`V`是5，因为我们访问了5个顶点。由于我们每条边都使用了两次，`2E`结果是8。这是`V + 2E`给我们一个总共的十三个步骤。
- en: The answer, though, to why we just call this `O(V + E)`，是因为Big O忽略了常数。虽然实际上步骤的数量是`V
    + 2E`，我们将其简化为`O(V + E)`。
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 不过，为什么我们称之为`O(V + E)`，是因为大O忽略了常数。虽然实际上步骤的数量是`V + 2E`，我们将其简化为`O(V + E)`。
- en: So while `O(V + E)` is ultimately just an approximation, it’s good enough, as
    are all expressions of Big O.
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因此，尽管`O(V + E)`最终只是一种近似，但它足够好，所有的大O表达式也是如此。
- en: What is definitely clear, though, is that increasing the number of edges will
    increase the number of steps. After all, both the `A-B-C-D-E` and `V-W-X-Y-Z`
    graphs have five vertices, but because the `A-B-C-D-E` graph has more edges, it
    takes considerably more steps.
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，明确的一点是，增加边的数量将增加步骤的数量。毕竟，`A-B-C-D-E`和`V-W-X-Y-Z`图都有五个顶点，但由于`A-B-C-D-E`图有更多的边，因此需要的步骤明显更多。
- en: At the end of the day, graph search is `O(V + E)` in a worst-case scenario,
    where the vertex we’re searching for is the last one we find (or isn’t present
    in the graph at all). And this is true for both breadth-first search and depth-first
    search.
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 最终，图搜索在最坏情况下是`O(V + E)`，即我们搜索的顶点是最后一个找到的（或根本不存在于图中）。这对广度优先搜索和深度优先搜索都是正确的。
- en: However, we saw earlier that depending on the shape of the graph and the data
    we’re searching for, our choice of `breadth-first` versus `depth-first` can optimize
    our search where we’d hope to find our vertex at some point before having to traverse
    the entire graph. The right method of search can help us increase the odds that
    we won’t end up in a worst-case scenario and that we’ll find the vertex early.
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，我们之前看到，根据图的形状和我们要搜索的数据，选择`广度优先`还是`深度优先`可以优化我们的搜索，期望在不必遍历整个图之前找到我们的顶点。正确的搜索方法可以提高我们不陷入最坏情况的几率，并且能够早期找到顶点。
- en: In the next section, you’re going to learn about a specific type of `graph`
    that comes with its own set of search methods that can be used to solve some complex
    but useful problems.
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在接下来的部分中，你将学习一种特定类型的`图`，它具有自己的一套搜索方法，可以用来解决一些复杂但有用的问题。
- en: '`Graph Databases`'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`图数据库`'
- en: Because graphs are so efficient at working with data involving relationships
    (such as friends in a social network), special `graph` databases are often used
    to store this kind of data in real-world software applications. These databases
    use the concepts you’re learning about in this chapter, as well as other elements
    of `graph theory`, to optimize efficiency of operations around this kind of data.
    Indeed, many social networking applications are powered by `graph` databases under
    the hood.
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 由于图在处理涉及关系的数据（例如社交网络中的朋友）时非常高效，因此在实际软件应用中，通常使用特殊的`图`数据库来存储这类数据。这些数据库运用了你在本章中学习的概念，以及其他`图论`的元素，以优化此类数据操作的效率。实际上，许多社交网络应用的后台都是由`图`数据库提供支持的。
- en: Some examples of `graph` databases include `Neo4j`^([[7]](f_0188.xhtml#FOOTNOTE-7))
    and `ArangoDB`^([[8]](f_0188.xhtml#FOOTNOTE-8)). These websites are a good place
    to start if you’re interested in learning more about how `graph` databases work.
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 一些`图`数据库的例子包括`Neo4j`^([[7]](f_0188.xhtml#FOOTNOTE-7))和`ArangoDB`^([[8]](f_0188.xhtml#FOOTNOTE-8))。如果你有兴趣了解`图`数据库的工作原理，这些网站是一个不错的起点。
