- en: 'Chapter 3: Control Flow and Loops'
  prefs:
  - PREF_H1
  - PREF_H1
  type: TYPE_NORMAL
- en: In Chapter 2, we gained a solid understanding of data types and variables in
    JavaScript. Now, it's time to explore how to control the flow of our code using
    conditional statements and loops. Control flow allows us to make decisions and
    execute specific code blocks based on certain conditions, while loops provide
    a mechanism for repeating tasks until a condition is met. By mastering control
    flow and loops, you'll unlock the full potential of JavaScript and be able to
    build more dynamic and interactive applications. Let's dive in!
  prefs: []
  type: TYPE_NORMAL
- en: 'Conditional Statements: Making Decisions in Code'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Conditional statements enable us to create decision-making logic in our code.
    Depending on the truthiness of a condition, specific code blocks are executed.
    JavaScript provides three types of conditional statements: `if`, `if...else`,
    and `switch`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `if` Statement:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `if` statement is the most basic form of conditional statement. It executes
    a block of code if the specified condition evaluates to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In Example 1, the code checks if `age` is greater than or equal to 18\. If true,
    it prints "You are an adult."
  prefs: []
  type: TYPE_NORMAL
- en: 'The `if...else` Statement:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `if...else` statement allows us to execute one block of code if the condition
    is `true`, and another block if the condition is `false`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In Example 2, the code checks if `isRaining` is `true`. If true, it prints "It's
    raining. Don't forget your umbrella!"; otherwise, it prints "No rain. Have a great
    day!"
  prefs: []
  type: TYPE_NORMAL
- en: 'The `else if` Statement:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `else if` statement allows us to add multiple conditions to the decision-making
    process.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In Example 3, the code checks the value of `time` and prints different greetings
    based on the time of day.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `switch` Statement:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `switch` statement provides an alternative way to handle multiple conditions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In Example 4, the code checks the value of `day` and prints different messages
    based on the day of the week.
  prefs: []
  type: TYPE_NORMAL
- en: 'Loops: Repeating Code Execution'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Loops are essential in programming as they allow us to execute a block of code
    repeatedly until a specific condition is met. JavaScript provides several types
    of loops, including the `for` loop, `while` loop, `do...while` loop, and `for...of`
    loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `for` Loop:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `for` loop is ideal when you know the exact number of iterations you want
    to perform.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In Example 5, the `for` loop executes the code inside the curly braces five
    times, as `i` starts at 1 and increments by 1 in each iteration until it reaches
    5.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `while` Loop:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `while` loop is used when you want to repeat a block of code until a specific
    condition becomes `false`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In Example 6, the `while` loop executes the code inside the curly braces until
    `count` becomes 5, as it increments by 1 in each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `do...while` Loop:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `do...while` loop is similar to the `while` loop, but it ensures that the
    code inside the loop block is executed at least once before checking the condition.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In Example 7, the `do...while` loop executes the code inside the curly braces
    at least once because the condition is checked after the first iteration.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `for...of` Loop:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `for...of` loop is used to iterate over elements of an iterable object,
    such as arrays and strings.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In Example 8, the `for...of` loop iterates over the `fruits` array and prints
    each fruit.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `break` and `continue` Statements:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `break` statement allows you to exit a loop prematurely if a certain condition
    is met. The `continue` statement allows you to skip the rest of the current iteration
    and move to the next iteration.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In Example 9, the `break` statement is used to exit the loop when `i` is equal
    to 5, and the `continue` statement is used to skip the rest of the code for the
    current iteration when `i` is equal to 3.
  prefs: []
  type: TYPE_NORMAL
- en: Control Flow and Loops in Practice
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we understand conditional statements and loops, let's explore some
    practical examples of how they can be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 10: Finding Even Numbers'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's write a program that finds all even numbers between 1 and 10.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]javascript'
  prefs: []
  type: TYPE_NORMAL
- en: '// Example 11: Sum of numbers'
  prefs: []
  type: TYPE_NORMAL
- en: let sum = 0;
  prefs: []
  type: TYPE_NORMAL
- en: for (let i = 1; i <= 100; i++) {
  prefs: []
  type: TYPE_NORMAL
- en: sum += i;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'console.log("The sum of numbers from 1 to 100 is: " + sum);'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The sum of numbers from 1 to 100 is: 5050'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]javascript'
  prefs: []
  type: TYPE_NORMAL
- en: '// Example 12: Countdown timer'
  prefs: []
  type: TYPE_NORMAL
- en: let countDownFrom = 10;
  prefs: []
  type: TYPE_NORMAL
- en: while (countDownFrom >= 0) {
  prefs: []
  type: TYPE_NORMAL
- en: console.log(countDownFrom);
  prefs: []
  type: TYPE_NORMAL
- en: countDownFrom--;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Time's up!");
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '10'
  prefs: []
  type: TYPE_NORMAL
- en: '9'
  prefs: []
  type: TYPE_NORMAL
- en: '8'
  prefs: []
  type: TYPE_NORMAL
- en: '7'
  prefs: []
  type: TYPE_NORMAL
- en: '6'
  prefs: []
  type: TYPE_NORMAL
- en: '5'
  prefs: []
  type: TYPE_NORMAL
- en: '4'
  prefs: []
  type: TYPE_NORMAL
- en: '3'
  prefs: []
  type: TYPE_NORMAL
- en: '2'
  prefs: []
  type: TYPE_NORMAL
- en: '1'
  prefs: []
  type: TYPE_NORMAL
- en: '0'
  prefs: []
  type: TYPE_NORMAL
- en: Time's up!
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: In Example 12, the `while` loop creates a countdown timer starting from 10 and
    decrements the value of `countDownFrom` in each iteration until it reaches 0.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Congratulations! In this chapter, we explored control flow and loops in JavaScript.
    We learned how to use conditional statements (`if`, `if...else`, `else if`, and
    `switch`) to make decisions in our code and how to use different types of loops
    (`for`, `while`, `do...while`, and `for...of`) to repeat code execution until
    certain conditions are met. We also saw practical examples of how to apply control
    flow and loops in real-world scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Control flow and loops are powerful tools in JavaScript that enable us to create
    dynamic and interactive applications. With this knowledge, you are well on your
    way to becoming a proficient JavaScript programmer.
  prefs: []
  type: TYPE_NORMAL
