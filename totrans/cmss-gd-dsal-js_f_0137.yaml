- en: 链表操作的效率
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: 在我们的分析之后，链表和数组的比较分解如下：
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| 操作 | 数组 | 链表 |'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 阅读 | `O(1)` | `O(N)` |'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 搜索 | `O(N)` | `O(N)` |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 插入 | `O(N)`（在末尾为 `O(1)`） | `O(N)`（在开头为 `O(1)`） |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 删除 | `O(N)`（在末尾为 `O(1)`） | `O(N)`（在开头为 `O(1)`） |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 在大局观中，链表在时间复杂度方面似乎显得平淡无奇。它们在搜索、插入和删除方面的表现与数组相似，而在读取时则要慢得多。如果是这样，为什么还要使用链表呢？
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 解锁链表强大功能的关键在于实际的插入和删除步骤仅为 `O(1)`。
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 但这难道只在插入或删除列表开头时才相关吗？我们看到在其他地方插入或删除时，访问我们想要删除或插入的节点最多需要 N 步！
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 好吧，恰巧有一些场景我们可能已经出于其他目的访问了正确的节点。下一个例子就是一个很好的例证。
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
