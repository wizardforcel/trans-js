- en: '| Recipe 35 | Taking Away the Special Meaning of Replacement Patterns |'
  prefs: []
  type: TYPE_TB
- en: Task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Suppose your task is to add the pricing for different services to a website’s
    blog. More specifically, you need to add the fee for tire replacement at a car
    service center. In your first attempt, you come up with a solution like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/neutralizing_replacement/nrp_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/neutralizing_replacement/nrp_ex1.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** str = *"In our shops, tire change takes about 15 minutes."*;
    |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** re = */**\b(**tire change**)\b**/*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | str.replace(re, *"$1 (which cost $10 for each tire)"*); |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// → "In our shops, tire change (which cost tire change0 for each tire)*
    |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// takes about 15 minutes."* |'
  prefs: []
  type: TYPE_TB
- en: This regex attempts to find the phrase “tire change” in a string and add the
    cost in parentheses. It uses a special replacement pattern in the form of $1,
    but because the regex treats $10 as a special replacement pattern, the result
    is unusable.
  prefs: []
  type: TYPE_NORMAL
- en: You need a solution to take away the special meaning of $1 in $10, which has
    a corresponding capturing group in the pattern, and use the characters literally.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Escape the dollar sign with another dollar sign:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/neutralizing_replacement/nrp_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/neutralizing_replacement/nrp_ex2.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** str = *"In our shops, tire change takes about 15 minutes."*;
    |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** re = */**\b(**tire change**)\b**/*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | str.replace(re, *"$1 (which cost $$10 for each tire)"*); |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// → "In our shops, tire change (which cost $10 for each tire) takes*
    |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// about 15 minutes."* |'
  prefs: []
  type: TYPE_TB
- en: Successful outcome! The dollar sign neutralizes the special meaning of $1, so
    the regex engine recognizes it as literal characters.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this recipe, the regex has a single capturing group. But, what happens if
    you try to refer to a group that doesn’t actually exist? If you type $2 in the
    replacement text, it won’t correspond to anything. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[part_2/neutralizing_replacement/nrp_ex3.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/neutralizing_replacement/nrp_ex3.js)'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **const** str = *"In our shops, tire change takes about 15 minutes."*;
    |'
  prefs: []
  type: TYPE_TB
- en: '|   | **const** re = */**\b(**tire change**)\b**/*; |'
  prefs: []
  type: TYPE_TB
- en: '|   |  |'
  prefs: []
  type: TYPE_TB
- en: '|   | str.replace(re, *"$1 (which cost $20 for each tire)"*); |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// → "In our shops, tire change (which cost $20 for each tire) takes*
    |'
  prefs: []
  type: TYPE_TB
- en: '|   | *// about 15 minutes."* |'
  prefs: []
  type: TYPE_TB
- en: 'If you use a two-digit reference in the replacement string, the outcome will
    depend on the number of capturing groups in the pattern. If you have ten capturing
    groups and use $10, it refers to the tenth capturing group. If you have fewer
    capturing groups, $10 only uses the first digit that refers to the first capturing
    group and uses 0 as a literal replacement string. This is what happened in the
    first example in this recipe: “$1” in “cost $10” referenced “tire change” and
    “0” was treated as a literal character.'
  prefs: []
  type: TYPE_NORMAL
- en: The takeaway from this recipe is to use $ to neutralize the special meaning
    of a replacement pattern.
  prefs: []
  type: TYPE_NORMAL
