- en: Password Cracker
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: 'You’re a hacker (an ethical one, of course) who’s trying to figure out someone’s
    password. You decide on a brute-force approach and write some code that produces
    every possible string of a given length. Here’s the code you whipped up:'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `function` everyPassword(length) { |'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `let` string = `''a''`.repeat(length); |'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `console.log(string);` |'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `while` (string !== `''z''`.repeat(length)) { |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `let` stringToBase36 = parseInt(string, 36); |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `stringToBase36 += 1;` |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `string = (stringToBase36.toString(36)).replace(/0/g, ''a'');` |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `console.log(string);` |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `}` |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `}` |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
- en: There’s a bit of complicated magic in this code, which thankfully, we don’t
    need to understand at this time. That’s because we’re not going to focus on how
    this code works, but rather what this code does.
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: When we call the `everyPassword` function, we pass in an integer, which becomes
    the variable length.
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'If length is `3`，the code will return all possible strings within the range
    of `"aaa"` and `"zzz"`。 Running this code will print the following:'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `aaa` |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `aab` |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `aac` |'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `aad` |'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `aae` |'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ... |'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `zzx` |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `zzy` |'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `zzz` |'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_TB
- en: 'If length is `4`，your code will print all possible strings of length `4`:'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| ​  | `aaaa` |'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `aaab` |'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `aaac` |'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `aaad` |'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `aaae` |'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | ... |'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  |  |'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `zzzx` |'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `zzzy` |'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| ​  | `zzzz` |'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_TB
- en: If you try running this code even for a mere length of `5`，you may be waiting
    some time for it to finish. This is a slow algorithm! But how do we express it
    in terms of Big O?
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Let’s break it down.
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: If we simply print each letter from the alphabet once, it will take `26` steps.
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: When we print every two-character combination, we end up with `26` characters
    multiplied by `26` characters.
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: When printing every three-character combination, we end up with `26 * 26 * 26`
    combinations.
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Do you see the pattern?
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '| Length | Combinations |'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 1 | `26` |'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 2 | `26²` |'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 3 | `26³` |'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_TB
- en: '| 4 | `26⁴` |'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_TB
- en: If we look at this in terms of `N`，it emerges that if `N` is the length of each
    string, the number of combinations is `26^N`。
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Therefore, in Big O notation, we express this as `O(26^N)`。 This is an utterly
    glacial algorithm! The truth is that even an algorithm that is a “mere” `O(2^N)`
    is incredibly slow. Let’s see how it looks on a graph compared to some of the
    other algorithms we’ve seen so far:'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '![images/big_o_in_everyday_code/different_big_os.png](images/big_o_in_everyday_code/different_big_os.png)'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_IMG
- en: As you can see, `O(2^N)` gets even slower than `O(N³)` at a point.
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In a certain sense, `O(2^N)` is the opposite of `O(log N)`。 With an algorithm
    of `O(log N)` (like binary search), each time the data is doubled, the algorithm
    takes one additional step. With an algorithm of `O(2^N)`，each time we add one
    element of data, the algorithm doubles in steps!
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In our password cracker, each time we increase `N` by one, the number of steps
    get multiplied by `26`. This takes an incredible amount of time, which is why
    brute force is such an inefficient way to crack a password.
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
