- en: '`Breadth-First Search`'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`广度优先搜索`'
- en: '`Breadth-first search`, often abbreviated `BFS`, is another way to search a
    graph. Unlike depth-first search, `breadth-first search` does not use recursion.
    Instead, the algorithm revolves around our old friend, the queue. As you’ll recall,
    the queue is a `FIFO` data structure, and whatever goes in first, comes out first.'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`广度优先搜索`，通常缩写为`BFS`，是另一种搜索图的方法。与深度优先搜索不同，`广度优先搜索`不使用递归。相反，算法围绕我们的老朋友——队列。正如你所记得的，队列是一种`FIFO`数据结构，先入先出。'
- en: Let’s look at the algorithm for breadth-first search. As with our walk-through
    of depth-first search, we’re going to focus on graph traversal using breadth-first
    search; that is, we’re going to visit each vertex from our example social network.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们看看广度优先搜索的算法。与我们的深度优先搜索的演示一样，我们将专注于使用广度优先搜索进行图的遍历；也就是说，我们将访问我们示例社交网络中的每个顶点。
- en: 'Here’s the `BFS` traversal algorithm:'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是`BFS`遍历算法：
- en: Start at any vertex within the graph. We’ll call this the starting vertex.
  id: totrans-4
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 从图中的任何顶点开始。我们将其称为起始顶点。
- en: Add the starting vertex to the hash table to mark it as having been visited.
  id: totrans-5
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 将起始顶点添加到哈希表中，以标记其已被访问。
- en: Add the starting vertex to a queue.
  id: totrans-6
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 将起始顶点添加到队列中。
- en: Start a loop that runs while the queue isn’t empty.
  id: totrans-7
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 开始一个循环，只要队列不为空就运行。
- en: Within this loop, remove the first vertex from the queue. We’ll call this the
    current vertex.
  id: totrans-8
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个循环中，从队列中移除第一个顶点。我们将其称为当前顶点。
- en: Iterate over all the adjacent vertices of the current vertex.
  id: totrans-9
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 遍历当前顶点的所有邻接顶点。
- en: If the adjacent vertex was already visited, ignore it.
  id: totrans-10
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 如果邻接顶点已经被访问，则忽略它。
- en: If the adjacent vertex has not yet been visited, mark it as visited by adding
    it to a hash table, and add it to the queue.
  id: totrans-11
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 如果邻接顶点尚未被访问，通过将其添加到哈希表中来标记为已访问，并将其添加到队列中。
- en: Repeat this loop (starting from Step 4) until the queue is empty.
  id: totrans-12
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 重复此循环（从第四步开始），直到队列为空。
- en: '`Breadth-First Search Walk-Through`'
  id: totrans-13
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`广度优先搜索演示`'
- en: This isn’t as complex as it seems. Let’s walk through the traversal step by
    step.
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这并没有看起来那么复杂。让我们逐步走过遍历过程。
- en: 'To set things up, let’s work with `Alice` as our starting vertex. We’ll mark
    her as visited and add her to the queue:'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为了设置，让我们将`Alice`作为我们的起始顶点。我们将她标记为已访问并添加到队列中：
- en: '![images/graphs/visit_and_queue_alice.png](images/graphs/visit_and_queue_alice.png)'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/graphs/visit_and_queue_alice.png](images/graphs/visit_and_queue_alice.png)'
- en: We now begin the core algorithm.
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们现在开始核心算法。
- en: 'Step 1: We remove the first vertex from the queue and make it the current vertex.
    This would be `Alice`, as she’s currently the only item in the queue. So at this
    point, the queue is empty.'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第一步：我们从队列中移除第一个顶点并将其设为当前顶点。这将是`Alice`，因为她此时是队列中唯一的项。所以此时队列为空。
- en: Since `Alice` is the current vertex, we proceed to iterate over `Alice`’s adjacent
    vertices.
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 由于`Alice`是当前顶点，我们继续遍历`Alice`的邻接顶点。
- en: 'Step 2: We’ll start with `Bob`. We’ll mark him as visited and add him to the
    queue:'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第二步：我们将从`Bob`开始。我们将他标记为已访问并添加到队列中：
- en: '![images/graphs/visit_and_queue_bob.png](images/graphs/visit_and_queue_bob.png)'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/graphs/visit_and_queue_bob.png](images/graphs/visit_and_queue_bob.png)'
- en: Note that `Alice` is still the current vertex, as indicated by the lines around
    her. However, we’ve still marked `Bob` as visited and added him to the queue.
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 请注意，`Alice`仍然是当前顶点，如周围的线所示。然而，我们仍然将`Bob`标记为已访问并将他添加到队列中。
- en: 'Step 3: We move on to `Alice`’s other adjacent vertices. Let’s choose `Candy`;
    we’ll mark her as visited and add her to the queue:'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第三步：我们继续处理`Alice`的其他邻接顶点。让我们选择`Candy`；我们将她标记为已访问并添加到队列中：
- en: '![images/graphs/visit_and_queue_candy.png](images/graphs/visit_and_queue_candy.png)'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/graphs/visit_and_queue_candy.png](images/graphs/visit_and_queue_candy.png)'
- en: 'Step 4: We then mark `Derek` as visited and add him to the queue:'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第四步：然后我们将`Derek`标记为已访问并添加到队列中：
- en: '![images/graphs/visit_and_queue_derek.png](images/graphs/visit_and_queue_derek.png)'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/graphs/visit_and_queue_derek.png](images/graphs/visit_and_queue_derek.png)'
- en: 'Step 5: We do the same with `Elaine`:'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第五步：我们对`Elaine`也做同样的处理：
- en: '![images/graphs/visit_and_queue_elaine.png](images/graphs/visit_and_queue_elaine.png)'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/graphs/visit_and_queue_elaine.png](images/graphs/visit_and_queue_elaine.png)'
- en: 'Step 6: Now that we’ve iterated through all the neighbors of the current vertex
    (`Alice`), we remove the first item from the queue and make it the current vertex.
    In our case, `Bob` is at the front of the queue, so we dequeue him and make him
    the current vertex, as shown in the [graph](#fig.ch18.dequeue_bob).'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第6步：现在我们已经遍历了当前顶点（`Alice`）的所有邻居，我们从队列中删除第一个项目并使其成为当前顶点。在我们的案例中，`Bob`在队列的前面，所以我们将他出队并使他成为当前顶点，如[图](#fig.ch18.dequeue_bob)所示。
- en: '![`images/graphs/dequeue_bob.png`](images/graphs/dequeue_bob.png)'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/graphs/dequeue_bob.png`](images/graphs/dequeue_bob.png)'
- en: Since `Bob` is the current vertex, we iterate over all of his adjacent vertices.
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 由于`Bob`是当前顶点，我们将遍历他的所有相邻顶点。
- en: 'Step 7: Alice has already been visited, so we ignore her.'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第7步：Alice已经被访问过，所以我们忽略她。
- en: 'Step 8: `Fred` has not yet been visited, so we mark him as visited and add
    him to the queue:'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第8步：`Fred`尚未被访问，因此我们将他标记为已访问并将他添加到队列中：
- en: '![`images/graphs/visit_and_queue_fred.png`](images/graphs/visit_and_queue_fred.png)'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/graphs/visit_and_queue_fred.png`](images/graphs/visit_and_queue_fred.png)'
- en: 'Step 9: `Bob` has no more adjacent vertices. This means we pull the first item
    out of the queue and make it the current vertex. This would be `Candy`:'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第9步：`Bob`没有更多的相邻顶点。这意味着我们将队列中的第一个项目取出，并使其成为当前顶点。这将是`Candy`：
- en: '![`images/graphs/dequeue_candy.png`](images/graphs/dequeue_candy.png)'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/graphs/dequeue_candy.png`](images/graphs/dequeue_candy.png)'
- en: We iterate over `Candy`’s adjacent vertices.
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们遍历`Candy`的相邻顶点。
- en: 'Step 10: `Alice` has already been visited, so we ignore her again.'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第10步：`Alice`已经被访问过，所以我们再次忽略她。
- en: 'Step 11: Helen, on the other hand, has not yet been visited. We mark `Helen`
    as visited and add her to the queue:'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第11步：另一方面，Helen尚未被访问。我们将`Helen`标记为已访问并将她添加到队列中：
- en: '![`images/graphs/visit_and_queue_helen.png`](images/graphs/visit_and_queue_helen.png)'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/graphs/visit_and_queue_helen.png`](images/graphs/visit_and_queue_helen.png)'
- en: 'Step 12: We’re done iterating over `Candy`’s adjacent vertices, so we pull
    the first item from the queue (`Derek`), and make it the current vertex:'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第12步：我们完成了遍历`Candy`的相邻顶点，因此我们从队列中取出第一个项目（`Derek`），并使其成为当前顶点：
- en: '![`images/graphs/dequeue_derek.png`](images/graphs/dequeue_derek.png)'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/graphs/dequeue_derek.png`](images/graphs/dequeue_derek.png)'
- en: '`Derek` has three adjacent vertices, so we iterate over them.'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Derek`有三个相邻顶点，所以我们遍历它们。'
- en: 'Step 13: `Alice` has already been visited, so we ignore her.'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第13步：`Alice`已经被访问过，所以我们忽略她。
- en: 'Step 14: The same goes for `Elaine`.'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第14步：`Elaine`也是如此。
- en: 'Step 15: This leaves `Gina`, so we mark her as visited and add her to the queue:'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第15步：这留下了`Gina`，所以我们将她标记为已访问，并将她添加到队列中：
- en: '![`images/graphs/visit_and_queue_gina.png`](images/graphs/visit_and_queue_gina.png)'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/graphs/visit_and_queue_gina.png`](images/graphs/visit_and_queue_gina.png)'
- en: 'Step 16: We’ve visited all of Derek’s immediate friends, so we take Elaine
    off the queue and designate her as the current vertex:'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第16步：我们已经访问了Derek的所有直接朋友，因此我们将Elaine从队列中取出并指定她为当前顶点：
- en: '![`images/graphs/dequeue_elaine.png`](images/graphs/dequeue_elaine.png)'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/graphs/dequeue_elaine.png`](images/graphs/dequeue_elaine.png)'
- en: 'Step 17: We iterate over `Elaine`’s adjacent vertices, starting with `Alice`.
    She’s already been visited, though.'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第17步：我们遍历`Elaine`的相邻顶点，从`Alice`开始。不过，她已经被访问过了。
- en: 'Step 18: We’ve already visited `Derek` too.'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第18步：我们也已经访问过`Derek`。
- en: 'Step 19: We pull the next person off the queue (`Fred`) and turn him into the
    current vertex:'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第19步：我们从队列中取出下一个人（`Fred`）并将他转变为当前顶点：
- en: '![`images/graphs/dequeue_fred.png`](images/graphs/dequeue_fred.png)'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/graphs/dequeue_fred.png`](images/graphs/dequeue_fred.png)'
- en: 'Step 20: We iterate over `Fred`’s neighbors. `Bob` has already been visited.'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第20步：我们遍历`Fred`的邻居。`Bob`已经被访问过。
- en: 'Step 21: `Helen` also has already been visited.'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第21步：`Helen`也已经被访问过。
- en: 'Step 22: Since `Helen` is at the front of the queue, we dequeue `Helen` and
    make her the current vertex:'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第22步：由于`Helen`在队列的前面，我们将`Helen`出队并使她成为当前顶点：
- en: '![`images/graphs/dequeue_helen.png`](images/graphs/dequeue_helen.png)'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/graphs/dequeue_helen.png`](images/graphs/dequeue_helen.png)'
- en: 'Step 23: `Helen` has two adjacent vertices. We’ve already visited `Fred`.'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第23步：`Helen`有两个相邻顶点。我们已经访问过`Fred`。
- en: 'Step 24: We’ve also already visited `Candy`.'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第24步：我们也已经访问过`Candy`。
- en: 'Step 25: We remove `Gina` from the queue and make her the current vertex:'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第25步：我们从队列中移除`Gina`并使她成为当前顶点：
- en: '![`images/graphs/dequeue_gina.png`](images/graphs/dequeue_gina.png)'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/graphs/dequeue_gina.png`](images/graphs/dequeue_gina.png)'
- en: 'Step 26: We iterate over `Gina`’s neighbors. `Derek` has already been visited.'
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第26步：我们遍历`Gina`的邻居。`Derek`已经被访问过。
- en: 'Step 27: `Gina` has one unvisited adjacent friend, `Irena`, so we visit `Irena`
    and add her to the queue:'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第27步：`Gina` 有一个未访问的相邻朋友 `Irena`，因此我们访问 `Irena` 并将她添加到队列中：
- en: '![`images/graphs/visit_and_queue_irena.png`](images/graphs/visit_and_queue_irena.png)'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/graphs/visit_and_queue_irena.png`](images/graphs/visit_and_queue_irena.png)'
- en: We’re now done iterating over Gina’s neighbors.
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们现在已经完成对 Gina 邻居的遍历。
- en: 'Step 28: We remove the first (and only) person from the queue, which is `Irena`.
    She becomes the current vertex:'
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第28步：我们从队列中移除第一个（也是唯一的）元素 `Irena`。她成为当前顶点：
- en: '![`images/graphs/dequeue_irena.png`](images/graphs/dequeue_irena.png)'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/graphs/dequeue_irena.png`](images/graphs/dequeue_irena.png)'
- en: 'Step 29: Irena has just one adjacent vertex, Gina, but Gina has already been
    visited.'
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第29步：Irena 只有一个相邻顶点 Gina，但 Gina 已经被访问过了。
- en: We should now remove the next item from the queue, but the queue is empty! This
    means our traversal is complete.
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们现在应该移除队列中的下一个元素，但队列是空的！这意味着我们的遍历已完成。
- en: 'Code Implementation: Breadth-First Search'
  id: totrans-70
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 代码实现：广度优先搜索
- en: 'Here’s our code for breadth-first traversal:'
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是我们用于广度优先遍历的代码：
- en: '| ​  | `import` Queue `from` `''./queue_implementation.js''`; |'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `import` Queue `from` `''./queue_implementation.js''`; |'
- en: '| ​  |  |'
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `function` bfsTraverse(startingVertex) { |'
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` bfsTraverse(startingVertex) { |'
- en: '| ​  | `const` queue = `new` Queue(); |'
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` queue = `new` Queue(); |'
- en: '| ​  |  |'
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `const` visitedVertices = {}; |'
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` visitedVertices = {}; |'
- en: '| ​  | visitedVertices[startingVertex.value] = `true`; |'
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | visitedVertices[startingVertex.value] = `true`; |'
- en: '| ​  | queue.enqueue(startingVertex); |'
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | queue.enqueue(startingVertex); |'
- en: '| ​  |  |'
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `while` (queue.read()) { |'
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while` (queue.read()) { |'
- en: '| ​  | `const` currentVertex = queue.dequeue(); |'
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` currentVertex = queue.dequeue(); |'
- en: '| ​  | console.log(currentVertex.value); |'
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | console.log(currentVertex.value); |'
- en: '| ​  |  |'
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `for` (`const` adjacentVertex `of` currentVertex.adjacentVertices) {
    |'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`const` adjacentVertex `of` currentVertex.adjacentVertices) {
    |'
- en: '| ​  | `if` (!visitedVertices[adjacentVertex.value]) { |'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (!visitedVertices[adjacentVertex.value]) { |'
- en: '| ​  | visitedVertices[adjacentVertex.value] = `true`; |'
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | visitedVertices[adjacentVertex.value] = `true`; |'
- en: '| ​  | queue.enqueue(adjacentVertex); |'
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | queue.enqueue(adjacentVertex); |'
- en: '| ​  | } |'
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: We begin by importing a Queue module. This is simply the same queue implementation
    we created back in [`Queue Implementation`](f_0092.xhtml#queue.implementation).
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们首先导入一个 Queue 模块。这就是我们在 [`队列实现`](f_0092.xhtml#queue.implementation) 中创建的相同队列实现。
- en: The `bfsTraverse` method accepts a startingVertex, which is the vertex we begin
    our search from.
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`bfsTraverse` 方法接受一个 startingVertex，这是我们搜索的起始顶点。'
- en: 'We start by creating the queue that fuels our algorithm:'
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们首先创建一个用于支持算法的队列：
- en: '| ​  | `const` queue = `new` Queue(); |'
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` queue = `new` Queue(); |'
- en: 'We also create the visitedVertices hash table in which we keep track of which
    vertices we’ve already visited:'
  id: totrans-97
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们还创建了 visitedVertices 哈希表，用于跟踪我们已经访问过的顶点：
- en: '| ​  | `const` visitedVertices = {}; |'
  id: totrans-98
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` visitedVertices = {}; |'
- en: 'We then mark the startingVertex as visited and add it to the queue:'
  id: totrans-99
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然后我们将 startingVertex 标记为已访问并将其添加到队列中：
- en: '| ​  | visitedVertices[startingVertex.value] = `true`; |'
  id: totrans-100
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | visitedVertices[startingVertex.value] = `true`; |'
- en: '| ​  | queue.enqueue(startingVertex); |'
  id: totrans-101
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | queue.enqueue(startingVertex); |'
- en: 'We begin a loop that runs as long as the queue isn’t empty:'
  id: totrans-102
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们开始一个循环，只要队列不为空就继续：
- en: '| ​  | `while` (queue.read()) { |'
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while` (queue.read()) { |'
- en: 'We remove the first item from the queue and make it the current vertex:'
  id: totrans-104
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们从队列中移除第一个元素，并将其设为当前顶点：
- en: '| ​  | `const` currentVertex = queue.dequeue(); |'
  id: totrans-105
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` currentVertex = queue.dequeue(); |'
- en: 'Next, we print the vertex’s value just to see in our console that our traversal
    is working correctly:'
  id: totrans-106
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 接下来，我们打印顶点的值，以便在控制台中查看我们的遍历是否正常工作：
- en: '| ​  | console.log(currentVertex.value); |'
  id: totrans-107
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | console.log(currentVertex.value); |'
- en: 'We then iterate over all the adjacent vertices of our current vertex:'
  id: totrans-108
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然后我们遍历当前顶点的所有相邻顶点：
- en: '| ​  | `for` (`const` adjacentVertex `of` currentVertex.adjacentVertices) {
    |'
  id: totrans-109
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`const` adjacentVertex `of` currentVertex.adjacentVertices) {
    |'
- en: 'For each adjacent vertex that hasn’t been visited, we add it to the hash table
    to mark it as visited and then add it to the queue:'
  id: totrans-110
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 对于每个尚未访问的相邻顶点，我们将其添加到哈希表中以标记为已访问，然后将其添加到队列中：
- en: '| ​  | `if` (!visitedVertices[adjacentVertex.value]) { |'
  id: totrans-111
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (!visitedVertices[adjacentVertex.value]) { |'
- en: '| ​  | visitedVertices[adjacentVertex.value] = `true`; |'
  id: totrans-112
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | visitedVertices[adjacentVertex.value] = `true`; |'
- en: '| ​  | queue.enqueue(adjacentVertex); |'
  id: totrans-113
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | queue.enqueue(adjacentVertex); |'
- en: '| ​  | } |'
  id: totrans-114
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: And that’s the gist of it.
  id: totrans-115
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这就是其要点。
- en: DFS vs. BFS
  id: totrans-116
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: DFS 与 BFS
- en: If you look carefully at the order of breadth-first search, you’ll notice that
    we first traverse all of Alice’s immediate connections. We then spiral outward
    and gradually move farther and farther from Alice. With depth-first search, though,
    we immediately move as far away from Alice as we possibly can until we’re forced
    to return to her.
  id: totrans-117
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你仔细观察广度优先搜索的顺序，你会注意到我们首先遍历了Alice的所有直接连接。然后我们螺旋向外，逐渐远离Alice。然而在深度优先搜索中，我们会立即尽可能远离Alice，直到不得不返回她那里。
- en: 'So we have two methods of searching a graph: `depth-first` and `breadth-first`。Is
    one approach better than the other?'
  id: totrans-118
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 所以我们有两种搜索图的方法：`深度优先`和`广度优先`。哪种方法更好呢？
- en: As you’ve probably caught on by now, it depends on your situation. In some scenarios,
    `depth-first` may be faster, while in others, `breadth-first` might be the better
    choice.
  id: totrans-119
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 正如你现在可能已经意识到的，这取决于你的具体情况。在某些场景中，`深度优先`可能更快，而在其他场景中，`广度优先`可能是更好的选择。
- en: Usually, one of the main factors in determining which algorithm to use is the
    nature of the graph you’re searching and what you’re searching for. The key here,
    as mentioned earlier, is that `breadth-first search` traverses all the vertices
    closest to the starting vertex before moving farther away. `Depth-first search`，on
    the other hand，immediately moves as far away from the starting vertex as it can.
    Only when the search hits a dead end does it return back to the starting vertex.
  id: totrans-120
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 通常，决定使用哪种算法的主要因素之一是你所搜索的图的性质以及你在寻找什么。这里的关键是，正如前面提到的，`广度优先搜索`会在移动到更远处之前遍历所有离起始顶点最近的顶点。而`深度优先搜索`则会立即尽可能远离起始顶点，只有在搜索到达死胡同时才会返回起始顶点。
- en: So let’s say we want to find all the direct connections of a person in a social
    network. For example, we may want to find all of `Alice`的实际朋友在我们之前的示例图中。我们不关心她朋友的朋友是谁——我们只想要她直接连接的列表。
  id: totrans-121
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 所以假设我们想找到一个社交网络中一个人的所有直接连接。例如，我们可能想在之前的示例图中找到所有`Alice`的实际朋友。我们不关心她朋友的朋友是谁——我们只想要她直接连接的列表。
- en: If you look at the `breadth-first approach`，you’ll see that we immediately find
    all of `Alice`的直接朋友（`Bob`，`Candy`，`Derek`，和`Elaine`）before moving on to her “second-degree”
    connections.
  id: totrans-122
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你查看`广度优先搜索`，你会发现我们首先找到了`Alice`的所有直接朋友（`Bob`，`Candy`，`Derek`，和`Elaine`），然后才移动到她的“二级”关系。
- en: However, when we traversed the graph with the `depth-first algorithm`，we ended
    up touching `Fred` and `Helen`（两个不是`Alice`朋友的人）before finding `Alice`的其他朋友。在一个更大的图中，我们可能会浪费更多的时间遍历许多不必要的顶点。
  id: totrans-123
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，当我们使用`深度优先算法`遍历图时，我们最终会接触到`Fred`和`Helen`（两个不是`Alice`朋友的人），才找到`Alice`的其他朋友。在一个更大的图中，我们可能会浪费更多的时间遍历许多不必要的顶点。
- en: 'But let’s take a different scenario. Say our graph represents a family tree,
    which may look as follows:'
  id: totrans-124
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 但是让我们考虑另一种情况。假设我们的图表示一个家谱，可能如下所示：
- en: '![`images/graphs/family_tree.png`](images/graphs/family_tree.png)'
  id: totrans-125
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/graphs/family_tree.png`](images/graphs/family_tree.png)'
- en: This family tree shows all the descendants of `Great-Grandma Ruby`，the proud
    matriarch of a wonderful family. Let’s say we know that `Ruth` is a great-grandchild
    of `Ruby`，and we want to find `Ruth` in the graph.
  id: totrans-126
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这个家谱显示了所有`伟大祖母Ruby`的后代，她是一位了不起的家庭家长。假设我们知道`Ruth`是`Ruby`的一个曾孙女，我们想在图中找到`Ruth`。
- en: Now, here’s the thing. If we used `breadth-first search`，we’d end up traversing
    all of Ruby’s children and grandchildren before reaching even the first great-grandchild.
  id: totrans-127
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，有一件事。如果我们使用`广度优先搜索`，我们最终会遍历所有的Ruby的孩子和孙子，才会到达第一个曾孙女。
- en: However, if we use `depth-first search`，we’d move down the graph right away，reaching
    the first great-grandchild in just a few steps. While it’s possible that we’d
    have to traverse the entire graph before finding `Ruth`，we at least have a shot
    at finding her quickly. With `breadth-first search`，though，我们没有选择，必须遍历所有非大孙子才能开始检查大孙子。
  id: totrans-128
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，如果我们使用`深度优先搜索`，我们会立即向下移动图，仅需几步就能到达第一个曾孙女。虽然可能需要遍历整个图才能找到`Ruth`，但我们至少有机会快速找到她。而使用`广度优先搜索`，我们没有选择，必须遍历所有非大孙子才能开始检查大孙子。
- en: The question to always ask, then, is do we want to stay close to the starting
    vertex during our search, or do we specifically want to move far away. `Breadth-first
    search` is good for staying close, and `depth-first search` is ideal for moving
    far away quickly.
  id: totrans-129
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因此，始终要问的问题是，我们在搜索过程中是否希望靠近起始顶点，还是特别想要远离。`广度优先搜索`适合保持接近，而`深度优先搜索`则非常适合快速远离。
