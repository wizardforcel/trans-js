- en: © The Author(s), under exclusive license to Springer Fachmedien Wiesbaden GmbH,
    part of Springer Nature 2024J. L. ZuckarelliLearn coding with Python and JavaScript
    [https://doi.org/10.1007/978-3-658-42912-6_7](https://doi.org/10.1007/978-3-658-42912-6_7)
  prefs: []
  type: TYPE_NORMAL
- en: 7. Nine Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Joachim L. Zuckarelli^([1](#Aff2)  )(1)München, GermanyOverview
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll get an overview of the 9 questions that we’ll use to
    learn the basic concepts of programming in this part of the book. Based on these
    basic concepts, we will then work our way through the Python and JavaScript programming
    languages in the following two parts of the book. But understanding these basic
    concepts is not only useful for learning Python and JavaScript, but for any programming
    language.
  prefs: []
  type: TYPE_NORMAL
- en: This second part of the book is devoted to the *basic concepts* of programming.
    The basic concepts are implemented in virtually all programming languages in one
    way or another. Once you understand these concepts, you will discover many similarities
    between different programming languages. These similarities are what make learning
    new programming languages much easier.
  prefs: []
  type: TYPE_NORMAL
- en: We will summarize the basic concepts of programming under *9 big questions*.
    If you are learning a new programming language, you can use these questions to
    guide your learning process. Of course, you can work on the questions in a different
    order than the one proposed here. And, at some points, when you are dealing with
    one question, you have to “anticipate” another question. For example, if you are
    dealing with the storing of data in your language, you must also be able to—at
    least in a rudimentary way—output data (which is the subject of another question)
    in order to try something out practically. But even though the questions are not
    (and cannot be) entirely self-contained, they form a useful framework and a roadmap
    to understanding the new language, from the ground up.
  prefs: []
  type: TYPE_NORMAL
- en: Even if you do not follow the 9 questions explicitly you must be able to answer
    the 9 questions if you want to understand the basics of a programming language
    that is new to you.
  prefs: []
  type: TYPE_NORMAL
- en: Now in this part, we will first learn the basic concepts of programming using
    the 9 questions. At the end of each chapter, you will find a section called *Your
    Roadmap to Learning a New Programming Language*, which summarizes the key points
    of each chapter that you should familiarize yourself with in order to learn a
    new programming language.
  prefs: []
  type: TYPE_NORMAL
- en: In the next two parts, we will apply the basic concepts to learn the fundamentals
    of Python and JavaScript. These two parts of the book are also logically structured
    based on the 9 questions. Therefore, at any time while you are learning Python
    and JavaScript, you can flip back to the corresponding Basic Concepts chapter
    to refresh one or two basic considerations.
  prefs: []
  type: TYPE_NORMAL
- en: The 9 questions are as follows.
  prefs: []
  type: TYPE_NORMAL
- en: What Do I Need for Programming?
  prefs: []
  type: TYPE_NORMAL
- en: Here we will first deal with the *tools* you need to write and run programs
    in the programming language. We will also look at where you can get more information
    and help if you get stuck.
  prefs: []
  type: TYPE_NORMAL
- en: What Do I Have to Do to Get a Program Running?
  prefs: []
  type: TYPE_NORMAL
- en: Next, we develop a very first, very simple program. In doing so, we already
    learn certain *basic rules of program structure* and the *grammar of* the programming
    language and understand how programs are *written* and *executed.* To be able
    to do this is a basic requirement for all further learning steps, during which
    we also want to work very practically and write executable programs.
  prefs: []
  type: TYPE_NORMAL
- en: How Do I Make Sure That I (And Others) Still Understand My Program Later?
  prefs: []
  type: TYPE_NORMAL
- en: Your programs must at least be understandable to you, but sometimes also for
    others. It helps to adhere to certain *conventions* as to how program code should
    look, and to *comment* your program, that is, to provide explanations. If your
    program code is also to be used by others, you must *document* how exactly this
    can be done.
  prefs: []
  type: TYPE_NORMAL
- en: How Do I Store Data to Work With?
  prefs: []
  type: TYPE_NORMAL
- en: All software works with data. Therefore, we will next look at how data is stored
    and processed in programs. In doing so, you will learn about the central concept
    of *variables* and see how *objects* can be used to represent things in an elegant
    way.
  prefs: []
  type: TYPE_NORMAL
- en: How Do I Input and Output Data?
  prefs: []
  type: TYPE_NORMAL
- en: The data that is held in the program for processing must come from somewhere.
    In addition, the processing results are to be communicated “to the outside” somehow.
    These are the two issues in this question. *Input* and *output* of data in all
    its forms, be it by the user via the program’s interface, or through files or
    databases, is a core requirement that all programs must serve in one way or another.
  prefs: []
  type: TYPE_NORMAL
- en: How Do I Work with Program Functions to Work with Data and Trigger Actions?
  prefs: []
  type: TYPE_NORMAL
- en: In the context of this question, we deal with the actual processing of the data*.*
    This is done in most programming languages by *functions.* The input and output
    of data (previous question) also makes use of such functions. We can develop functions
    ourselves, or we can use functions that the programming language, or the community
    of developers, provides for us. Being able to work with functions safely is a
    key to success when working with any programming language.
  prefs: []
  type: TYPE_NORMAL
- en: How Do I Control the Program Flow and Make the Program React to User Actions
    and Other Events?
  prefs: []
  type: TYPE_NORMAL
- en: Our programs should not be rigid, but should react to their environment, for
    example to the wishes of the user. In the context of this question, we will deal
    with how we can let our programs react to external influences and events and branch
    into alternative sections depending on events in the program flow.
  prefs: []
  type: TYPE_NORMAL
- en: How Do I Repeat Program Instructions Efficiently?
  prefs: []
  type: TYPE_NORMAL
- en: Often, parts of a program are repetitions of the same pattern. Repetitions can
    be realized elegantly and efficiently in most programming languages with *loops*.
  prefs: []
  type: TYPE_NORMAL
- en: How Do I Search for and Fix Errors in a Structured Way?
  prefs: []
  type: TYPE_NORMAL
- en: Writing a program and making it perfect on the first try is an illusion—even
    for professionals. Unfortunately, errors are an inevitable part of everyday programming.
    Therefore, to conclude our tour through the basic concepts of programming, we
    will deal with how we can systematically find, diagnose, and eliminate errors,
    and which tools can help us to do so.
  prefs: []
  type: TYPE_NORMAL
