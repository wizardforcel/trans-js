- en: © The Author(s), under exclusive license to Springer Fachmedien Wiesbaden GmbH,
    part of Springer Nature 2024J. L. ZuckarelliLearn coding with Python and JavaScript
    [https://doi.org/10.1007/978-3-658-42912-6_8](https://doi.org/10.1007/978-3-658-42912-6_8)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © 作者，专有许可给 Springer Fachmedien Wiesbaden GmbH，属于 Springer Nature 2024 J. L.
    Zuckarelli 学习 Python 和 JavaScript 编程 [https://doi.org/10.1007/978-3-658-42912-6_8](https://doi.org/10.1007/978-3-658-42912-6_8)
- en: 8. What Do I Need for Programming?
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8. 我需要什么才能开始编程？
- en: Joachim L. Zuckarelli^([1](#Aff2)  )(1)München, GermanyOverview
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Joachim L. Zuckarelli^([1](#Aff2)  )(1)德国慕尼黑概述
- en: Before we can start writing programs, we first need to get the right software
    tools ready. These will include a compiler and/or interpreter, which translates
    the program source code you have written into machine language and thus makes
    it executable for the computer. This should also include code editors, with which
    the source code of the program is written in the first place. Integrated development
    environments combine these and other tools under the umbrella of a common user
    interface.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写程序之前，我们首先需要准备好正确的软件工具。这些工具包括编译器和/或解释器，它们将你编写的程序源代码翻译成机器语言，从而使计算机能够执行该程序。这还应该包括代码编辑器，用于编写程序的源代码。集成开发环境将这些工具和其他工具整合在一个共同的用户界面下。
- en: In addition to such “technical” tools, you will also need help with your programming
    from time to time. Therefore, in this chapter we will also look at how and where
    you can find information and support related to your programming language.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些“技术”工具，你有时还需要编程方面的帮助。因此，在本章中，我们还将讨论如何以及在哪里找到与你的编程语言相关的信息和支持。
- en: 'In this chapter you will learn the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下内容：
- en: How to get a compiler/interpreter for your programming language
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何为你的编程语言获取编译器/解释器
- en: What functions code editors offer, and how they differ from normal text editors
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码编辑器提供的功能，以及它们与普通文本编辑器的区别
- en: What features Integrated Development Environments (IDEs) offer, and how they
    differ from pure code editors
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成开发环境（IDEs）提供的功能，以及它们与纯代码编辑器的区别
- en: What popular code editors and Integrated Development Environments are available
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 市面上有哪些流行的代码编辑器和集成开发环境
- en: How and where to find information and support for your programming language
    on the internet
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在互联网上找到与你的编程语言相关的信息和支持
- en: How you can use artificial intelligence (AI) tools like ChatGPT for programming.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用像 ChatGPT 这样的人工智能（AI）工具进行编程。
- en: 8.1 Tools
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.1 工具
- en: How many times do I have to tell you? The right tool for the right job!
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我告诉你多少次了？做对事，选对工具！
- en: ''
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: (Montgomery “Scotty” Scott in Star Trek VI—The Undiscovered Country)
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: （《星际迷航 VI：未来的国家》中的 Montgomery “Scotty” Scott）
- en: 8.1.1 Compiler and Interpreter
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8.1.1 编译器和解释器
- en: From the previous chapter, you already know that—depending on the programming
    language—you need an interpreter or compiler to translate your programs into executable
    machine code that the computer can understand, or to have your program source
    code interpreted and executed at runtime. For many programming languages, compilers
    or interpreters can be downloaded free of charge from the internet. This is especially
    true for languages where further development is done by a de facto non-profit
    organization, as is the case with Python or R, for example. Even for proprietary
    languages that are only made available by a specific commercial company, such
    as the Object Pascal dialect Delphi, developed and distributed by Embarcadero,
    there is often a Community Edition, or a free version with a limited, but for
    the private user, sufficient range of functions. However, the use of the Community
    Edition for the development of commercial applications might be subject to legal
    restrictions. So, if you plan to sell your self-developed software, familiarize
    yourself with the license conditions in advance. For some programming languages,
    no separate interpreter is required at all. If you want to program with JavaScript,
    for example, the web browser takes over the interpretation and execution of your
    program code. If you want to develop server-side applications with PHP, the interpretation
    of the code runs directly on the server, only its results are returned to the
    client and made visible in the browser.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从上一章中，你已经知道——根据编程语言的不同——你需要一个解释器或编译器将你的程序翻译成计算机可以理解的可执行机器代码，或者在运行时对你的程序源代码进行解释和执行。对于许多编程语言，编译器或解释器可以从互联网免费下载。特别是对于那些由事实上的非营利组织进行进一步开发的语言，例如
    Python 或 R，就是这种情况。即使是由特定商业公司提供的专有语言，如由 Embarcadero 开发并发布的 Object Pascal 方言 Delphi，也通常有一个社区版，或是一个免费版，功能有限，但对于个人用户来说已经足够。然而，使用社区版开发商业应用程序可能会受到法律限制。因此，如果你打算出售自开发的软件，提前熟悉许可证条款是非常重要的。对于一些编程语言，根本不需要单独的解释器。例如，如果你想使用
    JavaScript 编程，网页浏览器会负责解释和执行你的程序代码。如果你想使用 PHP 开发服务器端应用程序，代码的解释会直接在服务器上进行，只有其结果会被返回给客户端，并在浏览器中显示。
- en: 8.1.2 Code Editors
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8.1.2 代码编辑器
- en: To be able to use compilers or interpreters meaningfully at all, you must first
    write a program. As we have already seen, a program is ultimately nothing more
    than a text of instructions written in a special language. The emphasis here is
    on text. Because the source code of your program is simply text, you can use any
    program that allows you to edit unformatted text (that is, text without special
    formatting such as bold or italics). If you use Windows as your operating system,
    for example, you can use the very simple Windows Editor. However, it can do little
    more than open or create a file, type in some text, and save the file after editing.
    Although these rudimentary functions are in principle sufficient to write computer
    programs, it is nevertheless advisable to use an editor that has been specially
    developed for programming, or at least comes with functions that make programming
    easier.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够有意义地使用编译器或解释器，首先必须编写一个程序。正如我们已经看到的，程序最终不过是用一种特殊语言编写的指令文本。这里的重点是“文本”。因为你的程序源代码仅仅是文本，所以你可以使用任何允许编辑未格式化文本（即没有特殊格式，如粗体或斜体）的程序。如果你使用
    Windows 操作系统，例如，你可以使用非常简单的 Windows 编辑器。然而，它的功能仅限于打开或创建文件、输入一些文本以及在编辑后保存文件。尽管这些基本功能原则上足以编写计算机程序，但仍然建议使用专门为编程开发的编辑器，或者至少使用一些可以让编程更容易的功能。
- en: One particularly important function is called syntax highlighting. As you will
    recall, syntax is the grammar of the programming language. Syntax highlighting
    is, as you can already guess from the name, a functionality that highlights certain
    parts of the program code to make the code more readable. For example, keywords
    (i.e., special, reserved “words” of the programming language) or the names of
    variables are each marked by different font colors and/or font styles (such as
    bold type). Programming without the visual support of syntax highlighting is of
    course always possible, but considerably less comfortable, because without the
    highlighting it is more difficult to direct the eye to the right places in the
    program code and to quickly grasp certain structures in the code. Since syntax
    varies from programming language to programming language, syntax highlighting
    must work differently in each language. A number of text editors support syntax
    highlighting for a variety of different programming languages, either out of the
    box or through extension packages. Text editors that fall into this category include
    Atom, Notepad++, Sublime Text, Vim, or Visual Studio Code. Many of the editors
    are available free of charge, either completely or at least in a somewhat limited
    version that can work very well, such as the popular Sublime Text.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个特别重要的功能叫做语法高亮。正如你所记得的，语法是编程语言的语法规则。语法高亮，顾名思义，就是一种功能，可以突出显示程序代码的某些部分，使代码更易读。例如，关键字（即编程语言的特殊保留“词”）或变量名会通过不同的字体颜色和/或字体样式（如粗体）来标记。没有语法高亮的编程当然也是可能的，但显然要不那么舒适，因为没有高亮显示，眼睛更难迅速地定位程序代码中的关键部分，也更难快速掌握代码中的某些结构。由于不同编程语言的语法各不相同，语法高亮必须针对每种语言进行不同的处理。许多文本编辑器支持多种编程语言的语法高亮，可能是开箱即用，也可能是通过扩展包来实现。这类文本编辑器包括
    Atom、Notepad++、Sublime Text、Vim 或 Visual Studio Code。许多编辑器都可以免费使用，或者至少有一些功能受限的版本，但依然能够非常好地工作，例如流行的
    Sublime Text。
- en: 'Given the large number of text editors on the market that offer special features
    for working with program code, such a list cannot be exhaustive. So, it’s no surprise
    that there are tons of articles, blog posts, and videos on the internet about
    which is the best code editor. This decision depends on personal preferences,
    especially with regard to the functions offered and certainly also to the visual
    appearance; after all, the eye does the programming. A special aspect of the visual
    appearance are the dark themes: Maybe you have already looked over the shoulder
    of an experienced programmer and seen that he is sitting in front of an editor
    with a dark, almost black background, from which the program code, colored by
    syntax highlighting, clearly stands out. Why is this dark background (“working
    in *dark mode*”) so popular? Maybe it’s because it’s just “cool” to set your editor
    this way, showing that you belong to the secretive community of programmers who
    are constantly hammering code into their keyboards that is almost incomprehensible
    to the average person. This assumption may be partially correct. However, another
    factor is much more important. A dark background is much more pleasant for the
    eyes than a bright, even white background. If you have to concentrate on your
    program code for hours on end, you will quickly come to appreciate the discreet
    and less dazzling background against which the program code shifts into the foreground
    in high contrast. In this book, the screenshots of code editors are always kept
    bright, but only because this makes them easier to reproduce in print. In fact,
    the author usually works with a dark background, which can be set in most editors,
    and is the default in some, such as Sublime.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于市场上有大量的文本编辑器，提供了处理程序代码的特殊功能，因此这样的列表无法穷尽。所以，关于哪个是最佳代码编辑器的文章、博客和视频铺天盖地也就不足为奇了。这个决策取决于个人偏好，尤其是在功能和视觉外观方面；毕竟，眼睛也在编程。视觉外观的一个特殊方面是深色主题：也许你已经从一位经验丰富的程序员那里看到过，他坐在一个深色、几乎是黑色的背景前，在这种背景下，通过语法高亮显示的程序代码显得非常突出。为什么这种深色背景（“在*深色模式*下工作”）如此受欢迎？也许是因为将编辑器设置成这样“酷”，显示出你属于那个神秘的程序员社区，他们不断地在键盘上敲打着对普通人几乎无法理解的代码。这种假设可能部分正确。然而，另一个因素要重要得多。深色背景对眼睛的感觉远比明亮甚至白色背景要舒适。如果你需要连续几个小时专注于程序代码，你会很快发现，深色背景更适合眼睛，且不会刺眼，而程序代码则在高对比度下变得更为突出。在本书中，代码编辑器的屏幕截图始终保持明亮，但这只是因为这样在印刷时更容易重现。事实上，作者通常使用深色背景，这在大多数编辑器中都可以设置，某些编辑器（如
    Sublime）甚至默认使用深色背景。
- en: 8.1.3 Integrated Development Environments (IDEs)
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8.1.3 集成开发环境（IDE）
- en: In addition to code editors, there is another group of tools, the *Integrated
    Development Environments* (IDEs). These tools go beyond pure code editors in their
    functionality.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 除了代码编辑器，还有一类工具——*集成开发环境*（IDE）。这些工具在功能上超越了纯粹的代码编辑器。
- en: 'Important features that most IDEs combine are:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数集成开发环境（IDE）所具备的重要功能包括：
- en: Direct call of the compiler/interpreter
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接调用编译器/解释器
- en: Functions for efficient source code editing that go beyond syntax highlighting
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超越语法高亮的高效源代码编辑功能
- en: Functions for the graphical construction of user interfaces if the language
    supports graphical user interfaces
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果语言支持图形用户界面，则提供图形化用户界面构建的功能
- en: Troubleshooting functions (debugging)
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故障排除功能（调试）
- en: Functions for managing entire projects with multiple files.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理包含多个文件的整个项目的功能。
- en: 'A frequently found function in the area of source code editing is, for example,
    auto-completion: When you type a few letters, possible instructions/keywords matching
    your input appear directly as a suggestion. This can increase the speed of code
    writing and at the same time reduce the error rate. Also, an automatic syntax
    check is often available, which already shows you possible errors while you are
    still working on your program code. For example, it alerts you if you have opened
    a bracket but did not close it later. In this way you can detect and correct errors
    in the program at an early stage and are not surprised by error messages only
    when you call the compiler or interpreter. Practical features in the area of source
    code editing often include deep help integration. For example, it is often possible
    to call up help information on the statement you are currently working with directly
    from the IDE.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在源代码编辑方面，常见的一个功能是自动补全：当你输入几个字母时，可能的指令或关键词会直接作为建议显示出来。这可以提高代码编写速度，同时减少错误率。此外，IDE
    通常还提供自动语法检查功能，能够在你编写程序代码时就提醒你可能的错误。例如，如果你打开了一个括号，但没有在后面关闭它，IDE 会提醒你。这样，你可以在早期阶段就发现并修正程序中的错误，而不至于在调用编译器或解释器时才看到错误信息。源代码编辑中的实用功能通常还包括深入的帮助集成。例如，你通常可以直接从
    IDE 中调用你当前正在编写的语句的帮助信息。
- en: Quite often, you not only have to write code for your program, but also design
    a graphical user interface (GUI). Some IDEs offer extensive support for the developer.
    Often, you can piece together your interface from standard elements such as buttons,
    input fields, or list boxes using drag & drop and then adjust the properties of
    the standard elements according to your wishes, such as, give a button a new label,
    or change its size or even color. After that, all you must do is connect the UI
    elements to your program code and address them from within the program so that
    something happens when, for example, the user clicks on the button. IDEs that
    support UI design in this way include Embarcadero’s RAD Studio or Microsoft’s
    Visual Studio.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 很多时候，你不仅需要为程序编写代码，还需要设计图形用户界面（GUI）。一些 IDE 为开发人员提供了丰富的支持。通常，你可以通过拖拽标准元素（如按钮、输入框或列表框）来拼接你的界面，然后根据需求调整这些标准元素的属性，比如为按钮设置新的标签，或更改它的大小甚至颜色。完成后，你只需将
    UI 元素与你的程序代码连接起来，并在程序中对其进行调用，以便当用户点击按钮时，能够触发相应的操作。支持这种 UI 设计的 IDE 包括 Embarcadero
    的 RAD Studio 或微软的 Visual Studio。
- en: In addition to the direct call of compiler or interpreter and practical functions
    for source code editing and interface design, IDEs typically also offer functions
    for debugging, i.e., the systematic search for and correction of errors. An important
    feature in this area is, for example, the creation of breakpoints in the source
    code. If you start a program after you have set up a breakpoint, it will only
    run up to the point in the code where the breakpoint is located; later, you can
    manually let it continue running beyond the breakpoint. Working with breakpoints
    allows you to check whether a program runs without errors up to the point marked
    by the breakpoint. Also, you can look at the contents of variables at the breakpoint
    location. This monitoring of the contents of variables is another important debugging
    feature. It allows you to “look inside” variables while the program is running
    and to see their current contents, and even to change them if necessary.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 除了直接调用编译器或解释器，以及进行源代码编辑和界面设计的实用功能外，IDE 通常还提供调试功能，即系统地查找和修正错误。这个领域中的一个重要功能是例如在源代码中创建断点。如果你在设置了断点之后启动程序，它将只运行到断点所在的代码位置；之后，你可以手动让程序继续执行超出断点的部分。使用断点可以帮助你检查程序在没有错误的情况下是否能运行到断点所标记的位置。此外，你还可以查看断点处变量的内容。这种监控变量内容的功能是另一个重要的调试功能。它使你可以在程序运行时“查看”变量的内容，并实时查看其当前值，甚至在必要时修改它们。
- en: If your program consists of several source code files, you can often save them
    in an IDE as a coherent project. This means that all you have to do is open the
    project and all the code files are available to you. You can also save certain
    settings, such as those of the compiler, on a project-specific basis.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的程序由多个源代码文件组成，你通常可以在集成开发环境（IDE）中将它们保存为一个连贯的项目。这意味着你只需打开该项目，所有代码文件就都可以使用了。你还可以在项目层面保存一些特定设置，比如编译器的设置。
- en: As in the case of code editors, there is also an almost unmanageable number
    of IDEs on the market, some free of charge (open source or as a community edition),
    some with costs. Some focus on one programming language (for example RStudio or
    PyCharm from JetBrains for Python), others are built to handle a variety of different
    languages, sometimes through appropriate plug-ins (for example Microsoft’s Visual
    Studio or the open-source solution NetBeans).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如同代码编辑器一样，市场上也有几乎无法管理的 IDE 数量，有些是免费的（开源或社区版），有些是收费的。有些专注于某种编程语言（例如 RStudio 或
    JetBrains 的 PyCharm 用于 Python），而有些则是为处理多种不同语言而设计的，有时通过适当的插件来支持（例如微软的 Visual Studio
    或开源解决方案 NetBeans）。
- en: IDEs for mobile applications, such as Google’s Android Studio, also allow you
    to simulate the operation of the developed app on a mobile environment with certain
    parameters (for example, hardware equipment, configuration) and to estimate the
    demand on system resources, such as processor load or mobile data transfer. These
    IDEs are thus designed for a specific purpose, namely the development of mobile
    applications, rather than around a specific programming language and therefore
    often support different languages; in the case of Android Studio, for example,
    C/C++, Java and Kotlin.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用程序的 IDE，例如谷歌的 Android Studio，也允许你在具有特定参数的移动环境中模拟已开发应用的运行（例如硬件设备、配置），并评估系统资源的需求，如处理器负载或移动数据传输。因此，这些
    IDE 是为特定目的设计的，即开发移动应用，而不是围绕特定的编程语言，因此通常支持不同的语言；以 Android Studio 为例，支持 C/C++、Java
    和 Kotlin。
- en: The transition between code editors and IDEs is somewhat fluid. Many code editors
    allow a compiler or interpreter to be attached and thus already have the core
    functionality of an IDE, but with the exception of syntax highlighting they offer
    little support in the area of language-specific code editing, debugging or interface
    design.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 代码编辑器与 IDE 之间的过渡是相对流动的。许多代码编辑器允许附加编译器或解释器，从而已经具备了 IDE 的核心功能，但除了语法高亮外，它们在语言特定的代码编辑、调试或界面设计方面的支持较少。
- en: ◘ Figures [8.1](#Fig1), [8.2](#Fig2), [8.3](#Fig3), and [8.4](#Fig4) show different
    IDEs. ◘ Figure [8.4](#Fig4) shows a very old IDE for C/C++ from Borland, which
    ran under MS-DOS. However, you can see very clearly important IDE functions in
    the menu bar, such as Run, Compile, Debug and features for project management.![](../images/474412_1_En_8_Chapter/474412_1_En_8_Fig1_HTML.jpg)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: ◘ 图 [8.1](#Fig1)、[8.2](#Fig2)、[8.3](#Fig3) 和 [8.4](#Fig4) 展示了不同的 IDE。◘ 图 [8.4](#Fig4)
    展示了一个非常古老的 Borland C/C++ IDE，运行在 MS-DOS 上。不过，你可以非常清晰地看到菜单栏中重要的 IDE 功能，如运行、编译、调试以及项目管理功能。![](../images/474412_1_En_8_Chapter/474412_1_En_8_Fig1_HTML.jpg)
- en: A screenshot of the test application in Delphi. The page comprises multiple
    sections, which include structure, object inspector, form 1, model view, and palette.
    A text in the middle of the Form 1 section reads Say Hello World.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Delphi 测试应用程序的截图。该页面包含多个部分，包括结构、对象检查器、表单 1、模型视图和调色板。表单 1 部分中间的文字是 "Say Hello
    World"。
- en: Fig. 8.1
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1
- en: The Integrated Development Environment (IDE) of Delphi
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Delphi 的集成开发环境（IDE）
- en: '![](../images/474412_1_En_8_Chapter/474412_1_En_8_Fig2_HTML.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/474412_1_En_8_Chapter/474412_1_En_8_Fig2_HTML.jpg)'
- en: A screenshot exhibits a line of Python code to print Hello World. The file name
    reads test dot p y. The bottom section of the screen represents the output and
    the file's path.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一张截图展示了一行 Python 代码，用于打印 "Hello World"。文件名是 test.py。屏幕底部部分表示输出和文件路径。
- en: Fig. 8.2
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2
- en: The PyCharm Integrated Development Environment (IDE) for Python
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 用于 Python 的 PyCharm 集成开发环境（IDE）
- en: '![](../images/474412_1_En_8_Chapter/474412_1_En_8_Fig3_HTML.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/474412_1_En_8_Chapter/474412_1_En_8_Fig3_HTML.jpg)'
- en: A screenshot of R Studio comprises 4 sections. 1\. It exhibits a snippet of
    code.2\. Different values are provided under the console tab. 3\. A table represents
    the functions of different variables under the environment tab. 4\. The description
    and usage of correlation, variance, and covariance are denoted under the help
    tab.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: R Studio 的截图包含 4 个部分。1\. 它展示了一段代码。2\. 在控制台选项卡下提供了不同的值。3\. 在环境选项卡下有一个表格，表示不同变量的功能。4\.
    在帮助选项卡下列出了相关性、方差和协方差的描述及使用方法。
- en: Fig. 8.3
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3
- en: The Integrated Development Environment (IDE) RStudio for R
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: R 的集成开发环境（IDE）RStudio
- en: '![](../images/474412_1_En_8_Chapter/474412_1_En_8_Fig4_HTML.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/474412_1_En_8_Chapter/474412_1_En_8_Fig4_HTML.jpg)'
- en: A screenshot of a code editor exhibits a C-code to print Hello World. The menu
    bar is provided at the top. The operations of different function keys are denoted
    at the bottom.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一张代码编辑器的截图展示了一个用于打印 Hello World 的 C 语言代码。菜单栏位于顶部。不同功能键的操作标注在底部。
- en: Fig. 8.4
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4
- en: The TurboC Integrated Development Environment (IDE) for C/C++
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 'TurboC 集成开发环境（IDE）用于 C/C++ '
- en: ◘ Table [8.1](#Tab1) shows a selection of IDEs that support some common programming
    languages natively. Several IDEs, such as Eclipse or NetBeans, can be extended
    by add-ins so that they support a whole range of languages.Table 8.1
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: ◘ 表格[8.1](#Tab1)展示了一些本地支持常见编程语言的 IDE 选择。像 Eclipse 或 NetBeans 这样的 IDE 可以通过插件扩展，支持多种语言。表格
    8.1
- en: Selected Integrated Development Environments (IDEs)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 选定的集成开发环境（IDEs）
- en: '| Programming language | Selected from IDEs |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 编程语言 | 从 IDE 中选择 |'
- en: '| --- | --- |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| C# | SharpDevelop, Visual Studio |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| C# | SharpDevelop, Visual Studio |'
- en: '| C/C++ | AppCode, C++ Builder, CLion, NetBeans, QT Creator, Visual Studio
    |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| C/C++ | AppCode, C++ Builder, CLion, NetBeans, QT Creator, Visual Studio
    |'
- en: '| Java | AppCode, Eclipse, IntelliJ IDEA, JBuilder, NetBeans |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| Java | AppCode, Eclipse, IntelliJ IDEA, JBuilder, NetBeans |'
- en: '| JavaScript | AppCode, Aptana Studio, NetBeans, RubyMine, Visual Studio, WebStorm
    |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| JavaScript | AppCode, Aptana Studio, NetBeans, RubyMine, Visual Studio, WebStorm
    |'
- en: '| Perl | Komodo IDE, Padre |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| Perl | Komodo IDE, Padre |'
- en: '| PHP | Aptana Studio, Komodo IDE, NetBeans, PhpStorm, Zend Studio |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| PHP | Aptana Studio, Komodo IDE, NetBeans, PhpStorm, Zend Studio |'
- en: '| Python | Aptana Studio, PyCharm, Rodeo, Spyder, Thonny |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| Python | Aptana Studio, PyCharm, Rodeo, Spyder, Thonny |'
- en: '| R | Rcommander, RStudio |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| R | Rcommander, RStudio |'
- en: '| Ruby | Aptana Studio, Komodo IDE, RubyMine |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| Ruby | Aptana Studio, Komodo IDE, RubyMine |'
- en: '| Swift | AppCode, Xcode |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| Swift | AppCode, Xcode |'
- en: '| VBA | Microsoft Office, Visual Studio Tools for Office (VSTO) |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| VBA | Microsoft Office, Visual Studio Tools for Office (VSTO) |'
- en: When deciding whether to use a code editor or an IDE, it is natural to consider
    how much you want to use tools that only IDEs provide (such as debugging features
    or interface design functions). But even if you don’t plan to do that, the big
    advantage of IDEs to provide all features under one roof is still a weighty one,
    especially if you think about the central tools like compiler or interpreter that
    you need all the time during the development process. On the other hand, IDEs
    are often quite complex programs themselves, with a plethora of buttons, different
    toolbars/ribbons, windows and tabs that you first have to find your way around.
    A good impression of the complexity is given by the ◘ Figs. [8.1](#Fig1), [8.2](#Fig2),
    and [8.3](#Fig3). Since the IDEs have been developed for professionals, the manufacturers
    are obviously not so concerned that you should be able to learn how to use all
    the functions and options in a few minutes. After all, the IDE is not intended
    to be used temporarily or only now and then, but permanently as the control center
    for all programming work. Therefore, it may take some time before you have a complete
    overview of the possibilities of the new tool. But once you have found your way
    around the IDE, you can work productively, because that is exactly what these
    tools are developed for.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在决定使用代码编辑器还是 IDE 时，通常会考虑你希望使用的仅 IDE 提供的工具（如调试功能或界面设计功能）。即便你不打算使用这些功能，IDE 提供所有功能的一个大优势仍然是很重要的，尤其是当你考虑到在开发过程中总是需要的核心工具，如编译器或解释器时。另一方面，IDE
    本身往往是相当复杂的程序，拥有大量按钮、不同的工具栏/功能区、窗口和标签，你首先需要摸索这些界面。通过◘ 图[8.1](#Fig1)，[8.2](#Fig2)
    和 [8.3](#Fig3)，可以大致了解其复杂性。由于 IDE 是为专业人士开发的，制造商显然并不关心你能在几分钟内学会如何使用所有功能和选项。毕竟，IDE
    不是临时使用的工具，也不是偶尔使用的，而是作为所有编程工作的控制中心长期使用。因此，可能需要一些时间才能完全了解新工具的所有可能性。但一旦你掌握了 IDE，你就能高效工作，因为这正是这些工具的开发目的。
- en: Tip
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Try different code editors and IDEs and see what you get along with best. Don’t
    be confused by the many features. You need very few of these features to write
    and run programs. You will learn to use and appreciate more and more features
    of the tools as time goes by. Don’t try to understand everything right at the
    beginning, but concentrate on the really essential features, i.e., those for editing
    and compiling/executing the code.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试不同的代码编辑器和 IDE，看看哪种最适合你。不要被众多功能所困扰。你写和运行程序时只需要很少的功能。随着时间的推移，你会学会使用并欣赏工具中的更多功能。不要一开始就试图理解所有的功能，而是集中精力使用那些真正必要的功能，即编辑和编译/执行代码的功能。
- en: 'Ultimately, you must decide for yourself which tools you want to use. It’s
    a good idea to try out different code editors/IDEs and only then commit. For the
    purposes of this book, we will be working with both a full-fledged IDE, PyCharm
    for Python, and a classic code editor, Sublime Text, when dealing with JavaScript.
    Writing these paragraphs, it occurs to the author that he himself seems to unconsciously
    follow a simple rule—if the programming language does not require a special, stand-alone
    compiler or interpreter on one’s own computer (i.e., for JavaScript or PHP, for
    example), a code editor is the tool of choice. For languages that require an installed
    compiler or interpreter, a language-specific IDE comes into play. Ultimately,
    however, there is no golden rule that always applies to everyone. Only one thing
    helps: try it out!'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，你必须自己决定想要使用哪些工具。试用不同的代码编辑器/集成开发环境（IDE）是个不错的主意，然后再做决定。本书中，我们将使用一个完整的 IDE——Python
    的 PyCharm，以及一个经典的代码编辑器——在处理 JavaScript 时使用 Sublime Text。在写这些段落时，作者意识到自己似乎无意识地遵循了一个简单的规则——如果编程语言不需要在自己电脑上安装特殊的独立编译器或解释器（例如
    JavaScript 或 PHP 等），那么代码编辑器就是首选工具。对于需要安装编译器或解释器的语言，则需要使用语言特定的 IDE。然而，最终并没有一个适用于所有人的金科玉律。只有一件事有效：试一试！
- en: 8.1.4 Simple Online Development Environments
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8.1.4 简单的在线开发环境
- en: 'If you want to try out a language without installing all the necessary tools
    on your computer, you can often use special websites that allow you to enter and
    execute code directly. All the features necessary for execution, such as compiling
    and interpreting the code, are provided by the website. Some examples of such
    “online IDEs” are:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在不安装所有必要工具的情况下尝试某种语言，通常可以使用一些特殊的网站，允许你直接输入和执行代码。执行所需的所有功能，如编译和解释代码，都是由网站提供的。一些这样的“在线
    IDE”的例子包括：
- en: ► [http://​cpp.​sh/​](http://cpp.sh/) for the C++ programming language,
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ► [http://​cpp.​sh/​](http://cpp.sh/) 用于 C++ 编程语言，
- en: ► [https://​www.​compilejava.​net/​](https://www.compilejava.net/) for Java,
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ► [https://​www.​compilejava.​net/​](https://www.compilejava.net/) 用于 Java，
- en: ► [https://​js.​do/​](https://js.do/) for JavaScript,
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ► [https://​js.​do/​](https://js.do/) 用于 JavaScript，
- en: ► [http://​phptester.​net/​](http://phptester.net/) for PHP,
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ► [http://​phptester.​net/​](http://phptester.net/) 用于 PHP，
- en: ► [https://​www.​pythonanywhere.​com/​](https://www.pythonanywhere.com/) for
    Python,
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ► [https://​www.​pythonanywhere.​com/​](https://www.pythonanywhere.com/) 用于
    Python，
- en: ► [https://​rextester.​com/​](https://rextester.com/) for a whole range of languages,
    including C#, Haskell, Kotlin, Ruby, Pascal and Visual Basic.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ► [https://​rextester.​com/​](https://rextester.com/) 提供多种语言支持，包括 C#、Haskell、Kotlin、Ruby、Pascal
    和 Visual Basic。
- en: More such platforms can be found very easily by typing “try *programminglanguage*
    online” (where *programminglanguage* is replaced by the name of the language you
    want) into a search engine. In most cases, you don’t even need to create an account;
    you can start writing code right away. Sites that require a (free) account, such
    as ► [https://​www.​pythonanywhere.​com/​](https://www.pythonanywhere.com/), usually
    also allow you to save files in the cloud and reuse them later.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通过搜索引擎输入“try *programminglanguage* online”（其中 *programminglanguage* 替换为你想要的编程语言名称），你可以很容易找到更多类似的平台。在大多数情况下，你甚至不需要创建账户；你可以直接开始编写代码。需要（免费）账户的网站，如
    ► [https://​www.​pythonanywhere.​com/​](https://www.pythonanywhere.com/)，通常还允许你将文件保存在云端，并稍后重新使用。
- en: Web services like the ones mentioned are of course no substitute for a real
    development environment, since they usually have very limited functionality and
    the execution of programs may also be subject to restrictions (in some cases,
    for example, a program may only take up five seconds of computing time). If you
    want to get serious about the language, there is no way around installing the
    necessary tools on your own computer. Nevertheless, these websites are an interesting
    opportunity to try out a language without risk and unnecessary effort.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 像上述提到的网络服务当然不能替代真正的开发环境，因为它们通常功能非常有限，且程序的执行可能会受到限制（例如，在某些情况下，一个程序只能占用五秒钟的计算时间）。如果你想认真学习这门语言，无法避免需要在自己的计算机上安装必要的工具。不过，这些网站是一个有趣的机会，可以在没有风险和不必要努力的情况下尝试某种语言。
- en: 8.2 Help and Information
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.2 帮助与信息
- en: Having the right tools at your disposal is not everything. From time to time,
    you will need help. Therefore, it makes sense to think about where you can get
    more information about your programming language in advance. For example, if you
    have no idea how to tackle a certain problem, don’t know what certain commands
    of your programming language do or how to use them, or you don’t understand the
    sometimes-cryptic error messages of the interpreter or compiler. In all these
    cases, it is helpful to have an immediate contact point where you can find support.
    Such contact points are a significant resource in practical work, not only for
    programming beginners. Besides books like this one, of course, the internet offers
    a myriad sources that hardly leave any information need unsatisfied—provided,
    of course, that you can find them.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有合适的工具并不代表一切。有时候，你会需要帮助。因此，事先考虑在哪里可以获取更多关于编程语言的信息是有意义的。例如，如果你不知道如何解决某个具体问题，不知道编程语言中的某些命令做什么或如何使用它们，或者你不理解解释器或编译器的那些有时令人困惑的错误信息。在所有这些情况下，拥有一个即时的联系点来获得支持是非常有帮助的。这样的联系点在实际工作中是一个重要的资源，不仅仅对编程初学者如此。当然，除了像这本书这样的书籍，互联网还提供了大量的资源，几乎没有信息需求是得不到满足的——当然，前提是你能找到它们。
- en: Many programming languages, both open source and proprietary (vendor-specific),
    come with extensive web documentation, where you can find detailed information
    about specific commands of the programming language. Examples of these help offers
    are PHP’s Function Reference, Python’s Library Reference or Microsoft’s VBA Reference
    for Visual for Applications (VBA).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 许多编程语言，无论是开源的还是专有的（厂商特定），都有详尽的网页文档，你可以在其中找到关于编程语言特定命令的详细信息。这些帮助文档的例子有 PHP 的函数参考、Python
    的库参考或微软的 Visual Basic for Applications (VBA) 参考。
- en: Part of the official documentation is usually not only such a function reference,
    i.e., a dictionary-like reference book that describes what certain commands of
    the programming language do and how they are used, but often also a language reference.
    Language references explain the grammar of the language in question, the syntax,
    and thus describe how to correctly formulate instructions in the language. However,
    such language references are not always easily digestible for novice programmers.
    That’s why some official documentation also offer tutorials for beginners and
    “Getting Started” articles as a complementary component.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 官方文档的一部分通常不仅包括这样的函数参考，也就是一本类似字典的参考书，描述编程语言中的某些命令的作用及其使用方法，还常常包括语言参考。语言参考解释了该语言的语法、语法规则，从而描述了如何正确地用该语言编写指令。然而，这种语言参考并不总是容易让初学者消化的。因此，一些官方文档还会提供针对初学者的教程和“入门指南”文章，作为补充内容。
- en: Putting a browser bookmark on the official language documentation, especially
    on the function reference, is recommended to anyone who wants to get serious about
    a programming language. It is usually the first place to go when you want to understand
    what a particular command does and how to use it.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何想要认真学习某种编程语言的人，建议将官方语言文档，尤其是函数参考，添加到浏览器书签中。当你想要了解某个特定命令的作用以及如何使用它时，通常这是最先要去的地方。
- en: In addition to the official documentation, there are of course also unofficial
    information and help channels that are not operated by the organization responsible
    for the programming language. In practice, the most important such channel for
    many programming languages is the internet platform Stack Overflow (► [https://​StackOverflow.​com/​](https://stackoverflow.com/)).
    With over 17 million questions on a wide variety of programming languages, it
    leaves little to be desired. If you search there for a solution to a concrete
    problem, you often get the impression that every conceivable question has already
    been asked by someone before. But not only do the large number of answered questions
    and the high coverage of different programming languages make Stack Overflow an
    incredibly useful source of information, the quality of the answers is also generally
    very high.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 除了官方文档之外，当然也有一些非官方的信息和帮助渠道，这些渠道并非由负责该编程语言的组织运营。在实际应用中，许多编程语言最重要的非官方渠道就是互联网平台
    Stack Overflow（► [https://​StackOverflow.​com/​](https://stackoverflow.com/)）。在这个平台上，有超过
    1700 万个问题，涵盖了各种编程语言，几乎无所不包。如果你在这里搜索某个具体问题的解决方案，你常常会有这样的印象：几乎每个可以想到的问题都已经被某人提问过了。但不仅是回答问题的数量庞大和不同编程语言的广泛覆盖使
    Stack Overflow 成为一个极为有用的信息来源，回答的质量通常也非常高。
- en: The high quantity and quality are achieved on the one hand through gamification,
    i.e., the playful setting of incentives by crediting forum participants with points
    (“reputation”) for certain actions. These points are not only visible to everyone
    as a proof of competence next to the respective username, but also allow the use
    of certain functions that are not available to all users. One important such function
    (which can be accessed even with a relatively low score) is the up- and down-voting
    of answers, i.e., the rating of other users’ answers. This helps readers to better
    assess the quality of the answers. In turn, the authors of up-voted answers receive
    reputation points, which increases the incentive to provide high-quality answers.
    Also, the questioner can mark one of the answers as the best. Other users will
    then recognize by the large green checkmark next to the answer that it is the
    one that ultimately helped the questioner solve their problem. The author of the
    answer is also credited with reputation points for this. In this way, not only
    is a system of mutual quality control operated, but also a strong incentive is
    set for investing in work for others, from which you have nothing but the good
    feeling of having helped another user. With Stack Overflow, in addition to the
    good feeling, you also gain reputation and rights, which is obviously beneficial
    to the ego of many participants.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 高质量和高数量的内容一方面通过游戏化实现，即通过为论坛参与者提供积分（“声誉”）来激励他们参与特定行为。这些积分不仅会显示在用户名旁边作为能力的证明，还可以让用户使用一些所有用户无法使用的功能。一个重要的功能（即使是相对较低的分数也能使用）就是对回答进行投票，包括对其他用户回答的评价。这帮助读者更好地评估答案的质量。反过来，获得投票的回答者会获得声誉积分，这增加了提供高质量答案的动力。此外，提问者可以标记一个答案为最佳答案。其他用户将通过答案旁边的大绿勾标识，看到这正是最终帮助提问者解决问题的答案。答案的作者也会因此获得声誉积分。通过这种方式，不仅建立了相互质量控制的系统，还为他人付出的努力提供了强大的激励，而这种付出除了带来帮助他人的良好感觉外，什么也没有。通过
    Stack Overflow，除了带来良好的感觉，你还可以获得声誉和权限，这显然对许多参与者的自我满足感有益。
- en: In addition to gamification, the strict rules in the forum also play a role
    in the high quality of the information. For example, questions that are duplicates
    of other questions or that are off topic in the respective forum area are immediately
    closed by the moderators. The questioner is required to provide a minimal, but
    executable code example for his problem and to formulate his question exactly
    already in the title of the post. Stack Overflow’s own Code of Conduct calls for
    friendly interaction, but the tone in the forum sometimes seems a bit rude to
    Stack Overflow newbies.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 除了游戏化元素外，论坛中的严格规则也在确保信息质量方面发挥着重要作用。例如，与其他问题重复或者偏离相关论坛区域的话题的问题会立即被版主关闭。提问者需要为他们的问题提供一个最小化但可执行的代码示例，并且必须在帖子的标题中准确地表述问题。Stack
    Overflow 自身的行为规范呼吁友好的互动，但论坛中的语气有时对 Stack Overflow 新手来说似乎有些粗鲁。
- en: Although the tone sometimes takes a little getting used to, Stack Overflow is
    a first-class source of information. Even incomprehensible compiler or interpreter
    error messages—a common annoyance in programming—can usually be found on Stack
    Overflow. Since Stack Overflow supports many different programming languages,
    it is important to always include the name of the language in the search query.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管语气有时需要适应，Stack Overflow 仍然是一个一流的信息来源。即使是那些难以理解的编译器或解释器错误信息——编程中常见的烦恼——通常也能在
    Stack Overflow 上找到解决方案。由于 Stack Overflow 支持多种编程语言，因此在搜索时始终包括编程语言的名称非常重要。
- en: If you search for a question on Google, Stack Overflow’s search hits are regularly
    listed high up. By adding “site:► [StackOverflow.​com](http://stackoverflow.com)”
    to the Google search query, results from Stack Overflow are listed exclusively;
    of course, ► [StackOverflow.​com](http://stackoverflow.com) also has its own search.
    In addition to Stack Overflow, there are a number of other forums, including on
    well-known platforms such as Facebook or Reddit. Numerous blogs also provide good
    tips and how-tos for specific problems.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 Google 上搜索问题，Stack Overflow 的搜索结果通常会排在前面。在 Google 搜索查询中添加“site:► [StackOverflow.​com](http://stackoverflow.com)”后，结果会只显示
    Stack Overflow 的内容；当然，► [StackOverflow.​com](http://stackoverflow.com) 也有其自己的搜索功能。除了
    Stack Overflow，还有许多其他论坛，包括在 Facebook 或 Reddit 等知名平台上的论坛。许多博客也提供针对特定问题的好建议和解决方案。
- en: But when should you use the official documentation, and when should you use
    other sources like Stack Overflow? If you already know which command to use and
    now it’s just a matter of understanding how to do it correctly, then the official
    function reference for the language is usually the best place to start. But if
    you don’t know which command or approach to take to a problem, Stack Overflow
    (or a similar forum) is your first choice. Here, you will find good solutions
    to many common problems. Similarly, if you can’t decipher error messages from
    the compiler or interpreter, or just can’t figure out why a command you looked
    up in the function reference behaves the way it does, Stack Overflow is the place
    to go. The nice thing about Stack Overflow is that due to the large number of
    questions already asked, it’s quite likely that yours will be there, and you’ll
    get your problem solved immediately without having to post a question yourself
    and then wait for hours or even days for an adequate answer.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，什么时候应该使用官方文档，什么时候应该使用其他来源，比如 Stack Overflow 呢？如果你已经知道该使用哪个命令，现在只需要理解如何正确使用它，那么该语言的官方函数参考通常是最好的起点。但是如果你不知道该采取什么命令或方法来解决问题，那么
    Stack Overflow（或类似的论坛）就是你的首选。在这里，你可以找到很多常见问题的解决方案。同样，如果你无法解读编译器或解释器的错误消息，或者只是无法理解为什么你在函数参考中查找的命令会以那样的方式表现，Stack
    Overflow 也是你该去的地方。使用 Stack Overflow 的好处在于，由于已经有大量的问题被提出，极有可能你的问题已经被问过，你可以立即获得问题的解决，而不必自己发帖并等待几个小时甚至几天才能得到一个合适的答案。
- en: 8.3 Generative Artificial Intelligence Like ChatGPT
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.3 生成型人工智能（如 ChatGPT）
- en: Artificial intelligence tools such as ChatGPT from OpenAI, Gemini from Google,
    Claude from Anthropic, or Llama from Meta are a very different kind of tool. They
    are built on top of powerful Large Language Models (LLMs) and are dialog-based,
    meaning they allow the user to have a “conversation” with an artificial intelligence.
    This allows questions to be asked that are not yet found in this form in any internet
    forum. In addition, the tedious transfer work of applying someone else’s question
    and the answers they received to your own situation is eliminated, because with
    tools like ChatGPT, you can ask exactly based on your own situation and receive
    an answer that is tailored precisely to your own problem. The AI tool is easy
    to use because it communicates in natural language; usually, a whole range of
    natural languages are supported in addition to English, including Spanish, French,
    German, Italian and Chinese.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 人工智能工具，如 OpenAI 的 ChatGPT、Google 的 Gemini、Anthropic 的 Claude 或 Meta 的 Llama，是一种非常不同的工具。它们建立在强大的大型语言模型（LLM）之上，并且是基于对话的，这意味着它们允许用户与人工智能进行“对话”。这使得可以提出一些目前在任何互联网论坛中都没有的问提。此外，借助
    ChatGPT 等工具，繁琐的将别人提出的问题和他们收到的答案应用到自己情况中的工作被消除了，因为你可以根据自己的具体情况精确提问，并获得针对自己问题量身定制的答案。人工智能工具易于使用，因为它们以自然语言进行交流；通常，除了英语外，还支持一系列自然语言，包括西班牙语、法语、德语、意大利语和中文。
- en: 'Tools such as ChatGPT are examples of generative artificial intelligence, which
    means that they are able not only to compile and present known information, but
    also—seemingly creatively—to generate new content and develop new solutions. Together
    with the ability to work in numerous programming languages, these tools are very
    useful in programming. Areas of application can be such as:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 像 ChatGPT 这样的工具是生成型人工智能的例子，这意味着它们不仅能够编译和呈现已知信息，还能够——看似创造性地——生成新内容并发展新解决方案。结合其能够使用多种编程语言的能力，这些工具在编程中非常有用。它们的应用领域包括：
- en: 'Understanding foreign code: If you don’t understand a piece of code that you
    didn’t write yourself (e.g., from an internet forum or blog), just have it explained
    to you (“Explain what the following code does”).'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解外部代码：如果你不理解一段不是自己写的代码（例如来自互联网论坛或博客的代码），可以让别人给你解释一下（“解释以下代码的作用”）。
- en: 'Looking things up: You can use tools like ChatGPT like a language reference
    or textbook. You can ask very specifically how to use a certain function in a
    programming language, for example, but also more generally about which functions
    (and external add-on modules) are available at all to solve a certain problem.
    The good thing (especially in the first case) is that if you don’t understand
    the answer, you can ask for a more understandable explanation (or examples) at
    any time.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找资料：你可以像使用语言参考书或教科书一样使用像 ChatGPT 这样的工具。你可以非常具体地询问如何在某种编程语言中使用某个函数，也可以更一般性地询问哪些函数（以及外部插件模块）可以用来解决某个问题。好处是（特别是在前一种情况）如果你不理解答案，你可以随时请求更易懂的解释（或示例）。
- en: 'Writing code: The great strength of generative artificial intelligence is to
    write code itself (“Write a Python program that ...”). There are numerous examples
    circulating on the internet in which developers have used tools such as Chat GPT
    to develop large applications (for example, whole web platforms) in a short time
    and with little effort and have (allegedly) made a lot of money from their commercial
    exploitation.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写代码：生成性人工智能的一个强大优点是能够编写代码本身（“编写一个 Python 程序，...”）。网络上流传着许多例子，开发者们利用像 ChatGPT
    这样的工具，在短时间内、用很少的精力开发出大型应用（例如，整个 Web 平台），并且（据称）通过其商业化运作赚了不少钱。
- en: 'Finding and eliminating bugs in programs: Feeding code and error messages to
    AI tools often helps you figure out the bug faster than if you were to laboriously
    dig through the code yourself. ◘ Figure [8.5](#Fig5) shows an example.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找和消除程序中的 bug：将代码和错误信息输入 AI 工具，通常能比自己艰苦地翻阅代码更快地找到 bug。◘ 图 [8.5](#Fig5) 展示了一个示例。
- en: 'Comment and document code: The tedious work of commenting and documenting code
    (i.e., writing explanations of how the code works and how it can be used), which
    is rather unpleasant for most programmers, can usually be done well by generative
    AI tools.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注释和文档化代码：对于大多数程序员来说，注释和文档化代码（即编写代码如何工作及如何使用的解释）是项繁琐的工作，通常可以由生成性 AI 工具来很好地完成。
- en: The quality of generative artificial intelligence results is often really good
    and very impressive, especially for first-time users. Nevertheless, tools like
    ChatGPT do not work without errors. The results always need to be checked, code
    written by AI tools needs to be tested throughly. Own knowledge of the programming
    language used is mandatory for this reason alone. However, because the systems
    are dialog-based and can refer to previous inputs and outputs, you can point out
    errors and ask ChatGPT to correct them. Even if the tool has not made any real
    mistakes but the result does not yet correspond to your ideas and requirements,
    you can have it “sharpened” again in dialog with the AI tool. In addition, due
    to the dialogue nature of the process, you can have complex programs developed
    step by step, which increases the probability that the desired result will come
    out in the end. Since Chat GPT is free of charge in the basic version, it is highly
    recommended to try it out. Do not worry that this will make you look like an amateur,
    many professional software developers also use such tools to increase their programming
    productivity.![](../images/474412_1_En_8_Chapter/474412_1_En_8_Fig5_HTML.png)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 生成性人工智能的结果质量通常非常好，尤其对首次使用者来说，给人留下深刻印象。然而，像 ChatGPT 这样的工具并非没有错误。结果始终需要检查，AI 工具编写的代码需要彻底测试。仅此一点，掌握所用编程语言的知识是必不可少的。然而，由于这些系统是基于对话的，并且可以参考之前的输入和输出，你可以指出错误并要求
    ChatGPT 进行修正。即使工具没有犯真正的错误，但结果仍然不符合你的想法和要求，你也可以通过与 AI 工具的对话让其“精炼”一次。此外，由于过程的对话性，你可以一步步地开发复杂的程序，这增加了最终得到所需结果的概率。由于
    Chat GPT 的基础版本是免费的，强烈建议尝试一下。不要担心这会让你看起来像个业余爱好者，许多专业软件开发人员也使用这种工具来提高他们的编程生产力。![](../images/474412_1_En_8_Chapter/474412_1_En_8_Fig5_HTML.png)
- en: A screenshot represents the response of chat G P T for a prompt by an anonymous
    user. The prompt asks about the error message in a code. The Chat G P T response
    is provided in a paragraph.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 截图展示了一个匿名用户提出的关于代码错误信息的提示，ChatGPT 的响应以段落形式呈现。
- en: Fig. 8.5
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5
- en: Debugging with ChatGPT
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ChatGPT 调试
- en: 8.4 Your Roadmap to Learning a New Programming Language
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.4 学习新编程语言的路线图
- en: When you learn a new programming language … *   First obtain the necessary tools,
    especially the required compiler or interpreter and a tool (code editor or IDE)
    to work with your code.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当你学习一门新的编程语言时…… *首先获取必要的工具，特别是所需的编译器或解释器，以及一个可以用来编写代码的工具（代码编辑器或 IDE）。*
- en: If you already use a code editor or IDE for another language, consider using
    it for the new language as well as you are already familiar with its operation.
    There might be an extension package for your tool that makes it fit for the new
    language as well.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你已经在使用一个代码编辑器或 IDE 来编写其他语言的代码，可以考虑将它用于新语言，因为你已经熟悉它的操作。也许你的工具有适用于新语言的扩展包。
- en: If you do not yet have a code editor or IDE in use, try out different ones.
    If the work with your programming language requires special features, such as
    for the design of graphical interfaces, or if you want to work intensively with
    tools for debugging, you should prefer an IDE to a pure (code) editor. Otherwise,
    a good code editor, from which you are also be able to call compilers or interpreters,
    may be sufficient.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你还没有使用代码编辑器或集成开发环境（IDE），可以尝试不同的工具。如果你编程语言的工作需要特定功能，比如设计图形界面，或者你想要集中的使用调试工具，建议选择
    IDE 而不是纯粹的（代码）编辑器。否则，一个好的代码编辑器，能够调用编译器或解释器，可能就足够了。
- en: When you install a new code editing tool, don’t try to understand all the complexity
    of features right away. You only need a relatively small part of it anyway—at
    least in the beginning—to really be able to work. Focus first on understanding
    how to open, edit, and save code files, and how to run your program. After that,
    you can start programming right away. You will learn most of the rest about your
    integrated development environment or code editor en passant.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你安装一个新的代码编辑工具时，不要急于立刻理解所有功能的复杂性。反正你在最开始只需要其中的相对小部分——至少一开始是这样——才能真正开始工作。首先专注于理解如何打开、编辑和保存代码文件，以及如何运行你的程序。之后，你可以立即开始编程。你会在日常使用过程中顺便学习更多关于你的集成开发环境或代码编辑器的知识。
- en: Before you really get into the programming language, find out what official
    help and information channels are available; in particular, set browser bookmarks
    for the official function and language references.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在真正开始学习编程语言之前，了解可用的官方帮助和信息渠道；特别是，为官方函数和语言参考设置浏览器书签。
- en: Check, if ChatGPT supports your language and try out a few things.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查一下，ChatGPT 是否支持你的语言，并尝试做一些实验。
