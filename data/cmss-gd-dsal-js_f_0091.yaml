- en: The Importance of Constrained Data Structures
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 受限数据结构的重要性
- en: By definition, if a `stack` is just a constrained version of an `array`, that
    means an `array` can do anything a `stack` can do. If so, what advantage does
    a `stack` provide?
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 根据定义，如果`stack`只是`array`的一个受限版本，那么`array`可以做任何`stack`能做的事情。那么，`stack`有什么优势呢？
- en: Constrained data structures like the `stack` (and the `queue`, which we’ll encounter
    shortly) are important for several reasons.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 像`stack`（以及稍后我们将接触到的`queue`）这样的受限数据结构出于几个原因非常重要。
- en: First, when we work with a constrained data structure, we can prevent potential
    bugs. The `linting` algorithm, for example, only works if we exclusively remove
    items from the top of the `stack`. If a programmer inadvertently writes code that
    removes items from the middle of the array, the algorithm will break down. By
    using a `stack`, we’re forced into only removing items from the top, as it’s impossible
    to get the `stack` to remove any other item.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 首先，当我们使用受限数据结构时，可以防止潜在的错误。例如，`linting`算法仅在我们专门从`stack`的顶部移除项目时有效。如果程序员不小心编写了从数组中间移除项目的代码，算法将会崩溃。通过使用`stack`，我们被迫只从顶部移除项目，因为不可能让`stack`移除其他任何项目。
- en: Second, data structures like `stacks` give us a new mental model for tackling
    problems. The `stack`, for example, gives us the whole idea of a last-in, first-out
    process. We can then apply this `LIFO` mindset to solve all sorts of problems,
    such as the linter just described.
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 其次，像`stacks`这样的数据结构为我们提供了一种解决问题的新思维模型。例如，`stack`使我们理解后进先出的整个过程。我们可以将这种`LIFO`思维应用于解决各种问题，例如刚刚提到的代码检查工具。
- en: And once we’re familiar with the `stack` and its `LIFO` nature, the code we
    write using the `stack` becomes familiar and elegant to other developers who read
    our code. As soon as someone sees a `stack` being used within an algorithm, they
    immediately know that the algorithm is working with a `LIFO`-based process.
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 一旦我们熟悉了`stack`及其`LIFO`特性，使用`stack`编写的代码对其他阅读我们代码的开发者来说变得熟悉而优雅。只要有人看到算法中使用了`stack`，他们立刻就知道这个算法是基于`LIFO`的过程在运作。
- en: Stack Wrap-Up
  id: totrans-6
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: '`Stack`总结'
- en: '`Stacks` are ideal for processing any data that should be handled last in,
    first out. The `undo` function in a word processor, for example, is a great use
    case for a stack. As the user types, we keep track of each keystroke by pushing
    the keystroke onto the stack. Then, when the user hits the `undo` key, we pop
    the most recent keystroke from the stack and eliminate it from the document. At
    this point, their next-to-most recent keystroke is now sitting at the top of the
    stack, ready to be undone if need be.'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Stacks`非常适合处理应该遵循后进先出原则的数据。例如，文字处理器中的`undo`功能就是`stack`的一个极好应用案例。当用户输入时，我们通过将每个按键记录推入`stack`来跟踪每个按键。然后，当用户按下`undo`键时，我们从`stack`中弹出最近的按键，并将其从文档中删除。此时，用户的倒数第二个按键现在位于`stack`的顶部，随时可以撤销。'
