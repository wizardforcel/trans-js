- en: Chapter 13
  id: totrans-0
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 第13章
- en: Recursive Algorithms for Speed
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 提速的递归算法
- en: We’ve seen that understanding `recursion` unlocks all sorts of new algorithms,
    such as traversing a `filesystem` or producing `anagrams`。In this chapter, you’re
    going to learn that `recursion` is also the key to algorithms that can make our
    code run much, much faster.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们已经看到，理解`递归`可以解锁各种新算法，例如遍历`文件系统`或生成`字谜`。在本章中，你将学习到`递归`也是让我们的代码运行得更快的关键。
- en: In previous chapters, we’ve encountered a number of sorting algorithms, including
    `Bubble Sort`，`Selection Sort`，and `Insertion Sort`。In real life, however, none
    of these methods are actually used to sort arrays. Most computer languages have
    built-in sorting functions for arrays that save us the time and effort of implementing
    our own. And in many of these languages, the sorting algorithm that is employed
    under the hood is `Quicksort`。
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们遇到了一些排序算法，包括`冒泡排序`、`选择排序`和`插入排序`。然而，在现实生活中，这些方法实际上并没有用来对数组进行排序。大多数计算机语言都有内置的数组排序函数，这为我们节省了实现自己排序算法的时间和精力。在许多这些语言中，底层使用的排序算法是`快速排序`。
- en: The reason we’re going to dig into `Quicksort` (even though it’s already built
    into many computer languages) is because by studying how it works, you can learn
    how to use `recursion` to greatly speed up an algorithm, and you can do the same
    for other practical algorithms of the real world.
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们之所以要深入研究`快速排序`（尽管它已经内置于许多计算机语言中），是因为通过学习它的工作原理，你可以学习如何使用`递归`大幅提高算法的速度，其他现实世界中的实用算法也可以用同样的方法。
- en: '`Quicksort` is an extremely fast sorting algorithm that is particularly efficient
    for average scenarios. While in worst-case scenarios (that is, inversely sorted
    arrays) it performs similarly to `Insertion Sort` and `Selection Sort`，it’s much
    faster for average scenarios—which are what occur most of the time.'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`快速排序`是一种极其快速的排序算法，尤其在平均情况下表现得非常高效。虽然在最坏情况下（即逆序排序的数组）它的性能与`插入排序`和`选择排序`相似，但在平均情况下，它的速度要快得多——而这正是大多数情况下的情况。'
- en: '`Quicksort` relies on a concept called `partitioning`，so we’ll jump into that
    first.'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`快速排序`依赖于一个叫做`划分`的概念，所以我们首先来探讨这个概念。'
