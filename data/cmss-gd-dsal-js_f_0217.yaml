- en: Chapter 12
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 第12章
- en: These are the solutions to the exercises found in the section [*Exercises*](f_0120.xhtml#dynamic.programming.exercises).
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这些是[*练习*](f_0120.xhtml#dynamic.programming.exercises)部分中的习题解答。
- en: 'The problem here is the function recursively calls itself twice each time it
    runs. Let’s make it so that it only calls itself once each time:'
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 这里的问题是函数每次运行时递归调用自身两次。让我们修改它，使得每次只调用一次：
- en: '| ​  | `function` addUntil100(array) { |'
  id: totrans-3
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` addUntil100(array) { |'
- en: '| ​  | `if` (array.length === 0) { `return` 0; } |'
  id: totrans-4
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (array.length === 0) { `return` 0; } |'
- en: '| ​  |  |'
  id: totrans-5
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `const` sumOfRemainingNumbers = addUntil100(array.slice(1)); |'
  id: totrans-6
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` sumOfRemainingNumbers = addUntil100(array.slice(1)); |'
- en: '| ​  |  |'
  id: totrans-7
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `if` (array[0] + sumOfRemainingNumbers > 100) { |'
  id: totrans-8
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (array[0] + sumOfRemainingNumbers > 100) { |'
- en: '| ​  | `return` sumOfRemainingNumbers; |'
  id: totrans-9
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` sumOfRemainingNumbers; |'
- en: '| ​  | } `else` { |'
  id: totrans-10
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } `else` { |'
- en: '| ​  | `return` array[0] + sumOfRemainingNumbers; |'
  id: totrans-11
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` array[0] + sumOfRemainingNumbers; |'
- en: '| ​  | } |'
  id: totrans-12
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-13
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 'Here is the memoized version:'
  id: totrans-14
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 这是备忘录版本：
- en: '| ​  | `function` golomb(n, memo = {}) { |'
  id: totrans-15
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` golomb(n, memo = {}) { |'
- en: '| ​  | `if` (n === 1) { `return` 1; } |'
  id: totrans-16
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (n === 1) { `return` 1; } |'
- en: '| ​  |  |'
  id: totrans-17
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `if` (!memo[n]) { |'
  id: totrans-18
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (!memo[n]) { |'
- en: '| ​  | `memo`[n] = 1 + golomb(n - golomb(golomb(n - 1, memo), memo), memo);
    |'
  id: totrans-19
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `memo`[n] = 1 + golomb(n - golomb(golomb(n - 1, memo), memo), memo);
    |'
- en: '| ​  | } |'
  id: totrans-20
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-21
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return` memo[n]; |'
  id: totrans-22
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` memo[n]; |'
- en: '| ​  | } |'
  id: totrans-23
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: To accomplish memoization here, we need to make a key that takes into account
    both the number of rows and the number of columns. To this end, we can make our
    key be based on the row and column together.
  id: totrans-24
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 为了实现备忘录功能，我们需要创建一个键，考虑行数和列数。为此，我们可以将键基于行和列组合。
- en: '| ​  | `function` uniquePaths(rows, columns, memo = {}) { |'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` uniquePaths(rows, columns, memo = {}) { |'
- en: '| ​  | `if` (rows === 1 || columns === 1) { |'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (rows === 1 || columns === 1) { |'
- en: '| ​  | `return` 1; |'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` 1; |'
- en: '| ​  | } |'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `if` (!memo[[rows, columns]]) { |'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (!memo[[rows, columns]]) { |'
- en: '| ​  | `memo`[[rows, columns]] = (uniquePaths(rows - 1, columns, memo) |'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `memo`[[rows, columns]] = (uniquePaths(rows - 1, columns, memo) |'
- en: '| ​  | + uniquePaths(rows, columns - 1, memo)); |'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | + uniquePaths(rows, columns - 1, memo)); |'
- en: '| ​  | } |'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return` memo[[rows, columns]]; |'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` memo[[rows, columns]]; |'
- en: '| ​  | } |'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
