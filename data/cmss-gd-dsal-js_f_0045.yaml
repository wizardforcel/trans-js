- en: A Linear Solution
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 线性解决方案
- en: What follows is another implementation of the `hasDuplicateValue` function that
    doesn’t rely on nested loops. It’s a bit clever, so let’s first look at how it
    works and then we’ll see if it’s any more efficient than our first implementation.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 接下来是另一个`hasDuplicateValue`函数的实现，它不依赖于嵌套循环。它有点聪明，所以让我们先看看它是如何工作的，然后再看看它是否比我们第一次的实现更高效。
- en: '|   | `function hasDuplicateValue(array) {` |'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '|   | `function hasDuplicateValue(array) {` |'
- en: '|   | `const existingNumbers = [];` |'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '|   | `const existingNumbers = [];` |'
- en: '|   |   |'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '|   |   |'
- en: '|   | `for (let i = 0; i < array.length; i += 1) {` |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '|   | `for (let i = 0; i < array.length; i += 1) {` |'
- en: '|   | `if (existingNumbers[array[i]] === 1) {` |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '|   | `if (existingNumbers[array[i]] === 1) {` |'
- en: '|   | `return true;` |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '|   | `return true;` |'
- en: '|   | `}` `else` `{` |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '|   | `}` `else` `{` |'
- en: '|   | `existingNumbers[array[i]] = 1;` |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '|   | `existingNumbers[array[i]] = 1;` |'
- en: '|   | `}` |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '|   | `}` |'
- en: '|   | `}` |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '|   | `}` |'
- en: '|   |   |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '|   |   |'
- en: '|   | `return false;` |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '|   | `return false;` |'
- en: '|   | `}` |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '|   | `}` |'
- en: Here’s what this function does. It creates an array called `existingNumbers`,
    which starts out empty.
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这个函数的作用是创建一个名为`existingNumbers`的数组，它最开始是空的。
- en: Then we use a loop to check each number in the input array. As it encounters
    each number, it places an arbitrary value (we’ve chosen to use a `1`) into `existingNumbers`
    at the index that is equal to the number we’re encountering.
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然后我们使用一个循环检查输入数组中的每个数字。当它遇到每个数字时，它会在等于我们正在遇到的数字的索引位置向`existingNumbers`中放置一个任意值（我们选择使用`1`）。
- en: 'For example, let’s say our input array is `[3, 5, 8]`. When we encounter the
    `3`, we place a `1` at index `3` of `existingNumbers`. So the `existingNumbers`
    array will now be the rough equivalent of this:'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，假设我们的输入数组是`[3, 5, 8]`。当我们遇到`3`时，我们在`existingNumbers`的索引`3`位置放置一个`1`。因此，`existingNumbers`数组现在大致相当于：
- en: '|   | `[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]` |'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '|   | `[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]` |'
- en: There’s now a `1` at index `3` of `existingNumbers`, to indicate and remember
    for the future that we’ve already encountered a `3` in our given array.
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在`existingNumbers`的索引`3`处现在有一个`1`，以指示并记住我们已经在给定数组中遇到过一个`3`。
- en: 'When our loop then encounters the `5` from the given array, it adds a `1` to
    index `5` of `existingNumbers`:'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当我们的循环遇到给定数组中的`5`时，它在`existingNumbers`的索引`5`位置添加一个`1`：
- en: '|   | `[0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0]` |'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '|   | `[0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0]` |'
- en: 'Finally, when we reach the `8`, `existingNumbers` will now look like this:'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 最后，当我们达到`8`时，`existingNumbers`现在看起来是这样的：
- en: '|   | `[0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0]` |'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '|   | `[0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0]` |'
- en: Essentially, we’re using the indexes of `existingNumbers` to remember which
    numbers from the array we’ve seen so far.
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 本质上，我们使用`existingNumbers`的索引来记住到目前为止我们从数组中见过哪些数字。
- en: Now, here’s the real trick. Before the code stores a `1` in the appropriate
    index, it first checks to see whether that index already has a `1` as its value.
    If it does, this means we’ve already encountered that number, meaning we found
    a duplicate. If this is the case, we simply return `true` and cut the function
    short. If we get to the end of the loop without having returned `true`, it means
    there are no duplicates and we return `false`.
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，这里有个真正的技巧。在代码将`1`存储到适当的索引之前，它首先检查该索引的值是否已经为`1`。如果是，这意味着我们已经遇到过那个数字，说明找到了重复项。如果是这种情况，我们只需返回`true`并中止函数。如果我们到达循环末尾而没有返回`true`，则意味着没有重复项，我们返回`false`。
- en: To determine the efficiency of this new algorithm in terms of Big O, we once
    again need to determine the number of steps the algorithm takes in a worst-case
    scenario.
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为了确定这个新算法在大O符号方面的效率，我们需要再次确定算法在最坏情况下所需的步骤数。
- en: 'Here, the significant type of step is looking at each number and checking whether
    the value of its index in `existingNumbers` is a `1`:'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这里，重要的步骤类型是查看每个数字并检查其在`existingNumbers`中的索引值是否为`1`：
- en: '|   | `if (existingNumbers[array[i]] === 1) {` |'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '|   | `if (existingNumbers[array[i]] === 1) {` |'
- en: (In addition to the comparisons, we also make insertions into the `existingNumbers`
    array, but we’re considering that kind of step trivial in this analysis. More
    on this in the next chapter.)
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: （除了比较，我们还对`existingNumbers`数组进行插入，但在此分析中我们认为这类步骤是微不足道的。关于这一点，我们将在下一章讨论。）
- en: In terms of the worst-case scenario, such a scenario would occur when the array
    contains no duplicates, in which case our function must complete the entire loop.
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在最坏情况下，这种情况发生在数组不包含重复项的情况下，这时我们的函数必须完成整个循环。
- en: 这个新算法似乎为N个数据元素进行了N次比较。这是因为只有一个循环，它只是为数组中的数字数量进行迭代。我们可以通过在JavaScript控制台中跟踪步骤来测试这个理论：
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这个新算法似乎为N个数据元素进行了N次比较。这是因为只有一个循环，它只是为数组中的数字数量进行迭代。我们可以通过在JavaScript控制台中跟踪步骤来测试这个理论：
- en: '| ​  | `function`​ hasDuplicateValue(array) { |'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function`​ hasDuplicateValue(array) { |'
- en: '| ​  | `let`​ steps = 0; |'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let`​ steps = 0; |'
- en: '| ​  | `const`​ existingNumbers = []; |'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const`​ existingNumbers = []; |'
- en: '| ​  |  |'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `for` (​`let`​ i = 0; i < array.length; i += 1) { |'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (​`let`​ i = 0; i < array.length; i += 1) { |'
- en: '| ​  | steps += 1; |'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | steps += 1; |'
- en: '| ​  | `if` (existingNumbers[array[i]] === 1) { |'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (existingNumbers[array[i]] === 1) { |'
- en: '| ​  | `return`​ `true`; |'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return`​ `true`; |'
- en: '| ​  | } `else` { |'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } `else` { |'
- en: '| ​  | existingNumbers[array[i]] = 1; |'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | existingNumbers[array[i]] = 1; |'
- en: '| ​  | } |'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `console.log(steps);` |'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `console.log(steps);` |'
- en: '| ​  | `return`​ `false`; |'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return`​ `false`; |'
- en: '| ​  | } |'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 如果我们现在运行`hasDuplicateValue([1, 4, 5, 2, 9])`，我们会看到JavaScript控制台中的输出是5，这与我们数组的大小相同。我们会发现这一点在所有大小的数组中都是成立的。因此，这个算法是O(N)。
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果我们现在运行`hasDuplicateValue([1, 4, 5, 2, 9])`，我们会看到JavaScript控制台中的输出是5，这与我们数组的大小相同。我们会发现这一点在所有大小的数组中都是成立的。因此，这个算法是O(N)。
- en: 我们知道O(N)比O(N²)快得多，因此通过使用这种第二种方法，我们显著优化了我们的`hasDuplicateValue`函数。这是一个巨大的速度提升。
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们知道O(N)比O(N²)快得多，因此通过使用这种第二种方法，我们显著优化了我们的`hasDuplicateValue`函数。这是一个巨大的速度提升。
- en: (这种新实现的一个缺点是，这种方法会比第一种方法消耗更多的内存。暂时不必担心这一点；我们将在第19章[​*处理空间限制*​](f_0189.xhtml#chp.dealing_with_space_constraints)中详细讨论。)
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: (这种新实现的一个缺点是，这种方法会比第一种方法消耗更多的内存。暂时不必担心这一点；我们将在第19章[​*处理空间限制*​](f_0189.xhtml#chp.dealing_with_space_constraints)中详细讨论。)
