- en: '| Recipe 48 | Testing a Pattern with the Negative Lookahead |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: '| 配方 48 | 使用负前瞻测试模式 |'
- en: Task
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务
- en: Suppose you want to match any two-digit number except 41, 66, and 77 because
    these are retired jersey numbers, so you want to make sure they don’t get reassigned
    to a new player.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想匹配除了41、66和77以外的任何两位数字，因为这些是退役球衣号码，所以你希望确保它们不会重新分配给新球员。
- en: You could use several character classes matching a range between 00 to 40, 42
    to 65, 67 to 76, and 78 to 99\. But you’d end up with a very long and complicated
    pattern. Fortunately, there’s a more compact way to get the same result with lookahead
    assertions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用多个字符类来匹配00到40、42到65、67到76以及78到99之间的范围。但最终你会得到一个非常长且复杂的模式。幸运的是，有一种更简洁的方法，通过前瞻断言可以得到相同的结果。
- en: Solution
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use a negative lookahead assertion denoted by (?! ... ):'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 使用负前瞻断言，表示为(?! ... )：
- en: '[part_2/negative_lookahead/negative_lookahead_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/negative_lookahead/negative_lookahead_ex1.js)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/negative_lookahead/negative_lookahead_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/negative_lookahead/negative_lookahead_ex1.js)'
- en: '|   | **const** re = */#**(?!**41&#124;66&#124;77**)\d{2}**/* |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** re = */#**(?!**41&#124;66&#124;77**)\d{2}**/* |'
- en: '|   |  |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | re.test(*"#00"*); *// → true* |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '|   | re.test(*"#00"*); *// → true* |'
- en: '|   | re.test(*"#39"*); *// → true* |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '|   | re.test(*"#39"*); *// → true* |'
- en: '|   | re.test(*"#41"*); *// → false* |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '|   | re.test(*"#41"*); *// → false* |'
- en: '|   | re.test(*"#66"*); *// → false* |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '|   | re.test(*"#66"*); *// → false* |'
- en: '|   | re.test(*"#77"*); *// → false* |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '|   | re.test(*"#77"*); *// → false* |'
- en: '|   | re.test(*"#98"*); *// → true* |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '|   | re.test(*"#98"*); *// → true* |'
- en: A negative lookahead matches a pattern not followed by another pattern. In this
    code, the negative lookahead ensures that the string following “#” isn’t “41,”
    “66,” or “77.”
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 负前瞻匹配一个不被另一个模式跟随的模式。在这段代码中，负前瞻确保在“#”后面跟的字符串不是“41”，“66”或“77”。
- en: Discussion
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论
- en: Negative lookahead is a type of non-capturing group denoted by the syntax (?!
    ... ), where the … represents the pattern that should not be present immediately
    after the current position in the string.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 负前瞻是一种非捕获组，表示语法(?! ... )，其中...表示在字符串当前位置之后不应该出现的模式。
- en: 'Let’s examine how the engine interprets the regex /#(?!(41|66|77))\d{2}/ when
    applied to the string “#39”:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下引擎如何解释正则表达式 /#(?!(41|66|77))\d{2}/，并应用于字符串“#39”：
- en: '|   | #39 |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '|   | #39 |'
- en: '|   | &#124; |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '|   | &#124; |'
- en: '|   | # matches a hash sign literally. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '|   | # 匹配字面上的井号符号。 |'
- en: '|   |  |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | #39 |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '|   | #39 |'
- en: '|   | &#124; |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '|   | &#124; |'
- en: '|   | (?!41&#124;66&#124;77) successfully matches a string that isn''t 41,
    66, or 77. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '|   | (?!41&#124;66&#124;77) 成功匹配一个不是41、66或77的字符串。 |'
- en: '|   | The pointer remains at #. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '|   | 指针仍然停留在#。 |'
- en: '|   |  |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | #39 |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '|   | #39 |'
- en: '|   | &#124; |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '|   | &#124; |'
- en: '|   | \d matches a digit. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '|   | \d 匹配一个数字。 |'
- en: '|   |  |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | #39 |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '|   | #39 |'
- en: '|   | &#124; |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '|   | &#124; |'
- en: '|   | \d matches a digit. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '|   | \d 匹配一个数字。 |'
- en: Lookaheads let you check whether you can match a specific string without actually
    matching it. Use a negative lookahead when you want to ensure a pattern does not
    follow another pattern.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 向前查找让你检查是否可以匹配某个特定字符串，而不实际进行匹配。当你想确保一个模式后面没有跟随另一个模式时，使用负向向前查找。
