- en: 'Module 10:'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 模块 10：
- en: '|'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Testing Vue.js Applications
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 测试 Vue.js 应用程序
- en: '|'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'In the landscape of web development, the reliability and stability of applications
    are paramount for a seamless user experience. The module "Testing Vue.js Applications"
    emerges as a pivotal section within the book "Vue.js Essentials: For Responsive
    Web Development," providing readers with a comprehensive exploration of testing
    methodologies in Vue.js. Developers will embark on a journey to understand the
    significance of testing, the tools available for Vue.js applications, and the
    best practices to ensure the robustness of their code.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '在 Web 开发的环境中，应用程序的可靠性和稳定性对提供流畅的用户体验至关重要。本模块《测试 Vue.js 应用程序》作为《Vue.js Essentials:
    For Responsive Web Development》一书中的关键部分，为读者提供了对 Vue.js 测试方法的全面探索。开发者将踏上理解测试重要性、可用于
    Vue.js 应用程序的工具以及确保代码健壮性的最佳实践的旅程。'
- en: The Imperative Role of Testing in Vue.js Development
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 开发中测试的必要性
- en: Before delving into the specifics of testing Vue.js applications, it is essential
    to recognize the imperative role of testing in the development life cycle. This
    module commences by highlighting the impact of testing on the overall quality,
    maintainability, and reliability of web applications. Readers gain an understanding
    of how a well-structured testing strategy can identify and prevent bugs, streamline
    development workflows, and contribute to the creation of robust and resilient
    Vue.js applications.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨 Vue.js 应用程序测试的具体细节之前，首先需要认识到测试在开发生命周期中的必要性。本模块通过强调测试对 Web 应用程序整体质量、可维护性和可靠性的影响，作为开篇。读者将理解一个结构良好的测试策略如何帮助识别和防止
    bug，简化开发工作流程，并有助于创建健壮且有弹性的 Vue.js 应用程序。
- en: 'Vue Test Utils: Unveiling the Testing Utility Library'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Vue Test Utils：揭示测试工具库
- en: At the core of testing Vue.js applications lies Vue Test Utils, a utility library
    designed specifically for testing Vue components. This segment delves into the
    fundamentals of Vue Test Utils, guiding readers through its usage for unit testing
    components, asserting component behaviors, and simulating user interactions. Developers
    will gain practical insights into creating test suites, writing test cases, and
    leveraging the utility functions provided by Vue Test Utils to ensure the correctness
    of their Vue.js components.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 测试 Vue.js 应用程序的核心是 Vue Test Utils，这是一个专为测试 Vue 组件而设计的工具库。本节深入探讨 Vue Test Utils
    的基本原理，带领读者了解如何使用它进行组件的单元测试、断言组件行为以及模拟用户交互。开发者将获得实用的见解，学习如何创建测试套件、编写测试用例，并利用 Vue
    Test Utils 提供的工具函数来确保 Vue.js 组件的正确性。
- en: 'Component Testing: Isolating and Validating Vue.js Components'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 组件测试：隔离和验证 Vue.js 组件
- en: The focus shifts to component testing, a crucial aspect of ensuring the reliability
    of Vue.js applications. This module explores strategies for isolating and testing
    Vue.js components in isolation, allowing developers to verify their functionality
    independently of the entire application. Readers will learn to write meaningful
    test cases for components, ensuring that each component behaves as expected and
    adheres to the specified requirements.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 焦点转向组件测试，这是确保 Vue.js 应用程序可靠性的关键环节。本模块探讨了在隔离环境中独立测试 Vue.js 组件的策略，使开发者能够验证组件的功能，而不依赖于整个应用程序。读者将学会为组件编写有意义的测试用例，确保每个组件都按预期行为执行，并符合指定的要求。
- en: 'End-to-End Testing with Cypress: Ensuring Application Workflow Integrity'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Cypress 进行端到端测试：确保应用程序工作流的完整性
- en: To comprehensively test Vue.js applications, end-to-end testing becomes an integral
    component. This segment introduces Cypress, a powerful end-to-end testing framework,
    and explores its integration with Vue.js applications. Developers will gain insights
    into creating end-to-end test scenarios, simulating user interactions across multiple
    components, and validating the integrity of the entire application workflow. By
    incorporating Cypress into their testing toolkit, developers can ensure that their
    Vue.js applications perform seamlessly in real-world usage scenarios.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了全面测试 Vue.js 应用程序，端到端测试成为了一个不可或缺的组成部分。本节介绍了 Cypress，一个强大的端到端测试框架，并探讨了它与 Vue.js
    应用程序的集成。开发者将深入了解如何创建端到端测试场景、模拟跨多个组件的用户交互，并验证整个应用程序工作流的完整性。通过将 Cypress 纳入测试工具包，开发者可以确保他们的
    Vue.js 应用程序在实际使用场景中无缝运行。
- en: '"Testing Vue.js Applications" stands as an indispensable module within "Vue.js
    Essentials: For Responsive Web Development," providing readers with a holistic
    understanding of testing methodologies in the Vue.js ecosystem. By unraveling
    the fundamentals of Vue Test Utils, exploring component testing strategies, and
    incorporating end-to-end testing with Cypress, developers gain the knowledge and
    skills needed to fortify their Vue.js applications against potential issues. This
    module equips developers with the tools to instill confidence in their codebase,
    fostering a development environment that prioritizes reliability and robustness.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: “测试 Vue.js 应用程序”是“Vue.js 基础：响应式 Web 开发”课程中不可或缺的模块，为读者提供了 Vue.js 生态系统中测试方法的全面理解。通过解开
    Vue Test Utils 的基础知识、探索组件测试策略并结合 Cypress 进行端到端测试，开发者将掌握加强 Vue.js 应用程序防范潜在问题所需的知识和技能。本模块为开发者提供了工具，帮助他们在代码库中建立信心，营造一个注重可靠性和健壮性的开发环境。
- en: Overview of Testing in Vue.js
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Vue.js 中的测试概述
- en: 'The "Testing Vue.js Applications" module in "Vue.js Essentials: For Responsive
    Web Development" begins with a crucial section titled "Overview of Testing in
    Vue.js." Testing is a cornerstone of building robust and reliable applications,
    and Vue.js provides a comprehensive testing ecosystem to streamline the process.
    This section acts as a gateway, introducing developers to the fundamental concepts,
    tools, and methodologies for testing Vue.js applications effectively.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '《Vue.js Essentials: For Responsive Web Development》中的“测试Vue.js应用程序”模块开始于一个关键部分，标题为“Vue.js中的测试概述”。测试是构建强大且可靠应用程序的基石，Vue.js提供了一个完整的测试生态系统来简化这一过程。这个部分作为一个入口，引导开发人员了解测试Vue.js应用程序的基本概念、工具和方法。'
- en: // SimpleComponent.spec.js
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: // SimpleComponent.spec.js
- en: import { mount } from '@vue/test-utils';
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: import { mount } from '@vue/test-utils';
- en: import SimpleComponent from '@/components/SimpleComponent.vue';
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: import SimpleComponent from '@/components/SimpleComponent.vue';
- en: describe('SimpleComponent', () => {
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: describe('SimpleComponent', () => {
- en: it('renders a message', () => {
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: it('渲染一条消息', () => {
- en: const wrapper = mount(SimpleComponent);
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: const wrapper = mount(SimpleComponent);
- en: expect(wrapper.text()).toMatch('Hello, Vue.js Testing!');
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: expect(wrapper.text()).toMatch('Hello, Vue.js Testing!');
- en: '});'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '});'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: The above example illustrates a basic test for a Vue.js component using Jest
    and Vue Test Utils. The mount function is employed to render the SimpleComponent,
    and the test asserts that the rendered text contains the expected message. This
    simplicity showcases the ease with which tests can be written to validate the
    behavior of Vue.js components.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例展示了一个使用Jest和Vue Test Utils进行Vue.js组件基本测试的实例。mount函数用于渲染SimpleComponent，测试断言渲染的文本包含预期的消息。这个简单示例展示了编写测试来验证Vue.js组件行为的便利性。
- en: 'The Testing Landscape in Vue.js: A Multifaceted Approach'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js中的测试领域：多维度的方法
- en: Vue.js supports a multifaceted approach to testing, accommodating various levels
    such as unit testing, component testing, and end-to-end testing. This allows developers
    to adopt a comprehensive strategy, ensuring that every aspect of their application
    is thoroughly validated.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js支持多维度的测试方法，涵盖了单元测试、组件测试和端到端测试等多个层级。这使得开发人员能够采用全面的策略，确保应用程序的各个方面都经过充分验证。
- en: // Counter.vue
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: // Counter.vue
- en: <template>
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <p>{{ count }}</p>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: <p>{{ count }}</p>
- en: <button @click="increment">Increment</button>
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="increment">增加</button>
- en: </div>
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'count: 0,'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 'count: 0,'
- en: '};'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: increment() {
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: increment() {
- en: this.count++;
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: this.count++;
- en: '},'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: // Counter.spec.js
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: // Counter.spec.js
- en: import { mount } from '@vue/test-utils';
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: import { mount } from '@vue/test-utils';
- en: import Counter from '@/components/Counter.vue';
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: import Counter from '@/components/Counter.vue';
- en: describe('Counter', () => {
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: describe('Counter', () => {
- en: it('increments count when button is clicked', async () => {
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: it('当按钮被点击时，计数增加', async () => {
- en: const wrapper = mount(Counter);
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: const wrapper = mount(Counter);
- en: await wrapper.find('button').trigger('click');
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: await wrapper.find('button').trigger('click');
- en: expect(wrapper.vm.count).toBe(1);
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: expect(wrapper.vm.count).toBe(1);
- en: '});'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '});'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: In this example, a Vue.js component named Counter is tested for the correct
    behavior of incrementing the count when the button is clicked. The asynchronous
    nature of the test is handled by using the async keyword and await for triggering
    the button click.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，测试了一个名为Counter的Vue.js组件，验证点击按钮时计数是否正确增加。由于测试是异步的，因此使用了async关键字和await来触发按钮点击事件。
- en: 'Snapshot Testing in Vue.js: Capturing Component Visuals'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js中的快照测试：捕获组件的视觉效果
- en: Vue.js integrates with Jest to support snapshot testing, a powerful technique
    to capture and validate component visuals over time. This technique ensures that
    the visual representation of components remains consistent, preventing unintended
    changes.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js与Jest集成，支持快照测试，这是一种强大的技术，用于捕获和验证组件随时间变化的视觉效果。该技术确保组件的视觉表现保持一致，防止意外变化。
- en: // SnapshotTestExample.spec.js
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: // SnapshotTestExample.spec.js
- en: import { mount } from '@vue/test-utils';
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: import { mount } from '@vue/test-utils';
- en: import SnapshotTestExample from '@/components/SnapshotTestExample.vue';
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: import SnapshotTestExample from '@/components/SnapshotTestExample.vue';
- en: describe('SnapshotTestExample', () => {
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: describe('SnapshotTestExample', () => {
- en: it('matches snapshot', () => {
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: it('匹配快照', () => {
- en: const wrapper = mount(SnapshotTestExample);
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: const wrapper = mount(SnapshotTestExample);
- en: expect(wrapper.html()).toMatchSnapshot();
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: expect(wrapper.html()).toMatchSnapshot();
- en: '});'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '});'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: In this instance, the test captures the HTML output of the SnapshotTestExample
    component and compares it against a stored snapshot. If any visual changes occur,
    developers are alerted, allowing them to review and confirm intentional modifications.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实例中，测试捕获SnapshotTestExample组件的HTML输出，并与存储的快照进行对比。如果发生任何视觉上的变化，开发者将被提醒，以便他们审核并确认是否为有意修改。
- en: 'Vue Test Utils and Beyond: Exploring Testing Utilities'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Vue Test Utils及其扩展：探索测试工具
- en: Vue Test Utils, the official testing library for Vue.js, empowers developers
    with a suite of utilities for rendering and interacting with Vue components in
    tests. However, the Vue.js testing ecosystem extends beyond Vue Test Utils, accommodating
    a variety of testing libraries and tools such as Jest, Mocha, and Cypress.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Vue Test Utils是Vue.js的官方测试库，为开发者提供了一套用于在测试中渲染和与Vue组件交互的工具。然而，Vue.js的测试生态系统超出了Vue
    Test Utils，支持各种测试库和工具，如Jest、Mocha和Cypress。
- en: // CustomTestingLibraryExample.spec.js
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: // CustomTestingLibraryExample.spec.js
- en: import { render, screen, fireEvent } from '@testing-library/vue';
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: import { render, screen, fireEvent } from '@testing-library/vue';
- en: import CustomTestingLibraryExample from '@/components/CustomTestingLibraryExample.vue';
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: import CustomTestingLibraryExample from '@/components/CustomTestingLibraryExample.vue';
- en: describe('CustomTestingLibraryExample', () => {
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: describe('CustomTestingLibraryExample', () => {
- en: it('renders a message', async () => {
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: it('渲染消息', async () => {
- en: render(CustomTestingLibraryExample);
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: render(CustomTestingLibraryExample);
- en: await fireEvent.click(screen.getByText('Click me'));
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: await fireEvent.click(screen.getByText('点击我'));
- en: expect(screen.getByText('Button clicked!')).toBeInTheDocument();
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: expect(screen.getByText('按钮已点击！')).toBeInTheDocument();
- en: '});'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '});'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: This example utilizes the Testing Library for Vue, showcasing a different approach
    to testing. The render function is used to render the CustomTestingLibraryExample
    component, and assertions are made using the screen object and utility functions
    like fireEvent.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例使用了Vue的测试库，展示了不同的测试方法。使用render函数来渲染CustomTestingLibraryExample组件，并通过screen对象和像fireEvent这样的工具函数进行断言。
- en: 'Conclusion: Navigating the Testing Landscape in Vue.js'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 结论：在Vue.js中导航测试领域
- en: '"Overview of Testing in Vue.js" serves as a compass for developers venturing
    into the testing landscape of Vue.js applications. By introducing fundamental
    concepts and practical examples, this section equips developers with the knowledge
    needed to embark on a robust testing journey. Whether employing Vue Test Utils
    for component testing or embracing snapshot testing with Jest, developers gain
    a comprehensive understanding of testing methodologies crucial for ensuring the
    reliability and stability of their Vue.js applications. The journey through testing
    in Vue.js becomes not only an essential aspect of development but also an empowering
    experience that fosters confidence in the application''s behavior and visuals.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: “Vue.js中的测试概览”作为开发者进入Vue.js应用测试领域的指南。通过介绍基本概念和实际示例，本节为开发者提供了开展强大测试之旅所需的知识。无论是使用Vue
    Test Utils进行组件测试，还是通过Jest进行快照测试，开发者都能全面了解确保Vue.js应用可靠性和稳定性所必需的测试方法。Vue.js中的测试之旅不仅是开发的关键环节，而且是一个充满力量的经历，增强了开发者对应用行为和视觉效果的信心。
- en: Unit Testing with Jest
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Jest进行单元测试
- en: 'The module "Testing Vue.js Applications" in "Vue.js Essentials: For Responsive
    Web Development" dedicates a pivotal section to "Unit Testing with Jest." Unit
    testing is a cornerstone of software development, ensuring the reliability and
    correctness of individual units of code. With Jest being a popular testing framework,
    this section serves as a comprehensive guide on leveraging Jest''s capabilities
    to conduct unit tests for Vue.js applications.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 《Vue.js基础：响应式Web开发》中的“测试Vue.js应用程序”模块专门有一节讲解“使用Jest进行单元测试”。单元测试是软件开发的基石，确保代码中每个单元的可靠性和正确性。Jest作为一个流行的测试框架，本节内容将作为全面指南，帮助开发者利用Jest的功能对Vue.js应用进行单元测试。
- en: // Counter.vue
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: // Counter.vue
- en: <template>
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <p>{{ count }}</p>
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: <p>{{ count }}</p>
- en: <button @click="increment">Increment</button>
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="increment">递增</button>
- en: </div>
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'count: 0,'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 'count: 0,'
- en: '};'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: increment() {
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: increment() {
- en: this.count++;
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: this.count++;
- en: '},'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: Consider a simple Vue.js component named Counter that increments a count when
    a button is clicked. This component becomes a subject for unit testing with Jest,
    providing a tangible example of how to ensure its functionality through rigorous
    testing.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有一个简单的Vue.js组件Counter，当点击按钮时，它会增加一个计数值。这个组件将作为使用Jest进行单元测试的示例，提供一个具体的方式来确保其功能通过严格的测试得到验证。
- en: 'Writing Unit Tests with Jest: Ensuring Component Functionality'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Jest 编写单元测试：确保组件功能
- en: Jest simplifies the unit testing process for Vue.js components, offering a straightforward
    syntax for writing tests. The following Jest test file, Counter.spec.js, illustrates
    how to create a unit test for the Counter component to verify its behavior.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Jest 简化了 Vue.js 组件的单元测试过程，提供了简单的语法来编写测试。以下 Jest 测试文件 Counter.spec.js 演示了如何为
    Counter 组件创建单元测试以验证其行为。
- en: // Counter.spec.js
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: // Counter.spec.js
- en: import { mount } from '@vue/test-utils';
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: import { mount } from '@vue/test-utils';
- en: import Counter from '@/components/Counter.vue';
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: import Counter from '@/components/Counter.vue';
- en: describe('Counter', () => {
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: describe('Counter', () => {
- en: it('increments count when button is clicked', async () => {
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: it('点击按钮时递增计数', async () => {
- en: const wrapper = mount(Counter);
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: const wrapper = mount(Counter);
- en: await wrapper.find('button').trigger('click');
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: await wrapper.find('button').trigger('click');
- en: expect(wrapper.vm.count).toBe(1);
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: expect(wrapper.vm.count).toBe(1);
- en: '});'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '});'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: In this test, the mount function from @vue/test-utils is used to render the
    Counter component. Subsequently, the trigger method simulates a button click,
    and the test asserts that the count data property increments to the expected value.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个测试中，使用 @vue/test-utils 中的 mount 函数来渲染 Counter 组件。随后，trigger 方法模拟了一个按钮点击，测试验证
    count 数据属性是否递增到预期值。
- en: 'Jest Snapshots: Capturing Visuals for Future Validation'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Jest 快照：捕捉视觉效果以便未来验证
- en: Jest introduces the concept of snapshots, enabling developers to capture the
    rendered output of components and validate against it in subsequent tests. This
    proves particularly useful for ensuring that the visual representation of components
    remains consistent over time.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Jest 引入了快照的概念，使开发人员能够捕获组件的渲染输出，并在后续测试中与之进行验证。这对于确保组件的视觉表现随时间保持一致非常有用。
- en: // SnapshotTestExample.spec.js
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: // SnapshotTestExample.spec.js
- en: import { mount } from '@vue/test-utils';
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: import { mount } from '@vue/test-utils';
- en: import SnapshotTestExample from '@/components/SnapshotTestExample.vue';
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: import SnapshotTestExample from '@/components/SnapshotTestExample.vue';
- en: describe('SnapshotTestExample', () => {
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: describe('SnapshotTestExample', () => {
- en: it('matches snapshot', () => {
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: it('匹配快照', () => {
- en: const wrapper = mount(SnapshotTestExample);
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: const wrapper = mount(SnapshotTestExample);
- en: expect(wrapper.html()).toMatchSnapshot();
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: expect(wrapper.html()).toMatchSnapshot();
- en: '});'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '});'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: In this example, the toMatchSnapshot function is employed to capture the HTML
    output of the SnapshotTestExample component. If any unintended changes occur in
    the component's visual representation, Jest alerts developers, allowing them to
    review and confirm or update the snapshot accordingly.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，toMatchSnapshot 函数被用来捕获 SnapshotTestExample 组件的 HTML 输出。如果组件的视觉表现发生了任何不期望的变化，Jest
    会提醒开发人员，让他们查看并确认或更新快照。
- en: 'Jest Mocks: Isolating Components for Focused Testing'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Jest 模拟：隔离组件以进行聚焦测试
- en: Jest provides powerful mocking capabilities, allowing developers to isolate
    components and focus on testing specific behavior without relying on the complete
    integration of the application. This is particularly beneficial for unit tests
    where the goal is to verify individual units of code.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Jest提供了强大的模拟能力，使开发者能够隔离组件，专注于测试特定的行为，而不依赖于应用程序的完整集成。这对于单元测试尤为有利，单元测试的目标是验证单个代码单元。
- en: // MockingExample.spec.js
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: // MockingExample.spec.js
- en: import { mount } from '@vue/test-utils';
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 从'@vue/test-utils'导入{ mount };
- en: import MockingExample from '@/components/MockingExample.vue';
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 从'@/components/MockingExample.vue'导入MockingExample;
- en: jest.mock('@/services/apiService', () => ({
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: jest.mock('@/services/apiService', () => ({
- en: 'fetchData: jest.fn(() => Promise.resolve(''Mocked Data'')),'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 'fetchData: jest.fn(() => Promise.resolve(''模拟数据'')),'
- en: '}));'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '}));'
- en: describe('MockingExample', () => {
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 描述('MockingExample', () => {
- en: it('displays mocked data on button click', async () => {
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 它('在按钮点击时显示模拟数据', async () => {
- en: const wrapper = mount(MockingExample);
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: const wrapper = mount(MockingExample);
- en: await wrapper.find('button').trigger('click');
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: await wrapper.find('button').trigger('click');
- en: expect(wrapper.text()).toContain('Mocked Data');
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: expect(wrapper.text()).toContain('模拟数据');
- en: '});'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '});'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: In this test, the jest.mock function is utilized to mock the apiService module.
    This ensures that the test focuses solely on the behavior of the MockingExample
    component without making actual API calls.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个测试中，使用了jest.mock函数来模拟apiService模块。这确保了测试仅关注MockingExample组件的行为，而不进行实际的API调用。
- en: 'Conclusion: Jest as a Pillar of Vue.js Testing'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 结论：Jest作为Vue.js测试的支柱
- en: '"Unit Testing with Jest" within the "Testing Vue.js Applications" module establishes
    Jest as a pillar of Vue.js testing, providing developers with powerful tools to
    ensure the robustness and correctness of their components. From straightforward
    unit tests to visual snapshots and powerful mocks, Jest''s versatility empowers
    developers to conduct comprehensive testing. As Vue.js applications grow in complexity,
    the knowledge gained from this section becomes instrumental in establishing a
    solid testing foundation, fostering confidence in the reliability and functionality
    of Vue.js applications. Developers are equipped not only with the practical skills
    for effective testing but also with the understanding of how Jest serves as an
    invaluable ally in the pursuit of robust Vue.js development.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '"Jest单元测试"在"Vue.js应用程序测试"模块中确立了Jest作为Vue.js测试的支柱，为开发者提供了强大的工具，以确保组件的稳健性和正确性。从简单的单元测试到视觉快照和强大的模拟，Jest的多功能性使得开发者能够进行全面的测试。随着Vue.js应用程序复杂性的增长，本部分所获得的知识对于建立稳固的测试基础至关重要，帮助增强对Vue.js应用程序可靠性和功能性的信心。开发者不仅掌握了有效测试的实际技能，还理解了Jest如何成为在追求强健Vue.js开发过程中的宝贵伙伴。'
- en: End-to-End Testing with Cypress
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Cypress进行端到端测试
- en: 'The "Testing Vue.js Applications" module in "Vue.js Essentials: For Responsive
    Web Development" delves into the crucial realm of end-to-end testing, with a dedicated
    section titled "End-to-End Testing with Cypress." End-to-end (E2E) testing is
    a pivotal aspect of ensuring the seamless functionality and user experience of
    Vue.js applications across the entire stack. Cypress, a powerful E2E testing framework,
    takes center stage in this section, offering developers an intuitive and effective
    toolset for comprehensive application validation.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '《Vue.js Essentials: For Responsive Web Development》中的“Testing Vue.js Applications”模块深入探讨了端到端测试这一关键领域，其中有一节专门介绍了“使用
    Cypress 进行端到端测试”。端到端（E2E）测试是确保 Vue.js 应用程序在整个堆栈中无缝功能和用户体验的关键环节。Cypress 作为一个强大的
    E2E 测试框架，在这一部分中占据了重要地位，为开发人员提供了一个直观且有效的工具集，用于全面的应用验证。'
- en: // Counter.vue
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: // Counter.vue
- en: <template>
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <p>{{ count }}</p>
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: <p>{{ count }}</p>
- en: <button @click="increment">Increment</button>
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="increment">增加</button>
- en: </div>
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'count: 0,'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 'count: 0,'
- en: '};'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: increment() {
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: increment() {
- en: this.count++;
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: this.count++;
- en: '},'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: Consider a simple Vue.js component, Counter, featuring a button that increments
    a count when clicked. This component becomes a test subject for end-to-end testing
    using Cypress, exemplifying how to validate the complete functionality of a Vue.js
    application.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个简单的 Vue.js 组件——计数器（Counter），它包含一个按钮，点击按钮时会增加计数。这个组件成为了使用 Cypress 进行端到端测试的测试对象，展示了如何验证一个
    Vue.js 应用程序的完整功能。
- en: 'Writing End-to-End Tests with Cypress: Ensuring User Interactions'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Cypress 编写端到端测试：确保用户交互
- en: Cypress simplifies the process of writing end-to-end tests by providing a declarative
    syntax and a real-time browser preview. The following Cypress test file, counter_spec.js,
    showcases how to create an end-to-end test for the Counter component, validating
    user interactions.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress 简化了编写端到端测试的过程，通过提供声明式的语法和实时浏览器预览。以下是一个 Cypress 测试文件 counter_spec.js，展示了如何为计数器组件创建端到端测试，验证用户交互。
- en: // counter_spec.js
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: // counter_spec.js
- en: describe('Counter', () => {
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: describe('计数器', () => {
- en: it('increments count when button is clicked', () => {
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: it('点击按钮时计数增加', () => {
- en: cy.visit('/counter');
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: cy.visit('/counter');
- en: cy.get('button').click();
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: cy.get('button').click();
- en: cy.get('p').should('have.text', '1');
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: cy.get('p').should('have.text', '1');
- en: '});'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '});'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: In this test, cy.visit is used to navigate to the /counter route, representing
    the component's page. Subsequently, cy.get is employed to select the button element,
    and click triggers a simulated button click. The test then asserts that the paragraph
    element contains the expected count.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个测试中，使用 cy.visit 导航到 /counter 路由，代表该组件的页面。接着，使用 cy.get 选择按钮元素，并通过 click 模拟按钮点击。测试接着验证段落元素是否包含期望的计数值。
- en: 'Visual Validation with Cypress: Ensuring UI Consistency'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Cypress 进行视觉验证：确保 UI 一致性
- en: Cypress extends beyond functional validation to include visual validation, allowing
    developers to confirm the visual integrity of their applications. The cy.screenshot
    command captures screenshots during test execution, enabling developers to visually
    inspect changes over time.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress 不仅局限于功能验证，还包括视觉验证，允许开发人员确认其应用程序的视觉完整性。`cy.screenshot` 命令在测试执行过程中捕获屏幕截图，使开发人员能够在不同的测试运行中直观地检查变化。
- en: // visual_validation_spec.js
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: // visual_validation_spec.js
- en: describe('Visual Validation', () => {
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: describe('视觉验证', () => {
- en: it('captures a screenshot of the Counter component', () => {
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: it('捕获计数器组件的屏幕截图', () => {
- en: cy.visit('/counter');
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: cy.visit('/counter');
- en: cy.screenshot('counter-component');
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: cy.screenshot('counter-component');
- en: '});'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '});'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: Here, the cy.screenshot command captures a screenshot of the Counter component.
    This visual validation proves valuable in ensuring that the component's visual
    representation remains consistent across different test runs.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`cy.screenshot` 命令捕获了计数器组件的屏幕截图。这个视觉验证对于确保组件的视觉表现随着不同的测试运行保持一致非常有价值。
- en: 'Cypress Commands and Custom Assertions: Tailoring Tests to Specific Needs'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress 命令和自定义断言：根据特定需求定制测试
- en: Cypress empowers developers with a rich set of built-in commands and the flexibility
    to create custom commands and assertions. This allows developers to tailor tests
    to their specific application requirements, fostering a test suite that aligns
    with the unique characteristics of their Vue.js projects.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress 为开发人员提供了一组丰富的内置命令，并且具有创建自定义命令和断言的灵活性。这使得开发人员能够根据特定的应用需求定制测试，从而打造一个与
    Vue.js 项目独特特性相契合的测试套件。
- en: // custom_commands_spec.js
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: // custom_commands_spec.js
- en: Cypress.Commands.add('clickIncrementButton', () => {
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress.Commands.add('clickIncrementButton', () => {
- en: cy.get('button').click();
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: cy.get('button').click();
- en: '});'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: describe('Custom Commands', () => {
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: describe('自定义命令', () => {
- en: it('increments count using custom command', () => {
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: it('使用自定义命令增加计数', () => {
- en: cy.visit('/counter');
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: cy.visit('/counter');
- en: cy.clickIncrementButton();
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: cy.clickIncrementButton();
- en: cy.get('p').should('have.text', '1');
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: cy.get('p').should('have.text', '1');
- en: '});'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '});'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: In this example, a custom command, clickIncrementButton, is created to abstract
    the logic of clicking the increment button. This promotes code reuse and enhances
    the readability of tests.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，创建了一个名为 `clickIncrementButton` 的自定义命令，用于封装点击增加按钮的逻辑。这促进了代码的重用，提高了测试的可读性。
- en: 'Conclusion: Cypress as a Comprehensive E2E Testing Solution'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 结论：Cypress 作为一个全面的 E2E 测试解决方案
- en: The "End-to-End Testing with Cypress" section within the "Testing Vue.js Applications"
    module positions Cypress as a comprehensive solution for E2E testing in Vue.js
    development. By showcasing practical examples of writing tests, capturing visual
    snapshots, and utilizing custom commands, developers gain proficiency in leveraging
    Cypress to validate their Vue.js applications thoroughly. This knowledge equips
    developers with the tools to ensure not only the functionality but also the visual
    consistency and user interactions of their Vue.js applications, contributing to
    the creation of robust and reliable software. Cypress stands as a valuable ally,
    streamlining the process of end-to-end testing and providing a robust foundation
    for building high-quality Vue.js applications.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '"End-to-End 测试与 Cypress"章节，在“Testing Vue.js Applications”模块中，将 Cypress 定位为
    Vue.js 开发中端到端（E2E）测试的全面解决方案。通过展示编写测试、捕获视觉快照和使用自定义命令的实际示例，开发人员可以熟练掌握如何利用 Cypress
    对其 Vue.js 应用进行全面验证。这些知识为开发人员提供了确保 Vue.js 应用程序功能、视觉一致性和用户交互的工具，从而有助于创建稳健可靠的软件。Cypress
    成为一个宝贵的伙伴，简化了端到端测试过程，为构建高质量的 Vue.js 应用提供了坚实的基础。'
- en: Best Practices for Testing Vue.js Apps
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试 Vue.js 应用的最佳实践
- en: 'Within the module "Testing Vue.js Applications" in "Vue.js Essentials: For
    Responsive Web Development," the section on "Best Practices for Testing Vue.js
    Apps" serves as a guiding compass for developers striving to enhance the quality
    and effectiveness of their tests. Establishing a robust testing foundation is
    crucial for maintaining the reliability and stability of Vue.js applications,
    and adhering to best practices ensures that tests remain a valuable asset throughout
    the development lifecycle.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '在“Vue.js Essentials: For Responsive Web Development”模块中的“Testing Vue.js Applications”部分，“最佳实践：测试
    Vue.js 应用”章节为开发人员提供了一个指导方向，帮助他们提升测试的质量和有效性。建立坚实的测试基础对于维持 Vue.js 应用的可靠性和稳定性至关重要，遵循最佳实践可以确保测试在整个开发生命周期中都能成为有价值的资产。'
- en: // Counter.vue
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: // Counter.vue
- en: <template>
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <p>{{ count }}</p>
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: <p>{{ count }}</p>
- en: <button @click="increment">Increment</button>
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="increment">递增</button>
- en: </div>
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'count: 0,'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 'count: 0,'
- en: '};'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: increment() {
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: increment() {
- en: this.count++;
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: this.count++;
- en: '},'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: Consider a simple Vue.js component, Counter, that increments a count when a
    button is clicked. This component becomes a canvas for applying best practices
    in testing, ensuring that the tests remain maintainable and effective as the application
    evolves.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个简单的 Vue.js 组件，Counter，当按钮被点击时会递增计数。这个组件成为了应用最佳实践进行测试的画布，确保随着应用的演进，测试保持可维护性和有效性。
- en: 'Isolation and Independence: Testing Components in Isolation'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 隔离性与独立性：在隔离中测试组件
- en: One best practice is to test Vue.js components in isolation, focusing on their
    individual behavior without relying on the state or behavior of other components.
    This practice enhances test independence and reduces the likelihood of false positives
    or negatives.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 一种最佳实践是将Vue.js组件进行单独测试，专注于其自身行为，而不依赖其他组件的状态或行为。这种做法增强了测试的独立性，减少了假阳性或假阴性的可能性。
- en: // Counter.spec.js
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: // Counter.spec.js
- en: import { mount } from '@vue/test-utils';
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: import { mount } from '@vue/test-utils';
- en: import Counter from '@/components/Counter.vue';
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: import Counter from '@/components/Counter.vue';
- en: describe('Counter', () => {
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: describe('计数器', () => {
- en: it('increments count when button is clicked', async () => {
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: it('点击按钮时增加计数', async () => {
- en: const wrapper = mount(Counter);
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: const wrapper = mount(Counter);
- en: await wrapper.find('button').trigger('click');
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: await wrapper.find('button').trigger('click');
- en: expect(wrapper.vm.count).toBe(1);
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: expect(wrapper.vm.count).toBe(1);
- en: '});'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: it('does not depend on the state of another component', () => {
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: it('不依赖于另一个组件的状态', () => {
- en: const wrapper = mount(Counter);
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: const wrapper = mount(Counter);
- en: // Additional test logic without relying on other components
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: // 额外的测试逻辑，不依赖于其他组件
- en: '});'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '});'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: In this example, the second test ensures that the Counter component does not
    rely on the state of another component. This promotes test isolation and independence.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，第二个测试确保计数器组件不依赖于其他组件的状态。这促进了测试的隔离性和独立性。
- en: 'Maintaining Clear and Descriptive Tests: Readability Matters'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 保持清晰和描述性的测试：可读性很重要
- en: Clear and descriptive tests are crucial for the maintainability of test suites.
    Employing meaningful test names and organizing test logic in a readable manner
    contributes to the longevity and understandability of tests.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 清晰和描述性的测试对测试套件的可维护性至关重要。使用有意义的测试名称并以可读的方式组织测试逻辑，有助于测试的长久性和可理解性。
- en: // Counter.spec.js
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: // Counter.spec.js
- en: describe('Counter', () => {
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: describe('计数器', () => {
- en: it('increments count when button is clicked', async () => {
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: it('点击按钮时增加计数', async () => {
- en: // Test logic
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: // 测试逻辑
- en: '});'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: it('does not depend on the state of another component', () => {
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: it('不依赖于另一个组件的状态', () => {
- en: // Test logic
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: // 测试逻辑
- en: '});'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: it('renders the initial count correctly', () => {
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: it('正确渲染初始计数', () => {
- en: // Test logic
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: // 测试逻辑
- en: '});'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '});'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: In this snippet, each test is named descriptively, conveying the expected behavior
    or scenario being tested. This naming convention enhances the clarity of the test
    suite.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，每个测试都被描述性地命名，传达了预期的行为或正在测试的场景。这样的命名规范提高了测试套件的清晰度。
- en: 'Mocking External Dependencies: Ensuring Test Predictability'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟外部依赖：确保测试的可预测性
- en: When testing components that interact with external dependencies, it is a best
    practice to use mocks to ensure test predictability and prevent unintended side
    effects.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 当测试与外部依赖交互的组件时，最佳实践是使用模拟（mocks）来确保测试的可预测性，并防止意外的副作用。
- en: // ApiService.spec.js
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: // ApiService.spec.js
- en: import { mount } from '@vue/test-utils';
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: import { mount } from '@vue/test-utils';
- en: import ApiService from '@/services/ApiService.vue';
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: import ApiService from '@/services/ApiService.vue';
- en: jest.mock('@/utils/httpClient', () => ({
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: jest.mock('@/utils/httpClient', () => ({
- en: 'get: jest.fn(() => Promise.resolve({ data: ''Mocked Data'' })),'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 'get: jest.fn(() => Promise.resolve({ data: ''Mocked Data'' })),'
- en: '}));'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '}));'
- en: describe('ApiService', () => {
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: describe('ApiService', () => {
- en: it('fetches data from the API', async () => {
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: it('从 API 获取数据', async () => {
- en: const wrapper = mount(ApiService);
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: const wrapper = mount(ApiService);
- en: await wrapper.vm.fetchData();
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: await wrapper.vm.fetchData();
- en: expect(wrapper.vm.data).toBe('Mocked Data');
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: expect(wrapper.vm.data).toBe('Mocked Data');
- en: '});'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '});'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: In this example, the httpClient module is mocked using jest.mock to control
    the behavior of the API service during testing.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，httpClient 模块通过 jest.mock 进行模拟，以控制 API 服务在测试期间的行为。
- en: 'Continuous Integration and Automated Testing: Seamless Integration into the
    Development Workflow'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成与自动化测试：无缝集成到开发工作流中
- en: Integrating testing into the continuous integration (CI) pipeline ensures that
    tests are executed automatically with every code change. This practice facilitates
    early detection of issues and promotes a seamless development workflow.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 将测试集成到持续集成（CI）流水线中，确保每次代码更改时自动执行测试。这种做法有助于及早发现问题，并促进无缝的开发工作流。
- en: .github/workflows/ci.yml
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .github/workflows/ci.yml
- en: 'name: Continuous Integration'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: 持续集成'
- en: 'on:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 'on:'
- en: 'push:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 'push:'
- en: 'branches:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 'branches:'
- en: '- main'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '- main'
- en: 'jobs:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 'jobs:'
- en: 'test:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 'test:'
- en: 'runs-on: ubuntu-latest'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 'runs-on: ubuntu-latest'
- en: 'steps:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 'steps:'
- en: '- name: Checkout code'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '- name: 检出代码'
- en: 'uses: actions/checkout@v2'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 'uses: actions/checkout@v2'
- en: '- name: Setup Node.js'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '- name: 设置 Node.js'
- en: 'uses: actions/setup-node@v2'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 'uses: actions/setup-node@v2'
- en: 'with:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 'with:'
- en: 'node-version: 14'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 'node-version: 14'
- en: '- name: Install dependencies'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '- name: 安装依赖'
- en: 'run: npm install'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 'run: npm install'
- en: '- name: Run tests'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '- name: 运行测试'
- en: 'run: npm test'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 'run: npm test'
- en: This GitHub Actions workflow example showcases how tests can be seamlessly integrated
    into the CI pipeline, providing automated testing on each push to the main branch.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 GitHub Actions 工作流示例展示了如何将测试无缝集成到 CI 流水线中，为每次推送到主分支的代码提供自动化测试。
- en: Elevating Vue.js Testing to Best Practices
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 提升 Vue.js 测试到最佳实践
- en: '"Best Practices for Testing Vue.js Apps" within the "Testing Vue.js Applications"
    module acts as a compass, guiding developers toward establishing a solid testing
    foundation. By embracing isolation, maintaining clear tests, mocking external
    dependencies, and integrating testing into CI workflows, developers ensure that
    their tests not only verify the current functionality but also adapt effectively
    as the application evolves. These best practices contribute to the creation of
    a robust and maintainable test suite, making testing an integral and efficient
    part of the Vue.js development process. Developers armed with these practices
    are well-equipped to navigate the evolving landscape of Vue.js applications, ensuring
    their longevity and reliability.'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '"《Vue.js 应用测试最佳实践》" 在 "测试 Vue.js 应用程序" 模块中起到了指南针的作用，帮助开发者建立一个扎实的测试基础。通过采用隔离测试、保持测试清晰、模拟外部依赖以及将测试集成到
    CI 工作流中，开发者可以确保他们的测试不仅验证当前的功能，还能够随着应用程序的演进有效适应。这些最佳实践有助于创建一个强大且易于维护的测试套件，使测试成为
    Vue.js 开发过程中的一个不可或缺且高效的部分。掌握这些实践的开发者，能够很好地应对 Vue.js 应用程序不断变化的环境，确保其长期性和可靠性。'
