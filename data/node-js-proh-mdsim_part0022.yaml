- en: 'Chapter 2: JavaScript Syntax, Operators, and Expressions'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章：JavaScript 语法、运算符和表达式
- en: In Chapter 1, we gained an understanding of the basics of JavaScript, including
    its history, role in web development, and how to set up a development environment.
    Now, let's dive deeper into JavaScript syntax, operators, and expressions. These
    foundational concepts will pave the way for writing more complex and interactive
    JavaScript code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 1 章中，我们了解了 JavaScript 的基础知识，包括它的历史、在网页开发中的角色，以及如何设置开发环境。现在，让我们深入探讨 JavaScript
    语法、运算符和表达式。这些基础概念将为编写更复杂和交互性的 JavaScript 代码铺平道路。
- en: 2.1 JavaScript Syntax
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.1 JavaScript 语法
- en: Syntax refers to the set of rules that govern how code should be written in
    a programming language. Proper syntax ensures that the code is structured correctly
    and can be understood by both humans and machines. Let's explore some essential
    aspects of JavaScript syntax.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 语法是指一组规则，用于规定如何在编程语言中编写代码。正确的语法确保代码结构正确，并且能够被人类和机器理解。让我们来探索一些 JavaScript 语法的基本方面。
- en: 2.1.1 Statements and Semicolons
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.1.1 语句和分号
- en: In JavaScript, statements are the building blocks of code. A statement is an
    instruction that performs a specific action. Each statement in JavaScript ends
    with a semicolon (;), indicating the completion of the statement. While semicolons
    are not always mandatory in JavaScript, it is considered good practice to use
    them consistently to avoid potential issues.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，语句是代码的构建块。语句是执行特定操作的指令。每个 JavaScript 语句以分号（;）结束，表示语句的结束。虽然在 JavaScript
    中分号不是强制要求的，但一致使用分号是一种良好的实践，能够避免潜在的问题。
- en: 'For example, the following statements assign values to variables:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，下面的语句为变量赋值：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 2.1.2 Comments
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.1.2 注释
- en: 'Comments are used to add explanatory notes within the code. They are ignored
    by the JavaScript engine and are intended for developers to provide context and
    make their code more readable. There are two types of comments in JavaScript:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 注释用于在代码中添加解释性说明。它们会被 JavaScript 引擎忽略，目的是让开发者提供上下文信息并使代码更具可读性。在 JavaScript 中有两种类型的注释：
- en: '- Single-line comments: denoted by two forward slashes (//). Anything after
    the // is considered a comment and will not be executed by the browser.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '- 单行注释：由两个斜杠（//）表示。// 后面的内容被视为注释，浏览器不会执行这些内容。'
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '- Multi-line comments: enclosed between /* and */. Multi-line comments can
    span multiple lines and are useful for providing longer explanations or commenting
    out sections of code.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '- 多行注释：用 /* 和 */ 包围。多行注释可以跨越多行，适用于提供更长的解释或注释掉代码块。'
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 2.2 JavaScript Operators
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.2 JavaScript 运算符
- en: Operators in JavaScript are symbols that perform operations on operands (values
    or variables). They allow us to perform mathematical computations, compare values,
    assign values, and more. Let's explore some commonly used operators in JavaScript.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中的运算符是执行操作的符号，作用于操作数（值或变量）。它们允许我们进行数学运算、比较值、赋值等操作。让我们探索一些 JavaScript
    中常用的运算符。
- en: 2.2.1 Arithmetic Operators
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.2.1 算术运算符
- en: 'Arithmetic operators are used to perform mathematical calculations. JavaScript
    includes the following arithmetic operators:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 算术运算符用于执行数学计算。JavaScript 包含以下算术运算符：
- en: '- Addition (+): Adds two numbers or concatenates two strings.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 加法（+）：将两个数字相加，或连接两个字符串。
- en: '- Subtraction (-): Subtracts one number from another.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 减法（-）：从一个数字中减去另一个数字。
- en: '- Multiplication (*): Multiplies two numbers.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 乘法（*）：将两个数字相乘。
- en: '- Division (/): Divides one number by another.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 除法（/）：将一个数字除以另一个数字。
- en: '- Modulus (%): Returns the remainder after division.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 取余（%）：返回除法后的余数。
- en: '- Increment (++): Increments a value by 1.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 增加（++）：将值增加 1。
- en: '- Decrement (--): Decrements a value by 1.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 递减（--）：将值减少 1。
- en: 'Here''s an example demonstrating the use of arithmetic operators:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个示例，演示算术运算符的使用：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 2.2.2 Assignment Operators
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.2.2 赋值运算符
- en: 'Assignment operators are used to assign values to variables. They combine the
    assignment (=) operator with other arithmetic or logical operators. The most common
    assignment operators are:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 赋值运算符用于将值赋给变量。它们将赋值（=）运算符与其他算术或逻辑运算符结合使用。最常见的赋值运算符有：
- en: '- `=`: Assigns a value to a variable.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`=`：将一个值赋给一个变量。'
- en: '- `+=`: Adds a value to the current value of a variable and assigns the result.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`+=`：将一个值加到变量的当前值，并将结果赋给该变量。'
- en: '- `-=`: Subtracts a value from the current value of a variable and assigns
    the result.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`-=`：从变量的当前值中减去一个值，并将结果赋给该变量。'
- en: '- `*=`: Multiplies the current value of a variable by a value and assigns the
    result.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`*=`：将变量的当前值乘以一个值，并将结果赋给该变量。'
- en: '- `/=`: Divides the current value of a variable by a value and assigns the
    result.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`/=`：将变量的当前值除以一个值，并将结果赋给该变量。'
- en: 'Here''s an example illustrating the use of assignment operators:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个示例，演示赋值运算符的使用：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 2.2.3 Comparison Operators
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.2.3 比较运算符
- en: 'Comparison operators are used to compare values and return a Boolean result
    (true or false). They are commonly used in conditional statements and loops. Here
    are some of the comparison operators in JavaScript:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 比较运算符用于比较值并返回布尔结果（真或假）。它们通常用于条件语句和循环中。以下是 JavaScript 中的一些比较运算符：
- en: '- `==`: Checks if two values are equal.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`==`：检查两个值是否相等。'
- en: '- `!=`: Checks if two values are not equal.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`!=`：检查两个值是否不相等。'
- en: '- `>`: Checks if the value on the left is greater than the value on the right.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`>`：检查左边的值是否大于右边的值。'
- en: '- `<`: Checks if the value on the left is less than the value on the right.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`<`：检查左边的值是否小于右边的值。'
- en: '- `>=`: Checks if the value on the left is greater than or equal to the value
    on the right.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`>=`：检查左边的值是否大于或等于右边的值。'
- en: '- `<=`: Checks if the value on the left is less than or equal to the value
    on the right.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`<=`：检查左边的值是否小于或等于右边的值。'
- en: '- `===`: Checks if two values are strictly equal (both value and type).'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`===`：检查两个值是否严格相等（值和类型都相同）。'
- en: 'Here''s an example demonstrating the use of comparison operators:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个演示如何使用比较运算符的例子：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 2.3 JavaScript Expressions
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.3 JavaScript 表达式
- en: Expressions are combinations of values, variables, and operators that produce
    a result. They can be as simple as a single value or as complex as a combination
    of multiple operators and variables. Understanding expressions is essential for
    writing dynamic and interactive JavaScript code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式是值、变量和运算符的组合，用于产生结果。它们可以像单一值那样简单，也可以像多个运算符和变量的组合那样复杂。理解表达式对于编写动态和交互式的 JavaScript
    代码至关重要。
- en: 2.3.1 Arithmetic Expressions
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.3.1 算术表达式
- en: 'Arithmetic expressions involve mathematical calculations using arithmetic operators.
    Here''s an example of an arithmetic expression:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 算术表达式涉及使用算术运算符进行数学运算。以下是一个算术表达式的例子：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this example, the expression `(x + y) * 3` performs addition and multiplication
    to produce the result 21.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，表达式 `(x + y) * 3` 先进行加法和乘法运算，得到结果 21。
- en: 2.3.2 String Concatenation
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.3.2 字符串连接
- en: 'In JavaScript, the `+` operator is also used for string concatenation. It allows
    you to combine two or more strings into a single string. Here''s an example:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，`+` 运算符也用于字符串连接。它允许你将两个或更多字符串合并为一个字符串。以下是一个例子：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this case, the `+` operator concatenates the values of the `firstName`, a
    space character, and the `lastName` to form the full name.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`+` 运算符将 `firstName` 的值、一个空格字符和 `lastName` 的值连接在一起，形成完整的名字。
- en: 2.3.3 Logical Expressions
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.3.3 逻辑表达式
- en: 'Logical expressions involve logical operators (`&&`, `||`, `!`) to perform
    logical operations. They are often used in conditional statements to evaluate
    multiple conditions. Here''s an example:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑表达式涉及逻辑运算符 (`&&`, `||`, `!`) 来执行逻辑运算。它们常用于条件语句中，以评估多个条件。以下是一个例子：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this example, the logical expression `(x > 3) && (y < 15)` evaluates whether
    both conditions are true and returns `true`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，逻辑表达式 `(x > 3) && (y < 15)` 判断两个条件是否都为真，并返回 `true`。
- en: 2.4 Conclusion
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 2.4 结论
- en: In this chapter, we delved deeper into JavaScript syntax, operators, and expressions.
    We learned about statements, semicolons, and comments, which help structure and
    document our code. We explored various types of operators, including arithmetic,
    assignment, and comparison operators, and how they can be used in JavaScript code.
    Finally, we examined expressions and how they can be used to perform mathematical
    calculations, concatenate strings, and evaluate logical conditions.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入探讨了 JavaScript 语法、运算符和表达式。我们了解了语句、分号和注释，这些有助于组织和记录代码。我们研究了各种类型的运算符，包括算术运算符、赋值运算符和比较运算符，以及它们在
    JavaScript 代码中的使用方式。最后，我们检查了表达式及其如何用于进行数学运算、连接字符串和评估逻辑条件。
- en: Understanding JavaScript syntax, operators, and expressions is crucial for writing
    effective and meaningful code. With these foundational concepts in place, you'll
    be able to tackle more complex programming tasks and build interactive applications.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 理解 JavaScript 的语法、运算符和表达式对于编写高效且有意义的代码至关重要。掌握这些基础概念后，你将能够应对更复杂的编程任务，并构建互动应用程序。
- en: In the next chapter, we will explore JavaScript control flow statements, such
    as conditional statements and loops. These control flow statements enable us to
    make decisions and repeat actions based on different conditions. Get ready to
    take your JavaScript skills to the next level as we dive into the world of control
    flow!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将探讨 JavaScript 的控制流语句，如条件语句和循环。这些控制流语句使我们能够根据不同的条件做出决策并重复执行某些操作。准备好提升你的
    JavaScript 技能，进入控制流的世界吧！
