- en: 'Module 23:'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 模块 23：
- en: '|'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Upgrading Vue.js Versions
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 升级 Vue.js 版本
- en: '|'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'In the ever-evolving landscape of web development, staying abreast of the latest
    technologies and updates is crucial for maintaining the excellence and security
    of applications. The module "Upgrading Vue.js Versions" takes a pivotal role in
    the book "Vue.js Essentials: For Responsive Web Development," guiding readers
    through the intricacies of upgrading Vue.js versions. Within these pages, developers
    will gain comprehensive insights into the importance of version upgrades, the
    upgrade process, and strategies for ensuring the seamless transition of Vue.js
    applications to newer releases.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在不断发展的 Web 开发领域，跟上最新技术和更新对于保持应用的卓越性和安全性至关重要。模块“升级 Vue.js 版本”在书籍《Vue.js 精要：响应式
    Web 开发》中扮演着重要角色，指导读者了解升级 Vue.js 版本的复杂性。在这些内容中，开发人员将获得有关版本升级重要性、升级过程以及确保 Vue.js
    应用顺利过渡到新版本的策略的全面洞察。
- en: Recognizing the Imperative of Version Upgrades in Vue.js Development
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 认识到在 Vue.js 开发中版本升级的重要性
- en: Before delving into the specifics of upgrading Vue.js versions, it is essential
    to recognize the imperative of staying current in modern web development. This
    module initiates by highlighting the benefits of version upgrades, including access
    to new features, enhanced performance, bug fixes, and security patches. Readers
    will gain an understanding of how regular version upgrades contribute to the longevity
    and relevance of Vue.js applications in an ever-changing technological landscape.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨 Vue.js 版本升级的具体内容之前，必须认识到在现代 Web 开发中保持版本更新的重要性。本模块首先强调了版本升级的好处，包括访问新功能、提升性能、修复错误和安全补丁。读者将了解定期进行版本升级如何帮助
    Vue.js 应用在不断变化的技术环境中保持长期的生命力和相关性。
- en: 'Navigating the Upgrade Process: Best Practices and Precautions'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 导航升级过程：最佳实践与注意事项
- en: This segment explores the nuances of the upgrade process, providing readers
    with best practices and precautions to ensure a smooth transition when upgrading
    Vue.js versions. Developers will delve into concepts such as the Vue.js release
    cycle, release notes, and a systematic approach to handling version upgrades.
    By understanding these best practices, developers can mitigate potential challenges,
    anticipate changes in behavior, and proactively address any issues that may arise
    during the upgrade process.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分探讨了升级过程的细节，为读者提供了最佳实践和注意事项，以确保在升级 Vue.js 版本时顺利过渡。开发人员将深入了解 Vue.js 发布周期、发布说明以及处理版本升级的系统方法。通过了解这些最佳实践，开发人员可以减轻潜在的挑战，预见行为变化，并主动解决升级过程中可能出现的任何问题。
- en: Strategies for Handling Breaking Changes and Deprecated Features
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 处理重大变更和弃用功能的策略
- en: The module addresses the inevitable aspect of breaking changes and deprecated
    features that come with version upgrades. Readers will gain insights into strategies
    for identifying and handling breaking changes, including using deprecation warnings,
    updating deprecated features, and mitigating potential compatibility issues. By
    mastering these strategies, developers can navigate version upgrades with confidence,
    ensuring that their Vue.js applications remain functional and up-to-date.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本模块涉及版本升级中不可避免的破坏性变化和废弃功能。读者将获得识别和处理破坏性变化的策略，包括使用废弃警告、更新废弃功能和缓解潜在兼容性问题。通过掌握这些策略，开发者可以自信地进行版本升级，确保他们的
    Vue.js 应用程序保持功能完备并与时俱进。
- en: Automated Testing and Continuous Integration for Version Upgrades
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 版本升级的自动化测试与持续集成
- en: Central to a successful version upgrade strategy is the implementation of automated
    testing and continuous integration processes. This part of the module delves into
    techniques for incorporating automated testing into the development workflow,
    ensuring that version upgrades do not compromise the integrity of Vue.js applications.
    Practical insights into configuring continuous integration pipelines for version
    upgrades provide developers with the tools needed to validate the compatibility
    of their applications with newer Vue.js releases efficiently.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的版本升级策略的核心是实施自动化测试和持续集成流程。本模块的这一部分深入探讨了如何将自动化测试融入开发工作流，确保版本升级不会损害 Vue.js 应用程序的完整性。关于如何配置持续集成管道以支持版本升级的实用见解，提供了开发者所需的工具，以高效验证其应用程序与新版本
    Vue.js 的兼容性。
- en: '"Upgrading Vue.js Versions" stands as a pivotal module within "Vue.js Essentials:
    For Responsive Web Development," providing readers with a comprehensive guide
    to navigating the version upgrade process. By unraveling the imperative of version
    upgrades, exploring best practices, addressing breaking changes, and emphasizing
    automated testing, developers gain the knowledge and skills needed to ensure the
    sustained excellence, security, and relevance of their Vue.js applications. This
    module serves as an indispensable resource for developers committed to maintaining
    their applications at the forefront of Vue.js development, harnessing the power
    of new features and improvements while safeguarding against potential challenges.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '"升级 Vue.js 版本"是《Vue.js 精要：响应式 Web 开发》中的一个关键模块，为读者提供了全面的版本升级过程指南。通过解开版本升级的必要性，探索最佳实践，处理破坏性变化，并强调自动化测试，开发者将获得确保其
    Vue.js 应用程序持续卓越、安全性和相关性的知识与技能。这个模块是致力于保持其应用程序处于 Vue.js 开发前沿的开发者不可或缺的资源，帮助他们利用新功能和改进，同时避免潜在的挑战。'
- en: Checking for Vue.js Updates
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查 Vue.js 更新
- en: 'Within the module "Upgrading Vue.js Versions" of the comprehensive guide "Vue.js
    Essentials: For Responsive Web Development," the section on "Checking for Vue.js
    Updates" becomes a crucial reference point for developers looking to stay current
    with the latest features, bug fixes, and improvements in Vue.js. This section
    provides developers with practical guidance on how to efficiently check for updates
    and seamlessly transition to newer versions of the framework.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在《Vue.js 必备教程：响应式网页开发》这本全面指南的“升级 Vue.js 版本”模块中，“检查 Vue.js 更新”部分成为开发者保持最新功能、错误修复和
    Vue.js 改进的重要参考点。该部分为开发者提供了如何高效检查更新并无缝过渡到新版本框架的实用指导。
- en: Utilizing the Official Vue.js Documentation
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用官方 Vue.js 文档
- en: The book emphasizes the importance of consulting the official Vue.js documentation
    as the primary source for information on updates. Developers are encouraged to
    regularly check the Vue.js GitHub repository and the official website for announcements
    and release notes. The documentation provides detailed information on each release,
    including new features, breaking changes, and upgrade instructions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本书强调了将官方 Vue.js 文档作为获取更新信息的主要来源的重要性。鼓励开发者定期检查 Vue.js 的 GitHub 仓库和官方网站，以获取公告和版本说明。文档提供了每个版本的详细信息，包括新特性、破坏性变更和升级说明。
- en: Command to check the latest Vue.js version using npm
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 npm 检查最新 Vue.js 版本的命令
- en: npm show vue version
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: npm show vue version
- en: Leveraging Package Managers for Version Checks
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 利用包管理器进行版本检查
- en: Developers are guided on leveraging package managers such as npm or yarn to
    check for the latest version of Vue.js available. By running simple commands in
    the terminal, developers can obtain information about the latest stable release,
    ensuring they stay informed about the latest advancements in Vue.js.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者可以通过利用包管理器，如 npm 或 yarn，来检查可用的最新 Vue.js 版本。通过在终端运行简单的命令，开发者可以获取关于最新稳定版本的信息，从而确保他们及时了解
    Vue.js 的最新进展。
- en: Command to check the latest Vue.js version using yarn
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 yarn 检查最新 Vue.js 版本的命令
- en: yarn info vue version
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: yarn info vue version
- en: Automating Version Checks in Continuous Integration
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在持续集成中自动检查版本
- en: To ensure continuous awareness of the latest Vue.js versions, the section introduces
    the concept of automating version checks within the continuous integration (CI)
    pipeline. By incorporating version checking scripts into CI workflows, developers
    can receive notifications or take predefined actions when new Vue.js versions
    are released, streamlining the update process.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保持续了解最新的 Vue.js 版本，本节介绍了在持续集成（CI）管道中自动化版本检查的概念。通过将版本检查脚本纳入 CI 工作流，开发者可以在新
    Vue.js 版本发布时接收到通知或执行预定义的操作，从而简化更新过程。
- en: Example of a CI workflow for version checking in GitHub Actions
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub Actions 中检查版本的 CI 工作流示例
- en: 'name: Check Vue.js Updates'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 名称：检查 Vue.js 更新
- en: 'on:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 时间：
- en: 'schedule:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 日程：
- en: '- cron: ''0 0 * * *'' # Daily schedule'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '- cron: ''0 0 * * *'' # 每日安排'
- en: 'jobs:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 作业：
- en: 'check-updates:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 检查更新：
- en: 'runs-on: ubuntu-latest'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 'runs-on: ubuntu-latest'
- en: 'steps:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤：
- en: '- name: Check Vue.js version'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '- 名称：检查 Vue.js 版本'
- en: 'run: echo "::set-output name=vue_version::$(npm show vue version)"'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 运行：echo "::set-output name=vue_version::$(npm show vue version)"
- en: '- name: Print Vue.js version'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '- 名称：打印 Vue.js 版本'
- en: 'run: echo "Latest Vue.js version is ${{ steps.check-updates.outputs.vue_version
    }}"'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 运行：echo "最新的 Vue.js 版本是 ${{ steps.check-updates.outputs.vue_version }}"
- en: Testing and Preparing for Upgrades
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 测试与升级准备
- en: The book advises developers to thoroughly test their applications when upgrading
    to a new Vue.js version. This includes running unit tests, end-to-end tests, and
    checking for compatibility with third-party plugins and dependencies. The section
    provides insights into using tools like vue-cli-plugin-vue-next for testing and
    automating the upgrade process.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 本书建议开发者在升级到新的 Vue.js 版本时，全面测试他们的应用程序。这包括运行单元测试、端到端测试，并检查与第三方插件和依赖项的兼容性。本节提供了使用如
    vue-cli-plugin-vue-next 等工具进行测试和自动化升级过程的见解。
- en: Command to add Vue 3 support to a Vue 2 project using vue-cli-plugin-vue-next
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 vue-cli-plugin-vue-next 将 Vue 3 支持添加到 Vue 2 项目的命令
- en: vue add vue-cli-plugin-vue-next
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: vue add vue-cli-plugin-vue-next
- en: Handling Breaking Changes
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 处理重大变更
- en: In the event of breaking changes, the section offers guidance on addressing
    them systematically. Developers are encouraged to review the official release
    notes, which provide comprehensive information on any breaking changes introduced
    in each version. The book highlights the importance of addressing breaking changes
    early in the upgrade process to minimize potential issues.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在发生重大变更时，本节提供了系统化处理这些变更的指导。鼓励开发者查看官方发布说明，这些说明提供了每个版本中引入的重大变更的详细信息。本书强调了在升级过程中尽早处理重大变更的重要性，以最小化潜在问题。
- en: // Example of code changes to handle breaking changes
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: // 处理重大变更的代码示例
- en: // Before upgrade
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: // 升级前
- en: Vue.directive('my-directive', {
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.directive('my-directive', {
- en: bind(el, binding) {
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: bind(el, binding) {
- en: // Directive logic
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: // 指令逻辑
- en: '},'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '});'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: // After upgrade (Vue 3)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: // 升级后（Vue 3）
- en: app.directive('my-directive', {
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: app.directive('my-directive', {
- en: // Updated directive logic
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: // 更新后的指令逻辑
- en: '});'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: 'The "Checking for Vue.js Updates" section in the "Upgrading Vue.js Versions"
    module of "Vue.js Essentials: For Responsive Web Development" equips developers
    with practical strategies for staying informed about Vue.js updates and seamlessly
    transitioning to newer versions. Through detailed code examples and explanations,
    developers gain insights into checking for updates via documentation, leveraging
    package managers, automating version checks in CI, testing, and handling breaking
    changes. These techniques collectively empower developers to maintain up-to-date
    and well-performing Vue.js applications.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '《Vue.js Essentials: For Responsive Web Development》模块中的“检查Vue.js更新”部分为开发者提供了关于如何获取Vue.js更新信息并顺利过渡到新版本的实用策略。通过详细的代码示例和解释，开发者可以了解如何通过文档检查更新，利用包管理器，自动化CI中的版本检查，进行测试以及处理破坏性更改。这些技巧帮助开发者保持Vue.js应用的最新状态，并确保其良好的性能。'
- en: Major Version Upgrades
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主要版本升级
- en: 'The module "Upgrading Vue.js Versions" in "Vue.js Essentials: For Responsive
    Web Development" delves into the nuanced process of upgrading Vue.js to major
    versions, providing developers with a comprehensive understanding of the considerations,
    challenges, and strategies involved in transitioning between major releases.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '《Vue.js Essentials: For Responsive Web Development》模块中的“升级Vue.js版本”深入探讨了升级Vue.js到主要版本的复杂过程，帮助开发者全面了解在不同主要版本之间过渡时需要考虑的因素、面临的挑战以及采取的策略。'
- en: Understanding Major Version Changes
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 理解主要版本更改
- en: The section starts by emphasizing the significance of major version changes
    in Vue.js. Major versions often introduce substantial updates, new features, and
    potential breaking changes that may require modifications to existing code. Developers
    are encouraged to carefully review the official release notes for each major version,
    gaining insights into the enhancements and adjustments needed for a successful
    upgrade.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 本节开始时强调了Vue.js中主要版本更改的重要性。主要版本通常会引入重大更新、新功能以及可能需要修改现有代码的破坏性变化。开发者被鼓励仔细查看每个主要版本的官方发布说明，从中获得有关成功升级所需的增强功能和调整的见解。
- en: Example of checking Vue.js release notes for major version changes
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查Vue.js发布说明以了解主要版本更改的示例
- en: npm show [vue@3.0.0](mailto:vue@3.0.0)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: npm show [vue@3.0.0](mailto:vue@3.0.0)
- en: Vue 2 to Vue 3 Migration
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 从Vue 2到Vue 3的迁移
- en: A focal point of major version upgrades is the migration from Vue 2 to Vue 3\.
    The book guides developers through the Vue 3 migration process, addressing key
    changes such as the Composition API, new syntax, and enhanced performance. It
    emphasizes the importance of the vue-cli-plugin-vue-next migration plugin, which
    assists in automating the migration and providing a structured approach to the
    transition.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 主要版本升级的重点之一是从Vue 2迁移到Vue 3。本书引导开发者完成Vue 3的迁移过程，涵盖了关键变化，如组合式API、新语法以及性能提升。它强调了vue-cli-plugin-vue-next迁移插件的重要性，该插件有助于自动化迁移，并为过渡提供结构化的方式。
- en: Command to add Vue 3 support to a Vue 2 project using vue-cli-plugin-vue-next
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 vue-cli-plugin-vue-next 将 Vue 3 支持添加到 Vue 2 项目的命令
- en: vue add vue-cli-plugin-vue-next
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: vue add vue-cli-plugin-vue-next
- en: Adopting the Composition API
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 采用组合式 API
- en: Vue 3 introduces the Composition API, offering a more flexible and scalable
    way to organize and reuse logic in components. The section provides detailed insights
    into adopting the Composition API, showcasing its benefits and demonstrating how
    developers can refactor existing Vue 2 components to leverage the new API.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Vue 3 引入了组合式 API，提供了一种更灵活、更具可扩展性的方法来组织和重用组件中的逻辑。本节详细介绍了如何采用组合式 API，展示了其优势，并演示了开发者如何重构现有的
    Vue 2 组件，以利用这一新 API。
- en: // Example of using the Composition API in Vue 3
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: // 在 Vue 3 中使用组合式 API 的示例
- en: <script>
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: import { ref, onMounted } from 'vue';
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: import { ref, onMounted } from 'vue';
- en: export default {
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: setup() {
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: setup() {
- en: const count = ref(0);
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: const count = ref(0);
- en: onMounted(() => {
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: onMounted(() => {
- en: console.log('Component is mounted!');
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('组件已挂载！');
- en: '});'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: return {
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: count,
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: count,
- en: '};'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: Handling Breaking Changes and Deprecated Features
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 处理破坏性变更和已弃用的功能
- en: Major version upgrades often come with breaking changes and deprecated features
    that require attention. The book advises developers to meticulously go through
    the release notes, addressing deprecated features, and updating code to align
    with the new conventions. Understanding and addressing these changes is pivotal
    to a smooth transition between major Vue.js versions.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 主版本升级通常伴随着破坏性变更和已弃用的功能，这些都需要特别注意。本书建议开发者仔细查看发布说明，处理已弃用的功能，并更新代码以符合新规范。理解并处理这些变更对于顺利过渡到新版本的
    Vue.js 至关重要。
- en: // Example of handling breaking changes during a major version upgrade
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: // 升级到新主版本时处理破坏性变更的示例
- en: // Vue 2
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: // Vue 2
- en: Vue.filter('oldFilter', function (value) {
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.filter('oldFilter', function (value) {
- en: // Old filter logic
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: // 旧的过滤逻辑
- en: return transformedValue;
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: return transformedValue;
- en: '});'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: // Vue 3
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: // Vue 3
- en: import { createApp } from 'vue';
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: import { createApp } from 'vue';
- en: const app = createApp(/* App options */);
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: const app = createApp(/* 应用选项 */);
- en: app.config.globalProperties.$filters = {
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: app.config.globalProperties.$filters = {
- en: newFilter(value) {
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: newFilter(value) {
- en: // Updated filter logic
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: // 更新后的过滤逻辑
- en: return transformedValue;
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: return transformedValue;
- en: '},'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: Testing and Ensuring Compatibility
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 测试和确保兼容性
- en: Testing plays a crucial role in major version upgrades. The section emphasizes
    the importance of running comprehensive tests, including unit tests and end-to-end
    tests, to ensure that the upgraded Vue.js application functions as intended. It
    guides developers on using tools like vue-test-utils and other testing libraries
    to thoroughly validate the application's compatibility with the new major version.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 测试在主版本升级中起着至关重要的作用。本节强调了运行全面测试的重要性，包括单元测试和端到端测试，以确保升级后的 Vue.js 应用程序按预期功能运行。它指导开发者使用
    vue-test-utils 等工具以及其他测试库，彻底验证应用程序与新主版本的兼容性。
- en: Example of running tests after a major version upgrade
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 升级主版本后运行测试的示例
- en: npm run test
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: npm run test
- en: 'The "Major Version Upgrades" section in the "Upgrading Vue.js Versions" module
    of "Vue.js Essentials: For Responsive Web Development" equips developers with
    practical strategies and considerations for transitioning between major Vue.js
    releases. Through detailed code examples, explanations of key changes, and insights
    into the migration process, developers gain the knowledge needed to successfully
    upgrade their Vue.js applications, leveraging the latest features and improvements
    while managing potential breaking changes.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '在“Vue.js Essentials: For Responsive Web Development”模块中的“Vue.js版本升级”部分，“重大版本升级”章节为开发者提供了实际的策略和注意事项，帮助他们在不同的Vue.js版本之间顺利过渡。通过详细的代码示例、关键变化的解释以及迁移过程的见解，开发者能够获得成功升级Vue.js应用程序所需的知识，同时充分利用最新的功能和改进，并有效地管理潜在的破坏性变更。'
- en: Handling Breaking Changes
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理破坏性变更
- en: 'In the module "Upgrading Vue.js Versions" within "Vue.js Essentials: For Responsive
    Web Development," the section on "Handling Breaking Changes" becomes a crucial
    reference for developers undertaking the challenging task of upgrading their Vue.js
    applications. This section offers comprehensive insights into recognizing, understanding,
    and effectively addressing breaking changes that may arise during version upgrades.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '在“Vue.js Essentials: For Responsive Web Development”模块中的“Vue.js版本升级”部分，“处理破坏性变更”章节成为开发者在升级Vue.js应用程序时的重要参考。本节提供了关于如何识别、理解和有效解决版本升级过程中可能出现的破坏性变更的全面见解。'
- en: Recognizing Breaking Changes in the Release Notes
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布说明中识别破坏性变更
- en: The section begins by emphasizing the importance of carefully reviewing the
    official release notes for any Vue.js version being upgraded. Breaking changes
    are explicitly documented in these release notes, providing developers with a
    detailed list of modifications that may affect existing code. Developers are encouraged
    to make this step a priority in the upgrade process.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 本节首先强调，仔细查看正在升级的Vue.js版本的官方发布说明是非常重要的。破坏性变更在这些发布说明中有明确记录，为开发者提供了详细的修改列表，这些修改可能会影响现有代码。建议开发者将这一步骤作为升级过程的优先事项。
- en: Command to view Vue.js release notes for a specific version
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看特定版本Vue.js发布说明的命令
- en: npm show [vue@2.6.0](mailto:vue@2.6.0)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: npm show [vue@2.6.0](mailto:vue@2.6.0)
- en: Addressing Changes in Component Lifecycle Hooks
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 处理组件生命周期钩子中的变更
- en: Breaking changes often involve adjustments to component lifecycle hooks, which
    are integral to Vue.js applications. The section guides developers through identifying
    and updating their codebase to accommodate changes in lifecycle hook behavior.
    For instance, in Vue 3, the beforeDestroy hook is replaced by the beforeUnmount
    hook, requiring developers to refactor accordingly.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 破坏性变更通常涉及组件生命周期钩子的调整，这些钩子是Vue.js应用程序的核心部分。本节指导开发者如何识别并更新他们的代码库，以适应生命周期钩子行为的变化。例如，在Vue
    3中，beforeDestroy钩子被beforeUnmount钩子取代，要求开发者相应地进行重构。
- en: // Example of updating component lifecycle hooks for Vue.js 3
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: // Vue.js 3更新组件生命周期钩子的示例
- en: // Vue 2
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: // Vue 2
- en: beforeDestroy() {
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: beforeDestroy() {
- en: // Old lifecycle hook logic
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: // 旧的生命周期钩子逻辑
- en: '}'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Vue 3
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: // Vue 3
- en: beforeUnmount() {
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: beforeUnmount() {
- en: // Updated lifecycle hook logic
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: // 更新后的生命周期钩子逻辑
- en: '}'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: Refactoring Code to Adapt to New Syntax
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 重构代码以适应新语法
- en: Major version upgrades may introduce changes to the syntax of Vue.js components.
    Developers need to refactor their code to align with the new syntax conventions.
    For instance, in Vue 3, the v-bind directive is simplified to :, and the v-on
    directive is replaced with @. The section provides detailed examples to help developers
    adapt their code to these syntax changes.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 主要版本升级可能会引入 Vue.js 组件语法的变化。开发者需要重构代码，以符合新的语法规范。例如，在 Vue 3 中，v-bind 指令被简化为 :，而
    v-on 指令被 @ 替代。本节提供了详细的示例，帮助开发者适应这些语法变化。
- en: <!-- Example of adapting syntax changes in Vue.js 3 -->
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- 示例：在 Vue.js 3 中适应语法更改 -->
- en: <!-- Vue 2 -->
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- Vue 2 -->
- en: <template>
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: '<div v-bind:class="{ active: isActive }" v-on:click="handleClick"></div>'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '<div v-bind:class="{ active: isActive }" v-on:click="handleClick"></div>'
- en: </template>
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <!-- Vue 3 -->
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- Vue 3 -->
- en: <template>
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: '<div :class="{ active: isActive }" @click="handleClick"></div>'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '<div :class="{ active: isActive }" @click="handleClick"></div>'
- en: </template>
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: Handling Changes in Directives and Components
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 处理指令和组件的变化
- en: Breaking changes may affect directives and components used in Vue.js applications.
    The section encourages developers to thoroughly review the release notes for changes
    related to directives such as v-if, v-show, or v-for. Additionally, handling changes
    in built-in components, like the transition component, is crucial for a seamless
    upgrade process.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 重大更改可能会影响在 Vue.js 应用程序中使用的指令和组件。本节建议开发者仔细查看发布说明，关注与指令（如 v-if、v-show 或 v-for）相关的更改。此外，处理内置组件（如过渡组件）的变化对顺利升级过程至关重要。
- en: <!-- Example of handling changes in directives in Vue.js 3 -->
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- 示例：在 Vue.js 3 中处理指令的变化 -->
- en: <!-- Vue 2 -->
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- Vue 2 -->
- en: <template>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div v-if="condition">Content</div>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: <div v-if="condition">Content</div>
- en: </template>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <!-- Vue 3 -->
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- Vue 3 -->
- en: <template>
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div v-show="condition">Content</div>
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: <div v-show="condition">Content</div>
- en: </template>
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: Utilizing Migration Tools and Plugins
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 使用迁移工具和插件
- en: To facilitate the process of handling breaking changes, developers can leverage
    migration tools and plugins provided by the Vue.js community. The book introduces
    tools like vue-cli-plugin-vue-next that automate portions of the migration process,
    assisting developers in identifying and addressing breaking changes more efficiently.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 为了便于处理重大更改，开发者可以利用 Vue.js 社区提供的迁移工具和插件。本书介绍了一些自动化迁移过程的工具，如 vue-cli-plugin-vue-next，帮助开发者更高效地识别和解决破坏性变化。
- en: Command to add Vue 3 support to a Vue 2 project using vue-cli-plugin-vue-next
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 vue-cli-plugin-vue-next 命令为 Vue 2 项目添加 Vue 3 支持
- en: vue add vue-cli-plugin-vue-next
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: vue add vue-cli-plugin-vue-next
- en: 'The "Handling Breaking Changes" section within the "Upgrading Vue.js Versions"
    module of "Vue.js Essentials: For Responsive Web Development" equips developers
    with essential strategies and examples to effectively navigate and address breaking
    changes during version upgrades. By emphasizing careful review of release notes,
    adapting to syntax changes, refactoring lifecycle hooks, and utilizing migration
    tools, developers can streamline the upgrade process and ensure their Vue.js applications
    remain both up-to-date and robust.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 《Vue.js 基础：响应式 Web 开发》模块中的“处理重大变更”部分为开发者提供了应对版本升级过程中重大变更的关键策略和示例。通过强调仔细查看发布说明、适应语法变化、重构生命周期钩子并使用迁移工具，开发者可以简化升级过程，确保他们的
    Vue.js 应用既保持最新，又稳健可靠。
- en: Upgrade Best Practices
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 升级最佳实践
- en: 'In the module "Upgrading Vue.js Versions" of the comprehensive guide "Vue.js
    Essentials: For Responsive Web Development," the section on "Upgrade Best Practices"
    serves as a cornerstone for developers aiming to navigate version upgrades seamlessly.
    This section encapsulates essential strategies and guidelines to ensure a smooth
    transition while minimizing potential pitfalls associated with upgrading Vue.js
    applications.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在《Vue.js 基础：响应式 Web 开发》一书的“升级 Vue.js 版本”模块中，“升级最佳实践”部分为开发者提供了无缝进行版本升级的基石。本部分总结了确保顺利过渡的关键策略和指南，旨在尽量减少与升级
    Vue.js 应用相关的潜在问题。
- en: Thorough Testing Across Environments
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同环境中进行全面测试
- en: The section begins by highlighting the paramount importance of thorough testing
    during the upgrade process. Developers are advised to conduct comprehensive tests
    across different environments, including development, staging, and production.
    Running unit tests, end-to-end tests, and manually testing critical functionalities
    help identify potential issues early in the upgrade process.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分首先强调了在升级过程中进行全面测试的重要性。建议开发者在不同环境下进行全面测试，包括开发环境、预发布环境和生产环境。运行单元测试、端到端测试，并手动测试关键功能，有助于在升级过程中及早发现潜在问题。
- en: Example of running tests after a Vue.js version upgrade
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 升级 Vue.js 版本后运行测试示例
- en: npm run test
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: npm run test
- en: Incremental Upgrades for Vue.js
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 的增量升级
- en: To mitigate the complexity of major version upgrades, the book recommends adopting
    an incremental approach. Incremental upgrades involve transitioning through intermediate
    versions before reaching the target version. For example, when upgrading from
    Vue 2 to Vue 3, developers can first upgrade to Vue 2.6, addressing any issues
    along the way, before proceeding to Vue 3.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减轻大版本升级的复杂性，本书建议采用增量升级的方法。增量升级是指在达到目标版本之前，通过过渡到中间版本进行升级。例如，从 Vue 2 升级到 Vue
    3 时，开发者可以先升级到 Vue 2.6，解决过程中出现的任何问题，再继续升级到 Vue 3。
- en: Example of incrementally upgrading Vue.js versions
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue.js 版本增量升级示例
- en: Upgrade to Vue 2.6 first
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 先升级到 Vue 2.6
- en: npm install vue@2.6.0
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: npm install vue@2.6.0
- en: Address issues and test
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决问题并测试
- en: Then upgrade to Vue 3
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 然后升级到 Vue 3
- en: npm install [vue@3.0.0](mailto:vue@3.0.0)
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: npm install [vue@3.0.0](mailto:vue@3.0.0)
- en: Utilizing Migration Plugins and Tools
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 使用迁移插件和工具
- en: Migration plugins and tools offered by the Vue.js community play a pivotal role
    in simplifying the upgrade process. The section introduces developers to tools
    like vue-cli-plugin-vue-next that automate portions of the migration process.
    By leveraging these tools, developers can identify and address breaking changes
    more efficiently, enhancing the overall upgrade experience.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 社区提供的迁移插件和工具在简化升级过程中的作用至关重要。本节向开发者介绍了像 vue-cli-plugin-vue-next 这样的工具，它们可以自动化迁移过程中的部分工作。通过利用这些工具，开发者可以更高效地识别和解决破坏性变更，从而提升整个升级体验。
- en: Command to add Vue 3 support to a Vue 2 project using vue-cli-plugin-vue-next
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 vue-cli-plugin-vue-next 向 Vue 2 项目添加 Vue 3 支持的命令
- en: vue add vue-cli-plugin-vue-next
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: vue add vue-cli-plugin-vue-next
- en: Creating a Test Environment for Upgrade Validation
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 创建升级验证的测试环境
- en: Establishing a dedicated test environment specifically for the upgrade process
    is a recommended best practice. This environment allows developers to validate
    the upgrade on a copy of the production environment, minimizing the impact on
    the live application. It provides a controlled space for testing, debugging, and
    ensuring that the upgraded Vue.js application functions as expected.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 为升级过程专门建立一个测试环境是推荐的最佳实践。这个环境允许开发者在生产环境的副本上验证升级，从而将对在线应用的影响降到最低。它为测试、调试和确保升级后的
    Vue.js 应用按预期运行提供了一个受控的空间。
- en: Example of creating a test environment for Vue.js upgrade validation
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Vue.js 升级验证测试环境的示例
- en: Duplicate the production environment
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复制生产环境
- en: cp -R production_environment test_environment
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: cp -R production_environment test_environment
- en: Perform the upgrade in the test environment
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在测试环境中进行升级
- en: npm install vue@3.0.0
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: npm install vue@3.0.0
- en: Run tests and validate the upgrade
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行测试并验证升级
- en: npm run test
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: npm run test
- en: Regularly Reviewing Vue.js Documentation
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 定期查看 Vue.js 文档
- en: The section underlines the importance of regularly reviewing the official Vue.js
    documentation, even outside of upgrade processes. Staying informed about new features,
    best practices, and deprecations ensures developers are well-prepared for future
    upgrades. Documentation serves as a valuable resource for understanding changes
    and making informed decisions during the upgrade process.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 本节强调了定期查看官方 Vue.js 文档的重要性，即使在非升级过程中也要保持关注。了解新特性、最佳实践和弃用功能，能够确保开发者为未来的升级做好充分准备。文档是了解变更并在升级过程中做出明智决策的宝贵资源。
- en: Command to view the Vue.js documentation
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看 Vue.js 文档的命令
- en: vue –help
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: vue –help
- en: 'The "Upgrade Best Practices" section within the "Upgrading Vue.js Versions"
    module of "Vue.js Essentials: For Responsive Web Development" provides developers
    with essential strategies for seamless Vue.js version upgrades. Through comprehensive
    testing, incremental approaches, the use of migration tools, creating dedicated
    test environments, and regular documentation review, developers can confidently
    navigate version upgrades, ensuring the stability and performance of their Vue.js
    applications.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '在《Vue.js Essentials: For Responsive Web Development》课程的“升级 Vue.js 版本”模块中的“升级最佳实践”部分，为开发者提供了无缝升级
    Vue.js 版本的关键策略。通过全面测试、增量方法、使用迁移工具、创建专用测试环境以及定期审查文档，开发者能够自信地进行版本升级，确保 Vue.js 应用的稳定性和性能。'
