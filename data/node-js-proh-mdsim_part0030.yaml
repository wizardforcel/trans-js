- en: 'Chapter 10: JavaScript Modules and Modular Development'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章：JavaScript 模块和模块化开发
- en: In this chapter, we will explore JavaScript modules and modular development.
    Modules allow us to organize our code into reusable and encapsulated units, making
    our codebase more maintainable and scalable. We'll cover the basics of modules,
    module syntax, exporting and importing, as well as some best practices for modular
    development.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将探讨 JavaScript 模块和模块化开发。模块允许我们将代码组织成可重用和封装的单元，从而使我们的代码库更加易于维护和扩展。我们将介绍模块的基本知识、模块语法、导出与导入，并讨论一些模块化开发的最佳实践。
- en: 10.1 Introduction to JavaScript Modules
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.1 JavaScript 模块介绍
- en: JavaScript modules are self-contained units of code that can be exported and
    imported to be used in other parts of our application. They provide a way to encapsulate
    related functionality, variables, and classes, preventing them from polluting
    the global namespace and promoting code reusability.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 模块是自包含的代码单元，可以导出并导入到应用程序的其他部分使用。它们提供了一种封装相关功能、变量和类的方式，防止它们污染全局命名空间，并促进代码的重用性。
- en: Prior to the introduction of native modules in JavaScript, developers used various
    module systems, such as CommonJS and AMD, to achieve modular development. However,
    with the release of ECMAScript 2015 (ES6), native support for modules was introduced,
    making it easier to work with modules without the need for third-party libraries
    or frameworks.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 引入原生模块之前，开发者使用各种模块系统，如 CommonJS 和 AMD，来实现模块化开发。然而，随着 ECMAScript
    2015（ES6）的发布，引入了对模块的原生支持，使得开发者可以更轻松地使用模块，无需第三方库或框架。
- en: '10.2 Module Syntax: Exporting and Importing'
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.2 模块语法：导出与导入
- en: In ES6 modules, we use the `export` and `import` keywords to define what parts
    of a module should be accessible outside the module and to import those exported
    entities into other modules.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ES6 模块中，我们使用 `export` 和 `import` 关键字来定义哪些模块部分应该在模块外部可访问，并将这些导出的实体导入到其他模块中。
- en: 'To export entities from a module, we use the `export` keyword. We can export
    variables, functions, classes, or even a default export. Here''s an example:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要从模块中导出实体，我们使用 `export` 关键字。我们可以导出变量、函数、类，甚至是默认导出。以下是一个示例：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, we export a constant `PI`, a function `double()`, and a default
    export function `greet()`. The default export is denoted by using the `export
    default` syntax.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们导出了一个常量 `PI`，一个函数 `double()`，以及一个默认导出函数 `greet()`。默认导出通过使用 `export
    default` 语法来表示。
- en: 'To import entities from a module, we use the `import` keyword. We can import
    specific entities, all entities as a namespace, or the default export. Here''s
    how we can import entities from the `module.js` module:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要从模块中导入实体，我们使用 `import` 关键字。我们可以导入特定的实体、作为命名空间导入所有实体，或导入默认导出。以下是如何从 `module.js`
    模块导入实体的示例：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, we import the `PI` constant and the `double()` function from
    the `module.js` module. We can then use these imported entities in our `main.js`
    module.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们从`module.js`模块导入了`PI`常量和`double()`函数。然后，我们可以在`main.js`模块中使用这些导入的实体。
- en: 10.3 Module Best Practices
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.3 模块最佳实践
- en: 'When working with JavaScript modules, it''s important to follow some best practices
    to ensure clean and maintainable code:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 JavaScript 模块时，遵循一些最佳实践非常重要，以确保代码的清晰和可维护：
- en: '- Keep modules focused: Each module should have a single responsibility or
    focus on a specific feature. This helps in keeping the codebase organized and
    makes it easier to understand and maintain.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '- 保持模块专注：每个模块应该有一个单一的职责或专注于一个特定的功能。这有助于保持代码库的组织性，并使代码更易于理解和维护。'
- en: '- Use explicit exports: Instead of relying on the default export, it''s recommended
    to explicitly export the entities you want to expose from your module. This makes
    it clear which entities are intended to be used by other modules.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '- 使用显式导出：与其依赖默认导出，建议显式导出你希望暴露给其他模块的实体。这可以明确哪些实体是供其他模块使用的。'
- en: '- Use default exports sparingly: Default exports can be useful in certain scenarios,
    but they should be used sparingly. Using named exports makes it easier to understand
    what is being imported from a module.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '- 谨慎使用默认导出：默认导出在某些情况下很有用，但应谨慎使用。使用命名导出可以更容易理解从模块中导入了哪些内容。'
- en: '- Minimize module dependencies: Avoid creating modules with excessive dependencies
    on other modules. This reduces the risk of circular dependencies and simplifies
    the process of refactoring or removing a module.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '- 最小化模块依赖：避免创建过度依赖其他模块的模块。这可以减少循环依赖的风险，并简化重构或移除模块的过程。'
- en: '- Be mindful of the module size: While modules promote code organization, it''s
    also important to strike a balance and avoid creating overly large modules. If
    a module becomes too large or complex, consider refactoring it into smaller, more
    focused modules.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '- 注意模块大小：虽然模块有助于代码的组织，但同样重要的是要找到一个平衡点，避免创建过于庞大的模块。如果一个模块变得过于复杂或庞大，可以考虑将其重构为更小、更专注的模块。'
- en: By following these best practices, you can ensure that your modular JavaScript
    code is maintainable, reusable, and easily understandable.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些最佳实践，你可以确保你的模块化 JavaScript 代码是可维护、可重用并且容易理解的。
- en: 10.4 Module Environments and Tools
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.4 模块环境和工具
- en: JavaScript modules can be used in different environments, such as web browsers
    and Node.js. However, the specific module syntax and features supported may vary
    depending on the environment.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 模块可以在不同的环境中使用，比如网页浏览器和 Node.js。然而，特定的模块语法和支持的特性可能会根据环境的不同而有所变化。
- en: In web browsers, the native module system is supported in modern browsers. However,
    if you need to support older browsers or have more complex needs, you may need
    to use a bundler like webpack or Rollup to transpile and bundle your modules into
    a single JavaScript file that is compatible with older browsers.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页浏览器中，现代浏览器支持原生模块系统。然而，如果你需要支持旧版浏览器或有更复杂的需求，你可能需要使用像 webpack 或 Rollup 这样的打包工具，将模块转译并打包成一个兼容旧版浏览器的
    JavaScript 文件。
- en: In Node.js, the CommonJS module system is traditionally used. However, starting
    from Node.js version 12, support for ECMAScript modules (ESM) has been added,
    allowing you to use native module syntax in your Node.js applications.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Node.js 中，传统上使用 CommonJS 模块系统。然而，从 Node.js 12 版本开始，已增加对 ECMAScript 模块（ESM）的支持，允许你在
    Node.js 应用中使用原生模块语法。
- en: When working with modules, there are also various tools and frameworks available
    that provide additional features and optimizations. Some popular ones include
    TypeScript, Babel, and Parcel. These tools can enhance your development workflow
    and enable you to leverage advanced module capabilities.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用模块时，也有许多工具和框架可供选择，这些工具和框架提供了额外的功能和优化。包括 TypeScript、Babel 和 Parcel 在内的一些流行工具，可以提升你的开发工作流，并使你能够利用先进的模块功能。
- en: 10.5 Conclusion
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 10.5 结论
- en: JavaScript modules play a vital role in modern JavaScript development. They
    allow us to write modular, reusable code and prevent global namespace pollution.
    By leveraging the `export` and `import` keywords, we can define the parts of our
    modules that should be accessible to other modules and easily import them as needed.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 模块在现代 JavaScript 开发中起着至关重要的作用。它们让我们可以编写模块化、可重用的代码，并避免全局命名空间污染。通过利用
    `export` 和 `import` 关键字，我们可以定义模块中应该对其他模块可访问的部分，并根据需要轻松导入它们。
- en: In this chapter, we covered the basics of JavaScript modules, including module
    syntax, exporting and importing entities, and best practices for modular development.
    We also discussed module environments and the tools available to support module
    development in different contexts.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 JavaScript 模块的基础知识，包括模块语法、导出和导入实体，以及模块化开发的最佳实践。我们还讨论了模块环境和支持在不同上下文中进行模块开发的工具。
- en: By adopting modular development practices and utilizing the power of JavaScript
    modules, you can create more maintainable, scalable, and organized codebases.
    In the next chapter, we will delve into the world of classes and object-oriented
    programming in JavaScript, taking our code organization and reusability to the
    next level.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通过采用模块化开发实践并利用 JavaScript 模块的强大功能，你可以创建更易维护、可扩展且组织良好的代码库。在下一章，我们将深入探讨 JavaScript
    中的类和面向对象编程，提升我们的代码组织和重用性。
