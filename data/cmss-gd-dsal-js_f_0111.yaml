- en: Exercises
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 练习
- en: The following exercises provide you with the opportunity to practice with recursion。The
    solutions to these exercises are found in the section [​*Chapter 11*​](f_0216.xhtml#learning.to.write.in.recursive.solutions)。
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下练习为你提供了练习递归的机会。这些练习的解决方案可以在章节[​*第11章*​](f_0216.xhtml#learning.to.write.in.recursive.solutions)中找到。
- en: Use recursion to write a `function` that accepts an array of strings and returns
    the total number of characters across all the strings。For example, if the input
    array is ["ab", "c", "def", "ghij"]，the output should be 10 since there are ten
    characters in total。
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 使用递归编写一个`function`，接受一个字符串数组，并返回所有字符串中字符的总数。例如，如果输入数组是["ab", "c", "def", "ghij"]，那么输出应该是10，因为总共有十个字符。
- en: Use recursion to write a `function` that accepts an array of numbers and returns
    a new array containing just the even numbers。
  id: totrans-3
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 使用递归编写一个`function`，接受一个数字数组并返回一个仅包含偶数的新数组。
- en: A particular numerical sequence is known as triangular numbers。The pattern begins
    as 1, 3, 6, 10, 15, 21, and continues onward。To calculate the next number in the
    sequence, we add the previous number from the sequence plus `N`，where `N` corresponds
    to the place in the sequence where the number lies。For example, the seventh number
    in the sequence is 28, since it’s the seventh number in the pattern, so we add
    the number 7 plus 21 (the previous number in the sequence)。Write a `function`
    that accepts a number for `N` and returns the correct number from the series；that
    is, if the `function` was passed the number 7, the `function` would return 28。
  id: totrans-4
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 特定的数列被称为三角形数。这个模式开始于1、3、6、10、15、21，并继续下去。要计算序列中的下一个数字，我们将序列中的前一个数字加上`N`，其中`N`对应于该数字在序列中的位置。例如，序列中的第七个数字是28，因为它是模式中的第七个数字，所以我们将数字7加上21（序列中的前一个数字）。编写一个`function`，接受一个数字`N`并返回该序列中的正确数字；也就是说，如果`function`传入数字7，`function`将返回28。
- en: Use recursion to write a `function` that accepts a string and returns the first
    index that contains the character “`x`”。For example, the string, "abcdefghijklmnopqrstuvwxyz"
    has an “`x`” at index 23。To keep things simple, assume the string definitely has
    at least one “`x`”。
  id: totrans-5
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 使用递归编写一个`function`，接受一个字符串并返回包含字符“`x`”的第一个索引。例如，字符串"abcdefghijklmnopqrstuvwxyz"在索引23处有一个“`x`”。为了简化问题，假设字符串至少有一个“`x`”。
- en: This problem is known as the unique paths problem。Let’s say you have a grid
    of rows and columns。Write a `function` that accepts a number of rows and a number
    of columns and calculates the number of possible “shortest” paths from the upper-leftmost
    square to the lower-rightmost square。
  id: totrans-6
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 这个问题被称为唯一路径问题。假设你有一个行和列的网格。编写一个`function`，接受行数和列数，并计算从左上角到右下角的所有可能的“最短”路径的数量。
- en: For example, here’s what the grid looks like with three rows and seven columns。You
    want to get from the `S` (Start) to the `F` (Finish)。
  id: totrans-7
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，这里是一个包含三行和七列的网格。你要从`S`（起点）到`F`（终点）。
- en: '![images/learning_to_write_in_recursive/unique_paths_setup.png](images/learning_to_write_in_recursive/unique_paths_setup.png)'
  id: totrans-8
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_IMG
  zh: '![images/learning_to_write_in_recursive/unique_paths_setup.png](images/learning_to_write_in_recursive/unique_paths_setup.png)'
- en: By “shortest” path, I mean that at every step, either you’re moving one step
    to the right：
  id: totrans-9
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 所谓“最短”路径，我是指在每一步，你要么向右移动一步：
- en: '![images/learning_to_write_in_recursive/unique_paths_move_right.png](images/learning_to_write_in_recursive/unique_paths_move_right.png)'
  id: totrans-10
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_IMG
  zh: '![images/learning_to_write_in_recursive/unique_paths_move_right.png](images/learning_to_write_in_recursive/unique_paths_move_right.png)'
- en: Or you’re moving one step downward：
  id: totrans-11
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 或者你向下移动一步：
- en: '![images/learning_to_write_in_recursive/unique_paths_move_down.png](images/learning_to_write_in_recursive/unique_paths_move_down.png)'
  id: totrans-12
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_IMG
  zh: '![images/learning_to_write_in_recursive/unique_paths_move_down.png](images/learning_to_write_in_recursive/unique_paths_move_down.png)'
- en: Again, your `function` should calculate the number of shortest paths。
  id: totrans-13
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 再次，你的`function`应该计算最短路径的数量。
- en: Copyright © 2024, The Pragmatic Bookshelf。
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 版权所有 © 2024, The Pragmatic Bookshelf。
