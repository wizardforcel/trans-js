- en: © The Author(s), under exclusive license to Springer Fachmedien Wiesbaden GmbH,
    part of Springer Nature 2024J. L. ZuckarelliLearn coding with Python and JavaScript
    [https://doi.org/10.1007/978-3-658-42912-6_7](https://doi.org/10.1007/978-3-658-42912-6_7)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © 作者（们），独家授权给Springer Fachmedien Wiesbaden GmbH，Springer Nature的一部分 2024J. L.
    Zuckarelli《使用Python和JavaScript学习编程》[https://doi.org/10.1007/978-3-658-42912-6_7](https://doi.org/10.1007/978-3-658-42912-6_7)
- en: 7. Nine Questions
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7. 九个问题
- en: Joachim L. Zuckarelli^([1](#Aff2)  )(1)München, GermanyOverview
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Joachim L. Zuckarelli^([1](#Aff2) )(1)德国慕尼黑概述
- en: In this chapter, we’ll get an overview of the 9 questions that we’ll use to
    learn the basic concepts of programming in this part of the book. Based on these
    basic concepts, we will then work our way through the Python and JavaScript programming
    languages in the following two parts of the book. But understanding these basic
    concepts is not only useful for learning Python and JavaScript, but for any programming
    language.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将概述这9个问题，这些问题将帮助我们学习本书这一部分中的编程基本概念。基于这些基本概念，我们将在接下来的两部分中学习Python和JavaScript编程语言。但理解这些基本概念不仅对学习Python和JavaScript有用，对任何编程语言都是如此。
- en: This second part of the book is devoted to the *basic concepts* of programming.
    The basic concepts are implemented in virtually all programming languages in one
    way or another. Once you understand these concepts, you will discover many similarities
    between different programming languages. These similarities are what make learning
    new programming languages much easier.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的第二部分专门讲解编程的*基本概念*。这些基本概念几乎在所有编程语言中都有不同程度的实现。一旦你理解了这些概念，你将发现不同编程语言之间有许多相似之处。这些相似之处使得学习新编程语言变得更加容易。
- en: We will summarize the basic concepts of programming under *9 big questions*.
    If you are learning a new programming language, you can use these questions to
    guide your learning process. Of course, you can work on the questions in a different
    order than the one proposed here. And, at some points, when you are dealing with
    one question, you have to “anticipate” another question. For example, if you are
    dealing with the storing of data in your language, you must also be able to—at
    least in a rudimentary way—output data (which is the subject of another question)
    in order to try something out practically. But even though the questions are not
    (and cannot be) entirely self-contained, they form a useful framework and a roadmap
    to understanding the new language, from the ground up.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在*9个大问题*下总结编程的基本概念。如果你正在学习一门新的编程语言，可以通过这些问题来指导你的学习过程。当然，你可以按照不同于这里提出的顺序来处理这些问题。而且，在某些时候，当你在处理一个问题时，你必须“预见”另一个问题。例如，如果你正在处理语言中的数据存储问题，你也必须能够——至少以初步的方式——输出数据（这是另一个问题的主题），以便进行实际操作。但即使这些问题不是（也不能）完全独立的，它们仍然构成了一个有用的框架和从基础开始理解新语言的路线图。
- en: Even if you do not follow the 9 questions explicitly you must be able to answer
    the 9 questions if you want to understand the basics of a programming language
    that is new to you.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你没有明确地按照9个问题的顺序进行学习，如果你想理解一种对你来说新的编程语言的基础，你也必须能够回答这9个问题。
- en: Now in this part, we will first learn the basic concepts of programming using
    the 9 questions. At the end of each chapter, you will find a section called *Your
    Roadmap to Learning a New Programming Language*, which summarizes the key points
    of each chapter that you should familiarize yourself with in order to learn a
    new programming language.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本部分中，我们将首先通过9个问题来学习编程的基本概念。在每一章的结尾，你会找到一个名为*学习新编程语言的路线图*的部分，其中总结了你在学习新编程语言时需要熟悉的每章要点。
- en: In the next two parts, we will apply the basic concepts to learn the fundamentals
    of Python and JavaScript. These two parts of the book are also logically structured
    based on the 9 questions. Therefore, at any time while you are learning Python
    and JavaScript, you can flip back to the corresponding Basic Concepts chapter
    to refresh one or two basic considerations.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的两部分中，我们将应用这些基本概念来学习Python和JavaScript的基础知识。这两部分也根据9个问题的结构逻辑进行组织。因此，在你学习Python和JavaScript的任何时候，你都可以翻回到相应的基本概念章节，回顾一两项基本考虑。
- en: The 9 questions are as follows.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这9个问题如下。
- en: What Do I Need for Programming?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 编程需要什么？
- en: Here we will first deal with the *tools* you need to write and run programs
    in the programming language. We will also look at where you can get more information
    and help if you get stuck.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将首先讨论编写和运行程序所需的*工具*。我们还将探讨如果你遇到困难，在哪里可以获得更多信息和帮助。
- en: What Do I Have to Do to Get a Program Running?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要让程序运行，我需要做什么？
- en: Next, we develop a very first, very simple program. In doing so, we already
    learn certain *basic rules of program structure* and the *grammar of* the programming
    language and understand how programs are *written* and *executed.* To be able
    to do this is a basic requirement for all further learning steps, during which
    we also want to work very practically and write executable programs.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将开发一个非常简单的第一个程序。在此过程中，我们将学习一些*程序结构的基本规则*和编程语言的*语法*，并理解程序是如何被*编写*和*执行*的。能够做到这一点是所有进一步学习步骤的基础，在这些步骤中，我们也希望以非常实用的方式工作并编写可执行程序。
- en: How Do I Make Sure That I (And Others) Still Understand My Program Later?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我如何确保我（和其他人）以后还能理解我的程序？
- en: Your programs must at least be understandable to you, but sometimes also for
    others. It helps to adhere to certain *conventions* as to how program code should
    look, and to *comment* your program, that is, to provide explanations. If your
    program code is also to be used by others, you must *document* how exactly this
    can be done.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你的程序至少必须对你自己是可理解的，有时也要对其他人可理解。遵循一定的*约定*，例如程序代码应该是什么样子，并且为程序添加*注释*，即提供解释，这有助于理解。如果你的程序代码还要供其他人使用，你必须*文档化*如何正确使用它。
- en: How Do I Store Data to Work With?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我如何存储数据以供使用？
- en: All software works with data. Therefore, we will next look at how data is stored
    and processed in programs. In doing so, you will learn about the central concept
    of *variables* and see how *objects* can be used to represent things in an elegant
    way.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所有软件都需要处理数据。因此，我们接下来将探讨在程序中如何存储和处理数据。在这个过程中，你将学习*变量*这一核心概念，并看到如何使用*对象*以优雅的方式表示事物。
- en: How Do I Input and Output Data?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我如何输入和输出数据？
- en: The data that is held in the program for processing must come from somewhere.
    In addition, the processing results are to be communicated “to the outside” somehow.
    These are the two issues in this question. *Input* and *output* of data in all
    its forms, be it by the user via the program’s interface, or through files or
    databases, is a core requirement that all programs must serve in one way or another.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 程序中用于处理的数据必须来自某个地方。此外，处理结果还需要以某种方式“传递到外部”。这是这个问题中的两个要点。数据的*输入*和*输出*，无论是通过用户的程序界面，还是通过文件或数据库，都是所有程序必须在某种程度上实现的核心要求。
- en: How Do I Work with Program Functions to Work with Data and Trigger Actions?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我如何利用程序函数处理数据并触发操作？
- en: In the context of this question, we deal with the actual processing of the data*.*
    This is done in most programming languages by *functions.* The input and output
    of data (previous question) also makes use of such functions. We can develop functions
    ourselves, or we can use functions that the programming language, or the community
    of developers, provides for us. Being able to work with functions safely is a
    key to success when working with any programming language.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个问题的背景下，我们讨论的是数据的实际处理*。* 在大多数编程语言中，这是通过*函数*来完成的。数据的输入和输出（上一问题）也会利用这样的函数。我们可以自己开发函数，或者使用编程语言或开发者社区为我们提供的函数。能够安全地使用函数是成功掌握任何编程语言的关键。
- en: How Do I Control the Program Flow and Make the Program React to User Actions
    and Other Events?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我如何控制程序的流程并让程序对用户操作和其他事件做出反应？
- en: Our programs should not be rigid, but should react to their environment, for
    example to the wishes of the user. In the context of this question, we will deal
    with how we can let our programs react to external influences and events and branch
    into alternative sections depending on events in the program flow.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的程序不应该是死板的，而应该对环境做出反应，例如对用户的需求。在这个问题的背景下，我们将讨论如何让程序对外部影响和事件做出反应，并根据程序流程中的事件分支进入不同的部分。
- en: How Do I Repeat Program Instructions Efficiently?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我如何高效地重复执行程序指令？
- en: Often, parts of a program are repetitions of the same pattern. Repetitions can
    be realized elegantly and efficiently in most programming languages with *loops*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，程序的某些部分是相同模式的重复。大多数编程语言通过*循环*可以优雅且高效地实现这种重复。
- en: How Do I Search for and Fix Errors in a Structured Way?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我如何以有条理的方式查找和修复程序中的错误？
- en: Writing a program and making it perfect on the first try is an illusion—even
    for professionals. Unfortunately, errors are an inevitable part of everyday programming.
    Therefore, to conclude our tour through the basic concepts of programming, we
    will deal with how we can systematically find, diagnose, and eliminate errors,
    and which tools can help us to do so.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序并在第一次尝试时就使其完美是一个幻觉——即使对于专业人士也是如此。不幸的是，错误是日常编程中不可避免的一部分。因此，为了总结我们对编程基本概念的概述，我们将讨论如何系统地查找、诊断和消除错误，以及哪些工具可以帮助我们做到这一点。
