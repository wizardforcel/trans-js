- en: Chapter 3
  id: totrans-0
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 第3章
- en: O Yes! `Big O Notation`
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 哦，是的！`大O表示法`
- en: We’ve seen in the preceding chapters that the primary factor in determining
    an algorithm’s efficiency is the number of steps it takes.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们看到，决定算法效率的主要因素是其所需的步骤数量。
- en: However, we can’t simply label one algorithm a “22-step algorithm” and another
    a “400-step algorithm.” This is because the number of steps an algorithm takes
    cannot be pinned down to a single number. Let’s take `linear search`, for example.
    The number of steps `linear search` takes varies, as it takes as many steps as
    there are elements in the array. If the array contains 22 elements, `linear search`
    takes 22 steps. If the array contains 400 elements, however, `linear search` takes
    400 steps.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，我们不能简单地将一个算法标记为“22步算法”，另一个标记为“400步算法”。这是因为一个算法所需的步骤数量无法确定为一个单一的数字。以`线性搜索`为例，`线性搜索`所需的步骤数量是可变的，因为它需要的步骤数量等于数组中的元素个数。如果数组包含22个元素，`线性搜索`需要22步。然而，如果数组包含400个元素，`线性搜索`则需要400步。
- en: The more effective way, then, to quantify the efficiency of `linear search`
    is to say that `linear search` takes `N` steps for `N` elements in the array;
    that is, if an array has `N` elements, `linear search` takes `N` steps. Now, this
    is a pretty wordy way of expressing this concept.
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因此，量化`线性搜索`效率的更有效方法是说`线性搜索`对于数组中的`N`个元素需要`N`步；也就是说，如果数组有`N`个元素，`线性搜索`需要`N`步。现在，这种表达方式确实比较冗长。
- en: To help ease communication regarding time complexity, computer scientists have
    borrowed a concept from the world of mathematics to describe a concise and consistent
    language around the efficiency of data structures and algorithms. Known as `Big
    O notation`, this formalized expression of these concepts allows us to easily
    categorize the efficiency of a given algorithm and convey it to others.
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为了帮助简化有关时间复杂度的交流，计算机科学家借鉴了数学世界的一个概念，以描述围绕数据结构和算法效率的简明且一致的语言。`大O表示法`作为这些概念的正式表达，使我们能够轻松地对给定算法的效率进行分类并传达给他人。
- en: Once you understand `Big O` notation, you’ll have the tools to analyze each
    algorithm going forward in a consistent and concise way—it’s the way the pros
    do it.
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 一旦你理解了`大O`表示法，你就拥有了分析每个算法的一致且简明的工具——这就是专业人士的做法。
- en: While `Big O` notation comes from the math world, I’m going to leave out all
    the mathematical jargon and explain it as it relates to computer science. Additionally,
    I’m going to begin by explaining `Big O` notation in simple terms and then continue
    to refine it as we proceed through this chapter and the next three chapters. It’s
    not a difficult concept, but it’ll be made even easier if I explain it in chunks
    over multiple chapters.
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 虽然`大O`表示法源自数学领域，但我将省略所有数学术语，并以计算机科学相关的方式来解释它。此外，我将首先用简单的术语解释`大O`表示法，然后随着章节的进行逐步细化。这个概念并不难，但如果我分多个章节逐步解释，它会变得更容易理解。
