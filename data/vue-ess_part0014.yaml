- en: 'Module 9:'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 第9模块：
- en: '|'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Animation and Transitions
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 动画与过渡
- en: '|'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'In the dynamic realm of web development, user engagement is not solely reliant
    on static interfaces but is greatly enhanced by the inclusion of animations and
    transitions. The module "Animation and Transitions" takes center stage in the
    book "Vue.js Essentials: For Responsive Web Development," guiding readers through
    the intricacies of incorporating motion into Vue.js applications. Within these
    pages, developers will embark on a journey to master Vue.js animation capabilities,
    elevating user experience through fluid and visually engaging interfaces.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '在动态的 web 开发领域，用户参与感不仅仅依赖于静态界面，而是通过动画和过渡的加入得到了极大增强。本模块《动画与过渡》在《Vue.js Essentials:
    For Responsive Web Development》一书中占据核心地位，引导读者了解如何将运动元素融入 Vue.js 应用程序。在这些内容中，开发者将踏上掌握
    Vue.js 动画能力的旅程，通过流畅且视觉吸引人的界面提升用户体验。'
- en: The Importance of Motion in Modern Web Development
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现代 web 开发中运动的重要性
- en: Before delving into the specifics of animation and transitions in Vue.js, it
    is paramount to recognize the significance of motion in modern web development.
    This module begins by highlighting the impact of animations and transitions on
    user perception, engagement, and overall satisfaction. Readers gain an understanding
    of how Vue.js seamlessly integrates with animation principles, enabling developers
    to create interfaces that are not only functional but also visually compelling
    and delightful to interact with.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨 Vue.js 中动画和过渡的具体细节之前，首先需要认识到运动在现代 web 开发中的重要性。本模块首先强调动画和过渡对用户感知、参与度和整体满意度的影响。读者将理解
    Vue.js 如何与动画原理无缝结合，使开发者能够创建不仅功能强大，而且视觉上引人入胜、令人愉悦的界面。
- en: 'Vue.js Transition Basics: Unveiling the Transition Component'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 过渡基础：揭示 Transition 组件
- en: At the core of Vue.js animation lies the powerful Transition component. This
    segment delves into the basics of the Transition component, guiding readers through
    its usage to orchestrate smooth entrance and exit animations. Developers will
    gain insights into handling multiple elements simultaneously, applying CSS classes
    during transitions, and customizing animation timings. By mastering the fundamentals
    of Vue.js transitions, developers can imbue their applications with a sense of
    continuity and elegance.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 动画的核心是强大的 Transition 组件。本节将深入探讨 Transition 组件的基础知识，引导读者了解如何使用该组件来实现平滑的进场和退场动画。开发者将获得如何同时处理多个元素、在过渡期间应用
    CSS 类以及自定义动画时长的相关知识。通过掌握 Vue.js 过渡的基础，开发者可以为他们的应用程序赋予连续性和优雅感。
- en: Dynamic Transitions and State-based Animations
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 动态过渡与基于状态的动画
- en: Vue.js goes beyond static animations by offering dynamic transitions and state-based
    animations. This module explores the intricacies of dynamically applying transitions
    based on component data changes, enabling developers to create interfaces that
    respond dynamically to user interactions. Readers will delve into the use of transition
    modes and dynamic transition names, unlocking the potential to build interfaces
    that adapt seamlessly to varying application states.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js不仅提供静态动画，还通过动态过渡和基于状态的动画超越了这一点。本模块将探讨如何基于组件数据变化动态应用过渡，使开发者能够创建对用户交互做出动态响应的界面。读者将深入了解过渡模式和动态过渡名称的使用，解锁构建能够无缝适应不同应用状态的界面的潜力。
- en: Vue.js and Third-party Animation Libraries Integration
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js与第三方动画库的集成
- en: To further extend the animation capabilities of Vue.js, integration with third-party
    animation libraries becomes a valuable strategy. This segment explores how Vue.js
    harmoniously integrates with popular animation libraries like GreenSock Animation
    Platform (GSAP) or Anime.js. Developers will gain insights into leveraging the
    advanced features offered by these libraries to create intricate animations, enhancing
    the visual appeal and interactivity of Vue.js applications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步扩展Vue.js的动画功能，与第三方动画库的集成成为一种有价值的策略。本节将探讨Vue.js如何与流行的动画库，如GreenSock动画平台（GSAP）或Anime.js，进行和谐集成。开发者将了解如何利用这些库提供的高级功能，创建复杂的动画，提升Vue.js应用的视觉吸引力和互动性。
- en: '"Animation and Transitions" stands as a pivotal module within "Vue.js Essentials:
    For Responsive Web Development," providing readers with a comprehensive guide
    to incorporating motion into Vue.js applications. By navigating through the Transition
    component, dynamic transitions, and third-party library integration, developers
    gain the skills needed to elevate user experience through visually engaging and
    responsive interfaces. This module equips developers with the tools to infuse
    life and dynamism into their web applications, fostering a memorable and enjoyable
    user interaction.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 《动画与过渡》是《Vue.js基础：响应式网页开发》中的一个关键模块，为读者提供了将动画融入Vue.js应用的全面指南。通过学习过渡组件、动态过渡以及第三方库的集成，开发者将掌握提升用户体验的技能，打造具有视觉吸引力和响应性的界面。该模块为开发者提供了将生命力与动感注入到网页应用中的工具，从而促进难忘且愉悦的用户互动。
- en: Introduction to Vue.js Transitions
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Vue.js过渡简介
- en: 'The module "Animation and Transitions" within "Vue.js Essentials: For Responsive
    Web Development" introduces an essential section titled "Introduction to Vue.js
    Transitions." This segment serves as a gateway for developers into the world of
    creating smooth and visually appealing transitions within Vue.js applications.
    Transitions, a powerful feature of Vue.js, enable the integration of animation
    effects to enhance user experience and provide a more polished and dynamic interface.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '《Vue.js Essentials: For Responsive Web Development》中的 "动画和过渡" 模块引入了一个关键部分，名为
    "Vue.js 过渡简介"。这个部分为开发者提供了进入 Vue.js 应用中创建流畅且视觉上吸引人的过渡效果的入口。过渡是 Vue.js 的一项强大功能，它允许集成动画效果以增强用户体验，提供更精致且动态的界面。'
- en: <!-- BasicTransition.vue -->
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- BasicTransition.vue -->
- en: <template>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <transition name="fade">
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: <transition name="fade">
- en: <p v-if="showText">This text fades in and out</p>
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <p v-if="showText">这段文字会淡入淡出</p>
- en: </transition>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: </transition>
- en: <button @click="toggleText">Toggle Text</button>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="toggleText">切换文本</button>
- en: </div>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'showText: true,'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 'showText: true,'
- en: '};'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: toggleText() {
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: toggleText() {
- en: this.showText = !this.showText;
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: this.showText = !this.showText;
- en: '},'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: <style>
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <style>
- en: /* BasicTransition.vue styles */
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: /* BasicTransition.vue 样式 */
- en: .fade-enter-active, .fade-leave-active {
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: .fade-enter-active, .fade-leave-active {
- en: 'transition: opacity 0.5s;'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 'transition: opacity 0.5s;'
- en: '}'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .fade-enter, .fade-leave-to {
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: .fade-enter, .fade-leave-to {
- en: 'opacity: 0;'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 'opacity: 0;'
- en: '}'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: 'In this example, the BasicTransition component introduces the basics of Vue.js
    transitions. The transition element encapsulates a paragraph that fades in and
    out based on the showText data property. The transition effect is achieved through
    the defined CSS classes: .fade-enter-active, .fade-leave-active, .fade-enter,
    and .fade-leave-to. These classes control the opacity transition, providing a
    smooth fade-in and fade-out effect when the text is toggled.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，BasicTransition 组件介绍了 Vue.js 过渡的基础。过渡元素封装了一个段落，基于 showText 数据属性使其淡入淡出。过渡效果是通过定义的
    CSS 类：.fade-enter-active, .fade-leave-active, .fade-enter 和 .fade-leave-to 实现的。这些类控制了透明度过渡，当文本切换时，提供了平滑的淡入淡出效果。
- en: 'CSS Transition Classes in Vue.js: Anatomy of a Vue.js Transition'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 中的 CSS 过渡类：Vue.js 过渡的结构
- en: Understanding the underlying CSS transition classes is fundamental to mastering
    Vue.js transitions. The classes are automatically applied by Vue.js during different
    phases of a transition, allowing developers to customize the appearance and behavior
    of elements during transitions.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 理解底层的 CSS 过渡类是掌握 Vue.js 过渡的基础。Vue.js 在过渡的不同阶段自动应用这些类，允许开发者在过渡过程中自定义元素的外观和行为。
- en: '.fade-enter-active and .fade-leave-active: Applied during the entire transition
    phase, these classes define the transition effect''s duration and properties.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: .fade-enter-active 和 .fade-leave-active：在整个过渡阶段应用，这些类定义了过渡效果的持续时间和属性。
- en: '.fade-enter and .fade-leave-to: Applied at the start and end of the transition,
    these classes define the initial and final states of the transitioning element.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: .fade-enter 和 .fade-leave-to：在过渡的开始和结束时应用，这些类定义了过渡元素的初始和最终状态。
- en: <!-- TransitionClassesExplanation.vue -->
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- TransitionClassesExplanation.vue -->
- en: <template>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <transition name="fade">
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: <transition name="fade">
- en: <p v-if="showText">Explaining Transition Classes</p>
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: <p v-if="showText">解释过渡类</p>
- en: </transition>
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: </transition>
- en: <button @click="toggleText">Toggle Text</button>
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="toggleText">切换文本</button>
- en: </div>
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <style>
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: <style>
- en: /* TransitionClassesExplanation.vue styles */
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: /* TransitionClassesExplanation.vue 样式 */
- en: .fade-enter-active, .fade-leave-active {
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: .fade-enter-active, .fade-leave-active {
- en: 'transition: opacity 0.5s;'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 'transition: opacity 0.5s;'
- en: '}'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .fade-enter, .fade-leave-to {
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: .fade-enter, .fade-leave-to {
- en: 'opacity: 0;'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 'opacity: 0;'
- en: '}'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: In this component, the TransitionClassesExplanation component showcases the
    application of transition classes to create a fading effect. As the text transitions
    in and out, Vue.js automatically applies the specified transition classes, illustrating
    the seamless integration of transitions into Vue.js applications.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个组件中，`TransitionClassesExplanation` 组件展示了如何应用过渡类来创建淡入淡出效果。当文本进入和退出时，Vue.js
    会自动应用指定的过渡类，展示了过渡效果与 Vue.js 应用的无缝集成。
- en: 'JavaScript Hooks for Transition Control: Beyond Simple Transitions'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 钩子用于过渡控制：超越简单的过渡效果
- en: Vue.js transitions offer more than just simple fade effects. Developers can
    leverage JavaScript hooks to add custom logic and control to transitions. The
    before-enter, enter, after-enter, before-leave, leave, and after-leave hooks provide
    opportunities to execute code at different stages of a transition.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 的过渡效果不仅仅是简单的淡入淡出。开发者可以利用 JavaScript 钩子为过渡效果添加自定义逻辑和控制。`before-enter`、`enter`、`after-enter`、`before-leave`、`leave`
    和 `after-leave` 钩子为在过渡的不同阶段执行代码提供了机会。
- en: <!-- TransitionHooks.vue -->
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- TransitionHooks.vue -->
- en: <template>
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <transition
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: <transition
- en: name="custom"
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: name="custom"
- en: '@before-enter="beforeEnter"'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '@before-enter="beforeEnter"'
- en: '@enter="enter"'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '@enter="enter"'
- en: '@after-enter="afterEnter"'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '@after-enter="afterEnter"'
- en: '>'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <p v-if="showText">Custom Transition with Hooks</p>
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: <p v-if="showText">自定义过渡与钩子</p>
- en: </transition>
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: </transition>
- en: <button @click="toggleText">Toggle Text</button>
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="toggleText">切换文本</button>
- en: </div>
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'showText: true,'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 'showText: true,'
- en: '};'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: toggleText() {
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: toggleText() {
- en: this.showText = !this.showText;
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: this.showText = !this.showText;
- en: '},'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: beforeEnter(el) {
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: beforeEnter(el) {
- en: // Logic before element enters
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: // 元素进入前的逻辑
- en: '},'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: enter(el, done) {
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: enter(el, done) {
- en: // Logic during element entering
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: // 元素进入中的逻辑
- en: done(); // Callback to indicate completion
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: done(); // 表示完成的回调
- en: '},'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: afterEnter(el) {
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: afterEnter(el) {
- en: // Logic after element enters
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: // 元素进入后的逻辑
- en: '},'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: <style>
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: <style>
- en: /* TransitionHooks.vue styles */
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: /* TransitionHooks.vue 样式 */
- en: .custom-enter-active {
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: .custom-enter-active {
- en: 'transition: opacity 1s;'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 'transition: opacity 1s;'
- en: '}'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .custom-enter, .custom-leave-to {
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: .custom-enter, .custom-leave-to {
- en: 'opacity: 0;'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 'opacity: 0;'
- en: '}'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: In the TransitionHooks component, custom JavaScript hooks are used to control
    the transition process. The before-enter, enter, and after-enter hooks allow developers
    to execute specific logic before, during, and after the element enters the DOM,
    providing a comprehensive way to customize transition behavior.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TransitionHooks 组件中，使用自定义 JavaScript 钩子来控制过渡过程。before-enter、enter 和 after-enter
    钩子允许开发者在元素进入 DOM 之前、期间和之后执行特定逻辑，从而提供了一种全面的方式来定制过渡行为。
- en: '"Introduction to Vue.js Transitions" within the "Animation and Transitions"
    module is a foundational section that introduces developers to the powerful world
    of transitions in Vue.js. Through practical examples, the section demonstrates
    the application of basic transitions, explores the underlying CSS transition classes,
    and delves into the customization possibilities offered by JavaScript hooks. By
    mastering Vue.js transitions, developers can elevate the user experience of their
    applications, creating visually engaging and dynamic interfaces that captivate
    users and set their Vue.js projects apart.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: “Vue.js 过渡简介”是“动画与过渡”模块中的基础部分，向开发者介绍了 Vue.js 中强大的过渡效果。通过实际示例，本部分演示了基本过渡的应用，探索了底层的
    CSS 过渡类，并深入研究了 JavaScript 钩子提供的自定义可能性。通过掌握 Vue.js 过渡，开发者可以提升应用的用户体验，创建引人入胜的动态界面，吸引用户并使他们的
    Vue.js 项目脱颖而出。
- en: Transition Classes and Modes
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过渡类与模式
- en: 'The module "Animation and Transitions" within "Vue.js Essentials: For Responsive
    Web Development" explores a critical section known as "Transition Classes and
    Modes." This section is paramount for developers seeking advanced control over
    animation effects within their Vue.js applications. By understanding transition
    classes and modes, developers can finely tune the behavior and appearance of animated
    elements, ensuring a seamless and visually pleasing user experience.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在《Vue.js 精要：响应式网页开发》中的“动画与过渡”模块探讨了一个关键部分，称为“过渡类与模式”。这一部分对于希望在 Vue.js 应用中实现高级动画效果控制的开发者至关重要。通过理解过渡类和模式，开发者可以精细调整动画元素的行为和外观，确保用户体验的流畅性和视觉吸引力。
- en: <!-- TransitionClassesAndModes.vue -->
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- TransitionClassesAndModes.vue -->
- en: <template>
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <transition
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: <transition
- en: name="fade"
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: name="fade"
- en: mode="out-in"
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: mode="out-in"
- en: '@before-enter="beforeEnter"'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '@before-enter="beforeEnter"'
- en: '@enter="enter"'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '@enter="enter"'
- en: '@after-enter="afterEnter"'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '@after-enter="afterEnter"'
- en: '>'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <p :key="textKey">{{ text }}</p>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: <p :key="textKey">{{ text }}</p>
- en: </transition>
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: </transition>
- en: <button @click="changeText">Change Text</button>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="changeText">更改文本</button>
- en: </div>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'text: ''Original Text'','
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 'text: ''Original Text'','
- en: 'textKey: 1,'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 'textKey: 1,'
- en: '};'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: changeText() {
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: changeText() {
- en: this.textKey += 1; // Trigger key change to force re-render and transition
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: this.textKey += 1; // 触发 key 变化以强制重新渲染和过渡
- en: 'this.text = this.text === ''Original Text'' ? ''Updated Text'' : ''Original
    Text'';'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 'this.text = this.text === ''Original Text'' ? ''Updated Text'' : ''Original
    Text'';'
- en: '},'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: beforeEnter(el) {
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: beforeEnter(el) {
- en: // Logic before element enters
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: // 元素进入前的逻辑
- en: '},'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: enter(el, done) {
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: enter(el, done) {
- en: // Logic during element entering
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: // 元素进入时的逻辑
- en: done(); // Callback to indicate completion
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: done(); // 回调，表示完成
- en: '},'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: afterEnter(el) {
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: afterEnter(el) {
- en: // Logic after element enters
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: // 元素进入后的逻辑
- en: '},'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: <style>
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: <style>
- en: /* TransitionClassesAndModes.vue styles */
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: /* TransitionClassesAndModes.vue 样式 */
- en: .fade-enter-active, .fade-leave-active {
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: .fade-enter-active, .fade-leave-active {
- en: 'transition: opacity 1s;'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 'transition: opacity 1s;'
- en: '}'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .fade-enter, .fade-leave-to {
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: .fade-enter, .fade-leave-to {
- en: 'opacity: 0;'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 'opacity: 0;'
- en: '}'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: In this example, the TransitionClassesAndModes component illustrates the use
    of the mode attribute to control transition behavior. The mode="out-in" setting
    ensures that the outgoing element completes its transition before the incoming
    element starts its transition. The :key binding facilitates a re-render of the
    component, triggering the transition effect when the text changes.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，TransitionClassesAndModes 组件展示了如何使用 mode 属性来控制过渡行为。mode="out-in" 设置确保在进入元素开始过渡前，离开元素的过渡完成。:key
    绑定促使组件重新渲染，当文本变化时触发过渡效果。
- en: 'Understanding Transition Modes: A Strategic Approach to Animation'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 理解过渡模式：动画的战略性方法
- en: Vue.js offers various transition modes, each serving specific purposes in different
    application scenarios. The three primary modes are in-out, out-in, and default.
    The in-out mode transitions the incoming element first, followed by the outgoing
    element. Conversely, the out-in mode completes the transition of the outgoing
    element before animating the incoming element. The default mode, if not specified,
    follows a default behavior based on the relative positions of elements in the
    DOM.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 提供了多种过渡模式，每种模式在不同的应用场景中有特定的用途。三种主要模式分别是 in-out、out-in 和 default。in-out
    模式首先过渡进入的元素，然后是离开的元素。相反，out-in 模式先完成离开元素的过渡，再动画化进入的元素。如果未指定，默认模式则根据元素在 DOM 中的相对位置进行默认行为。
- en: <!-- TransitionModesExplanation.vue -->
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- TransitionModesExplanation.vue 样式 -->
- en: <template>
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <transition name="fade" mode="in-out">
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: <transition name="fade" mode="in-out">
- en: <p v-if="showText">Explaining Transition Modes</p>
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: <p v-if="showText">解释过渡模式</p>
- en: </transition>
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: </transition>
- en: <button @click="toggleText">Toggle Text</button>
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="toggleText">切换文本</button>
- en: </div>
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <style>
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: <style>
- en: /* TransitionModesExplanation.vue styles */
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: /* TransitionModesExplanation.vue 样式 */
- en: .fade-enter-active, .fade-leave-active {
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: .fade-enter-active, .fade-leave-active {
- en: 'transition: opacity 0.5s;'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 'transition: opacity 0.5s;'
- en: '}'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .fade-enter, .fade-leave-to {
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: .fade-enter, .fade-leave-to {
- en: 'opacity: 0;'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 'opacity: 0;'
- en: '}'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: In the TransitionModesExplanation component, the mode="in-out" setting is applied
    to control the transition mode. As the text is toggled, Vue.js orchestrates the
    transition, providing a clear illustration of the in-out mode in action.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在TransitionModesExplanation组件中，mode="in-out"设置用于控制过渡模式。当文本切换时，Vue.js协调过渡效果，清晰展示了in-out模式的应用。
- en: 'Dynamic Transition Classes: Adapting Animation Styles Dynamically'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 动态过渡类：动态适应动画样式
- en: Vue.js allows developers to dynamically apply transition classes based on changing
    component data, providing a powerful mechanism for adapting animation styles on
    the fly. This dynamic application of classes enables developers to craft intricate
    and responsive animation effects tailored to specific application states.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js允许开发者根据组件数据的变化动态应用过渡类，提供了一个强大的机制，可以实时调整动画样式。通过动态应用类，开发者能够打造复杂且响应迅速的动画效果，以适应特定的应用状态。
- en: <!-- DynamicTransitionClasses.vue -->
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- DynamicTransitionClasses.vue -->
- en: <template>
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <transition :name="transitionName">
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: <transition :name="transitionName">
- en: <p v-if="showText">Dynamic Transition Classes</p>
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: <p v-if="showText">动态过渡类</p>
- en: </transition>
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: </transition>
- en: <button @click="toggleText">Toggle Text</button>
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="toggleText">切换文本</button>
- en: </div>
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'showText: true,'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 'showText: true,'
- en: 'transitionName: ''fade'','
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 'transitionName: ''fade'','
- en: '};'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: toggleText() {
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: toggleText() {
- en: this.showText = !this.showText;
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: this.showText = !this.showText;
- en: 'this.transitionName = this.showText ? ''fade'' : ''slide'';'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 'this.transitionName = this.showText ? ''fade'' : ''slide'';'
- en: '},'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: <style>
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: <style>
- en: /* DynamicTransitionClasses.vue styles */
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: /* DynamicTransitionClasses.vue 样式 */
- en: .fade-enter-active, .fade-leave-active {
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: .fade-enter-active, .fade-leave-active {
- en: 'transition: opacity 0.5s;'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 'transition: opacity 0.5s;'
- en: '}'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .fade-enter, .fade-leave-to {
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: .fade-enter, .fade-leave-to {
- en: 'opacity: 0;'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 'opacity: 0;'
- en: '}'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .slide-enter-active, .slide-leave-active {
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: .slide-enter-active, .slide-leave-active {
- en: 'transition: transform 0.5s;'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 'transition: transform 0.5s;'
- en: '}'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .slide-enter, .slide-leave-to {
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: .slide-enter, .slide-leave-to {
- en: 'transform: translateX(100%);'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 'transform: translateX(100%);'
- en: '}'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: In the DynamicTransitionClasses component, the transitionName data property
    dynamically determines the applied transition class. When the text is toggled,
    Vue.js switches between the 'fade' and 'slide' transition classes, showcasing
    the adaptability of transition classes based on changing data.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在DynamicTransitionClasses组件中，transitionName数据属性动态决定应用的过渡类。当文本切换时，Vue.js在'fade'和'slide'过渡类之间切换，展示了过渡类如何根据数据变化进行适应。
- en: '"Transition Classes and Modes" within the "Animation and Transitions" module
    provides developers with crucial insights into controlling and customizing animation
    effects in Vue.js applications. The examples presented demonstrate the strategic
    use of transition modes to orchestrate transitions and the dynamic application
    of transition classes for adaptive animation styles. By mastering transition classes
    and modes, developers can create sophisticated and visually captivating user interfaces
    that elevate the overall user experience in Vue.js applications.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '"过渡类和模式"模块中的"动画与过渡"部分为开发者提供了关于如何控制和定制Vue.js应用中的动画效果的重要见解。所展示的示例展示了如何策略性地使用过渡模式来编排过渡，以及如何动态应用过渡类以实现自适应的动画样式。通过掌握过渡类和模式，开发者可以创建复杂且视觉吸引力十足的用户界面，从而提升Vue.js应用的整体用户体验。'
- en: Animation with JavaScript Hooks
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 JavaScript 钩子的动画
- en: 'The module "Animation and Transitions" within "Vue.js Essentials: For Responsive
    Web Development" delves into an indispensable section titled "Animation with JavaScript
    Hooks." This section opens the door to a realm of possibilities, allowing developers
    to exert precise control over animations by leveraging JavaScript hooks. Vue.js
    provides a set of hooks that enable developers to inject custom logic and orchestrate
    animations at different stages, offering a high degree of flexibility in creating
    dynamic and engaging user interfaces.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '《Vue.js Essentials: For Responsive Web Development》中的“动画与过渡”模块深入探讨了一个必不可少的部分——“使用
    JavaScript 钩子进行动画”。这一部分为开发者开启了一扇大门，允许他们通过 JavaScript 钩子精确控制动画。Vue.js 提供了一组钩子，使开发者能够在不同阶段注入自定义逻辑并组织动画，从而在创建动态和引人入胜的用户界面时提供了高度的灵活性。'
- en: <!-- AnimationWithHooks.vue -->
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- AnimationWithHooks.vue -->
- en: <template>
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <transition
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: <transition
- en: name="custom-animation"
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: name="custom-animation"
- en: '@before-enter="beforeEnter"'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '@before-enter="beforeEnter"'
- en: '@enter="enter"'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '@enter="enter"'
- en: '@after-enter="afterEnter"'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '@after-enter="afterEnter"'
- en: '>'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <div v-show="isVisible" class="animated-box"></div>
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: <div v-show="isVisible" class="animated-box"></div>
- en: </transition>
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: </transition>
- en: <button @click="toggleVisibility">Toggle Visibility</button>
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="toggleVisibility">切换可见性</button>
- en: </div>
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'isVisible: false,'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 'isVisible: false,'
- en: '};'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: toggleVisibility() {
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: toggleVisibility() {
- en: this.isVisible = !this.isVisible;
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: this.isVisible = !this.isVisible;
- en: '},'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: beforeEnter(el) {
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: beforeEnter(el) {
- en: el.style.transform = 'translateX(-100%)';
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.transform = 'translateX(-100%)';
- en: '},'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: enter(el, done) {
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: enter(el, done) {
- en: // Applying a smooth translation to the right
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: // 应用平滑的右移动画
- en: el.offsetWidth; // Trigger reflow for initial state
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: el.offsetWidth; // 触发回流以获取初始状态
- en: el.style.transition = 'transform 1s';
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.transition = 'transform 1s';
- en: el.style.transform = 'translateX(0)';
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.transform = 'translateX(0)';
- en: done(); // Callback to indicate completion
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: done(); // 回调以指示完成
- en: '},'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: afterEnter(el) {
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: afterEnter(el) {
- en: // Resetting styles after entering
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: // 动画完成后重置样式
- en: el.style.transition = '';
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.transition = '';
- en: el.style.transform = '';
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.transform = '';
- en: '},'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: <style>
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: <style>
- en: /* AnimationWithHooks.vue styles */
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: /* AnimationWithHooks.vue 样式 */
- en: .custom-animation-enter-active {
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: .custom-animation-enter-active {
- en: 'transition: transform 1s;'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 'transition: transform 1s;'
- en: '}'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .custom-animation-enter {
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: .custom-animation-enter {
- en: 'transform: translateX(-100%);'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 'transform: translateX(-100%);'
- en: '}'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .animated-box {
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: .animated-box {
- en: 'width: 100px;'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 'width: 100px;'
- en: 'height: 100px;'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '高度: 100px;'
- en: 'background-color: #3498db;'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '背景颜色: #3498db;'
- en: '}'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: In this example, the AnimationWithHooks component showcases the use of JavaScript
    hooks to control a custom animation. The before-enter, enter, and after-enter
    hooks are utilized to set initial styles, apply animation, and reset styles after
    the animation completes, respectively.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，AnimationWithHooks 组件展示了如何使用 JavaScript 钩子来控制自定义动画。before-enter、enter
    和 after-enter 钩子分别用于设置初始样式、应用动画和动画完成后重置样式。
- en: 'Understanding JavaScript Hooks in Vue.js Transitions: A Deep Dive'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 深入理解 Vue.js 过渡中的 JavaScript 钩子
- en: 'Vue.js provides a range of JavaScript hooks that allow developers to intervene
    and customize the animation process. Here is an overview of some essential hooks:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 提供了一系列 JavaScript 钩子，允许开发者干预并自定义动画过程。以下是一些常用钩子的概述：
- en: 'before-enter(el): Executed before an element enters. Developers can set initial
    styles or perform any necessary setup.'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 'before-enter(el): 在元素进入之前执行。开发者可以设置初始样式或进行任何必要的准备工作。'
- en: 'enter(el, done): Triggered when the element starts entering. Custom animation
    logic is applied, and the done callback signals the completion of the transition.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 'enter(el, done): 当元素开始进入时触发。应用自定义动画逻辑，done 回调函数表示过渡完成。'
- en: 'after-enter(el): Runs after the element has entered. Developers can use this
    hook to reset styles or perform any post-animation tasks.'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 'after-enter(el): 元素进入后执行。开发者可以利用这个钩子重置样式或执行任何动画后的任务。'
- en: <!-- HooksExplanation.vue -->
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- HooksExplanation.vue -->
- en: <template>
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <transition
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: <transition
- en: name="custom-transition"
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: name="custom-transition"
- en: '@before-enter="beforeEnter"'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '@before-enter="beforeEnter"'
- en: '@enter="enter"'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '@enter="enter"'
- en: '@after-enter="afterEnter"'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '@after-enter="afterEnter"'
- en: '>'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <div v-if="isVisible" class="animated-element"></div>
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: <div v-if="isVisible" class="animated-element"></div>
- en: </transition>
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: </transition>
- en: <button @click="toggleVisibility">Toggle Visibility</button>
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="toggleVisibility">切换可见性</button>
- en: </div>
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'isVisible: false,'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 'isVisible: false,'
- en: '};'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: toggleVisibility() {
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: toggleVisibility() {
- en: this.isVisible = !this.isVisible;
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: this.isVisible = !this.isVisible;
- en: '},'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: beforeEnter(el) {
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: beforeEnter(el) {
- en: // Setting initial opacity
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: // 设置初始透明度
- en: el.style.opacity = 0;
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.opacity = 0;
- en: '},'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: enter(el, done) {
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: enter(el, done) {
- en: // Applying a fade-in effect
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: // 应用渐显效果
- en: el.offsetWidth; // Trigger reflow for initial state
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: el.offsetWidth; // 触发重排以获取初始状态
- en: el.style.transition = 'opacity 1s';
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.transition = 'opacity 1s';
- en: el.style.opacity = 1;
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.opacity = 1;
- en: done(); // Callback to indicate completion
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: done(); // 回调函数表示完成
- en: '},'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: afterEnter(el) {
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: afterEnter(el) {
- en: // Resetting styles after entering
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: // 元素进入后重置样式
- en: el.style.transition = '';
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.transition = '';
- en: el.style.opacity = '';
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.opacity = '';
- en: '},'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: <style>
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: <style>
- en: /* HooksExplanation.vue styles */
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: /* HooksExplanation.vue 样式 */
- en: .custom-transition-enter-active {
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: .custom-transition-enter-active {
- en: 'transition: opacity 1s;'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 'transition: opacity 1s;'
- en: '}'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .custom-transition-enter {
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: .custom-transition-enter {
- en: 'opacity: 0;'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 'opacity: 0;'
- en: '}'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .animated-element {
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: .animated-element {
- en: 'width: 100px;'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 'width: 100px;'
- en: 'height: 100px;'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 'height: 100px;'
- en: 'background-color: #27ae60;'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 'background-color: #27ae60;'
- en: '}'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: In the HooksExplanation component, the hooks are employed to create a fade-in
    effect. The before-enter hook sets the initial opacity, the enter hook applies
    the fade-in effect, and the after-enter hook resets styles after the animation.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 在 HooksExplanation 组件中，使用钩子创建了一个渐显效果。before-enter 钩子设置初始透明度，enter 钩子应用渐显效果，而
    after-enter 钩子在动画完成后重置样式。
- en: 'Seamless Integration with CSS Transitions: Harmony in Animation Control'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 与 CSS 过渡的无缝集成：动画控制中的和谐美感
- en: While JavaScript hooks offer a powerful way to customize animations in Vue.js,
    they seamlessly integrate with CSS transitions. The combination of both allows
    for a harmonious and comprehensive approach to animation control. Developers can
    leverage the simplicity of CSS transitions and enhance them with the precision
    and customization offered by JavaScript hooks.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 JavaScript 钩子提供了一种强大的方式来定制 Vue.js 中的动画，但它们可以与 CSS 过渡无缝集成。两者的结合使得动画控制的方法更加和谐和全面。开发者可以利用
    CSS 过渡的简易性，并通过 JavaScript 钩子增强其精确性和定制性。
- en: '"Animation with JavaScript Hooks" in the "Animation and Transitions" module
    provides developers with a toolbox of capabilities to orchestrate intricate and
    dynamic animations in Vue.js applications. By understanding and harnessing the
    potential of JavaScript hooks, developers can craft visually stunning and responsive
    user interfaces that captivate users and elevate the overall user experience.
    The seamless integration of JavaScript hooks with CSS transitions ensures a balanced
    and versatile approach to animation control in Vue.js development.'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 《动画与过渡》模块中的“使用 JavaScript 钩子的动画”提供了一个开发者工具箱，用于在 Vue.js 应用中编排复杂和动态的动画。通过理解并利用
    JavaScript 钩子的潜力，开发者可以创造出视觉上惊艳、响应迅速的用户界面，吸引用户并提升整体用户体验。JavaScript 钩子与 CSS 过渡的无缝集成，确保了
    Vue.js 开发中动画控制的平衡性和多样性。
- en: Complex Animation Sequences
  id: totrans-368
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复杂动画序列
- en: 'Within the "Animation and Transitions" module of "Vue.js Essentials: For Responsive
    Web Development," the section titled "Complex Animation Sequences" takes center
    stage, offering developers a profound exploration into the orchestration of intricate
    and sophisticated animations in Vue.js applications. This section delves into
    the art of combining multiple animations seamlessly, providing a comprehensive
    guide on how to create captivating visual experiences through complex animation
    sequences.'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '在《Vue.js Essentials: For Responsive Web Development》的“动画与过渡”模块中，“复杂动画序列”部分占据了核心位置，为开发者提供了对
    Vue.js 应用中复杂和精细动画的深刻探讨。本节深入讲解了如何无缝地结合多种动画，提供了一本关于如何通过复杂的动画序列创造引人入胜的视觉体验的全面指南。'
- en: <!-- ComplexAnimationSequences.vue -->
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- ComplexAnimationSequences.vue -->
- en: <template>
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <transition
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: <transition
- en: name="fade-slide"
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: name="fade-slide"
- en: '@before-enter="beforeEnter"'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '@before-enter="beforeEnter"'
- en: '@enter="enter"'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '@enter="enter"'
- en: '@after-enter="afterEnter"'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '@after-enter="afterEnter"'
- en: '>'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <div v-if="isVisible" class="animated-box"></div>
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: <div v-if="isVisible" class="animated-box"></div>
- en: </transition>
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: </transition>
- en: <button @click="toggleVisibility">Toggle Visibility</button>
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="toggleVisibility">切换可见性</button>
- en: </div>
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'isVisible: false,'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 'isVisible: false,'
- en: '};'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: toggleVisibility() {
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: toggleVisibility() {
- en: this.isVisible = !this.isVisible;
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: this.isVisible = !this.isVisible;
- en: '},'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: beforeEnter(el) {
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: beforeEnter(el) {
- en: // Initial styles before entering
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: // 进入前的初始样式
- en: el.style.opacity = 0;
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.opacity = 0;
- en: el.style.transform = 'translateY(-50%)';
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.transform = 'translateY(-50%)';
- en: '},'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: enter(el, done) {
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: enter(el, done) {
- en: // Applying fade-in and slide-down animations
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: // 应用淡入和滑动下落动画
- en: el.offsetWidth; // Trigger reflow for initial state
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: el.offsetWidth; // 触发重排以获取初始状态
- en: el.style.transition = 'opacity 1s, transform 1s';
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.transition = 'opacity 1s, transform 1s';
- en: el.style.opacity = 1;
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.opacity = 1;
- en: el.style.transform = 'translateY(0)';
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.transform = 'translateY(0)';
- en: done(); // Callback to indicate completion
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: done(); // 回调函数，表示动画完成
- en: '},'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: afterEnter(el) {
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: afterEnter(el) {
- en: // Resetting styles after entering
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: // 动画结束后重置样式
- en: el.style.transition = '';
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.transition = '';
- en: el.style.opacity = '';
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.opacity = '';
- en: el.style.transform = '';
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.transform = '';
- en: '},'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: <style>
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: <style>
- en: /* ComplexAnimationSequences.vue styles */
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: /* ComplexAnimationSequences.vue 样式 */
- en: .fade-slide-enter-active {
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: .fade-slide-enter-active {
- en: 'transition: opacity 1s, transform 1s;'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 'transition: opacity 1s, transform 1s;'
- en: '}'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .fade-slide-enter {
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: .fade-slide-enter {
- en: 'opacity: 0;'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 'opacity: 0;'
- en: 'transform: translateY(-50%);'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 'transform: translateY(-50%);'
- en: '}'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .animated-box {
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: .animated-box {
- en: 'width: 100px;'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 'width: 100px;'
- en: 'height: 100px;'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 'height: 100px;'
- en: 'background-color: #e74c3c;'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 'background-color: #e74c3c;'
- en: '}'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: In the ComplexAnimationSequences component, a combination of fade-in and slide-down
    animations is seamlessly orchestrated. The before-enter, enter, and after-enter
    hooks work in harmony to set initial styles, apply animations, and reset styles
    post-animation, resulting in a visually pleasing and fluid user experience.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ComplexAnimationSequences 组件中，淡入和滑动下落动画的结合得到了无缝编排。before-enter、enter 和 after-enter
    钩子协调工作，设置初始样式，应用动画并在动画后重置样式，从而提供了视觉上愉悦且流畅的用户体验。
- en: 'Mastering Multi-Step Animation Sequences: A Strategic Approach'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握多步骤动画序列：一种战略性的方法
- en: Creating a fluid and harmonious animation sequence often involves breaking it
    down into multiple steps. Vue.js facilitates this process by offering hooks that
    can be strategically utilized at various stages of an animation sequence. Developers
    can leverage the before-enter, enter, and after-enter hooks to define each step,
    ensuring precise control over each element of the animation.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 创建流畅和和谐的动画序列通常需要将其分解为多个步骤。Vue.js 通过提供钩子函数来帮助实现这一过程，开发者可以在动画序列的不同阶段战略性地利用这些钩子。开发者可以利用
    before-enter、enter 和 after-enter 钩子来定义每个步骤，确保对动画的每个元素都能精确控制。
- en: <!-- MultiStepAnimation.vue -->
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- MultiStepAnimation.vue -->
- en: <template>
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <transition
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: <transition
- en: name="multi-step"
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: name="multi-step"
- en: '@before-enter="beforeEnter"'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '@before-enter="beforeEnter"'
- en: '@enter="enter"'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '@enter="enter"'
- en: '@after-enter="afterEnter"'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '@after-enter="afterEnter"'
- en: '>'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <div v-if="isVisible" class="animated-element"></div>
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: <div v-if="isVisible" class="animated-element"></div>
- en: </transition>
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: </transition>
- en: <button @click="toggleVisibility">Toggle Visibility</button>
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="toggleVisibility">切换可见性</button>
- en: </div>
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'isVisible: false,'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 'isVisible: false,'
- en: '};'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: toggleVisibility() {
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: toggleVisibility() {
- en: this.isVisible = !this.isVisible;
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: this.isVisible = !this.isVisible;
- en: '},'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: beforeEnter(el) {
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: beforeEnter(el) {
- en: // Initial styles before entering
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: // 进入前的初始样式
- en: el.style.width = '0';
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.width = '0';
- en: '},'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: enter(el, done) {
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: enter(el, done) {
- en: // Applying multi-step animation
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: // 应用多步动画
- en: el.offsetWidth; // Trigger reflow for initial state
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: el.offsetWidth; // 触发回流，获取初始状态
- en: el.style.transition = 'width 1s, background-color 1s';
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.transition = 'width 1s, background-color 1s';
- en: el.style.width = '100px';
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.width = '100px';
- en: el.style.backgroundColor = '#3498db';
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.backgroundColor = '#3498db';
- en: done(); // Callback to indicate completion
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: done(); // 回调，表示完成
- en: '},'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: afterEnter(el) {
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: afterEnter(el) {
- en: // Resetting styles after entering
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: // 进入后的样式重置
- en: el.style.transition = '';
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.transition = '';
- en: el.style.width = '';
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.width = '';
- en: el.style.backgroundColor = '';
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.backgroundColor = '';
- en: '},'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: <style>
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: <style>
- en: /* MultiStepAnimation.vue styles */
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: /* MultiStepAnimation.vue 样式 */
- en: .multi-step-enter-active {
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: .multi-step-enter-active {
- en: 'transition: width 1s, background-color 1s;'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 'transition: width 1s, background-color 1s;'
- en: '}'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .multi-step-enter {
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: .multi-step-enter {
- en: 'width: 0;'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 'width: 0;'
- en: 'background-color: #27ae60;'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 'background-color: #27ae60;'
- en: '}'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .animated-element {
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: .animated-element {
- en: 'height: 100px;'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 'height: 100px;'
- en: '}'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: In the MultiStepAnimation component, a multi-step animation sequence is crafted
    using the before-enter, enter, and after-enter hooks. This showcases the strategic
    application of hooks to control each phase of the animation, resulting in a visually
    engaging and dynamic transition.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MultiStepAnimation 组件中，使用 before-enter、enter 和 after-enter 钩子创建了一个多步动画序列。这展示了钩子在控制动画每个阶段的战略性应用，最终实现了一个视觉上引人入胜且动态的过渡效果。
- en: 'Customizing Transition Durations: Tailoring Animations to Perfection'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义过渡持续时间：完美调整动画
- en: Vue.js enables developers to finely tailor animation durations, ensuring that
    each step of a complex animation sequence unfolds at the desired pace. By adjusting
    transition durations within the before-enter, enter, and after-enter hooks, developers
    can achieve a nuanced and polished animation sequence.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 使开发者能够精细调整动画持续时间，确保复杂动画序列的每个步骤按照预期的节奏展开。通过在 before-enter、enter 和 after-enter
    钩子中调整过渡时间，开发者可以实现一个细致且完美的动画序列。
- en: <!-- CustomTransitionDurations.vue -->
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- CustomTransitionDurations.vue -->
- en: <template>
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <transition
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: <transition
- en: name="custom-duration"
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: name="custom-duration"
- en: '@before-enter="beforeEnter"'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '@before-enter="beforeEnter"'
- en: '@enter="enter"'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '@enter="enter"'
- en: '@after-enter="afterEnter"'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '@after-enter="afterEnter"'
- en: '>'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <div v-if="isVisible" class="animated-element"></div>
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: <div v-if="isVisible" class="animated-element"></div>
- en: </transition>
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: </transition>
- en: <button @click="toggleVisibility">Toggle Visibility</button>
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="toggleVisibility">切换可见性</button>
- en: </div>
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'isVisible: false,'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 'isVisible: false,'
- en: '};'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: toggleVisibility() {
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: toggleVisibility() {
- en: this.isVisible = !this.isVisible;
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: this.isVisible = !this.isVisible;
- en: '},'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: beforeEnter(el) {
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: beforeEnter(el) {
- en: // Initial styles before entering
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: // 进入前的初始样式
- en: el.style.width = '0';
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.width = '0';
- en: '},'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: enter(el, done) {
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: enter(el, done) {
- en: // Applying custom duration animation
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: // 应用自定义持续时间的动画
- en: el.offsetWidth; // Trigger reflow for initial state
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: el.offsetWidth; // 触发回流，获取初始状态
- en: el.style.transition = 'width 1s, background-color 0.5s';
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.transition = 'width 1s, background-color 0.5s';
- en: el.style.width = '100px';
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.width = '100px';
- en: el.style.backgroundColor = '#e74c3c';
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.backgroundColor = '#e74c3c';
- en: done(); // Callback to indicate completion
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: done(); // 回调函数，表示完成
- en: '},'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: afterEnter(el) {
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: afterEnter(el) {
- en: // Resetting styles after entering
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: // 进入后重置样式
- en: el.style.transition = '';
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.transition = '';
- en: el.style.width = '';
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.width = '';
- en: el.style.backgroundColor = '';
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: el.style.backgroundColor = '';
- en: '},'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: <style>
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: <style>
- en: /* CustomTransitionDurations.vue styles */
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: /* CustomTransitionDurations.vue 样式 */
- en: .custom-duration-enter-active {
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: .custom-duration-enter-active {
- en: 'transition: width 1s, background-color 0.5s;'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 'transition: width 1s, background-color 0.5s;'
- en: '}'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .custom-duration-enter {
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: .custom-duration-enter {
- en: 'width: 0;'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 'width: 0;'
- en: 'background-color: #3498db;'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 'background-color: #3498db;'
- en: '}'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .animated-element {
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: .animated-element {
- en: 'height: 100px;'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 'height: 100px;'
- en: '}'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: In the CustomTransitionDurations component, the enter hook is configured with
    a custom duration for the background-color transition, showcasing the flexibility
    to tailor each step's timing independently.
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CustomTransitionDurations 组件中，enter 钩子被配置了一个自定义时长的背景色过渡，展示了每个步骤时长独立定制的灵活性。
- en: A Symphony of Animation in Vue.js
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: A Symphony of Animation in Vue.js
- en: 'The "Complex Animation Sequences" section within the "Animation and Transitions"
    module of "Vue.js Essentials: For Responsive Web Development" serves as a guide
    to mastering the orchestration of intricate and captivating animation sequences.
    By strategically utilizing JavaScript hooks, breaking down animations into multiple
    steps, and customizing transition durations, developers can create a symphony
    of animations that elevate user interfaces to new heights. This section empowers
    developers with the knowledge and tools needed to craft visually stunning and
    dynamic Vue.js applications, providing a profound understanding of how to bring
    a touch of magic to user experiences through complex animation sequences.'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: '“Vue.js Essentials: For Responsive Web Development” 课程中的“动画和过渡”模块下的“复杂动画序列”部分，是学习如何编排复杂且引人入胜的动画序列的指南。通过战略性地利用
    JavaScript 钩子，将动画分解为多个步骤，并自定义过渡时长，开发者可以创造出一场动画交响曲，将用户界面提升到一个新的高度。此部分为开发者提供了必备的知识和工具，帮助他们打造视觉上惊艳且动态的
    Vue.js 应用程序，让开发者深刻理解如何通过复杂的动画序列为用户体验增添一丝魔力。'
