- en: Table of Contents
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目录
- en: '[ Acknowledgments](f_0004.xhtml#ch.acknowledgements)'
  id: totrans-1
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[致谢](f_0004.xhtml#ch.acknowledgements)'
- en: '[ Preface](f_0005.xhtml#chp.preface)'
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[前言](f_0005.xhtml#chp.preface)'
- en: '[Who Is This Book For?](f_0006.xhtml#d24e171)'
  id: totrans-3
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[这本书适合谁阅读？](f_0006.xhtml#d24e171)'
- en: '[What You Should Know](f_0007.xhtml#d24e178)'
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[你应该知道什么](f_0007.xhtml#d24e178)'
- en: '[What’s in This Book?](f_0008.xhtml#d24e194)'
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[本书内容是什么？](f_0008.xhtml#d24e194)'
- en: '[Online Resources](f_0009.xhtml#d24e209)'
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[在线资源](f_0009.xhtml#d24e209)'
- en: '[1\. Part I: Text Processing with Built-in JavaScript Methods](f_0010.xhtml#chp.part_1)'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[1\. 第一部分：使用内置 JavaScript 方法进行文本处理](f_0010.xhtml#chp.part_1)'
- en: '[Recipe 1\. Determining If a Value Is a String with the typeof Operator](f_0011.xhtml#rcp.typeChecking)'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 1\. 使用 typeof 操作符判断值是否为字符串](f_0011.xhtml#rcp.typeChecking)'
- en: '[Recipe 2\. Checking a String for Specific Words with includes()](f_0012.xhtml#rcp.includes)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 2\. 使用 includes() 检查字符串是否包含特定单词](f_0012.xhtml#rcp.includes)'
- en: '[Recipe 3\. Matching the Beginning or End of a String with startsWith() and
    endsWith()](f_0013.xhtml#rcp.start_end)'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 3\. 使用 startsWith() 和 endsWith() 匹配字符串的开头或结尾](f_0013.xhtml#rcp.start_end)'
- en: '[Recipe 4\. Extracting Lists from Text with slice()](f_0014.xhtml#rcp.slice)'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 4\. 使用 slice() 从文本中提取列表](f_0014.xhtml#rcp.slice)'
- en: '[Recipe 5\. Converting Color Names to Hexadecimal Values with the Canvas Element](f_0015.xhtml#rcp.color_to_hex)'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 5\. 使用 Canvas 元素将颜色名称转换为十六进制值](f_0015.xhtml#rcp.color_to_hex)'
- en: '[Recipe 6\. Adding Transparency to Hex Colors](f_0016.xhtml#rcp.adding_transparency_to_hex)'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 6\. 为十六进制颜色添加透明度](f_0016.xhtml#rcp.adding_transparency_to_hex)'
- en: '[Recipe 7\. Removing HTML Tags from Text with DOMParser()](f_0017.xhtml#rcp.DOMParser)'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 7\. 使用 DOMParser() 从文本中移除 HTML 标签](f_0017.xhtml#rcp.DOMParser)'
- en: '[Recipe 8\. Converting HTML Markup to HTML Entities with replaceAll()](f_0018.xhtml#rcp.entities)'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 8\. 使用 replaceAll() 将 HTML 标记转换为 HTML 实体](f_0018.xhtml#rcp.entities)'
- en: '[Recipe 9\. Intersecting HTML Tables with filter()](f_0019.xhtml#rcp.filter)'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 9\. 使用 filter() 交集 HTML 表格](f_0019.xhtml#rcp.filter)'
- en: '[Recipe 10\. Generating HTML Tables from an Array of Arrays](f_0020.xhtml#rcp.generating_html_table)'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 10\. 从数组的数组生成 HTML 表格](f_0020.xhtml#rcp.generating_html_table)'
- en: '[Recipe 11\. Generating HTML Tables from an Array of Objects](f_0021.xhtml#rcp.generating_html_table_v2)'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 11\. 从对象数组生成 HTML 表格](f_0021.xhtml#rcp.generating_html_table_v2)'
- en: '[Recipe 12\. Displaying Tabular Data in Console with console.table()](f_0022.xhtml#rcp.displaying_tabular_data)'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 12\. 使用 console.table() 在控制台显示表格数据](f_0022.xhtml#rcp.displaying_tabular_data)'
- en: '[Recipe 13\. Formatting Dates with Intl.DateTimeFormat()](f_0023.xhtml#rcp.DateFormatting)'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 13\. 使用 Intl.DateTimeFormat() 格式化日期](f_0023.xhtml#rcp.DateFormatting)'
- en: '[Recipe 14\. Formatting Currencies with Intl.NumberFormat()](f_0024.xhtml#rcp.NumberFormat)'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 14\. 使用 Intl.NumberFormat() 格式化货币](f_0024.xhtml#rcp.NumberFormat)'
- en: '[Recipe 15\. Adding Thousand Separators to Numbers with Intl.NumberFormat()](f_0025.xhtml#rcp.adding_thousand_separators)'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 15\. 使用 Intl.NumberFormat() 为数字添加千位分隔符](f_0025.xhtml#rcp.adding_thousand_separators)'
- en: '[Recipe 16\. Creating Language-Sensitive Lists with Intl.ListFormat()](f_0026.xhtml#rcp.ListFormat)'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 16\. 使用 Intl.ListFormat() 创建语言敏感型列表](f_0026.xhtml#rcp.ListFormat)'
- en: '[Recipe 17\. Determining Letter Case with charAt()](f_0027.xhtml#rcp.charAt)'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 17\. 使用 charAt() 判断字母大小写](f_0027.xhtml#rcp.charAt)'
- en: '[Recipe 18\. Counting Unicode Characters with Intl.Segmenter()](f_0028.xhtml#rcp.charSegmenter)'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 18\. 使用 Intl.Segmenter() 计数 Unicode 字符](f_0028.xhtml#rcp.charSegmenter)'
- en: '[Recipe 19\. Counting Words in a String with Intl.Segmenter()](f_0029.xhtml#rcp.wordSegmenter)'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 19\. 使用 Intl.Segmenter() 计算字符串中的单词数](f_0029.xhtml#rcp.wordSegmenter)'
- en: '[Recipe 20\. Counting the Number of a Specific Word with split()](f_0030.xhtml#rcp.counting_specific_word)'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 20\. 使用 split() 统计特定单词出现的次数](f_0030.xhtml#rcp.counting_specific_word)'
- en: '[Recipe 21\. Equalizing Incompatible Characters with normalize()](f_0031.xhtml#rcp.normalize)'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 21\. 使用 normalize() 函数标准化不兼容字符](f_0031.xhtml#rcp.normalize)'
- en: '[Recipe 22\. Copying Text to Clipboard with the Clipboard API](f_0032.xhtml#rcp.clipboard)'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 22\. 使用剪贴板 API 复制文本到剪贴板](f_0032.xhtml#rcp.clipboard)'
- en: '[2\. Part II: Text Processing with Regular Expressions](f_0033.xhtml#chp.part_2)'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[2\. 第二部分：使用正则表达式进行文本处理](f_0033.xhtml#chp.part_2)'
- en: '[Recipe 23\. Creating Your First Regular Expression](f_0034.xhtml#rcp.first_regex)'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 23\. 创建你的第一个正则表达式](f_0034.xhtml#rcp.first_regex)'
- en: '[Recipe 24\. Asserting the Start or End of a String with ^ and $](f_0035.xhtml#rcp.dollar)'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 24\. 使用 ^ 和 $ 断言字符串的开始或结束](f_0035.xhtml#rcp.dollar)'
- en: '[Recipe 25\. Looking For Whole Words Only with the Word Boundary (\b)](f_0036.xhtml#rcp.word_boundary)'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 25\. 仅查找完整单词的 Word Boundary（\b）](f_0036.xhtml#rcp.word_boundary)'
- en: '[Recipe 26\. Matching One of Several Alternatives with the Vertical Bar (|)](f_0037.xhtml#rcp.vertical_bar)'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 26\. 使用竖线符号（|）匹配多个选项中的一个](f_0037.xhtml#rcp.vertical_bar)'
- en: '[Recipe 27\. Matching One of Several Characters with the Character Class](f_0038.xhtml#rcp.character_class)'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 27\. 使用字符类匹配多个字符中的一个](f_0038.xhtml#rcp.character_class)'
- en: '[Recipe 28\. Matching a Range of Characters with Character Classes](f_0039.xhtml#rcp.character_class_range)'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 28\. 使用字符类匹配字符范围](f_0039.xhtml#rcp.character_class_range)'
- en: '[Recipe 29\. Repeating Part of a Regex with Quantifiers](f_0040.xhtml#rcp.quantifiers)'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 29\. 使用量词重复正则表达式的一部分](f_0040.xhtml#rcp.quantifiers)'
- en: '[Recipe 30\. Treating Multiple Characters as a Single Unit with the Capturing
    Group](f_0041.xhtml#rcp.capturing_group_p1)'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 30\. 使用捕获组将多个字符当作一个单元处理](f_0041.xhtml#rcp.capturing_group_p1)'
- en: '[Recipe 31\. Extracting a Matched Value with the Capturing Group](f_0042.xhtml#rcp.capturing_group_p2)'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 31\. 使用捕获组提取匹配的值](f_0042.xhtml#rcp.capturing_group_p2)'
- en: '[Recipe 32\. Excluding Groups from Result with the Non-capturing Group](f_0043.xhtml#rcp.non_capturing_group)'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 32\. 使用非捕获组排除结果中的组](f_0043.xhtml#rcp.non_capturing_group)'
- en: '[Recipe 33\. Reading Groups with Ease Using Named Capturing Groups](f_0044.xhtml#rcp.named_capturing_group)'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 33\. 使用命名捕获组轻松读取分组](f_0044.xhtml#rcp.named_capturing_group)'
- en: '[Recipe 34\. Using Special Replacement Patterns](f_0045.xhtml#rcp.replacement_patterns)'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 34\. 使用特殊替换模式](f_0045.xhtml#rcp.replacement_patterns)'
- en: '[Recipe 35\. Taking Away the Special Meaning of Replacement Patterns](f_0046.xhtml#rcp.neutralizing_replacement)'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 35\. 去除替换模式的特殊意义](f_0046.xhtml#rcp.neutralizing_replacement)'
- en: '[Recipe 36\. Using a Function as the Replacement Pattern](f_0047.xhtml#rcp.replacement_function)'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 36\. 使用函数作为替换模式](f_0047.xhtml#rcp.replacement_function)'
- en: '[Recipe 37\. Escaping Metacharacters with the Backslash](f_0048.xhtml#rcp.backslash)'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 37\. 使用反斜杠转义元字符](f_0048.xhtml#rcp.backslash)'
- en: '[Recipe 38\. Creating Lazy Quantifiers with the Question Mark](f_0049.xhtml#rcp.lazy)'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 38\. 使用问号创建懒惰量词](f_0049.xhtml#rcp.lazy)'
- en: '[Recipe 39\. Global and Case-Insensitive Matching with the g and i Flags](f_0050.xhtml#rcp.flag_ig)'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 39\. 使用 g 和 i 标志进行全局和不区分大小写匹配](f_0050.xhtml#rcp.flag_ig)'
- en: '[Recipe 40\. Generating Indices for Matches with the d Flag](f_0051.xhtml#rcp.flag_d)'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 40\. 使用 d 标志为匹配生成索引](f_0051.xhtml#rcp.flag_d)'
- en: '[Recipe 41\. Forcing ^ and $ to Match at the Start and End of a Line with the
    m Flag](f_0052.xhtml#rcp.flag_m)'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 41\. 使用 m 标志强制 ^ 和 $ 匹配行的开始和结束](f_0052.xhtml#rcp.flag_m)'
- en: '[Recipe 42\. Forcing . to Match Newline Characters with the s Flag](f_0053.xhtml#rcp.flag_s)'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 42\. 使用 s 标志强制 . 匹配换行符](f_0053.xhtml#rcp.flag_s)'
- en: '[Recipe 43\. Enabling Unicode Features with the u Flag](f_0054.xhtml#rcp.flag_u)'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 43\. 使用 u 标志启用 Unicode 特性](f_0054.xhtml#rcp.flag_u)'
- en: '[Recipe 44\. Searching from a Specific Index with the y Flag](f_0055.xhtml#rcp.flag_y)'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 44\. 使用 y 标志从特定索引开始搜索](f_0055.xhtml#rcp.flag_y)'
- en: '[Recipe 45\. Modifying an Existing Regex Literal](f_0056.xhtml#rcp.modifying_regex)'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 45\. 修改现有的正则表达式字面量](f_0056.xhtml#rcp.modifying_regex)'
- en: '[Recipe 46\. Referencing a Matched String with the Backreference](f_0057.xhtml#rcp.backreference)'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 46\. 使用反向引用匹配字符串](f_0057.xhtml#rcp.backreference)'
- en: '[Recipe 47\. Testing a Pattern with the Positive Lookahead](f_0058.xhtml#rcp.positive_lookahead)'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 47\. 使用正向前瞻测试模式](f_0058.xhtml#rcp.positive_lookahead)'
- en: '[Recipe 48\. Testing a Pattern with the Negative Lookahead](f_0059.xhtml#rcp.negative_lookahead)'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 48\. 使用负向前瞻测试模式](f_0059.xhtml#rcp.negative_lookahead)'
- en: '[Recipe 49\. Testing a Pattern with the Positive Lookbehind](f_0060.xhtml#rcp.positive_lookbehind)'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 49\. 使用正向后顾测试模式](f_0060.xhtml#rcp.positive_lookbehind)'
- en: '[Recipe 50\. Testing a Pattern with the Negative Lookbehind](f_0061.xhtml#rcp.negative_lookbehind)'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 50\. 使用负向后顾测试模式](f_0061.xhtml#rcp.negative_lookbehind)'
- en: '[Recipe 51\. Matching Non-ASCII Numerals with the Unicode Property Escape](f_0062.xhtml#rcp.unicode_property_escapes_p1)'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 51\. 使用 Unicode 属性转义匹配非 ASCII 数字](f_0062.xhtml#rcp.unicode_property_escapes_p1)'
- en: '[Recipe 52\. Matching Non-ASCII Words with the Unicode Property Escape](f_0063.xhtml#rcp.unicode_property_escapes_p2)'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 52\. 使用 Unicode 属性转义匹配非 ASCII 单词](f_0063.xhtml#rcp.unicode_property_escapes_p2)'
- en: '[Recipe 53\. Matching Unicode Word Boundaries with the Unicode Property Escape](f_0064.xhtml#rcp.unicode_property_escapes_p3)'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 53\. 使用 Unicode 属性转义匹配 Unicode 单词边界](f_0064.xhtml#rcp.unicode_property_escapes_p3)'
- en: '[3\. Part III: Mastering Text Processing in JavaScript](f_0065.xhtml#chp.part_3)'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[3\. 第三部分：精通 JavaScript 文本处理](f_0065.xhtml#chp.part_3)'
- en: '[Recipe 54\. Validating Email Addresses](f_0066.xhtml#rcp.email)'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 54\. 验证电子邮件地址](f_0066.xhtml#rcp.email)'
- en: '[Recipe 55\. Validating Password Strength](f_0067.xhtml#rcp.password)'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[食谱 55\. 验证密码强度](f_0067.xhtml#rcp.password)'
- en: '[Recipe 56\. Validating Social Security Numbers](f_0068.xhtml#rcp.ssn)'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Recipe 56\. 验证社会安全号码](f_0068.xhtml#rcp.ssn)'
- en: '[Recipe 57\. Validating ZIP Codes](f_0069.xhtml#rcp.zipcode)'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Recipe 57\. 验证邮政编码](f_0069.xhtml#rcp.zipcode)'
- en: '[Recipe 58\. Validating Canadian Postal Codes](f_0070.xhtml#rcp.ca_postal)'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Recipe 58\. 验证加拿大邮政编码](f_0070.xhtml#rcp.ca_postal)'
- en: '[Recipe 59\. Removing Duplicate Lines](f_0071.xhtml#rcp.removing_dup_lines_v1)'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Recipe 59\. 移除重复的行](f_0071.xhtml#rcp.removing_dup_lines_v1)'
- en: '[Recipe 60\. Removing Duplicate Lines Separated by Other Lines](f_0072.xhtml#rcp.removing_dup_lines_v2)'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Recipe 60\. 移除被其他行分隔的重复行](f_0072.xhtml#rcp.removing_dup_lines_v2)'
- en: '[Recipe 61\. Removing Duplicate Spaces](f_0073.xhtml#rcp.removing_dup_spaces)'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Recipe 61\. 移除重复的空格](f_0073.xhtml#rcp.removing_dup_spaces)'
- en: '[Recipe 62\. Removing Duplicate Whitespaces](f_0074.xhtml#rcp.removing_dup_whitespaces)'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Recipe 62\. 移除重复的空格](f_0074.xhtml#rcp.removing_dup_whitespaces)'
- en: '[Recipe 63\. Replacing Duplicate Whitespaces with the Same Type](f_0075.xhtml#rcp.replacing_whitespaces_same_type)'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Recipe 63\. 将重复的空格替换为相同类型的空格](f_0075.xhtml#rcp.replacing_whitespaces_same_type)'
- en: '[Recipe 64\. Extracting Text Enclosed in Double Quotes](f_0076.xhtml#rcp.extracting_text_in_double_quotes)'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Recipe 64\. 提取被双引号包围的文本](f_0076.xhtml#rcp.extracting_text_in_double_quotes)'
- en: '[Recipe 65\. Extracting Text Enclosed in Single Quotes](f_0077.xhtml#rcp.extracting_text_in_single_quotes)'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Recipe 65\. 提取被单引号包围的文本](f_0077.xhtml#rcp.extracting_text_in_single_quotes)'
- en: '[Recipe 66\. Escaping a String for Use in a Regex](f_0078.xhtml#rcp.escaping_metacharacters)'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Recipe 66\. 转义字符串以便在正则表达式中使用](f_0078.xhtml#rcp.escaping_metacharacters)'
- en: '[Recipe 67\. Striping Invalid Characters from Filenames](f_0079.xhtml#rcp.striping_invalid_characters)'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Recipe 67\. 从文件名中去除无效字符](f_0079.xhtml#rcp.striping_invalid_characters)'
- en: '[Recipe 68\. Matching Floating-Point Numbers](f_0080.xhtml#rcp.floating_point)'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Recipe 68\. 匹配浮动小数点数字](f_0080.xhtml#rcp.floating_point)'
- en: '[Recipe 69\. Matching Formatted Numbers with Thousand Separators](f_0081.xhtml#rcp.matching_thousand_separators)'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Recipe 69\. 匹配带有千位分隔符的格式化数字](f_0081.xhtml#rcp.matching_thousand_separators)'
- en: '[Recipe 70\. Matching Nearby Words](f_0082.xhtml#rcp.proximity_search)'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Recipe 70\. 匹配邻近的单词](f_0082.xhtml#rcp.proximity_search)'
- en: '[Recipe 71\. Highlighting Sentences Containing a Specific Word](f_0083.xhtml#rcp.highlighting_sentences)'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Recipe 71\. 高亮显示包含特定单词的句子](f_0083.xhtml#rcp.highlighting_sentences)'
- en: '[Recipe 72\. Highlighting Text in Real Time](f_0084.xhtml#rcp.highlighting_in_realtime)'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Recipe 72\. 实时高亮文本](f_0084.xhtml#rcp.highlighting_in_realtime)'
- en: '[Recipe 73\. Converting Plain Text into HTML-Ready Markup](f_0085.xhtml#rcp.converting_text_to_html)'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Recipe 73\. 将纯文本转换为 HTML 准备好的标记](f_0085.xhtml#rcp.converting_text_to_html)'
- en: '[Wrapping Up](f_0086.xhtml#d24e26621)'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[总结](f_0086.xhtml#d24e26621)'
- en: '[May I Request a Favor from You?](f_0087.xhtml#d24e26719)'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[我能请你帮个忙吗？](f_0087.xhtml#d24e26719)'
- en: '[A1\. What Is Unicode?](f_0088.xhtml#apx1)'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[A1\. 什么是 Unicode？](f_0088.xhtml#apx1)'
- en: '[A2\. Implementing Regex in JavaScript](f_0089.xhtml#apx2)'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[A2\. 在 JavaScript 中实现正则表达式](f_0089.xhtml#apx2)'
- en: '[test()](f_0090.xhtml#d24e27025)'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[test()](f_0090.xhtml#d24e27025)'
- en: '[exec()](f_0091.xhtml#d24e27179)'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[exec()](f_0091.xhtml#d24e27179)'
- en: '[match()](f_0092.xhtml#d24e27474)'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[match()](f_0092.xhtml#d24e27474)'
- en: '[matchAll()](f_0093.xhtml#d24e27652)'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[matchAll()](f_0093.xhtml#d24e27652)'
- en: '[search()](f_0094.xhtml#d24e27792)'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[search()](f_0094.xhtml#d24e27792)'
- en: '[replace()](f_0095.xhtml#d24e27856)'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[replace()](f_0095.xhtml#d24e27856)'
- en: '[replaceAll()](f_0096.xhtml#d24e27937)'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[replaceAll()](f_0096.xhtml#d24e27937)'
- en: '[split()](f_0097.xhtml#d24e28132)'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[split()](f_0097.xhtml#d24e28132)'
- en: '[Conclusion](f_0098.xhtml#d24e28266)'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[结论](f_0098.xhtml#d24e28266)'
- en: '[A3\. Testing Regex with Specialized Tools](f_0099.xhtml#apx3)'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[A3. 使用专用工具测试正则表达式](f_0099.xhtml#apx3)'
- en: '[RegexPal](f_0100.xhtml#d24e28403)'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[RegexPal](f_0100.xhtml#d24e28403)'
- en: '[RegExr](f_0101.xhtml#d24e28420)'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[RegExr](f_0101.xhtml#d24e28420)'
- en: '[Regex101](f_0102.xhtml#d24e28437)'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Regex101](f_0102.xhtml#d24e28437)'
- en: '[RegexBuddy](f_0103.xhtml#d24e28457)'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[RegexBuddy](f_0103.xhtml#d24e28457)'
- en: '[Regex Vis](f_0104.xhtml#d24e28481)'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[正则表达式可视化](f_0104.xhtml#d24e28481)'
- en: '[A4\. Regular Expression Cheat Sheet](f_0105.xhtml#apx4)'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[A4. 正则表达式备忘单](f_0105.xhtml#apx4)'
- en: '[Character Classes](f_0106.xhtml#d24e28527)'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[字符类](f_0106.xhtml#d24e28527)'
- en: '[Quantifiers](f_0107.xhtml#d24e28589)'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[量词](f_0107.xhtml#d24e28589)'
- en: '[Boundary Assertions](f_0108.xhtml#d24e28634)'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[边界断言](f_0108.xhtml#d24e28634)'
- en: '[Lookaround Assertions](f_0109.xhtml#d24e28664)'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[环视断言](f_0109.xhtml#d24e28664)'
- en: '[Groups and Backreferences](f_0110.xhtml#d24e28704)'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[分组与反向引用](f_0110.xhtml#d24e28704)'
- en: '[Flags](f_0111.xhtml#d24e28750)'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[标志](f_0111.xhtml#d24e28750)'
- en: '[Unicode Property Escapes](f_0112.xhtml#d24e28810)'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Unicode 属性转义](f_0112.xhtml#d24e28810)'
- en: Copyright © 2024, The Pragmatic Bookshelf.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 版权所有 © 2024，The Pragmatic Bookshelf.
