- en: What’s in This Book?
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 本书内容有哪些？
- en: 'As you may have guessed, this book talks quite a bit about data structures
    and algorithms. More specifically, the book is laid out as follows:'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 正如你可能猜到的，这本书谈到了很多关于数据结构和算法的内容。更具体地说，本书的结构如下：
- en: In Chapter 1, [`Why Data Structures Matter`](f_0013.xhtml#chp.understanding_data_structures)
    and Chapter 2, [`Why Algorithms Matter`](f_0024.xhtml#chp.binary_search), I explain
    what data structures and algorithms are and explore the concept of time complexity—which
    is used to determine how fast an algorithm is. In the process, I also talk a great
    deal about `arrays`, `sets`, and `binary search`.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在第1章，[`数据结构为何重要`](f_0013.xhtml#chp.understanding_data_structures)和第2章，[`算法为何重要`](f_0024.xhtml#chp.binary_search)，我解释了数据结构和算法是什么，并探讨了时间复杂度的概念——它用于确定一个算法的速度。在此过程中，我还谈到了很多关于`数组`、`集合`和`二分查找`的内容。
- en: In Chapter 3, [`O Yes! Big O Notation`](f_0031.xhtml#chp.big_o_notation), I
    unveil Big O notation and explain it in terms that are easy to understand. We
    use this notation throughout the book, so this chapter is pretty important.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在第3章，[`哦，是的！大O符号`](f_0031.xhtml#chp.big_o_notation)，我揭示了大O符号，并用易于理解的术语进行解释。我们在全书中都使用这个符号，因此这一章非常重要。
- en: In Chapter 4, [`Speeding Up Your Code with Big O`](f_0040.xhtml#chp.speeding_up),
    Chapter 5, [`Optimizing Code With and Without Big O`](f_0048.xhtml#chp.optimizing_big_o),
    and Chapter 6, [`Optimizing for Optimistic Scenarios`](f_0056.xhtml#chp.optimistic_scenarios),
    we delve further into Big O notation and use it to make our day-to-day code faster.
    Along the way, I cover various sorting algorithms, including `Bubble Sort`, `Selection
    Sort`, and `Insertion Sort`.
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在第4章，[`利用大O加速你的代码`](f_0040.xhtml#chp.speeding_up)、第5章，[`有无大O的代码优化`](f_0048.xhtml#chp.optimizing_big_o)和第6章，[`针对乐观场景的优化`](f_0056.xhtml#chp.optimistic_scenarios)中，我们进一步探讨大O符号，并用它来加快我们日常代码的速度。在这个过程中，我涵盖了各种排序算法，包括`冒泡排序`、`选择排序`和`插入排序`。
- en: In Chapter 7, [`Big O in Everyday Code`](f_0064.xhtml#chp.everyday_big_o), you
    apply all that you learned about Big O notation and analyze the efficiency of
    code from the real world.
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在第7章，[`日常代码中的大O`](f_0064.xhtml#chp.everyday_big_o)，你将应用你所学到的大O符号，并分析现实世界中代码的效率。
- en: In Chapter 8, [`Blazing Fast Lookup with Hash Tables`](f_0076.xhtml#chp.hashes)
    and Chapter 9, [`Crafting Elegant Code with Stacks and Queues`](f_0087.xhtml#chp.stacks_queues),
    I discuss a few additional data structures, including `hash tables`, `stacks`,
    and `queues`. I show how they impact the speed and elegance of our code and how
    we can use them to solve real-world problems.
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在第8章，[`使用哈希表进行快速查找`](f_0076.xhtml#chp.hashes)和第9章，[`使用栈和队列编写优雅代码`](f_0087.xhtml#chp.stacks_queues)，我讨论了一些额外的数据结构，包括`哈希表`、`栈`和`队列`。我展示了它们如何影响我们代码的速度和优雅性，以及我们如何使用它们解决现实问题。
- en: Chapter 10, [`Recursively Recurse with Recursion`](f_0096.xhtml#chp.recursion)
    introduces recursion, an anchor concept in the world of computer science. We break
    it down in this chapter and see how it can be a great tool for certain situations.
    Chapter 11, [`Learning to Write in Recursive`](f_0104.xhtml#chp.learning_to_write_in_recursive)
    teaches you how to write recursive code, which can be confusing if you’re not
    familiar with it.
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第10章，[`递归的递归`](f_0096.xhtml#chp.recursion)介绍了递归，这是计算机科学领域中的一个基本概念。在这一章中，我们对其进行深入解析，看看它在某些情况下如何成为一个很好的工具。第11章，[`学习写递归代码`](f_0104.xhtml#chp.learning_to_write_in_recursive)教你如何编写递归代码，如果你不熟悉它，这可能会让人困惑。
- en: Chapter 12, [`Dynamic Programming`](f_0112.xhtml#chp.dynamic_programming) shows
    you how to optimize recursive code and prevent it from spiraling out of control.
    And Chapter 13, [`Recursive Algorithms for Speed`](f_0121.xhtml#chp.recursive_speed)
    shows you how to use recursion as the foundation for turbo-fast algorithms like
    `Quicksort` and `Quickselect`, and then it takes your algorithm-development skills
    up a few notches.
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第12章，[`动态规划`](f_0112.xhtml#chp.dynamic_programming)向你展示如何优化递归代码，防止其失控。而第13章，[`速度的递归算法`](f_0121.xhtml#chp.recursive_speed)则向你展示如何将递归作为像`快速排序`和`快速选择`等超快速算法的基础，并将你的算法开发技能提升几个层次。
- en: The following chapters, Chapter 14, [`Node-Based Data Structures`](f_0130.xhtml#chp.linked_lists),
    Chapter 15, [`Speeding Up All the Things with Binary Search Trees`](f_0143.xhtml#chp.binary_trees),
    Chapter 16, [`Keeping Your Priorities Straight with Heaps`](f_0153.xhtml#chp.heaps),
    Chapter 17, [`It Doesn’t Hurt to Trie`](f_0166.xhtml#chp.tries), and Chapter 18,
    [`Connecting Everything with Graphs`](f_0177.xhtml#chp.graphs), explore node-based
    data structures including the linked list, the binary tree, the heap, the trie,
    and the graph and show how each is ideal for various applications.
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 接下来的章节，第14章，[`基于节点的数据结构`](f_0130.xhtml#chp.linked_lists)，第15章，[`用二叉搜索树加速一切`](f_0143.xhtml#chp.binary_trees)，第16章，[`用堆保持优先级清晰`](f_0153.xhtml#chp.heaps)，第17章，[`尝试不会有坏处`](f_0166.xhtml#chp.tries)，以及第18章，[`用图连接一切`](f_0177.xhtml#chp.graphs)，探讨了包括链表、二叉树、堆、字典树和图在内的基于节点的数据结构，并展示了每种结构在各种应用中的理想用途。
- en: Chapter 19, [`Dealing with Space Constraints`](f_0189.xhtml#chp.dealing_with_space_constraints)
    explores space complexity, which is important when programming for devices with
    relatively small amounts of disk space or when dealing with big data.
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第19章，[`处理空间限制`](f_0189.xhtml#chp.dealing_with_space_constraints)探讨了空间复杂性，这在为具有相对较小磁盘空间的设备编程或处理大数据时非常重要。
- en: The final chapter, Chapter 20, [`Techniques for Code Optimization`](f_0195.xhtml#chp.tips_for_code_optimization),
    walks you through various practical techniques for optimizing the efficiency of
    code and gives you new ideas for improving the code you write every day.
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 最后一章，第20章，[`代码优化技巧`](f_0195.xhtml#chp.tips_for_code_optimization)，将带您了解多种实用的代码优化技巧，并为您提供改善日常编写代码的新思路。
