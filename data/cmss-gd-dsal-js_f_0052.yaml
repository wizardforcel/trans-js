- en: Ignoring Constants
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 忽略常数
- en: 'But here’s the funny thing: in the world of `Big O` notation, `Selection Sort`
    and `Bubble Sort` are described in exactly the same way.'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 但有趣的是，在`Big O`符号的世界中，`选择排序`和`冒泡排序`的描述完全相同。
- en: 'Again, `Big O` notation answers the key question: if there are `N` data elements,
    how many steps will the algorithm take? Because `Selection Sort` takes roughly
    half of `N²` steps, it would seem reasonable that we’d describe the efficiency
    of `Selection Sort` as being `O(N² / 2)`。 That is, for `N` data elements, there
    are `N² / 2` steps. The following table bears this out:'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 再次强调，`Big O`符号回答了关键问题：如果有`N`个数据元素，算法将需要多少步？因为`选择排序`大约需要`N²`步的一半，合理的描述是将`选择排序`的效率表示为`O(N²
    / 2)`。也就是说，对于`N`个数据元素，有`N² / 2`步。以下表格证实了这一点：
- en: '| `N Elements` | `N² / 2` | Max # of Steps in `Selection Sort` |'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `N 元素` | `N² / 2` | `选择排序`中的最大步数 |'
- en: '| --- | --- | --- |'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 5 | `5² / 2 = 12.5` | 14 |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 5 | `5² / 2 = 12.5` | 14 |'
- en: '| 10 | `10² / 2 = 50` | 54 |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 10 | `10² / 2 = 50` | 54 |'
- en: '| 20 | `20² / 2 = 200` | 209 |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 20 | `20² / 2 = 200` | 209 |'
- en: '| 40 | `40² / 2 = 800` | 819 |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 40 | `40² / 2 = 800` | 819 |'
- en: '| 80 | `80² / 2 = 3200` | 3239 |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 80 | `80² / 2 = 3200` | 3239 |'
- en: 'In reality, however, `Selection Sort` is described in `Big O` as `O(N²)`, just
    like `Bubble Sort`。 This is because of a major rule of `Big O` that I’m now introducing
    for the first time:'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，在实际中，`选择排序`在`Big O`中描述为`O(N²)`，就像`冒泡排序`一样。这是因为我现在第一次介绍的`Big O`的一个主要规则：
- en: '`Big O` notation ignores constants.'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Big O`符号忽略常数。'
- en: This is simply a mathematical way of saying that `Big O` notation never includes
    regular numbers that aren’t an exponent. We simply drop these regular numbers
    from the expression.
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这仅仅是用数学方式表达`Big O`符号从不包括非指数的常规数字。我们简单地将这些常规数字从表达式中去掉。
- en: In our case, then, even though the algorithm takes `N² / 2` steps, we drop the
    “/ 2” because it’s a regular number and express the efficiency as `O(N²)`.
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因此，在我们的案例中，即使算法需要`N² / 2`步，我们也会丢掉“/ 2”，因为这是一个常规数字，并将效率表示为`O(N²)`。
- en: Dropping the constants is also the reason why an algorithm that’s `O(log[2]
    N)` is written simply as `O(log N)`。 Because of math, the log base of 2 is deemed
    a constant and so we drop it.
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 丢弃常数也是为什么一个算法被写作`O(log[2] N)`的原因，而简化为`O(log N)`。因为在数学上，2为底的对数被视为常数，所以我们将其丢弃。
- en: 'Here are a few more examples:'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里还有几个例子：
- en: For an algorithm that takes `N / 2` steps, we’d call it `O(N)`.
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 对于需要`N / 2`步的算法，我们称之为`O(N)`。
- en: An algorithm that takes `N² + 10` steps would be expressed as `O(N²)` since
    we drop the 10, which is a regular number.
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 需要`N² + 10`步的算法将被表示为`O(N²)`，因为我们丢掉了10这个常规数字。
- en: With an algorithm that takes `2N` steps (meaning `N * 2`)，we drop the regular
    number and call it `O(N)`。
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 对于需要`2N`步的算法（意味着`N * 2`），我们丢掉常规数字并称之为`O(N)`。
- en: Even `O(100N)`, which is 100 times slower than `O(N)`, is also referred to as
    `O(N)`.
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 即使是`O(100N)`，它比`O(N)`慢100倍，也被称为`O(N)`。
- en: Offhand, it would seem that this rule would render `Big O` notation entirely
    useless, as you can have two algorithms that are described in exactly the same
    way with `Big O`, and yet one can be 100 times faster than the other. And that’s
    exactly what we’re seeing here with `Selection Sort` and `Bubble Sort`。 Both are
    described in `Big O` as `O(N²)`，but `Selection Sort` is twice as fast as `Bubble
    Sort`。
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 随便想想，这条规则似乎会使`Big O`符号完全无用，因为你可能有两个算法在`Big O`中完全相同地描述，但其中一个可以比另一个快100倍。而这正是我们在`选择排序`和`冒泡排序`中看到的情况。两者在`Big
    O`中描述为`O(N²)`，但`选择排序`比`冒泡排序`快两倍。
- en: So, what gives?
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 那么，这是怎么回事呢？
