- en: An Algorithm of the Third Kind
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 第三类算法
- en: In the previous chapter, you learned that binary search on an ordered array
    is much faster than linear search on the same array. Let’s now look at how to
    describe binary search in terms of `Big O` notation.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在上一章中，你了解到在有序数组上进行二分搜索比在同一数组上进行线性搜索要快得多。现在让我们看看如何用`Big O`符号来描述二分搜索。
- en: We can’t describe binary search as being `O(1)`, because the number of steps
    increases as the data increases. It also doesn’t fit into the category of `O(N)`,
    since the number of steps is much fewer than the `N` data elements. As we have
    seen, binary search takes only seven steps for an array containing 100 elements.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们不能将二分搜索描述为`O(1)`，因为步骤数量随着数据的增加而增加。它也不属于`O(N)`类别，因为步骤数量远少于`N`个数据元素。正如我们所见，对于包含100个元素的数组，二分搜索只需七步。
- en: Binary search, then, seems to fall somewhere in between `O(1)` and `O(N)`. So
    what is it?
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因此，二分搜索似乎落在`O(1)`和`O(N)`之间。那么它是什么呢？
- en: In `Big O` terms, we describe binary search as having a time complexity of
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在`Big O`的术语中，我们将二分搜索描述为具有以下时间复杂度：
- en: '`O(log N)`.'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`O(log N)`。'
- en: I pronounce this as “Oh of log N.” This type of algorithm is also known as having
    a time complexity of `log time`.
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我把这个读作“哦，log N”。这种类型的算法也被称为具有`log time`的时间复杂度。
- en: Simply put, `O(log N)` is the `Big O` way of describing an algorithm that increases
    one step each time the data is doubled. As you learned in the previous chapter,
    binary search does just that. You’ll see momentarily why this is expressed as
    `O(log N)`, but let’s first summarize what you’ve learned so far.
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 简而言之，`O(log N)`是描述一种算法的`Big O`方式，该算法在数据每次翻倍时增加一步。正如你在上一章中所学到的，二分搜索正是如此。你将很快看到为什么这被表示为`O(log
    N)`，但首先让我们总结一下你到目前为止所学的内容。
- en: 'The three types of algorithms you’ve learned about so far can be sorted from
    most efficient to least efficient as follows:'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 到目前为止你学习的三种类型的算法可以按效率从高到低排序如下：
- en: '`O(1)`'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`O(1)`'
- en: '`O(log N)`'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`O(log N)`'
- en: '`O(N)`'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`O(N)`'
- en: 'Let’s look at a graph that compares the three types:'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们看一下比较这三种类型的图表：
- en: '`![images/big_o_notation/graph_three_types_fixed.png](images/big_o_notation/graph_three_types_fixed.png)`'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '`![images/big_o_notation/graph_three_types_fixed.png](images/big_o_notation/graph_three_types_fixed.png)`'
- en: Note how `O(log N)` curves ever so slightly upward, making it less efficient
    than `O(1)` but much more efficient than `O(N)`.
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 注意`O(log N)`略微向上弯曲，使其效率低于`O(1)`但远高于`O(N)`。
- en: To understand why this algorithm is called `O(log N)`, you need to first understand
    what logarithms are. If you’re already familiar with this mathematical concept,
    feel free to skip the next section.
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要理解为什么这个算法被称为`O(log N)`，你首先需要了解对数是什么。如果你已经熟悉这个数学概念，可以跳过下一部分。
