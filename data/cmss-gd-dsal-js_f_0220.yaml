- en: Chapter 15
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 第15章
- en: These are the solutions to the exercises found in the section [`Exercises`](f_0152.xhtml#binary.trees.exercises).
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这些是位于章节[`练习`](f_0152.xhtml#binary.trees.exercises)中的练习解决方案。
- en: 'The tree should look like this. Note that it’s not well balanced, as the root
    node only has a right subtree and no left one:'
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 这个树应该看起来像这样。注意它不是很好地平衡，因为根节点只有一个右子树而没有左子树：
- en: '![images/binary_trees/solution_1.png](images/binary_trees/solution_1.png)'
  id: totrans-3
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_IMG
  zh: '![images/binary_trees/solution_1.png](images/binary_trees/solution_1.png)'
- en: Search within a balanced binary search tree takes a maximum of about `log(N)`
    steps. So, if `N` is 1,000, search should take a maximum of about 10 steps.
  id: totrans-4
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 在平衡的二叉搜索树中，搜索最多需要大约`log(N)`步。因此，如果`N`为1,000，搜索最多应该需要大约10步。
- en: 'The greatest value within a binary search tree will always be the bottom rightmost
    node. We can find it by recursively following each node’s right child until we
    hit the bottom:'
  id: totrans-5
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 在二叉搜索树中，最大的值总是最右下角的节点。我们可以通过递归地跟踪每个节点的右子节点，直到到达底部：
- en: '| ​  | ​`function`​ `max(node)` { |'
  id: totrans-6
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`function`​ `max(node)` { |'
- en: '| ​  | ​`if`​ (`node.rightChild`) { |'
  id: totrans-7
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`if`​ (`node.rightChild`) { |'
- en: '| ​  | ​`return`​ `max(node.rightChild)`; |'
  id: totrans-8
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`return`​ `max(node.rightChild)`; |'
- en: '| ​  | } ​`else`​ { |'
  id: totrans-9
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } ​`else`​ { |'
- en: '| ​  | ​`return`​ `node.value`; |'
  id: totrans-10
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`return`​ `node.value`; |'
- en: '| ​  | } |'
  id: totrans-11
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-12
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 'Here’s the order for preorder traversal:'
  id: totrans-13
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 这是前序遍历的顺序：
- en: '![images/binary_trees/solution_4.png](images/binary_trees/solution_4.png)'
  id: totrans-14
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_IMG
  zh: '![images/binary_trees/solution_4.png](images/binary_trees/solution_4.png)'
- en: 'Here is the order for postorder traversal:'
  id: totrans-15
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 这是后序遍历的顺序：
- en: '![images/binary_trees/solution_5.png](images/binary_trees/solution_5.png)'
  id: totrans-16
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_IMG
  zh: '![images/binary_trees/solution_5.png](images/binary_trees/solution_5.png)'
