- en: '`Palindrome Checker`'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`回文检查器`'
- en: 回文是一个单词或短语，正着和反着读都是一样的。一些例子包括`racecar`、`kayak`和`deified`。
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 回文是一个单词或短语，正着和反着读都是一样的。一些例子包括`racecar`、`kayak`和`deified`。
- en: 这是一个确定字符串是否为回文的函数：
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是一个确定字符串是否为回文的函数：
- en: '| ​  | `function` isPalindrome(string) { |'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` isPalindrome(string) { |'
- en: '| ​  | `let` leftIndex = 0; |'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` leftIndex = 0; |'
- en: '| ​  | `let` rightIndex = string.length - 1; |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` rightIndex = string.length - 1; |'
- en: '| ​  |  |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `// Iterate until leftIndex reaches the middle of the array:` |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `// Iterate until leftIndex reaches the middle of the array:` |'
- en: '| ​  | `while` (leftIndex < Math.floor(string.length / 2)) { |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while` (leftIndex < Math.floor(string.length / 2)) { |'
- en: '| ​  | `// If the character on the left doesn''t equal the character` |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `// If the character on the left doesn''t equal the character` |'
- en: '| ​  | `// on the right, the string is not a palindrome:` |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `// on the right, the string is not a palindrome:` |'
- en: '| ​  | `if` (string[leftIndex] !== string[rightIndex]) { |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (string[leftIndex] !== string[rightIndex]) { |'
- en: '| ​  | `return` `false`; |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` `false`; |'
- en: '| ​  | } |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | leftIndex += 1; |'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | leftIndex += 1; |'
- en: '| ​  | rightIndex -= 1; |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | rightIndex -= 1; |'
- en: '| ​  | } |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `// If we got through the entire loop without finding any` |'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `// If we got through the entire loop without finding any` |'
- en: '| ​  | `// mismatches, the string must be a palindrome:` |'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `// mismatches, the string must be a palindrome:` |'
- en: '| ​  | `return` `true`; |'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` `true`; |'
- en: '| ​  | } |'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 让我们来确定这个算法的Big O。
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们来确定这个算法的**大 O**。
- en: 在这种情况下，N是传递给此函数的字符串的大小。
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这种情况下，N是传递给此函数的字符串的大小。
- en: 算法的核心在于while循环。现在，这个循环有点有趣，因为它只在到达字符串的中点之前运行。这意味着循环运行了N / 2步。
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 算法的核心在于while循环。现在，这个循环有点有趣，因为它只在到达字符串的中点之前运行。这意味着循环运行了N / 2步。
- en: 然而，Big O忽略常数。因此，我们去掉除以2的操作，我们的算法是O(N)。
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，**大 O**忽略常数。因此，我们去掉除以2的操作，我们的算法是O(N)。
