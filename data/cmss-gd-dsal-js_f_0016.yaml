- en: Measuring `Speed`
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 测量`速度`
- en: So how do we measure the speed of an operation?
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 那么，我们如何测量操作的速度呢？
- en: 'If you take away just one thing from this book, let it be this: when we measure
    how “fast” an operation is, we do not refer to how fast the operation takes in
    terms of pure time but instead in how many steps it takes.'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你从这本书中只记住一件事，那就让它是：当我们衡量一个操作“快”与否时，我们并不是在指其所需的纯时间，而是在指它所需的步骤数量。
- en: We’ve actually seen this earlier in the context of printing the even numbers
    from `2` to `100`。 The second version of that function was faster because it took
    half as many steps as the first version did.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们实际上在打印从`2`到`100`的偶数时已经看到过这一点。那个函数的第二个版本更快，因为它所需的步骤是第一个版本的一半。
- en: Why do we measure code’s speed in terms of steps?
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们为什么用步骤来衡量代码的速度？
- en: We do this because we can never say definitively that any operation takes, say,
    `five seconds`。 While a piece of code may take `five seconds` on a particular
    computer, that same piece of code may take longer on an older piece of hardware.
    For that matter, that same code might run much faster on the supercomputers of
    tomorrow. Measuring the speed of an operation in terms of time is undependable
    since the time will always change depending on the hardware it’s run on.
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们这样做是因为我们无法明确说任何操作需要，例如，`五秒`。虽然在特定计算机上，一段代码可能需要`五秒`，但在旧硬件上，同一段代码可能需要更长时间。更何况，同一段代码在未来的超级计算机上可能会运行得更快。以时间来衡量操作的速度是不可靠的，因为时间总会根据运行它的硬件而变化。
- en: However, we can measure the speed of an operation in terms of how many computational
    steps it takes. If `Operation A` takes `5 steps`， and `Operation B` takes `500
    steps`， we can assume that `Operation A` will always be faster than `Operation
    B` on all pieces of hardware. Measuring the number of steps is, therefore, the
    key to analyzing the speed of an operation.
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，我们可以通过计算一个操作所需的计算步骤来衡量它的速度。如果`操作A`需要`5步`，而`操作B`需要`500步`，我们可以假设`操作A`在所有硬件上都将比`操作B`更快。因此，测量步骤的数量是分析操作速度的关键。
- en: Measuring the speed of an operation is also known as measuring its time complexity.
    Throughout this book, I’ll use the terms `speed`， `time complexity`， `efficiency`，
    `performance`， and `runtime` interchangeably. They all refer to the number of
    steps a given operation takes.
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 测量操作速度也被称为测量其时间复杂度。在本书中，我将交替使用`速度`、`时间复杂度`、`效率`、`性能`和`运行时间`这些术语。它们都指的是给定操作所需的步骤数量。
- en: Let’s jump into the four operations of an array and determine how many steps
    each one takes.
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们深入了解数组的四个操作，并确定每个操作所需的步骤数。
