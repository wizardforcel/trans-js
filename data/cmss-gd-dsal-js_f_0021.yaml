- en: 'Sets: How a Single Rule Can Affect Efficiency'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 集合：单一规则如何影响效率
- en: 'Let’s explore this other data structure: the `set`. A `set` is a data structure
    that does not allow duplicate values to be contained within it.'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们探索另一种数据结构：`集合`。`集合`是一种不允许包含重复值的数据结构。
- en: '`Sets` are of different types, but for this discussion, I’ll talk about an
    `array`-based `set`. This `set` is just like an `array`—it’s a simple list of
    values. The only difference between this `set` and a classic `array` is that the
    `set` never allows duplicate values to be inserted into it.'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`集合`有不同的类型，但在这里我将讨论基于`数组`的`集合`。这个`集合`就像一个`数组`——它是一个简单的值列表。这个`集合`与经典的`数组`之间唯一的区别是，它不允许重复值的插入。'
- en: For example, if you had the `set` [`'a'`, `'b'`, `'c'`] and tried to add another
    `'b'`, the computer just wouldn’t allow it, since a `'b'` already exists within
    the `set`.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，如果你有一个`集合`[`'a'`, `'b'`, `'c'`]，并尝试添加另一个`'b'`，计算机将不允许这样做，因为`集合`中已经存在一个`'b'`。
- en: '`Sets` are useful when you need to ensure that you don’t have duplicate data.'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当你需要确保没有重复数据时，`集合`是非常有用的。
- en: 'For instance, if you’re creating an online phone book, you don’t want the same
    phone number appearing twice. In fact, I’m currently suffering from this with
    my local phone book: my home phone number is not just listed for me but is also
    listed erroneously as the phone number for some family named `Zirkind`. (Yes,
    this is a true story.) Let me tell you—it’s annoying to receive phone calls and
    voicemail from people looking for the `Zirkinds`. For that matter, I’m sure the
    `Zirkinds` are also wondering why no one ever calls them. And when I call the
    `Zirkinds` to let them know about the error, my wife picks up the phone because
    I’ve called my own number. (Okay, that last part never happened.) If only the
    program that produced the phone book had used a `set`…'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，如果你正在创建一个在线电话簿，你不希望同一个电话号码出现两次。实际上，我现在在本地电话簿上正面临这个问题：我的家庭电话号码不仅为我列出，而且错误地列为某个名为`Zirkind`的家庭的电话号码。（是的，这是真的。）让我告诉你——接到寻找`Zirkind`的人的电话和语音邮件真让人烦恼。更重要的是，我相信`Zirkind`家也在想为什么没人打电话给他们。当我拨打`Zirkind`家，告诉他们这个错误时，我的妻子接了电话，因为我拨打了自己的号码。（好吧，最后那部分从未发生过。）要是生成电话簿的程序使用了`集合`就好了…
- en: In any case, an `array`-based `set` is an `array` with one additional constraint
    of barring duplicates. While not allowing duplicates is a useful feature, this
    simple constraint also causes the `set` to have a different efficiency for one
    of the four primary operations.
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 无论如何，基于`数组`的`集合`是一个额外限制为不允许重复的`数组`。虽然不允许重复是一个有用的特性，但这一简单限制也使得`集合`在四个主要操作中的效率有所不同。
- en: Let’s analyze the reading, searching, insertion, and deletion operations in
    the context of an `array`-based `set`.
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们分析在基于`数组`的`集合`中进行读取、搜索、插入和删除操作。
- en: Reading from a `set` is exactly the same as reading from an `array`—it takes
    just one step for the computer to look up what’s contained within a particular
    index. As I described earlier, this is because the computer can instantly access
    any index within the `set` since it can easily calculate and access its memory
    address.
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 从`集合`读取与从`数组`读取完全相同——计算机只需一步就能查找特定索引中包含的内容。正如我之前所描述的，这因为计算机可以即时访问`集合`中的任何索引，因为它可以轻松计算和访问其内存地址。
- en: Searching a `set` also turns out to be no different than searching an `array`—it
    takes up to `N` steps to search for a value within a `set`. And deletion is also
    identical between a `set` and an `array`—it takes up to `N` steps to delete a
    value and move data to the left to close the gap.
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 搜索`集合`也与搜索`数组`没有区别——在`集合`中搜索一个值最多需要`N`步。而删除操作在`集合`和`数组`之间也是相同的——删除一个值并将数据向左移动以填补空缺最多需要`N`步。
- en: Insertion, however, is where `arrays` and `sets` diverge. Let’s first explore
    inserting a value at the end of a `set`, which was a best-case scenario for an
    `array`. We saw that with an `array`, the computer can insert a value at its end
    in a single step.
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，插入是`数组`和`集合`的分歧所在。让我们先探讨在`集合`末尾插入一个值的情况，这对于`数组`来说是最佳场景。我们看到，对于`数组`，计算机可以在一步内将一个值插入到末尾。
- en: 'With a set, however, the computer first needs to determine that this value
    doesn’t already exist in this set—because that’s what sets do: they prevent duplicate
    data from being inserted into them.'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，对于`集合`，计算机首先需要确定这个值是否已经存在于`集合`中——因为这就是`集合`的作用：防止重复数据被插入。
- en: Now, how will the computer ensure that the new data isn’t already contained
    in the set? Remember, a computer doesn’t know offhand what values are contained
    within the cells of an array or set. Because of this, the computer will first
    need to search the set to see whether the value we want to insert is already there.
    Only if the set does not yet contain our new value will the computer allow the
    insertion to take place.
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，计算机如何确保新数据不已经包含在集合中呢？请记住，计算机并不知道数组或集合的单元中包含哪些值。因此，计算机首先需要搜索集合，以查看我们想要插入的值是否已经存在。只有当集合尚未包含我们新的值时，计算机才会允许插入操作进行。
- en: So, every insertion into a set first requires a search.
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因此，向集合中的每次插入都首先需要进行搜索。
- en: Let’s see this in action with an example. Imagine our grocery list from earlier
    was stored as a set—which would be a decent choice since we don’t want to buy
    the same thing twice, after all. If our current set is[`"apples"`，`"bananas"`，`"cucumbers"`，`"dates"`，`"elderberries"`]，and
    we want to insert`"figs"`into the set, the computer must execute the following
    steps, beginning with a search for`"figs"`。
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来看看这如何运作。想象一下，我们之前的购物清单存储为一个集合——这将是一个不错的选择，因为我们毕竟不想重复购买同样的东西。如果我们当前的集合是[`"apples"`，`"bananas"`，`"cucumbers"`，`"dates"`，`"elderberries"`]，我们想将`"figs"`插入到集合中，计算机必须执行以下步骤，首先搜索`"figs"`。
- en: 'Step 1: Search index 0 for`"figs"`:'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第1步：在索引0搜索`"figs"`：
- en: '![images/understanding_arrays/array_19.png](images/understanding_arrays/array_19.png)'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/understanding_arrays/array_19.png](images/understanding_arrays/array_19.png)'
- en: It’s not there, but it might be somewhere else in the set. We need to make sure`"figs"`
    doesn’t exist anywhere before we can insert it.
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 它不在那里，但它可能在集合的其他地方。我们需要确保`"figs"`在任何地方都不存在，然后才能插入它。
- en: 'Step 2: Search index 1:'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第2步：搜索索引1：
- en: '![images/understanding_arrays/array_20.png](images/understanding_arrays/array_20.png)'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/understanding_arrays/array_20.png](images/understanding_arrays/array_20.png)'
- en: 'Step 3: Search index 2:'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第3步：搜索索引2：
- en: '![images/understanding_arrays/array_21.png](images/understanding_arrays/array_21.png)'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/understanding_arrays/array_21.png](images/understanding_arrays/array_21.png)'
- en: 'Step 4: Search index 3:'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第4步：搜索索引3：
- en: '![images/understanding_arrays/array_22.png](images/understanding_arrays/array_22.png)'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/understanding_arrays/array_22.png](images/understanding_arrays/array_22.png)'
- en: 'Step 5: Search index 4:'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第5步：搜索索引4：
- en: '![images/understanding_arrays/array_23.png](images/understanding_arrays/array_23.png)'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/understanding_arrays/array_23.png](images/understanding_arrays/array_23.png)'
- en: 'Now that we’ve searched the entire set, we know with certainty that it doesn’t
    already contain`"figs"`。At this point, it’s safe to complete the insertion. And
    that brings us to our final step:'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在我们已经搜索了整个集合，我们可以确定它不包含`"figs"`。此时，完成插入是安全的。这就引出了我们的最后一步：
- en: 'Step 6: Insert`"figs"` at the end of the set:'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第6步：在集合的末尾插入`"figs"`：
- en: '![images/understanding_arrays/array_24.png](images/understanding_arrays/array_24.png)'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/understanding_arrays/array_24.png](images/understanding_arrays/array_24.png)'
- en: Inserting a value at the end of a set is the best-case scenario, but we still
    had to perform six steps for a set originally containing five elements. That is,
    we had to search all five elements before performing the final insertion step.
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在集合的末尾插入一个值是最理想的情况，但我们仍然需要对原本包含五个元素的集合执行六个步骤。也就是说，我们必须在执行最后的插入步骤之前搜索所有五个元素。
- en: 'Said another way: insertion into the end of a set will take up to`N + 1`steps
    for`N`elements. This is because there are`N`steps of search to ensure that the
    value doesn’t already exist within the set, and then one step for the actual insertion.
    Contrast this with the regular array, in which such an insertion takes a grand
    total of one step.'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 换句话说：在一个集合的末尾插入将需要最多`N + 1`步，针对`N`个元素。这是因为需要`N`步进行搜索，以确保该值不已存在于集合中，然后再进行一步实际的插入。与此相比，在常规数组中，插入仅需一步。
- en: In the worst-case scenario, where we’re inserting a value at the beginning of
    a set, the computer needs to search`N`cells to ensure that the set doesn’t already
    contain that value, another`N`steps to shift all the data to the right, and another
    final step to insert the new value. That’s a total of`2N + 1`steps. Contrast this
    to insertion into the beginning of a regular array, which only takes`N + 1`steps.
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在最坏的情况下，如果我们要在集合的开头插入一个值，计算机需要搜索`N`个单元，以确保集合中不包含该值，再需要`N`个步骤将所有数据向右移动，最后再执行一步插入新值。总共是`2N
    + 1`步。与此相比，在常规数组的开头插入仅需`N + 1`步。
- en: Now, does this mean you should avoid `sets` just because insertion is slower
    for `sets` than regular `arrays`? Absolutely not. `Sets` are important when you
    need to ensure that there’s no duplicate data. (Hopefully, one day my `phone book`
    will be fixed.) But when you don’t have such a need, an `array` may be preferable,
    since insertions for `arrays` are more efficient than insertions for `sets`. You
    must analyze the needs of your own application and decide which data structure
    is a better fit.
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，这是否意味着你应该避免使用`sets`，仅仅因为`sets`的插入速度比普通的`arrays`慢？绝对不是。`Sets`在你需要确保没有重复数据时非常重要。（希望有一天我的`电话簿`能修好。）但当你没有这样的需求时，`array`可能更合适，因为`arrays`的插入效率高于`sets`的插入。你必须分析自己应用的需求，并决定哪种数据结构更适合。
