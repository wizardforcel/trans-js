- en: Arrays as Heaps
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 数组作为堆
- en: Because finding the last node is so critical to the heap’s operations, and because
    we want to make sure that finding the last node is efficient, heaps are usually
    implemented using arrays.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 由于找到最后一个节点对堆的操作至关重要，并且我们希望确保找到最后一个节点的效率，堆通常使用数组来实现。
- en: While until now we always assumed that every tree consists of independent nodes
    connected to each other with links (just like a linked list), you’ll now see that
    we can also use an array to implement a heap. The heap itself can be an abstract
    data type that really uses an array under the hood.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 直到现在，我们一直假设每棵树由相互连接的独立节点组成（就像链表一样），你现在会看到我们也可以使用数组来实现堆。堆本身可以是一个抽象数据类型，底层实际上使用数组。
- en: The [diagram](#fig.ch16.heap_as_array) shows how an array is used to store the
    values of a heap.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[图示](#fig.ch16.heap_as_array)展示了如何使用数组来存储堆的值。'
- en: The way this works is that we assign each node to an index within the array.
    In this diagram, the index of each node is found in a square below the node. If
    you look carefully, you’ll see that we assign the index of each node according
    to a specific pattern.
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 其工作原理是将每个节点分配给数组中的一个索引。在这个图示中，每个节点的索引在节点下方的方框中找到。如果你仔细观察，会发现我们根据特定的模式分配每个节点的索引。
- en: '![images/heaps/heap_as_array.png](images/heaps/heap_as_array.png)'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/heaps/heap_as_array.png](images/heaps/heap_as_array.png)'
- en: The root node is always stored at index `0`。We then move down a level and go
    from left to right, assigning each node to the next available index in the array.
    So on the second level, the left node (`88`) becomes index `1`，and the right node
    (`25`) becomes index `2`。When we reach the end of a level, we move down to the
    next level and repeat this pattern.
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 根节点始终存储在索引`0`。然后我们向下移动一层，从左到右，分配每个节点到数组中的下一个可用索引。因此，在第二层，左节点（`88`）成为索引`1`，右节点（`25`）成为索引`2`。当我们到达一层的末尾时，就下移到下一层并重复此模式。
- en: Now, the reason why we’re using an array to implement the heap is because it
    solves the problem of the last node. How?
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，我们使用数组来实现堆的原因是它解决了最后一个节点的问题。怎么解决的？
- en: When we implement the heap in this fashion, the last node will always be the
    final element of the array. Since we move top-down and left to right when assigning
    each value to the array, the last node will always be the final value in the array.
    In the previous example, you can see that the `3`，which is the last node，是最后一个值在数组中。
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以这种方式实现堆时，最后一个节点将始终是数组的最后一个元素。由于我们在分配每个值时是从上到下、从左到右的，因此最后一个节点始终是数组中的最后一个值。在之前的示例中，你可以看到`3`，它是最后一个节点，是数组中的最后一个值。
- en: 'Because the last node will always be found at the end of the array, it becomes
    trivial to find the last node: we just need to access the final element. Additionally,
    when we insert a new node into the heap, we do so at the end of the array to make
    it the last node.'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因为最后一个节点总是位于数组的末尾，所以找到最后一个节点变得很简单：我们只需访问最后一个元素。此外，当我们向堆中插入一个新节点时，我们会将其放在数组的末尾，以使其成为最后一个节点。
- en: 'Before we get into the other details of how an array-based heap works, we can
    already begin to code its basic structure. Here’s the beginning of our heap implementation
    in JavaScript:'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在我们深入了解基于数组的堆的其他细节之前，可以开始编码其基本结构。以下是我们在 JavaScript 中实现堆的开头部分：
- en: '| ​  | ​`class`​ `Heap` { |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`class`​ `Heap` { |'
- en: '| ​  | ​`constructor`​() { |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`constructor`​() { |'
- en: '| ​  | ​`this`.data = []; |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`this`.data = []; |'
- en: '| ​  | } |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `rootNode()` { |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `rootNode()` { |'
- en: '| ​  | ​`return` ​`this`.data[0]; |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`return` ​`this`.data[0]; |'
- en: '| ​  | } |'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `lastNode()` { |'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `lastNode()` { |'
- en: '| ​  | ​`return` ​`this`.data[​`this`.data.length - 1]; |'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`return` ​`this`.data[​`this`.data.length - 1]; |'
- en: '| ​  | } |'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: As you can see, we initialize the heap as an empty array. We have a `rootNode`
    method, which returns the first item of this array, and we also have a `lastNode`
    method that returns the last value of this array.
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如你所见，我们将堆初始化为空数组。我们有一个`rootNode`方法，它返回该数组的第一个元素，还有一个`lastNode`方法，它返回该数组的最后一个值。
- en: Traversing an Array-Based Heap
  id: totrans-25
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 遍历基于数组的堆
- en: As you’ve seen, the heap’s insertion and deletion algorithms require us to be
    able to trickle our way through the heap. Trickling, in turn, requires us to be
    able to traverse the heap by accessing a node’s parent or children. But how do
    we move from node to node when all the values are merely stored in an array? Traversing
    a heap would have been straightforward if we could have simply followed each node’s
    links. But now that the heap is an array under the hood, how do we know which
    nodes are connected to each other?
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 正如你所见，堆的插入和删除算法要求我们能够在堆中逐步移动。逐步移动又要求我们能够通过访问节点的父节点或子节点来遍历堆。但是，当所有值仅存储在数组中时，我们如何从一个节点移动到另一个节点呢？如果我们能简单地跟随每个节点的链接，遍历堆将是直接的。但现在堆的底层是一个数组，我们怎么知道哪些节点是相互连接的呢？
- en: 'This has an interesting solution. It turns out that when we assign the indexes
    of the heap’s nodes according to the pattern described earlier, the following
    traits of a heap are always true:'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这个问题有一个有趣的解决方案。事实证明，当我们根据之前描述的模式分配堆节点的索引时，堆的以下特性总是成立：
- en: To find the left child of any node, we can use the formula (`index` * 2) + 1.
  id: totrans-28
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 要找到任何节点的左子节点，我们可以使用公式 (`index` * 2) + 1。
- en: To find the right child of any node, we can use the formula (`index` * 2) +
    2.
  id: totrans-29
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 要找到任何节点的右子节点，我们可以使用公式 (`index` * 2) + 2。
- en: Take another look at the previous diagram and focus on the 16, which is at index
    4. To find its left child, we multiply its index (4) by 2 and add 1, which yields
    9. This means that index 9 is the left child of the node at index 4.
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 再看看之前的图，关注索引为 4 的 16。要找到它的左子节点，我们将它的索引（4）乘以 2 然后加 1，结果是 9。这意味着索引 9 是索引 4 的节点的左子节点。
- en: Similarly, to find the right child of index 4, we multiply the 4 by 2 and add
    2, which yields 10. This means that index 10 is the right child of index 4.
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 类似地，要找到索引 4 的右子节点，我们将 4 乘以 2 然后加 2，结果是 10。这意味着索引 10 是索引 4 的右子节点。
- en: Because these formulas always work, we’re able to treat our array as a tree.
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因为这些公式总是有效的，所以我们能够将我们的数组视为树。
- en: 'Let’s add these two methods to our `Heap` class:'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们将这两个方法添加到我们的 `Heap` 类中：
- en: '| ​  | `leftChildIndex`(`index`) { |'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `leftChildIndex`(`index`) { |'
- en: '| ​  | ​`return` (`index` * 2) + 1; |'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`return` (`index` * 2) + 1; |'
- en: '| ​  | } |'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `rightChildIndex`(`index`) { |'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `rightChildIndex`(`index`) { |'
- en: '| ​  | ​`return` (`index` * 2) + 2; |'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`return` (`index` * 2) + 2; |'
- en: '| ​  | } |'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: Each of these methods accepts an index within the array and returns the left
    or right child index, respectively.
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 每个方法都接受数组中的一个索引，并分别返回左或右子节点的索引。
- en: 'Here’s another important trait of array-based heaps:'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是基于数组的堆的另一个重要特性：
- en: To find a node’s parent, we can use the formula `Math.floor((index - 1) / 2)`.
  id: totrans-43
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 要找到节点的父节点，我们可以使用公式 `Math.floor((index - 1) / 2)`。
- en: Note that this formula uses floor division, meaning we throw away any numbers
    beyond the decimal point. For example, `Math.floor(3 / 2)` returns 1, rather than
    the more accurate 1.5.
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 请注意，这个公式使用了向下取整运算，这意味着我们会舍弃小数点后的任何数字。例如，`Math.floor(3 / 2)` 返回 1，而不是更精确的 1.5。
- en: Again, in our example heap, focus on index 4. If we take that index, subtract
    1, and then divide by 2, we get 1. And as you can see in the diagram, the parent
    of the node at index 4 is found at index 1.
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 再次，在我们的示例堆中，关注索引 4。如果我们取那个索引，减去 1，然后除以 2，我们得到 1。正如你在图中看到的，索引 4 的节点的父节点位于索引 1。
- en: 'So now we can add another method to our `Heap` class:'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 所以现在我们可以向 `Heap` 类中添加另一个方法：
- en: '| ​  | `parentIndex`(`index`) { |'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `parentIndex`(`index`) { |'
- en: '| ​  | ​`return` `Math.floor((index - 1) / 2);` |'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`return` `Math.floor((index - 1) / 2);` |'
- en: '| ​  | } |'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: This method accepts an index and calculates the index of its parent node.
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这个方法接受一个索引并计算其父节点的索引。
- en: 'Code Implementation: `Heap` Insertion'
  id: totrans-51
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 代码实现：`Heap` 插入
- en: 'Now that we have the essential elements of our `Heap` in place, let’s implement
    the insertion algorithm:'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在我们已经建立了 `Heap` 的基本元素，接下来让我们实现插入算法：
- en: '| ​  | `insert`(`value`) { |'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `insert`(`value`) { |'
- en: '| ​  | ​`this`.data.push(value); |'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`this`.data.push(value); |'
- en: '| ​  | ​`let` newNodeIndex = `this`.data.length - 1; |'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`let` newNodeIndex = `this`.data.length - 1; |'
- en: '| ​  |  |'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | ​`while` (newNodeIndex > 0 |'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`while` (newNodeIndex > 0 |'
- en: '| ​  | && (`this`.data[`newNodeIndex`] > `this`.data[`this`.parentIndex(`newNodeIndex`)]))
    { |'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | && (`this`.data[`newNodeIndex`] > `this`.data[`this`.parentIndex(`newNodeIndex`)]))
    { |'
- en: '| ​  | ​`const` parentIndex = `this`.parentIndex(newNodeIndex); |'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`const` parentIndex = `this`.parentIndex(newNodeIndex); |'
- en: '| ​  | [`this`.data[parentIndex], `this`.data[newNodeIndex]] = |'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | [`this`.data[parentIndex], `this`.data[newNodeIndex]] = |'
- en: '| ​  | [`this`.data[newNodeIndex], `this`.data[parentIndex]]; |'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | [`this`.data[newNodeIndex], `this`.data[parentIndex]]; |'
- en: '| ​  |  |'
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | newNodeIndex = parentIndex; |'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | newNodeIndex = parentIndex; |'
- en: '| ​  | } |'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: As usual, let’s break this thing down.
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 和往常一样，我们来详细分析一下这个过程。
- en: 'Our `insert` method accepts the value we’re inserting into our heap. The first
    thing we do is make this new value the last node by adding it to the very end
    of the array:'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们的 `insert` 方法接受要插入到堆中的值。我们首先做的是将这个新值作为最后一个节点，添加到数组的末尾：
- en: '| ​  | `this`.data.push(value); |'
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `this`.data.push(value); |'
- en: 'Next, we keep track of the index of the new node, as we’ll need it later. Right
    now, the index is the last index in the array:'
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 接下来，我们跟踪新节点的索引，因为稍后我们将需要它。目前，索引是数组中的最后一个索引：
- en: '| ​  | `let` newNodeIndex = `this`.data.length - 1; |'
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` newNodeIndex = `this`.data.length - 1; |'
- en: 'Next, we trickle up the new node to its proper place using a `while` loop:'
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 接下来，我们使用 `while` 循环将新节点逐步移动到其正确的位置：
- en: '| ​  | `while` (newNodeIndex > 0 |'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while` (newNodeIndex > 0 |'
- en: '| ​  | && (`this`.data[newNodeIndex] > `this`.data[`this`.parentIndex(newNodeIndex)])
    { |'
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | && (`this`.data[newNodeIndex] > `this`.data[`this`.parentIndex(newNodeIndex)])
    { |'
- en: This loop runs as long as two conditions are met. The main condition is that
    the new node is greater than its parent node. We also make a condition that the
    new node must have an index greater than 0, as funny things can happen if we try
    to compare the root node with its nonexistent parent.
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这个循环在满足两个条件的情况下运行。主要条件是新节点大于其父节点。我们还设置了一个条件，即新节点的索引必须大于0，因为如果我们尝试将根节点与其不存在的父节点进行比较，可能会出现奇怪的情况。
- en: 'Each time this loop runs, we swap the new node with its parent node since the
    new node is currently greater than the parent:'
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 每次这个循环运行时，我们都会将新节点与其父节点交换，因为新节点当前大于父节点：
- en: '| ​  | `const` parentIndex = `this`.parentIndex(newNodeIndex); |'
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` parentIndex = `this`.parentIndex(newNodeIndex); |'
- en: '| ​  | [`this`.data[parentIndex], `this`.data[newNodeIndex]] = |'
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | [`this`.data[parentIndex], `this`.data[newNodeIndex]] = |'
- en: '| ​  | [`this`.data[newNodeIndex], `this`.data[parentIndex]]; |'
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | [`this`.data[newNodeIndex], `this`.data[parentIndex]]; |'
- en: 'We also then update the index of the new node appropriately:'
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们还会相应地更新新节点的索引：
- en: '| ​  | newNodeIndex = parentIndex; |'
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | newNodeIndex = parentIndex; |'
- en: Since this loop only runs while the new node is greater than its parent, the
    loop ends once the new node is in its proper place.
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 由于这个循环仅在新节点大于其父节点时运行，因此一旦新节点处于正确的位置，循环就结束了。
- en: 'Code Implementation: Heap Deletion'
  id: totrans-82
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 代码实现：堆删除
- en: We’ll next look at an implementation of deleting an item from a heap. We named
    the method `pop` since the term `pop` implies a focus on returning the deleted
    value to be used by other code, such as in a priority queue (as we’ll see soon).
    We’re not merely trying to eliminate the root value; we also want to pass that
    value along to other code to be processed.
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们接下来将看看从堆中删除项目的实现。我们将这个方法命名为 `pop`，因为术语 `pop` 强调将被删除的值返回，以供其他代码使用，例如在优先级队列中（如我们稍后将看到的）。我们不仅仅是试图消除根值；我们还希望将该值传递给其他代码进行处理。
- en: The main method is the `pop` method, but to make the code simpler, we’ve created
    two helper methods, `hasGreaterChild` and `findLargerChildIndex`.
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 主要方法是 `pop` 方法，但为了简化代码，我们创建了两个辅助方法，`hasGreaterChild` 和 `findLargerChildIndex`。
- en: 'Here goes:'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 下面开始：
- en: '| ​  | `pop()` { |'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `pop()` { |'
- en: '| ​  | `if` (`this`.data.length === 1) { |'
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (`this`.data.length === 1) { |'
- en: '| ​  | `const` valueToDelete = `this`.rootNode(); |'
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` valueToDelete = `this`.rootNode(); |'
- en: '| ​  | `this`.data = []; |'
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `this`.data = []; |'
- en: '| ​  | `return` valueToDelete; |'
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` valueToDelete; |'
- en: '| ​  | } |'
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `const` valueToDelete = `this`.rootNode(); |'
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` valueToDelete = `this`.rootNode(); |'
- en: '| ​  | `this`.data[0] = `this`.data.pop(); |'
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `this`.data[0] = `this`.data.pop(); |'
- en: '| ​  | `let` trickleNodeIndex = 0; |'
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` trickleNodeIndex = 0; |'
- en: '| ​  |  |'
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `while` (`this`.hasGreaterChild(trickleNodeIndex)) { |'
  id: totrans-97
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while` (`this`.hasGreaterChild(trickleNodeIndex)) { |'
- en: '| ​  | `const` largerChildIndex = `this`.findLargerChildIndex(trickleNodeIndex);
    |'
  id: totrans-98
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` largerChildIndex = `this`.findLargerChildIndex(trickleNodeIndex);
    |'
- en: '| ​  |  |'
  id: totrans-99
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | [`this`.data[trickleNodeIndex], `this`.data[largerChildIndex]] = |'
  id: totrans-100
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | [`this`.data[trickleNodeIndex], `this`.data[largerChildIndex]] = |'
- en: '| ​  | [`this`.data[largerChildIndex], `this`.data[trickleNodeIndex]]; |'
  id: totrans-101
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | [`this`.data[largerChildIndex], `this`.data[trickleNodeIndex]]; |'
- en: '| ​  |  |'
  id: totrans-102
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | trickleNodeIndex = largerChildIndex; |'
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | trickleNodeIndex = largerChildIndex; |'
- en: '| ​  | } |'
  id: totrans-104
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-105
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | ​`return`​ `valueToDelete`; |'
  id: totrans-106
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`return`​ `valueToDelete`; |'
- en: '| ​  | } |'
  id: totrans-107
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-108
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `hasGreaterChild`(`index`) { |'
  id: totrans-109
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `hasGreaterChild`(`index`) { |'
- en: '| ​  | ​`return`​ ((​`this`​.leftChildIndex(`index`) < ​`this`​.data.length
    |'
  id: totrans-110
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`return`​ ((​`this`​.leftChildIndex(`index`) < ​`this`​.data.length
    |'
- en: '| ​  | && ​`this`​.data[​`this`​.leftChildIndex(`index`)] > ​`this`​.data[`index`]
    |'
  id: totrans-111
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | && ​`this`​.data[​`this`​.leftChildIndex(`index`)] > ​`this`​.data[`index`]
    |'
- en: '| ​  | &#124;&#124; (​`this`​.rightChildIndex(`index`) < ​`this`​.data.length
    |'
  id: totrans-112
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | &#124;&#124; (​`this`​.rightChildIndex(`index`) < ​`this`​.data.length
    |'
- en: '| ​  | && ​`this`​.data[​`this`​.rightChildIndex(`index`)] > ​`this`​.data[`index`]));
    |'
  id: totrans-113
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | && ​`this`​.data[​`this`​.rightChildIndex(`index`)] > ​`this`​.data[`index`]));
    |'
- en: '| ​  | } |'
  id: totrans-114
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-115
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `findLargerChildIndex`(`index`) { |'
  id: totrans-116
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `findLargerChildIndex`(`index`) { |'
- en: '| ​  | ​`if`​ (!​`this`​.data[​`this`​.rightChildIndex(`index`)]) { |'
  id: totrans-117
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`if`​ (!​`this`​.data[​`this`​.rightChildIndex(`index`)]) { |'
- en: '| ​  | ​`return`​ ​`this`​.leftChildIndex(`index`); |'
  id: totrans-118
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`return`​ ​`this`​.leftChildIndex(`index`); |'
- en: '| ​  | } |'
  id: totrans-119
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-120
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | ​`if`​ (​`this`​.data[​`this`​.rightChildIndex(`index`)] > |'
  id: totrans-121
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`if`​ (​`this`​.data[​`this`​.rightChildIndex(`index`)] > |'
- en: '| ​  | ​`this`​.data[​`this`​.leftChildIndex(`index`)] { |'
  id: totrans-122
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`this`​.data[​`this`​.leftChildIndex(`index`)] { |'
- en: '| ​  | ​`return`​ ​`this`​.rightChildIndex(`index`); |'
  id: totrans-123
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`return`​ ​`this`​.rightChildIndex(`index`); |'
- en: '| ​  | } ​`else`​ { |'
  id: totrans-124
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } ​`else`​ { |'
- en: '| ​  | ​`return`​ ​`this`​.leftChildIndex(`index`); |'
  id: totrans-125
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`return`​ ​`this`​.leftChildIndex(`index`); |'
- en: '| ​  | } |'
  id: totrans-126
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-127
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: Let’s first dive into the `pop` method.
  id: totrans-128
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们首先深入了解 `pop` 方法。
- en: The `pop` method doesn’t accept any arguments, since the only node we ever delete
    is the root node. Here’s how the method works.
  id: totrans-129
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`pop` 方法不接受任何参数，因为我们删除的唯一节点是根节点。以下是该方法的工作方式。'
- en: 'First, we handle the case where the heap only contains one element:'
  id: totrans-130
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 首先，我们处理堆中仅包含一个元素的情况：
- en: '| ​  | ​`if`​ (​`this`​.data.length === `1`) { |'
  id: totrans-131
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`if`​ (​`this`​.data.length === `1`) { |'
- en: '| ​  | ​`const`​ `valueToDelete` = ​`this`​.rootNode(); |'
  id: totrans-132
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`const`​ `valueToDelete` = ​`this`​.rootNode(); |'
- en: '| ​  | ​`this`​.data = []; |'
  id: totrans-133
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`this`​.data = []; |'
- en: '| ​  | ​`return`​ `valueToDelete`; |'
  id: totrans-134
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`return`​ `valueToDelete`; |'
- en: '| ​  | } |'
  id: totrans-135
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: Since there only is a root node, that becomes the value we’ll be deleting, which
    we store in a variable appropriately named `valueToDelete`. We wipe `this.data`
    clean by making it point to an empty array, and we return the `valueToDelete`.
  id: totrans-136
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 由于这里只有一个根节点，这成为了我们要删除的值，我们将其存储在一个恰当地命名为 `valueToDelete` 的变量中。我们通过将 `this.data`
    清空，使其指向一个空数组，并返回 `valueToDelete`。
- en: The rest of the `pop` method handles cases where the heap contains more than
    one element.
  id: totrans-137
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`pop` 方法的其余部分处理堆中包含多个元素的情况。'
- en: 'First, we save the value we’re going to delete so we can return it at the end
    of the method:'
  id: totrans-138
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 首先，我们保存要删除的值，以便在方法结束时返回：
- en: '| ​  | ​`const`​ `valueToDelete` = ​`this`​.rootNode(); |'
  id: totrans-139
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`const`​ `valueToDelete` = ​`this`​.rootNode(); |'
- en: 'Next, we remove the last value from the array and make it the first value:'
  id: totrans-140
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 接下来，我们从数组中移除最后一个值，并将其设为第一个值：
- en: '| ​  | ​`this`​.data[`0`] = ​`this`​.data.pop(); |'
  id: totrans-141
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`this`​.data[`0`] = ​`this`​.data.pop(); |'
- en: This simple line effectively deletes the original root node, as we’re overwriting
    the root node’s value with the last node’s value.
  id: totrans-142
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这一简单的行有效地删除了原始根节点，因为我们用最后一个节点的值覆盖了根节点的值。
- en: Next, we need to trickle the new root node down to its proper place. We called
    this the trickle node earlier, and our code reflects this.
  id: totrans-143
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 接下来，我们需要将新的根节点逐渐下移到它的适当位置。我们之前称之为“下移节点”，我们的代码反映了这一点。
- en: 'Before we start the actual trickling, we keep track of the trickle node’s index,
    as we’ll need it later. Currently, the trickle node is at index `0`:'
  id: totrans-144
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在我们开始实际的下移之前，我们记录下下移节点的索引，因为我们稍后会需要它。目前，下移节点位于索引 `0`：
- en: '| ​  | ​`let`​ `trickleNodeIndex` = `0`; |'
  id: totrans-145
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`let`​ `trickleNodeIndex` = `0`; |'
- en: 'We then use a while loop to execute the trickle-down algorithm. The loop runs
    as long as the trickle node has any children that are greater than it:'
  id: totrans-146
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然后，我们使用一个 while 循环来执行下移算法。只要下移节点有任何子节点大于它，循环就会继续运行：
- en: '| ​  | ​`while`​ (​`this`​.hasGreaterChild(`trickleNodeIndex`)) { |'
  id: totrans-147
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`while`​ (​`this`​.hasGreaterChild(`trickleNodeIndex`)) { |'
- en: This line uses the `hasGreaterChild` method, which returns whether a given node
    has any children who are greater than that node.
  id: totrans-148
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这一行使用了 `hasGreaterChild` 方法，该方法返回给定节点是否有任何子节点大于该节点。
- en: 'Within this loop, we first find the index of the greater of the trickle node’s
    children:'
  id: totrans-149
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个循环中，我们首先找到下移节点的子节点中较大的那个的索引：
- en: '| ​  | ​`const`​ `largerChildIndex` = ​`this`​.findLargerChildIndex(`trickleNodeIndex`);
    |'
  id: totrans-150
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`const`​ `largerChildIndex` = ​`this`​.findLargerChildIndex(`trickleNodeIndex`);
    |'
- en: This line uses the method `findLargerChildIndex`，which returns the index of
    the trickle node’s greater child. We store this index in a variable called `largerChildIndex`.
  id: totrans-151
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这一行使用了方法 `findLargerChildIndex`，该方法返回滴水节点的较大子节点的索引。我们将这个索引存储在一个名为 `largerChildIndex`
    的变量中。
- en: 'Next, we swap the trickle node with its greater child:'
  id: totrans-152
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 接下来，我们将滴水节点与其较大子节点交换：
- en: '|  | [`this`.data[trickleNodeIndex], `this`.data[largerChildIndex]] = |'
  id: totrans-153
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '|  | [`this`.data[trickleNodeIndex], `this`.data[largerChildIndex]] = |'
- en: '|  | [`this`.data[largerChildIndex], `this`.data[trickleNodeIndex]]; |'
  id: totrans-154
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '|  | [`this`.data[largerChildIndex], `this`.data[trickleNodeIndex]]; |'
- en: 'We update the index of the trickle node, which will be the index it was just
    swapped with:'
  id: totrans-155
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们更新滴水节点的索引，它将是刚刚交换过的索引：
- en: '|  | `trickleNodeIndex` = `largerChildIndex`; |'
  id: totrans-156
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '|  | `trickleNodeIndex` = `largerChildIndex`; |'
- en: 'Finally, we return the value of the node we deleted from the heap:'
  id: totrans-157
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 最后，我们返回从堆中删除的节点的值：
- en: '|  | `return` valueToDelete; |'
  id: totrans-158
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '|  | `return` valueToDelete; |'
- en: Alternate Heap Implementations
  id: totrans-159
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 备用堆实现
- en: Our heap implementation is now complete. It’s worth noting that while we did
    use an array to implement the heap under the hood, it is possible to implement
    a heap using linked nodes as well. (This alternative implementation uses a different
    trick to solve the problem of the last node, one that involves binary numbers.)
  id: totrans-160
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们的堆实现现在已经完成。值得注意的是，尽管我们在内部使用了数组来实现堆，但也可以使用链节点来实现堆。（这种替代实现使用了不同的技巧来解决最后一个节点的问题，涉及到二进制数。）
- en: However, the array implementation is the more common approach, so that’s what
    I presented here. It’s also interesting to see how an array can be used to implement
    a tree.
  id: totrans-161
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，数组实现是更常见的方法，因此我在这里展示了这一点。看到如何使用数组来实现树也是很有趣的。
- en: Indeed, it’s possible to use an array to implement any sort of binary tree,
    such as the binary search tree from the previous chapter. However, the heap is
    the first case of a binary tree where an array implementation provides an advantage,
    as it helps us find the last node easily.
  id: totrans-162
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 确实，可以使用数组来实现任何类型的二叉树，例如上一章中的二叉搜索树。然而，堆是第一个使用数组实现能提供优势的二叉树，因为它帮助我们轻松找到最后一个节点。
