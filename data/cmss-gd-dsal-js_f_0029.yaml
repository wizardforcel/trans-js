- en: Wrapping Up
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 总结
- en: Often there’s more than one way to achieve a particular computing goal, and
    the algorithm you choose can seriously affect the speed of your code.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 通常实现特定计算目标的方法不止一种，而你选择的算法会严重影响代码的速度。
- en: It’s also important to realize that there usually isn’t a single data structure
    or algorithm that is perfect for every situation. For example, just because ordered
    arrays allow for binary search doesn’t mean you should always use ordered arrays.
    In situations where you don’t anticipate the need to search the data much but,
    instead, to add data, standard arrays may be a better choice because their insertion
    is faster.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 同样重要的是要认识到，通常没有一种数据结构或算法能够完美适应每一种情况。例如，仅仅因为有序数组支持二分搜索，并不意味着你总是应该使用有序数组。在那些你不预期需要频繁搜索数据，而是需要添加数据的情况下，标准数组可能是更好的选择，因为它们的插入速度更快。
- en: As we’ve seen, the way to analyze competing algorithms is to count the number
    of steps each one takes. In the next chapter, we’re going to look at a formalized
    way of expressing the time complexity of competing data structures and algorithms.
    Having this common language will give us clearer information that will allow us
    to make better decisions about which algorithms we choose.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 正如我们所看到的，分析竞争算法的方法是计算每个算法所需的步骤数。在下一章中，我们将研究一种正式化的方法来表达竞争数据结构和算法的时间复杂度。拥有这种共同语言将为我们提供更清晰的信息，使我们能够更好地决定选择哪种算法。
