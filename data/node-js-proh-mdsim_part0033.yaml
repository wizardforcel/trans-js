- en: 'Chapter 13: Working with APIs in JavaScript'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章：在 JavaScript 中使用 APIs
- en: In today's interconnected world, Application Programming Interfaces (APIs) play
    a crucial role in enabling communication between different software systems. JavaScript
    provides powerful tools and techniques for working with APIs, allowing us to retrieve
    data, send requests, and interact with external services. In this chapter, we
    will explore the fundamentals of working with APIs in JavaScript.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今互联互通的世界中，应用程序编程接口（APIs）在不同软件系统之间的通信中发挥着至关重要的作用。JavaScript 提供了强大的工具和技术来与 APIs
    进行交互，使我们能够获取数据、发送请求并与外部服务进行互动。在本章中，我们将探讨在 JavaScript 中使用 APIs 的基础知识。
- en: 13.1 Introduction to APIs
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.1 APIs 简介
- en: An API is a set of rules and protocols that defines how different software components
    should interact with each other. APIs allow applications to access and use the
    functionality of other systems, such as retrieving data from a server, integrating
    with social media platforms, or interacting with cloud services.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: API 是一组规则和协议，定义了不同软件组件如何相互交互。API 允许应用程序访问并使用其他系统的功能，例如从服务器获取数据、与社交媒体平台集成或与云服务进行互动。
- en: APIs can expose various endpoints that represent specific functionalities. These
    endpoints accept requests and provide responses in a standardized format, such
    as JSON or XML. To work with APIs in JavaScript, we use the built-in `fetch` function
    or dedicated libraries such as Axios or jQuery.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: APIs 可以暴露各种端点，这些端点代表特定的功能。这些端点接受请求并以标准化格式（如 JSON 或 XML）提供响应。要在 JavaScript 中使用
    APIs，我们可以使用内置的 `fetch` 函数或像 Axios、jQuery 这样的专用库。
- en: 13.2 Making HTTP Requests with Fetch
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.2 使用 Fetch 发起 HTTP 请求
- en: The `fetch` function is a built-in JavaScript function that allows us to make
    HTTP requests to an API endpoint. It returns a Promise that resolves to the response
    from the server.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`fetch` 函数是一个内置的 JavaScript 函数，允许我们向 API 端点发起 HTTP 请求。它返回一个 Promise，解析后返回来自服务器的响应。'
- en: 'Here''s an example of using `fetch` to make a GET request to an API endpoint:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个使用 `fetch` 向 API 端点发起 GET 请求的示例：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, we use `fetch` to send a GET request to the URL `'https://api.example.com/data'`.
    We chain the `then` method to parse the response as JSON. Finally, we process
    the data or handle any potential errors using the `catch` method.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用 `fetch` 向 URL `'https://api.example.com/data'` 发送 GET 请求。我们链式调用
    `then` 方法，将响应解析为 JSON。最后，使用 `catch` 方法处理数据或捕获潜在的错误。
- en: 13.3 Sending Data with POST Requests
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.3 使用 POST 请求发送数据
- en: Apart from GET requests, APIs often support other HTTP methods like POST, PUT,
    or DELETE for sending data or modifying resources. To send data using a POST request,
    we need to provide additional options to the `fetch` function.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 GET 请求，APIs 通常还支持其他 HTTP 方法，如 POST、PUT 或 DELETE，用于发送数据或修改资源。要使用 POST 请求发送数据，我们需要向
    `fetch` 函数提供额外的选项。
- en: 'Here''s an example of sending data with a POST request:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个使用 POST 请求发送数据的示例：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this example, we provide the additional `method: ''POST''` option in the
    fetch request and specify the `''Content-Type''` header as `''application/json''`.
    We also pass the `userData` object as the request body by converting it to JSON
    using `JSON.stringify()`.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '在这个示例中，我们在fetch请求中提供了额外的`method: ''POST''`选项，并将`''Content-Type''`头指定为`''application/json''`。我们还通过使用`JSON.stringify()`将`userData`对象转换为JSON，并将其作为请求体传递。'
- en: 13.4 Authentication and Authorization
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.4 认证与授权
- en: Many APIs require authentication or authorization to ensure secure access to
    their resources. This typically involves providing an API key, token, or credentials
    in the request.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 许多API要求进行认证或授权，以确保安全访问其资源。这通常涉及在请求中提供API密钥、令牌或凭证。
- en: 'Here''s an example of including an API key in the request headers:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是将API密钥包含在请求头中的示例：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, we include the API key in the `Authorization` header using
    the Bearer token scheme.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用Bearer令牌方案将API密钥包含在`Authorization`头中。
- en: It's important to follow the documentation provided by the API provider to understand
    the specific authentication or authorization mechanism required.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 跟随API提供商提供的文档以理解所需的特定认证或授权机制非常重要。
- en: 13.5 Handling API Responses
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.5 处理API响应
- en: API responses can vary in structure and content, so it's important to handle
    them appropriately. Commonly, APIs respond with data in JSON format, but they
    may also return XML, plain text, or other formats.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: API的响应结构和内容可能不同，因此处理响应时要注意。通常，API会以JSON格式返回数据，但也可能返回XML、纯文本或其他格式。
- en: To handle different response types, we can use conditional statements or specific
    libraries designed for parsing and manipulating data, such as `JSON.parse()` or
    XML parsing libraries.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理不同的响应类型，我们可以使用条件语句或专门用于解析和处理数据的库，例如`JSON.parse()`或XML解析库。
- en: 'Here''s an example of handling a JSON response:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是处理JSON响应的示例：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example, we check if the response was successful using the `ok` property.
    If it is, we parse the JSON response using `response.json()`. If the response
    is not successful, we throw an error.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们通过`ok`属性检查响应是否成功。如果成功，我们使用`response.json()`解析JSON响应。如果响应不成功，则抛出错误。
- en: 13.6 API Rate Limiting and Pagination
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.6 API速率限制与分页
- en: APIs often enforce rate limits to prevent abuse and ensure fair usage. Rate
    limits restrict the number of requests a client can make within a specific time
    window. It's important to be aware of the rate limits imposed by the API and design
    our applications accordingly.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: API通常会施加速率限制，以防止滥用并确保公平使用。速率限制限制了客户端在特定时间窗口内可以发出的请求数量。了解API施加的速率限制并根据这些限制设计应用程序非常重要。
- en: Furthermore, when dealing with large datasets, APIs may implement pagination
    to retrieve data in chunks. Pagination involves requesting and processing multiple
    pages of data using parameters like `page` or `offset` in the API request.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在处理大型数据集时，API可能会实现分页，以分批检索数据。分页通过在API请求中使用如`page`或`offset`等参数来请求和处理多个数据页面。
- en: To work with rate limiting and pagination, we can track the number of requests
    made and implement logic to handle pagination parameters in our JavaScript code.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理速率限制和分页，我们可以跟踪发出的请求数量，并在 JavaScript 代码中实现处理分页参数的逻辑。
- en: 13.7 Testing and Documentation
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.7 测试与文档
- en: Testing our code that interacts with APIs is crucial to ensure its reliability
    and correctness. We can write unit tests or integration tests to verify that our
    API calls return the expected results and handle different scenarios gracefully.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 测试与 API 交互的代码对于确保其可靠性和正确性至关重要。我们可以编写单元测试或集成测试，以验证 API 调用是否返回预期结果，并优雅地处理不同的场景。
- en: Additionally, API providers usually offer documentation that describes the available
    endpoints, request/response formats, authentication methods, and any specific
    guidelines or limitations. It's important to refer to the API documentation to
    understand how to effectively work with the API and leverage its features.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，API 提供商通常会提供文档，描述可用的端点、请求/响应格式、身份验证方法以及任何特定的指南或限制。参考 API 文档是非常重要的，这有助于我们理解如何有效地使用
    API 并充分利用其功能。
- en: 13.8 Conclusion
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 13.8 结论
- en: Working with APIs in JavaScript allows us to integrate our applications with
    external services, retrieve data, and perform various operations. In this chapter,
    we covered the basics of making HTTP requests with `fetch`, sending data with
    POST requests, handling authentication and authorization, and dealing with API
    responses. We also discussed concepts such as rate limiting, pagination, testing,
    and the importance of API documentation.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中使用 API 使我们能够将应用程序与外部服务集成，获取数据并执行各种操作。在本章中，我们介绍了使用`fetch`发起 HTTP
    请求的基本操作、通过 POST 请求发送数据、处理身份验证和授权以及处理 API 响应的相关内容。我们还讨论了诸如速率限制、分页、测试以及 API 文档重要性等概念。
- en: By understanding and mastering these concepts, we can leverage the power of
    APIs to create dynamic, interconnected, and feature-rich JavaScript applications.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过理解和掌握这些概念，我们可以利用 API 的强大功能创建动态的、互联的和功能丰富的 JavaScript 应用程序。
