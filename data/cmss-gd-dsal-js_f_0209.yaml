- en: Chapter 4
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 第四章
- en: These are the solutions to the exercises found in the section [Exercises](f_0047.xhtml#speeding.up.your.code.with.big.o.exercises).
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这些是 [练习](f_0047.xhtml#speeding.up.your.code.with.big.o.exercises) 部分中的习题解答。
- en: 'Here is the completed table:'
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 这里是完成的表格：
- en: '| N Elements | O(N) | O(log N) | O(N²) |'
  id: totrans-3
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| N 元素 | O(N) | O(log N) | O(N²) |'
- en: '| --- | --- | --- | --- |'
  id: totrans-4
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| 100 | 100 | About 7 | 10,000 |'
  id: totrans-5
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| 100 | 100 | 约 7 | 10,000 |'
- en: '| 2,000 | 2,000 | About 11 | 4,000,000 |'
  id: totrans-6
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| 2,000 | 2,000 | 约 11 | 4,000,000 |'
- en: The array would have sixteen elements since 16² is 256\. (Another way of saying
    this is that the square root of 256 is 16.)
  id: totrans-7
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 该数组将有十六个元素，因为 16² 是 256。（换句话说，256 的平方根是 16。）
- en: The algorithm has a time complexity of O(N²). N, in this case, is the size of
    the array. We have an outer loop that iterates over the array N times, and for
    each of those times, an inner loop iterates over the same array N times. This
    results in N² steps.
  id: totrans-8
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 该算法的时间复杂度为 O(N²)。在这种情况下，N 是数组的大小。我们有一个外部循环，它遍历数组 N 次，对于每次循环，内部循环也遍历同一个数组 N 次。这导致了
    N² 步骤。
- en: 'The following version is O(N), as we only iterate through the array once:'
  id: totrans-9
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 以下版本的时间复杂度为 O(N)，因为我们只遍历数组一次：
- en: '| ​  | `function` greatestNumber(array) { |'
  id: totrans-10
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` greatestNumber(array) { |'
- en: '| ​  | `if` (array.length === 0) { `return` `null`; } |'
  id: totrans-11
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (array.length === 0) { `return` `null`; } |'
- en: '| ​  |  |'
  id: totrans-12
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `let` greatestNumberSoFar = array[0]; |'
  id: totrans-13
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` greatestNumberSoFar = array[0]; |'
- en: '| ​  |  |'
  id: totrans-14
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `for` (`const` i `of` array) { |'
  id: totrans-15
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`const` i `of` array) { |'
- en: '| ​  | `if` (i > greatestNumberSoFar) { |'
  id: totrans-16
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (i > greatestNumberSoFar) { |'
- en: '| ​  | greatestNumberSoFar = i; |'
  id: totrans-17
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | greatestNumberSoFar = i; |'
- en: '| ​  | } |'
  id: totrans-18
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-19
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-20
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return` greatestNumberSoFar; |'
  id: totrans-21
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` greatestNumberSoFar; |'
- en: '| ​  | } |'
  id: totrans-22
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
