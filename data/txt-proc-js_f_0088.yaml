- en: Appendix 1
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录1
- en: What Is Unicode?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是Unicode？
- en: Throughout this book, you’ll encounter the word “Unicode” in several recipes.
    So, what exactly is Unicode?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，你会在多个章节中遇到“Unicode”一词。那么，Unicode到底是什么呢？
- en: Unicode is a character encoding system that provides a consistent way of encoding,
    processing, and displaying written texts. Put simply, an encoding system assigns
    numbers to characters, which can then be translated into binary language used
    by computers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Unicode是一种字符编码系统，提供了一种一致的方式来编码、处理和显示书面文本。简而言之，编码系统为字符分配数字，然后这些数字可以转化为计算机使用的二进制语言。
- en: Unicode is implemented in all modern operation systems and programming languages.
    And it plays an increasingly important role in the JavaScript language. Prior
    to the invention of Unicode, there were hundreds of different character encoding
    systems, most of which were severely limited in size and scope and incompatible
    with one another.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Unicode在所有现代操作系统和编程语言中得到了实现，并且在JavaScript语言中发挥着越来越重要的作用。在Unicode发明之前，有数百种不同的字符编码系统，其中大多数在大小和范围上严重受限，并且彼此不兼容。
- en: The most widely used character encoding system besides Unicode is ASCII. American
    Standard Code for Information Interchange (ASCII) was published in 1963 as a standard
    for electronic communication. ASCII is based on a seven-bit byte, with each byte
    representing a character, capable of encoding 128 characters, including lowercase
    letters a-z, uppercase letters A-Z, digits 0-9, and punctuation symbols.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 除Unicode外，最广泛使用的字符编码系统是ASCII。美国信息交换标准代码（ASCII）于1963年发布，作为电子通信的标准。ASCII基于七位字节，每个字节表示一个字符，能够编码128个字符，包括小写字母a-z、大写字母A-Z、数字0-9以及标点符号。
- en: In addition, 33 non-printing control signals are set aside for Teletype machines,
    most of which are now obsolete. Because ASCII is an American standard designed
    for transmitting English characters, it cannot represent characters from other
    languages. As computers became more prevalent in other parts of the world, other
    encoding systems were invented to represent characters in other languages.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还为电传打字机保留了33个非打印控制信号，其中大多数现在已经过时。由于ASCII是为传输英文字符设计的美国标准，因此它无法表示其他语言的字符。随着计算机在世界其他地方的普及，其他编码系统应运而生，用于表示其他语言的字符。
- en: 'Over time, the need to support new languages led to the creation of hundreds
    of conflicting ways to encode characters. These encoding systems were not only
    inconsistent but also incomplete: two encodings could encode the same character
    using different codes, and they were only able to encode a small number of characters.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，对支持新语言的需求导致了数百种互相冲突的字符编码方式的产生。这些编码系统不仅不一致，而且也不完整：两种编码可能使用不同的代码编码同一个字符，而且它们只能编码少量字符。
- en: Unicode aims to solve this problem by unifying all existing character encoding
    systems and replacing them with a universal character encoding standard supporting
    every character in every writing system and language in the world. By providing
    a standard to encode multilingual text, Unicode creates the foundation for developing
    global software.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Unicode旨在通过统一所有现有的字符编码系统，并用一种通用的字符编码标准取而代之，支持世界上所有书写系统和语言中的每个字符，从而解决这个问题。通过提供多语言文本编码标准，Unicode为开发全球软件奠定了基础。
- en: Prior to the introduction of the Unicode standard, most programs supported a
    small set of encodings. They were designed primarily for larger markets due to
    the cost and complexity of developing specific versions of programs for smaller
    markets. Furthermore, converting text between different programs posed a risk
    of corruption. Unicode’s ability to easily exchange text data internationally
    enables programs to function anywhere in the world.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unicode标准推出之前，大多数程序只支持少量编码集。这些编码集主要为较大的市场设计，因为为较小市场开发特定版本程序的成本和复杂性较高。此外，不同程序之间的文本转换也容易导致数据损坏。Unicode使得国际间文本数据的交换变得更加便捷，确保程序可以在全球任何地方正常运行。
- en: To achieve this, Unicode uses more bits to encode each character, allowing more
    space for encoding. At this time, the most recent version of the Unicode standard,
    Unicode 15.0, contains a collection of 149,186 characters from many modern and
    historic scripts.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一目标，Unicode使用更多的位数来编码每个字符，从而为编码提供更多空间。目前，最新版本的Unicode标准，即Unicode 15.0，包含了来自许多现代和历史性书写系统的149,186个字符。
- en: In addition to including modern and classical forms of many languages from around
    the world, the standard contains important symbol sets, including punctuation
    marks, mathematics symbols, currency symbols, technical symbols, emojis, dingbats,
    and geometric shapes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 除了包含来自世界各地许多语言的现代和经典形式外，Unicode 标准还包含重要的符号集，包括标点符号、数学符号、货币符号、技术符号、表情符号、装饰性符号和几何图形。
- en: With a capacity of over one million characters, Unicode is more than enough
    for encoding text expressed in most writing systems. But, capacity limitation
    in fonts means no one font set supports all Unicode characters. So even though
    Unicode provides a way to display the characters, they still won’t display right
    if they are not part of the font being used.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Unicode的容量超过一百万个字符，足以编码大多数书写系统中的文本。但是，字体的容量限制意味着没有任何一套字体能支持所有Unicode字符。因此，即使Unicode提供了显示这些字符的方法，如果字符不在所使用的字体中，它们仍然无法正确显示。
- en: The reason behind this is that a font can only have 16 bits of glyph identifiers,
    which corresponds to 65,536 glyphs (note that a glyph is different from a character^([[37]](#FOOTNOTE-37))).
    As a result, it has been technically impossible to represent all +149,186 characters
    of Unicode with a single font.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的原因是字体只能拥有16位的字形标识符，这对应于65,536个字形（请注意，字形与字符不同^([[37]](#FOOTNOTE-37)))）。因此，技术上不可能通过单一字体表示所有+149,186个Unicode字符。
- en: 'Characters in Unicode are represented in three encoding forms:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Unicode 中的字符有三种编码形式：
- en: 8-bit form (UTF-8)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 8 位形式（UTF-8）
- en: 16-bit form (UTF-16)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16 位形式（UTF-16）
- en: 32-bit form (UTF-32)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32 位形式（UTF-32）
- en: UTF is the abbreviation for Unicode Transformation Format, and the number following
    it indicates the number of bits used to encode each character. The 8-bit form
    of Unicode is the most common character encoding on the web. It was designed not
    only to represent standard Unicode characters but also to be backward compatible
    with ASCII. The ASCII characters are the first 128 code points in Unicode (UTF-8).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: UTF 是 Unicode 转换格式（Unicode Transformation Format）的缩写，后面的数字表示编码每个字符所使用的位数。Unicode
    的 8 位形式是网络上最常见的字符编码。它的设计不仅用于表示标准的 Unicode 字符，还向后兼容 ASCII。ASCII 字符是 Unicode（UTF-8）中前
    128 个码点。
- en: Therefore, an ASCII text is also considered a Unicode text. In fact, Unicode
    is a superset of all characters in common use today because it includes characters
    from various international standards, as well as important industry character
    sets. UTF-16 represents characters using one or two 16-bit integers. Most of the
    characters in major languages can be represented using one 16-bit code unit.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，ASCII 文本也被视为 Unicode 文本。实际上，Unicode 是当今所有常用字符的超集，因为它包括了来自各种国际标准的字符，以及重要的行业字符集。UTF-16
    使用一个或两个 16 位整数表示字符。大多数主要语言中的字符都可以使用一个 16 位码单元表示。
- en: These characters, known as Basic Multilingual Plane (BMP), are encoded in the
    first 65,536 code points and require 2 bytes per character. Any character beyond
    BMP is called a supplementary character and cannot be represented in just 16 bits.
    Supplementary characters need a pair of 16-bit surrogate code units and are encoded
    in 4 bytes. Unicode allocates 2,048 code points as surrogate code points for the
    UTF-16 form.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些字符被称为基本多文种平面（BMP），它们编码在前 65,536 个码点中，每个字符需要 2 个字节。任何超出 BMP 的字符称为补充字符，无法仅用
    16 位表示。补充字符需要一对 16 位代理码单元，编码为 4 个字节。Unicode 为 UTF-16 形式分配了 2,048 个码点作为代理码点。
- en: For UTF-8, 1 byte is used to represent characters in ASCII, 3 bytes for the
    rest of the BMP, and 4 bytes for supplementary characters. UTF-32 is a fixed-width
    encoding using 4 bytes for all characters — unlike UTF-8 and UTF-16, which represent
    each code point by a variable number of code values.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 UTF-8，1 个字节用于表示 ASCII 字符，3 个字节用于表示 BMP 中的其余字符，4 个字节用于表示补充字符。UTF-32 是一种固定宽度的编码，所有字符使用
    4 个字节表示——与 UTF-8 和 UTF-16 不同，它们使用可变数量的编码值来表示每个码点。
- en: Unicode code points are usually represented in hexadecimal notation and prefixed
    with U+. The range between U+0000 and U+FFFF represents code points in BMP. For
    supplementary characters, five or six hex digits are used to represent code points,
    and the range is between U+10000 and U+10FFFF.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Unicode 码点通常以十六进制表示，并以 U+ 为前缀。U+0000 至 U+FFFF 范围表示 BMP 中的码点。对于补充字符，使用五位或六位十六进制数字表示码点，范围为
    U+10000 至 U+10FFFF。
- en: The characters you see on computers are actually binary data consisting of a
    series of ones and zeros. A character encoding interprets those binary data into
    real characters. In order to accomplish this, the encoding associates each character
    with a number which is called a code point. For example, the character “F” is
    assigned a code point of U+0046.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你在计算机上看到的字符实际上是由一系列的1和0组成的二进制数据。字符编码将这些二进制数据解释为真实的字符。为了实现这一点，编码将每个字符与一个数字关联，这个数字叫做代码点。例如，字符“F”被分配了U+0046的代码点。
- en: 'A character that’s assigned to a specific code point is called an encoded character.
    In JavaScript, you can use the code point of a character directly by preceding
    the code point with \u, as in this example:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 分配给特定代码点的字符称为编码字符。在JavaScript中，你可以通过在代码点前加上\u来直接使用字符的代码点，如下所示：
- en: '|   | console.log(*"***\***u0046"*); *// → F* |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '|   | console.log(*"***\***u0046"*); *// → F* |'
- en: 'A character encoding has two components: an encoder and a decoder. When you
    input text, the encoder translates the characters into a sequence of numeric values
    (bytes) that represents those characters. To display the characters, the decoder
    translates the sequence of bytes back into characters.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码有两个组件：编码器和解码器。当你输入文本时，编码器将字符转换为一串数字值（字节），这些字节表示这些字符。为了显示这些字符，解码器将字节序列重新转换为字符。
- en: 'Since ES2015, you can use most Unicode characters as an identifier. For example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 自ES2015以来，你可以将大多数Unicode字符用作标识符。例如：
- en: '[appendix/unicode/unicode_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/appendix/unicode/unicode_ex1.js)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[appendix/unicode/unicode_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/appendix/unicode/unicode_ex1.js)'
- en: '|   | *// An identifier in the Persian language* |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '|   | *// 一个波斯语标识符* |'
- en: '|   | **let** **سلام** = *"hi"*; |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '|   | **let** **سلام** = *"hi"*; |'
- en: '|   | console.log(**سلام**); *// → hi* |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '|   | console.log(**سلام**); *// → hi* |'
- en: '|   |  |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | *// An identifier in the Japanese language* |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '|   | *// 一个日语标识符* |'
- en: '|   | **let** **こんにちは** = *"Hello"*; |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '|   | **let** **こんにちは** = *"Hello"*; |'
- en: '|   | console.log(**こんにちは**); *// → Hello* |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '|   | console.log(**こんにちは**); *// → Hello* |'
- en: The goal of Unicode is to enable everybody in the world to use their language
    on computers. Therefore, it’s no wonder Unicode is the most used character set
    encoding in the world.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Unicode的目标是让全世界的人都能在计算机上使用他们的语言。因此，Unicode成为世界上使用最广泛的字符集编码也就不足为奇了。
- en: If you are interested in reading more about Unicode, check out unicode.org.^([[38]](#FOOTNOTE-38))
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解更多关于Unicode的信息，可以访问unicode.org。^([[38]](#FOOTNOTE-38))
- en: Footnotes
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 脚注
- en: '[[37]](#FNPTR-37)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[[37]](#FNPTR-37)'
- en: '[https://help.fontlab.com/fontlab/7/manual/About-Glyphs/](https://help.fontlab.com/fontlab/7/manual/About-Glyphs/)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://help.fontlab.com/fontlab/7/manual/About-Glyphs/](https://help.fontlab.com/fontlab/7/manual/About-Glyphs/)'
- en: '[[38]](#FNPTR-38)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[[38]](#FNPTR-38)'
- en: '[https://home.unicode.org/](https://home.unicode.org/)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://home.unicode.org/](https://home.unicode.org/)'
- en: Copyright © 2024, The Pragmatic Bookshelf.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 版权所有 © 2024，The Pragmatic Bookshelf。
