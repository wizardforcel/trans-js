- en: '`Binary Search vs. Linear Search`'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`二分查找 vs. 线性查找`'
- en: With ordered arrays of a small size, the algorithm of binary search doesn’t
    have much of an advantage over linear search. But let’s see what happens with
    larger arrays.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 对于小规模的有序数组，二分查找算法相较于线性查找并没有太大优势。但让我们看看在更大数组中的表现。
- en: 'With an array containing 100 values, here are the maximum number of steps each
    type of search would take:'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 对于包含100个值的数组，每种搜索类型的最大步骤数如下：
- en: '`Linear search: 100 steps`'
  id: totrans-3
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`线性查找：100步`'
- en: '`Binary search: 7 steps`'
  id: totrans-4
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`二分查找：7步`'
- en: With linear search, if the value we’re searching for is in the final cell or
    is greater than the value in the final cell, we have to inspect each and every
    element. For an array of size 100, this would take 100 steps.
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 使用线性查找，如果我们要查找的值在最后一个单元中或大于最后一个单元中的值，我们需要检查每一个元素。对于大小为100的数组，这将需要100步。
- en: When we use binary search, however, each guess we make eliminates half of the
    possible cells we’d have to search. In our very first guess, we get to eliminate
    a whopping fifty cells.
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，当我们使用二分查找时，每次猜测都会消除一半我们需要搜索的可能单元。在我们的第一次猜测中，我们可以消除多达五十个单元。
- en: Let’s look at this another way, and we’ll see a pattern emerge.
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们换个角度看这个问题，会发现一个模式。
- en: With an array of size 3, binary search would take a maximum of two steps.
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 对于大小为3的数组，二分查找最多需要两步。
- en: If we double the number of cells in the array (and add one more to keep the
    number odd for simplicity’s sake), there are seven cells. For such an array, the
    maximum number of steps to find something using binary search is three.
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果我们将数组中的单元数量加倍（并再加一个保持奇数以简化），那么有七个单元。对于这样的数组，使用二分查找查找某个元素的最大步骤数为三。
- en: If we double it again (and add one) so that the ordered array contains fifteen
    elements, the maximum number of steps for binary search is four.
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果我们再加倍（并加一），使得有序数组包含十五个元素，二分查找的最大步骤数为四。
- en: The pattern that emerges is that for each time we double the size of the ordered
    array, the number of steps needed for binary search increases by one. This makes
    sense, as each lookup eliminates half of the elements from the search.
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 出现的模式是，每次我们将有序数组的大小加倍，二分查找所需的步骤数增加一。这是合理的，因为每次查找都会消除一半的元素。
- en: 'This pattern is unusually efficient: each time we double the data, the binary
    search algorithm adds just one more step.'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这种模式异常高效：每次我们将数据加倍，二分查找算法只需增加一步。
- en: Contrast this with linear search. If you had 3 elements, you’d need up to 3
    steps. For 7 elements, you’d need a maximum of 7 steps. For 100 values, you’d
    need up to 100 steps. With linear search, then, there are as many steps as there
    are items. So for linear search, each time we double the size of the array, we
    double the number of steps of our search. For binary search, though, each time
    we double the size of the array, we only need to add one more step.
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 将此与线性查找进行对比。如果你有3个元素，最多需要3步。对于7个元素，最多需要7步。对于100个值，最多需要100步。因此，对于线性查找，步骤数与项目数量相同。因此，每次我们将数组的大小加倍，搜索的步骤数也加倍。而对于二分查找，每次将数组的大小加倍时，只需再加一步。
- en: Let’s see how this plays out for larger arrays. With an array of 10,000 elements,
    linear search can take up to 10,000 steps, while binary search takes up to a maximum
    of just 13 steps. For an array of size one million, linear search would take up
    to one million steps, while binary search would take up to just 20 steps.
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们看看这对更大数组的影响。对于一个包含10,000个元素的数组，线性搜索可能需要多达10,000步，而二分查找最多只需13步。对于大小为一百万的数组，线性搜索将需要多达一百万步，而二分查找最多只需20步。
- en: 'We can visualize the difference in performance between linear and binary search
    with this graph:'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们可以通过这个图表可视化线性查找和二分查找之间的性能差异：
- en: '![images/binary_search/search_graph.png](images/binary_search/search_graph.png)'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/binary_search/search_graph.png](images/binary_search/search_graph.png)'
- en: We’ll be analyzing a bunch of graphs that look like this, so let’s take a moment
    to digest what’s going on. The x-axis represents the number of elements inside
    the array. That is, as we move from left to right, we’re dealing with an increasing
    amount of data.
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们将分析一些看起来像这样的图表，因此让我们花点时间消化一下正在发生的事情。x轴表示数组中的元素数量。也就是说，当我们从左到右移动时，我们正在处理越来越多的数据。
- en: The y-axis represents how many steps the algorithm takes. As we move up the
    graph, we’re looking at a greater number of steps.
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: y轴表示算法所需的步骤数。随着我们在图中向上移动，步骤数会增加。
- en: If you look at the line representing `linear search`, you’ll see that as an
    array has more elements, `linear search` takes a proportionally increasing number
    of steps. Essentially, for each additional element in the array, `linear search`
    takes one additional step. This produces a straight diagonal line.
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你查看表示`线性搜索`的线条，你会看到，随着数组元素的增加，`线性搜索`所需的步骤数量也在按比例增加。本质上，数组中的每个额外元素，`线性搜索`就多花一步。这形成了一条直线斜率。
- en: 'With `binary search`, on the other hand, you’ll see that as the data increases,
    the algorithm’s steps only increase marginally. This makes perfect sense with
    what we know: you have to double the amount of data just to add one additional
    step to `binary search`.'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 另一方面，通过`二分搜索`，你会看到随着数据的增加，算法的步骤仅会略微增加。这与我们所知道的完全一致：你必须将数据量加倍才能在`二分搜索`中增加一步。
- en: 'Keep in mind that ordered arrays aren’t faster in every respect. As you’ve
    seen, insertion in ordered arrays is slower than in standard arrays. But here’s
    the trade-off: by using an ordered array, you have somewhat slower insertion but
    much faster search. Again, you must always analyze your application to see which
    is a better fit. Will your software be doing many insertions? Will searching be
    a significant feature of the app you’re building?'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 请记住，排序数组在某些方面并不是更快的。正如你所见，插入排序数组的速度比标准数组要慢。但这里有一个权衡：使用排序数组，你的插入速度会稍慢，但搜索速度会快得多。再次强调，你必须始终分析你的应用程序，以确定哪种更适合。你的软件会进行很多插入吗？搜索会是你正在构建的应用程序的重要特性吗？
- en: Pop Quiz
  id: totrans-22
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 测验
- en: I find the following pop quiz question really forces one to grasp the efficiency
    of `binary search`. Cover the answer and see if you get it right.
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我发现以下的测验问题真的迫使人理解`二分搜索`的效率。请遮住答案，看看你是否能答对。
- en: 'The question: We said that for an ordered array with 100 elements, `binary
    search` takes seven steps. How many steps would `binary search` take on an ordered
    array containing 200 elements?'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 问题是：我们说对于一个包含100个元素的排序数组，`二分搜索`需要七步。对于一个包含200个元素的排序数组，`二分搜索`需要多少步？
- en: 'The answer: eight steps.'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 答案是：八步。
- en: The intuitive answer I often hear is fourteen steps, but this is incorrect.
    The whole beauty of `binary search` is that each inspection eliminates half of
    the remaining elements. Therefore, each time we double the amount of data, we
    add only one step. After all, this doubling of data gets totally eliminated with
    the first inspection!
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我常听到的直观答案是十四步，但这是不正确的。`二分搜索`的美在于，每次检查都会消除剩余元素的一半。因此，每当我们将数据量加倍时，只需增加一步。毕竟，这种数据的加倍在第一次检查时就会完全消除！
- en: It’s worth noting that now that we’ve added `binary search` to our toolkit,
    insertion within an ordered array can become faster as well. Insertion requires
    a search before the actual insertion, but we can now upgrade that search from
    a `linear search` to a `binary search`. However, insertion within an ordered array
    still remains slower than within a regular array, as the regular array’s insertion
    doesn’t require a search at all.
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 值得注意的是，既然我们已经将`二分搜索`加入了我们的工具包，排序数组中的插入也可以变得更快。插入之前需要搜索，但我们现在可以将这种搜索从`线性搜索`升级为`二分搜索`。然而，排序数组的插入仍然比常规数组要慢，因为常规数组的插入根本不需要搜索。
