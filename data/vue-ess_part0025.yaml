- en: 'Module 20:'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 第20模块：
- en: '|'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Deployment Strategies for Vue.js Apps
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 应用的部署策略
- en: '|'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'In the dynamic landscape of web development, deploying Vue.js applications
    efficiently is paramount for delivering a seamless user experience. The module
    "Deployment Strategies for Vue.js Apps" assumes a central role in the book "Vue.js
    Essentials: For Responsive Web Development," guiding readers through the intricate
    process of deploying Vue.js applications. Within these pages, developers will
    gain comprehensive insights into deployment strategies, performance optimization,
    and best practices tailored for ensuring the successful and efficient deployment
    of Vue.js applications.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '在现代网页开发的动态环境中，高效部署 Vue.js 应用对于提供无缝的用户体验至关重要。《Vue.js 应用的部署策略》模块在《Vue.js Essentials:
    For Responsive Web Development》一书中占据了核心地位，带领读者深入了解 Vue.js 应用部署的复杂过程。在这些页面中，开发者将全面了解部署策略、性能优化及确保
    Vue.js 应用成功和高效部署的最佳实践。'
- en: The Significance of Deployment in Vue.js Development
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 部署在 Vue.js 开发中的重要性
- en: Before delving into the specifics of deployment strategies, it is crucial to
    recognize the significance of efficient deployment in modern web development.
    This module initiates by highlighting the challenges associated with transitioning
    Vue.js applications from development environments to production servers. Readers
    will gain an understanding of how deployment strategies impact the accessibility,
    performance, and reliability of Vue.js applications in real-world scenarios.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨部署策略的具体细节之前，必须认识到高效部署在现代网页开发中的重要性。本模块首先强调了将 Vue.js 应用从开发环境过渡到生产服务器所面临的挑战。读者将了解到部署策略如何影响
    Vue.js 应用在实际场景中的可访问性、性能和可靠性。
- en: Vue.js Production Build and Optimization Techniques
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 生产环境构建与优化技术
- en: This segment explores techniques for optimizing Vue.js applications for production
    builds, emphasizing strategies to minimize file sizes, reduce unnecessary dependencies,
    and enhance overall performance. Developers will gain insights into leveraging
    Vue CLI's build commands, code splitting, and tree-shaking to create optimized
    production builds. By mastering these techniques, developers can ensure that their
    Vue.js applications are lean, efficient, and capable of delivering optimal performance
    to end-users.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分探讨了优化 Vue.js 应用以适应生产构建的技术，重点介绍了减少文件大小、去除不必要的依赖项以及提升整体性能的策略。开发者将深入了解如何利用 Vue
    CLI 的构建命令、代码分割和树摇（tree-shaking）来创建优化后的生产构建。通过掌握这些技术，开发者能够确保他们的 Vue.js 应用精简、高效，并能为最终用户提供最佳性能。
- en: Static Site Generation (SSG) and Server-Side Rendering (SSR) for Vue.js Apps
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 静态站点生成（SSG）与服务器端渲染（SSR）在 Vue.js 应用中的应用
- en: The module delves into advanced deployment strategies such as Static Site Generation
    (SSG) and Server-Side Rendering (SSR) for Vue.js applications. Readers will explore
    the benefits of pre-rendering static pages and serving dynamic content from the
    server to enhance performance and search engine optimization. Practical insights
    into implementing SSG and SSR with Vue.js frameworks like Nuxt.js provide developers
    with the tools needed to deploy applications that strike a balance between dynamic
    interactivity and optimal load times.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本模块深入探讨了针对 Vue.js 应用的高级部署策略，如静态网站生成（SSG）和服务器端渲染（SSR）。读者将了解预渲染静态页面和从服务器提供动态内容的好处，从而提升性能和搜索引擎优化。通过实践，读者将学习如何使用
    Vue.js 框架，如 Nuxt.js，来实现 SSG 和 SSR，为开发者提供所需的工具，部署既具有动态交互性又能优化加载时间的应用。
- en: Containerization with Docker and Orchestration with Kubernetes
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Docker 进行容器化与 Kubernetes 进行编排
- en: As modern deployment architectures embrace containerization and orchestration,
    this part of the module addresses strategies for deploying Vue.js applications
    using Docker containers and orchestrating them with Kubernetes. Developers will
    gain practical knowledge of containerizing Vue.js applications, configuring Docker
    images, and deploying them in scalable and manageable Kubernetes clusters. By
    adopting containerization and orchestration, developers can streamline deployment
    processes, ensure consistency across different environments, and enhance the scalability
    of their Vue.js applications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 随着现代部署架构采用容器化和编排技术，本模块部分内容将介绍如何使用 Docker 容器部署 Vue.js 应用，并通过 Kubernetes 进行编排。开发者将获得容器化
    Vue.js 应用、配置 Docker 镜像以及在可扩展且可管理的 Kubernetes 集群中进行部署的实践知识。通过采用容器化和编排，开发者能够简化部署流程，确保不同环境之间的一致性，并提升
    Vue.js 应用的可扩展性。
- en: '"Deployment Strategies for Vue.js Apps" stands as a pivotal module within "Vue.js
    Essentials: For Responsive Web Development," providing readers with a comprehensive
    guide to deploying Vue.js applications effectively. By unraveling the significance
    of deployment, exploring production build optimization, and addressing advanced
    strategies like SSG, SSR, containerization, and orchestration, developers gain
    the knowledge and skills needed to navigate the complexities of deploying Vue.js
    applications in diverse environments. This module serves as an indispensable resource
    for developers committed to delivering Vue.js applications that not only meet
    performance expectations but also seamlessly adapt to the demands of modern deployment
    architectures.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 《Vue.js 应用部署策略》是《Vue.js 必备知识：响应式 Web 开发》中的一个重要模块，向读者提供了一个全面的指南，帮助有效部署 Vue.js
    应用。通过解开部署的意义、探索生产构建优化以及讨论 SS、SSR、容器化和编排等高级策略，开发者能够掌握在不同环境中部署 Vue.js 应用的复杂性。该模块为那些致力于交付不仅符合性能预期，还能无缝适应现代部署架构需求的
    Vue.js 应用的开发者提供了不可或缺的资源。
- en: Deploying to Static Hosts
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署到静态主机
- en: 'Within the module "Deployment Strategies for Vue.js Apps" in the book "Vue.js
    Essentials: For Responsive Web Development," the section on deploying to static
    hosts explores the process of deploying Vue.js applications to static hosting
    services. Deploying to static hosts is an efficient strategy for Vue.js apps,
    as it involves pre-rendering the application''s static assets and hosting them
    on platforms designed to serve static content.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '在书籍《Vue.js Essentials: For Responsive Web Development》中的模块 "Deployment Strategies
    for Vue.js Apps" 内，关于部署到静态主机的章节探讨了将 Vue.js 应用程序部署到静态托管服务的过程。部署到静态主机是 Vue.js 应用程序的高效策略，因为它涉及预渲染应用程序的静态资源并将其托管在设计用于提供静态内容的平台上。'
- en: Building the Vue.js Application
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 构建 Vue.js 应用程序
- en: The deployment process typically begins with building the Vue.js application
    to generate the optimized and minified assets that will be deployed. The build
    command, often specified in the project's configuration, triggers the compilation
    and bundling of the application's source code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 部署过程通常从构建 Vue.js 应用程序开始，以生成将要部署的优化和压缩后的资源。构建命令通常在项目的配置文件中指定，触发应用程序源代码的编译和打包。
- en: Run the build command for production
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行生产环境的构建命令
- en: npm run build
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: npm run build
- en: In this example, the npm run build command executes the build script configured
    in the project, preparing the application for deployment by creating the necessary
    static assets.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，npm run build 命令执行项目中配置的构建脚本，通过创建必要的静态资源为部署做好准备。
- en: Configuring Deployment Settings
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 配置部署设置
- en: Before deploying to static hosts, developers need to configure deployment settings,
    specifying the build output directory and other relevant options. The vue.config.js
    file, commonly used in Vue.js projects, allows developers to customize the build
    process and set deployment-related configurations.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署到静态主机之前，开发人员需要配置部署设置，指定构建输出目录和其他相关选项。vue.config.js 文件是 Vue.js 项目中常用的文件，允许开发人员自定义构建过程并设置与部署相关的配置。
- en: // vue.config.js
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: // vue.config.js
- en: module.exports = {
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: module.exports = {
- en: // Set the output directory for the build
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: // 设置构建的输出目录
- en: 'outputDir: ''dist'','
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 'outputDir: ''dist'','
- en: // Additional configurations for deployment
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: // 部署的额外配置
- en: '};'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: Here, the outputDir option in the vue.config.js file specifies the directory
    where the build output will be stored, often named 'dist' for distribution.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，vue.config.js 文件中的 outputDir 选项指定了构建输出将存储的目录，通常命名为 'dist' 用于发布。
- en: Choosing a Static Hosting Service
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 选择静态托管服务
- en: Several static hosting services are suitable for deploying Vue.js applications,
    including Netlify, Vercel, and GitHub Pages. The chosen hosting service will determine
    the deployment process and configuration. For instance, Netlify integrates seamlessly
    with Git repositories, allowing for continuous deployment with each push to the
    repository.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种静态托管服务适合部署 Vue.js 应用程序，包括 Netlify、Vercel 和 GitHub Pages。选择的托管服务将决定部署过程和配置。例如，Netlify
    可以与 Git 仓库无缝集成，允许每次推送到仓库时进行持续部署。
- en: Deploy to Netlify
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署到 Netlify
- en: netlify deploy
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: netlify deploy
- en: This hypothetical command represents the deployment process to Netlify, where
    the netlify deploy command uploads the contents of the build directory to the
    Netlify platform.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个假设的命令表示部署到 Netlify 的过程，其中 `netlify deploy` 命令将构建目录的内容上传到 Netlify 平台。
- en: Deploying to GitHub Pages
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 部署到 GitHub Pages
- en: For GitHub Pages, a popular static hosting option, the deployment process involves
    pushing the build output to a specific branch (often named 'gh-pages') within
    the project repository. GitHub Pages will then serve the static assets from this
    branch.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 GitHub Pages，一个流行的静态托管选项，部署过程涉及将构建输出推送到项目仓库中的特定分支（通常命名为 'gh-pages'）。然后，GitHub
    Pages 将从该分支提供静态资源。
- en: Deploy to GitHub Pages
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署到 GitHub Pages
- en: npm run build
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: npm run build
- en: git checkout -b gh-pages
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: git checkout -b gh-pages
- en: git add .
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: git add .
- en: git commit -m "Deploy to GitHub Pages"
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: git commit -m "部署到 GitHub Pages"
- en: git push origin gh-pages
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: git push origin gh-pages
- en: In this example, the build is followed by creating and switching to the 'gh-pages'
    branch, committing the build output, and pushing it to the remote repository.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，构建之后会创建并切换到 'gh-pages' 分支，提交构建输出，并推送到远程仓库。
- en: Continuous Deployment with CI/CD
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 CI/CD 进行持续部署
- en: To streamline the deployment process, developers often leverage Continuous Integration/Continuous
    Deployment (CI/CD) pipelines. CI/CD systems like GitHub Actions or GitLab CI can
    be configured to automatically build and deploy the Vue.js application whenever
    changes are pushed to the repository.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化部署过程，开发者通常利用持续集成/持续部署（CI/CD）管道。像 GitHub Actions 或 GitLab CI 这样的 CI/CD 系统可以配置为在每次推送代码到仓库时，自动构建并部署
    Vue.js 应用程序。
- en: GitHub Actions workflow file (.github/workflows/deploy.yml)
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub Actions 工作流文件（.github/workflows/deploy.yml）
- en: 'name: Deploy to Netlify'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 名称：部署到 Netlify
- en: 'on:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 触发条件：
- en: 'push:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 推送：
- en: 'branches:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 分支：
- en: '- main'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '- main'
- en: 'jobs:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 作业：
- en: 'deploy:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 部署：
- en: 'runs-on: ubuntu-latest'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 运行环境：ubuntu-latest
- en: 'steps:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤：
- en: '- name: Checkout code'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '- 名称：检出代码'
- en: 'uses: actions/checkout@v2'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用：actions/checkout@v2
- en: '- name: Install dependencies'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '- 名称：安装依赖'
- en: 'run: npm install'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 运行：npm install
- en: '- name: Build and deploy'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '- 名称：构建并部署'
- en: 'run: |'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 运行：|
- en: npm run build
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: npm run build
- en: npx netlify deploy --prod
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: npx netlify deploy --prod
- en: 'env:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 环境变量：
- en: 'NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 'NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}'
- en: This GitHub Actions workflow demonstrates an automated deployment setup, triggering
    a deployment to Netlify on each push to the 'main' branch.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 GitHub Actions 工作流演示了一个自动化部署设置，在每次向 'main' 分支推送代码时触发部署到 Netlify。
- en: The "Deploying to Static Hosts" section provides Vue.js developers with insights
    into deploying their applications to static hosting services. By building the
    application, configuring deployment settings, choosing a static hosting service,
    and considering continuous deployment options, developers can efficiently deploy
    and host their Vue.js apps on platforms designed for serving static content.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: “部署到静态主机”部分为 Vue.js 开发者提供了将应用部署到静态托管服务的见解。通过构建应用、配置部署设置、选择静态托管服务并考虑持续部署选项，开发者可以高效地将
    Vue.js 应用部署并托管在专为提供静态内容服务的平台上。
- en: Serverless Deployments with Firebase
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Firebase 进行无服务器部署
- en: 'In the module "Deployment Strategies for Vue.js Apps" within the book "Vue.js
    Essentials: For Responsive Web Development," the section on serverless deployments
    with Firebase explores an efficient strategy for deploying Vue.js applications
    using Firebase Hosting. Serverless deployments offer a scalable and cost-effective
    solution, allowing developers to focus on building and deploying applications
    without managing server infrastructure.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '在《Vue.js Essentials: For Responsive Web Development》一书中的模块“Vue.js 应用的部署策略”中，关于使用
    Firebase 进行无服务器部署的部分，探讨了通过 Firebase Hosting 部署 Vue.js 应用的高效策略。无服务器部署提供了一种可扩展且具有成本效益的解决方案，让开发者可以专注于构建和部署应用，而无需管理服务器基础设施。'
- en: Setting Up Firebase for Vue.js Deployment
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 Firebase 用于 Vue.js 部署
- en: Before deploying a Vue.js application with Firebase, developers need to set
    up a Firebase project and install the Firebase CLI. The Firebase CLI provides
    command-line tools for interacting with Firebase services, including Firebase
    Hosting.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Firebase 部署 Vue.js 应用之前，开发者需要设置 Firebase 项目并安装 Firebase CLI。Firebase CLI
    提供了与 Firebase 服务交互的命令行工具，包括 Firebase Hosting。
- en: Install the Firebase CLI globally
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全局安装 Firebase CLI
- en: npm install -g firebase-tools
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: npm install -g firebase-tools
- en: Log in to Firebase (authenticate)
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录 Firebase（进行身份验证）
- en: firebase login
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: firebase 登录
- en: Initialize Firebase in the project
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在项目中初始化 Firebase
- en: firebase init
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: firebase init
- en: In this example, the npm install -g firebase-tools command globally installs
    the Firebase CLI, firebase login authenticates the user, and firebase init initializes
    Firebase in the project, prompting the developer to choose services to set up,
    including Firebase Hosting.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，`npm install -g firebase-tools` 命令全局安装 Firebase CLI，`firebase login` 用于用户身份验证，`firebase
    init` 用于在项目中初始化 Firebase，提示开发者选择要设置的服务，包括 Firebase Hosting。
- en: Configuring Firebase Hosting
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 配置 Firebase Hosting
- en: After initializing Firebase in the project, developers need to configure Firebase
    Hosting settings, such as the public directory where the build output is located.
    The Firebase CLI provides an interactive setup process, but developers can also
    manually configure the settings in the firebase.json file.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目中初始化 Firebase 后，开发者需要配置 Firebase Hosting 设置，如构建输出所在的公共目录。Firebase CLI 提供了交互式的设置过程，但开发者也可以手动在
    `firebase.json` 文件中配置设置。
- en: // firebase.json
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: // firebase.json
- en: '{'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"hosting": {'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '"hosting": {'
- en: '"public": "dist",'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '"public": "dist",'
- en: '"ignore": ["firebase.json", "**/.*", "**/node_modules/**"],'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '"ignore": ["firebase.json", "**/.*", "**/node_modules/**"],'
- en: // Additional hosting configurations
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: // 额外的 Hosting 配置
- en: '}'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: In this configuration, the "public" field specifies the directory containing
    the static assets, often named 'dist' for Vue.js projects.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配置中，"public" 字段指定包含静态资源的目录，Vue.js 项目中通常命名为 'dist'。
- en: Deploying Vue.js Application to Firebase
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Vue.js 应用部署到 Firebase
- en: With Firebase configured, deploying the Vue.js application becomes a straightforward
    process. The firebase deploy command uploads the contents of the specified public
    directory to Firebase Hosting, making the application accessible via a unique
    Firebase Hosting URL.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 配置好 Firebase 后，部署 Vue.js 应用变得非常简单。`firebase deploy` 命令将指定的 public 目录内容上传到 Firebase
    Hosting，使应用可以通过唯一的 Firebase Hosting URL 访问。
- en: Deploy the Vue.js application to Firebase Hosting
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Vue.js 应用部署到 Firebase Hosting
- en: firebase deploy
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: firebase deploy
- en: This command triggers the deployment process, uploading the static assets to
    Firebase Hosting and providing a deployment URL that developers can use to access
    the live application.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令触发部署过程，将静态资源上传到 Firebase Hosting，并提供一个部署 URL，开发者可以通过该 URL 访问上线后的应用。
- en: Enabling Continuous Deployment
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 启用持续部署
- en: To streamline the deployment process and enable continuous deployment, developers
    can integrate Firebase Hosting with CI/CD platforms like GitHub Actions. This
    allows for automated deployments whenever changes are pushed to the repository.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化部署过程并实现持续部署，开发者可以将 Firebase Hosting 与 CI/CD 平台（如 GitHub Actions）集成。这使得每当代码变动推送到仓库时，可以自动化部署。
- en: GitHub Actions workflow file (.github/workflows/deploy.yml)
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub Actions 工作流文件 (.github/workflows/deploy.yml)
- en: 'name: Deploy to Firebase'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: 部署到 Firebase'
- en: 'on:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 'on:'
- en: 'push:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 'push:'
- en: 'branches:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 'branches:'
- en: '- main'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '- main'
- en: 'jobs:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 'jobs:'
- en: 'deploy:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 'deploy:'
- en: 'runs-on: ubuntu-latest'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 'runs-on: ubuntu-latest'
- en: 'steps:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤：
- en: '- name: Checkout code'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '- name: 检出代码'
- en: 'uses: actions/checkout@v2'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 'uses: actions/checkout@v2'
- en: '- name: Install Firebase CLI'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '- name: 安装 Firebase CLI'
- en: 'run: npm install -g firebase-tools'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 'run: npm install -g firebase-tools'
- en: '- name: Deploy to Firebase'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '- name: 部署到 Firebase'
- en: 'run: |'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 'run: |'
- en: npm install
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: npm install
- en: npm run build
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: npm run build
- en: firebase deploy --token ${{ secrets.FIREBASE_AUTH_TOKEN }}
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: firebase deploy --token ${{ secrets.FIREBASE_AUTH_TOKEN }}
- en: 'env:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 'env:'
- en: 'CI: false'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 'CI: false'
- en: This GitHub Actions workflow demonstrates a continuous deployment setup for
    Firebase Hosting, including the installation of the Firebase CLI, building the
    Vue.js application, and deploying it to Firebase Hosting on each push to the 'main'
    branch.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 GitHub Actions 工作流示范了一个持续部署的设置，针对 Firebase Hosting，包括安装 Firebase CLI、构建 Vue.js
    应用，并在每次推送到 'main' 分支时将应用部署到 Firebase Hosting。
- en: The "Serverless Deployments with Firebase" section provides Vue.js developers
    with a practical guide to deploying applications using Firebase Hosting. By setting
    up Firebase, configuring hosting settings, deploying the application, and enabling
    continuous deployment, developers can leverage the benefits of serverless deployments
    for their Vue.js projects, ensuring scalability, cost-effectiveness, and a streamlined
    deployment workflow.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: “无服务器部署与Firebase”部分为Vue.js开发者提供了使用Firebase Hosting部署应用程序的实用指南。通过设置Firebase、配置托管设置、部署应用程序和启用持续部署，开发者可以利用无服务器部署的优势，确保Vue.js项目的可扩展性、成本效益和流畅的部署工作流。
- en: Containerization with Docker
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Docker进行容器化
- en: 'In the module "Deployment Strategies for Vue.js Apps" of the book "Vue.js Essentials:
    For Responsive Web Development," the section on containerization with Docker explores
    the deployment strategy of encapsulating Vue.js applications within Docker containers.
    Containerization provides a consistent and portable environment for deploying
    Vue.js applications, making it easier to manage dependencies and ensuring that
    the application runs consistently across different environments.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在《Vue.js精要：响应式Web开发》一书的“Vue.js应用程序的部署策略”模块中，容器化与Docker部分探讨了将Vue.js应用程序封装在Docker容器中的部署策略。容器化为部署Vue.js应用程序提供了一个一致且便携的环境，简化了依赖管理，并确保应用程序在不同环境中一致运行。
- en: Understanding Docker and Containers
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 理解Docker和容器
- en: Docker is a platform that enables developers to package applications and their
    dependencies into lightweight, portable containers. Containers provide an isolated
    and reproducible environment, ensuring that the Vue.js application runs consistently,
    regardless of the host system or dependencies.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是一个平台，使开发者能够将应用程序及其依赖项打包成轻量级、可移植的容器。容器提供了一个隔离和可复现的环境，确保Vue.js应用程序在任何主机系统或依赖项中都能一致运行。
- en: Creating a Dockerfile for Vue.js Applications
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为Vue.js应用程序创建Dockerfile
- en: To containerize a Vue.js application, developers create a Dockerfile, which
    contains instructions for building a Docker image. The Dockerfile specifies the
    base image, sets up the environment, and defines how the application should be
    run within the container.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要容器化Vue.js应用程序，开发者需要创建一个Dockerfile，该文件包含构建Docker镜像的指令。Dockerfile指定基础镜像、设置环境，并定义如何在容器内运行应用程序。
- en: Use an official Node.js image as the base image
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用官方Node.js镜像作为基础镜像
- en: FROM node:14
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: FROM node:14
- en: Set the working directory
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置工作目录
- en: WORKDIR /app
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: WORKDIR /app
- en: Copy package.json and package-lock.json to the working directory
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将package.json和package-lock.json复制到工作目录
- en: COPY package*.json ./
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: COPY package*.json ./
- en: Install dependencies
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装依赖项
- en: RUN npm install
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: RUN npm install
- en: Copy the entire project to the working directory
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将整个项目复制到工作目录
- en: COPY . .
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: COPY . .
- en: Build the Vue.js application
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建Vue.js应用程序
- en: RUN npm run build
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: RUN npm run build
- en: Expose the port on which the Vue.js app will run
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暴露Vue.js应用程序运行的端口
- en: EXPOSE 8080
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: EXPOSE 8080
- en: Command to start the application
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动应用的命令
- en: CMD ["npm", "run", "start"]
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: CMD ["npm", "run", "start"]
- en: In this Dockerfile example, it starts with the official Node.js image, sets
    the working directory, copies the package files, installs dependencies, copies
    the entire project, builds the Vue.js application, exposes the necessary port,
    and defines the command to start the application.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个Dockerfile示例中，首先使用官方的Node.js镜像，设置工作目录，复制包文件，安装依赖，复制整个项目，构建Vue.js应用，暴露必要的端口，并定义启动应用的命令。
- en: Building and Running the Docker Image
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行Docker镜像
- en: Once the Dockerfile is created, developers use the Docker CLI to build a Docker
    image from the instructions provided. Subsequently, they can run a Docker container
    using the created image.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Dockerfile后，开发者使用Docker CLI根据提供的指令构建Docker镜像。随后，他们可以使用创建的镜像运行Docker容器。
- en: Build the Docker image (run this command in the project directory)
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建Docker镜像（在项目目录下运行此命令）
- en: docker build -t my-vue-app .
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: docker build -t my-vue-app .
- en: Run the Docker container
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行Docker容器
- en: docker run -p 8080:8080 my-vue-app
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: docker run -p 8080:8080 my-vue-app
- en: These commands demonstrate building a Docker image named 'my-vue-app' from the
    Dockerfile in the current directory and running a Docker container based on that
    image, mapping port 8080 from the container to the host.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令展示了如何从当前目录下的Dockerfile构建名为'my-vue-app'的Docker镜像，并基于该镜像运行Docker容器，将容器的8080端口映射到主机。
- en: Container Orchestration with Docker Compose
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Docker Compose进行容器编排
- en: For more complex deployments involving multiple containers, developers can use
    Docker Compose to define and manage multi-container applications. The docker-compose.yml
    file specifies the services, networks, and volumes required for the application.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 对于涉及多个容器的复杂部署，开发者可以使用Docker Compose来定义和管理多容器应用。docker-compose.yml文件指定了应用所需的服务、网络和卷。
- en: docker-compose.yml
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: docker-compose.yml
- en: 'version: ''3'''
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 'version: ''3'''
- en: 'services:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 服务：
- en: 'web:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 'web:'
- en: 'build: .'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 'build: .'
- en: 'ports:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 端口：
- en: '- "8080:8080"'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '- "8080:8080"'
- en: This simplified docker-compose.yml file defines a service named 'web,' specifying
    the build context and port mapping.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简化版的docker-compose.yml文件定义了一个名为'web'的服务，指定了构建上下文和端口映射。
- en: Advantages of Docker Containerization for Vue.js Apps
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Docker容器化在Vue.js应用中的优势
- en: Containerization offers several advantages for deploying Vue.js applications.
    It ensures consistency across different environments, simplifies dependency management,
    facilitates easy scaling, and enables efficient resource utilization. Additionally,
    Docker containers can be easily shared and distributed, making it a convenient
    deployment strategy for Vue.js applications.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 容器化为部署Vue.js应用提供了多项优势。它确保了不同环境之间的一致性，简化了依赖管理，促进了易于扩展的架构，并提高了资源利用效率。此外，Docker容器可以轻松共享和分发，使得Vue.js应用的部署策略更加便捷。
- en: The "Containerization with Docker" section equips Vue.js developers with the
    knowledge and tools needed to containerize their applications using Docker. By
    creating a Dockerfile, building and running Docker images, and exploring container
    orchestration with Docker Compose, developers can embrace containerization as
    a powerful deployment strategy, enhancing the consistency, portability, and scalability
    of their Vue.js applications.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: “使用 Docker 容器化”部分为 Vue.js 开发人员提供了容器化应用的知识和工具。通过创建 Dockerfile，构建和运行 Docker 镜像，以及探索使用
    Docker Compose 进行容器编排，开发人员可以将容器化作为一种强大的部署策略，从而提高 Vue.js 应用的一致性、可移植性和可扩展性。
- en: Continuous Integration and Deployment (CI/CD) for Vue.js
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Vue.js 的持续集成与部署（CI/CD）
- en: 'In the module "Deployment Strategies for Vue.js Apps" within the book "Vue.js
    Essentials: For Responsive Web Development," the section on Continuous Integration
    and Deployment (CI/CD) for Vue.js delves into the essential practices and tools
    for automating the integration and deployment processes. CI/CD ensures that changes
    to the Vue.js application are systematically tested, built, and deployed, facilitating
    a streamlined and reliable development workflow.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '在书籍《Vue.js Essentials: For Responsive Web Development》的“Vue.js 应用的部署策略”模块中，关于
    Vue.js 的持续集成与部署（CI/CD）部分深入探讨了自动化集成和部署过程的基本实践和工具。CI/CD 确保对 Vue.js 应用的更改被系统地测试、构建和部署，从而促进了高效且可靠的开发工作流。'
- en: Implementing CI/CD with GitHub Actions
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 GitHub Actions 实现 CI/CD
- en: GitHub Actions is a popular CI/CD platform integrated with GitHub repositories.
    Developers can define workflows using YAML files in the .github/workflows directory
    to automate tasks like testing, building, and deploying Vue.js applications.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions 是一个流行的 CI/CD 平台，与 GitHub 仓库集成。开发人员可以使用 YAML 文件在 .github/workflows
    目录中定义工作流，以自动化任务，如测试、构建和部署 Vue.js 应用。
- en: GitHub Actions workflow file (.github/workflows/ci-cd.yml)
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub Actions 工作流文件 (.github/workflows/ci-cd.yml)
- en: 'name: CI/CD for Vue.js'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: Vue.js 的 CI/CD'
- en: 'on:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 'on:'
- en: 'push:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 'push:'
- en: 'branches:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 'branches:'
- en: '- main'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '- main'
- en: 'jobs:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 'jobs:'
- en: 'build:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 'build:'
- en: 'runs-on: ubuntu-latest'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 'runs-on: ubuntu-latest'
- en: 'steps:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 'steps:'
- en: '- name: Checkout code'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '- name: 检出代码'
- en: 'uses: actions/checkout@v2'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 'uses: actions/checkout@v2'
- en: '- name: Setup Node.js'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '- name: 设置 Node.js'
- en: 'uses: actions/setup-node@v3'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 'uses: actions/setup-node@v3'
- en: 'with:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 'with:'
- en: 'node-version: ''14'''
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 'node-version: ''14'''
- en: '- name: Install dependencies'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '- name: 安装依赖'
- en: 'run: npm install'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 'run: npm install'
- en: '- name: Run tests'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '- name: 运行测试'
- en: 'run: npm run test'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 'run: npm run test'
- en: '- name: Build Vue.js app'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '- name: 构建 Vue.js 应用'
- en: 'run: npm run build'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 'run: npm run build'
- en: 'deploy:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 'deploy:'
- en: 'runs-on: ubuntu-latest'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 'runs-on: ubuntu-latest'
- en: 'needs: build'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 'needs: build'
- en: 'steps:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 'steps:'
- en: '- name: Deploy to Hosting Service'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '- name: 部署到托管服务'
- en: 'run: |'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 'run: |'
- en: Add commands to deploy to hosting service (e.g., Firebase, Netlify)
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加命令以部署到托管服务（例如 Firebase、Netlify）
- en: 'env:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 'env:'
- en: 'CI: false'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 'CI: false'
- en: 'This GitHub Actions workflow is triggered on each push to the ''main'' branch.
    It includes two jobs: ''build'' for testing and building the Vue.js app, and ''deploy''
    for deploying the app using commands specific to the chosen hosting service.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 该 GitHub Actions 工作流在每次推送到 'main' 分支时触发。它包括两个作业：'build' 用于测试和构建 Vue.js 应用，'deploy'
    用于使用特定托管服务的命令进行部署。
- en: Environment Variables and Secrets
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 环境变量和机密
- en: When deploying to hosting services or accessing external services, sensitive
    information such as API keys or authentication tokens is often required. GitHub
    Actions allows developers to store and use secrets securely.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署到托管服务或访问外部服务时，通常需要敏感信息，如 API 密钥或身份验证令牌。GitHub Actions 允许开发人员安全地存储和使用机密。
- en: GitHub Actions workflow file (.github/workflows/ci-cd.yml)
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub Actions 工作流文件（.github/workflows/ci-cd.yml）
- en: '...'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: 'deploy:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 'deploy:'
- en: 'runs-on: ubuntu-latest'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 'runs-on: ubuntu-latest'
- en: 'needs: build'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 'needs: build'
- en: 'steps:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 'steps:'
- en: '- name: Deploy to Hosting Service'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '- name: 部署到托管服务'
- en: 'run: |'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 'run: |'
- en: Add commands to deploy to hosting service (e.g., Firebase, Netlify)
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加命令以部署到托管服务（例如 Firebase、Netlify）
- en: echo ${{ secrets.API_KEY }}
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: echo ${{ secrets.API_KEY }}
- en: 'env:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 'env:'
- en: 'CI: false'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 'CI: false'
- en: 'API_KEY: ${{ secrets.API_KEY }}'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 'API_KEY: ${{ secrets.API_KEY }}'
- en: In this modified example, the API key is accessed as an environment variable,
    and the actual value is retrieved from GitHub Secrets.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个修改后的示例中，API 密钥作为环境变量被访问，实际值从 GitHub Secrets 中获取。
- en: CI/CD with Netlify
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD 与 Netlify
- en: For Vue.js applications, Netlify is a hosting service that integrates seamlessly
    with GitHub Actions for CI/CD. Developers can leverage the Netlify CLI to deploy
    the application directly from the GitHub Actions workflow.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Vue.js 应用程序，Netlify 是一个与 GitHub Actions 无缝集成的托管服务，用于 CI/CD。开发人员可以利用 Netlify
    CLI 直接从 GitHub Actions 工作流中部署应用程序。
- en: GitHub Actions workflow file (.github/workflows/ci-cd.yml)
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub Actions 工作流文件（.github/workflows/ci-cd.yml）
- en: '...'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: 'deploy:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 'deploy:'
- en: 'runs-on: ubuntu-latest'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 'runs-on: ubuntu-latest'
- en: 'needs: build'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 'needs: build'
- en: 'steps:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 'steps:'
- en: '- name: Deploy to Netlify'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '- name: 部署到 Netlify'
- en: 'run: npx netlify deploy --prod'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 'run: npx netlify deploy --prod'
- en: 'env:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 'env:'
- en: 'CI: false'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 'CI: false'
- en: 'NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 'NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}'
- en: This example demonstrates deploying to Netlify using the Netlify CLI. The NETLIFY_AUTH_TOKEN
    is retrieved from GitHub Secrets to authenticate the deployment.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例演示了如何使用 Netlify CLI 部署到 Netlify。NETLIFY_AUTH_TOKEN 从 GitHub Secrets 中获取，用于身份验证部署。
- en: The "Continuous Integration and Deployment (CI/CD) for Vue.js" section equips
    Vue.js developers with the knowledge and tools to implement automated CI/CD workflows.
    By leveraging GitHub Actions, environment variables, and integrating with hosting
    services like Netlify, developers can ensure consistent testing, building, and
    deployment processes, contributing to a more efficient and reliable Vue.js application
    development lifecycle.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: “Vue.js 的持续集成与部署（CI/CD）”部分为 Vue.js 开发人员提供了实施自动化 CI/CD 工作流所需的知识和工具。通过利用 GitHub
    Actions、环境变量，并与 Netlify 等托管服务集成，开发人员可以确保一致的测试、构建和部署过程，从而为 Vue.js 应用程序开发生命周期带来更高的效率和可靠性。
