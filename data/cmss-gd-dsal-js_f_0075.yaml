- en: '`Exercises`'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`练习`'
- en: '`The following exercises provide you with the opportunity to practice with
    algorithms in practical situations. The solutions to these exercises are found
    in the section [Chapter 7](f_0212.xhtml#big.o.in.everyday.code.solutions).`'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`以下练习为你提供了在实际情况下练习算法的机会。这些练习的解决方案在[第7章](f_0212.xhtml#big.o.in.everyday.code.solutions)中找到。`'
- en: '`Use Big O notation to describe the time complexity of the following function.
    The function returns true if the array is a 100-sum array, and false if it is
    not.`'
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '`使用大 O 表示法描述以下函数的时间复杂度。如果数组是一个100和数组，则返回真；如果不是，则返回假。`'
- en: '`A 100-sum array meets the following criteria:`'
  id: totrans-3
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: '`一个100和数组满足以下条件：`'
- en: '`Its first and last numbers add up to 100.`'
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`它的第一个和最后一个数字相加为100。`'
- en: '`Its second and second-to-last numbers add up to 100.`'
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`它的第二个和倒数第二个数字相加为100。`'
- en: '`Its third and third-to-last numbers add up to 100, and so on.`'
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`它的第三个和倒数第三个数字相加为100，依此类推。`'
- en: '`Here’s the function:`'
  id: totrans-7
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: '`这里是函数：`'
- en: '|  | `function oneHundredSum(array) {` |'
  id: totrans-8
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `function oneHundredSum(array) {` |'
- en: '|  | `if (array.length % 2 !== 0 || array.length === 0) {` |'
  id: totrans-9
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `if (array.length % 2 !== 0 || array.length === 0) {` |'
- en: '|  | `return false;` |'
  id: totrans-10
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `return false;` |'
- en: '|  | `}` |'
  id: totrans-11
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `}` |'
- en: '|  |  |'
  id: totrans-12
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  |  |'
- en: '|  | `let leftIndex = 0;` |'
  id: totrans-13
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `let leftIndex = 0;` |'
- en: '|  | `let rightIndex = array.length - 1;` |'
  id: totrans-14
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `let rightIndex = array.length - 1;` |'
- en: '|  |  |'
  id: totrans-15
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  |  |'
- en: '|  | `while (leftIndex < Math.floor(array.length / 2)) {`'
  id: totrans-16
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `while (leftIndex < Math.floor(array.length / 2)) {` |'
- en: '|  | `if (array[leftIndex] + array[rightIndex] !== 100) {` |'
  id: totrans-17
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `if (array[leftIndex] + array[rightIndex] !== 100) {` |'
- en: '|  | `return false;` |'
  id: totrans-18
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `return false;` |'
- en: '|  | `}` |'
  id: totrans-19
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `}` |'
- en: '|  |  |'
  id: totrans-20
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  |  |'
- en: '|  |  |'
  id: totrans-21
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  |  |'
- en: '|  |  |'
  id: totrans-22
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  |  |'
- en: '|  |  |'
  id: totrans-23
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  |  |'
- en: '|  | `leftIndex += 1;` |'
  id: totrans-24
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `leftIndex += 1;` |'
- en: '|  | `rightIndex -= 1;` |'
  id: totrans-25
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `rightIndex -= 1;` |'
- en: '|  | `}` |'
  id: totrans-26
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `}` |'
- en: '|  | `return true;` |'
  id: totrans-27
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `return true;` |'
- en: '|  | `}` |'
  id: totrans-28
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `}` |'
- en: '`Use Big O notation to describe the time complexity of the following function.
    It merges two sorted arrays to create a new sorted array containing all the values
    from both arrays:`'
  id: totrans-29
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '`使用大 O 表示法描述以下函数的时间复杂度。它合并两个已排序的数组，以创建一个包含两个数组中所有值的新排序数组：`'
- en: '|  | `function merge(array1, array2) {` |'
  id: totrans-30
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `function merge(array1, array2) {` |'
- en: '|  | `const newArray = [];` |'
  id: totrans-31
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `const newArray = [];` |'
- en: '|  | `let array1Pointer = 0;` |'
  id: totrans-32
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `let array1Pointer = 0;` |'
- en: '|  | `let array2Pointer = 0;` |'
  id: totrans-33
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `let array2Pointer = 0;` |'
- en: '|  |  |'
  id: totrans-34
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  |  |'
- en: '|  | `// Run the loop until we''ve reached end of both arrays:` |'
  id: totrans-35
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `// 运行循环直到我们到达两个数组的末尾：` |'
- en: '|  | `while (array1Pointer < array1.length || array2Pointer < array2.length)
    {` |'
  id: totrans-36
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `while (array1Pointer < array1.length || array2Pointer < array2.length)
    {` |'
- en: '|  | `// If we already reached the end of the first array,` |'
  id: totrans-37
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `// 如果我们已经到达第一个数组的末尾，` |'
- en: '|  | `// add item from second array:` |'
  id: totrans-38
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `// 从第二个数组添加项：` |'
- en: '|  | `if (array1Pointer >= array1.length) {` |'
  id: totrans-39
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `if (array1Pointer >= array1.length) {` |'
- en: '|  | `newArray.push(array2[array2Pointer]);` |'
  id: totrans-40
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `newArray.push(array2[array2Pointer]);` |'
- en: '|  | `array2Pointer += 1;` |'
  id: totrans-41
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `array2Pointer += 1;` |'
- en: '|  | `// If we already reached the end of the second array,` |'
  id: totrans-42
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `// 如果我们已经到达第二个数组的末尾，` |'
- en: '|  | `// add item from first array:` |'
  id: totrans-43
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `// 从第一个数组添加项：` |'
- en: '|  | `} else if (array2Pointer >= array2.length) {` |'
  id: totrans-44
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `} else if (array2Pointer >= array2.length) {` |'
- en: '|  | `newArray.push(array1[array1Pointer]);` |'
  id: totrans-45
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `newArray.push(array1[array1Pointer]);` |'
- en: '|  | `array1Pointer += 1;` |'
  id: totrans-46
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `array1Pointer += 1;` |'
- en: '|  | `// If the current number in first array is less than current` |'
  id: totrans-47
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `// 如果第一个数组中的当前数字小于当前` |'
- en: '|  | `// number in second array, add from first array:` |'
  id: totrans-48
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `// 第二个数组中的数字，从第一个数组添加：` |'
- en: '|  | `}` else if (array1[array1Pointer] < array2[array2Pointer]) { |'
  id: totrans-49
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `}` else if (array1[array1Pointer] < array2[array2Pointer]) { |'
- en: '|  | `newArray.push(array1[array1Pointer]);` |'
  id: totrans-50
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `newArray.push(array1[array1Pointer]);` |'
- en: '|  | `array1Pointer += 1;` |'
  id: totrans-51
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `array1Pointer += 1;` |'
- en: '|  | `// If the current number in second array is less than or equal` |'
  id: totrans-52
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `// 如果第二个数组中的当前数字小于或等于` |'
- en: '|  | `// to current number in first array, add from second array:` |'
  id: totrans-53
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `// 对于第一个数组中的当前数字，从第二个数组添加：` |'
- en: '|  | `} else {` |'
  id: totrans-54
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `} else {` |'
- en: '|  | `newArray.push(array2[array2Pointer]);` |'
  id: totrans-55
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `newArray.push(array2[array2Pointer]);` |'
- en: '|  | `array2Pointer += 1;` |'
  id: totrans-56
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `array2Pointer += 1;` |'
- en: '|  | `}` |'
  id: totrans-57
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `}` |'
- en: '|  | `}` |'
  id: totrans-58
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `}` |'
- en: '|  |  |'
  id: totrans-59
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  |  |'
- en: '|  | `return newArray;` |'
  id: totrans-60
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `return newArray;` |'
- en: '|  | `}` |'
  id: totrans-61
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '|  | `}` |'
- en: 使用大 O 表示法描述以下函数的时间复杂度。该函数解决了一个著名的问题，称为“在干草堆中寻找针”。
  id: totrans-62
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 使用大 O 表示法描述以下函数的时间复杂度。该函数解决了一个著名的问题，称为“在干草堆中寻找针”。
- en: 针和干草堆都是字符串。例如，如果针是"def"而干草堆是"abcdefghi"，则针被包含在干草堆中，因为"def"是"abcdefghi"的子串。然而，如果针是"dd"，它不能在"abcdefghi"的干草堆中找到。
  id: totrans-63
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 针和干草堆都是字符串。例如，如果针是"def"而干草堆是"abcdefghi"，则针被包含在干草堆中，因为"def"是"abcdefghi"的子串。然而，如果针是"dd"，它不能在"abcdefghi"的干草堆中找到。
- en: 该函数根据针是否可以在干草堆中找到返回真或假：
  id: totrans-64
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 该函数根据针是否可以在干草堆中找到返回真或假：
- en: '| ​  | `function` findNeedle(needle, haystack) { |'
  id: totrans-65
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function findNeedle(needle, haystack) {` |'
- en: '| ​  | `let` needleStartIndex = 0; |'
  id: totrans-66
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let needleStartIndex = 0;` |'
- en: '| ​  |  |'
  id: totrans-67
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `while` (needleStartIndex <= haystack.length - needle.length) { |'
  id: totrans-68
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while (needleStartIndex <= haystack.length - needle.length) {` |'
- en: '| ​  | `if` (needle[0] === haystack[needleStartIndex]) { |'
  id: totrans-69
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (needle[0] === haystack[needleStartIndex]) { |'
- en: '| ​  | `let` needleOffset = 0; |'
  id: totrans-70
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` needleOffset = 0; |'
- en: '| ​  |  |'
  id: totrans-71
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `while` (needleOffset < needle.length) { |'
  id: totrans-72
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while` (needleOffset < needle.length) { |'
- en: '| ​  | `if` (needle[needleOffset] !== |'
  id: totrans-73
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (needle[needleOffset] !== |'
- en: '| ​  | haystack[needleStartIndex + needleOffset]) { |'
  id: totrans-74
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | haystack[needleStartIndex + needleOffset]) { |'
- en: '| ​  | `break`; |'
  id: totrans-75
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `break`; |'
- en: '| ​  | } |'
  id: totrans-76
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-77
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `if` (needleOffset === needle.length - 1) { |'
  id: totrans-78
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (needleOffset === needle.length - 1) { |'
- en: '| ​  | `return` `true`; |'
  id: totrans-79
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` `true`; |'
- en: '| ​  | } |'
  id: totrans-80
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-81
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | needleOffset += 1; |'
  id: totrans-82
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | needleOffset += 1; |'
- en: '| ​  | } |'
  id: totrans-83
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-84
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-85
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | needleStartIndex += 1; |'
  id: totrans-86
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | needleStartIndex += 1; |'
- en: '| ​  | } |'
  id: totrans-87
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-88
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return` `false`; |'
  id: totrans-89
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` `false`; |'
- en: '| ​  | } |'
  id: totrans-90
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 使用大 O 表示法描述以下函数的时间复杂度。该函数查找给定数组中三个数字的最大乘积：
  id: totrans-91
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 使用大 O 表示法描述以下函数的时间复杂度。该函数查找给定数组中三个数字的最大乘积：
- en: '| ​  | `function` largestProduct(array) { |'
  id: totrans-92
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` largestProduct(array) { |'
- en: '| ​  | `if` (array.length < 3) { `return` `null`; } |'
  id: totrans-93
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (array.length < 3) { `return` `null`; } |'
- en: '| ​  |  |'
  id: totrans-94
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `let` largestProductSoFar = array[0] * array[1] * array[2]; |'
  id: totrans-95
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` largestProductSoFar = array[0] * array[1] * array[2]; |'
- en: '| ​  | `let` i = 0; |'
  id: totrans-96
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` i = 0; |'
- en: '| ​  |  |'
  id: totrans-97
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `while` (i < array.length) { |'
  id: totrans-98
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while` (i < array.length) { |'
- en: '| ​  | `let` j = i + 1; |'
  id: totrans-99
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` j = i + 1; |'
- en: '| ​  |  |'
  id: totrans-100
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `while` (j < array.length) { |'
  id: totrans-101
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while` (j < array.length) { |'
- en: '| ​  | `let` k = j + 1; |'
  id: totrans-102
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` k = j + 1; |'
- en: '| ​  |  |'
  id: totrans-103
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `while` (k < array.length) { |'
  id: totrans-104
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while` (k < array.length) { |'
- en: '| ​  | `if` (array[i] * array[j] * array[k] > largestProductSoFar) { |'
  id: totrans-105
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (array[i] * array[j] * array[k] > largestProductSoFar) { |'
- en: '| ​  | largestProductSoFar = array[i] * array[j] * array[k]; |'
  id: totrans-106
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | largestProductSoFar = array[i] * array[j] * array[k]; |'
- en: '| ​  | } |'
  id: totrans-107
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | k += 1; |'
  id: totrans-108
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | k += 1; |'
- en: '| ​  | } |'
  id: totrans-109
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-110
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | j += 1; |'
  id: totrans-111
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | j += 1; |'
- en: '| ​  | } |'
  id: totrans-112
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-113
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | i += 1; |'
  id: totrans-114
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | i += 1; |'
- en: '| ​  | } |'
  id: totrans-115
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-116
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return` largestProductSoFar; |'
  id: totrans-117
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` largestProductSoFar; |'
- en: '| ​  | } |'
  id: totrans-118
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 'I once saw a joke aimed at HR people: “Want to immediately eliminate the unluckiest
    people from your hiring process? Just take half of the resumes on your desk and
    throw them in the trash.”'
  id: totrans-119
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 我曾经看到一个针对人力资源人员的笑话：“想要立即排除你招聘过程中的最不幸运的人吗？只需把你桌子上的一半简历扔进垃圾桶。”
- en: 如果我们要编写一个软件，它不断减少一堆简历，直到只剩下一份，可能会采用交替丢弃顶部一半和底部一半的方式；也就是说，它将首先消除顶部一半的堆，然后继续消除剩下的底部一半。它在消除顶部和底部之间不断交替，直到只剩下一份幸运的简历，这就是我们要雇佣的人！
  id: totrans-120
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 如果我们要编写一个软件，它不断减少一堆简历，直到只剩下一份，可能会采用交替丢弃顶部一半和底部一半的方式；也就是说，它将首先消除顶部一半的堆，然后继续消除剩下的底部一半。它在消除顶部和底部之间不断交替，直到只剩下一份幸运的简历，这就是我们要雇佣的人！
- en: 描述该函数的效率，使用大 O 表示法：
  id: totrans-121
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 描述该函数的效率，使用大 O 表示法：
- en: '| ​  | `function` pickResume(resumes) { |'
  id: totrans-122
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` pickResume(resumes) { |'
- en: '| ​  | `if` (resumes.length === 0) { `return` `null`; } |'
  id: totrans-123
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (resumes.length === 0) { `return` `null`; } |'
- en: '| ​  |  |'
  id: totrans-124
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `let` eliminate = ''top''; |'
  id: totrans-125
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` eliminate = ''top''; |'
- en: '| ​  |  |'
  id: totrans-126
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `while` (resumes.length > 1) { |'
  id: totrans-127
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while` (resumes.length > 1) { |'
- en: '| ​  | `const` midpoint = Math.floor(resumes.length / 2); |'
  id: totrans-128
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` midpoint = Math.floor(resumes.length / 2); |'
- en: '| ​  |  |'
  id: totrans-129
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `if` (eliminate === ''top'') { |'
  id: totrans-130
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (eliminate === ''top'') { |'
- en: '| ​  | `resumes = resumes.slice(0, midpoint);` |'
  id: totrans-131
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `resumes = resumes.slice(0, midpoint);` |'
- en: '| ​  | `eliminate = ''bottom'';` |'
  id: totrans-132
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `eliminate = ''bottom'';` |'
- en: '| ​  | } `else` `if` (eliminate === ''bottom'') { |'
  id: totrans-133
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } `else` `if` (eliminate === ''bottom'') { |'
- en: '| ​  | `resumes = resumes.slice(midpoint);` |'
  id: totrans-134
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `resumes = resumes.slice(midpoint);` |'
- en: '| ​  | `eliminate = ''top'';` |'
  id: totrans-135
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `eliminate = ''top'';` |'
- en: '| ​  | } |'
  id: totrans-136
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-137
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-138
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return` resumes[0]; |'
  id: totrans-139
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` resumes[0]; |'
- en: '| ​  | `}` |'
  id: totrans-140
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `}` |'
- en: Copyright © 2024, The Pragmatic Bookshelf.
  id: totrans-141
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 版权所有 © 2024, The Pragmatic Bookshelf.
