- en: '| Recipe 46 | Referencing a Matched String with the Backreference |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: '| 配方 46 | 使用反向引用引用匹配的字符串 |'
- en: Task
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务
- en: Suppose your task is to inspect documents for duplicate words, such as “the
    the book,” which is a common typographical mistake with texts subject to heavy
    editing. The task involves looking for repeated words despite capitalization differences
    like “This this.” It also requires finding instances with varying amounts of whitespace
    between the words, including tabs and newlines.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的任务是检查文档中的重复单词，比如“the the book”，这是编辑繁重的文本中常见的排版错误。这个任务涉及到寻找重复单词，尽管它们的大小写不同，例如“this
    this”。它还需要找到在单词之间有不同数量的空白字符的情况，包括制表符和换行符。
- en: You need to come up with a solution that will find all duplicate words and automatically
    fix them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要想出一个解决方案，能够找到所有重复的单词并自动修复它们。
- en: Solution
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Capture the word with a capturing group, and use a backreference to match the
    same text matched by the capturing group:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获带有捕获组的单词，并使用反向引用来匹配捕获组匹配的相同文本：
- en: '[part_2/backreference/backreference_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/backreference/backreference_ex1.js)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/backreference/backreference_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/backreference/backreference_ex1.js)'
- en: '|   | **function** dupWordRemover(str) { |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '|   | **function** dupWordRemover(str) { |'
- en: '|   | **const** re = */**\b([**-''**\w]**+**)\s**+**\1\b**/ig*; |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** re = */**\b([**-''**\w]**+**)\s**+**\1\b**/ig*; |'
- en: '|   | **return** str.replace(re, *"$1"*); |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '|   | **return** str.replace(re, *"$1"*); |'
- en: '|   | } |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '|   | } |'
- en: '|   |  |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | **const** str = *"No no man has a a good enough memory to be a successful
    liar."*; |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** str = *"没有没有人有足够好的记忆力能成为一个成功的骗子。"*; |'
- en: '|   |  |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | dupWordRemover(str) |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '|   | dupWordRemover(str) |'
- en: '|   | *// → "No man has a good enough memory to be a successful liar."* |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '|   | *// → "没有人有足够好的记忆力能成为一个成功的骗子。"* |'
- en: Problem solved! Your text is now free of most duplicate words.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 问题解决了！你的文本现在已经去除了大部分重复的单词。
- en: '| The Importance of Evaluating Repeated Words Before Elimination |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 在消除重复单词之前评估它们的重要性 |'
- en: '| --- |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| ![images/aside-icons/important.png](images/aside-icons/important.png) | Keep
    in mind that the usage of repeated words is not always a mistake and eliminating
    them without evaluation can be risky. For instance, “had had” is the past perfect
    form of “have,” and sometimes words like “ha ha” and other structures can produce
    intentionally repeated words. So, it makes sense to check out each match before
    getting rid of them.Also note that this recipe only detects duplicated words consisting
    of ASCII word characters. If you want to include accented letters and letters
    from different writing systems, you should use the Unicode Letter category (see
    Recipe 53, [*Matching Unicode Word Boundaries with the Unicode Property Escape*](f_0064.xhtml#rcp.unicode_property_escapes_p3)).
    |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| ![images/aside-icons/important.png](images/aside-icons/important.png) | 请记住，重复词语的使用并不总是错误的，在没有评估的情况下消除它们可能是有风险的。例如，“had
    had”是“have”的过去完成时形式，有时候像“ha ha”这样的词语和其他结构也会产生故意重复的词。因此，在去除重复词之前，最好检查每个匹配项。另外请注意，这个方法只检测由ASCII单词字符组成的重复词。如果你想包括带重音符号的字母以及来自不同书写系统的字母，应该使用Unicode字母类别（见第53条，[*使用Unicode属性转义匹配Unicode单词边界*](f_0064.xhtml#rcp.unicode_property_escapes_p3)）。
    |'
- en: Discussion
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论
- en: When there’s a capturing group in a pattern, the content inside the parentheses
    is bookmarked. A backreference provides a convenient way to reuse this content
    in the form of \1, \2, and so forth, where \1 refers to the first captured group,
    \2 refers to the second captured group, and so on.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当模式中有捕获组时，括号内的内容会被标记。回溯引用提供了一种便捷的方法，允许我们以\1、\2等形式重复使用这些内容，其中\1指代第一个捕获组，\2指代第二个捕获组，以此类推。
- en: 'This approach is not the same as just repeating a token or group with a quantifier.
    To illustrate this, let’s compare two simple regular expressions: \d{2} and (\d)\1.
    The first one uses a quantifier to match any two digits, while the second one
    uses a capturing group and backreference to match the same digit twice.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法与仅仅用量词重复一个标记或组不同。为了说明这一点，让我们对比两个简单的正则表达式：\d{2} 和 (\d)\1。第一个使用量词来匹配任意两个数字，而第二个则使用捕获组和回溯引用来匹配相同的数字两次。
- en: 'Now, let’s take a look at the regex step by step:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们一步步地来看正则表达式：
- en: '|   | /\b([-''\w]+)\s+\1\b/ig |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '|   | /\b([-''\w]+)\s+\1\b/ig |'
- en: '|   |  |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | ● \b asserts the position at a word boundary |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '|   | ● \b 确定单词边界的位置 |'
- en: '|   | ● ([-''\w]+) 1st capturing group |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '|   | ● ([-''\w]+) 第一个捕获组 |'
- en: '|   | ○ [-''\w] matches a single character present in the list below |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ [-''\w] 匹配列表中的单个字符 |'
- en: '|   | ○ - matches a - character literally |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ - 字面匹配一个 - 字符 |'
- en: '|   | ○ '' matches a '' character literally |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ '' 字面匹配一个 '' 字符 |'
- en: '|   | ○ \w matches any word character |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ \w 匹配任何单词字符 |'
- en: '|   | ○ + matches the previous token one or more times |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ + 匹配前一个标记一次或多次 |'
- en: '|   | ● \s matches any whitespace character |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '|   | ● \s 匹配任何空白字符 |'
- en: '|   | ○ + matches the previous token one or more times |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ + 匹配前一个标记一次或多次 |'
- en: '|   | ● \1 matches the same text matched by the 1st capturing group |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '|   | ● \1 匹配由第一个捕获组匹配的相同文本 |'
- en: '|   | ● \b asserts the position at a word boundary |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '|   | ● \b 表示单词边界的位置 |'
- en: '|   | ● Flags |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '|   | ● 标志 |'
- en: '|   | ○ i: enables case-insensitive matching |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ i: 启用不区分大小写的匹配 |'
- en: '|   | ○ g: enables global, which returns all matches |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ g: 启用全局匹配，返回所有匹配项 |'
- en: The regex in this recipe starts by matching a word boundary (\b). This ensures
    that we are only matching whole words. Then, we use a capturing group ([-’\w]+)
    to match one or more occurrences of any combination of letters, digits, underscores,
    hyphens, and apostrophes. It’s important to match hyphens and apostrophes because
    we want to be able to detect repeated words such as “check-in check-in” and “can’t
    can’t.”
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱中的正则表达式首先通过匹配单词边界 (\b) 来确保我们只匹配整个单词。接着，我们使用捕获组 ([-’\w]+) 来匹配一个或多个字母、数字、下划线、连字符和撇号的组合。匹配连字符和撇号很重要，因为我们希望能够检测到重复的单词，例如
    “check-in check-in” 和 “can’t can’t”。
- en: After capturing the first word, we use \s+ to match one or more whitespace characters
    (such as spaces and tabs) between the first and second occurrence of the captured
    group. Next, we use the backreference \1 to ensure that the second occurrence
    is the same as the first. The regex ends with another word boundary (\b).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获到第一个单词后，我们使用 \s+ 来匹配第一个和第二个捕获组之间的一个或多个空白字符（如空格和制表符）。接下来，我们使用反向引用 \1 来确保第二个出现的单词与第一个相同。正则表达式以另一个单词边界
    (\b) 结尾。
- en: To execute the regex, we use the replace() method. replace() takes the regex
    as its first argument, attempts to find a match in the given string, and replaces
    it with its second argument. In this case, the replacement value is $1, which
    is a special replacement pattern for referring to the first capturing group. The
    result is that the matched substring, which is “No no,” gets replaced with “No.”
    For more on special replacement patterns, see Recipe 34, [*Using Special Replacement
    Patterns*](f_0045.xhtml#rcp.replacement_patterns).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行正则表达式，我们使用 replace() 方法。replace() 将正则表达式作为第一个参数，尝试在给定的字符串中找到匹配项，并用第二个参数替换它。在这个例子中，替换值是
    $1，这是一个特殊的替换模式，用于引用第一个捕获组。结果是匹配的子字符串 “No no” 被替换为 “No”。有关特殊替换模式的更多信息，请参见食谱 34，[*使用特殊替换模式*](f_0045.xhtml#rcp.replacement_patterns)。
- en: 'We can use a backreference with a named capturing group, too—either with a
    regular numbered backreference or the \k<name> syntax. Let’s look at an example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用命名捕获组的反向引用——可以使用常规的编号反向引用或 \k<name> 语法。让我们来看一个例子：
- en: '[part_2/backreference/backreference_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/backreference/backreference_ex2.js)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/backreference/backreference_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/backreference/backreference_ex2.js)'
- en: '|   | **function** dupWordRemover(str) { |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '|   | **函数** dupWordRemover(str) { |'
- en: '|   | **const** re = */**\b(?<**dup>**[**-''**\w]**+**)\s**+**\k**<dup>**\b**/ig*;
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '|   | **常量** re = */**\b(?<**dup>**[**-''**\w]**+**)\s**+**\k**<dup>**\b**/ig*;
    |'
- en: '|   | **return** str.replace(re, *"$1"*); |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '|   | **返回** str.replace(re, *"$1"*); |'
- en: '|   | } |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '|   | } |'
- en: '|   |  |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | **const** str = *"No no man has a a good enough memory to be a successful
    liar."*; |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** str = *"没有没有人拥有足够好的记忆力，能够成为一个成功的骗子。"*; |'
- en: '|   |  |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | dupWordRemover(str) |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '|   | dupWordRemover(str) |'
- en: '|   | *// → "No man has a good enough memory to be a successful liar."* |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '|   | *// → "没有人拥有足够好的记忆力，能够成为一个成功的骗子。"* |'
- en: This code achieves the same result as the solution in this recipe, except that
    it uses a named capturing group (?<dup>[-’\w]+) and references the group with
    \k<dup>. For more on named capturing groups, see Recipe 33, [*Reading Groups with
    Ease Using Named Capturing Groups*](f_0044.xhtml#rcp.named_capturing_group).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码实现的结果与本食谱中的解决方案相同，唯一的不同是它使用了命名捕获组 (?<dup>[-’\w]+)，并通过 \k<dup> 引用该捕获组。有关命名捕获组的更多内容，请参见食谱
    33，[*使用命名捕获组轻松读取分组*](f_0044.xhtml#rcp.named_capturing_group)。
- en: One difference between JavaScript’s regular expression flavor and other flavors
    is the way it handles backreference. Unlike most flavors, JavaScript doesn’t distinguish
    between a backreference to a capturing group that matched nothing, and a backreference
    to a capturing group that didn’t participate in the match.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 的正则表达式和其他语言的正则表达式有一个区别，那就是它处理回溯引用（backreference）的方式。与大多数其他语言不同，JavaScript
    不区分回溯引用匹配到空字符串的捕获组和没有参与匹配的捕获组。
- en: 'Let me clarify with a simple example: the regex /(-?)cat\1/ matches the string
    “cat,” “-cat,” or “-cat-.” In JavaScript, this pattern is equivalent to /(-)?cat\1/.
    But that’s different from most other regex flavors.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我通过一个简单的例子来澄清：正则表达式 /(-?)cat\1/ 可以匹配字符串“cat”、“-cat”或“-cat-”。在 JavaScript 中，这个模式等同于
    /(-)?cat\1/。但这与大多数其他正则表达式的实现不同。
- en: Here’s how the regex engine in JavaScript processes /(-?)cat\1/ when applied
    to the string “cat.” First, the regex engine attempts to match a hyphen (-) literally,
    and it successfully matches nothing (recall that ? is a metacharacter that matches
    zero or one occurrence of the preceding character).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当 JavaScript 正则引擎处理 /(-?)cat\1/ 并应用于字符串“cat”时，它的处理过程是这样的：首先，正则引擎尝试字面匹配一个连字符
    (-)，并且成功匹配到空字符串（回想一下，? 是一个元字符，表示匹配前一个字符零次或一次）。
- en: 'The next character in the string is the letter c, and the engine successfully
    matches it. The engine also matches the next two characters: a and t. Finally,
    \1 successfully matches the same zero occurrences of - in the capturing group.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串中的下一个字符是字母 c，正则引擎成功地匹配了它。引擎还匹配了接下来的两个字符：a 和 t。最后，\1 成功匹配了捕获组中出现零次的 -。
- en: 'Now let’s look at the second pattern: /(-)?cat\1/. Here, the engine cannot
    match -, but since there is a question mark after the capturing group, it becomes
    optional, and the engine proceeds to match the literal characters. The regex \1
    refers to the capturing group that failed to match anything, resulting in a backreference
    that also fails to match.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看第二个模式： /(-)?cat\1/。在这里，引擎无法匹配 -，但由于捕获组后面有一个问号，它变成了可选项，因此引擎继续匹配字面字符。正则表达式
    \1 指向未能匹配任何内容的捕获组，导致回溯引用也无法匹配。
- en: There’s no question mark after the backreference to make it optional, so the
    overall match fails in most flavors. But JavaScript is different. In JavaScript,
    a backreference to a capturing group that did not participate in the match successfully
    matches nothing, causing the overall match to succeed.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 由于反向引用后没有问号使其变为可选，因此在大多数变种中，整体匹配会失败。但 JavaScript 是不同的。在 JavaScript 中，反向引用指向一个未参与匹配的捕获组时，反向引用会成功匹配到空字符串，从而使整体匹配成功。
- en: On one hand, it can be advantageous because you don’t need to worry about whether
    a particular capturing group participated in the match or not. On the other hand,
    this lack of distinction can cause your pattern to fail in other regex flavors.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一方面，这可以带来好处，因为你不需要担心某个特定的捕获组是否参与了匹配。另一方面，这种缺乏区分的做法可能导致你的模式在其他正则表达式变种中失败。
- en: '| Reusing a Backreference |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 复用反向引用 |'
- en: '| --- |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| ![images/aside-icons/info.png](images/aside-icons/info.png) | A backreference
    can be reused more than once. For example, (ha)\1\1 matches hahaha. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| ![images/aside-icons/info.png](images/aside-icons/info.png) | 反向引用可以被多次重用。例如，(ha)\1\1
    匹配 hahaha。 |'
- en: '| Forward References |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 前向引用 |'
- en: '| --- |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| ![images/aside-icons/warning.png](images/aside-icons/warning.png) | JavaScript
    doesn’t support forward references. A forward reference lets you reference a group
    that appears later in the regex. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| ![images/aside-icons/warning.png](images/aside-icons/warning.png) | JavaScript
    不支持前向引用。前向引用允许你引用正则表达式中稍后出现的组。 |'
- en: Take advantage of a backreference to refer to the exact text matched by a capturing
    group. You can reuse the content in the form of \1, \2, and so on, when using
    a normal capturing group. If you are using a named capturing group, you can also
    use the \k<name> syntax.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 利用反向引用来引用捕获组匹配的精确文本。当使用普通捕获组时，你可以以 \1、\2 等形式重用内容。如果使用命名捕获组，你也可以使用 \k<name> 语法。
