- en: Clothing Labels
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 服装标签
- en: Suppose we’re writing software for a clothing manufacturer. Our code accepts
    an array of newly produced clothing items (stored as strings) and creates text
    for every possible label we’ll need.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 假设我们正在为一家服装制造商编写软件。我们的代码接受一个新生产服装项的数组（以字符串形式存储），并为每个所需的标签生成文本。
- en: 'Specifically, our labels should contain the item name plus its size, ranging
    from 1 to 5. For example, if we have the array, `["Purple Shirt", "Green Shirt"]`,
    we want to produce label text for those shirts like this:'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 具体而言，我们的标签应包含物品名称及其尺寸，范围从1到5。例如，如果我们有数组`["紫色衬衫", "绿色衬衫"]`，我们希望为这些衬衫生成如下标签文本：
- en: '| ​  | [ |'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | [ |'
- en: '| ​  | `"Purple Shirt Size: 1",` |'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `"紫色衬衫 尺寸: 1",` |'
- en: '| ​  | `"Purple Shirt Size: 2",` |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `"紫色衬衫 尺寸: 2",` |'
- en: '| ​  | `"Purple Shirt Size: 3",` |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `"紫色衬衫 尺寸: 3",` |'
- en: '| ​  | `"Purple Shirt Size: 4",` |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `"紫色衬衫 尺寸: 4",` |'
- en: '| ​  | `"Purple Shirt Size: 5",` |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `"紫色衬衫 尺寸: 5",` |'
- en: '| ​  | `"Green Shirt Size: 1",` |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `"绿色衬衫 尺寸: 1",` |'
- en: '| ​  | `"Green Shirt Size: 2",` |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `"绿色衬衫 尺寸: 2",` |'
- en: '| ​  | `"Green Shirt Size: 3",` |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `"绿色衬衫 尺寸: 3",` |'
- en: '| ​  | `"Green Shirt Size: 4",` |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `"绿色衬衫 尺寸: 4",` |'
- en: '| ​  | `"Green Shirt Size: 5"` |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `"绿色衬衫 尺寸: 5"` |'
- en: '| ​  | ] |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ] |'
- en: 'Here’s code that will create this text for an entire array of clothing items:'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是用于为整个服装项数组创建文本的代码：
- en: '| ​  | `**function** markInventory(clothingItems) {` |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `**函数** markInventory(clothingItems) {` |'
- en: '| ​  | `**const** clothingOptions = [];` |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `**常量** clothingOptions = [];` |'
- en: '| ​  |  |'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `**for** (**const** item **of** clothingItems) {` |'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `**对于** (**常量** item **在** clothingItems中) {` |'
- en: '| ​  | `**for** (**let** size = 1; size < 6; size += 1) {` |'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `**对于** (**让** size = 1; size < 6; size += 1) {` |'
- en: '| ​  | `clothingOptions.push(${item} *Size:* ${size});` |'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `clothingOptions.push(${item} *尺寸:* ${size});` |'
- en: '| ​  | } |'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `**return** clothingOptions;` |'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `**返回** clothingOptions;` |'
- en: '| ​  | } |'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: Let’s determine this algorithm’s efficiency. The `clothingItems` are the primary
    data being processed, so `N` is the size of the array, `clothingItems`.
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们来确定这个算法的效率。`clothingItems`是正在处理的主要数据，因此`N`是数组`clothingItems`的大小。
- en: This code contains nested loops, so it’s tempting to declare this algorithm
    to be `O(N²)`. However, we need to analyze this case a little more carefully.
    While code containing nested loops often is `O(N²)`, in this case it’s not.
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这段代码包含嵌套循环，因此很容易将该算法的复杂度声明为`O(N²)`。然而，我们需要更仔细地分析这个情况。虽然包含嵌套循环的代码通常是`O(N²)`，但在这种情况下并非如此。
- en: Nested loops that result in `O(N²)` occur when each loop revolves around `N`.
    In our case, however, while our outer loop runs `N` times, our inner loop runs
    a constant five times; that is, this inner loop will always run five times no
    matter what `N` is.
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当每个循环都围绕`N`时，会产生`O(N²)`的嵌套循环。然而，在我们的例子中，虽然外层循环运行`N`次，内层循环始终运行固定的五次；也就是说，无论`N`是多少，这个内层循环始终会运行五次。
- en: So while our outer loop runs `N` times, the inner loop runs five times for each
    of the `N` strings. This means our algorithm runs `5N` times, but this is reduced
    to `O(N)` since Big O notation ignores constants.
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因此，虽然外层循环运行`N`次，但内层循环对每个`N`字符串运行五次。这意味着我们的算法运行了`5N`次，但由于大O符号忽略常数，这可以简化为`O(N)`。
