- en: 'Chapter 5: JavaScript Arrays'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章：JavaScript 数组
- en: In Chapter 4, we explored JavaScript functions, which allow us to organize code
    into reusable blocks. Now, let's dive into JavaScript arrays, a powerful data
    structure that enables us to store and manipulate collections of elements.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在第4章中，我们探讨了 JavaScript 函数，它们允许我们将代码组织成可重用的代码块。现在，让我们深入了解 JavaScript 数组，这是一种强大的数据结构，能够让我们存储和操作元素集合。
- en: 5.1 Introduction to Arrays
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.1 数组简介
- en: An array in JavaScript is a data structure that allows us to store multiple
    values in a single variable. Arrays are ordered, indexed collections, where each
    value is assigned a unique index starting from 0\. Arrays can contain elements
    of any data type, such as numbers, strings, objects, or even other arrays. They
    provide various methods and properties for performing operations on the stored
    data efficiently.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，数组是一种数据结构，允许我们在单个变量中存储多个值。数组是有序的、索引化的集合，每个值都被分配一个从 0 开始的唯一索引。数组可以包含任何数据类型的元素，例如数字、字符串、对象，甚至其他数组。它们提供了各种方法和属性，可以高效地对存储的数据进行操作。
- en: 5.2 Creating Arrays
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.2 创建数组
- en: 'There are two common ways to create arrays in JavaScript: using array literals
    and the `Array` constructor.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中有两种常见的创建数组的方式：使用数组字面量和`Array`构造函数。
- en: 5.2.1 Array Literals
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.2.1 数组字面量
- en: 'Array literals are the simplest and most commonly used way to create arrays.
    They involve enclosing a comma-separated list of values inside square brackets
    `[]`. Here''s an example:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 数组字面量是创建数组最简单和最常用的方式。它们通过将以逗号分隔的值列表放在方括号`[]`内来实现。以下是一个示例：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this example, we create an array called `fruits` with three elements: `''apple''`,
    `''banana''`, and `''orange''`.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们创建了一个名为`fruits`的数组，包含三个元素：`'apple'`、`'banana'` 和 `'orange'`。
- en: 5.2.2 Using the Array Constructor
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.2.2 使用 Array 构造函数
- en: 'JavaScript also provides the `Array` constructor to create arrays. We can use
    the `new` keyword followed by `Array()` to create an empty array or pass values
    inside the parentheses to initialize the array with specific elements. Here are
    a few examples:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 还提供了`Array`构造函数来创建数组。我们可以使用`new`关键字后跟`Array()`来创建一个空数组，或者将值传递到括号内，用以初始化数组中的特定元素。以下是一些示例：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the first example, we create an empty array called `emptyArray`. In the
    second example, we create an array called `numbers` with five elements: `1`, `2`,
    `3`, `4`, and `5`.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个示例中，我们创建了一个名为`emptyArray`的空数组。在第二个示例中，我们创建了一个名为`numbers`的数组，包含五个元素：`1`、`2`、`3`、`4`
    和 `5`。
- en: 5.3 Accessing Array Elements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.3 访问数组元素
- en: 'We can access individual elements in an array using their index. The index
    starts from `0` for the first element and increments by `1` for each subsequent
    element. We use square brackets `[]` and specify the index inside them. Here''s
    an example:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过索引来访问数组中的单个元素。索引从`0`开始，表示第一个元素，每个后续元素的索引依次递增`1`。我们使用方括号`[]`并在其中指定索引。以下是一个示例：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, we access and print the elements of the `fruits` array by their
    respective indices.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们通过各自的索引访问并打印`fruits`数组中的元素。
- en: 5.4 Modifying Array Elements
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.4 修改数组元素
- en: 'Arrays in JavaScript are mutable, meaning we can modify their elements after
    they are created. We can assign new values to specific indices using the assignment
    operator `=`. Here''s an example:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的数组是可变的，这意味着我们可以在创建数组后修改其元素。我们可以使用赋值运算符`=`将新值赋给特定的索引。下面是一个例子：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example, we modify the element at index `1` of the `fruits` array and
    change it from `'banana'` to `'grape'`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们修改`fruits`数组中索引`1`的元素，将其从`'banana'`改为`'grape'`。
- en: 5.5 Array Length
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.5 数组长度
- en: 'The `length` property of an array allows us to determine the number of elements
    it contains. We can access this property using dot notation (`array.length`).
    Here''s an example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的`length`属性允许我们确定它包含的元素数量。我们可以通过点表示法（`array.length`）访问此属性。下面是一个例子：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this example, we retrieve and print the length of the `fruits` array, which
    is `3`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们获取并打印`fruits`数组的长度，它是`3`。
- en: 5.6 Array Methods
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.6 数组方法
- en: 'JavaScript provides a wide range of built in array methods that allow us to
    perform various operations on arrays efficiently. Let''s explore some commonly
    used array methods:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript提供了多种内建的数组方法，可以让我们高效地对数组执行各种操作。让我们来探索一些常用的数组方法：
- en: 5.6.1 `push()` and `pop()`
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.6.1 `push()`和`pop()`
- en: 'The `push()` method adds one or more elements to the end of an array, while
    the `pop()` method removes the last element from an array and returns it. Here''s
    an example:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`push()`方法将一个或多个元素添加到数组的末尾，而`pop()`方法移除数组的最后一个元素并返回它。下面是一个例子：'
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this example, we use `push()` to add the element `'grape'` to the end of
    the `fruits` array. Then, we use `pop()` to remove the last element `'grape'`
    and store it in the `removedFruit` variable.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用`push()`将元素`'grape'`添加到`fruits`数组的末尾，然后使用`pop()`移除最后一个元素`'grape'`并将其存储在`removedFruit`变量中。
- en: 5.6.2 `shift()` and `unshift()`
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.6.2 `shift()`和`unshift()`
- en: 'The `shift()` method removes the first element from an array and returns it,
    while the `unshift()` method adds one or more elements to the beginning of an
    array. Here''s an example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`shift()`方法移除数组中的第一个元素并返回它，而`unshift()`方法将一个或多个元素添加到数组的开头。下面是一个例子：'
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this example, we use `shift()` to remove the first element `'apple'` from
    the `fruits` array. Then, we use `unshift()` to add the elements `'grape'` and
    `'kiwi'` to the beginning of the array.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用`shift()`移除`fruits`数组中的第一个元素`'apple'`，然后使用`unshift()`将元素`'grape'`和`'kiwi'`添加到数组的开头。
- en: 5.6.3 `slice()`
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.6.3 `slice()`
- en: 'The `slice()` method extracts a portion of an array and returns a new array
    containing the selected elements. It takes two parameters: the starting index
    (inclusive) and the ending index (exclusive). Here''s an example:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`slice()`方法提取数组的一部分并返回一个包含选定元素的新数组。它接受两个参数：起始索引（包含）和结束索引（不包含）。下面是一个例子：'
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this example, we use `slice(1, 4)` to extract elements from index `1` (inclusive)
    to index `4` (exclusive) from the `fruits` array.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用`slice(1, 4)`从`fruits`数组中提取从索引`1`（包含）到索引`4`（不包含）之间的元素。
- en: 5.6.4 `concat()`
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.6.4 `concat()`
- en: 'The `concat()` method combines two or more arrays and returns a new array.
    It does not modify the original arrays. Here''s an example:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`concat()` 方法将两个或多个数组合并，并返回一个新的数组。它不会修改原始数组。以下是一个示例：'
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this example, we use `concat()` to combine the `fruits` array with the `moreFruits`
    array and store the result in the `combinedFruits` variable.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用 `concat()` 方法将 `fruits` 数组与 `moreFruits` 数组合并，并将结果存储在 `combinedFruits`
    变量中。
- en: 5.7 Conclusion
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 5.7 结论
- en: In this chapter, we explored JavaScript arrays, a powerful data structure that
    allows us to store and manipulate collections of elements. We learned about creating
    arrays using array literals and the `Array` constructor, accessing and modifying
    array elements, retrieving the length of an array, and using various array methods
    like `push()`, `pop and `slice()`. Arrays provide a flexible and efficient way
    to work with collections of data in JavaScript.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 JavaScript 数组，这是一种强大的数据结构，可以让我们存储和操作元素集合。我们学习了如何使用数组字面量和 `Array`
    构造函数创建数组，如何访问和修改数组元素，如何获取数组的长度，以及如何使用各种数组方法，如 `push()`、`pop()` 和 `slice()`。数组提供了一种灵活且高效的方式来处理
    JavaScript 中的数据集合。
- en: In the next chapter, we will delve into JavaScript objects, another important
    concept in the language. Objects allow us to represent complex data structures
    and organize related data into key-value pairs. Get ready to explore the world
    of JavaScript objects and unlock their full potential!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨 JavaScript 对象，这是该语言中的另一个重要概念。对象让我们能够表示复杂的数据结构，并将相关数据组织成键值对。准备好探索
    JavaScript 对象的世界，解锁它们的全部潜力吧！
