- en: '`Chapter 8`'
  id: totrans-0
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: '`第8章`'
- en: '`Blazing Fast Lookup with Hash Tables`'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`快速查找哈希表`'
- en: 'Imagine you’re writing a program that allows customers to order fast food from
    a restaurant, and you’re implementing a menu of foods with their respective prices.
    You could, technically, use an `array`:'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 想象一下，你正在编写一个程序，允许顾客从餐厅订购快餐，并且你正在实现一个包含各类食物及其相应价格的菜单。从技术上讲，你可以使用一个 `array`：
- en: '| ​  | `menu = [` |'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `menu = [` |'
- en: '| ​  | [`"french fries"`, 0.75], |'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | [`"薯条"`, 0.75], |'
- en: '| ​  | [`"hamburger"`, 2.5], |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | [`"汉堡"`, 2.5], |'
- en: '| ​  | [`"hot dog"`, 1.5], |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | [`"热狗"`, 1.5], |'
- en: '| ​  | [`"soda"`, 0.6] |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | [`"汽水"`, 0.6] |'
- en: '| ​  | ] |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ] |'
- en: This `array` contains several subarrays, and each subarray contains two elements.
    The first element is a string representing the food on the menu, and the second
    element represents the price of that food.
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这个 `array` 包含几个子数组，每个子数组包含两个元素。第一个元素是一个字符串，代表菜单上的食物，第二个元素代表该食物的价格。
- en: As you learned in Chapter 2, [`Why Algorithms Matter`](f_0024.xhtml#chp.binary_search),
    if this `array` were unordered, searching for the price of a given food would
    take `O(N)` steps since the computer would have to perform a linear search. If
    it’s an ordered `array`, the computer could do a binary search, which would take
    `O(log N)`.
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 正如你在第2章中学到的，[`算法为何重要`](f_0024.xhtml#chp.binary_search)，如果这个 `array` 是无序的，查找给定食物的价格将需要
    `O(N)` 步，因为计算机必须进行线性搜索。如果它是一个有序的 `array`，计算机可以进行二分搜索，这将需要 `O(log N)`。
- en: While `O(log N)` isn’t bad, we can do better. In fact, we can do much better.
    By the end of this chapter, you’ll learn how to use a special data structure called
    a `hash table`, which can be used to look up data in just `O(1)` time. By knowing
    how `hash tables` work under the hood and the right places to use them, you can
    leverage their tremendous lookup speeds in many situations.
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 虽然 `O(log N)` 还不错，但我们可以做得更好。实际上，我们可以做得更好。在本章结束时，你将学习如何使用一种称为 `哈希表` 的特殊数据结构，它可以在
    `O(1)` 时间内查找数据。通过了解 `哈希表` 的底层工作原理和正确的使用场景，你可以在许多情况下利用它们的惊人查找速度。
