- en: Chapter 9
  id: totrans-0
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 第 9 章
- en: Asynchronous Programming
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 异步编程
- en: 'We''re about to dive into one of the most powerful and practical aspects of
    modern web development: interacting with APIs and making AJAX requests。These concepts
    are essential for creating dynamic, interactive applications that can communicate
    with servers to send and receive data in real time。We will explore the concepts
    of APIs and AJAX, learn how to perform AJAX requests and understand how to consume
    `RESTful APIs` efficiently。'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们即将深入现代 web 开发中最强大和实用的方面之一：与 API 互动和发起 AJAX 请求。这些概念对于创建动态、交互式应用程序至关重要，这些应用程序可以与服务器通信以实时发送和接收数据。我们将探讨
    API 和 AJAX 的概念，学习如何执行 AJAX 请求，并理解如何高效地消费 `RESTful API`。
- en: API and AJAX concepts
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: API 和 AJAX 概念
- en: APIs (`Application Programming Interfaces`) are sets of rules and definitions
    that allow different software systems to communicate with each other。An API defines
    the methods and data that an application can use to connect to a service or other
    software。There are different types of APIs, but one of the most common and widely
    used are `RESTful APIs`。
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: API（`应用程序编程接口`）是一组规则和定义，允许不同的软件系统相互通信。API 定义了应用程序可以用来连接服务或其他软件的方法和数据。API 有不同类型，但最常见和广泛使用的是
    `RESTful API`。
- en: '`AJAX` (`Asynchronous JavaScript and XML`) is a technique that allows asynchronous
    communication between the browser and the server without reloading the page。这使得用户体验更流畅和响应，因为页面的部分可以动态更新。'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`AJAX`（`异步 JavaScript 和 XML`）是一种允许浏览器与服务器之间进行异步通信而无需重新加载页面的技术。这使得用户体验更加流畅和响应，因为页面的部分可以动态更新。'
- en: Making AJAX requests
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 发起 AJAX 请求
- en: Let's start by learning how to perform AJAX requests using pure JavaScript。One
    of the oldest ways to do this is using the `XMLHttpRequest` object。
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们开始学习如何使用纯 JavaScript 执行 AJAX 请求。最古老的方法之一是使用 `XMLHttpRequest` 对象。
- en: 'Example of AJAX request with `XMLHttpRequest`:'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 使用 `XMLHttpRequest` 的 AJAX 请求示例：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, we create a new instance of `XMLHttpRequest`，configure the
    request with `open` and send it with `send`。We use the `onload` and `onerror`
    events to handle the request response and possible errors。
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个示例中，我们创建一个新的 `XMLHttpRequest` 实例，使用 `open` 配置请求，并使用 `send` 发送请求。我们使用 `onload`
    和 `onerror` 事件来处理请求响应和可能的错误。
- en: With the advancement of the language, the `Fetch API` emerged, which offers
    a more modern and simplified way of making AJAX requests。
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 随着语言的发展，`Fetch API` 应运而生，它提供了一种更现代和简化的 AJAX 请求方式。
- en: 'Example of AJAX request with `Fetch`:'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 使用 `Fetch` 的 AJAX 请求示例：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`Fetch` simplifies syntax, making code more readable and easier to understand。It
    returns a promise that can be manipulated with `then` and `catch` to handle the
    response and errors respectively。'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Fetch` 简化了语法，使代码更具可读性和易于理解。它返回一个 promise，可以使用 `then` 和 `catch` 分别处理响应和错误。'
- en: Consumption of `RESTful APIs`
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 消费 `RESTful API`
- en: '`RESTful` (`Representational State Transfer`) APIs are an architectural style
    for creating web services。They use standard HTTP methods (`GET`, `POST`, `PUT`,
    `DELETE`) to perform CRUD (`Create`, `Read`, `Update`, `Delete`) operations。'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`RESTful`（`表现层状态转移`）API 是创建 Web 服务的一种架构风格。它们使用标准的 HTTP 方法（`GET`、`POST`、`PUT`、`DELETE`）来执行
    CRUD（`创建`、`读取`、`更新`、`删除`）操作。'
- en: Let's explore how to consume a `RESTful API` using `Fetch`，covering the most
    common operations。
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们探索如何使用 `Fetch` 消费 `RESTful API`，涵盖最常见的操作。
- en: '`GET`:  Recover data'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`GET`：获取数据'
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`POST`:  Send data'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`POST`：发送数据'
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`PUT`: Update data'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`PUT`：更新数据'
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`DELETE`:  Remove data'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`DELETE`：删除数据'
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Error handling
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 错误处理
- en: When consuming APIs, it is important to handle errors effectively to ensure
    that the application can handle network issues or unexpected server responses。
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在消费 API 时，有效处理错误是很重要的，以确保应用程序能够处理网络问题或意外的服务器响应。
- en: 'Error handling with `Fetch`:'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 使用 `Fetch` 的错误处理：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this example, we use a `try/catch` block to capture and handle errors during
    the request and data processing。This allows the application to gracefully handle
    errors and provide feedback to the user。
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用 `try/catch` 块来捕获和处理请求及数据处理中的错误。这使得应用程序能够优雅地处理错误并向用户提供反馈。
- en: 在本章中，我们探索API和AJAX的概念，学习如何使用`XMLHttpRequest`和`Fetch`执行AJAX请求，并理解如何高效地消费RESTful
    APIs。这些知识对于开发现代和动态的Web应用程序至关重要，这些应用程序依赖于与服务器的持续通信以发送和接收数据。随着你继续你的Web开发旅程，掌握与API的交互和处理AJAX请求将对创建丰富、响应迅速的用户体验至关重要。继续练习并应用这些概念，成为JavaScript网页编程艺术的高手。
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在本章中，我们探索 API 和 AJAX 的概念，学习如何使用 `XMLHttpRequest` 和 `Fetch` 执行 AJAX 请求，并理解如何高效地消费
    RESTful API。这些知识对于开发现代和动态的 Web 应用程序至关重要，这些应用程序依赖于与服务器的持续通信以发送和接收数据。随着你继续你的 Web
    开发旅程，掌握与 API 的交互和处理 AJAX 请求将对创建丰富、响应迅速的用户体验至关重要。继续练习并应用这些概念，成为 JavaScript 网页编程艺术的高手。
