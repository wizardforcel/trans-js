- en: Reading
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 读取
- en: The first operation we’ll look at is reading, which looks up what value is contained
    at a particular index inside the array.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们要看的第一个操作是读取，这会查找数组中某个特定索引所包含的值。
- en: A computer can read from an array in just one step. This is because the computer
    has the ability to immediately access any particular index in the array and peer
    inside. In our example of `["apples", "bananas", "cucumbers", "dates", "elderberries"]`,
    if we looked up index `2`, the computer would jump right to index `2` and report
    that it contains the value `"cucumbers"`.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 计算机可以在一步之内读取数组中的内容。这是因为计算机能够立即访问数组中的任何特定索引并查看内容。在我们的示例`["apples", "bananas",
    "cucumbers", "dates", "elderberries"]`中，如果我们查找索引`2`，计算机会直接跳到索引`2`并报告该索引包含值`"cucumbers"`。
- en: How is the computer able to look up an array’s index in just one step? Let’s
    see how.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 计算机是如何在一步之内查找数组的索引的呢？让我们来看一下。
- en: 'A computer’s memory can be viewed as a giant collection of cells. In the following
    diagram, you can see a grid of cells in which some are empty and some contain
    bits of data:'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 计算机的内存可以被视为一个巨大的单元集合。在下图中，你可以看到一个单元格的网格，其中一些是空的，有些则包含数据位：
- en: '![`images/understanding_arrays/array_2.png`](images/understanding_arrays/array_2.png)'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/understanding_arrays/array_2.png`](images/understanding_arrays/array_2.png)'
- en: While this visual is a simplification of how computer memory works under the
    hood, it represents the essential idea.
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 虽然这个图示简化了计算机内存的工作原理，但它传达了基本思想。
- en: 'When a program declares an array, it allocates a contiguous set of empty cells
    for use in the program. So if you were creating an array meant to hold five elements,
    your computer would find a group of five empty cells in a row and designate it
    to serve as your array:'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当程序声明一个数组时，它为程序分配了一组连续的空单元。因此，如果你创建一个用于存储五个元素的数组，计算机会找到一排五个连续的空单元，并将其指定为你的数组：
- en: '![`images/understanding_arrays/array_3.png`](images/understanding_arrays/array_3.png)'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/understanding_arrays/array_3.png`](images/understanding_arrays/array_3.png)'
- en: 'Now, every cell in a computer’s memory has a specific address. It’s sort of
    like a street address (for example, `123 Main St.`), except that it’s represented
    with a number. Each cell’s memory address is one number greater than the previous
    cell’s address. Here’s a visual that shows each cell’s memory address:'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，计算机内存中的每个单元都有一个特定地址。这有点像街道地址（例如，`123 Main St.`），不过它用一个数字来表示。每个单元的内存地址比前一个单元的地址大一。下面是一个展示每个单元内存地址的图示：
- en: '![`images/understanding_arrays/array_4.png`](images/understanding_arrays/array_4.png)'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/understanding_arrays/array_4.png`](images/understanding_arrays/array_4.png)'
- en: 'In the next diagram, you can see our shopping list array with its indexes and
    memory addresses:'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在下一个图示中，你可以看到我们的购物清单数组及其索引和内存地址：
- en: '![`images/understanding_arrays/array_5.png`](images/understanding_arrays/array_5.png)'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/understanding_arrays/array_5.png`](images/understanding_arrays/array_5.png)'
- en: 'When the computer reads a value at a particular index of an array, it can jump
    straight to that index because of the combination of the following facts about
    computers:'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当计算机读取数组中特定索引的值时，它能够直接跳到该索引，这是因为计算机关于以下事实的结合：
- en: A computer can access any memory address in one step. For example, if you asked
    a computer to inspect whatever’s at memory address `1063`, it can immediately
    access that without having to perform any search process. As an analogy, if I
    ask you to raise your right pinky finger, you wouldn’t have to search all your
    fingers to find which one is your right pinky. You’d be able to identify it immediately.
  id: totrans-14
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 计算机可以在一步之内访问任何内存地址。例如，如果你要求计算机检查内存地址`1063`中的内容，它可以立即访问而无需执行任何搜索过程。打个比方，如果我让你抬起右手的小指，你不需要搜索所有手指来找到哪个是你的右手小指。你能够立即识别它。
- en: Whenever a computer allocates an array, it also makes note at which memory address
    the array begins. So if we asked the computer to find the first element of the
    array, it would be able to instantly access the appropriate memory address to
    find it.
  id: totrans-15
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 每当计算机分配一个数组时，它也会记录数组开始的内存地址。因此，如果我们让计算机找到数组的第一个元素，它能够立即访问适当的内存地址来找到它。
- en: Now，these facts explain how the computer can find the first value of an array
    in a single step. However，a computer can also find the value at any index by performing
    simple addition. If we asked the computer to find the value at index `3`，the computer
    would simply take the memory address at index `0` and add `3`。 (Memory addresses
    are sequential，after all。)
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，这些事实解释了计算机如何在一步之内找到数组的第一个值。然而，计算机也可以通过简单的加法找到任何索引处的值。如果我们要求计算机找到索引 `3` 中的值，计算机只需取索引
    `0` 的内存地址并加上 `3`。（毕竟，内存地址是连续的。）
- en: 'Let’s apply this to our grocery list array. Our example array begins at memory
    address `1010`。 So, if we told the computer to read the value at index `3`，the
    computer would go through the following thought process:'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们将这一点应用于我们的购物清单数组。我们的示例数组起始于内存地址 `1010`。因此，如果我们告诉计算机读取索引 `3` 中的值，计算机将经历以下思维过程：
- en: The array begins with index `0`，which is at memory address `1010`。
  id: totrans-18
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 数组从索引 `0` 开始，该索引位于内存地址 `1010`。
- en: Index `3` will be exactly three slots past index `0`。
  id: totrans-19
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 索引 `3` 恰好位于索引 `0` 之后的三个位置。
- en: By logical extension，index `3` would be located at memory address `1013`，since
    `1010 + 3` is `1013`。
  id: totrans-20
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 逻辑推理可以得出，索引 `3` 位于内存地址 `1013`，因为 `1010 + 3` 等于 `1013`。
- en: Once the computer knows that index `3` is at memory address `1013`，it can jump
    right there and see that it contains the value `"dates"`。
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 一旦计算机知道索引 `3` 位于内存地址 `1013`，它就可以直接跳转到那里，并查看该位置包含的值为 `"dates"`。
- en: Reading from an array is, therefore, an efficient operation，since the computer
    can read any index by jumping to any memory address in one step. Although I described
    the computer’s thought process by breaking it down into three parts，we are currently
    focusing on the main step of the computer jumping to a memory address. (In later
    chapters，we’ll explore how to know which steps are the ones worth focusing on.)
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因此，从数组中读取数据是一种高效的操作，因为计算机可以通过一步跳转到任何内存地址来读取任何索引。尽管我通过将计算机的思维过程分解为三个部分进行了描述，但我们目前关注的是计算机跳转到内存地址的主要步骤。（在后面的章节中，我们将探讨如何判断哪些步骤值得关注。）
- en: Naturally，an operation that takes just one step is the fastest type of operation.
    Besides being a foundational data structure，arrays are also a very powerful data
    structure because we can read from them with such speed.
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 自然，一个只需一步的操作是最快的操作类型。除了作为基础数据结构之外，数组还是一种非常强大的数据结构，因为我们可以以如此快速的速度从中读取数据。
- en: Now，what if instead of asking the computer what value is contained at index
    `3`，we flipped the question around and asked at what index `"dates"` can be found?
    That’s the search operation，and we’ll explore that next。
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，如果我们不是询问计算机索引 `3` 中包含的值，而是反过来询问 `"dates"` 可以在什么索引找到呢？这就是搜索操作，我们将接下来探讨这个问题。
