- en: 'Chapter 8: JavaScript AJAX and Fetch API'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章：JavaScript AJAX 和 Fetch API
- en: In Chapter 7, we delved into JavaScript events and event handling, which enabled
    us to create dynamic and interactive web applications. Now, let's explore AJAX
    (Asynchronous JavaScript and XML) and the Fetch API, powerful tools that allow
    us to communicate with servers and retrieve data without reloading the entire
    web page.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在第7章中，我们深入研究了 JavaScript 事件和事件处理，这使我们能够创建动态和互动的 Web 应用。现在，让我们来探讨 AJAX（异步 JavaScript
    和 XML）以及 Fetch API，这些强大的工具使我们能够与服务器进行通信并获取数据，而无需重新加载整个网页。
- en: 8.1 Introduction to AJAX
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.1 AJAX 介绍
- en: AJAX is a technique that enables web applications to send and receive data asynchronously
    in the background. With AJAX, we can update parts of a web page without requiring
    a full page reload, resulting in a smoother and more responsive user experience.
    AJAX allows us to interact with servers and retrieve data using JavaScript.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: AJAX 是一种技术，使得 Web 应用能够在后台异步发送和接收数据。通过 AJAX，我们可以在无需重新加载整个页面的情况下更新网页的部分内容，从而提供更加流畅和响应迅速的用户体验。AJAX
    使我们能够通过 JavaScript 与服务器进行交互并获取数据。
- en: 8.2 XMLHttpRequest Object
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.2 XMLHttpRequest 对象
- en: 'The XMLHttpRequest object is the core component of AJAX. It provides methods
    and properties to send HTTP requests to a server and handle the server''s response.
    Let''s look at an example:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: XMLHttpRequest 对象是 AJAX 的核心组件。它提供了发送 HTTP 请求到服务器并处理服务器响应的方法和属性。下面是一个例子：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, we create an XMLHttpRequest object using the `new XMLHttpRequest()`
    constructor. We then use the `open()` method to specify the HTTP method ("GET"
    in this case) and the URL of the server endpoint we want to retrieve data from.
    The third parameter (`true`) indicates that the request should be asynchronous.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用 `new XMLHttpRequest()` 构造函数创建一个 XMLHttpRequest 对象。然后我们使用 `open()`
    方法指定 HTTP 方法（在此例中为 "GET"）以及我们希望从中获取数据的服务器端点的 URL。第三个参数（`true`）表示请求应为异步请求。
- en: We assign an anonymous function to the `onreadystatechange` event handler. This
    function is executed when the state of the request changes. Inside the function,
    we check if the `readyState` property is equal to 4 (indicating that the request
    is complete) and the `status` property is equal to 200 (indicating a successful
    response). If the conditions are met, we parse the response text as JSON and log
    it to the console.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将一个匿名函数赋值给 `onreadystatechange` 事件处理器。当请求的状态发生变化时，该函数会被执行。在函数内部，我们检查 `readyState`
    属性是否等于 4（表示请求已完成），并且 `status` 属性是否等于 200（表示响应成功）。如果条件满足，我们将响应文本解析为 JSON 并打印到控制台。
- en: Finally, we call the `send()` method to send the request to the server.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们调用 `send()` 方法将请求发送到服务器。
- en: 8.3 Fetch API
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.3 Fetch API
- en: 'The Fetch API is a modern alternative to the XMLHttpRequest object for making
    HTTP requests. It provides a more streamlined and intuitive interface for sending
    and handling requests. Here''s an example:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Fetch API 是 XMLHttpRequest 对象的现代替代方案，用于发起 HTTP 请求。它提供了一个更简洁和直观的接口来发送和处理请求。下面是一个例子：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, we use the `fetch()` function to send a GET request to the
    specified URL. The `fetch()` function returns a Promise that resolves to the response
    from the server.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用`fetch()`函数发送一个 GET 请求到指定的 URL。`fetch()`函数返回一个 Promise，该 Promise
    会解析为来自服务器的响应。
- en: We chain the Promise using the `then()` method. In the first `then()` callback,
    we check if the response is successful (`response.ok`). If it is, we call the
    `json()` method on the response object to parse the response data as JSON. If
    there is an error, we throw a new Error object with the corresponding status.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`then()`方法链式调用 Promise。在第一个`then()`回调中，我们检查响应是否成功（`response.ok`）。如果成功，我们调用响应对象的`json()`方法将响应数据解析为
    JSON。如果发生错误，我们抛出一个新的 Error 对象，包含相应的状态。
- en: In the second `then()` callback, we receive the parsed data and log it to the
    console.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个`then()`回调中，我们接收到解析后的数据并将其记录到控制台。
- en: The `catch()` method is used to handle any errors that may occur during the
    Promise chain.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`catch()`方法用于处理在 Promise 链中可能发生的任何错误。'
- en: 8.4 Working with Response Data
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.4 处理响应数据
- en: Once we have retrieved data from the server, we can work with it in our JavaScript
    code. This may involve manipulating the data, updating the web page, or performing
    other operations based on the retrieved information.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们从服务器获取了数据，就可以在我们的 JavaScript 代码中处理这些数据。这可能涉及到对数据的操作、更新网页，或根据获取的信息执行其他操作。
- en: 8.5 Cross-Origin Resource Sharing (CORS)
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.5 跨域资源共享（CORS）
- en: When making AJAX requests to a different domain, we may encounter CORS restrictions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当向不同域发送 AJAX 请求时，我们可能会遇到 CORS 限制。
- en: Cross-Origin Resource Sharing (CORS) is a security mechanism implemented in
    web browsers to restrict AJAX requests made from one domain to another. By default,
    web browsers enforce the same-origin policy, which prevents JavaScript code from
    making requests to a different domain. CORS allows servers to specify which domains
    are allowed to access their resources.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 跨域资源共享（CORS）是一个在 Web 浏览器中实现的安全机制，用于限制从一个域到另一个域的 AJAX 请求。默认情况下，浏览器强制执行同源策略，阻止
    JavaScript 代码向不同的域发起请求。CORS 允许服务器指定哪些域可以访问其资源。
- en: To enable CORS, the server needs to respond with the appropriate CORS headers
    in the server's HTTP response. The headers include information such as the allowed
    origin, allowed methods, and allowed headers.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启用 CORS，服务器需要在 HTTP 响应中返回适当的 CORS 头部。这些头部包括允许的来源、允许的方法和允许的头部等信息。
- en: 'If you encounter CORS restrictions while making AJAX requests, there are a
    few possible solutions:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在发起 AJAX 请求时遇到 CORS 限制，以下是一些可能的解决方案：
- en: '1\. CORS Configuration on the Server: If you have control over the server,
    you can configure it to include the necessary CORS headers in the responses. This
    allows specific domains to access the server''s resources.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 服务器上的 CORS 配置：如果你有服务器的控制权限，可以配置服务器以在响应中包含必要的 CORS 头部。这允许特定的域名访问服务器的资源。
- en: '2\. Proxy Server: You can set up a proxy server on your domain that acts as
    an intermediary between your JavaScript code and the remote server. The proxy
    server can make the request on behalf of your code, bypassing the CORS restrictions.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 代理服务器：你可以在你的域上设置一个代理服务器，作为你的 JavaScript 代码和远程服务器之间的中介。代理服务器可以代表你的代码发出请求，绕过
    CORS 限制。
- en: '3\. JSONP (JSON with Padding): JSONP is a technique that allows cross-domain
    requests by exploiting the ability to include scripts from different domains.
    It involves wrapping the response data in a function call and loading it as a
    script in the browser.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. JSONP（带填充的 JSON）：JSONP 是一种通过利用包含来自不同域的脚本的能力来实现跨域请求的技术。它涉及将响应数据包装在一个函数调用中，并将其作为脚本加载到浏览器中。
- en: It's important to note that CORS restrictions are enforced by the web browser,
    and they are in place to protect users' security and privacy. It's generally recommended
    to configure the server to allow the necessary CORS requests rather than relying
    on workarounds like proxies or JSONP.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，CORS 限制由网页浏览器强制执行，这些限制是为了保护用户的安全和隐私。通常建议配置服务器以允许必要的 CORS 请求，而不是依赖代理或
    JSONP 等变通方法。
- en: 8.6 Handling AJAX Errors
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.6 处理 AJAX 错误
- en: When making AJAX requests, it's crucial to handle errors appropriately to provide
    a smooth user experience. Errors can occur due to various reasons, such as network
    issues, server errors, or invalid requests.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行 AJAX 请求时，正确处理错误至关重要，以确保流畅的用户体验。错误可能由于各种原因发生，例如网络问题、服务器错误或无效请求。
- en: To handle AJAX errors, you can utilize the error handling capabilities of the
    XMLHttpRequest object or the Fetch API. For example, with the XMLHttpRequest object,
    you can listen for the `onerror` event and handle the error in the corresponding
    event handler.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理 AJAX 错误，你可以利用 XMLHttpRequest 对象或 Fetch API 的错误处理功能。例如，使用 XMLHttpRequest
    对象时，你可以监听 `onerror` 事件，并在相应的事件处理程序中处理错误。
- en: 'Here''s an example using the Fetch API:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用 Fetch API 的示例：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, the `catch()` method is used to catch any errors that occur
    during the Promise chain. The error object is then logged to the console for debugging
    purposes.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，使用了 `catch()` 方法来捕获在 Promise 链中发生的任何错误。错误对象随后被记录到控制台，供调试使用。
- en: By properly handling AJAX errors, you can provide feedback to the user and gracefully
    handle any issues that may arise during data retrieval.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过正确处理 AJAX 错误，你可以向用户提供反馈，并优雅地处理在数据检索过程中可能出现的任何问题。
- en: 8.7 Conclusion
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 8.7 结论
- en: In this chapter, we explored AJAX (Asynchronous JavaScript and XML) and the
    Fetch API, which are powerful tools for communicating with servers and retrieving
    data asynchronously. We learned about the XMLHttpRequest object, its methods,
    and properties for making HTTP requests. We also explored the Fetch API, which
    provides a more modern and streamlined approach to handling AJAX requests. Additionally,
    we discussed CORS (Cross-Origin Resource Sharing) and the various techniques for
    handling AJAX errors.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了AJAX（异步JavaScript和XML）以及Fetch API，它们是与服务器通信并异步获取数据的强大工具。我们学习了XMLHttpRequest对象及其用于发送HTTP请求的方法和属性。我们还研究了Fetch
    API，它提供了一种更现代、更简洁的方式来处理AJAX请求。此外，我们还讨论了CORS（跨域资源共享）以及处理AJAX错误的各种技术。
- en: With AJAX and the Fetch API, you can create dynamic and interactive web applications
    that retrieve data from servers in the background, providing a seamless user experience.
    In the next chapter, we will delve into JavaScript's advanced concepts, including
    Promises, async/await, and error handling techniques. Get ready to take your JavaScript
    skills to the next level!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用AJAX和Fetch API，你可以创建动态和互动性的网页应用，能够在后台从服务器获取数据，提供无缝的用户体验。在下一章，我们将深入探讨JavaScript的高级概念，包括Promises、async/await以及错误处理技术。准备好将你的JavaScript技能提升到一个新高度！
