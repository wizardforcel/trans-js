- en: '| Recipe 56 | Validating Social Security Numbers |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: '| 食谱56 | 验证社会保障号码 |'
- en: Task
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务
- en: Suppose you have a loan application form (or maybe a background check form)
    and want to perform a check to ensure that the Social Security number (SSN) provided
    by users conforms to the standard format of an SSN.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个贷款申请表（或许是背景调查表），你想要进行检查，确保用户提供的社会保障号码（SSN）符合SSN的标准格式。
- en: 'The SSN is a nine-digit number that is divided into three parts separated by
    hyphens: AAA-GG-SSSS. The first set of three digits is called the area number,
    as it was once assigned based on geographical region. But it cannot be 000, 666,
    or between 900 and 999.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: SSN是一个九位数字，分为三部分，通过连字符分隔：AAA-GG-SSSS。前三位数字被称为地区号，曾经是根据地理区域分配的。但它不能是000、666或在900到999之间。
- en: The group number, which consists of digits four and five, ranges from 01 to
    99\. The last four digits are known as serial numbers and are assigned from 0001
    to 9999\. You need a solution that adheres to all these rules and lets you quickly
    identify invalid SSNs.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 组号由第四位和第五位数字组成，范围从01到99。最后四位数字被称为序列号，范围从0001到9999。你需要一个符合所有这些规则的解决方案，以便快速识别无效的SSN。
- en: Solution
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use the following function:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下函数：
- en: '[part_3/validating_ssn/ssn_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_3/validating_ssn/ssn_ex1.js)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_3/validating_ssn/ssn_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_3/validating_ssn/ssn_ex1.js)'
- en: '|   | **function** isValidSSN(ssn) { |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '|   | **function** isValidSSN(ssn) { |'
- en: '|   | **const** re = */^**(?!**666&#124;000**)[**0-8**]\d{2}**-**(?!**00**)\d{2}**-**(?!**0000**)\d{4}**$/*;
    |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** re = */^**(?!**666&#124;000**)[**0-8**]\d{2}**-**(?!**00**)\d{2}**-**(?!**0000**)\d{4}**$/*;
    |'
- en: '|   | **return** re.test(ssn); |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '|   | **return** re.test(ssn); |'
- en: '|   | } |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '|   | } |'
- en: '|   |  |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | isValidSSN(*"123-45-6789"*); *// → true* |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '|   | isValidSSN(*"123-45-6789"*); *// → true* |'
- en: '|   | isValidSSN(*"123-456-789"*); *// → false* |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '|   | isValidSSN(*"123-456-789"*); *// → false* |'
- en: '|   | isValidSSN(*"123-00-6789"*); *// → false* |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '|   | isValidSSN(*"123-00-6789"*); *// → false* |'
- en: '|   | isValidSSN(*"666-45-6789"*); *// → false* |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '|   | isValidSSN(*"666-45-6789"*); *// → false* |'
- en: This function ensures that the format of the SSN is correct and that it contains
    the correct number of digits, thus minimizing data entry errors.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数确保SSN的格式正确，且包含正确的数字数量，从而最小化数据输入错误。
- en: Discussion
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论
- en: The regex in this recipe matches a valid SSN that has the format XXX-XX-XXXX,
    where the first three digits are not 666 or 000, the fourth and fifth digits are
    not 00, and the last four digits are not 0000.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱中的正则表达式匹配符合XXX-XX-XXXX格式的有效SSN，其中前三位数字不能是666或000，第四和第五位数字不能是00，最后四位数字不能是0000。
- en: (?!000|666) at the beginning of the pattern is a negative lookahead assertion
    that prevents matching SSNs that start with 666 or 000, which are invalid SSNs.
    The pattern matches any two- or four-digit number in its second and third sets
    of digits. But, it incorporates a negative lookahead beforehand to avoid matching
    zeros.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: (?!000|666) 在模式开头的否定前瞻断言，防止匹配以 666 或 000 开头的社会保障号码，因为这些是无效的社会保障号码。该模式匹配第二组和第三组数字中的任何两位或四位数字。但它事先加入了一个否定前瞻，以避免匹配零。
- en: 'Here is the regex pattern with explanations for each segment:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是带有每个部分解释的正则表达式模式：
- en: '|   | /^(?!666&#124;000)[0-8]\d{2}-(?!00)\d{2}-(?!0000)\d{4}$/ |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '|   | /^(?!666&#124;000)[0-8]\d{2}-(?!00)\d{2}-(?!0000)\d{4}$/ |'
- en: '|   |  |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | ● ^ asserts the position at start of the string |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '|   | ● ^ 确保字符串开头的位置 |'
- en: '|   | ● (?!666&#124;000) negative lookahead: assert that the regex below does
    not match. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '|   | ● (?!666&#124;000) 否定前瞻：确保正则表达式下方不匹配。 |'
- en: '|   | ○ 1st Alternative |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ 第一个选择 |'
- en: '|   | ○ 666 matches the characters 666 literally |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ 666 匹配字符 666 |'
- en: '|   | ○ 2nd Alternative |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ 第二个选择 |'
- en: '|   | ○ 000 matches the characters 000 literally |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ 000 匹配字符 000 |'
- en: '|   | ● [0-8] matches a single character in the range between 0 and 8 |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '|   | ● [0-8] 匹配 0 到 8 之间的任意一个字符 |'
- en: '|   | ● \d matches a digit |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '|   | ● \d 匹配一个数字 |'
- en: '|   | ○ {2} matches the previous token exactly 2 times |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ {2} 精确匹配前一个标记 2 次 |'
- en: '|   | ● - matches a hyphen character |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '|   | ● - 匹配一个连字符 |'
- en: '|   | ● (?!00) negative lookahead: asserts that the regex doesn''t match 00
    |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '|   | ● (?!00) 否定前瞻：确保正则表达式不匹配 00 |'
- en: '|   | ● \d matches a digit |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '|   | ● \d 匹配一个数字 |'
- en: '|   | ○ {2} matches the previous token exactly 2 times |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ {2} 精确匹配前一个标记 2 次 |'
- en: '|   | ● - matches a hyphen character |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '|   | ● - 匹配一个连字符 |'
- en: '|   | ● (?!0000) negative lookahead: asserts that the regex doesn''t match
    0000 |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '|   | ● (?!0000) 否定前瞻：确保正则表达式不匹配 0000 |'
- en: '|   | ● \d matches a digit |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '|   | ● \d 匹配一个数字 |'
- en: '|   | ○ {4} matches the previous token exactly 4 times |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ {4} 精确匹配前一个标记 4 次 |'
- en: '|   | ● $ asserts the position at the end of the string |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '|   | ● $ 确保字符串末尾的位置 |'
- en: After confirming that the provided value adheres to the standard format of the
    Social Security number, you might consider employing a more strict approach, which
    involves verifying with the Social Security Administration that the number corresponds
    to an existing individual.^([[35]](f_0087.xhtml#FOOTNOTE-35))
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在确认所提供的值符合社会保障号码的标准格式后，你可以考虑采取更严格的方法，即通过社会保障管理局核实该号码是否对应某个现有个人。^([[35]](f_0087.xhtml#FOOTNOTE-35))
- en: Keep in mind the significance of validating Social Security numbers to avoid
    administrative errors during the processing of important documents such as official
    records.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，验证社会保障号码的重要性，以避免在处理重要文件（如正式记录）时发生行政错误。
