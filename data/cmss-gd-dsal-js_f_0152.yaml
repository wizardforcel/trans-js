- en: Exercises
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 练习
- en: The following exercises provide you with the opportunity to practice with binary
    search trees. The solutions to these exercises are found in the section [`Chapter
    15`](f_0220.xhtml#binary.trees.solutions).
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下练习为你提供了练习二叉搜索树的机会。这些练习的解决方案在[`第15章`](f_0220.xhtml#binary.trees.solutions)中找到。
- en: 'Imagine you were to take an empty binary search tree and insert the following
    sequence of numbers in this order: [1, 5, 9, 2, 4, 10, 6, 3, 8].'
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 想象一下，你将一个空的二叉搜索树按以下顺序插入数字：[1, 5, 9, 2, 4, 10, 6, 3, 8]。
- en: Draw a diagram showing what the binary search tree would look like. Remember,
    the numbers are being inserted in the order presented here.
  id: totrans-3
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 绘制一个图示，显示二叉搜索树的样子。记住，数字是按照此处呈现的顺序插入的。
- en: If a well-balanced binary search tree contains 1,000 values, what is the maximum
    number of steps it would take to search for a value within it?
  id: totrans-4
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 如果一个平衡良好的二叉搜索树包含1,000个值，搜索其中一个值最多需要多少步？
- en: Write an algorithm that finds the greatest value within a binary search tree.
  id: totrans-5
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 编写一个算法，以在二叉搜索树中找到最大值。
- en: 'In the text, I demonstrated how to use inorder traversal to print a list of
    all the book titles. Another way to traverse a tree is known as preorder traversal.
    Here’s the code for it as applied to our book app:'
  id: totrans-6
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 在文本中，我演示了如何使用中序遍历打印所有书名的列表。遍历树的另一种方式称为前序遍历。以下是应用于我们的书籍应用程序的相关代码：
- en: '| ​  | `function` `traverseAndPrint(node) {` |'
  id: totrans-7
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` `traverseAndPrint(node) {` |'
- en: '| ​  | `if` (!node) { `return`; } |'
  id: totrans-8
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (!node) { `return`; } |'
- en: '| ​  |  |'
  id: totrans-9
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `console.log(node.value);` |'
  id: totrans-10
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `console.log(node.value);` |'
- en: '| ​  | `traverseAndPrint(node.leftChild);` |'
  id: totrans-11
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `traverseAndPrint(node.leftChild);` |'
- en: '| ​  | `traverseAndPrint(node.rightChild);` |'
  id: totrans-12
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `traverseAndPrint(node.rightChild);` |'
- en: '| ​  | } |'
  id: totrans-13
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 'For the example tree in the text (the one with “Moby Dick” and the other book
    titles), write out the order in which the book titles are printed with preorder
    traversal. As a reminder, here’s the example tree:'
  id: totrans-14
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 在文本中的示例树（包含“白鲸”和其他书名）上，写出使用前序遍历打印书名的顺序。作为提醒，这里是示例树：
- en: '![images/binary_trees/bst_26.png](images/binary_trees/bst_26.png)'
  id: totrans-15
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_IMG
  zh: '![images/binary_trees/bst_26.png](images/binary_trees/bst_26.png)'
- en: 'Yet another form of traversal is called postorder traversal. Here’s the code
    as applied to our book app:'
  id: totrans-16
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 另一种遍历形式称为后序遍历。以下是应用于我们的书籍应用程序的相关代码：
- en: '| ​  | `function` `traverseAndPrint(node) {` |'
  id: totrans-17
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` `traverseAndPrint(node) {` |'
- en: '| ​  | `if` (!node) { `return`; } |'
  id: totrans-18
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (!node) { `return`; } |'
- en: '| ​  |  |'
  id: totrans-19
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `traverseAndPrint(node.leftChild);` |'
  id: totrans-20
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `traverseAndPrint(node.leftChild);` |'
- en: '| ​  | `traverseAndPrint(node.rightChild);` |'
  id: totrans-21
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `traverseAndPrint(node.rightChild);` |'
- en: '| ​  | `console.log(node.value);` |'
  id: totrans-22
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `console.log(node.value);` |'
- en: '| ​  | } |'
  id: totrans-23
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: For the example tree in the text (which also appears in the previous exercise),
    write out the order in which the book titles are printed with postorder traversal.
  id: totrans-24
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 在文本中的示例树（也出现在之前的练习中），写出使用后序遍历打印书名的顺序。
- en: Copyright © 2024, The Pragmatic Bookshelf.
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 版权所有 © 2024, The Pragmatic Bookshelf.
