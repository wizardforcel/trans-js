- en: '| Recipe 51 | Matching Non-ASCII Numerals with the Unicode Property Escape
    |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: '| 配方 51 | 使用 Unicode 属性转义匹配非 ASCII 数字 |'
- en: Task
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务
- en: Let’s say you want to match a number in a language that has a different numeral
    system, such as Persian or Vietnamese. Remember Recipe 29, [*Repeating Part of
    a Regex with Quantifiers*](f_0040.xhtml#rcp.quantifiers), where you validated
    a PIN code with regex?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想匹配一个使用不同数字系统的语言中的数字，例如波斯语或越南语。还记得配方 29， [*使用量词重复正则表达式的一部分*](f_0040.xhtml#rcp.quantifiers)，当时你通过正则表达式验证了一个
    PIN 码吗？
- en: 'This time you want to allow users to use numerals in their own language to
    create a PIN. But, the problem is that the character class for matching digits
    (\d) matches only ASCII digits:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这次你想允许用户使用自己语言中的数字来创建 PIN 码。但问题是，匹配数字的字符类（\d）只匹配 ASCII 数字：
- en: '[part_2/unicode_property_escapes_p1/upe_p1_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/unicode_property_escapes_p1/upe_p1_ex1.js)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/unicode_property_escapes_p1/upe_p1_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/unicode_property_escapes_p1/upe_p1_ex1.js)'
- en: '|   | **const** re = */^**\d{4,6}**$/*; |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** re = */^**\d{4,6}**$/*; |'
- en: '![images/upe_p1_ex1.png](images/upe_p1_ex1.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![images/upe_p1_ex1.png](images/upe_p1_ex1.png)'
- en: 'Even setting the Unicode flag won’t help:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 即使设置 Unicode 标志也没有帮助：
- en: '[part_2/unicode_property_escapes_p1/upe_p1_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/unicode_property_escapes_p1/upe_p1_ex2.js)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/unicode_property_escapes_p1/upe_p1_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/unicode_property_escapes_p1/upe_p1_ex2.js)'
- en: '|   | **const** re = */^**\d{4,6}**$/*u; |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** re = */^**\d{4,6}**$/*u; |'
- en: '![images/upe_p1_ex2.png](images/upe_p1_ex2.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![images/upe_p1_ex2.png](images/upe_p1_ex2.png)'
- en: You need a solution that lets you verify digits in any language.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一个解决方案，允许你验证任何语言中的数字。
- en: Solution
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use a Unicode property escape in the form of \p{Number}:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 \p{Number} 形式的 Unicode 属性转义：
- en: '[part_2/unicode_property_escapes_p1/upe_p1_ex3.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/unicode_property_escapes_p1/upe_p1_ex3.js)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/unicode_property_escapes_p1/upe_p1_ex3.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/unicode_property_escapes_p1/upe_p1_ex3.js)'
- en: '|   | **const** re = */^**\p**{Number}**{4,6}**$/*u; |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** re = */^**\p**{Number}**{4,6}**$/*u; |'
- en: '![images/upe_p1_ex3.png](images/upe_p1_ex3.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![images/upe_p1_ex3.png](images/upe_p1_ex3.png)'
- en: Success! You’ve matched digits in three different languages.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 成功！你已经匹配了三种不同语言的数字。
- en: Discussion
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论
- en: Symbols in the Unicode standard have various properties and property values.
    With Unicode property escapes, regex can match characters based on their Unicode
    properties.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Unicode 标准中的符号具有各种属性和值。通过 Unicode 属性转义，正则表达式可以根据字符的 Unicode 属性进行匹配。
- en: 'In this recipe, we’re using \p{Number} to match every symbol in the Number
    category, including Roman numerals and numbers classified as compatibly equivalent:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们使用 \p{Number} 来匹配数字类别中的每个符号，包括罗马数字和被归类为兼容等价的数字：
- en: '[part_2/unicode_property_escapes_p1/upe_p1_ex4.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/unicode_property_escapes_p1/upe_p1_ex4.js)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/unicode_property_escapes_p1/upe_p1_ex4.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/unicode_property_escapes_p1/upe_p1_ex4.js)'
- en: '|   | **const** re = */^**\p**{Number}**{4,6}**$/*u; |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** re = */^**\p**{Number}**{4,6}**$/*u; |'
- en: '![images/upe_p1_ex4.png](images/upe_p1_ex4.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![images/upe_p1_ex4.png](images/upe_p1_ex4.png)'
- en: 'If you want to exclude non-decimal numbers, you can use \p{Decimal_Number}
    instead:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想排除非十进制数字，可以改用 \p{Decimal_Number}：
- en: '[part_2/unicode_property_escapes_p1/upe_p1_ex5.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/unicode_property_escapes_p1/upe_p1_ex5.js)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/unicode_property_escapes_p1/upe_p1_ex5.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/unicode_property_escapes_p1/upe_p1_ex5.js)'
- en: '|   | **const** re = */**\p**{Decimal_Number}/*u; |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** re = */**\p**{Decimal_Number}/*u; |'
- en: '![images/upe_p1_ex5.png](images/upe_p1_ex5.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![images/upe_p1_ex5.png](images/upe_p1_ex5.png)'
- en: Remember, it’s possible to use Unicode property escapes only when the u flag
    is set. If no u flag is present, then the pattern \p is a redundant escape sequence
    for the letter p. This is by design so that existing patterns that might use \p{
    ... } wouldn’t break with the introduction of the Unicode property escapes into
    the language.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，只有在设置了 u 标志时，才能使用 Unicode 属性转义。如果没有 u 标志，则模式 \p 是字母 p 的冗余转义序列。这是有意设计的，以便现有的模式（可能使用
    \p{ ... }）在引入 Unicode 属性转义时不会破坏语言的兼容性。
- en: '| Negated Unicode Property Escapes |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 否定的 Unicode 属性转义 |'
- en: '| --- |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| ![images/aside-icons/note.png](images/aside-icons/note.png) | Unicode property
    escapes also have a negated version denoted by \P{ ... }, which lets you match
    the opposite of what they normally match. For example, if you wanted to match
    a string that doesn’t have a number, you’d write:/^\P{Number}+$/u |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| ![images/aside-icons/note.png](images/aside-icons/note.png) | Unicode 属性转义也有一个否定版本，通过
    \P{ ... } 来表示，它可以让你匹配与正常匹配结果相反的内容。例如，如果你想匹配不包含数字的字符串，可以写：/^\P{Number}+$/u |'
- en: In this recipe, we used \p{Number} to match symbols in the Number category,
    but you can also match other types of symbols. The next recipe shows you how to
    take advantage of Unicode property escapes to match a word character.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了 \p{Number} 来匹配数字类别中的符号，但你也可以匹配其他类型的符号。接下来的示例将展示如何利用 Unicode 属性转义来匹配单词字符。
