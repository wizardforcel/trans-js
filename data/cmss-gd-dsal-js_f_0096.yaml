- en: Chapter 10
  id: totrans-0
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 第十章
- en: Recursively Recurse with Recursion
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 递归地使用递归来递归
- en: Recursion is a key concept in computer science that will unlock the more advanced
    algorithms we’re going to encounter in this book. When used correctly, recursion
    can be used to solve certain types of tricky problems in surprisingly simple ways.
    Sometimes, it even seems like magic.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 递归是计算机科学中的一个关键概念，将解锁我们在本书中即将遇到的更高级算法。正确使用时，递归可以以出人意料的简单方式解决某些类型的棘手问题。有时，它甚至看起来像是魔法。
- en: But before we dive in, a pop quiz!
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 但在我们深入讨论之前，来个小测验吧！
- en: What happens when the `blah()` function defined here is called?
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当此处定义的`blah()`函数被调用时会发生什么？
- en: '| ​  | ​`function`​ `blah() {` |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`function`​ `blah() {` |'
- en: '| ​  | `blah();` |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `blah();` |'
- en: '| ​  | `}` |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `}` |'
- en: As you may have guessed, it will call itself infinitely, since `blah()` calls
    itself, which in turn calls itself, and so on.
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 正如你可能猜到的那样，它会无限调用自身，因为`blah()`调用了自身，然后又调用自身，如此循环。
- en: Recursion is the term for a function calling itself. Indeed, infinite recursion,
    as in the above example, is utterly useless. When harnessed correctly, though,
    recursion can be a powerful tool.
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 递归是指函数调用自身的行为。确实，像上面例子中的无限递归一样，是完全没有意义的。但正确利用时，递归可以成为一个强大的工具。
