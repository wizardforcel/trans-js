- en: 'Chapter 3: Creating Your First React Component'
  id: totrans-0
  prefs:
  - PREF_H1
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章：创建你的第一个 React 组件
- en: 'Now that your React development environment is up and running, it''s time to
    dive into the heart of React: creating components. In this chapter, we''ll guide
    you through the process of building your first React component from scratch. We''ll
    cover everything you need to know, from understanding the anatomy of a React component
    to rendering it in your application. By the end of this chapter, you''ll have
    a solid grasp of how React components work and be ready to start building dynamic
    user interfaces.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的 React 开发环境已经搭建完毕，接下来是深入 React 的核心：创建组件。在本章中，我们将引导你从零开始构建你的第一个 React 组件。我们将涵盖你需要了解的一切，从理解
    React 组件的结构到在你的应用中渲染它。到本章结束时，你将牢牢掌握 React 组件的工作原理，并准备好开始构建动态用户界面。
- en: Understanding the Anatomy of a React Component
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 React 组件的结构
- en: Before we jump into creating a React component, let's break down the essential
    elements that make up a component. At its core, a React component is a JavaScript
    function or class that returns a piece of JSX (JavaScript XML) code. JSX is a
    syntax extension that allows you to write HTML-like code within your JavaScript
    files.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始创建 React 组件之前，让我们拆解一下构成组件的基本要素。从本质上讲，React 组件是一个返回 JSX（JavaScript XML）代码的
    JavaScript 函数或类。JSX 是一种语法扩展，它允许你在 JavaScript 文件中编写类似 HTML 的代码。
- en: Functional Components
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数组件
- en: 'Functional components are the simplest type of React component. They are JavaScript
    functions that take in an optional set of inputs called "props" (short for properties)
    and return a React element. Here''s the basic structure of a functional component:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 函数组件是最简单的 React 组件类型。它们是 JavaScript 函数，接受一组可选的输入，称为“props”（属性的缩写），并返回一个 React
    元素。以下是一个函数组件的基本结构：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, `MyComponent` is a functional component that can accept `props`
    as input and return JSX code representing the component's UI. Functional components
    are ideal for simple UI elements and are a great starting point for beginners.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`MyComponent` 是一个函数组件，它可以接受 `props` 作为输入，并返回表示组件 UI 的 JSX 代码。函数组件非常适合用于简单的
    UI 元素，是初学者的理想起点。
- en: Class Components
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类组件
- en: 'Class components are another type of React component that provides more advanced
    features and capabilities. They are JavaScript classes that extend the `React.Component`
    class. Class components have their own state and can define lifecycle methods
    for handling component events. Here''s the basic structure of a class component:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 类组件是另一种 React 组件，它提供了更多高级功能和能力。它们是扩展了 `React.Component` 类的 JavaScript 类。类组件有自己的状态，并可以定义生命周期方法来处理组件事件。以下是一个类组件的基本结构：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, `MyComponent` is a class component that can manage its state
    using `this.state` and define a `render` method to return JSX code for rendering
    the component's UI. Class components are suitable for more complex UI elements
    and offer greater control over component behavior.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`MyComponent`是一个类组件，可以使用`this.state`管理其状态，并定义一个`render`方法来返回 JSX 代码，用于渲染组件的
    UI。类组件适用于更复杂的 UI 元素，并提供对组件行为的更大控制。
- en: Creating Your First Functional Component
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建你的第一个函数式组件
- en: 'Let''s start by creating your very first React component: a functional component
    called `HelloWorld`. This component will display a simple "Hello, React!" message.
    Follow these steps to create and render your component.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建你的第一个 React 组件开始：一个名为`HelloWorld`的函数式组件。这个组件将显示一条简单的"Hello, React!"消息。按照以下步骤创建并渲染你的组件。
- en: 'Step 1: Create a New Component File'
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第1步：创建一个新的组件文件
- en: In your React project folder, navigate to the `src` directory. Inside this directory,
    create a new file called `HelloWorld.js`. This file will contain your `HelloWorld`
    component.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 React 项目文件夹中，进入`src`目录。在这个目录下，创建一个名为`HelloWorld.js`的新文件。这个文件将包含你的`HelloWorld`组件。
- en: 'Step 2: Define the Functional Component'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第2步：定义函数式组件
- en: 'Open the `HelloWorld.js` file in your text editor or IDE. Define the `HelloWorld`
    functional component as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`HelloWorld.js`文件，在文本编辑器或 IDE 中按如下方式定义`HelloWorld`函数式组件：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中：
- en: '- We import the `React` library, which is necessary for creating React components.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '- 我们导入了`React`库，这是创建 React 组件所必需的。'
- en: '- We define the `HelloWorld` functional component, which returns a JSX element
    containing an `<h1>` heading with the text "Hello, React!"'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '- 我们定义了`HelloWorld`函数式组件，它返回一个包含`<h1>`标题的 JSX 元素，标题内容为"Hello, React!"。'
- en: '- Finally, we export the `HelloWorld` component to make it available for use
    in other parts of your application.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '- 最后，我们导出`HelloWorld`组件，使其可以在应用程序的其他部分中使用。'
- en: 'Step 3: Render the Component'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第3步：渲染组件
- en: Now that you've defined your `HelloWorld` component, it's time to render it
    in your application. Open the `src/App.js` file, which is the main component of
    your Create React App project.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经定义了`HelloWorld`组件，是时候在应用程序中渲染它了。打开`src/App.js`文件，这是你创建的 React 应用项目中的主要组件。
- en: 'In the `src/App.js` file, import the `HelloWorld` component at the top of the
    file:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/App.js`文件中，导入`HelloWorld`组件，放在文件的顶部：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, you can use the `HelloWorld` component within the `App` component''s `render`
    method. Replace the existing JSX code in the `App` component''s `render` method
    with the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以在`App`组件的`render`方法中使用`HelloWorld`组件。将`App`组件`render`方法中的现有 JSX 代码替换为以下内容：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here''s what''s happening in this code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是这段代码中发生的事情：
- en: '- We import the `HelloWorld` component we created earlier.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '- 我们导入了之前创建的`HelloWorld`组件。'
- en: '- Inside the `App` component''s `render` method, we include the `HelloWorld`
    component, effectively rendering it within the `App` component''s UI.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '- 在`App`组件的`render`方法中，我们包含了`HelloWorld`组件，从而在`App`组件的 UI 中渲染它。'
- en: 'Step 4: View Your Component'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 4：查看你的组件
- en: 'Save the changes you made to the `src/App.js` file. If your development server
    is not running, start it by running the following command in your terminal within
    your project directory:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 保存你对 `src/App.js` 文件所做的更改。如果开发服务器未运行，请在项目目录中的终端运行以下命令启动它：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This command will launch the development server and open your React application
    in a web browser. You should see your "Hello, React!" message displayed on the
    web page.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将启动开发服务器，并在 Web 浏览器中打开你的 React 应用。你应该在网页上看到 "Hello, React!" 消息。
- en: Congratulations! You've created and successfully rendered your first React component.
    You've taken your first step into the world of building dynamic user interfaces
    with React.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经创建并成功渲染了第一个 React 组件。你迈出了构建动态用户界面的第一步。
- en: Working with Props
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Props
- en: Props (short for properties) are a fundamental concept in React that allows
    you to pass data from a parent component to a child component. Props enable you
    to make your components dynamic by customizing their behavior and appearance based
    on external data.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Props（即属性）是 React 中的一个基础概念，它允许你将数据从父组件传递到子组件。Props 使你能够通过根据外部数据自定义组件的行为和外观，来使组件变得动态。
- en: Passing Props to a Component
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将 Props 传递给组件
- en: 'Let''s enhance our `HelloWorld` component by passing a prop to it. We''ll create
    a new functional component called `Greet` that takes a prop for the name to greet.
    Follow these steps to pass props to a component:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过传递一个 prop 来增强我们的 `HelloWorld` 组件。我们将创建一个名为 `Greet` 的新函数组件，接受一个用于问候的 `name`
    prop。按照以下步骤将 props 传递给组件：
- en: 'Step 1: Create a New Component File'
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 1：创建一个新的组件文件
- en: In your `src` directory, create a new file called `Greet.js`. This file will
    contain your `Greet` component.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `src` 目录中，创建一个名为 `Greet.js` 的新文件。这个文件将包含你的 `Greet` 组件。
- en: 'Step 2: Define the Functional Component'
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 2：定义函数组件
- en: 'Open the `Greet.js` file and define the `Greet` functional component as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `Greet.js` 文件，并按如下方式定义 `Greet` 函数组件：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In this code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中：
- en: '- We define the `Greet` functional component, which accepts a single prop called
    `name`.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '- 我们定义了 `Greet` 函数组件，它接受一个名为 `name` 的单一 prop。'
- en: '- Inside the component''s JSX, we use curly braces `{props.name}` to interpolate
    the value of the `name` prop into the message.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '- 在组件的 JSX 内部，我们使用花括号 `{props.name}` 将 `name` prop 的值插入到消息中。'
- en: 'Step 3: Render the Component with Props'
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 3：使用 Props 渲染组件
- en: 'Now, let''s render the `Greet` component with a prop value. Open the `src/App.js`
    file again and import the `Greet` component at the top of the file:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用 prop 值渲染 `Greet` 组件。再次打开 `src/App.js` 文件，并在文件顶部导入 `Greet` 组件：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, update the `App` component''s `render` method to include the `Greet`
    component with a `name` prop:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，更新 `App` 组件的 `render` 方法，将 `Greet` 组件与 `name` prop 一起包含：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In this code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中：
- en: '- We import the `Greet` component.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '- 我们导入了 `Greet` 组件。'
- en: '- We include the `Greet` component within the `App` component''s JSX, passing
    a `name` prop with the value "React Enthusiast."'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '- 我们在 `App` 组件的 JSX 中包含了 `Greet` 组件，并传递了一个值为 "React Enthusiast" 的 `name` prop。'
- en: 'Step 4: View Your Component with Props'
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 4 步：查看带有 props 的组件
- en: Save the changes you made to the `src/App.js` file, and make sure your development
    server is running with `npm start
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 保存你对 `src/App.js` 文件所做的更改，并确保你的开发服务器正在运行（使用 `npm start`）。
- en: '`.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`.'
- en: When you view your React application in the web browser, you should see the
    message "Hello, React Enthusiast!" displayed on the page. The `name` prop you
    passed to the `Greet` component is dynamically inserted into the message.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在网页浏览器中查看 React 应用时，你应该会看到页面上显示 "Hello, React Enthusiast!" 的消息。你传递给 `Greet`
    组件的 `name` prop 会动态插入到消息中。
- en: Using State in a Class Component
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在类组件中使用状态
- en: State is a crucial concept in React that allows components to manage and maintain
    their data. While functional components are excellent for presenting UI based
    on props, class components can also manage internal state. In this section, we'll
    create a class component called `Counter` to explore how to use state.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 状态（State）是 React 中一个至关重要的概念，它允许组件管理和维护其数据。虽然函数组件非常适合根据 props 渲染 UI，但类组件也可以管理内部状态。在这一部分，我们将创建一个名为
    `Counter` 的类组件，来探索如何使用状态。
- en: 'Step 1: Create a New Component File'
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 1 步：创建一个新的组件文件
- en: In your `src` directory, create a new file called `Counter.js`. This file will
    contain your `Counter` class component.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 `src` 目录下，创建一个名为 `Counter.js` 的新文件。这个文件将包含你的 `Counter` 类组件。
- en: 'Step 2: Define the Class Component'
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 2 步：定义类组件
- en: 'Open the `Counter.js` file and define the `Counter` class component as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `Counter.js` 文件，并定义如下的 `Counter` 类组件：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In this code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中：
- en: '- We import `React` and `Component` from ''react''.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '- 我们从 ''react'' 中导入 `React` 和 `Component`。'
- en: '- We define the `Counter` class component, which includes a `constructor` method
    to initialize its state with a `count` property set to 0.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '- 我们定义了 `Counter` 类组件，其中包括一个 `constructor` 方法，用于初始化其状态，设置 `count` 属性为 0。'
- en: '- In the `render` method, we display the current count using `{this.state.count}`
    and provide a button with an `onClick` event handler.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '- 在 `render` 方法中，我们使用 `{this.state.count}` 显示当前的计数，并提供一个带有 `onClick` 事件处理程序的按钮。'
- en: '- The `incrementCount` method is defined to update the component''s state when
    the button is clicked. It uses `this.setState` to increment the `count` property.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '- `incrementCount` 方法被定义用来在按钮点击时更新组件的状态。它使用 `this.setState` 来增加 `count` 属性的值。'
- en: 'Step 3: Render the Class Component'
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 3 步：渲染类组件
- en: 'Now, let''s render the `Counter` class component in your `src/App.js` file.
    Import the `Counter` component at the top of the file:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在 `src/App.js` 文件中渲染 `Counter` 类组件。在文件顶部导入 `Counter` 组件：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, include the `Counter` component within the `App` component''s `render`
    method:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在 `App` 组件的 `render` 方法中包含 `Counter` 组件：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Step 4: View Your Class Component'
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 4 步：查看你的类组件
- en: Save the changes you made to the `src/App.js` file and ensure your development
    server is running with `npm start`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 保存你对`src/App.js`文件所做的更改，并确保你的开发服务器正在运行，可以使用`npm start`命令启动。
- en: 'When you view your React application in the web browser, you''ll see the "Count:
    0" message and a button labeled "Increment." Clicking the "Increment" button will
    update the count, demonstrating how state can be used in a class component to
    manage and display data.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '当你在网页浏览器中查看你的 React 应用时，你将看到“Count: 0”消息和一个标有“Increment”的按钮。点击“Increment”按钮将更新计数，演示了如何在类组件中使用
    state 来管理和显示数据。'
- en: Conclusion
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter, you've taken your first steps in creating and using React components.
    You've learned the fundamentals of functional and class components, how to pass
    props to components, and how to manage component state. These concepts are essential
    building blocks for building dynamic and interactive user interfaces with React.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你迈出了创建和使用 React 组件的第一步。你学习了函数组件和类组件的基础知识，如何向组件传递 props，以及如何管理组件的 state。这些概念是使用
    React 构建动态和交互式用户界面的基本构建块。
- en: As you continue your React journey, remember that components are the building
    blocks of your application, and they can be composed together to create complex
    user interfaces. Experiment with creating your own components, passing props,
    and managing state to gain confidence in working with React.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在你继续 React 学习之旅时，请记住，组件是你应用程序的构建块，它们可以组合在一起创建复杂的用户界面。尝试创建你自己的组件、传递 props 和管理
    state，以增强你使用 React 的信心。
