- en: '| Recipe 25 | Looking For Whole Words Only with the Word Boundary (\b) |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: '| 配方 25 | 使用单词边界（\b）仅查找完整单词 |'
- en: Task
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务
- en: 'Say you want to look for the word “green” in a document. You try using the
    includes() method, but it matches other words containing “green” too, such as
    “greenhouse” and “evergreen”:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想在文档中查找“green”这个单词。你尝试使用 includes() 方法，但它也会匹配其他包含“green”的单词，例如“greenhouse”和“evergreen”：
- en: '[part_2/word_boundary/word_boundary_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/word_boundary/word_boundary_ex1.js)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/word_boundary/word_boundary_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/word_boundary/word_boundary_ex1.js)'
- en: '|   | **const** str1 = *"We must reduce the emissions of greenhouse gases."*;
    |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** str1 = *"我们必须减少温室气体的排放。"*; |'
- en: '|   | **const** str2 = *"An evergreen plant has leaves for the whole year."*;
    |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** str2 = *"一种常绿植物一年四季都有叶子。"*; |'
- en: '|   |  |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | str1.includes(*"green"*); *// → true* |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '|   | str1.includes(*"green"*); *// → true* |'
- en: '|   | str2.includes(*"green"*); *// → true* |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '|   | str2.includes(*"green"*); *// → true* |'
- en: 'Adding a space around “green” doesn’t quite cut it because the word might be
    followed by a comma, appear before/after a newline character, or come at the beginning/end
    of a sentence, and so on:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅在“green”周围加空格并不够，因为该单词后面可能跟着逗号，或者出现在换行符的前后，或者位于句子的开头/结尾等情况：
- en: '[part_2/word_boundary/word_boundary_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/word_boundary/word_boundary_ex2.js)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/word_boundary/word_boundary_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/word_boundary/word_boundary_ex2.js)'
- en: '|   | **const** str = *"Blend together yellow and blue paint to make green."*;
    |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** str = *"将黄色和蓝色的油漆混合在一起，得到绿色。"*; |'
- en: '|   |  |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | str.includes(*" green "*); *// → false* |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '|   | str.includes(*" green "*); *// → false* |'
- en: You need a solution that matches “green” only if it’s a separate word.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一个解决方案，使得只有当“green”是一个独立单词时才匹配它。
- en: Solution
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Place a \b before and after “green” in the regex pattern to exclude other words:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在正则表达式模式中，在“green”前后加上 \b 来排除其他单词：
- en: '[part_2/word_boundary/word_boundary_ex3.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/word_boundary/word_boundary_ex3.js)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/word_boundary/word_boundary_ex3.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/word_boundary/word_boundary_ex3.js)'
- en: '|   | **const** re = */**\b**green**\b**/*; |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** re = */**\b**green**\b**/*; |'
- en: '|   | **const** str1 = *"We must reduce the emissions of greenhouse gases."*;
    |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** str1 = *"我们必须减少温室气体的排放。"*; |'
- en: '|   | **const** str2 = *"An evergreen plant has leaves for the whole year."*;
    |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** str2 = *"一种常绿植物一年四季都有叶子。"*; |'
- en: '|   | **const** str3 = *"Blend together yellow and blue paint to make green."*;
    |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** str3 = *"将黄色和蓝色的油漆混合在一起，得到绿色。"*; |'
- en: '|   |  |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | re.test(str1); *// → false* |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '|   | re.test(str1); *// → false* |'
- en: '|   | re.test(str2); *// → false* |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '|   | re.test(str2); *// → false* |'
- en: '|   | re.test(str3); *// → true* |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '|   | re.test(str3); *// → true* |'
- en: Success! You matched “green” only when it was a separate word and not part of
    another word. You also were able to find “green” in spite of having punctuation
    around the word. Let’s see how \b works to find whole words.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 成功了！你只在“green”是一个独立单词时匹配它，而不是当它是其他单词的一部分时。你还能够在单词周围有标点符号的情况下找到“green”。让我们看看\b如何工作以找到完整的单词。
- en: Discussion
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论
- en: The metacharacter \b matches at a position known as the word boundary. Simply
    put, this metacharacter allows you to look for “whole words” only. A position
    qualifies as a word boundary only if a word character is not followed or preceded
    by another word character.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 元字符\b匹配的是一个被称为单词边界的位置。简而言之，这个元字符让你只能寻找“完整单词”。只有当单词字符前后没有其他单词字符时，某个位置才被视为单词边界。
- en: Therefore, \b matches before the first character or after the last character
    of a word. Word characters include a-z, A-Z, 0-9, and underscore. So things like
    spaces (green beans), quotation marks ("green"), commas (green,), and periods
    (green.) are seen as word boundaries.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，\b匹配的是单词的第一个字符之前或最后一个字符之后的位置。单词字符包括a-z、A-Z、0-9和下划线。因此，像空格（green beans）、引号（"green"）、逗号（green,）和句点（green.）这样的符号都被视为单词边界。
- en: '| What Is a Metacharacter? |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 什么是元字符？ |'
- en: '| --- |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| ![images/aside-icons/info.png](images/aside-icons/info.png) | When certain
    characters are used in regular expressions, they give special meaning to the search
    syntax. These characters are known as metacharacters (or special characters) and
    allow you to perform a more advanced matching than just searching for a piece
    of text. Metacharacters can represent ideas such as locations, quantity, or types
    of characters. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| ![images/aside-icons/info.png](images/aside-icons/info.png) | 当某些字符在正则表达式中使用时，它们赋予搜索语法特殊的含义。这些字符被称为元字符（或特殊字符），它们允许你执行比仅仅搜索一段文本更为高级的匹配。元字符可以表示如位置、数量或字符类型等概念。
    |'
- en: It’s pretty common to need to match only whole words (like black, but not blacksmith)
    and \b is well-suited to that use, but there’s more to word boundaries than you
    might imagine. Let’s dig a bit deeper into using \b.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 需要仅匹配完整单词（如black，但不是blacksmith）是非常常见的，\b非常适合这个用途，但单词边界的使用远比你想象的要复杂一些。让我们更深入地探讨一下如何使用\b。
- en: '\bgreen\b would not match “green” in “_green” or “green4,” because both underscores
    and digits are word characters, and there is no boundary between a word character
    and another word character:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: \bgreen\b不会匹配“_green”或“green4”，因为下划线和数字都是单词字符，并且单词字符之间没有边界：
- en: '[part_2/word_boundary/word_boundary_ex4.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/word_boundary/word_boundary_ex4.js)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/word_boundary/word_boundary_ex4.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/word_boundary/word_boundary_ex4.js)'
- en: '|   | **const** re = */**\b**green**\b**/*; |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** re = */**\b**green**\b**/*; |'
- en: '|   |  |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | re.test(*"_green"*); *// → false* |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '|   | re.test(*"_green"*); *// → false* |'
- en: '|   | re.test(*"green4"*); *// → false* |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '|   | re.test(*"green4"*); *// → false* |'
- en: 'Hyphens, however, do qualify as word breaks. So, green-eyed would be a match
    in our example. We humans may see green-eyed as a single word, but regex doesn’t:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 连字符则被认为是单词边界。因此，在我们的示例中，green-eyed 将会匹配。我们人类可能会将 green-eyed 视为一个词，但正则表达式并不这么认为：
- en: '[part_2/word_boundary/word_boundary_ex5.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/word_boundary/word_boundary_ex5.js)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/word_boundary/word_boundary_ex5.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/word_boundary/word_boundary_ex5.js)'
- en: '|   | **const** re = */**\b**green**\b**/*; |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** re = */**\b**green**\b**/*; |'
- en: '|   |  |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | re.test(*"green-eyed"*); *// → true* |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '|   | re.test(*"green-eyed"*); *// → true* |'
- en: 'Same thing with the apostrophe: /\bcan\b/ matches “I can’t do it” even though
    “can’t” is a contraction and a word in the English sense:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的情况发生在撇号上：/\bcan\b/ 匹配 “I can’t do it”，即使“can’t”是缩写，并且在英语中是一个词：
- en: '[part_2/word_boundary/word_boundary_ex6.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/word_boundary/word_boundary_ex6.js)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/word_boundary/word_boundary_ex6.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/word_boundary/word_boundary_ex6.js)'
- en: '|   | **const** re = */**\b**can**\b**/*; |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** re = */**\b**can**\b**/*; |'
- en: '|   |  |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | re.test(*"I can''t do it"*); *// → true* |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '|   | re.test(*"I can''t do it"*); *// → true* |'
- en: 'Accented characters are also considered word breaks (for a workaround, see
    Recipe 53, [*Matching Unicode Word Boundaries with the Unicode Property Escape*](f_0064.xhtml#rcp.unicode_property_escapes_p3)):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 带有重音符号的字符也被视为单词边界（有关解决方法，请参见配方 53，[*匹配 Unicode 单词边界与 Unicode 属性转义*](f_0064.xhtml#rcp.unicode_property_escapes_p3)）：
- en: '[part_2/word_boundary/word_boundary_ex7.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/word_boundary/word_boundary_ex7.js)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/word_boundary/word_boundary_ex7.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/word_boundary/word_boundary_ex7.js)'
- en: '|   | **const** re = */**\b**Fianc**\b**/*; |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** re = */**\b**Fianc**\b**/*; |'
- en: '|   |  |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | re.test(*"Fiancée"*); *// → true* |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '|   | re.test(*"Fiancée"*); *// → true* |'
- en: '|   | re.test(*"Fiancee"*); *// → false* |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '|   | re.test(*"Fiancee"*); *// → false* |'
- en: 'You don’t have to put a pair of \b around words. You can use a single \b to
    match only one boundary:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要将 \b 配对在单词的两边。你可以只使用一个 \b 来匹配单一的边界：
- en: '[part_2/word_boundary/word_boundary_ex8.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/word_boundary/word_boundary_ex8.js)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/word_boundary/word_boundary_ex8.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/word_boundary/word_boundary_ex8.js)'
- en: '|   | **const** re1 = */**\b**green/*; |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** re1 = */**\b**green/*; |'
- en: '|   | **const** re2 = */green**\b**/*; |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** re2 = */green**\b**/*; |'
- en: '|   |  |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | re1.test(*"evergreen"*); *// → false* |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '|   | re1.test(*"evergreen"*); *// → false* |'
- en: '|   | re1.test(*"greenhouse"*); *// → true* |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '|   | re1.test(*"greenhouse"*); *// → true* |'
- en: '|   |  |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | re2.test(*"evergreen"*); *// → true* |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '|   | re2.test(*"evergreen"*); *// → true* |'
- en: '|   | re2.test(*"greenhouse"*); *// → false* |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '|   | re2.test(*"greenhouse"*); *// → false* |'
- en: Notice that when you place \b at the start of the search string (/\bgreen/)
    it finds only words that start with “green” and when placed at the end (/green\b/)
    only words that end with “green.”
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当你将 \b 放在搜索字符串的开头（/\bgreen/）时，它只会找到以“green”开头的单词，而当放在结尾（/green\b/）时，它只会找到以“green”结尾的单词。
- en: Using \B for Non-word Boundaries
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 \B 来匹配非单词边界
- en: '\B matches any position that \b does not (any non-word boundary) and so we
    say that \B is the negated form of \b. In regex, it’s a normal convention: lowercase
    and uppercase versions of the same letter being the opposite/negated forms of
    each other.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: \B 匹配任何 \b 不匹配的位置（任何非单词边界），因此我们说 \B 是 \b 的否定形式。在正则表达式中，这是一个常规约定：同一个字母的小写和大写版本互为对立/否定形式。
- en: '\B matches a position where a character is followed or preceded by the same
    type of character, such as between two space characters or two letters. Here is
    an example:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: \B 匹配一个位置，在这个位置，一个字符后面或前面跟着相同类型的字符，比如两个空格字符或两个字母之间。以下是一个示例：
- en: '[part_2/word_boundary/word_boundary_ex9.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/word_boundary/word_boundary_ex9.js)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/word_boundary/word_boundary_ex9.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/word_boundary/word_boundary_ex9.js)'
- en: '|   | **const** re = */green**\B**/*; |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** re = */green**\B**/*; |'
- en: '|   |  |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | re.test(*"greenhouse"*); *// → true* |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '|   | re.test(*"greenhouse"*); *// → true* |'
- en: '|   | re.test(*"green bay"*); *// → false* |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '|   | re.test(*"green bay"*); *// → false* |'
- en: 'In “greenhouse,” “green” is followed by the same type of character: a word
    character. So, the test returns true. In “green bay,” however, “green” is followed
    by a space (a different type), and so the result is false.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在“greenhouse”中，“green”后面跟的是相同类型的字符：一个单词字符。因此，测试结果为真。然而，在“green bay”中，“green”后面跟的是一个空格（不同类型的字符），所以结果为假。
- en: '| \b with the RegExp Constructor |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| \b 与 RegExp 构造函数 |'
- en: '| --- |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| ![images/aside-icons/important.png](images/aside-icons/important.png) | When
    using the RegExp constructor, you must escape the \b metacharacter with a backslash
    because you’re writing the pattern in a normal string, not a slash-enclosed literal.The
    code tag should not be here. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| ![images/aside-icons/important.png](images/aside-icons/important.png) | 当使用
    RegExp 构造函数时，你必须用反斜杠对 \b 元字符进行转义，因为你是在正常字符串中写模式，而不是斜杠包围的字面量。这里不应该使用代码标签。 |'
- en: Using Intl.Segmenter() Instead
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 Intl.Segmenter() 替代
- en: 'Remember Intl.Segmenter() from Recipe 19, [*Counting Words in a String with
    Intl.Segmenter()*](f_0029.xhtml#rcp.wordSegmenter)? If you’re looking for a pure
    JavaScript solution, you can achieve the same result with Intl.Segmenter():'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得 Recipe 19 中的 Intl.Segmenter() 吗？[*使用 Intl.Segmenter() 统计字符串中的单词*](f_0029.xhtml#rcp.wordSegmenter)？如果你正在寻找一个纯
    JavaScript 的解决方案，你可以使用 Intl.Segmenter() 来实现相同的效果：
- en: '[part_2/word_boundary/word_boundary_ex10.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/word_boundary/word_boundary_ex10.js)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/word_boundary/word_boundary_ex10.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/word_boundary/word_boundary_ex10.js)'
- en: '|   | **function** includesWord(str, word) { |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '|   | **function** includesWord(str, word) { |'
- en: '|   | **let** s = [...**new** Intl.Segmenter(*"en"*, {granularity: *"word"*}).segment(str)];
    |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '|   | **let** s = [...**new** Intl.Segmenter(*"en"*, {granularity: *"word"*}).segment(str)];
    |'
- en: '|   | **return** s.some(value => { |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '|   | **return** s.some(value => { |'
- en: '|   | **return** value.segment === word; |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '|   | **return** value.segment === word; |'
- en: '|   | }); |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '|   | }); |'
- en: '|   | } |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '|   | } |'
- en: '|   |  |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | includesWord(*"Her flashing green eyes."*, *"green"*); |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '|   | includesWord(*"Her flashing green eyes."*, *"green"*); |'
- en: '|   | *// → true* |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '|   | *// → true* |'
- en: '|   |  |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | includesWord(*"We must reduce the emissions of greenhouse gases."*, *"green"*);
    |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '|   | includesWord(*"我们必须减少温室气体排放。 "*, *"绿"*); |'
- en: '|   | *// → false* |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '|   | *// → false* |'
- en: '|   |  |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | includesWord(*"The green-eyed monster"*, *"green"*); |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '|   | includesWord(*"绿眼怪物"*, *"绿"*); |'
- en: '|   | *// → true* |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '|   | *// → true* |'
- en: '|   |  |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | includesWord(*"I can''t do it"*, *"can"*); |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '|   | includesWord(*"我做不到"*, *"能"*); |'
- en: '|   | *// → false* |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '|   | *// → false* |'
- en: 'When you set the granularity to word, Intl.Segmenter() splits the string at
    word boundaries. You can then check the items of the resulting array for the word
    you are looking for with some(), which returns true if at least one element in
    the array matches the word. One difference between this approach and our regex
    solution is how it handles the apostrophe: \b treats an apostrophe as a word break
    while Intl.Segmenter() does not.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将粒度设置为“单词”时，Intl.Segmenter()会在单词边界处分割字符串。然后，您可以使用some()检查结果数组中的元素是否包含您要查找的单词，如果数组中至少有一个元素匹配该单词，some()会返回true。这种方法与正则表达式方法的一个区别是它处理撇号的方式：\b将撇号视为单词分隔符，而Intl.Segmenter()则不会。
- en: Another difference is that the Intl.Segmenter() approach is slower than regex,
    especially if you’re testing a large block of text. So, unless you want to avoid
    matching words that have an apostrophe, you should stick with regex.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个区别是，Intl.Segmenter()方法比正则表达式慢，尤其是在处理大量文本时。因此，除非您想避免匹配包含撇号的单词，否则应坚持使用正则表达式。
- en: Use the word boundary (\b) when looking for “whole words” in a string, but be
    wary of accented characters, hyphens, and apostrophes since they qualify as word
    breaks. And use the negated version of the word boundary (non-word boundary \B)
    to match a position that \b does not.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 使用单词边界（\b）来查找字符串中的“完整单词”，但要小心重音字符、连字符和撇号，因为它们被视为单词分隔符。使用单词边界的否定形式（非单词边界 \B）来匹配\b无法匹配的位置。
