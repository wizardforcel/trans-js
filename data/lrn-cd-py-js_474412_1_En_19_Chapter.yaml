- en: © The Author(s), under exclusive license to `Springer Fachmedien Wiesbaden GmbH`,
    part of `Springer Nature 2024` `J. L. Zuckarelli`Learn coding with Python and
    JavaScript [`https://doi.org/10.1007/978-3-658-42912-6_19`](https://doi.org/10.1007/978-3-658-42912-6_19)
  id: totrans-0
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: © 作者（们），独家授权 `Springer Fachmedien Wiesbaden GmbH`，隶属于 `Springer Nature 2024`
    `J. L. Zuckarelli`学习 Python 和 JavaScript 编程 [`https://doi.org/10.1007/978-3-658-42912-6_19`](https://doi.org/10.1007/978-3-658-42912-6_19)
- en: '`19. Program Execution & Hello World: What Do I Have to Do to Get a Program
    Running?`'
  id: totrans-1
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: '`19. 程序执行与 Hello World：我需要做些什么才能让程序运行起来？`'
- en: '`Joachim L. Zuckarelli`^([1](#Aff2)  )(1)`München, Germany`Overview'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Joachim L. Zuckarelli`^([1](#Aff2)  )(1)`德国，慕尼黑`概览'
- en: Now we finally start programming. We write our first small "Hello World" program
    in Python and at the same time familiarize ourselves with `PyCharm`, the powerful
    Python IDE we installed in the last chapter.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在我们终于开始编程了。我们将用 Python 编写第一个小型“Hello World”程序，同时熟悉在上一章中安装的强大 Python IDE——`PyCharm`。
- en: 'In this chapter you will learn:'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在本章中，您将学习：
- en: How the user interface of the `PyCharm` IDE is structured
  id: totrans-5
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`PyCharm` IDE 的用户界面是如何构建的'
- en: how to write and run programs with `PyCharm`
  id: totrans-6
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 如何使用 `PyCharm` 编写和运行程序
- en: how to use Python with `PyCharm` in interactive mode
  id: totrans-7
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 如何在 `PyCharm` 中使用 Python 进行交互式编程
- en: what a simple “Hello World” program in Python looks like.
  id: totrans-8
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 一个简单的“Hello World”程序在 Python 中是怎样的。
- en: '`19.1 Developing and Executing Programs in Python`'
  id: totrans-9
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`19.1 在 Python 中开发和执行程序`'
- en: '`Setting the Interpreter`After starting `PyCharm` for the first time, you will
    see a dialog that looks something like ◘ `Fig. [19.1](#Fig1)`. Since we want to
    write a new program, click the “Create New Project” button. `PyCharm` will now
    ask you for the Python interpreter you want to use. `PyCharm` can work with different
    Python interpreters. This is important if you want to maintain programs that only
    run on an older Python version. Rewriting these programs for a newer Python version
    might be very costly. Therefore, with `PyCharm`, you can simply use an older interpreter,
    and continue to run your aging programs without any problems. The ability to define
    the environment in which your program will run goes even further. Not only can
    you use a different interpreter than the most recent one, but Python also lets
    you choose which Python libraries (called modules and packages) your program will
    access, and in particular which version of those libraries it will use. This way,
    you can build a custom environment for your program to run in, called a `virtual
    environment`. We will discuss modules, packages, and virtual environments in more
    detail in ► `Sect. [23.​3](474412_1_En_23_Chapter.xhtml#Sec7)`. The main thing
    here is to determine the interpreter we want to use. For reasons of compatibility
    with old programs, in some cases it may make sense to work with an older interpreter.![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig1_HTML.png)'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`设置解释器` 在第一次启动 `PyCharm` 后，您将看到一个类似 ◘ `图 19.1` 的对话框。由于我们想编写一个新程序，点击“创建新项目”按钮。`PyCharm`
    会要求您选择要使用的 Python 解释器。`PyCharm` 可以与不同的 Python 解释器一起工作。如果您希望维护仅在旧版本 Python 上运行的程序，这一点尤其重要。将这些程序重写为更新的
    Python 版本可能会非常耗时。因此，使用 `PyCharm`，您可以轻松使用旧版解释器，并继续顺利运行这些老旧程序。定义程序运行环境的能力更为强大。您不仅可以选择不同于最新版本的解释器，Python
    还允许您选择程序将访问的 Python 库（称为模块和包），特别是选择使用这些库的哪个版本。这样，您可以为程序创建一个定制的运行环境，称为 `虚拟环境`。我们将在
    ► `第23.3节` 中详细讨论模块、包和虚拟环境。这里最重要的是确定我们要使用的解释器。为了与旧程序兼容，在某些情况下，使用旧版解释器可能更为合适。![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig1_HTML.png)'
- en: A screenshot of the `PyCharm` welcome page. The project is selected on the list
    on the left. It displays 3 icons `new project`, `open`, and `get from V C S`.
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`PyCharm` 欢迎页面的截图。左侧列表中选中了一个项目，显示了 3 个图标：`新项目`、`打开` 和 `从 V C S 获取`。'
- en: '`Fig. 19.1`'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`图 19.1`'
- en: Start dialog of `PyCharm`
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`PyCharm` 启动对话框'
- en: But don’t worry. Normally, version jumps in Python don’t lead to such major
    changes that previously written programs are suddenly no longer executable. However,
    with the transition from Python version `2.X` to `3.X`, there have indeed been
    major changes that in some cases have had this unfortunate effect. This is where
    `PyCharm`’s ability to handle multiple Python interpreters is a handy functionality.
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 但不用担心。通常，Python 版本的跳跃不会导致如此重大的变化，以至于以前编写的程序突然无法执行。然而，从 Python `2.X` 版本到 `3.X`
    版本的过渡，确实发生了一些重大变化，在某些情况下，确实产生了这种不幸的效果。在这种情况下，`PyCharm` 能够处理多个 Python 解释器的功能就显得非常实用。
- en: Even if we want to work with the latest Python interpreter, we need to tell
    `PyCharm` where to find it. To do this, click “Previously Configured Interpreter”
    from the two central options. With the other option, you could create a virtual
    environment for your project. But we don’t need to do that here. In the “Interpreter”
    selection box, you may currently have “<No interpreter>” (◘ `Fig. [19.2](#Fig2)`).
    If this is the case, click on the button with the three dots, select "Add Local
    Interpreter" and select the option “System Interpreter” from the dialog that opens
    (◘ `Fig. [19.3](#Fig3)`). There you should already find the path to the executable
    file of the Python interpreter. If this is not the case, you can always search
    for the executable file, which is conveniently named `python`，on your hard drive
    and select it manually in the dialog here. Now, after you have selected the interpreter
    for your project, you can specify under “Location” (at the very top of the “New
    Project” dialog, ◘ `Fig. [19.2](#Fig2)`) where `PyCharm` should save your Python
    project. Now you’re ready to get started with Python, so click on “Create” and
    off you go!![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig2_HTML.png)
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 即使我们想使用最新的Python解释器，也需要告诉`PyCharm`在哪里找到它。为此，请从两个中央选项中点击“先前配置的解释器”。使用另一个选项，您可以为项目创建一个虚拟环境。但在这里我们不需要这样做。在“解释器”选择框中，您可能会看到“<No
    interpreter>”（◘ `图 [19.2](#Fig2)`）。如果是这种情况，请点击带有三个点的按钮，选择“添加本地解释器”，然后从弹出的对话框中选择“系统解释器”选项（◘
    `图 [19.3](#Fig3)`）。在这里，您应该已经能找到Python解释器的可执行文件路径。如果没有，您可以在硬盘上搜索名为`python`的可执行文件，并在此对话框中手动选择它。现在，选择了您的项目解释器后，您可以在“位置”下指定（在“新建项目”对话框的顶部，◘
    `图 [19.2](#Fig2)`）`PyCharm`应该在哪里保存您的Python项目。现在，您准备好开始使用Python了，点击“创建”就可以开始了！！[](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig2_HTML.png)
- en: A screenshot of the new project window. It has a location bar and radio icons
    for new environments using and previously configured interpreter. The previously
    configured interpreter is selected.
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 新建项目窗口的截图。它有一个位置栏和用于新环境以及先前配置解释器的单选框。已选择先前配置的解释器。
- en: '`Fig. 19.2`'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`图 19.2`'
- en: Setting up the folder location of your new project in `PyCharm`
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在`PyCharm`中设置新项目的文件夹位置
- en: '![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig3_HTML.png)'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig3_HTML.png)'
- en: A screenshot of the `add python interpreter` window. The system interpreter
    is selected on the left. A file is selected from the drop-down list of the interpreter.
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是`添加Python解释器`窗口的截图。左侧选择了系统解释器。从解释器的下拉列表中选择了一个文件。
- en: '`Fig. 19.3`'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`图 19.3`'
- en: Setting up the interpreter for your new project in `PyCharm`
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在`PyCharm`中为您的新项目设置解释器
- en: Create Python Programs with `PyCharm`
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 使用`PyCharm`创建Python程序
- en: The `PyCharm interface` opens. In newer version of `PyCharm`，the menu is hidden
    behind the icon with the four bars on the left side of the program's title bar.
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`PyCharm`界面已打开。在新版`PyCharm`中，菜单被隐藏在程序标题栏左侧的四条横杠图标后面。'
- en: First, we create a new Python script file. To do this, click the “New…” option
    from the “File” menu and then select the “Python File” (◘ `Fig. [19.4](#Fig4)`).
    If that doesn't work, click the little folder icon on the top of the sidebar on
    the left, select your project and try again (◘ `Fig. [19.5](#Fig5)`). Now you
    need to give the file a name, for example `helloworld.py` (Python files generally
    have a `.py` extension). Your new Python script will now open in the right pane
    of the window. So, let’s start programming!![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig4_HTML.png)
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 首先，我们创建一个新的Python脚本文件。为此，请从“文件”菜单中点击“新建...”选项，然后选择“Python文件”（◘ `图 [19.4](#Fig4)`）。如果这不起作用，请点击左侧边栏顶部的小文件夹图标，选择您的项目并重试（◘
    `图 [19.5](#Fig5)`）。现在，您需要为文件命名，例如`helloworld.py`（Python文件通常具有`.py`扩展名）。您的新Python脚本将打开在窗口的右侧面板中。那么，开始编程吧！！[](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig4_HTML.png)
- en: A screenshot of the `Pycharm` interface for creating a new Python file. The
    left panel indicates the dropdown lists of the first steps with `PyTorch` and
    linear regression. The section on the right denotes preps and manually 1 iteration
    under linear regression.
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是`Pycharm`界面截图，用于创建新的Python文件。左侧面板显示了使用`PyTorch`和线性回归的第一步下拉列表。右侧部分显示了线性回归下的预处理和手动1次迭代。
- en: '`Fig. 19.4`'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`图 19.4`'
- en: Creating a new Python file in `PyCharm`
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在`PyCharm`中创建新的Python文件
- en: '![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig5_HTML.png)'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig5_HTML.png)'
- en: 一张截图展示了创建新Python文件的界面。它在左侧面板中突出显示了Python项目的文件路径。右侧部分表示不同操作的键盘快捷键。
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 一张截图展示了创建新Python文件的界面。它在左侧面板中突出显示了Python项目的文件路径。右侧部分表示不同操作的键盘快捷键。
- en: 图19.5
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 图19.5
- en: 从`*PyCharm*`的项目视图中创建新的Python文件
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 从`*PyCharm*`的项目视图中创建新的Python文件
- en: 在脚本中输入以下代码行：
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在脚本中输入以下代码行：
- en: '`print("Hello World")print("This is my first Python program")`'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`print("Hello World")print("This is my first Python program")`'
- en: 你会注意到`*PyCharm*`支持你输入，例如，当你输入一个左括号时，会立即创建一个右括号。同时，当你将文本光标放在一对括号前面或后面时，这对括号会被高亮显示。这在你有很多嵌套括号，并想知道哪些开闭括号是成对时尤其有帮助。时不时地，IDE还会显示小灯泡图标。如果你点击它们，通常会得到有关如何更好格式化代码的提示，通常可以通过单击直接实现格式化。
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你会注意到`*PyCharm*`支持你输入，例如，当你输入一个左括号时，会立即创建一个右括号。同时，当你将文本光标放在一对括号前面或后面时，这对括号会被高亮显示。这在你有很多嵌套括号，并想知道哪些开闭括号是成对时尤其有帮助。时不时地，IDE还会显示小灯泡图标。如果你点击它们，通常会得到有关如何更好格式化代码的提示，通常可以通过单击直接实现格式化。
- en: 运行Python程序：在`*PyCharm*`和命令行上
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 运行Python程序：在`*PyCharm*`和命令行上
- en: 现在我们想要启动程序。为此，请在编辑器区域的空白处右键单击，并从上下文菜单中选择“Run”选项（或者，你可以按`<CTRL><SHIFT><F10>`）。
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在我们想要启动程序。为此，请在编辑器区域的空白处右键单击，并从上下文菜单中选择“Run”选项（或者，你可以按`<CTRL><SHIFT><F10>`）。
- en: 现在在`*PyCharm*`中发生了一些事情！在窗口的底部，打开了一个类似于选项卡页面的区域，标题为“Run”。这是运行控制台，你的Python程序在这里运行。正如你所看到的，Python已经运行了你在编辑器中输入的小程序，并将两行文本输出到运行控制台。这里出现的输出（以在Windows系统上使用`*PyCharm*`为例）：
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在在`*PyCharm*`中发生了一些事情！在窗口的底部，打开了一个类似于选项卡页面的区域，标题为“Run”。这是运行控制台，你的Python程序在这里运行。正如你所看到的，Python已经运行了你在编辑器中输入的小程序，并将两行文本输出到运行控制台。这里出现的输出（以在Windows系统上使用`*PyCharm*`为例）：
- en: '**`C:\[path to your Python interpreter]\python.exe C:/[path to your project]/helloworld.py`**Hello
    worldThis is my first Python program**`Process finished with exit code 0`**你可以在`*PyCharm*`界面中看到这是什么样子的，见◘图[19.6](#Fig6)。![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig6_HTML.png)'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '**`C:\[path to your Python interpreter]\python.exe C:/[path to your project]/helloworld.py`**Hello
    worldThis is my first Python program**`Process finished with exit code 0`**你可以在`*PyCharm*`界面中看到这是什么样子的，见◘图[19.6](#Fig6)。![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig6_HTML.png)'
- en: 一张程序代码和输出的截图。该程序由两句的`print`语句组成。这两句话在底部的输出屏幕上显示。
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 一张程序代码和输出的截图。该程序由两句的`print`语句组成。这两句话在底部的输出屏幕上显示。
- en: 图19.6
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 图19.6
- en: 在运行控制台中执行程序
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在运行控制台中执行程序
- en: Instead of running your program through `PyCharm`，you could also have run it
    through your operating system’s terminal/console with the command `python helloworld.py`（you
    may need to add path information to the `Python` interpreter or your `Python`
    script, or both, depending on where they are in the directory structure）。You can
    also try this out easily, because three icons below the play button-like icon（which
    represents the Run console）in the sidebar, there is a direct access to the command
    line level of your operating system with the `Terminal` tab。但 don’t worry if you
    don’t have any knowledge of the commands used in the operating system’s terminal,
    thanks to `PyCharm` you can get along without this at first sight archaic operation
    of the operating system：After all, you can simply run your program in the Run
    console（which, of course, does nothing but call the `Python` interpreter with
    your program script and display the output on the `PyCharm` interface）。By the
    way, you will see the command that `PyCharm` uses for this as the first line in
    the run console。You could copy this line into the terminal/console of the operating
    system（or the `Terminal` tab in `PyCharm`）and execute it immediately。
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果不通过`PyCharm`运行程序，你也可以通过操作系统的终端/控制台运行，使用命令`python helloworld.py`（你可能需要根据Python解释器或脚本所在的路径，添加路径信息）。你也可以很容易地尝试，因为在侧边栏播放按钮图标下方有三个图标，其中一个是直接访问操作系统命令行的`Terminal`选项卡。但如果你不熟悉操作系统终端中使用的命令，也不用担心，得益于`PyCharm`，你一开始可以不需要操作这些看似古老的命令行操作：毕竟，你只需在运行控制台中运行程序（实际上，这只是调用`Python`解释器执行你的脚本，并在`PyCharm`界面显示输出）。顺便说一句，你将看到`PyCharm`为此使用的命令作为运行控制台中的第一行。你可以将这一行复制到操作系统的终端/控制台（或`PyCharm`中的`Terminal`选项卡）并立即执行。
- en: In addition to this command and the output of our program, you will also see
    the message `Process finished with exit code 0` in the Run console。It means that
    your program has run through without errors。这是最优情况，我们总是希望能有的。然而，随着你继续编程，你会注意到你会遇到更多错误
    – 也就是说比你希望的更多程序终止。寻找和修复错误是日常编程的一部分，就像锯末是木匠工作坊的一部分 – 不愉快，但不可避免。这适用于初学者和专业人士。
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 除了这个命令和我们程序的输出外，你还会在运行控制台中看到“`Process finished with exit code 0`”的消息。这意味着你的程序已成功运行，没有错误。这是最理想的情况，我们总是希望能有的。然而，随着你继续编程，你会注意到你会遇到更多的错误——也就是说，更多程序会终止。寻找和修复错误是日常编程的一部分，就像锯末是木匠工作坊的一部分——不愉快，但不可避免。这适用于初学者和专业人士。
- en: Therefore, let us now “artificially” cause an error！We currently have an executable
    program in the editor area。Just delete one of the closing brackets in one of the
    `print()` calls。Then run the program again。You can do this again with the Run
    command from the context menu（right mouse button），or – now that we had already
    executed the program – also with the green Play arrow in the Run console's sidebar,
    right below its title。
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因此，现在让我们“人为”地制造一个错误！我们当前在编辑区中有一个可执行程序。只需要删除其中一个`print()`调用中的右括号。然后再次运行程序。你可以通过右键单击上下文菜单中的“Run”命令来执行，也可以通过运行控制台侧边栏下方的绿色播放箭头来执行（既然我们已经执行过程序）。
- en: If you have removed one of the closing parentheses, `PyCharm` , which automatically
    checks the syntax of your program in the background, indicates a possible problem
    with a red “underline” at the position of the missing parentheses. In the sidebar,
    you will see an exclamation mark icon with a red circle indicating there is a
    problem. If you click this button in the sidebar, the `Problem` tab will open
    you will get more information about the nature of the problem (◘ Fig. `[19.7](#Fig7)`).
    However, we will now deliberately ignore all these warnings and stubbornly run
    our (faulty) program. You will then get a red highlighted error message in the
    run console like the following:![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig7_HTML.png)
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你删除了一个闭括号，`PyCharm` 会在后台自动检查程序的语法，并用红色“下划线”标记缺少括号的位置。在侧边栏中，你会看到一个带红色圆圈的感叹号图标，表示存在问题。如果点击这个按钮，`Problem`
    标签页会打开，你将获得更多关于问题性质的信息（◘ 图 `[19.7](#Fig7)`）。不过，现在我们将故意忽略这些警告，并坚持运行我们的（有问题的）程序。然后你会在运行控制台中看到如下的红色高亮错误信息：![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig7_HTML.png)
- en: A screenshot of a set of program codes and the Python console. The program consists
    of `print` statements for 2 sentences. One of the `print` statements is selected,
    which is displayed on the Python console at the bottom.
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 一张程序代码和 Python 控制台的截图。程序由两个 `print` 语句组成。一个 `print` 语句被选中，显示在底部的 Python 控制台中。
- en: Fig. 19.7
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 图 19.7
- en: Output in the Python console in `PyCharm`
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在 `PyCharm` 中的 Python 控制台输出
- en: '`File "C:/[path to your project]/helloworld.py", line 3^Unexpected EOF while
    parsingProcess finished with exit code 1`'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`File "C:/[path to your project]/helloworld.py", line 3^Unexpected EOF while
    parsingProcess finished with exit code 1`'
- en: The error messages output by the Python interpreter are often of limited help
    in debugging, as you can clearly see in this example. The syntax check provided
    by `PyCharm` in the `Problem` tab is often much more useful. By the way, in the
    output you can also see the exit code with value 1, which signals that the program
    was terminated prematurely with an error.
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: Python 解释器输出的错误信息在调试时通常帮助有限，正如你在这个例子中清楚看到的那样。在 `Problem` 标签中，`PyCharm` 提供的语法检查通常要更有用。顺便说一下，在输出中你还可以看到退出代码值为
    1，这表示程序由于错误被提前终止了。
- en: Although Python is an interpreted language, and as such is normally slower than
    compiled programming languages, the programs that we will develop in the next
    few chapters will usually run briskly. However, especially when working with looping
    constructs, which we will do in ► Sect. `[24.​4](474412_1_En_24_Chapter.xhtml#Sec8)`,
    it is quite possible for a program to take longer to run, especially if you have
    accidentally built your loop in such a way that it would never (at least not without
    external intervention or a lack of system resources) come to an end. That’s when
    it’s handy to be able to abort a program while it’s running. This is exactly what
    can be done in `PyCharm` with the “Stop” button in the sidebar of the Run console.
    While your script is running, this button is colored red and can be clicked.
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 尽管 Python 是一种解释型语言，通常比编译型语言运行速度慢，但我们将在接下来的几章中开发的程序通常运行得非常流畅。然而，特别是在处理循环结构时（我们将在
    ► 第 `[24.4](474412_1_En_24_Chapter.xhtml#Sec8)节`中讨论），程序可能会运行得更慢，尤其是当你不小心编写了一个循环，导致它永远（至少没有外部干预或系统资源不足的情况下）无法结束时。这时，如果你能够在程序运行时中止它，就会很方便。这正是
    `PyCharm` 中的“Stop”按钮可以做到的，它位于运行控制台的侧边栏中。你的脚本运行时，按钮会变为红色，并且可以点击。
- en: '19.2 The Python console: Python in interactive mode'
  id: totrans-53
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 19.2 Python 控制台：Python 的交互模式
- en: 在`*PyCharm*`界面底部的标签中，我们尚未查看的是`*Python console*`。它允许我们在`*interactive mode*`下运行`Python`。这意味着我们可以输入一条`Python`语句并立即执行。因此，通常输入的不是一整串语句并一起执行（尽管那也是可能的），而只是单条语句。指令后面跟着`Python`的响应（无论多么精确），然后你可以输入新的内容。由于指令输入和`Python`处理指令之间的这种相互作用，它被称为交互模式，有时称为`*REPL*`（`*read-eval-print*
    loop`）。输入在`*prompt*`中完成，`prompt`仅仅是输入请求。在`Python console`中，提示由三个大于号（`>>>`）标记。
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在 `*PyCharm*` 界面底部的标签中，我们尚未查看的是 `*Python console*`。它允许我们在 `*interactive mode*`
    下运行 `Python`。这意味着我们可以输入一条 `Python` 语句并立即执行。因此，通常输入的不是一整串语句并一起执行（尽管那也是可能的），而只是单条语句。指令后面跟着
    `Python` 的响应（无论多么精确），然后你可以输入新的内容。由于指令输入和 `Python` 处理指令之间的这种相互作用，它被称为交互模式，有时称为
    `*REPL*`（`*read-eval-print* loop`）。输入在 `*prompt*` 中完成，`prompt` 仅仅是输入请求。在 `Python
    console` 中，提示由三个大于号（`>>>`）标记。
- en: 在`*PyCharm*`侧边栏底部，点击“Python Console”图标（带有`Python`标志的那个图标，就在象征运行控制台的“Play”图标下方）。现在，在`prompt`处，输入我们上面脚本中的一个`**print()**`语句，并通过按下`<ENTER>`键确认：
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在 `*PyCharm*` 侧边栏底部，点击“Python Console”图标（带有 `Python` 标志的那个图标，就在象征运行控制台的“Play”图标下方）。现在，在
    `prompt` 处，输入我们上面脚本中的一个 `**print()**` 语句，并通过按下 `<ENTER>` 键确认：
- en: '`>>>` `print("Hello World")` Hello world 你可以看到我们的指令直接执行。之后，新的提示直接出现，你可以在这里输入进一步的指令。◘
    图`[19.8](#Fig8)`显示了在执行我们的语句后`*PyCharm*`中的`Python console`。![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig8_HTML.png)'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`>>>` `print("Hello World")` Hello world 你可以看到我们的指令直接执行。之后，新的提示直接出现，你可以在这里输入进一步的指令。◘
    图`[19.8](#Fig8)`显示了在执行我们的语句后`*PyCharm*`中的`Python console`。![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig8_HTML.png)'
- en: 一组程序代码及其输出的截图。该程序由2个句子的`print`语句组成，带有错误。错误显示在底部的输出屏幕上。
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 一组程序代码及其输出的截图。该程序由2个句子的`print`语句组成，带有错误。错误显示在底部的输出屏幕上。
- en: '`Fig. 19.8`'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Fig. 19.8`'
- en: 执行语句在`Python`控制台中的`*PyCharm*`。
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 执行语句在`Python`控制台中的`*PyCharm*`。
- en: '![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig9_HTML.jpg)'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![](../images/474412_1_En_19_Chapter/474412_1_En_19_Fig9_HTML.jpg)'
- en: '`Jupyter`笔记本的截图。线性回归部分被高亮显示。'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Jupyter`笔记本的截图。线性回归部分被高亮显示。'
- en: '`Fig. 19.9`'
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Fig. 19.9`'
- en: '`Jupyter`中的笔记本'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Jupyter`中的笔记本'
- en: 在前面的代码部分，以及本书其余部分中，提示由字符串`**>>>**`表示。请注意，你必须不输入这些提示字符！任何没有提示前缀的内容都是`Python`的输出。
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在前面的代码部分，以及本书其余部分中，提示由字符串`**>>>**`表示。请注意，你必须不输入这些提示字符！任何没有提示前缀的内容都是`Python`的输出。
- en: 你可以使用控制台快速尝试`Python`命令指令。此外，正如我们在前一章中看到的，你可以从这里调用`**help**`（试试看，输入`**help(print)**`以获取关于`**print()**`函数的帮助信息）。请注意，`Python
    console`和`Python script editor`是两个完全不同且整齐分开的世界。特别是，你不能从`Python console`访问你在脚本中使用的变量。但关于这一点更多内容在►`Chap.
    [21](474412_1_En_21_Chapter.xhtml)`。
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你可以使用控制台快速尝试`Python`命令指令。此外，正如我们在前一章中看到的，你可以从这里调用`**help**`（试试看，输入`**help(print)**`以获取关于`**print()**`函数的帮助信息）。请注意，`Python
    console`和`Python script editor`是两个完全不同且整齐分开的世界。特别是，你不能从`Python console`访问你在脚本中使用的变量。但关于这一点更多内容在►`Chap.
    [21](474412_1_En_21_Chapter.xhtml)`。
- en: Of course, you can also start the Python console directly from the command line
    (console/terminal) of your operating system. To do this, simply run the `python`
    program without any additional parameters. The Python console will then open in
    your operating system terminal. You can exit interactive mode again by entering
    the `quit()` statement, which terminates `python` and returns you to the operating
    system level.
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当然，你也可以直接从操作系统的命令行（控制台/终端）启动Python控制台。为此，只需运行`python`程序而不带任何额外参数。Python控制台将在你的操作系统终端中打开。你可以通过输入`quit()`语句来退出交互模式，这将终止`python`并返回到操作系统级别。
- en: '`19.3 Get to Know PyCharm`'
  id: totrans-67
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`19.3 了解PyCharm`'
- en: You have already learned about some of the features of `PyCharm`’s interface.
    Of course, `PyCharm` can do much more; however, we will not exhaust the full range
    of `PyCharm`’s features here. Some features are only relevant if you want to develop
    software on a professional level. And as with any traditional office application,
    even the most professional users don’t take advantage of all the features the
    software offers them.
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你已经了解了`PyCharm`界面的一些功能。自然，`PyCharm`还能做更多的事情；然而，我们不会在这里列举`PyCharm`的所有功能。有些功能仅在你想要以专业水平开发软件时才相关。就像任何传统的办公软件一样，即便是最专业的用户也不会利用软件提供的所有功能。
- en: The `PyCharm` interface is, like that of many integrated development environments,
    quite complex with its different panes and tabs, some of which are nested within
    each other. Even though we already get by with a relatively modest set of features
    for our purposes, it’s still a good idea to just play around with `PyCharm` a
    bit and get to know the interface better. Be curious and try things out. Fortunately,
    nothing can break during your explorations. In ► Sect. `[23.3.3](474412_1_En_23_Chapter.xhtml#Sec10)`,
    where we talk about working with installed modules, and in ► Sect. `[25.5](474412_1_En_25_Chapter.xhtml#Sec8)`,
    where we talk about debugging, we will return to the `PyCharm interface` and learn
    about some more features.
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`PyCharm`界面，像许多集成开发环境一样，界面比较复杂，有多个面板和标签，其中一些是嵌套在其他面板中的。即使我们目前的目的只使用相对简单的功能集，仍然建议你稍微玩一下`PyCharm`，更好地熟悉这个界面。保持好奇心并尝试一些功能。幸运的是，在探索过程中没有什么会坏掉。在►
    Sect. `[23.3.3](474412_1_En_23_Chapter.xhtml#Sec10)`中，我们将讨论如何使用已安装的模块，在► Sect.
    `[25.5](474412_1_En_25_Chapter.xhtml#Sec8)`中，我们将讲解调试功能，我们会再次回到`PyCharm interface`并学习一些其他功能。'
- en: '`19.4 Some Alternatives to PyCharm for Python Code Execution`'
  id: totrans-70
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`19.4 PyCharm的替代方案`'
- en: If using `PyCharm` is too complicated for you, you can of course also use another
    Integrated Development Environment. There is no shortage of alternatives on the
    market. The simplest is probably `IDLE`, the Integrated Development Environment
    that comes with the Python installation. It allows Python code to be executed
    in script/batch mode or interactively in the Python console. `IDLE` supports syntax
    highlighting, but is otherwise not very convenient. Nevertheless, `IDLE` serves
    its purpose well. So before you throw in the towel because you feel overwhelmed
    with the “battleship” `PyCharm`，try `IDLE`! Everything we do in this book can
    also be done with `IDLE` instead of `PyCharm`.
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果使用`PyCharm`对你来说太复杂，你当然也可以使用其他集成开发环境。市场上有很多替代方案。最简单的可能是`IDLE`，即Python安装包中自带的集成开发环境。它允许Python代码以脚本/批处理模式执行，或在Python控制台中交互式执行。`IDLE`支持语法高亮，但在其他方面并不是特别方便。尽管如此，`IDLE`仍然能够很好地完成其任务。所以，在你感到被“战舰”般复杂的`PyCharm`吓倒之前，先尝试一下`IDLE`！本书中的所有内容也可以用`IDLE`代替`PyCharm`来完成。
- en: '`Jupyter`是另一种执行Python代码的流行方式。`Jupyter`在网页浏览器中运行，类似于Python控制台，允许你以交互模式输入Python命令并查看结果。然而，不仅文本结果会显示，还有图形，这在处理统计数据时非常有用。除了Python代码和输出外，你还可以放置标题、解释性文本和其他元素。所有这些合在一起形成了一个所谓的`Jupyter`笔记本，可以随时保存、修改，并且可以整体或部分反复执行。保存的笔记本可以轻松分享给团队成员、同事或其他感兴趣的人。因此，`Jupyter`在探索数据和记录工作步骤方面非常有用。除了Python，`Jupyter`还支持一系列其他语言，如`R`或`Scala`。图`[19.9](#Fig9)`展示了一个包含一些代码和输出的`Jupyter`笔记本示例，以及一些不属于实际代码但仅用于结构化笔记本的标题。'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Jupyter`是另一种执行Python代码的流行方式。`Jupyter`在网页浏览器中运行，类似于Python控制台，允许你以交互模式输入Python命令并查看结果。然而，不仅文本结果会显示，还有图形，这在处理统计数据时非常有用。除了Python代码和输出外，你还可以放置标题、解释性文本和其他元素。所有这些合在一起形成了一个所谓的`Jupyter`笔记本，可以随时保存、修改，并且可以整体或部分反复执行。保存的笔记本可以轻松分享给团队成员、同事或其他感兴趣的人。因此，`Jupyter`在探索数据和记录工作步骤方面非常有用。除了Python，`Jupyter`还支持一系列其他语言，如`R`或`Scala`。图`[19.9](#Fig9)`展示了一个包含一些代码和输出的`Jupyter`笔记本示例，以及一些不属于实际代码但仅用于结构化笔记本的标题。'
- en: 如果你在路上而手头没有Python解释器，你也可以使用`ChatGPT`运行Python代码。`ChatGPT`有一个可以执行Python代码的环境（以前称为代码解释器）。例如，可以问`ChatGPT`：“执行以下Python代码并显示结果”。你可以直接在提示框中编写代码或将其作为文件上传。
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你在路上而手头没有Python解释器，你也可以使用`ChatGPT`运行Python代码。`ChatGPT`有一个可以执行Python代码的环境（以前称为代码解释器）。例如，可以问`ChatGPT`：“执行以下Python代码并显示结果”。你可以直接在提示框中编写代码或将其作为文件上传。
- en: 19.5 Summary
  id: totrans-74
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 19.5 小结
- en: 在本章中，我们探讨了如何使用`PyCharm`开发和运行Python程序。
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何使用`PyCharm`开发和运行Python程序。
- en: 以下是本章的关键点：
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下是本章的关键点：
- en: '`PyCharm`是一个功能强大的集成开发环境（IDE），具有广泛的特性，而我们在“正常操作”中仅使用其中的一小部分。'
  id: totrans-77
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`PyCharm`是一个功能强大的集成开发环境（IDE），具有广泛的特性，而我们在“正常操作”中仅使用其中的一小部分。'
- en: '`PyCharm`通过语法高亮和实时语法检查提供实用功能，以支持Python程序的开发。'
  id: totrans-78
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`PyCharm`通过语法高亮和实时语法检查提供实用功能，以支持Python程序的开发。'
- en: '`PyCharm`可以处理不同的解释器。因此，在开始工作之前，必须选择你想使用的解释器。即使你只有一个解释器可用（即你与最新Python版本一起安装的那个），你也必须这样做。'
  id: totrans-79
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`PyCharm`可以处理不同的解释器。因此，在开始工作之前，必须选择你想使用的解释器。即使你只有一个解释器可用（即你与最新Python版本一起安装的那个），你也必须这样做。'
- en: Python程序在`PyCharm`的运行控制台中运行。
  id: totrans-80
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: Python程序在`PyCharm`的运行控制台中运行。
- en: 此外，还有Python控制台，允许Python在交互模式下运行；在这里输入的Python命令会立即执行。
  id: totrans-81
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 此外，还有Python控制台，允许Python在交互模式下运行；在这里输入的Python命令会立即执行。
- en: Python程序也可以直接使用Python解释器`python`运行，而无需使用`PyCharm`；如果在没有Python脚本文件作为参数的情况下调用Python解释器，则会启动交互模式。你可以随时通过输入`quit()`退出。
  id: totrans-82
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: Python程序也可以直接使用Python解释器`python`运行，而无需使用`PyCharm`；如果在没有Python脚本文件作为参数的情况下调用Python解释器，则会启动交互模式。你可以随时通过输入`quit()`退出。
- en: 你可以使用`print()`函数在屏幕上输出信息。
  id: totrans-83
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 你可以使用`print()`函数在屏幕上输出信息。
