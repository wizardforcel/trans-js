- en: Chapter 7
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 第7章
- en: These are the solutions to the exercises found in the section `​[Exercises](f_0075.xhtml#big.o.in.everyday.code.exercises)`.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这些是位于`[练习](f_0075.xhtml#big.o.in.everyday.code.exercises)`部分的习题解决方案。
- en: Here, `N` is the size of the array. Our loop runs for `N / 2` times, as it processes
    two values each round of the loop. However, this is expressed as `O(N)` because
    we drop the constant.
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 在这里，`N`是数组的大小。我们的循环运行`N / 2`次，因为每轮循环处理两个值。然而，这被表示为`O(N)`，因为我们忽略了常数。
- en: It’s slightly tricky to define `N` in this case since we’re dealing with two
    distinct arrays. The algorithm only processes each value once, so we could decide
    to call `N` the total number of values between both arrays, and the time complexity
    would be `O(N)`。If we want to be more literal and call one array `N` and the other
    `M`，we could alternatively express the efficiency as `O(N + M)`。However, because
    we’re simply adding `N` and `M` together, it’s simpler to just use `N` to refer
    to the total number of data elements across both arrays and call it `O(N)`。
  id: totrans-3
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 在这种情况下定义`N`稍微有些棘手，因为我们处理的是两个不同的数组。算法仅处理每个值一次，因此我们可以决定将`N`称为两个数组之间的值的总数，时间复杂度将为`O(N)`。如果我们想更字面地理解，将一个数组称为`N`，另一个称为`M`，我们可以将效率表达为`O(N
    + M)`。然而，由于我们只是将`N`和`M`相加，因此更简单的做法是直接用`N`来指代两个数组中的数据元素总数，并称之为`O(N)`。
- en: In a worst-case scenario, this algorithm runs (approximately) as many times
    as the number of characters in the `needle` multiplied by the number of characters
    in the `haystack`. Imagine, for example, that we’re searching for the `needle`
    `ab` within the `haystack` `aaaaaaaaaaab`. Every time our outer loop reaches a
    new `a`，we run an inner loop looking for `ab`。
  id: totrans-4
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 在最坏的情况下，这个算法的运行次数（大约）等于`needle`中的字符数乘以`haystack`中的字符数。想象一下，我们正在搜索`needle` `ab`在`haystack`
    `aaaaaaaaaaab`中。每当我们的外循环到达一个新的`a`时，我们就会运行一个内循环来查找`ab`。
- en: Since the `needle` and `haystack` may have different numbers of characters,
    this is `O(N * M)`.
  id: totrans-5
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 因为`needle`和`haystack`可能有不同的字符数量，所以这是`O(N * M)`。
- en: '`N` is the size of the array, and the time complexity is `O(N³)`，as it’s processed
    through triply-nested loops. Really, the middle loop runs `N / 2` times, and the
    innermost loop runs `N / 4` times, so this is `N * (N / 2) * (N / 4)`，which is
    `N³ / 8` steps. But we drop the constant, leaving us with `O(N³)`.'
  id: totrans-6
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '`N`是数组的大小，时间复杂度为`O(N³)`，因为它通过三重嵌套循环处理。实际上，中间循环运行`N / 2`次，最内层循环运行`N / 4`次，因此这是`N
    * (N / 2) * (N / 4)`，结果是`N³ / 8`步。但我们忽略了常数，最终得到`O(N³)`。'
- en: '`N` is the size of the resumes array. Since in each round of the loop we eliminate
    half of the resumes, we have an algorithm of `O(log N)`.'
  id: totrans-7
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '`N`是简历数组的大小。由于在每轮循环中我们消除一半的简历，因此我们有一个`O(log N)`的算法。'
