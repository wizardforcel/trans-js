- en: '| Recipe 21 | Equalizing Incompatible Characters with normalize() |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: '| 食谱 21 | 使用normalize()方法使不兼容字符统一 |'
- en: Task
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务
- en: Imagine having a cooking application, and you want to add a feature to sort
    recipes based on the cooking method. The code you developed performs well in sorting
    recipes for methods like steaming and grilling. However, when it comes to sautéing,
    the code fails to recognize certain recipes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个烹饪应用程序，并且想要添加一个功能来根据烹饪方法对食谱进行排序。你开发的代码在排序蒸煮和烤制等方法的食谱时表现良好。然而，当涉及到煎炒时，代码无法识别某些食谱。
- en: 'After investigating the problem, you realize that the code sometimes fails
    to match the word “sautéing” even though the characters appear to be the same:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在调查问题后，你会发现代码有时无法匹配“sautéing”这个词，尽管字符看起来是相同的：
- en: '[part_1/equalizing_characters/normalize_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/equalizing_characters/normalize_ex1.js)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_1/equalizing_characters/normalize_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/equalizing_characters/normalize_ex1.js)'
- en: '|   | *// Notice the length of the strings* |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '|   | *// 请注意字符串的长度* |'
- en: '![images/normalize_ex1.png](images/normalize_ex1.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![images/normalize_ex1.png](images/normalize_ex1.png)'
- en: '“é” in method has a code point of U+00E9, while “é” in keyword consists of
    two code points: U+0065 and U+0301\. As a result, the strict equality operator
    (===) considers them unequal.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 方法中的“é”字符的代码点是U+00E9，而关键字中的“é”由两个代码点组成：U+0065和U+0301。因此，严格相等运算符（===）认为它们不相等。
- en: The difference in the number of code points isn’t the only reason why your code
    may fail. Certain characters have the same length but are encoded using two different
    code points, which can also cause issues with your code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 代码点数量的差异并不是代码可能失败的唯一原因。某些字符虽然长度相同，但使用了两个不同的代码点进行编码，这也可能导致代码出现问题。
- en: For instance, the character “Å” can be encoded either as U+212B ANGSTROM SIGN
    or as U+00C5 LATIN CAPITAL LETTER A WITH RING ABOVE. These two characters aren’t
    equal in JavaScript unless you normalize them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，字符“Å”可以被编码为U+212B ANGSTROM SIGN或U+00C5 LATIN CAPITAL LETTER A WITH RING ABOVE。这两个字符在JavaScript中不相等，除非你将它们规范化。
- en: Solution
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use the normalize() method to convert the strings to a normalized form before
    comparing them:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用normalize()方法在比较字符串之前将它们转换为规范化形式：
- en: '[part_1/equalizing_characters/normalize_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/equalizing_characters/normalize_ex2.js)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_1/equalizing_characters/normalize_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/equalizing_characters/normalize_ex2.js)'
- en: '|   | *// Solution* |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '|   | *// 解决方案* |'
- en: '![images/normalize_ex2.png](images/normalize_ex2.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![images/normalize_ex2.png](images/normalize_ex2.png)'
- en: This function enables us to determine if two strings are equal, taking into
    account any differences in their Unicode representation.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数可以让我们确定两个字符串是否相等，考虑到它们的Unicode表示之间的任何差异。
- en: Discussion
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论
- en: Characters that can be represented more than one way make text processing more
    difficult. Fortunately, the Unicode standard provides a text normalization procedure
    that converts strings into forms that can be compared directly for identity.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 可以用多种方式表示的字符使文本处理变得更加困难。幸运的是，Unicode标准提供了一种文本规范化程序，将字符串转换为可以直接比较身份的形式。
- en: Inside the areEqual() function, we use the normalize() method to convert both
    strings to a normalized form using the Normalization Form Canonical Composition
    (NFC) algorithm. This algorithm ensures that any Unicode characters with multiple
    code points are represented in their composed form.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在areEqual()函数内部，我们使用normalize()方法将两个字符串转换为规范化形式，采用规范化形式规范合成（NFC）算法。该算法确保任何具有多个代码点的Unicode字符都以其组合形式表示。
- en: We can pass three other arguments to normalize() which we’ll look at shortly.
    The form to use depends on your program requirements, but NFC is usually a better
    choice for general text because it’s more compatible with characters converted
    from legacy encodings.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以传递三个其他参数给normalize()，稍后我们将详细讨论。使用的格式取决于你的程序需求，但NFC通常是处理普通文本的更好选择，因为它与从旧版编码转换过来的字符更兼容。
- en: Unless you’re one of those poor souls who have to support IE11, you don’t need
    a polyfill here. Happily, all modern browsers support normalize().^([[21]](f_0032.xhtml#FOOTNOTE-21))
    After the normalization, we use the === operator to compare the two strings and
    return true if they are equal.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你是那些不得不支持IE11的可怜人之一，否则在这里你不需要polyfill。幸运的是，所有现代浏览器都支持normalize()。^([[21]](f_0032.xhtml#FOOTNOTE-21))
    规范化后，我们使用===运算符来比较这两个字符串，如果它们相等则返回true。
- en: 'We can normalize a string either based on canonical equivalence or based on
    compatibility. The argument we pass to normalize() determines the form of Unicode
    normalization:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据规范等价性或兼容性来规范化字符串。传递给normalize()的参数决定了Unicode规范化的形式：
- en: 'Normalization Form D (NFD): Canonical Decomposition'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规范化形式D（NFD）：规范分解
- en: 'Normalization Form C (NFC): Canonical Decomposition, followed by Canonical
    Composition'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规范化形式C（NFC）：规范分解，随后是规范合成
- en: 'Normalization Form KD (NFKD): Compatibility Decomposition'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规范化形式KD（NFKD）：兼容性分解
- en: 'Normalization Form KC (NFKC): Compatibility Decomposition, followed by Canonical
    Composition'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规范化形式KC（NFKC）：兼容性分解，随后是规范合成
- en: Two characters are canonically equivalent when they have different code points
    but are rendered in the same way, just like “é” in our example. When we say NFC
    performs canonical composition, that means it merges the code points of the character
    into a single code point, so “é” consisting of U+0065 and U+0301 becomes “é” made
    of U+00E9\. Canonical decomposition is the opposite process.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当两个字符具有不同的代码点但以相同方式呈现时，它们是规范等价的，就像我们示例中的“é”一样。当我们说NFC执行规范合成时，意味着它将字符的代码点合并成一个单一的代码点，因此由U+0065和U+0301组成的“é”变成了由U+00E9组成的“é”。规范分解则是相反的过程。
- en: 'Now, if two characters have different appearances and code points but have
    the same meaning, they are classified as compatibly equivalent. Take a look at
    the following table for the two forms of equivalent sequences:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果两个字符具有不同的外观和代码点，但具有相同的含义，它们被归类为兼容等价。请看下面的表格，了解两种等价序列的形式：
- en: '![images/Compatibly_table.png](images/Compatibly_table.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![images/Compatibly_table.png](images/Compatibly_table.png)'
- en: 'When we normalize a string, we’re telling the program to select one of these
    equivalent encodings so that the characters are either all composed or all decomposed.
    Notice how the arrow on some cells points only to the right. That means we can
    convert a character to its compatibility decomposition form but not the reverse.
    So, we should be careful when using this type of conversion: if we lose access
    to the source text, the original form of characters is lost forever because there’s
    no function to revert your text back to its composed form.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们规范化一个字符串时，我们告诉程序选择这些等效编码之一，以便字符要么全部组合，要么全部分解。注意有些单元格中的箭头只指向右边。这意味着我们可以将一个字符转换为其兼容分解形式，但不能反向转换。因此，在使用这种转换时我们应该小心：如果我们失去对源文本的访问，字符的原始形式将永远丢失，因为没有函数可以将文本恢复为组合形式。
- en: 'Consider the following code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请看以下代码：
- en: '[part_1/equalizing_characters/normalize_ex3.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/equalizing_characters/normalize_ex3.js)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_1/equalizing_characters/normalize_ex3.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/equalizing_characters/normalize_ex3.js)'
- en: '|   | **const** str1 = *"***\***u00E9"*; *// é* |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** str1 = *"***\***u00E9"*; *// é* |'
- en: '|   | **const** str2 = *"***\***u0065***\***u0301"*; *// é* |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** str2 = *"***\***u0065***\***u0301"*; *// é* |'
- en: '|   |  |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | console.log(str1 === str2); *// → false* |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '|   | console.log(str1 === str2); *// → false* |'
- en: '|   |  |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | *// normalize str1* |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '|   | *// normalize str1* |'
- en: '|   | **const** str1norm = str1.normalize(*"NFD"*); *// \u0065\u0301* |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** str1norm = str1.normalize(*"NFD"*); *// \u0065\u0301* |'
- en: '|   |  |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | console.log(str1norm === str2); *// → true* |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '|   | console.log(str1norm === str2); *// → true* |'
- en: 'In this code, we’re replacing any canonical composition in str1 with its decomposed
    forms. If we pass NFC to normalize(), the method does the opposite:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们正在将 str1 中的任何规范组合替换为其分解形式。如果我们将 NFC 传递给 normalize()，该方法则执行相反的操作：
- en: '[part_1/equalizing_characters/normalize_ex4.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/equalizing_characters/normalize_ex4.js)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_1/equalizing_characters/normalize_ex4.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/equalizing_characters/normalize_ex4.js)'
- en: '|   | **const** str1 = *"***\***u00E9"*; *// é* |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** str1 = *"***\***u00E9"*; *// é* |'
- en: '|   | **const** str2 = *"***\***u0065***\***u0301"*; *// é* |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** str2 = *"***\***u0065***\***u0301"*; *// é* |'
- en: '|   |  |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | *// normalize str2* |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '|   | *// normalize str2* |'
- en: '|   | **const** str2norm = str2.normalize(*"NFC"*); *// \u00E9* |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** str2norm = str2.normalize(*"NFC"*); *// \u00E9* |'
- en: '|   |  |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | console.log(str2norm === str1); *// → true* |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '|   | console.log(str2norm === str1); *// → true* |'
- en: '| The Default Parameter |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 默认参数 |'
- en: '| --- |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| ![images/aside-icons/tip.png](images/aside-icons/tip.png) | If you pass no
    argument to normalize(), it will use NFC. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| ![images/aside-icons/tip.png](images/aside-icons/tip.png) | 如果你没有传递任何参数给
    normalize()，它将使用 NFC。 |'
- en: 'There are two forms of compatibility normalization: NFKD and NFKC. Conversion
    to NFKD works just like NFD. It replaces canonical composites in the string with
    their decomposed forms. Additionally, it replaces any compatibility composites
    with their decomposition form.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 兼容规范化有两种形式：NFKD 和 NFKC。转换为 NFKD 的工作原理类似于 NFD。它将字符串中的规范组合替换为其分解形式。此外，它还将任何兼容组合替换为其分解形式。
- en: 'If the glyph is just a compatible composition of another glyph, then normalizing
    it with NFD or NFC won’t change it. On the other hand, both NFKD and NFKC will
    replace the glyph with its compatible decomposition form:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果字形只是另一个字形的兼容组合，那么使用 NFD 或 NFC 进行规范化不会改变它。另一方面，NFKD 和 NFKC 都会将字形替换为其兼容的分解形式：
- en: '[part_1/equalizing_characters/normalize_ex6.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/equalizing_characters/normalize_ex6.js)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_1/equalizing_characters/normalize_ex6.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/equalizing_characters/normalize_ex6.js)'
- en: '|   | **const** str1 = *"⑥"*; *// \u2465* |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** str1 = *"⑥"*; *// \u2465* |'
- en: '|   |  |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | console.log(str1.normalize(*"NFD"*)); *// → ⑥ (\u2465)* |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '|   | console.log(str1.normalize(*"NFD"*)); *// → ⑥ (\u2465)* |'
- en: '|   | console.log(str1.normalize(*"NFC"*)); *// → ⑥ (\u2465)* |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '|   | console.log(str1.normalize(*"NFC"*)); *// → ⑥ (\u2465)* |'
- en: '|   | console.log(str1.normalize(*"NFKD"*)); *// → 6 (\u0036)* |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '|   | console.log(str1.normalize(*"NFKD"*)); *// → 6 (\u0036)* |'
- en: '|   | console.log(str1.normalize(*"NFKC"*)); *// → 6 (\u0036)* |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '|   | console.log(str1.normalize(*"NFKC"*)); *// → 6 (\u0036)* |'
- en: '|   |  |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | **const** str2 = *"⁶"*; *// \u2076* |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** str2 = *"⁶"*; *// \u2076* |'
- en: '|   |  |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | console.log(str2.normalize(*"NFD"*)); *// → ⁶ (\u2076)* |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '|   | console.log(str2.normalize(*"NFD"*)); *// → ⁶ (\u2076)* |'
- en: '|   | console.log(str2.normalize(*"NFC"*)); *// → ⁶ (\u2076)* |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '|   | console.log(str2.normalize(*"NFC"*)); *// → ⁶ (\u2076)* |'
- en: '|   | console.log(str2.normalize(*"NFKD"*)); *// → 6 (\u0036)* |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '|   | console.log(str2.normalize(*"NFKD"*)); *// → 6 (\u0036)* |'
- en: '|   | console.log(str2.normalize(*"NFKC"*)); *// → 6 (\u0036)* |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '|   | console.log(str2.normalize(*"NFKC"*)); *// → 6 (\u0036)* |'
- en: In this code, conversion to NFD or NFC does not affect str1 and str2 because
    the strings are compatible compositions, not canonical compositions. Interestingly,
    conversion to both NFKD and NFKC produces the same result because NFKC uses compatibility
    decomposition as the basis for canonical composition. In this case, the character
    has no canonical composition form, so it’s just converted to compatibility decomposition.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，转换为 NFD 或 NFC 不会影响 str1 和 str2，因为这些字符串是兼容组合，而不是规范组合。有趣的是，转换为 NFKD 和 NFKC
    会产生相同的结果，因为 NFKC 使用兼容分解作为规范组合的基础。在这种情况下，字符没有规范的组合形式，因此它只是转换为兼容分解。
- en: 'The difference between NFKC and NFKD becomes more apparent when a glyph is
    a canonical composition of glyphs that are compatible with another glyph. Consider
    the following code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当字形是规范组合，且与另一个字形兼容时，NFKC 和 NFKD 之间的差异更加明显。考虑以下代码：
- en: '[part_1/equalizing_characters/normalize_ex7.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/equalizing_characters/normalize_ex7.js)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_1/equalizing_characters/normalize_ex7.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/equalizing_characters/normalize_ex7.js)'
- en: '|   | **const** str = *"ẛ"*; *// \u1E9B* |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** str = *"ẛ"*; *// \u1E9B* |'
- en: '|   |  |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | console.log(str.normalize(*"NFD"*)); *// → ẛ (\u017F\u0307)* |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '|   | console.log(str.normalize(*"NFD"*)); *// → ẛ (\u017F\u0307)* |'
- en: '|   | console.log(str.normalize(*"NFC"*)); *// → ẛ (\u1E9B)* |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '|   | console.log(str.normalize(*"NFC"*)); *// → ẛ (\u1E9B)* |'
- en: '|   |  |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | console.log(str.normalize(*"NFKD"*)); *// → ṡ (\u0073\u0307)* |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '|   | console.log(str.normalize(*"NFKD"*)); *// → ṡ (\u0073\u0307)* |'
- en: '|   | console.log(str.normalize(*"NFKC"*)); *// → ṡ (\u1E61)* |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '|   | console.log(str.normalize(*"NFKC"*)); *// → ṡ (\u1E61)* |'
- en: As we said, NFKC uses compatibility decomposition as the basis for canonical
    composition. The compatibility decomposition of \u1E9B is \u0073\u0307, and the
    canonical composition of \u0073\u0307 is \u1E61.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所说，NFKC 使用兼容性分解作为规范组合的基础。\u1E9B 的兼容性分解是 \u0073\u0307，而 \u0073\u0307 的规范组合是
    \u1E61。
- en: Remember, perform text normalization before storing or processing texts to avoid
    possible pitfalls. But be careful when using normalization forms KD and KC as
    they discard formatting distinctions that may be essential to the semantics of
    the text. Therefore, you shouldn’t blindly apply them to arbitrary text. NFC is
    usually a better choice for general text.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在存储或处理文本之前，务必进行文本规范化，以避免可能的陷阱。但在使用规范化形式 KD 和 KC 时要小心，因为它们会丢失可能对文本语义至关重要的格式区分。因此，您不应该盲目地将它们应用于任意文本。对于一般文本来说，NFC
    通常是更好的选择。
