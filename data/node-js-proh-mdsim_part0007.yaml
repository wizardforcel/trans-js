- en: 'Chapter 3: Node.js Modules and the Node Package Manager (NPM)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章：Node.js 模块与 Node 包管理器（NPM）
- en: In this chapter, we will dive deeper into the world of Node.js modules and explore
    the powerful features of the Node Package Manager (NPM). Understanding modules
    and leveraging the vast ecosystem of NPM packages will enhance your ability to
    build robust and efficient Node.js applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨 Node.js 模块的世界，并探索 Node 包管理器（NPM）的强大功能。理解模块并利用 NPM 包的庞大生态系统将提升你构建健壮且高效的
    Node.js 应用程序的能力。
- en: 3.1 Introduction to Node.js Modules
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.1 Node.js 模块简介
- en: Node.js modules allow you to organize and encapsulate your code into reusable
    units. Each module can contain functions, variables, or objects that can be accessed
    by other parts of your application. By breaking down your code into modules, you
    can achieve better code organization, reusability, and maintainability.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 模块允许你将代码组织和封装成可重用的单元。每个模块可以包含函数、变量或对象，这些可以被应用程序的其他部分访问。通过将代码拆分成模块，你可以实现更好的代码组织、重用性和可维护性。
- en: 3.1.1 Creating a Module
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.1.1 创建模块
- en: 'To create a module in Node.js, you can define your code in a separate file
    and export the necessary components using the `module.exports` object. Let''s
    take a look at an example:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Node.js 中创建模块，你可以在一个单独的文件中定义你的代码，并使用 `module.exports` 对象导出必要的组件。我们来看一个示例：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, we define a module named "math.js" that exports the `add` and
    `subtract` functions.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们定义了一个名为 "math.js" 的模块，并导出了 `add` 和 `subtract` 函数。
- en: 3.1.2 Using a Module
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.1.2 使用模块
- en: 'To use a module in another file, you need to import it using the `require`
    function. Let''s see how we can use the "math.js" module in our application:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要在另一个文件中使用模块，你需要使用 `require` 函数导入它。我们来看一下如何在应用程序中使用 "math.js" 模块：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, we import the "math.js" module and access the exported functions
    `add` and `subtract` through the `math` object.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们导入了 "math.js" 模块，并通过 `math` 对象访问导出的 `add` 和 `subtract` 函数。
- en: 3.2 Node Package Manager (NPM)
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.2 Node 包管理器（NPM）
- en: NPM is a powerful package manager that comes bundled with Node.js. It provides
    a vast ecosystem of open-source packages that you can easily integrate into your
    Node.js projects. NPM simplifies package installation, dependency management,
    and version control, making it a fundamental tool for Node.js developers.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: NPM 是一个强大的包管理器，随着 Node.js 一起捆绑发布。它提供了一个庞大的开源包生态系统，你可以轻松地将这些包集成到你的 Node.js 项目中。NPM
    简化了包的安装、依赖关系管理和版本控制，是 Node.js 开发者的基础工具。
- en: 3.2.1 Initializing a Project with NPM
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.2.1 使用 NPM 初始化项目
- en: We have already seen how to initialize a project with NPM in Chapter 2\. By
    running `npm init` in your project directory, you create a "package.json" file
    that keeps track of your project's metadata and dependencies.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第二章已经看过如何使用 NPM 初始化项目。通过在项目目录中运行`npm init`，你会创建一个 "package.json" 文件，用于跟踪项目的元数据和依赖关系。
- en: 3.2.2 Installing Packages
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.2.2 安装包
- en: 'To install packages from the NPM registry, you can use the `npm install` command
    followed by the package name. For example, to install the Express.js framework,
    run the following command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 NPM 注册表安装包，可以使用 `npm install` 命令，后跟包名。例如，要安装 Express.js 框架，运行以下命令：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: NPM will download and install the specified package, as well as any dependencies
    it requires, into a "node_modules" directory within your project.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: NPM 将下载并安装指定的包，以及它所需的任何依赖项，并将它们放入项目中的 "node_modules" 目录。
- en: 3.2.3 Managing Dependencies with package.json
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.2.3 使用 package.json 管理依赖关系
- en: The "package.json" file maintains a list of dependencies for your project. When
    you install packages using `npm install`, NPM automatically adds them to the "dependencies"
    section of your "package.json" file. This allows you to easily manage and share
    your project's dependencies with others.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '"package.json" 文件维护了项目的依赖关系列表。当你使用 `npm install` 安装包时，NPM 会自动将它们添加到 "package.json"
    文件的 "dependencies" 部分。这使得你能够轻松管理和与他人共享项目的依赖。'
- en: 3.2.4 Using Installed Packages
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.2.4 使用已安装的包
- en: 'Once you have installed a package, you can use it in your application by requiring
    it just like any other module. Here''s an example of using the Express.js package:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你安装了一个包，就可以像使用其他模块一样通过 `require` 来使用它。以下是使用 Express.js 包的示例：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example, we import the Express.js package and create an Express application.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们引入了 Express.js 包并创建了一个 Express 应用。
- en: 3.3 Summary
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.3 总结
- en: In this chapter, we explored the concept of Node.js modules and how they help
    organize and encapsulate code. We learned how to create and use modules, enabling
    code reusability and maintainability in our applications.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 Node.js 模块的概念，以及它们如何帮助组织和封装代码。我们学习了如何创建和使用模块，从而实现代码的重用性和可维护性。
- en: We also introduced the Node Package Manager (NPM) and its role in managing dependencies
    and integrating external packages into our projects. We saw how to initialize
    a project, install packages, and leverage the vast NPM ecosystem to enhance our
    Node.js applications.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了 Node 包管理器（NPM）及其在管理依赖关系和将外部包集成到项目中的作用。我们了解了如何初始化项目、安装包，并利用庞大的 NPM 生态系统来增强我们的
    Node.js 应用。
- en: In the next chapter, we will focus on building a practical example using Node.js,
    where we'll apply our knowledge of modules and NPM to develop a real-world application.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将专注于构建一个实际的示例应用，使用 Node.js 并应用我们对模块和 NPM 的理解，开发一个真实世界的应用程序。
