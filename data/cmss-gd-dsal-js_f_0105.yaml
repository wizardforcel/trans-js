- en: 'Recursive Category: Repeatedly Execute'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 递归类别：重复执行
- en: Over the course of tackling various recursive problems, I began to find that
    there are various categories of problems. Once I learned an effective technique
    for a certain category, when I found another problem that belonged to the same
    category, I was able to apply the same technique to solve it.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在解决各种递归问题的过程中，我开始发现问题的不同类别。一旦我学会了一种有效的技巧来处理某个类别，当我遇到另一个属于同一类别的问题时，我能够应用相同的技巧来解决它。
- en: The category that I found to be the easiest was one in which the goal of the
    algorithm was to repeatedly execute a task.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我发现最简单的类别是算法目标是重复执行一项任务的情况。
- en: The NASA spacecraft countdown algorithm from the previous chapter is a great
    example. The code prints a number such as 10, and then 9, then 8, all the way
    down to 0. While the number the function prints is different each time, we boil
    down the code’s essence to the fact that it is repeatedly executing a task—namely,
    the printing of a number.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 上一章的NASA航天器倒计时算法就是一个很好的例子。代码会打印出一个数字，例如10，然后是9，再到8，一直打印到0。虽然函数打印的数字每次都不同，但我们将代码的本质归结为它在重复执行一项任务——即打印数字。
- en: 'This was our implementation of that algorithm:'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是我们实现该算法的方式：
- en: '| ​  | `function` countdown(number) { |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` countdown(number) { |'
- en: '| ​  | console.log(number); |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | console.log(number); |'
- en: '| ​  |  |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `if` (number === 0) { |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (number === 0) { |'
- en: '| ​  | `return`; |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return`; |'
- en: '| ​  | } `else` { |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } `else` { |'
- en: '| ​  | countdown(number - 1); |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | countdown(number - 1); |'
- en: '| ​  | } |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 'I found that for problems of this category, the last line of code in the function
    was a simple, single call to the function again. In the previous snippet, this
    takes the form of `countdown(number - 1)`。This line does one thing: it makes the
    next recursive call.'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我发现对于这类问题，函数的最后一行代码是一个简单的对函数的再次调用。在之前的代码片段中，这表现为`countdown(number - 1)`。这一行只做一件事：进行下一次递归调用。
- en: The directory-printing algorithm from the previous chapter is another example
    of this. This function repeatedly executes the task of printing directory names.
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 上一章的目录打印算法是另一个例子。这个函数重复执行打印目录名称的任务。
- en: 'Our code looked like this:'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们的代码看起来像这样：
- en: '| ​  | `import` { readdirSync, lstatSync } `from` `fs`; |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `import` { readdirSync, lstatSync } `from` `fs`; |'
- en: '| ​  | `import` { join } `from` `path`; |'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `import` { join } `from` `path`; |'
- en: '| ​  |  |'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `function` printSubdirectories(directoryName) { |'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` printSubdirectories(directoryName) { |'
- en: '| ​  | `for` (`const` fileName `of` readdirSync(directoryName)) { |'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`const` fileName `of` readdirSync(directoryName)) { |'
- en: '| ​  | `const` pathName = join(directoryName, fileName); |'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` pathName = join(directoryName, fileName); |'
- en: '| ​  | `if` (lstatSync(pathName).isDirectory()) { |'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (lstatSync(pathName).isDirectory()) { |'
- en: '| ​  | console.log(pathName); |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | console.log(pathName); |'
- en: '| ​  | `printSubdirectories(pathName);` |'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `printSubdirectories(pathName);` |'
- en: '| ​  | } |'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: Here as well, the last line of code is `printSubdirectories(pathName)`，which
    is a simple call to the recursive function, triggering it again.
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这里，最后一行代码是`printSubdirectories(pathName)`，这也是一个简单的递归函数调用，重新触发它。
- en: 'Recursive Trick: Passing Extra Parameters'
  id: totrans-30
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 递归技巧：传递额外参数
- en: Let’s try our hand at another problem of the “repeatedly execute” category.
    We’re going to write an algorithm that takes an array of numbers and doubles each
    of the numbers within the array. Note that we’re not going to produce a new array;
    instead, we’re going to modify the array in place.
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们再尝试解决一个“重复执行”类别的问题。我们要编写一个算法，接收一个数字数组，并将数组中的每个数字加倍。请注意，我们不会生成一个新数组；相反，我们将在原地修改该数组。
- en: In-Place Modifications
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 原地修改
- en: Let’s take a look at the concept of in-place modifications, just in case it’s
    not clear.
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们看看原地修改的概念，以防不够清楚。
- en: Generally speaking, there are two basic approaches to manipulating data. Let’s
    take the example of doubling the values in an array. If I had the array `[1, 2,
    3, 4, 5]` and wanted to “double” it to produce the array `[2, 4, 6, 8, 10]`, I
    could do one of two things.
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 一般来说，操作数据有两种基本方法。让我们以将数组中的值加倍为例。如果我有一个数组`[1, 2, 3, 4, 5]`，想要将其“加倍”以生成数组`[2,
    4, 6, 8, 10]`，我可以做两件事之一。
- en: 'The first option is to create a new array that contains the doubled data but
    leave the original array alone. Take the following code:'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第一个选项是创建一个包含加倍数据的新数组，但保留原始数组不变。请看以下代码：
- en: '| ​  | `const`​ `a` = [1, 2, 3, 4, 5]; |'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const`​ `a` = [1, 2, 3, 4, 5]; |'
- en: '| ​  | `const`​ `b` = `doubleArray(a)`; |'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const`​ `b` = `doubleArray(a)`; |'
- en: 由于`doubleArray`函数创建并返回一个全新的数组，如果我们检查`a`和`b`的值，我们会得到以下结果：
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 由于`doubleArray`函数创建并返回一个全新的数组，如果我们检查`a`和`b`的值，我们会得到以下结果：
- en: '| ​  | `a`; ​*// [1, 2, 3, 4, 5]*​ |'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `a`; ​*// [1, 2, 3, 4, 5]*​ |'
- en: '| ​  | `b`; ​*// [2, 4, 6, 8, 10]*​ |'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `b`; ​*// [2, 4, 6, 8, 10]*​ |'
- en: 原始数组`a`未被修改，而`b`持有一个全新的数组。
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 原始数组`a`未被修改，而`b`持有一个全新的数组。
- en: 第二个选项称为就地修改，意味着函数实际更改传入函数的原始数组。
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第二个选项称为就地修改，意味着函数实际更改传入函数的原始数组。
- en: 在就地修改中，如果我们现在检查`a`和`b`，我们会发现：
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在就地修改中，如果我们现在检查`a`和`b`，我们会发现：
- en: '| ​  | `a`; ​*// [2, 4, 6, 8, 10]*​ |'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `a`; ​*// [2, 4, 6, 8, 10]*​ |'
- en: '| ​  | `b`; ​*// [2, 4, 6, 8, 10]*​ |'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `b`; ​*// [2, 4, 6, 8, 10]*​ |'
- en: 就地函数修改了`a`，而`b`只是指向与`a`相同的数组。
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 就地函数修改了`a`，而`b`只是指向与`a`相同的数组。
- en: 我们选择创建一个新数组还是就地修改原数组取决于我们，具体要根据项目的上下文。我们将在第19章讨论更多关于就地算法的内容，参见[​*Dealing with
    Space Constraints*​](f_0189.xhtml#chp.dealing_with_space_constraints)。
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们选择创建一个新数组还是就地修改原数组取决于我们，具体要根据项目的上下文。我们将在第19章讨论更多关于就地算法的内容，参见[​*处理空间限制*​](f_0189.xhtml#chp.dealing_with_space_constraints)。
- en: 这个算法也是一个我们重复执行任务的算法。具体来说，我们重复将一个数字翻倍。我们从第一个数字开始并将其翻倍。然后我们转向第二个数字并将其翻倍——依此类推。
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这个算法也是一个我们重复执行任务的算法。具体来说，我们重复将一个数字翻倍。我们从第一个数字开始并将其翻倍。然后我们转向第二个数字并将其翻倍——依此类推。
- en: 让我们尝试在JavaScript中编写这个算法，我们称之为`doubleArray()`。我们知道最终行将是递归调用，因此让我们包含该行：
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们尝试在JavaScript中编写这个算法，我们称之为`doubleArray()`。我们知道最终行将是递归调用，因此让我们包含该行：
- en: '| ​  | `function`​ `doubleArray(array)` { |'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function`​ `doubleArray(array)` { |'
- en: '| ​  | `doubleArray(array); |'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `doubleArray(array);` |'
- en: '| ​  | } |'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 接下来，我们需要添加实际将数字翻倍的代码。但我们要翻倍哪个数字呢？让我们尝试翻倍第一个数字：
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加实际将数字翻倍的代码。但我们要翻倍哪个数字呢？让我们尝试翻倍第一个数字：
- en: '| ​  | `function`​ `doubleArray(array)` { |'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function`​ `doubleArray(array)` { |'
- en: '| ​  | `array[0] *= 2; |'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `array[0] *= 2;` |'
- en: '| ​  | `doubleArray(array); |'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `doubleArray(array);` |'
- en: '| ​  | } |'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 好的，我们已经将索引0的数字翻倍，但我们该如何继续翻倍索引1的数字呢？
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 好的，我们已经将索引0的数字翻倍，但我们该如何继续翻倍索引1的数字呢？
- en: 现在，如果我们使用循环而不是递归，我们将使用一个变量来跟踪索引并将其不断增加1，类似这样的方式：
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，如果我们使用循环而不是递归，我们将使用一个变量来跟踪索引并将其不断增加1，类似这样的方式：
- en: '| ​  | `function`​ `doubleArray(array)` { |'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function`​ `doubleArray(array)` { |'
- en: '| ​  | `let`​ `index` = 0; |'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let`​ `index` = 0; |'
- en: '| ​  |  |'
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `while`​ (`index` < `array.length`) { |'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while`​ (`index` < `array.length`) { |'
- en: '| ​  | `array[index] *= 2; |'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `array[index] *= 2;` |'
- en: '| ​  | `index` += 1; |'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `index` += 1; |'
- en: '| ​  | } |'
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 在我们的递归版本中，唯一的函数参数是数组。我们需要某种方式来跟踪和增加索引。我们该如何实现这一点？
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在我们的递归版本中，唯一的函数参数是数组。我们需要某种方式来跟踪和增加索引。我们该如何实现这一点？
- en: 现在让我们看看下一个技巧…
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在让我们看看下一个技巧…
- en: 让我们传入额外的参数！
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们传入额外的参数！
- en: 让我们修改函数的开头，以便它接受两个参数——数组本身和一个索引来跟踪。这里是代码：
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们修改函数的开头，以便它接受两个参数——数组本身和一个索引来跟踪。这里是代码：
- en: '| ​  | `function`​ `doubleArray(array, index)` { |'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function`​ `doubleArray(array, index)` { |'
- en: 目前，当我们调用这个函数时，需要传入数组和起始索引，这将是0：
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 目前，当我们调用这个函数时，需要传入数组和起始索引，这将是0：
- en: '| ​  | `doubleArray([1, 2, 3, 4, 5], 0); |'
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `doubleArray([1, 2, 3, 4, 5], 0);` |'
- en: 一旦我们将索引作为函数参数，就可以在进行每次递归调用时增加和跟踪索引。这里是代码：
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 一旦我们将索引作为函数参数，就可以在进行每次递归调用时增加和跟踪索引。这里是代码：
- en: '| ​  | `function` `doubleArray(array, index) {` |'
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` `doubleArray(array, index) {` |'
- en: '| ​  | `array[index] *= 2;` |'
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `array[index] *= 2;` |'
- en: '| ​  | `doubleArray(array, index + 1);` |'
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `doubleArray(array, index + 1);` |'
- en: '| ​  | `}` |'
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `}` |'
- en: In each successive call, we pass in the array again as the first argument, but
    we also pass along an incremented index. This allows us to keep track of an index
    just as we would in a classical loop.
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在每次调用中，我们再次将数组作为第一个参数传入，但同时传递一个增加的索引。这允许我们像在经典循环中一样跟踪索引。
- en: 'Our code isn’t perfect just yet, though. Our function will throw an error once
    the index goes past the end of the array and tries to multiply a nonexistent number.
    To solve this, we need our base case:'
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们的代码现在还不完美。一旦索引超过数组的末尾并尝试乘以一个不存在的数字，我们的函数就会抛出错误。为了解决这个问题，我们需要我们的基本情况：
- en: '| ​  | `function` `doubleArray(array, index) {` |'
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` `doubleArray(array, index) {` |'
- en: '| ​  | `// Base case: when the index goes past the end of the array` |'
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `// 基本情况：当索引超过数组的末尾时` |'
- en: '| ​  | `if` (index >= array.length) { `return`; } |'
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (index >= array.length) { `return`; } |'
- en: '| ​  |  |'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `array[index] *= 2;` |'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `array[index] *= 2;` |'
- en: '| ​  | `doubleArray(array, index + 1);` |'
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `doubleArray(array, index + 1);` |'
- en: '| ​  | `}` |'
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `}` |'
- en: 'We can test this function out with the following code:'
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们可以用以下代码测试这个函数：
- en: '| ​  | `const` `array = [1, 2, 3, 4];` |'
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` `array = [1, 2, 3, 4];` |'
- en: '| ​  | `doubleArray(array, 0);` |'
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `doubleArray(array, 0);` |'
- en: '| ​  | `console.log(array);` |'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `console.log(array);` |'
- en: Our recursive function is now complete. However, if our programming language
    supports default arguments as JavaScript does, we can make things even prettier.
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们的递归函数现在已完成。然而，如果我们的编程语言支持默认参数，如JavaScript所示，我们可以让事情变得更美观。
- en: 'Right now, we need to call the function like this:'
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，我们需要像这样调用函数：
- en: '| ​  | `doubleArray([1, 2, 3, 4, 5], 0);` |'
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `doubleArray([1, 2, 3, 4, 5], 0);` |'
- en: Admittedly, passing in that `0` as a second parameter isn’t beautiful—it’s just
    so we can achieve our trick of maintaining an index. After all, we always want
    to start our index off at `0`.
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 诚然，将`0`作为第二个参数传入并不美观——这只是为了实现我们保持索引的技巧。毕竟，我们总是希望从`0`开始。
- en: 'However, we can use default parameters to allow us to simply call the function
    the original way:'
  id: totrans-97
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，我们可以使用默认参数，这样就可以简单地以原来的方式调用该函数：
- en: '| ​  | `doubleArray([1, 2, 3, 4, 5]);` |'
  id: totrans-98
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `doubleArray([1, 2, 3, 4, 5]);` |'
- en: 'Here’s our updated code to make this work:'
  id: totrans-99
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是我们更新后的代码，以使其正常工作：
- en: '| ​  | `function` `doubleArray(array, index=0) {` |'
  id: totrans-100
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` `doubleArray(array, index=0) {` |'
- en: '| ​  | `// Base case: when the index goes past the end of the array` |'
  id: totrans-101
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `// 基础案例：当索引超出数组的末尾` |'
- en: '| ​  | `if` (index >= array.length) { `return`; } |'
  id: totrans-102
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (index >= array.length) { `return`; } |'
- en: '| ​  |  |'
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `array[index] *= 2;` |'
  id: totrans-104
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `array[index] *= 2;` |'
- en: '| ​  | `doubleArray(array, index + 1);` |'
  id: totrans-105
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `doubleArray(array, index + 1);` |'
- en: '| ​  | `}` |'
  id: totrans-106
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `}` |'
- en: All we updated here was setting a default argument of `index=0`. This way, the
    first time we call the function, we don’t have to pass in the index parameter.
    However, we still get to use the index parameter for all successive calls.
  id: totrans-107
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们在这里更新的只是将默认参数设置为`index=0`。这样，当我们第一次调用这个函数时，就不必传入索引参数。然而，我们仍然可以在所有后续调用中使用索引参数。
- en: The “trick” of using extra function parameters is a common technique in writing
    recursive functions, and a handy one.
  id: totrans-108
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 使用额外函数参数的“技巧”是在编写递归函数时常用的技术，也是一个方便的方法。
