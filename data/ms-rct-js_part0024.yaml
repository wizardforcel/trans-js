- en: 'Chapter 3: Control Flow and Loops'
  id: totrans-0
  prefs:
  - PREF_H1
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章：控制流与循环
- en: In Chapter 2, we gained a solid understanding of data types and variables in
    JavaScript. Now, it's time to explore how to control the flow of our code using
    conditional statements and loops. Control flow allows us to make decisions and
    execute specific code blocks based on certain conditions, while loops provide
    a mechanism for repeating tasks until a condition is met. By mastering control
    flow and loops, you'll unlock the full potential of JavaScript and be able to
    build more dynamic and interactive applications. Let's dive in!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二章中，我们已经对 JavaScript 中的数据类型和变量有了扎实的理解。现在，到了使用条件语句和循环来控制代码流的时刻。控制流使我们能够根据特定条件做出决策并执行相应的代码块，而循环则提供了一种重复执行任务直到条件满足的机制。通过掌握控制流和循环，你将解锁
    JavaScript 的全部潜力，并能够构建更具动态性和互动性的应用程序。让我们深入了解吧！
- en: 'Conditional Statements: Making Decisions in Code'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 条件语句：在代码中做出决策
- en: 'Conditional statements enable us to create decision-making logic in our code.
    Depending on the truthiness of a condition, specific code blocks are executed.
    JavaScript provides three types of conditional statements: `if`, `if...else`,
    and `switch`.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 条件语句使我们能够在代码中创建决策逻辑。根据条件的真假，特定的代码块会被执行。JavaScript 提供了三种类型的条件语句：`if`、`if...else`
    和 `switch`。
- en: 'The `if` Statement:'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`if` 语句：'
- en: The `if` statement is the most basic form of conditional statement. It executes
    a block of code if the specified condition evaluates to `true`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`if` 语句是最基本的条件语句形式。如果指定的条件为 `true`，则执行该代码块。'
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In Example 1, the code checks if `age` is greater than or equal to 18\. If true,
    it prints "You are an adult."
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 1 中，代码检查 `age` 是否大于或等于 18。如果为真，它打印 "You are an adult."
- en: 'The `if...else` Statement:'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`if...else` 语句：'
- en: The `if...else` statement allows us to execute one block of code if the condition
    is `true`, and another block if the condition is `false`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`if...else` 语句允许我们在条件为 `true` 时执行一个代码块，在条件为 `false` 时执行另一个代码块。'
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In Example 2, the code checks if `isRaining` is `true`. If true, it prints "It's
    raining. Don't forget your umbrella!"; otherwise, it prints "No rain. Have a great
    day!"
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 2 中，代码检查 `isRaining` 是否为 `true`。如果为真，它打印 "It's raining. Don't forget your
    umbrella!"；否则，它打印 "No rain. Have a great day!"
- en: 'The `else if` Statement:'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`else if` 语句：'
- en: The `else if` statement allows us to add multiple conditions to the decision-making
    process.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`else if` 语句允许我们在决策过程中添加多个条件。'
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In Example 3, the code checks the value of `time` and prints different greetings
    based on the time of day.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 3 中，代码检查 `time` 的值，并根据一天中的时间打印不同的问候语。
- en: 'The `switch` Statement:'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`switch` 语句：'
- en: The `switch` statement provides an alternative way to handle multiple conditions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`switch` 语句提供了一种处理多个条件的替代方式。'
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In Example 4, the code checks the value of `day` and prints different messages
    based on the day of the week.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 4 中，代码检查 `day` 的值，并根据星期几打印不同的消息。
- en: 'Loops: Repeating Code Execution'
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环：重复执行代码
- en: Loops are essential in programming as they allow us to execute a block of code
    repeatedly until a specific condition is met. JavaScript provides several types
    of loops, including the `for` loop, `while` loop, `do...while` loop, and `for...of`
    loop.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 循环在编程中至关重要，因为它们使我们能够反复执行某段代码，直到满足特定条件为止。JavaScript 提供了多种类型的循环，包括 `for` 循环、`while`
    循环、`do...while` 循环和 `for...of` 循环。
- en: 'The `for` Loop:'
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`for` 循环：'
- en: The `for` loop is ideal when you know the exact number of iterations you want
    to perform.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`for` 循环适用于当你知道要执行的迭代次数时。'
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In Example 5, the `for` loop executes the code inside the curly braces five
    times, as `i` starts at 1 and increments by 1 in each iteration until it reaches
    5.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 5 中，`for` 循环会执行大括号中的代码五次，因为 `i` 从 1 开始，并在每次迭代时增加 1，直到达到 5。
- en: 'The `while` Loop:'
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`while` 循环：'
- en: The `while` loop is used when you want to repeat a block of code until a specific
    condition becomes `false`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`while` 循环用于当你希望重复执行某个代码块，直到某个特定条件变为 `false`。'
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In Example 6, the `while` loop executes the code inside the curly braces until
    `count` becomes 5, as it increments by 1 in each iteration.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 6 中，`while` 循环会在 `count` 变为 5 之前执行大括号中的代码，因为它在每次迭代时都会增加 1。
- en: 'The `do...while` Loop:'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`do...while` 循环：'
- en: The `do...while` loop is similar to the `while` loop, but it ensures that the
    code inside the loop block is executed at least once before checking the condition.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`do...while` 循环与 `while` 循环类似，但它确保在检查条件之前，循环体内的代码至少执行一次。'
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In Example 7, the `do...while` loop executes the code inside the curly braces
    at least once because the condition is checked after the first iteration.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 7 中，`do...while` 循环会至少执行一次大括号中的代码，因为条件是在第一次迭代后才检查的。
- en: 'The `for...of` Loop:'
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`for...of` 循环：'
- en: The `for...of` loop is used to iterate over elements of an iterable object,
    such as arrays and strings.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`for...of` 循环用于遍历可迭代对象的元素，例如数组和字符串。'
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In Example 8, the `for...of` loop iterates over the `fruits` array and prints
    each fruit.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 8 中，`for...of` 循环遍历 `fruits` 数组并打印每一个水果。
- en: 'The `break` and `continue` Statements:'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`break` 和 `continue` 语句：'
- en: The `break` statement allows you to exit a loop prematurely if a certain condition
    is met. The `continue` statement allows you to skip the rest of the current iteration
    and move to the next iteration.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`break` 语句允许你在满足特定条件时提前退出循环。`continue` 语句允许你跳过当前迭代的其余部分并进入下一次迭代。'
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In Example 9, the `break` statement is used to exit the loop when `i` is equal
    to 5, and the `continue` statement is used to skip the rest of the code for the
    current iteration when `i` is equal to 3.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 9 中，`break` 语句用于在 `i` 等于 5 时退出循环，而 `continue` 语句用于在 `i` 等于 3 时跳过当前迭代的其余代码。
- en: Control Flow and Loops in Practice
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实践中的控制流和循环
- en: Now that we understand conditional statements and loops, let's explore some
    practical examples of how they can be used.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经理解了条件语句和循环，接下来让我们探索一些它们的实际应用示例。
- en: 'Example 10: Finding Even Numbers'
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例 10：查找偶数
- en: Let's write a program that finds all even numbers between 1 and 10.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个程序，找出1到10之间的所有偶数。
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Output:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE10]javascript'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE10]javascript'
- en: '// Example 11: Sum of numbers'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: // 示例11：数字之和
- en: let sum = 0;
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: let sum = 0;
- en: for (let i = 1; i <= 100; i++) {
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: for (let i = 1; i <= 100; i++) {
- en: sum += i;
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: sum += i;
- en: '}'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'console.log("The sum of numbers from 1 to 100 is: " + sum);'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 'console.log("1到100的数字之和是: " + sum);'
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The sum of numbers from 1 to 100 is: 5050'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '1到100的数字之和是: 5050'
- en: '[PRE12]javascript'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE12]javascript'
- en: '// Example 12: Countdown timer'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: // 示例12：倒计时器
- en: let countDownFrom = 10;
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: let countDownFrom = 10;
- en: while (countDownFrom >= 0) {
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: while (countDownFrom >= 0) {
- en: console.log(countDownFrom);
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(countDownFrom);
- en: countDownFrom--;
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: countDownFrom--;
- en: '}'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: console.log("Time's up!");
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("时间到！");
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '10'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '10'
- en: '9'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '9'
- en: '8'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '8'
- en: '7'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '7'
- en: '6'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '6'
- en: '5'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '5'
- en: '4'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '4'
- en: '3'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '3'
- en: '2'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '2'
- en: '1'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: '0'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '0'
- en: Time's up!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 时间到！
- en: '```'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In Example 12, the `while` loop creates a countdown timer starting from 10 and
    decrements the value of `countDownFrom` in each iteration until it reaches 0.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例12中，`while`循环创建了一个从10开始的倒计时器，并在每次迭代中减少`countDownFrom`的值，直到它达到0。
- en: Conclusion
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Congratulations! In this chapter, we explored control flow and loops in JavaScript.
    We learned how to use conditional statements (`if`, `if...else`, `else if`, and
    `switch`) to make decisions in our code and how to use different types of loops
    (`for`, `while`, `do...while`, and `for...of`) to repeat code execution until
    certain conditions are met. We also saw practical examples of how to apply control
    flow and loops in real-world scenarios.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！在本章中，我们探讨了JavaScript中的控制流和循环。我们学习了如何使用条件语句（`if`，`if...else`，`else if`，和`switch`）在代码中做出决策，以及如何使用不同类型的循环（`for`，`while`，`do...while`，和`for...of`）来重复执行代码，直到满足某些条件。我们还看到了如何在实际场景中应用控制流和循环的实际示例。
- en: Control flow and loops are powerful tools in JavaScript that enable us to create
    dynamic and interactive applications. With this knowledge, you are well on your
    way to becoming a proficient JavaScript programmer.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 控制流和循环是JavaScript中强大的工具，它们使我们能够创建动态和交互式应用程序。掌握这些知识，你就离成为一名熟练的JavaScript程序员不远了。
