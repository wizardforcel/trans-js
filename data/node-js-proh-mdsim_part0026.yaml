- en: 'Chapter 6: JavaScript Objects'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章：JavaScript 对象
- en: In Chapter 5, we explored JavaScript arrays, which allowed us to store and manipulate
    collections of elements. Now, let's dive into JavaScript objects, another fundamental
    concept in the language. Objects enable us to represent complex data structures
    and organize related data into key-value pairs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在第5章中，我们探讨了 JavaScript 数组，它使我们能够存储和操作元素集合。现在，让我们深入了解 JavaScript 对象，这是该语言中的另一个基本概念。对象使我们能够表示复杂的数据结构，并将相关数据组织成键值对。
- en: 6.1 Introduction to Objects
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.1 对象简介
- en: In JavaScript, an object is a composite data type that allows us to store and
    manipulate data in a structured way. Objects are collections of properties, where
    each property consists of a key and a value. The key serves as the identifier
    for accessing the corresponding value. Objects are often used to represent real-world
    entities, such as a person, a car, or a book.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，对象是一种复合数据类型，它允许我们以结构化的方式存储和操作数据。对象是由多个属性组成的集合，每个属性包含一个键和值。键用于标识并访问对应的值。对象通常用来表示现实世界中的实体，例如一个人、一辆车或一本书。
- en: 6.2 Creating Objects
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.2 创建对象
- en: 'There are multiple ways to create objects in JavaScript. One common approach
    is using object literals, where we define the properties and their values within
    curly braces `{}`. Here''s an example:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，有多种方法可以创建对象。一种常见的方式是使用对象字面量，我们在花括号`{}`中定义属性及其值。以下是一个示例：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this example, we create an object called `person` with three properties:
    `name`, `age`, and `profession`. The property names are specified as keys, followed
    by a colon `:`, and their corresponding values.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们创建了一个名为`person`的对象，包含三个属性：`name`、`age`和`profession`。属性名称作为键，后跟冒号`:`，并指定对应的值。
- en: 'Another way to create objects is by using the `new` keyword and the `Object()`
    constructor. Here''s an example:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 创建对象的另一种方法是使用`new`关键字和`Object()`构造函数。以下是一个示例：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, we create an object called `car` using the `Object()` constructor
    and assign properties to it using dot notation.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用`Object()`构造函数创建一个名为`car`的对象，并使用点表示法为其分配属性。
- en: 6.3 Accessing Object Properties
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.3 访问对象属性
- en: 'We can access the properties of an object using dot notation or bracket notation.
    Dot notation involves using the object name followed by a dot `.` and the property
    name. Here''s an example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用点表示法或方括号表示法来访问对象的属性。点表示法涉及使用对象名称后跟一个点`.`和属性名称。以下是一个示例：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, we access the `name` property of the `person` object and the
    `make` property of the `car` object using dot notation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用点表示法访问`person`对象的`name`属性和`car`对象的`make`属性。
- en: 'Bracket notation involves using square brackets `[]` and specifying the property
    name as a string. Here''s an example:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 方括号表示法涉及使用方括号`[]`并将属性名称指定为字符串。以下是一个示例：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example, we access the `age` property of the `person` object and the
    `year` property of the `car` object using bracket notation.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用括号符号访问`person`对象的`age`属性和`car`对象的`year`属性。
- en: 6.4 Modifying Object Properties
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.4 修改对象属性
- en: 'Objects in JavaScript are mutable, meaning we can modify their properties after
    they are created. We can reassign the value of a property using either dot notation
    or bracket notation. Here''s an example:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的对象是可变的，这意味着我们可以在创建后修改它们的属性。我们可以使用点符号或括号符号重新赋值给一个属性。以下是一个示例：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this example, we modify the `age` property of the `person` object and the
    `year` property of the `car` object.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们修改了`person`对象的`age`属性和`car`对象的`year`属性。
- en: 6.5 Adding and Removing Object Properties
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.5 添加和删除对象属性
- en: 'We can add new properties to an object by simply assigning a value to a previously
    non-existent property. Similarly, we can remove properties using the `delete`
    keyword. Here''s an example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过简单地为一个之前不存在的属性赋值来向对象添加新的属性。类似地，我们可以使用`delete`关键字删除属性。以下是一个示例：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this example, we add the `gender` property to the `person` object and remove
    the `model` property from the `car` object.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们向`person`对象添加了`gender`属性，并从`car`对象中删除了`model`属性。
- en: 6.6 Object Methods
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.6 对象方法
- en: In addition to properties, objects in JavaScript can also contain methods. Methods
    are functions that are associated with an object and can be invoked using dot
    notation.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除了属性，JavaScript中的对象还可以包含方法。方法是与对象相关联的函数，可以通过点符号调用。
- en: 'Methods in JavaScript are functions that are associated with objects and can
    perform actions or calculations using the object''s properties. Let''s look at
    an example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的方法是与对象关联的函数，可以使用对象的属性执行操作或计算。让我们看一个示例：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In this example, we create an object called `calculator` with two methods:
    `add` and `subtract`. These methods can be invoked using dot notation, followed
    by parentheses `()`, passing the required arguments.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们创建了一个名为`calculator`的对象，包含两个方法：`add`和`subtract`。这些方法可以通过点符号调用，后跟括号`()`，并传入所需的参数。
- en: 6.7 Object Iteration
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.7 对象遍历
- en: 'We can iterate over the properties of an object using various techniques. One
    common approach is using a `for...in` loop, which allows us to iterate over the
    enumerable properties of an object. Here''s an example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用多种技术遍历对象的属性。一种常见的方法是使用`for...in`循环，它允许我们遍历对象的可枚举属性。以下是一个示例：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this example, we iterate over the properties of the `person` object and log
    both the property name (`key`) and its corresponding value (`person[key]`).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们遍历`person`对象的属性，并记录下属性名（`key`）及其对应的值（`person[key]`）。
- en: 6.8 Object Prototypes and Inheritance
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.8 对象原型和继承
- en: JavaScript is a prototype-based language, which means objects can inherit properties
    and methods from other objects. This concept is known as inheritance. Objects
    can have a prototype object, which serves as a blueprint for the properties and
    methods it inherits.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是一种基于原型的语言，这意味着对象可以从其他对象继承属性和方法。这个概念被称为继承。对象可以有一个原型对象，它作为它继承的属性和方法的蓝图。
- en: In JavaScript, inheritance is achieved through prototype chaining. Objects have
    an internal `[[Prototype]]` property that references their prototype object. If
    a property or method is not found in an object, JavaScript looks for it in the
    object's prototype. This chain continues until the property or method is found
    or until the end of the prototype chain is reached.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，继承是通过原型链实现的。对象具有一个内部的`[[Prototype]]`属性，指向它们的原型对象。如果在对象中找不到某个属性或方法，JavaScript
    会在对象的原型中查找。这个链条会继续，直到找到该属性或方法，或者直到原型链的末尾。
- en: 6.9 Conclusion
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 6.9 结论
- en: In this chapter, we explored JavaScript objects, an essential concept in the
    language. Objects allow us to represent complex data structures, organize related
    data using key-value pairs, and define methods for performing actions on the data.
    We learned about creating objects using object literals and the `Object()` constructor,
    accessing and modifying object properties using dot notation and bracket notation,
    adding and removing properties, defining object methods, and iterating over object
    properties using `for...in` loops.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 JavaScript 对象，这是该语言中的一个核心概念。对象使我们能够表示复杂的数据结构，使用键值对组织相关数据，并定义执行数据操作的方法。我们学习了如何使用对象字面量和`Object()`构造函数创建对象，如何通过点符号和括号符号访问和修改对象属性，如何添加和删除属性，定义对象方法，并使用
    `for...in` 循环遍历对象属性。
- en: In the next chapter, we will dive into the world of JavaScript events and event
    handling, understanding how to respond to user interactions and create dynamic
    and interactive web applications. Get ready to enhance the interactivity of your
    JavaScript programs!
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将深入探讨 JavaScript 事件和事件处理，了解如何响应用户交互并创建动态互动的 Web 应用程序。准备好提升你 JavaScript
    程序的交互性吧！
