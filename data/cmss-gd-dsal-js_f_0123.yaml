- en: '`Quicksort`'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`快速排序`'
- en: '`Quicksort`算法是分区和递归的组合。它的工作方式如下：'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`快速排序`算法是分区和递归的组合。它的工作方式如下：'
- en: 分区数组。枢轴现在在它的正确位置。
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 分区数组。枢轴现在在它的正确位置。
- en: 将枢轴左侧和右侧的子数组视为各自的数组，并递归重复步骤1和2。这意味着我们将对每个子数组进行分区，并最终得到每个子数组枢轴左侧和右侧的更小的子子数组。然后我们对这些子子数组进行分区，以此类推。
  id: totrans-3
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 将枢轴左侧和右侧的子数组视为各自的数组，并递归重复步骤1和2。这意味着我们将对每个子数组进行分区，并最终得到每个子数组枢轴左侧和右侧的更小的子子数组。然后我们对这些子子数组进行分区，以此类推。
- en: 当我们有一个包含零个或一个元素的子数组时，这就是我们的基例，我们什么都不做。
  id: totrans-4
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 当我们有一个包含零个或一个元素的子数组时，这就是我们的基例，我们什么都不做。
- en: 让我们回到我们的例子。我们从数组`[0, 5, 2, 1, 6, 3]`开始，并在整个数组上运行一次分区。由于`Quicksort`以这样的分区开始，这意味着我们已经部分完成了`Quicksort`过程。以下是我们停下的地方：
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们回到我们的例子。我们从数组`[0, 5, 2, 1, 6, 3]`开始，并在整个数组上运行一次分区。由于`快速排序`以这样的分区开始，这意味着我们已经部分完成了`快速排序`过程。以下是我们停下的地方：
- en: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_11.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_11.png)'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_11.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_11.png)'
- en: 正如你所看到的，值`3`是原始枢轴。现在枢轴在正确的位置，我们需要对枢轴左侧和右侧的内容进行排序。请注意，在我们的例子中，枢轴左侧的数字恰好已经排序，但计算机还不知道这一点。
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 正如你所看到的，值`3`是原始枢轴。现在枢轴在正确的位置，我们需要对枢轴左侧和右侧的内容进行排序。请注意，在我们的例子中，枢轴左侧的数字恰好已经排序，但计算机还不知道这一点。
- en: 在分区之后的下一步是将枢轴左侧的所有元素视为自己的数组并进行分区。
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在分区之后的下一步是将枢轴左侧的所有元素视为自己的数组并进行分区。
- en: 我们暂时遮住数组的其余部分，因为我们此时不关注它：
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们暂时遮住数组的其余部分，因为我们此时不关注它：
- en: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_12.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_12.png)'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_12.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_12.png)'
- en: 现在，在这个`[0, 1, 2]`子数组中，我们将最右边的元素作为枢轴。所以这将是数字`2`：
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，在这个`[0, 1, 2]`子数组中，我们将最右边的元素作为枢轴。所以这将是数字`2`：
- en: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_13.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_13.png)'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_13.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_13.png)'
- en: 我们将建立我们的左指针和右指针：
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们将建立我们的左指针和右指针：
- en: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_14.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_14.png)'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_14.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_14.png)'
- en: 现在我们准备对这个子数组进行分区。让我们继续从第8步之后继续，我们在这里停下了。
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在我们准备对这个子数组进行分区。让我们从第8步继续，我们在这里停下了。
- en: 第9步：我们将左指针（`0`）与枢轴（`2`）进行比较。由于`0`小于枢轴，我们继续移动左指针。
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第9步：我们将左指针（`0`）与枢轴（`2`）进行比较。由于`0`小于枢轴，我们继续移动左指针。
- en: 第10步：我们将左指针向右移动一个单元，现在它恰好指向右指针指向的同一值：
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第10步：我们将左指针向右移动一个单元，现在它恰好指向右指针指向的同一值：
- en: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_15.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_15.png)'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_15.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_15.png)'
- en: 我们将左指针与枢轴进行比较。由于值`1`小于枢轴，我们继续前进。
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们将左指针与枢轴进行比较。由于值`1`小于枢轴，我们继续前进。
- en: 第11步：我们将左指针向右移动一个单元，这恰好是枢轴：
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第11步：我们将左指针向右移动一个单元，这恰好是枢轴：
- en: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_16.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_16.png)'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_16.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_16.png)'
- en: 此时，左指针指向的值等于枢轴（因为它就是枢轴！），所以左指针停止。
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 此时，左指针指向的值等于枢轴（因为它就是枢轴！），所以左指针停止。
- en: Note how the left pointer managed to sneak past the right pointer. That’s okay,
    though. The algorithm is designed to work even with such an occurrence.
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 注意左指针是如何巧妙地超过右指针的。不过没关系，这个算法设计得即使出现这种情况也能正常工作。
- en: '`Step 12`: Now we activate the right pointer. However, because the right pointer’s
    value (`1`) is less than the pivot, it stays still.'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`第12步`：现在我们激活右指针。然而，由于右指针的值（`1`）小于枢轴，它保持不动。'
- en: Since our left pointer has passed our right pointer, we’re done moving pointers
    altogether in this partition.
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 由于我们的左指针已经超过了右指针，我们在这个分区中不再移动指针。
- en: '`Step 13`: Next, we swap the pivot with the left pointer’s value. Now, it just
    so happens that the left pointer is pointing to the pivot itself, so we swap the
    pivot with itself, which results in no change at all. At this point, the partition
    is complete and the pivot (`2`) is now in its correct spot:'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`第13步`：接下来，我们将枢轴与左指针的值交换。现在，左指针正好指向枢轴本身，所以我们将枢轴与自身交换，这导致没有任何变化。此时，分区完成，枢轴（`2`）现在在它的正确位置：'
- en: '![`images/divide_and_conquer_code_in_turbo_mode/quicksort_17.png`](images/divide_and_conquer_code_in_turbo_mode/quicksort_17.png)'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/divide_and_conquer_code_in_turbo_mode/quicksort_17.png`](images/divide_and_conquer_code_in_turbo_mode/quicksort_17.png)'
- en: We now have a subarray of `[0, 1]` to the left of the pivot (the `2`) and no
    subarray to its right. The next step is to recursively partition the subarray
    to the pivot’s left, which again, is `[0, 1]`. We don’t have to deal with any
    subarray to the right of the pivot since no such subarray exists.
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们现在有一个子数组`[0, 1]`在枢轴（`2`）的左侧，而在其右侧没有子数组。下一步是递归地对枢轴左侧的子数组进行分区，这个子数组也是`[0, 1]`。由于在枢轴的右侧没有任何子数组，因此我们不需要处理它。
- en: 'Because all we’ll focus on in the next step is the subarray `[0, 1]`, we’ll
    block out the rest of the array so it looks like this:'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因为在下一步我们将专注于子数组`[0, 1]`，所以我们会暂时遮住数组的其余部分，使其看起来像这样：
- en: '![`images/divide_and_conquer_code_in_turbo_mode/quicksort_18.png`](images/divide_and_conquer_code_in_turbo_mode/quicksort_18.png)'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/divide_and_conquer_code_in_turbo_mode/quicksort_18.png`](images/divide_and_conquer_code_in_turbo_mode/quicksort_18.png)'
- en: 'To partition the subarray `[0, 1]`, we’ll make the rightmost element (the `1`)
    the pivot. Where will we put the left and right pointers? Well, the left pointer
    will point to the `0`, but the right pointer will also point to the `0` since
    we always start the right pointer at one cell to the left of the pivot. That gives
    us this:'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为了划分子数组`[0, 1]`，我们将最右侧的元素（`1`）作为枢轴。我们该如何放置左指针和右指针呢？左指针指向`0`，而右指针也指向`0`，因为我们总是将右指针放在枢轴左侧一个单元的位置。这给我们带来了：
- en: '![`images/divide_and_conquer_code_in_turbo_mode/quicksort_19.png`](images/divide_and_conquer_code_in_turbo_mode/quicksort_19.png)'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/divide_and_conquer_code_in_turbo_mode/quicksort_19.png`](images/divide_and_conquer_code_in_turbo_mode/quicksort_19.png)'
- en: We’re now ready to begin the partition.
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们现在准备开始划分。
- en: '`Step 14`: We compare the left pointer (`0`) with the pivot (`1`):'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`步骤 14`：我们将左指针（`0`）与枢轴（`1`）进行比较：'
- en: '![`images/divide_and_conquer_code_in_turbo_mode/quicksort_19.png`](images/divide_and_conquer_code_in_turbo_mode/quicksort_19.png)'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/divide_and_conquer_code_in_turbo_mode/quicksort_19.png`](images/divide_and_conquer_code_in_turbo_mode/quicksort_19.png)'
- en: It’s less than the pivot, so we move on.
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 它小于枢轴，因此我们继续前进。
- en: '`Step 15`: We shift the left pointer one cell to the right. It now points to
    the pivot:'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`步骤 15`：我们将左指针向右移动一个单元。它现在指向枢轴：'
- en: '![`images/divide_and_conquer_code_in_turbo_mode/quicksort_20.png`](images/divide_and_conquer_code_in_turbo_mode/quicksort_20.png)'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/divide_and_conquer_code_in_turbo_mode/quicksort_20.png`](images/divide_and_conquer_code_in_turbo_mode/quicksort_20.png)'
- en: Since the left pointer’s value (`1`) is not lower than the pivot (since it is
    the pivot), the left pointer stops moving.
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 由于左指针的值（`1`）不低于枢轴（因为它就是枢轴），左指针停止移动。
- en: '`Step 16`: We compare the right pointer with the pivot. Since it’s pointing
    to a value that is less than the pivot, we don’t move it anymore. And since the
    left pointer has passed the right pointer, we’re done moving pointers for this
    partition.'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`步骤 16`：我们将右指针与枢轴进行比较。由于它指向的值小于枢轴，因此我们不再移动它。由于左指针已经超过了右指针，我们在此划分中完成了指针的移动。'
- en: '`Step 17`: We now swap the left pointer with the pivot. Again, in this case,
    the left pointer is actually pointing to the pivot itself, so the swap doesn’t
    actually change anything. The pivot is now in its proper place, and we’re done
    with this partition.'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`步骤 17`：我们现在将左指针与枢轴交换。同样，在这种情况下，左指针实际上指向枢轴本身，因此交换实际上并没有改变任何东西。枢轴现在位于适当的位置，我们完成了这个划分。'
- en: 'That leaves us with this:'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这使我们得到了：
- en: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_21.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_21.png)'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_21.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_21.png)'
- en: 'Next up, we need to partition the subarray to the left of the most recent pivot.
    In this case, that subarray is `[0]`—an array of just one element. An array of
    zero or one elements is our base case, so we don’t do anything. The element is
    just considered to be in its proper place automatically. So now we’ve got this:'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 接下来，我们需要对最近的枢轴左侧的子数组进行划分。在这个例子中，该子数组是`[0]`——一个只有一个元素的数组。零个或一个元素的数组是我们的基本情况，因此我们不做任何操作。该元素会自动被认为在其适当的位置上。所以现在我们得到了这个：
- en: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_22.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_22.png)'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_22.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_22.png)'
- en: We started out by treating `3` as our pivot, and recursively partitioned the
    subarray to its left (`[0, 1, 2]`). As promised, we now need to come back to recursively
    partitioning the subarray to the right of the `3`, which is `[6, 5]`.
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们开始时将`3`视为我们的枢轴，并递归地划分其左侧的子数组`[0, 1, 2]`。正如承诺的那样，我们现在需要回到递归划分`3`右侧的子数组，即`[6,
    5]`。
- en: 'We’ll obscure the `[0, 1, 2, 3]`, since we’ve already sorted those, and now
    we’re only focusing on the `[6, 5]`:'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们将遮蔽`[0, 1, 2, 3]`，因为我们已经对这些进行了排序，现在我们只关注`[6, 5]`：
- en: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_23.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_23.png)'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_23.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_23.png)'
- en: 'In the next partition, we’ll treat the rightmost element (`5`) as the pivot.
    That gives us this:'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在下一个划分中，我们将最右侧的元素（`5`）视为枢轴。这样我们得到了：
- en: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_24.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_24.png)'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_24.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_24.png)'
- en: 'When setting up our next partition, our left and right pointers both end up
    pointing to the `6`:'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在设置下一个划分时，我们的左指针和右指针都指向`6`：
- en: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_25.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_25.png)'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_25.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_25.png)'
- en: 'Step 18: We compare the left pointer (`6`) with the pivot (`5`). Since `6`
    is greater than the pivot, the left pointer doesn’t move further.'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第18步：我们将左指针（`6`）与枢轴（`5`）进行比较。由于`6`大于枢轴，左指针不再移动。
- en: 'Step 19: The right pointer is pointing to the `6` as well, so we would theoretically
    move on to the next cell to the left. However, there are no more cells to the
    left of the `6`, so the right pointer stops moving. Since the left pointer has
    reached the right pointer, we’re done moving pointers altogether for this partition.
    That means we’re ready for the final step.'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第19步：右指针也指向`6`，因此我们理论上会移动到左侧的下一个单元格。然而，`6`左侧没有更多单元格，因此右指针停止移动。由于左指针已经到达右指针，我们在这个划分上不再移动指针。这意味着我们准备进行最后一步。
- en: 'Step 20: We swap the pivot with the value of the left pointer:'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第20步：我们将枢轴与左指针的值进行交换：
- en: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_26.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_26.png)'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_26.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_26.png)'
- en: 'Our pivot (`5`) is now in its correct spot, leaving us with this:'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们的枢轴（`5`）现在在正确的位置，留下的是：
- en: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_27.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_27.png)'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_27.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_27.png)'
- en: 'Next up, we technically need to recursively partition the subarray to the left
    and right of the `[5, 6]` subarray. Since there’s no subarray to its left, that
    means we only need to partition the subarray to the right. Since the subarray
    to the right of the `5` is a single element of `[6]`, that’s our base case and
    we do nothing—the `6` is automatically considered to be in its proper place:'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 接下来，我们技术上需要递归地划分`[5, 6]`子数组的左侧和右侧。由于左侧没有子数组，这意味着我们只需划分右侧的子数组。由于`5`右侧的子数组是单个元素`[6]`，这就是我们的基例，我们不需要做任何操作——`6`自动被认为在它的正确位置：
- en: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_28.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_28.png)'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/divide_and_conquer_code_in_turbo_mode/quicksort_28.png](images/divide_and_conquer_code_in_turbo_mode/quicksort_28.png)'
- en: And we’re done!
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然后我们完成了！
- en: 'Code Implementation: Quicksort'
  id: totrans-62
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 代码实现：快速排序
- en: 以下是我们可以添加到之前的`SortableArray`类中的一个`quicksort`方法，它能够成功完成快速排序：
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下是我们可以添加到之前的`SortableArray`类中的一个`quicksort`方法，它能够成功完成快速排序：
- en: '| ​  | `quicksort(leftIndex, rightIndex)` { |'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `quicksort(leftIndex, rightIndex)` { |'
- en: '| ​  | ​`if`​ (`rightIndex - leftIndex <= 0`) { |'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`if`​ (`rightIndex - leftIndex <= 0`) { |'
- en: '| ​  | ​`return`​; |'
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`return`​; |'
- en: '| ​  | } |'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | ​`const`​ `pivotIndex` = ​`this`​.partition(`leftIndex`, `rightIndex`);
    |'
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`const`​ `pivotIndex` = ​`this`​.partition(`leftIndex`, `rightIndex`);
    |'
- en: '| ​  |  |'
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | ​`this`​.quicksort(`leftIndex`, `pivotIndex - 1`); |'
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`this`​.quicksort(`leftIndex`, `pivotIndex - 1`); |'
- en: '| ​  |  |'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | ​`this`​.quicksort(`pivotIndex + 1`, `rightIndex`); |'
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`this`​.quicksort(`pivotIndex + 1`, `rightIndex`); |'
- en: '| ​  | } |'
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 这里的代码令人惊讶地简洁，但让我们看一下每一行。目前，我们将跳过表示基例的第一行代码，直接跳到关键的递归部分。
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里的代码令人惊讶地简洁，但让我们看一下每一行。目前，我们将跳过表示基例的第一行代码，直接跳到关键的递归部分。
- en: 我们通过划分`leftIndex`和`rightIndex`之间的元素范围开始：
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们通过划分`leftIndex`和`rightIndex`之间的元素范围开始：
- en: '| ​  | ​`const`​ `pivotIndex` = ​`this`​.partition(`leftIndex`, `rightIndex`);
    |'
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`const`​ `pivotIndex` = ​`this`​.partition(`leftIndex`, `rightIndex`);
    |'
- en: 第一次运行`quicksort`时，我们划分整个数组。然而，在后续调用中，这行代码划分`leftIndex`和`rightIndex`之间的任何元素范围，这可能是原始数组的一个子部分。
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第一次运行`quicksort`时，我们划分整个数组。然而，在后续调用中，这行代码划分`leftIndex`和`rightIndex`之间的任何元素范围，这可能是原始数组的一个子部分。
- en: 请注意，我们将`partition`的返回值赋给一个名为`pivotIndex`的变量。如果你还记得，这个值在`partition`方法完成时是指向枢轴的`leftPointer`。
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 请注意，我们将`partition`的返回值赋给一个名为`pivotIndex`的变量。如果你还记得，这个值在`partition`方法完成时是指向枢轴的`leftPointer`。
- en: 然后我们递归调用`quicksort`在枢轴左侧和右侧的子数组上：
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然后我们在枢轴左侧和右侧的子数组上递归调用`quicksort`：
- en: '| ​  | ​`this`​.quicksort(`leftIndex`, `pivotIndex - 1`); |'
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`this`​.quicksort(`leftIndex`, `pivotIndex - 1`); |'
- en: '| ​  | ​`this`​.quicksort(`pivotIndex + 1`, `rightIndex`); |'
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`this`​.quicksort(`pivotIndex + 1`, `rightIndex`); |'
- en: 当我们达到基例时递归结束，即当前子数组包含不超过一个元素：
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当我们达到基例时递归结束，即当前子数组包含不超过一个元素：
- en: '| ​  | ​`if`​ (`rightIndex - leftIndex <= 0`) { |'
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`if`​ (`rightIndex - leftIndex <= 0`) { |'
- en: '| ​  | ​`return`​; |'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`return`​; |'
- en: '| ​  | } |'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 我们可以使用以下代码对我们的`Quicksort`实现进行测试：
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们可以使用以下代码对我们的`Quicksort`实现进行测试：
- en: '| ​  | ​`const`​ `array` = `[0, 5, 2, 1, 6, 3]`; |'
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`const`​ `array` = `[0, 5, 2, 1, 6, 3]`; |'
- en: '| ​  | ​`const`​ `sortableArray` = ​`new`​ `SortableArray`(`array`); |'
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`const`​ `sortableArray` = ​`new`​ `SortableArray`(`array`); |'
- en: '| ​  | `sortableArray.quicksort(0, array.length - 1);` |'
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `sortableArray.quicksort(0, array.length - 1);` |'
- en: '| ​  | `console.log(sortableArray.array);` |'
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `console.log(sortableArray.array);` |'
