- en: 'Module 3:'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 第三模块：
- en: '|'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Components in Vue.js
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js中的组件
- en: '|'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'In the ever-evolving landscape of web development, creating scalable and maintainable
    user interfaces is paramount. Vue.js, a progressive JavaScript framework, places
    a significant emphasis on modularity through its robust component system. This
    module, aptly titled "Components in Vue.js," is a pivotal segment within the book
    "Vue.js Essentials: For Responsive Web Development." Here, readers will embark
    on a comprehensive exploration of Vue.js components, gaining insights into their
    creation, composition, and the pivotal role they play in building responsive and
    dynamic web applications.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在不断发展的Web开发领域，创建可扩展且易于维护的用户界面至关重要。Vue.js作为一个渐进式JavaScript框架，通过其强大的组件系统，极大地强调了模块化。本模块，恰如其名“Vue.js中的组件”，是《Vue.js精要：响应式Web开发》一书中的关键章节。在这里，读者将全面探索Vue.js组件，深入了解它们的创建、构成以及它们在构建响应式和动态Web应用中的关键作用。
- en: Decoding the Essence of Vue.js Components
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 解码Vue.js组件的本质
- en: At the heart of Vue.js lies the concept of components, encapsulated units of
    code that enable developers to create modular and reusable building blocks for
    their applications. This module commences by unraveling the essence of Vue.js
    components, elucidating their role in fostering a modular architecture. Readers
    will delve into the anatomy of components, understanding how they facilitate code
    organization, maintainability, and collaboration among developers. By grasping
    the core principles of components, developers lay a solid foundation for constructing
    sophisticated and responsive user interfaces.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js的核心是组件的概念，组件是封装的代码单元，使开发者能够为他们的应用创建模块化和可重用的构建块。本模块从揭示Vue.js组件的本质开始，阐明它们在推动模块化架构中的作用。读者将深入了解组件的构造，理解它们如何促进代码的组织、可维护性以及开发者之间的协作。通过掌握组件的核心原理，开发者为构建复杂且响应迅速的用户界面奠定坚实的基础。
- en: Creating and Registering Components
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 创建和注册组件
- en: Understanding how to create and register components is fundamental to harnessing
    the power of Vue.js. This segment of the module provides a step-by-step guide,
    offering insights into defining component options, leveraging data properties,
    and utilizing lifecycle hooks. Through practical examples and hands-on exercises,
    readers will gain proficiency in crafting components that encapsulate distinct
    functionalities, promoting a modular and maintainable codebase. The module navigates
    through the intricacies of component registration, empowering developers to seamlessly
    integrate components into their Vue.js applications.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 理解如何创建和注册组件是利用Vue.js强大功能的基础。本模块的这一部分提供了逐步指南，深入介绍如何定义组件选项、利用数据属性以及使用生命周期钩子。通过实践案例和动手练习，读者将熟练掌握构建封装独立功能的组件，促进模块化和易维护的代码库。本模块还将详细讲解组件注册的复杂性，使开发者能够将组件无缝地集成到他们的Vue.js应用中。
- en: Mastering Parent-Child Communication
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 精通父子组件通信
- en: The effectiveness of Vue.js components lies not only in their standalone capabilities
    but also in their ability to communicate with each other. This module delves into
    the art of parent-child communication within Vue.js components. Readers will explore
    various communication patterns, such as props for passing data from parent to
    child, custom events for child-to-parent communication, and the use of a shared
    state through a global event bus. By mastering these communication strategies,
    developers unlock the potential to build complex and interactive interfaces while
    maintaining the modularity and reusability of their components.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 组件的有效性不仅体现在它们的独立能力上，还体现在它们相互通信的能力上。本模块将深入探讨 Vue.js 组件中的父子通信艺术。读者将探索各种通信模式，如通过
    props 从父组件向子组件传递数据、通过自定义事件实现子组件向父组件的通信，以及通过全局事件总线使用共享状态。通过掌握这些通信策略，开发者将解锁构建复杂且互动性强的界面的潜力，同时保持组件的模块化和可重用性。
- en: Advanced Component Concepts for Robust Applications
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 强大的应用程序的高级组件概念
- en: As developers progress through the module, they will encounter advanced concepts
    that elevate their proficiency in Vue.js component development. From dynamic components
    and slots to mixins and higher-order components, this segment explores techniques
    that empower developers to create robust, flexible, and extensible applications.
    By the module's conclusion, readers will possess the knowledge and skills required
    to architect sophisticated Vue.js applications that seamlessly adapt to the demands
    of responsive web development.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 随着开发者深入本模块，他们将接触到提升 Vue.js 组件开发熟练度的高级概念。从动态组件和插槽到混入和高阶组件，本部分探讨了使开发者能够创建强大、灵活和可扩展应用程序的技巧。在本模块结束时，读者将掌握构建复杂
    Vue.js 应用程序的知识和技能，这些应用程序能无缝适应响应式网页开发的需求。
- en: '"Components in Vue.js" serves as a comprehensive guide, demystifying the intricacies
    of Vue.js component development. This module within "Vue.js Essentials: For Responsive
    Web Development" equips readers with the knowledge and practical insights needed
    to harness the full potential of Vue.js components in crafting modular, reusable,
    and responsive user interfaces for the modern web.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '"Vue.js 中的组件"作为一份全面的指南，揭示了 Vue.js 组件开发的复杂性。本模块属于《Vue.js Essentials: For Responsive
    Web Development》一书，它为读者提供了将 Vue.js 组件的全部潜力应用于现代网页开发中，打造模块化、可重用且响应迅速的用户界面所需的知识和实用见解。'
- en: Introduction to Components
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件简介
- en: 'The module "Components in Vue.js" within the book "Vue.js Essentials: For Responsive
    Web Development" takes a pivotal step with the section titled "Introduction to
    Components." This section marks the beginning of a profound exploration into the
    core building blocks of Vue.js development – components. Components in Vue.js
    provide a structured and modular approach to organizing and managing the user
    interface, offering developers a powerful means to create reusable and maintainable
    code.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '书籍《Vue.js Essentials: For Responsive Web Development》中的“Vue.js 组件”模块，通过“组件介绍”部分迈出了重要一步。该部分标志着深入探索
    Vue.js 开发核心构建块——组件——的开始。Vue.js 中的组件提供了一种结构化和模块化的方法来组织和管理用户界面，为开发人员提供了强大的手段来创建可重用和易于维护的代码。'
- en: '<!-- Vue.js component example: HelloComponent -->'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- Vue.js 组件示例：HelloComponent -->
- en: <template>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <p>{{ greeting }}</p>
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: <p>{{ greeting }}</p>
- en: </div>
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'greeting: ''Hello, Vue.js Component!'''
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 'greeting: ''你好，Vue.js 组件！'''
- en: '};'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '}'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: <style scoped>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: <style scoped>
- en: p {
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: p {
- en: 'color: #42b983;'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: #42b983;'
- en: '}'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: The code snippet introduces a basic Vue.js component named "HelloComponent."
    Components encapsulate the template, script, and style sections, providing a modular
    structure. In this example, the component displays a greeting message, and the
    styling is scoped to prevent unintended conflicts. This encapsulation ensures
    reusability and separation of concerns, making components a cornerstone of Vue.js
    development.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 代码片段介绍了一个名为“HelloComponent”的基本 Vue.js 组件。组件将模板、脚本和样式部分封装在一起，提供了一种模块化结构。在这个示例中，组件显示了一个问候消息，样式是作用域限定的，以防止不必要的冲突。这种封装确保了可重用性和关注点分离，使得组件成为
    Vue.js 开发的基石。
- en: 'Registering and Using Components: Vue.js Modularity in Action'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注册和使用组件：Vue.js 模块化实践
- en: The "Introduction to Components" section emphasizes the process of registering
    and utilizing Vue.js components, showcasing the modularity and reusability they
    bring to the development workflow.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: “组件介绍”部分强调了注册和使用 Vue.js 组件的过程，展示了它们在开发流程中带来的模块化和可重用性。
- en: <!-- Parent component using HelloComponent -->
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- 父组件使用 HelloComponent -->
- en: <template>
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h1>Parent Component</h1>
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: <h1>父组件</h1>
- en: <HelloComponent />
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: <HelloComponent />
- en: </div>
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: import HelloComponent from './HelloComponent.vue';
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: import HelloComponent from './HelloComponent.vue';
- en: export default {
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: 'components: {'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 'components: {'
- en: HelloComponent
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: HelloComponent
- en: '}'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In this example, a parent component utilizes the "HelloComponent" by importing
    it and registering it within the "components" option. The component can then be
    used within the template, fostering a modular and organized structure. This approach
    facilitates the creation of complex applications by breaking them down into manageable
    and reusable components.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，父组件通过导入并在"components"选项中注册"HelloComponent"来使用该组件。该组件可以在模板中使用，从而促进了模块化和结构化的开发。这种方法通过将应用程序拆分成可管理和可重用的组件，便于创建复杂的应用。
- en: 'Props: Passing Data to Components'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 'Props: 向组件传递数据'
- en: The section further explores the concept of props, a mechanism for passing data
    from a parent component to a child component in Vue.js.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 本节进一步探讨了props的概念，props是一种在Vue.js中将数据从父组件传递给子组件的机制。
- en: <!-- Parent component passing a prop to HelloComponent -->
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- 父组件将一个prop传递给HelloComponent -->
- en: <template>
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h1>Parent Component</h1>
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: <h1>父组件</h1>
- en: <HelloComponent :message="greetingMessage" />
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: <HelloComponent :message="greetingMessage" />
- en: </div>
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: import HelloComponent from './HelloComponent.vue';
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: import HelloComponent from './HelloComponent.vue';
- en: export default {
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: 'components: {'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 'components: {'
- en: HelloComponent
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: HelloComponent
- en: '},'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: data() {
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'greetingMessage: ''Hello from Parent!'''
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 'greetingMessage: ''Hello from Parent!'''
- en: '};'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '}'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: Here, the parent component passes a prop named "message" to "HelloComponent"
    with the value "Hello from Parent!" The child component can then use this prop
    to dynamically display content, showcasing the seamless communication between
    components in Vue.js.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，父组件将一个名为"message"的prop传递给"HelloComponent"，值为"Hello from Parent!"。子组件随后可以使用该prop动态显示内容，展示了Vue.js中组件之间的无缝通信。
- en: '"Introduction to Components" in the "Components in Vue.js" module provides
    developers with a foundational understanding of Vue.js components. From creating
    a basic component structure to registering, using, and passing data with props,
    this section lays the groundwork for building scalable and maintainable Vue.js
    applications. The detailed code examples illustrate the practical implementation
    of these concepts, guiding developers into the world of Vue.js component-based
    development.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '"组件简介"模块中的"Vue.js中的组件"为开发者提供了关于Vue.js组件的基础理解。从创建基本的组件结构，到注册、使用和通过props传递数据，本节为构建可扩展和可维护的Vue.js应用程序奠定了基础。详细的代码示例说明了这些概念的实际应用，帮助开发者进入基于组件的Vue.js开发世界。'
- en: Creating and Registering Components
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和注册组件
- en: 'The "Components in Vue.js" module within the book "Vue.js Essentials: For Responsive
    Web Development" embarks on a crucial exploration with the section titled "Creating
    and Registering Components." This section serves as a foundational cornerstone,
    unveiling the process of crafting Vue.js components and integrating them into
    the application architecture. Components, in Vue.js, play a pivotal role in fostering
    modularity, reusability, and maintainability.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '《Vue.js Essentials: For Responsive Web Development》一书中的“Vue.js中的组件”模块，带领读者通过名为“创建和注册组件”的章节进行关键探索。这个章节作为基础基石，揭示了如何创建Vue.js组件并将其集成到应用架构中。在Vue.js中，组件在促进模块化、可重用性和可维护性方面起着至关重要的作用。'
- en: '<!-- Vue.js component creation: HelloWorld -->'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- Vue.js 组件创建：HelloWorld -->
- en: <template>
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h1>{{ greeting }}</h1>
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: <h1>{{ greeting }}</h1>
- en: </div>
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'greeting: ''Hello, Vue.js Component!'''
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 'greeting: ''Hello, Vue.js 组件！'''
- en: '};'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '}'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: <style scoped>
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: <style scoped>
- en: h1 {
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: h1 {
- en: 'color: #42b983;'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: #42b983;'
- en: '}'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: The code snippet introduces a simple Vue.js component named "HelloWorld." Components
    encapsulate the template, script, and style sections, providing a structured and
    modular approach. In this example, the component displays a greeting message,
    and the styling is scoped to prevent unintended conflicts. This encapsulation
    ensures that each component is self-contained, promoting reusability and maintainability
    in Vue.js applications.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码示例介绍了一个简单的Vue.js组件，名为“HelloWorld”。组件封装了模板、脚本和样式部分，提供了一种结构化和模块化的方式。在这个示例中，组件显示一个问候消息，样式被作用域限定以避免不必要的冲突。通过这种封装，确保了每个组件都是自包含的，从而促进了Vue.js应用程序中的可重用性和可维护性。
- en: 'Registering Components Locally: Vue.js Component Integration'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 本地注册组件：Vue.js组件集成
- en: The "Creating and Registering Components" section emphasizes the process of
    registering components locally, illustrating how Vue.js components seamlessly
    integrate into the application structure.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: “创建和注册组件”章节强调了本地注册组件的过程，演示了Vue.js组件如何无缝集成到应用结构中。
- en: <!-- Parent component registering and using HelloWorld locally -->
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- 父组件本地注册并使用HelloWorld -->
- en: <template>
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h2>Parent Component</h2>
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: <h2>父组件</h2>
- en: <HelloWorld />
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: <HelloWorld />
- en: </div>
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: import HelloWorld from './HelloWorld.vue';
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: import HelloWorld from './HelloWorld.vue';
- en: export default {
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: 'components: {'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 'components: {'
- en: HelloWorld
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: HelloWorld
- en: '}'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In this example, a parent component registers the "HelloWorld" component locally
    by importing it and defining it within the "components" option. This local registration
    ensures that the "HelloWorld" component is available for use within the template
    of the parent component. Vue.js leverages this modular approach to facilitate
    the creation of complex applications through the integration of smaller, manageable
    components.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，父组件通过导入“HelloWorld”组件并在“components”选项中定义它来进行本地注册。此本地注册确保了“HelloWorld”组件可以在父组件的模板中使用。Vue.js利用这种模块化的方法，通过集成更小、更易管理的组件，促进了复杂应用程序的创建。
- en: 'Registering Components Globally: Vue.js for Large-Scale Applications'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 全局注册组件：Vue.js在大型应用程序中的应用
- en: The section further explores the concept of registering components globally,
    showcasing how Vue.js accommodates large-scale applications with a global component
    registration approach.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 本节进一步探讨了全局注册组件的概念，展示了Vue.js如何通过全局组件注册方法支持大型应用程序的构建。
- en: // main.js
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: // main.js
- en: import Vue from 'vue';
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: import Vue from 'vue';
- en: import App from './App.vue';
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: import App from './App.vue';
- en: import HelloWorld from './components/HelloWorld.vue';
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: import HelloWorld from './components/HelloWorld.vue';
- en: Vue.component('HelloWorld', HelloWorld);
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.component('HelloWorld', HelloWorld);
- en: new Vue({
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: new Vue({
- en: 'render: h => h(App)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 'render: h => h(App)'
- en: '}).$mount(''#app'');'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '}).$mount(''#app'');'
- en: In this example, the "HelloWorld" component is registered globally in the main
    entry file, enabling it to be used across all components without the need for
    local registration. While global registration is convenient for small to medium-sized
    applications, it is particularly advantageous for large-scale applications with
    numerous components.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，“HelloWorld”组件在主入口文件中进行了全局注册，使其能够在所有组件中使用，无需进行本地注册。虽然全局注册对于小到中型应用程序非常方便，但对于包含大量组件的大型应用程序而言，它特别具有优势。
- en: '"Creating and Registering Components" in the "Components in Vue.js" module
    provides a foundational understanding of Vue.js component architecture. From creating
    a basic component structure to registering components locally and globally, this
    section equips developers with the tools needed to architect modular, scalable,
    and maintainable Vue.js applications. The detailed code examples illustrate practical
    implementation, guiding developers in leveraging Vue.js''s component-based development
    for efficient and organized web development.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: “在‘Vue.js中的组件’模块中创建和注册组件”部分为理解Vue.js组件架构提供了基础。从创建基本的组件结构到本地和全局注册组件，本节为开发人员提供了构建模块化、可扩展且可维护的Vue.js应用程序所需的工具。详细的代码示例展示了实际的实现过程，指导开发人员利用Vue.js的基于组件的开发方式，高效且有组织地进行网页开发。
- en: Props and Custom Events
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性和自定义事件
- en: 'The "Components in Vue.js" module of the book "Vue.js Essentials: For Responsive
    Web Development" delves into a critical aspect with the section titled "Props
    and Custom Events." This section explores the mechanisms by which Vue.js components
    communicate with each other, providing developers with the tools to pass data
    from parent to child components and emit custom events for effective communication.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '本书《Vue.js Essentials: For Responsive Web Development》中的 "Vue.js 组件" 模块深入探讨了一个重要部分——"Props
    和自定义事件" 章节。该章节探索了 Vue.js 组件之间如何通过 props 和自定义事件进行通信，提供了开发者将数据从父组件传递到子组件并触发自定义事件的工具，以实现有效的组件间通信。'
- en: '<!-- Child component using props: GreetUser -->'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '<!-- 子组件使用 props: GreetUser -->'
- en: <template>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <p>{{ greeting }}</p>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <p>{{ greeting }}</p>
- en: </div>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: 'props: [''userName''],'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 'props: [''userName''],'
- en: 'computed: {'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 'computed: {'
- en: greeting() {
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: greeting() {
- en: return `Hello, ${this.userName}!`;
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: return `Hello, ${this.userName}!`;
- en: '}'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: The code snippet introduces a child component named "GreetUser," utilizing props
    to receive data from its parent component. The "userName" prop is defined within
    the child component, enabling it to dynamically generate a greeting message based
    on the received data. This seamless data flow ensures a cohesive and interconnected
    structure within Vue.js applications.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码介绍了一个名为 "GreetUser" 的子组件，它利用 props 从父组件接收数据。子组件中定义了 "userName" prop，使其能够根据接收到的数据动态生成问候信息。这种无缝的数据流动确保了
    Vue.js 应用中的结构紧密和相互连接。
- en: 'Passing Data with Props: Vue.js Parent-to-Child Communication'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 数据传递与 Props：Vue.js 父子组件通信
- en: The "Props and Custom Events" section emphasizes the significance of props for
    enabling parent-to-child communication in Vue.js components.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '"Props 和自定义事件" 章节强调了 props 在 Vue.js 组件中实现父子组件通信的重要性。'
- en: <!-- Parent component passing data with props -->
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- 父组件通过 props 传递数据 -->
- en: <template>
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h1>Parent Component</h1>
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: <h1>父组件</h1>
- en: <GreetUser :userName="user" />
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: <GreetUser :userName="user" />
- en: </div>
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: import GreetUser from './GreetUser.vue';
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: import GreetUser from './GreetUser.vue';
- en: export default {
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: 'components: {'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 'components: {'
- en: GreetUser
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: GreetUser
- en: '},'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: data() {
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'user: ''John'''
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 'user: ''John'''
- en: '};'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '}'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In this example, the parent component utilizes the "GreetUser" component and
    passes the data "John" to the "userName" prop. This approach enables dynamic data
    rendering within the child component, showcasing Vue.js's ability to facilitate
    smooth communication between components.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，父组件使用了 "GreetUser" 组件，并将数据 "John" 传递给 "userName" prop。通过这种方式，子组件可以动态渲染数据，展示了
    Vue.js 在组件间实现流畅通信的能力。
- en: 'Custom Events: Vue.js Child-to-Parent Communication'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义事件：Vue.js 子到父组件通信
- en: The section further explores custom events, a mechanism for enabling child-to-parent
    communication in Vue.js components.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节进一步探讨了自定义事件，这是一种在 Vue.js 组件中实现子到父组件通信的机制。
- en: '<!-- Child component emitting custom event: SendMessage -->'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- 子组件触发自定义事件：SendMessage -->
- en: <template>
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <button @click="sendMessage">Send Message</button>
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="sendMessage">发送消息</button>
- en: </div>
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: 'methods: {'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: sendMessage() {
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: sendMessage() {
- en: this.$emit('message-sent', 'Hello from Child!');
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: this.$emit('message-sent', '来自子组件的问候！');
- en: '}'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: The "SendMessage" component emits a custom event named "message-sent" with the
    message "Hello from Child!" when the button is clicked. This custom event can
    be captured by the parent component, enabling bidirectional communication between
    parent and child components.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '"SendMessage" 组件在按钮点击时，会触发一个名为 "message-sent" 的自定义事件，并携带消息 "来自子组件的问候！"。这个自定义事件可以被父组件捕获，从而实现父子组件之间的双向通信。'
- en: <!-- Parent component capturing custom event -->
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- 父组件捕获自定义事件 -->
- en: <template>
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h2>Parent Component</h2>
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: <h2>父组件</h2>
- en: <SendMessage @message-sent="handleMessage" />
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: <SendMessage @message-sent="handleMessage" />
- en: <p>{{ receivedMessage }}</p>
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: <p>{{ receivedMessage }}</p>
- en: </div>
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: import SendMessage from './SendMessage.vue';
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: import SendMessage from './SendMessage.vue';
- en: export default {
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: 'components: {'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 'components: {'
- en: SendMessage
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: SendMessage
- en: '},'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: data() {
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'receivedMessage: '''''
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 'receivedMessage: '''''
- en: '};'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: handleMessage(message) {
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: handleMessage(message) {
- en: this.receivedMessage = message;
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: this.receivedMessage = message;
- en: '}'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In this parent component, the "SendMessage" component is utilized, and a custom
    event listener captures the emitted event. The received message is then displayed
    in the template, showcasing Vue.js's versatility in enabling bidirectional communication
    between components.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个父组件中，使用了 "SendMessage" 组件，并且一个自定义事件监听器捕获了触发的事件。接收到的消息随后会在模板中显示，展示了 Vue.js
    在实现父子组件双向通信方面的灵活性。
- en: '"Props and Custom Events" in the "Components in Vue.js" module equips developers
    with the knowledge and tools to facilitate seamless communication between Vue.js
    components. From passing data with props for parent-to-child communication to
    emitting and capturing custom events for child-to-parent communication, this section
    provides a comprehensive understanding of the mechanisms that foster collaboration
    between components. The detailed code examples offer practical insights, empowering
    developers to leverage Vue.js for effective and organized component-based development.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '"Props 和自定义事件" 在 "Vue.js 中的组件" 模块中，为开发者提供了促进 Vue.js 组件之间无缝通信的知识和工具。从通过 props
    进行父子组件之间的数据传递，到通过自定义事件进行子父组件之间的通信，本节内容全面讲解了促进组件协作的机制。详细的代码示例提供了实用的见解，帮助开发者利用 Vue.js
    实现高效且有序的组件化开发。'
- en: Component Lifecycle Hooks
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件生命周期钩子
- en: 'The module "Components in Vue.js" within the book "Vue.js Essentials: For Responsive
    Web Development" advances to a crucial exploration in the section titled "Component
    Lifecycle Hooks." This section sheds light on the series of lifecycle hooks in
    Vue.js, each representing a distinct phase in the existence of a component. Understanding
    these hooks provides developers with the ability to execute code at specific moments
    in a component''s lifecycle, enabling precise control and customization.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '书籍《Vue.js Essentials: For Responsive Web Development》中的“Vue.js 组件”模块，在“组件生命周期钩子”这一部分进行了关键性的探讨。本节内容阐明了
    Vue.js 中的一系列生命周期钩子，每个钩子代表组件生命周期中的一个特定阶段。理解这些钩子可以让开发者在组件生命周期的特定时刻执行代码，从而实现精确的控制和定制。'
- en: '<!-- Vue.js component with mounted lifecycle hook: LifecycleExample -->'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- Vue.js 组件，包含挂载生命周期钩子：LifecycleExample -->
- en: <template>
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <p>Component is mounted!</p>
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: <p>组件已挂载！</p>
- en: </div>
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: mounted() {
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: mounted() {
- en: console.log('Component is mounted!');
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('组件已挂载！');
- en: '}'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: The code snippet introduces the "LifecycleExample" component with the "mounted"
    lifecycle hook. The "mounted" hook is triggered when the component is inserted
    into the DOM, allowing developers to perform actions post-mounting. In this example,
    it logs a message to the console, showcasing how lifecycle hooks offer insight
    and control at specific points in a component's life.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 代码片段展示了带有“mounted”生命周期钩子的“LifecycleExample”组件。“mounted”钩子在组件插入到 DOM 时触发，允许开发者在组件挂载后执行操作。在这个示例中，它将一条消息记录到控制台，展示了生命周期钩子如何在组件生命周期的特定时刻提供控制和洞察。
- en: 'Understanding the Component Lifecycle: Vue.js Phases Unveiled'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 理解组件生命周期：Vue.js 阶段揭秘
- en: The "Component Lifecycle Hooks" section unfolds the various phases a Vue.js
    component undergoes, each marked by a specific lifecycle hook. Key hooks include
    "created," "mounted," "updated," and "destroyed," among others. These hooks provide
    developers with opportunities to execute code during component creation, mounting,
    updating, and destruction.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: “组件生命周期钩子”部分展示了 Vue.js 组件经历的各个阶段，每个阶段都有一个特定的生命周期钩子。关键钩子包括“created”、“mounted”、“updated”和“destroyed”等等。这些钩子为开发者提供了在组件创建、挂载、更新和销毁过程中执行代码的机会。
- en: '<!-- Vue.js component with created and destroyed lifecycle hooks: LifecycleExample
    -->'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- Vue.js 组件，包含创建和销毁生命周期钩子：LifecycleExample -->
- en: <template>
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <p>Component created and will be destroyed!</p>
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: <p>组件已创建，并将被销毁！</p>
- en: </div>
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: created() {
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: created() {
- en: console.log('Component is created!');
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('组件已创建！');
- en: '},'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: destroyed() {
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: destroyed() {
- en: console.log('Component will be destroyed!');
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('组件将被销毁！');
- en: '}'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In this example, both "created" and "destroyed" lifecycle hooks are utilized.
    The "created" hook is executed when the component is created, and the "destroyed"
    hook is triggered just before the component is destroyed. These hooks enable developers
    to perform setup and cleanup tasks precisely when needed.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，"created" 和 "destroyed" 生命周期钩子都被使用。"created" 钩子在组件创建时执行，"destroyed" 钩子在组件销毁之前触发。这些钩子允许开发者在需要时执行初始化和清理任务。
- en: 'Lifecycle Hooks in Action: Leveraging the Full Vue.js Lifecycle'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 生命周期钩子实践：充分利用 Vue.js 的整个生命周期
- en: The section emphasizes the holistic nature of the Vue.js component lifecycle,
    showcasing how hooks can be strategically utilized for diverse scenarios.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 本节强调了 Vue.js 组件生命周期的整体性，展示了如何根据不同场景策略性地使用生命周期钩子。
- en: '<!-- Vue.js component with various lifecycle hooks: LifecycleExample -->'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- 带有各种生命周期钩子的 Vue.js 组件：LifecycleExample -->
- en: <template>
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <p>Component with various lifecycle hooks!</p>
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: <p>具有各种生命周期钩子的组件！</p>
- en: </div>
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: beforeCreate() {
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: beforeCreate() {
- en: console.log('Before creation!');
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('创建之前！');
- en: '},'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: created() {
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: created() {
- en: console.log('Component is created!');
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('组件已创建！');
- en: '},'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: beforeMount() {
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: beforeMount() {
- en: console.log('Before mounting!');
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('挂载之前！');
- en: '},'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: mounted() {
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: mounted() {
- en: console.log('Component is mounted!');
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('组件已挂载！');
- en: '},'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: beforeUpdate() {
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: beforeUpdate() {
- en: console.log('Before update!');
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('更新之前！');
- en: '},'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: updated() {
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: updated() {
- en: console.log('Component is updated!');
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('组件已更新！');
- en: '},'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: beforeDestroy() {
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: beforeDestroy() {
- en: console.log('Before destruction!');
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('销毁之前！');
- en: '},'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: destroyed() {
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: destroyed() {
- en: console.log('Component is destroyed!');
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: console.log('组件已销毁！');
- en: '}'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: This comprehensive example illustrates the use of various lifecycle hooks, covering
    moments before creation, mounting, updating, and destruction. Developers can leverage
    these hooks strategically to tailor their Vue.js components according to specific
    requirements, ensuring optimal performance and behavior.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 这个全面的示例展示了各种生命周期钩子的使用，涵盖了创建、挂载、更新和销毁之前的时刻。开发者可以战略性地利用这些钩子，根据具体需求定制他们的 Vue.js
    组件，确保最佳的性能和行为。
- en: '"Component Lifecycle Hooks" in the "Components in Vue.js" module unveils the
    intricacies of Vue.js component lifecycles. From "beforeCreate" to "destroyed,"
    each hook offers a unique vantage point for developers to intervene and customize
    the behavior of their components. The detailed code examples illustrate the practical
    implementation of lifecycle hooks, providing developers with a comprehensive understanding
    of how to harness the full potential of Vue.js component lifecycles for efficient
    and organized web development.'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '"组件生命周期钩子" 在 "Vue.js 组件" 模块中揭示了 Vue.js 组件生命周期的复杂性。从 "beforeCreate" 到 "destroyed"，每个钩子都为开发者提供了一个独特的视角，以便干预并定制组件的行为。详细的代码示例展示了生命周期钩子的实际应用，为开发者提供了全面的理解，帮助他们充分利用
    Vue.js 组件生命周期，以便进行高效、有序的 Web 开发。'
