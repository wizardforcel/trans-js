- en: 'Module 8:'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 模块 8：
- en: '|'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Vue.js and Styling
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 与样式
- en: '|'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'In the realm of web development, the aesthetics and responsiveness of user
    interfaces are pivotal elements in creating an engaging and seamless user experience.
    The module "Vue.js and Styling" emerges as a crucial segment within the book "Vue.js
    Essentials: For Responsive Web Development," guiding readers through the intricacies
    of styling Vue.js applications. Within these pages, developers will delve into
    the world of CSS, preprocessors, and Vue.js directives, mastering the art of creating
    visually appealing and responsive user interfaces.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页开发领域，用户界面的美观性和响应性是创建引人入胜且流畅的用户体验的关键因素。本模块《Vue.js 与样式》是《Vue.js 精要：响应式网页开发》一书中的重要章节，引导读者深入了解
    Vue.js 应用样式的复杂性。在这些内容中，开发者将深入了解 CSS、预处理器和 Vue.js 指令，掌握创建既美观又具响应性的用户界面的技巧。
- en: Recognizing the Role of Styling in Vue.js Applications
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 认识样式在 Vue.js 应用中的角色
- en: Before exploring the specifics of styling in Vue.js, it is essential to recognize
    the fundamental role of styling in modern web development. This module initiates
    by highlighting the impact of visual design on user engagement and satisfaction.
    Readers gain an understanding of how Vue.js seamlessly integrates with styling
    practices to empower developers in creating aesthetically pleasing interfaces
    that adapt to various screen sizes and devices.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨 Vue.js 中样式的具体内容之前，首先必须认识到样式在现代网页开发中的基础性作用。本模块首先强调了视觉设计对用户参与度和满意度的影响。读者将了解
    Vue.js 如何与样式实践无缝结合，帮助开发者创建既美观又能适应不同屏幕尺寸和设备的界面。
- en: CSS, Preprocessors, and Scoped Styles in Vue.js
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: CSS、预处理器和 Vue.js 中的作用域样式
- en: The foundation of styling in Vue.js lies in the understanding of CSS (Cascading
    Style Sheets) and its extensions through preprocessors like Sass or Less. This
    segment delves into the basics of styling Vue.js components using standard CSS
    and introduces the concept of scoped styles—a Vue.js feature that encapsulates
    styles within the component, preventing global style leakage. Readers will gain
    insights into harnessing the power of preprocessors to enhance maintainability
    and organization in their stylesheets.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 中样式的基础在于理解 CSS（层叠样式表）及其通过预处理器（如 Sass 或 Less）扩展的方式。本部分将深入探讨使用标准 CSS 样式
    Vue.js 组件的基础，并介绍作用域样式的概念——这是 Vue.js 的一项功能，可以将样式封装在组件内部，防止全局样式泄漏。读者将获得如何利用预处理器来增强样式表的可维护性和组织性的洞察。
- en: Dynamic Styling with Vue.js Directives and Classes
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Vue.js 指令和类进行动态样式设置
- en: Vue.js offers dynamic styling capabilities through directives and class binding.
    This module explores the intricacies of using directives such as v-bind:class
    to dynamically apply styles based on component data. Readers will learn to create
    responsive designs by conditionally applying styles, enabling Vue.js applications
    to adapt to varying states and user interactions. Practical examples and exercises
    guide developers in mastering the art of dynamic styling within Vue.js components.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 通过指令和类绑定提供了动态样式的功能。本模块探讨了使用像 `v-bind:class` 这样的指令，根据组件数据动态应用样式的细节。读者将学会通过条件应用样式来创建响应式设计，使
    Vue.js 应用能够适应不同的状态和用户交互。实际示例和练习将指导开发者掌握在 Vue.js 组件中进行动态样式设计的艺术。
- en: Vue.js and CSS Framework Integration
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 与 CSS 框架集成
- en: As web development projects grow in complexity, the integration of CSS frameworks
    becomes a valuable strategy. This segment explores how Vue.js seamlessly integrates
    with popular CSS frameworks like Bootstrap or Tailwind CSS. Readers will gain
    insights into leveraging the pre-built components and utility classes offered
    by these frameworks within Vue.js applications, streamlining the styling process
    and enhancing overall project efficiency.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 Web 开发项目复杂度的增加，集成 CSS 框架成为了一种宝贵的策略。本节将探讨 Vue.js 如何与流行的 CSS 框架（如 Bootstrap
    或 Tailwind CSS）无缝集成。读者将深入了解如何在 Vue.js 应用中利用这些框架提供的预构建组件和实用类，从而简化样式过程并提升整体项目效率。
- en: '"Vue.js and Styling" stands as a pivotal module within "Vue.js Essentials:
    For Responsive Web Development," providing readers with a comprehensive guide
    to styling Vue.js applications. By navigating through the fundamentals of CSS,
    preprocessors, and Vue.js directives, developers gain the skills needed to craft
    visually appealing, responsive, and maintainable user interfaces. This module
    equips developers with the tools to elevate their styling practices and create
    web applications that seamlessly marry aesthetic design with a delightful user
    experience.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: “Vue.js 与样式”作为《Vue.js 必备：响应式 Web 开发》中的一个关键模块，提供了一个全面的 Vue.js 应用样式设计指南。通过学习 CSS
    基础、预处理器和 Vue.js 指令，开发者将掌握构建视觉吸引力强、响应式且易于维护的用户界面的技能。本模块为开发者提供了提升样式实践的工具，帮助他们创建将美学设计与出色用户体验无缝融合的
    Web 应用。
- en: Styling in Vue.js with CSS and SCSS
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Vue.js 中使用 CSS 和 SCSS 进行样式设计
- en: 'The module "Vue.js and Styling" within "Vue.js Essentials: For Responsive Web
    Development" introduces a pivotal section titled "Styling in Vue.js with CSS and
    SCSS." This segment explores the various techniques and methodologies for applying
    styles to Vue.js components, allowing developers to create visually appealing
    and well-designed web applications.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 《Vue.js 必备：响应式 Web 开发》中的“Vue.js 与样式”模块介绍了一个关键部分，名为“使用 CSS 和 SCSS 在 Vue.js 中应用样式”。本节探讨了为
    Vue.js 组件应用样式的各种技巧和方法，使开发者能够创建视觉吸引且设计精良的 Web 应用程序。
- en: <!-- BasicStyling.vue -->
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- BasicStyling.vue -->
- en: <template>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h2 class="title">Styled Component</h2>
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: <h2 class="title">样式化组件</h2>
- en: <p class="content">This component is styled using basic CSS.</p>
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <p class="content">该组件使用基本的 CSS 样式进行样式化。</p>
- en: </div>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <style>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: <style>
- en: /* BasicStyling.vue styles */
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: /* BasicStyling.vue 的样式 */
- en: .title {
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: .title {
- en: 'font-size: 24px;'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 'font-size: 24px;'
- en: 'color: #333;'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: #333;'
- en: '}'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .content {
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: .content {
- en: 'font-size: 16px;'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 'font-size: 16px;'
- en: 'color: #666;'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: #666;'
- en: '}'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: In this example, the BasicStyling component illustrates the application of basic
    styles using traditional CSS. The component defines a title with a larger font
    size and darker color, and a content section with a slightly smaller font size
    and a subdued color. Vue.js seamlessly integrates with CSS, allowing developers
    to apply styles to individual components, ensuring a modular and maintainable
    styling approach.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，BasicStyling 组件展示了如何使用传统的 CSS 应用基本样式。该组件定义了一个标题，具有较大的字体大小和较深的颜色，并且内容部分的字体大小稍小且颜色较为柔和。Vue.js
    与 CSS 的无缝集成，使得开发人员可以为单个组件应用样式，确保了样式的模块化和可维护性。
- en: Leveraging SCSS for Enhanced Styling Features in Vue.js
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Vue.js 中利用 SCSS 增强样式功能
- en: Vue.js goes a step further in supporting enhanced styling features by seamlessly
    integrating with SCSS (Sass). SCSS introduces a plethora of features like variables,
    nesting, and mixins, offering a more structured and powerful way to manage styles
    in Vue.js applications.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 通过与 SCSS（Sass）的无缝集成，进一步支持了增强的样式功能。SCSS 引入了诸如变量、嵌套和混合宏等多种功能，为 Vue.js 应用中的样式管理提供了一种更结构化和强大的方式。
- en: <template>
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h2 class="title">Advanced Styled Component</h2>
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <h2 class="title">高级样式化组件</h2>
- en: <p class="content">This component is styled using SCSS.</p>
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <p class="content">该组件使用 SCSS 样式进行样式化。</p>
- en: </div>
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <style lang="scss">
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: <style lang="scss">
- en: /* AdvancedStyling.vue styles written in SCSS */
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: /* AdvancedStyling.vue 的样式，使用 SCSS 编写 */
- en: '$title-color: #3498db;'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '$title-color: #3498db;'
- en: '$content-color: #2ecc71;'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '$content-color: #2ecc71;'
- en: .title {
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: .title {
- en: 'font-size: 24px;'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 'font-size: 24px;'
- en: 'color: $title-color;'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: $title-color;'
- en: '&:hover {'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '&:hover {'
- en: 'text-decoration: underline;'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 'text-decoration: underline;'
- en: '}'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .content {
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: .content {
- en: 'font-size: 16px;'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 'font-size: 16px;'
- en: 'color: $content-color;'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: $content-color;'
- en: '}'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: In this example, the AdvancedStyling component leverages SCSS to enhance the
    styling capabilities. Variables ($title-color and $content-color) are introduced,
    enabling easy color management. Additionally, SCSS nesting is utilized to represent
    the hierarchical structure of styles, enhancing readability. The :hover pseudo-class
    demonstrates the seamless integration of dynamic styling features within Vue.js
    components.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，AdvancedStyling 组件利用 SCSS 来增强样式功能。引入了变量（$title-color 和 $content-color），使得颜色管理更加便捷。此外，利用
    SCSS 的嵌套特性表示样式的层次结构，提高了可读性。:hover 伪类展示了在 Vue.js 组件中无缝集成动态样式功能。
- en: 'Scoped Styles: Isolating Component Styles in Vue.js'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 范围样式：在 Vue.js 中隔离组件样式
- en: Vue.js provides a unique feature called scoped styles, allowing developers to
    encapsulate styles within a component, preventing unintended style leakage to
    other components. Scoped styles enhance maintainability and reduce the likelihood
    of conflicts in larger applications.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 提供了一个独特的功能——作用域样式，允许开发人员将样式封装在一个组件内，防止样式泄漏到其他组件。作用域样式提高了可维护性，并减少了在大型应用程序中发生冲突的可能性。
- en: <!-- ScopedStyling.vue -->
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- ScopedStyling.vue -->
- en: <template>
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h2 class="title">Scoped Styled Component</h2>
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <h2 class="title">作用域样式组件</h2>
- en: <p class="content">This component uses scoped styles.</p>
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: <p class="content">此组件使用作用域样式。</p>
- en: </div>
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <style scoped>
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: <style scoped>
- en: /* ScopedStyling.vue styles with the 'scoped' attribute */
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: /* ScopedStyling.vue 样式，带有 'scoped' 属性 */
- en: .title {
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: .title {
- en: 'font-size: 24px;'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 'font-size: 24px;'
- en: 'color: #e74c3c;'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: #e74c3c;'
- en: '}'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .content {
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: .content {
- en: 'font-size: 16px;'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 'font-size: 16px;'
- en: 'color: #f39c12;'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: #f39c12;'
- en: '}'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: In this example, the ScopedStyling component demonstrates the use of the scoped
    attribute in the style block, ensuring that the defined styles are scoped to the
    component. This prevents unintentional style conflicts with other components and
    provides a clean and isolated styling environment.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，ScopedStyling 组件演示了在样式块中使用 scoped 属性，确保定义的样式仅限于该组件。这避免了与其他组件产生意外的样式冲突，并提供了一个干净且独立的样式环境。
- en: '"Styling in Vue.js with CSS and SCSS" within the "Vue.js and Styling" module
    is a crucial section that equips developers with the tools to craft visually appealing
    and well-designed Vue.js applications. The examples provided showcase the seamless
    integration of basic CSS and advanced SCSS features, including variables, nesting,
    and scoped styles. By mastering the art of styling in Vue.js, developers can create
    aesthetically pleasing and responsive user interfaces, enhancing the overall user
    experience of their Vue.js applications.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '"Vue.js 和样式" 模块中的 "使用 CSS 和 SCSS 进行 Vue.js 样式设计" 是一个至关重要的部分，它为开发人员提供了制作视觉吸引且设计良好的
    Vue.js 应用程序所需的工具。所提供的示例展示了基本 CSS 和高级 SCSS 特性（包括变量、嵌套和作用域样式）的无缝集成。通过掌握 Vue.js 中的样式设计技巧，开发人员可以创建美观且响应迅速的用户界面，从而提升
    Vue.js 应用程序的整体用户体验。'
- en: Scoped Styles and CSS Modules
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作用域样式与 CSS 模块
- en: 'The module "Vue.js and Styling" within "Vue.js Essentials: For Responsive Web
    Development" introduces a critical section titled "Scoped Styles and CSS Modules."
    This segment explores advanced techniques for managing styles in Vue.js applications,
    providing developers with tools to maintain style isolation and organization effectively.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '"Vue.js Essentials: For Responsive Web Development" 中的模块 "Vue.js 和样式" 引入了一个关键部分，标题为
    "作用域样式与 CSS 模块"。该部分探讨了在 Vue.js 应用程序中管理样式的高级技术，为开发人员提供了有效维护样式隔离和组织的工具。'
- en: <!-- ScopedStyles.vue -->
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- ScopedStyles.vue -->
- en: <template>
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h2 class="title">Scoped Styles Component</h2>
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: <h2 class="title">作用域样式组件</h2>
- en: <p class="content">This component uses scoped styles for isolation.</p>
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: <p class="content">此组件使用作用域样式进行隔离。</p>
- en: </div>
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <style scoped>
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: <style scoped>
- en: /* ScopedStyles.vue styles with the 'scoped' attribute */
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: /* ScopedStyles.vue 样式，使用 'scoped' 属性 */
- en: .title {
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: .title {
- en: 'font-size: 24px;'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 'font-size: 24px;'
- en: 'color: #3498db;'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: #3498db;'
- en: '}'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .content {
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: .content {
- en: 'font-size: 16px;'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 'font-size: 16px;'
- en: 'color: #2ecc71;'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: #2ecc71;'
- en: '}'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: In this example, the ScopedStyles component illustrates the use of scoped styles
    in Vue.js. The scoped attribute in the style block ensures that the defined styles
    are limited to the scope of the component. This feature prevents style bleed and
    conflicts, providing a clean and encapsulated styling environment for individual
    Vue.js components.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，ScopedStyles 组件展示了 Vue.js 中作用域样式的使用。样式块中的 scoped 属性确保所定义的样式仅限于组件的范围内。此功能防止了样式的溢出和冲突，为每个
    Vue.js 组件提供了一个干净且封闭的样式环境。
- en: 'Organizing Styles with CSS Modules: Modular and Reusable Styling'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 CSS 模块组织样式：模块化和可重用的样式
- en: Vue.js seamlessly integrates with CSS Modules, enabling developers to create
    modular and reusable styles for components. CSS Modules promote maintainability
    by encapsulating styles within a module, preventing unintended style interactions
    in complex applications.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 与 CSS 模块无缝集成，使开发者能够为组件创建模块化和可重用的样式。CSS 模块通过将样式封装在一个模块中来促进可维护性，避免在复杂应用中发生样式冲突。
- en: <!-- CssModulesExample.vue -->
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- CssModulesExample.vue -->
- en: <template>
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div :class="$style.container">
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: <div :class="$style.container">
- en: <h2 :class="$style.title">CSS Modules Component</h2>
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: <h2 :class="$style.title">CSS 模块组件</h2>
- en: <p :class="$style.content">This component uses CSS Modules for modular styling.</p>
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: <p :class="$style.content">这个组件使用了 CSS 模块来实现模块化样式。</p>
- en: </div>
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <style module>
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: <style module>
- en: /* CssModulesExample.vue styles with the 'module' attribute */
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: /* CssModulesExample.vue 样式，使用 'module' 属性 */
- en: .container {
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: .container {
- en: 'padding: 20px;'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 'padding: 20px;'
- en: 'border: 1px solid #ddd;'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 'border: 1px solid #ddd;'
- en: '}'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .title {
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: .title {
- en: 'font-size: 24px;'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 'font-size: 24px;'
- en: 'color: #e74c3c;'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: #e74c3c;'
- en: '}'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .content {
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: .content {
- en: 'font-size: 16px;'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 'font-size: 16px;'
- en: 'color: #f39c12;'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: #f39c12;'
- en: '}'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: In this example, the CssModulesExample component demonstrates the use of CSS
    Modules. The module attribute in the style block turns the styles into a module,
    allowing them to be referenced using the $style object in the component's template.
    This encapsulation ensures that styles are scoped to the component, promoting
    modularity and reusability.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，CssModulesExample 组件展示了 CSS 模块的使用。样式块中的 module 属性将样式转化为一个模块，可以在组件的模板中使用
    $style 对象引用这些样式。这种封装确保样式仅作用于该组件，促进了模块化和可重用性。
- en: 'Combining Scoped Styles and CSS Modules: Best of Both Worlds'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 结合作用域样式与 CSS 模块：两全其美
- en: Vue.js allows developers to combine the benefits of scoped styles and CSS Modules.
    By leveraging both features, developers can achieve granular style isolation within
    components while also enjoying the modularity and reusability offered by CSS Modules.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 允许开发者结合使用作用域样式和 CSS 模块的优势。通过利用这两个特性，开发者可以在组件内实现精细的样式隔离，同时享受 CSS 模块提供的模块化和可重用性。
- en: <!-- CombinedStyles.vue -->
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- CombinedStyles.vue -->
- en: <template>
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div :class="$style.container">
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: <div :class="$style.container">
- en: <h2 :class="$style.title">Combined Styles Component</h2>
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: <h2 :class="$style.title">组合样式组件</h2>
- en: <p class="content">This component uses both scoped styles and CSS Modules.</p>
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: <p class="content">此组件同时使用了作用域样式和 CSS 模块。</p>
- en: </div>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <style module scoped>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <style module scoped>
- en: /* CombinedStyles.vue styles with both 'module' and 'scoped' attributes */
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: /* CombinedStyles.vue 样式，具有 'module' 和 'scoped' 属性 */
- en: .container {
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: .container {
- en: 'padding: 20px;'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 'padding: 20px;'
- en: 'border: 1px solid #ddd;'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 'border: 1px solid #ddd;'
- en: '}'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .title {
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: .title {
- en: 'font-size: 24px;'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 'font-size: 24px;'
- en: 'color: #3498db;'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: #3498db;'
- en: '}'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: In this example, the CombinedStyles component showcases the combined use of
    scoped styles and CSS Modules. The module and scoped attributes work in tandem,
    providing style isolation within the component while also enabling modular and
    reusable styles.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，CombinedStyles 组件展示了作用域样式和 CSS 模块的组合使用。模块和作用域属性协同工作，在组件内部提供样式隔离的同时，还能够实现模块化和可复用的样式。
- en: '"Scoped Styles and CSS Modules" within the "Vue.js and Styling" module is a
    crucial section that equips developers with advanced techniques for managing styles
    in Vue.js applications. The examples provided demonstrate the use of scoped styles
    for component-level isolation, the benefits of CSS Modules for modular styling,
    and the powerful combination of both features. By mastering scoped styles and
    CSS Modules, Vue.js developers can create well-organized, maintainable, and modular
    styles for their applications, enhancing the overall development and user experience.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '"在“Vue.js 与样式”模块中的“作用域样式与 CSS 模块”部分是一个关键部分，它为开发者提供了在 Vue.js 应用中管理样式的高级技巧。提供的示例展示了如何使用作用域样式进行组件级的样式隔离，CSS
    模块的模块化样式优点，以及两者功能的强大结合。通过掌握作用域样式和 CSS 模块，Vue.js 开发者可以为他们的应用创建结构良好、易于维护和模块化的样式，从而提升整体开发效率和用户体验。'
- en: Integrating Third-Party CSS Frameworks
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成第三方 CSS 框架
- en: 'The module "Vue.js and Styling" within "Vue.js Essentials: For Responsive Web
    Development" delves into the essential section titled "Integrating Third-Party
    CSS Frameworks." This segment explores the seamless integration of external CSS
    frameworks into Vue.js applications, empowering developers to leverage the robust
    styling capabilities offered by popular libraries.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '"Vue.js Essentials: For Responsive Web Development" 中的 "Vue.js 与样式" 模块深入探讨了名为
    "集成第三方 CSS 框架" 的关键部分。该部分探讨了如何将外部 CSS 框架无缝集成到 Vue.js 应用中，帮助开发者利用流行库所提供的强大样式功能。'
- en: <!-- ThirdPartyIntegration.vue -->
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- ThirdPartyIntegration.vue -->
- en: <template>
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h2 class="title">Integrated Third-Party Framework</h2>
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: <h2 class="title">集成的第三方框架</h2>
- en: <p class="content">This component utilizes styles from a third-party CSS framework.</p>
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: <p class="content">此组件使用了来自第三方 CSS 框架的样式。</p>
- en: <button class="btn btn-primary">Click me</button>
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: <button class="btn btn-primary">点击我</button>
- en: </div>
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <style>
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: <style>
- en: /* ThirdPartyIntegration.vue styles with third-party CSS framework */
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: /* ThirdPartyIntegration.vue 使用第三方 CSS 框架的样式 */
- en: .title {
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: .title {
- en: 'font-size: 24px;'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 'font-size: 24px;'
- en: 'color: #3498db;'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: #3498db;'
- en: '}'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .content {
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: .content {
- en: 'font-size: 16px;'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 'font-size: 16px;'
- en: 'color: #2ecc71;'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: #2ecc71;'
- en: '}'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: /* Button styling from a third-party framework */
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: /* 按钮样式来自第三方框架 */
- en: .btn {
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: .btn {
- en: 'padding: 10px 15px;'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 'padding: 10px 15px;'
- en: 'border: none;'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 'border: none;'
- en: 'border-radius: 4px;'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 'border-radius: 4px;'
- en: 'cursor: pointer;'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 'cursor: pointer;'
- en: '}'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .btn-primary {
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: .btn-primary {
- en: 'background-color: #3498db;'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 'background-color: #3498db;'
- en: 'color: #fff;'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: #fff;'
- en: '}'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: In this example, the ThirdPartyIntegration component demonstrates the integration
    of a third-party CSS framework. The component utilizes styles for the title and
    content sections while also incorporating button styling from the external framework.
    This approach allows Vue.js developers to seamlessly merge the benefits of external
    styling libraries with the flexibility of Vue.js components.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，ThirdPartyIntegration 组件展示了如何集成第三方 CSS 框架。该组件使用了标题和内容部分的样式，同时也采用了外部框架的按钮样式。此方法使
    Vue.js 开发人员能够无缝地将外部样式库的优势与 Vue.js 组件的灵活性结合起来。
- en: Benefits of Third-Party CSS Frameworks in Vue.js Applications
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 应用程序中使用第三方 CSS 框架的好处
- en: Integrating third-party CSS frameworks in Vue.js applications comes with several
    advantages. These frameworks, such as Bootstrap or Tailwind CSS, offer pre-designed
    and responsive components, reducing the need for manual styling. Developers can
    leverage the established design patterns and utility classes provided by these
    frameworks to expedite the development process and ensure a consistent and professional
    look and feel.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Vue.js 应用程序中集成第三方 CSS 框架有几个优点。这些框架，如 Bootstrap 或 Tailwind CSS，提供了预设计的响应式组件，减少了手动样式设置的需求。开发人员可以利用这些框架提供的成熟设计模式和实用类来加速开发过程，并确保应用程序具有一致且专业的外观和感觉。
- en: <!-- BootstrapIntegration.vue -->
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- BootstrapIntegration.vue -->
- en: <template>
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h2 class="title">Integrated Bootstrap Framework</h2>
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: <h2 class="title">集成的 Bootstrap 框架</h2>
- en: <p class="content">This component leverages styles and components from Bootstrap.</p>
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: <p class="content">该组件利用了来自 Bootstrap 的样式和组件。</p>
- en: <button class="btn btn-primary">Click me</button>
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: <button class="btn btn-primary">点击我</button>
- en: </div>
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <style>
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: <style>
- en: /* BootstrapIntegration.vue styles with Bootstrap CSS framework */
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: /* BootstrapIntegration.vue 样式与 Bootstrap CSS 框架 */
- en: .title {
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: .title {
- en: 'font-size: 24px;'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 'font-size: 24px;'
- en: 'color: #3498db;'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: #3498db;'
- en: '}'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .content {
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: .content {
- en: 'font-size: 16px;'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 'font-size: 16px;'
- en: 'color: #2ecc71;'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: #2ecc71;'
- en: '}'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: /* Button styling from Bootstrap framework */
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: /* 按钮样式来自 Bootstrap 框架 */
- en: .btn {
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: .btn {
- en: /* Bootstrap styles for button padding, border, and cursor */
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: /* Bootstrap 样式用于按钮的内边距、边框和鼠标指针 */
- en: '}'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .btn-primary {
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: .btn-primary {
- en: /* Bootstrap styles for primary button with background and text color */
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: /* Bootstrap 样式用于主按钮的背景色和文本颜色 */
- en: '}'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: In this example, the BootstrapIntegration component showcases the integration
    of the Bootstrap CSS framework. The component seamlessly adopts the styles and
    components provided by Bootstrap, including the button styling. This approach
    not only enhances the visual appeal of Vue.js applications but also streamlines
    development by capitalizing on the rich feature set offered by popular CSS frameworks.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，BootstrapIntegration 组件展示了 Bootstrap CSS 框架的集成。该组件无缝地采用了 Bootstrap 提供的样式和组件，包括按钮样式。这种方法不仅增强了
    Vue.js 应用程序的视觉效果，还通过利用流行 CSS 框架提供的丰富功能集来简化开发。
- en: 'Customizing Third-Party Styles: Tailoring Frameworks to Vue.js Components'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 定制第三方样式：将框架调整为 Vue.js 组件
- en: While third-party CSS frameworks provide a wealth of styling options out of
    the box, Vue.js developers may need to customize styles to align with the specific
    requirements of their applications. Vue.js facilitates this customization by allowing
    developers to selectively apply and override styles from external frameworks.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然第三方 CSS 框架提供了丰富的现成样式选项，但 Vue.js 开发者可能需要根据应用程序的具体要求定制样式。Vue.js 通过允许开发者有选择性地应用和覆盖外部框架的样式来促进这种定制。
- en: <!-- CustomizedStyles.vue -->
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- CustomizedStyles.vue -->
- en: <template>
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h2 class="title">Customized Third-Party Styles</h2>
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: <h2 class="title">定制化的第三方样式</h2>
- en: <p class="content">This component customizes styles from an external framework.</p>
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: <p class="content">该组件定制了来自外部框架的样式。</p>
- en: <button class="btn btn-custom">Click me</button>
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: <button class="btn btn-custom">点击我</button>
- en: </div>
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <style>
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: <style>
- en: /* CustomizedStyles.vue styles with customized third-party styles */
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: /* CustomizedStyles.vue 样式，包含定制的第三方样式 */
- en: .title {
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: .title {
- en: 'font-size: 24px;'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 'font-size: 24px;'
- en: 'color: #3498db;'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: #3498db;'
- en: '}'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .content {
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: .content {
- en: 'font-size: 16px;'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 'font-size: 16px;'
- en: 'color: #2ecc71;'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: #2ecc71;'
- en: '}'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: /* Button styling with customized styles */
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: /* 带有定制样式的按钮 */
- en: .btn {
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: .btn {
- en: /* External framework styles for button padding, border, and cursor */
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: /* 外部框架样式用于按钮的内边距、边框和鼠标光标 */
- en: '}'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .btn-custom {
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: .btn-custom {
- en: /* Customized styles for the button with a different background and text color
    */
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: /* 为按钮定制的样式，采用不同的背景和文本颜色 */
- en: '}'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: In this example, the CustomizedStyles component exemplifies the customization
    of styles from an external framework. While inheriting the general button styling
    from the external framework, the component introduces custom styles (btn-custom)
    to tailor the appearance of the button according to specific design requirements.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，CustomizedStyles 组件展示了如何定制来自外部框架的样式。该组件在继承外部框架的一般按钮样式的同时，加入了自定义样式（btn-custom），以根据特定的设计要求调整按钮的外观。
- en: '"Integrating Third-Party CSS Frameworks" within the "Vue.js and Styling" module
    is a pivotal section that equips Vue.js developers with the skills to seamlessly
    integrate and leverage the power of external styling libraries. The examples provided
    showcase the integration of third-party frameworks, such as Bootstrap, and highlight
    the benefits of leveraging pre-designed components and utility classes. Additionally,
    the customization of third-party styles demonstrates how Vue.js empowers developers
    to tailor external frameworks to meet the unique styling needs of their applications,
    striking a balance between efficiency and customization.'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在《Vue.js与样式》模块中的"集成第三方CSS框架"是一个关键部分，旨在帮助Vue.js开发者掌握无缝集成并利用外部样式库的能力。提供的示例展示了如何集成第三方框架，例如Bootstrap，并强调了利用预设计组件和工具类的好处。此外，第三方样式的定制化展示了Vue.js如何帮助开发者根据应用程序的独特样式需求调整外部框架，从而在效率与定制化之间取得平衡。
- en: Dynamic Styling with Vue.js
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Vue.js的动态样式
- en: 'Within the module "Vue.js and Styling" in the book "Vue.js Essentials: For
    Responsive Web Development," the section titled "Dynamic Styling with Vue.js"
    is a crucial exploration of how Vue.js enables developers to infuse dynamicity
    into their application styles. This section is instrumental in understanding how
    Vue.js facilitates the creation of responsive and interactive user interfaces
    through the application of dynamic styles.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '在《Vue.js Essentials: For Responsive Web Development》一书的《Vue.js与样式》模块中，标题为"使用Vue.js的动态样式"的章节深入探讨了Vue.js如何使开发者能够为应用程序样式注入动态性。本章节对于理解Vue.js如何通过应用动态样式来创建响应式和交互式用户界面至关重要。'
- en: <!-- DynamicStylingExample.vue -->
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- DynamicStylingExample.vue -->
- en: <template>
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: '<h2 :class="{ ''title'': isTitleVisible, ''hidden-title'': !isTitleVisible
    }">Dynamic Title</h2>'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '<h2 :class="{ ''title'': isTitleVisible, ''hidden-title'': !isTitleVisible
    }">动态标题</h2>'
- en: <button @click="toggleTitleVisibility">Toggle Title</button>
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="toggleTitleVisibility">切换标题</button>
- en: </div>
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'isTitleVisible: true,'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 'isTitleVisible: true,'
- en: '};'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: toggleTitleVisibility() {
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: toggleTitleVisibility() {
- en: this.isTitleVisible = !this.isTitleVisible;
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: this.isTitleVisible = !this.isTitleVisible;
- en: '},'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: <style>
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: <style>
- en: /* DynamicStylingExample.vue styles */
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: /* DynamicStylingExample.vue 样式 */
- en: .title {
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: .title {
- en: 'font-size: 24px;'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 'font-size: 24px;'
- en: 'color: #3498db;'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: #3498db;'
- en: '}'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .hidden-title {
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: .hidden-title {
- en: 'display: none;'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 'display: none;'
- en: '}'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: In this example, the DynamicStylingExample component illustrates dynamic styling
    in action. The isTitleVisible data property controls whether the title is visible
    or hidden. Through the use of the :class binding, the component dynamically applies
    the 'title' class when the title is visible and the 'hidden-title' class when
    it is hidden. The toggleTitleVisibility method toggles the visibility state, showcasing
    how Vue.js seamlessly integrates dynamic styles to create responsive components.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，DynamicStylingExample 组件展示了动态样式的实际应用。isTitleVisible 数据属性控制标题是否可见。通过使用
    :class 绑定，当标题可见时，组件动态应用 'title' 类，而当标题隐藏时应用 'hidden-title' 类。toggleTitleVisibility
    方法切换可见性状态，展示了 Vue.js 如何无缝地集成动态样式，创建响应式组件。
- en: 'Conditional Styles and Class Binding: A Vue.js Power Duo'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 条件样式与类绑定：Vue.js 的强大组合
- en: Vue.js empowers developers with the ability to conditionally apply styles to
    elements using class binding. By dynamically toggling classes based on component
    state or user interactions, developers can craft highly interactive and visually
    appealing applications.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 赋予开发者使用类绑定来有条件地应用样式的能力。通过根据组件的状态或用户交互动态切换类，开发者可以构建高度互动且视觉吸引的应用程序。
- en: <!-- ConditionalStyling.vue -->
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- ConditionalStyling.vue -->
- en: <template>
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: '<h2 :class="{ ''title'': isTitleVisible, ''highlight'': isHighlighted }">Conditional
    Styling</h2>'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '<h2 :class="{ ''title'': isTitleVisible, ''highlight'': isHighlighted }">条件样式</h2>'
- en: <button @click="toggleTitleVisibility">Toggle Visibility</button>
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="toggleTitleVisibility">切换可见性</button>
- en: <button @click="toggleHighlight">Toggle Highlight</button>
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="toggleHighlight">切换高亮</button>
- en: </div>
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'isTitleVisible: true,'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 'isTitleVisible: true,'
- en: 'isHighlighted: false,'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 'isHighlighted: false,'
- en: '};'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: toggleTitleVisibility() {
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: toggleTitleVisibility() {
- en: this.isTitleVisible = !this.isTitleVisible;
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: this.isTitleVisible = !this.isTitleVisible;
- en: '},'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: toggleHighlight() {
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: toggleHighlight() {
- en: this.isHighlighted = !this.isHighlighted;
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: this.isHighlighted = !this.isHighlighted;
- en: '},'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: <style>
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: <style>
- en: /* ConditionalStyling.vue styles */
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: /* ConditionalStyling.vue 样式 */
- en: .title {
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: .title {
- en: 'font-size: 24px;'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 'font-size: 24px;'
- en: 'color: #3498db;'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: #3498db;'
- en: '}'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .highlight {
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: .highlight {
- en: 'background-color: #f39c12;'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 'background-color: #f39c12;'
- en: 'padding: 5px;'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 'padding: 5px;'
- en: 'border-radius: 4px;'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 'border-radius: 4px;'
- en: '}'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </style>
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: </style>
- en: In the ConditionalStyling component, two dynamic styles are applied based on
    component state. The 'title' class controls the visibility of the title, and the
    'highlight' class toggles a highlight effect when the corresponding button is
    clicked. Vue.js' reactive data properties and methods seamlessly integrate with
    class binding, enabling developers to create dynamic and responsive user interfaces.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ConditionalStyling 组件中，根据组件状态应用了两种动态样式。'title' 类控制标题的可见性，'highlight' 类在点击相应按钮时切换高亮效果。Vue.js
    的响应式数据属性和方法与类绑定无缝集成，使开发者能够创建动态且响应迅速的用户界面。
- en: 'Inline Styles with Vue.js: A Programmatic Approach'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Vue.js 的内联样式：一种编程方法
- en: Vue.js also supports the application of inline styles, providing a programmatic
    approach to dynamic styling. By binding style objects to elements, developers
    can dynamically adjust various style properties based on component state or user
    interactions.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 还支持应用内联样式，提供了一种动态样式的编程方式。通过将样式对象绑定到元素，开发者可以根据组件状态或用户交互动态调整各种样式属性。
- en: <!-- InlineStyles.vue -->
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- InlineStyles.vue -->
- en: <template>
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <h2 :style="titleStyles">Inline Styles</h2>
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: <h2 :style="titleStyles">内联样式</h2>
- en: <button @click="toggleTitleStyles">Toggle Styles</button>
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="toggleTitleStyles">切换样式</button>
- en: </div>
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'titleStyles: {'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 'titleStyles: {'
- en: 'fontSize: ''24px'','
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 'fontSize: ''24px'','
- en: 'color: ''#3498db'','
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: ''#3498db'','
- en: '},'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: toggleTitleStyles() {
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: toggleTitleStyles() {
- en: this.titleStyles = {
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: this.titleStyles = {
- en: 'fontSize: ''20px'','
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 'fontSize: ''20px'','
- en: 'color: ''#e74c3c'','
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: ''#e74c3c'','
- en: 'fontWeight: ''bold'','
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 'fontWeight: ''bold'','
- en: '};'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In the InlineStyles component, the titleStyles data property is bound to the
    inline styles of the title. The toggleTitleStyles method dynamically updates the
    inline styles, showcasing how Vue.js facilitates a programmatic approach to dynamic
    styling.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在 InlineStyles 组件中，titleStyles 数据属性绑定到标题的内联样式。toggleTitleStyles 方法动态更新内联样式，展示了
    Vue.js 如何通过编程方式实现动态样式。
- en: '"Dynamic Styling with Vue.js" in the "Vue.js and Styling" module is a pivotal
    section that unveils the versatility of Vue.js in handling styles dynamically.
    The provided examples showcase class binding, conditional styles, and inline styles,
    demonstrating how Vue.js empowers developers to create responsive and interactive
    user interfaces. Through the seamless integration of dynamic styling features,
    Vue.js ensures that developers can adapt and tailor styles based on changing application
    states or user interactions, fostering a highly engaging and user-friendly experience.'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 在“Vue.js 和样式”模块中的“使用 Vue.js 动态样式”章节是一个关键部分，揭示了 Vue.js 在动态处理样式方面的多样性。所提供的示例展示了类绑定、条件样式和内联样式，说明了
    Vue.js 如何使开发者能够创建响应式和互动性的用户界面。通过无缝集成动态样式特性，Vue.js 确保开发者能够根据不断变化的应用状态或用户交互调整和定制样式，从而提供一个高度互动且用户友好的体验。
