- en: Stacks in Action
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 栈的实际应用
- en: Although a stack isn’t typically used to store data on a long-term basis, it
    can be a great tool to handle temporary data as part of various algorithms. Let’s
    look at an example.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 虽然栈通常不用于长期存储数据，但它可以作为多种算法处理临时数据的一个极佳工具。让我们看一个例子。
- en: Let’s create the beginnings of a JavaScript linter—that is，一个检查程序员 JavaScript
    代码的程序，确保每一行都是语法正确的。JavaScript 以其代码中大量的括号而臭名昭著，因此我们将重点关注语法的这一方面。这包括括号、方括号和大括号——这些都是令人沮丧的语法错误的常见原因。
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们创建一个 JavaScript 代码检查器的开端——即一个检查程序员 JavaScript 代码的程序，确保每一行都是语法正确的。JavaScript因其代码中大量的括号而臭名昭著，因此我们将重点关注语法的这一方面。这包括括号、方括号和大括号——这些都是令人沮丧的语法错误的常见原因。
- en: To solve this problem, let’s first analyze what type of syntax is incorrect
    when it comes to braces. If we break it down, we’ll find three situations of erroneous
    syntax.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为了解决这个问题，让我们先分析一下在括号方面哪些语法是不正确的。如果我们将其分解，会发现三种语法错误的情况。
- en: 'The first is when there’s an opening brace that doesn’t have a corresponding
    closing brace, such as this:'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第一个情况是当存在一个没有对应闭括号的开括号时，例如：
- en: '| ​  | (`let` x = 2; |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | (`let` x = 2; |'
- en: 'We’ll call this `Syntax Error Type #1`。'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '我们称之为`语法错误类型 #1`。'
- en: 'The second is when there is a closing brace that was never preceded by a corresponding
    opening brace:'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第二个情况是当出现一个从未之前有对应开括号的闭括号：
- en: '| ​  | ​(`let` x = 2;) |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​(`let` x = 2;) |'
- en: 'We’ll call that `Syntax Error Type #2`。'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '我们称之为`语法错误类型 #2`。'
- en: 'The third, which we’ll refer to as `Syntax Error Type #3`，is when a closing
    brace is not the same type of brace as the immediately preceding opening brace:'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '第三个情况，我们称之为`语法错误类型 #3`，是当一个闭括号与紧接着的开括号不是同一种括号时：'
- en: '| ​  | (`let` x = [1, 2, 3)]; |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | (`let` x = [1, 2, 3)]; |'
- en: In the preceding example, there’s a matching set of parentheses and a matching
    pair of square brackets, but the closing parenthesis is in the wrong place, as
    it doesn’t match the immediately preceding opening brace, which is a square bracket.
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在前面的示例中，有一对匹配的圆括号和一对匹配的方括号，但闭圆括号的位置不对，因为它不匹配紧接着的开括号，即方括号。
- en: How can we implement an algorithm that inspects a line of JavaScript code and
    ensures that there are no brace-related syntax errors? This is where a stack allows
    us to implement a beautiful linting algorithm, which works as follows.
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们如何实现一个算法来检查一行 JavaScript 代码，并确保没有与括号相关的语法错误？这就是栈能够让我们实现一个优雅的代码检查算法，其工作原理如下。
- en: 'We first prepare an empty stack, and then we read each character from left
    to right following these rules:'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们首先准备一个空栈，然后按照以下规则从左到右读取每个字符：
- en: If we find any character that isn’t a type of brace (parenthesis, square bracket,
    or curly brace), we ignore it and move on.
  id: totrans-15
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 如果我们发现任何不是括号类型（圆括号、方括号或大括号）的字符，我们将忽略它并继续前进。
- en: If we find an opening brace, we push it onto the stack. Having it on the stack
    means we’re waiting to close that particular brace.
  id: totrans-16
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 如果我们发现一个开括号，我们就将其推入栈中。将其放在栈中意味着我们在等待关闭那个特定的括号。
- en: 'If we find a closing brace, we pop the top element in the stack and inspect
    it. We then analyze:'
  id: totrans-17
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 如果我们发现一个闭括号，我们就弹出栈顶元素并检查它。然后我们分析：
- en: 'If the item we popped (which is always an opening brace) does not match the
    current closing brace, it means we’ve encountered `Syntax Error Type #3`。'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '如果我们弹出的项目（它总是一个开括号）与当前的闭括号不匹配，则意味着我们遇到了`语法错误类型 #3`。'
- en: 'If we couldn’t pop an element because the stack was empty, that means the current
    closing brace doesn’t have a corresponding opening brace beforehand。这是 `Syntax
    Error Type #2`。'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '如果我们无法弹出一个元素，因为栈是空的，那就意味着当前的闭括号之前没有对应的开括号。这是`语法错误类型 #2`。'
- en: If the item we popped is a corresponding match for the current closing brace,
    it means we’ve successfully closed that opening brace, and we can continue parsing
    the line of JavaScript code.
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 如果我们弹出的项目与当前的闭括号相对应，则意味着我们成功关闭了那个开括号，我们可以继续解析这行 JavaScript 代码。
- en: 'If we make it to the end of the line and there’s still something left on the
    stack, that means there’s an opening brace without a corresponding closing brace,
    which is `Syntax Error Type #1`。'
  id: totrans-21
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: '如果我们到达行的末尾，栈中仍有内容，则意味着存在一个没有对应闭括号的开括号，这就是`语法错误类型 #1`。'
- en: 'Let’s see this in action using the following example:'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们通过以下示例来看看这一点：
- en: '![`images/stacks_and_queues/parens_1_new.png`](images/stacks_and_queues/parens_1_new.png)'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/stacks_and_queues/parens_1_new.png`](images/stacks_and_queues/parens_1_new.png)'
- en: After we prepare an empty stack, we begin reading each character from left to
    right.
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在准备一个空栈之后，我们开始从左到右读取每个字符。
- en: 'Step 1: We begin with the first character, which happens to be an opening parenthesis:'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第1步：我们从第一个字符开始，它恰好是一个开括号：
- en: '![`images/stacks_and_queues/parens_2_new.png`](images/stacks_and_queues/parens_2_new.png)'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/stacks_and_queues/parens_2_new.png`](images/stacks_and_queues/parens_2_new.png)'
- en: 'Step 2: Since it’s a type of opening brace, we push it onto the stack:'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第2步：由于它是一个开括号的类型，我们将其推入栈中：
- en: '![`images/stacks_and_queues/push_open_parens.png`](images/stacks_and_queues/push_open_parens.png)'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/stacks_and_queues/push_open_parens.png`](images/stacks_and_queues/push_open_parens.png)'
- en: We then ignore all the characters `let x =` since they aren’t brace characters.
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然后我们忽略所有字符 `let x =`，因为它们不是括号字符。
- en: 'Step 3: We encounter our next opening brace:'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第3步：我们遇到了下一个开括号：
- en: '![`images/stacks_and_queues/parens_3_new.png`](images/stacks_and_queues/parens_3_new.png)'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/stacks_and_queues/parens_3_new.png`](images/stacks_and_queues/parens_3_new.png)'
- en: 'Step 4: We push it onto the stack:'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第4步：我们将其推入栈中：
- en: '![`images/stacks_and_queues/push_open_curly_brace.png`](images/stacks_and_queues/push_open_curly_brace.png)'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/stacks_and_queues/push_open_curly_brace.png`](images/stacks_and_queues/push_open_curly_brace.png)'
- en: We then ignore the `y:`.
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然后我们忽略 `y:`。
- en: 'Step 5: We encounter the opening square bracket:'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第5步：我们遇到开方括号：
- en: '![`images/stacks_and_queues/parens_4_new.png`](images/stacks_and_queues/parens_4_new.png)'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/stacks_and_queues/parens_4_new.png`](images/stacks_and_queues/parens_4_new.png)'
- en: 'Step 6: We add that to the stack as well:'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第6步：我们也将其添加到栈中：
- en: '![`images/stacks_and_queues/push_open_square_bracket.png`](images/stacks_and_queues/push_open_square_bracket.png)'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/stacks_and_queues/push_open_square_bracket.png`](images/stacks_and_queues/push_open_square_bracket.png)'
- en: We then ignore the `1`, `2`, `3`.
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然后我们忽略 `1`，`2`，`3`。
- en: 'Step 7: We encounter our first closing brace—a closing square bracket:'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第7步：我们遇到了第一个闭合括号——一个闭合方括号：
- en: '![`images/stacks_and_queues/first_closing_brace_new.png`](images/stacks_and_queues/first_closing_brace_new.png)'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/stacks_and_queues/first_closing_brace_new.png`](images/stacks_and_queues/first_closing_brace_new.png)'
- en: 'Step 8: We pop the element at the top of the stack, which happens to be an
    opening square bracket:'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第8步：我们弹出栈顶的元素，它恰好是一个开方括号：
- en: '![`images/stacks_and_queues/pop_square_bracket.png`](images/stacks_and_queues/pop_square_bracket.png)'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/stacks_and_queues/pop_square_bracket.png`](images/stacks_and_queues/pop_square_bracket.png)'
- en: Since our closing square bracket is a corresponding match to this top element
    of the stack, it means we can continue with our algorithm without throwing any
    errors.
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 由于我们的闭合方括号与栈顶元素相对应，这意味着我们可以继续算法而不会抛出任何错误。
- en: 'Step 9: We move on, encountering a closing curly brace:'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第9步：我们继续，遇到一个闭合大括号：
- en: '![`images/stacks_and_queues/parens_6_new.png`](images/stacks_and_queues/parens_6_new.png)'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/stacks_and_queues/parens_6_new.png`](images/stacks_and_queues/parens_6_new.png)'
- en: 'Step 10: We pop the top item from stack:'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第10步：我们从栈中弹出顶部项：
- en: '![`images/stacks_and_queues/pop_curly_brace.png`](images/stacks_and_queues/pop_curly_brace.png)'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/stacks_and_queues/pop_curly_brace.png`](images/stacks_and_queues/pop_curly_brace.png)'
- en: It’s an opening curly brace, so we’ve found a match with the current closing
    brace.
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是一个开括号，所以我们找到了与当前闭合括号的匹配。
- en: 'Step 11: We encounter a closing parenthesis:'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第11步：我们遇到了一个闭合括号：
- en: '![`images/stacks_and_queues/parens_7_new.png`](images/stacks_and_queues/parens_7_new.png)'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/stacks_and_queues/parens_7_new.png`](images/stacks_and_queues/parens_7_new.png)'
- en: 'Step 12: We pop the last element in the stack. It’s a corresponding match,
    so there are no errors so far.'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第12步：我们弹出栈中的最后一个元素。它是一个相应的匹配，因此到目前为止没有错误。
- en: Because we’ve made it through the entire line of code and our stack is empty,
    our linter can conclude that there are no syntactical errors on this line (relating
    to opening and closing braces).
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因为我们已经遍历了整行代码并且栈是空的，所以我们的静态检查工具可以得出结论，这一行（关于开闭括号）没有语法错误。
- en: 'Code Implementation: Stack-Based Code Linter'
  id: totrans-54
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 代码实现：基于栈的代码静态检查工具
- en: 'Here’s an implementation of the preceding algorithm. Note that we’re using
    our earlier implementation of the `Stack` class:'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 下面是前述算法的实现。请注意，我们使用了之前实现的 `Stack` 类：
- en: '| ​  | `import` Stack `from` *''./stack.js''*; |'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `import` Stack `from` *''./stack.js''*; |'
- en: '| ​  |  |'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `class` Linter { |'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `class` Linter { |'
- en: '| ​  | `constructor`() { |'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `constructor`() { |'
- en: '| ​  | `this`.stack = `new` Stack(); |'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `this`.stack = `new` Stack(); |'
- en: '| ​  | } |'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `lint`(text) { |'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `lint`(text) { |'
- en: '| ​  | `while` (`this`.stack.read()) { |'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while` (`this`.stack.read()) { |'
- en: '| ​  | `this`.stack.pop(); |'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `this`.stack.pop(); |'
- en: '| ​  | } |'
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `const` matchingBraces = { `''(''`: `'')''`, `''[''`: `'']''`, `''{''`:
    `''}''` }; |'
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` 匹配括号 = { `''(''`: `'')''`, `''[''`: `'']''`, `''{''`: `''}''`
    }; |'
- en: '| ​  |  |'
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `for`(`const` `char` `of` text) { |'
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for`(`const` `char` `of` text) { |'
- en: '| ​  | `if`(`matchingBraces[`char`]) { |'
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if`(`matchingBraces[`char`]) { |'
- en: '| ​  | `this`.stack.push(`char`); |'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `this`.stack.push(`char`); |'
- en: '| ​  | } `else` `if` (Object.values(matchingBraces).includes(`char`)) { |'
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } `else` `if` (Object.values(matchingBraces).includes(`char`)) { |'
- en: '| ​  | `if` (!`this`.stack.read()) { |'
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (!`this`.stack.read()) { |'
- en: '| ​  | `return` `${`char`} does not have opening brace`; |'
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` `${`char`} does not have opening brace`; |'
- en: '| ​  | } `else` { |'
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } `else` { |'
- en: '| ​  | `const` poppedOpeningBrace = `this`.stack.pop(); |'
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` poppedOpeningBrace = `this`.stack.pop(); |'
- en: '| ​  |  |'
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `if`(`char` !== `matchingBraces[poppedOpeningBrace]`) { |'
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if`(`char` !== `matchingBraces[poppedOpeningBrace]`) { |'
- en: '| ​  | `return` `${`char`} has mismatched opening brace`; |'
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` `${`char`} has mismatched opening brace`; |'
- en: '| ​  | } |'
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `// If we get to the end of line, and the stack isn''t empty:` |'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `// 如果我们到达行末，且栈不为空：` |'
- en: '| ​  | `if` (`this`.stack.read()) { |'
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (`this`.stack.read()) { |'
- en: '| ​  | `return` `${`this`.stack.read()} does not have closing brace`; |'
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` `${`this`.stack.read()} does not have closing brace`; |'
- en: '| ​  | } |'
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `// Return true if line has no errors:` |'
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `// 如果行没有错误，返回 true：` |'
- en: '| ​  | `return` `true`; |'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` `true`; |'
- en: '| ​  | } |'
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '`import Stack from ''./stack.js''` 允许我们的代码使用我们在上面实现的栈，因为我们将其保存在一个名为 `stack.js`
    的文件中。'
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`import Stack from ''./stack.js''` 允许我们的代码使用我们在上面实现的栈，因为我们将其保存在一个名为 `stack.js`
    的文件中。'
- en: 一旦我们创建了 `Linter` 类的实例，我们就会创建一个算法可以使用的栈。这是通过以下代码实现的：
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 一旦我们创建了 `Linter` 类的实例，我们就会创建一个算法可以使用的栈。这是通过以下代码实现的：
- en: '| ​  | `constructor`() { |'
  id: totrans-97
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `constructor`() { |'
- en: '| ​  | `this`.stack = `new` Stack(); |'
  id: totrans-98
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `this`.stack = `new` Stack(); |'
- en: '| ​  | } |'
  id: totrans-99
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 主 linting 算法发生在 `lint` 方法中，该方法接受一段 JavaScript 代码的字符串并将其分配给一个名为 `text` 的变量。
  id: totrans-100
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 主 linting 算法发生在 `lint` 方法中，该方法接受一段 JavaScript 代码的字符串并将其分配给一个名为 `text` 的变量。
- en: 我们首先确保栈是空的，因为它可能仍然包含来自之前的 linting 的数据。我们通过不断弹出栈中的数据，直到没有剩余数据：
  id: totrans-101
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们首先确保栈是空的，因为它可能仍然包含来自之前的 linting 的数据。我们通过不断弹出栈中的数据，直到没有剩余数据：
- en: '| ​  | `while`(`this`.stack.read()) { |'
  id: totrans-102
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while`(`this`.stack.read()) { |'
- en: '| ​  | `this`.stack.pop(); |'
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `this`.stack.pop(); |'
- en: '| ​  | } |'
  id: totrans-104
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 我们随后定义了我们认为是匹配括号的集合：
  id: totrans-105
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们随后定义了我们认为是匹配括号的集合：
- en: '| ​  | `const` matchingBraces = { `''(''`: `'')''`, `''[''`: `'']''`, `''{''`:
    `''}''` }; |'
  id: totrans-106
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` matchingBraces = { `''(''`: `'')''`, `''[''`: `'']''`, `''{''`:
    `''}''` }; |'
- en: 我们现在进入算法的主要部分，它通过循环逐个分析 `text` 中的每个字符：
  id: totrans-107
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们现在进入算法的主要部分，它通过循环逐个分析 `text` 中的每个字符：
- en: '| ​  | `for`(`const` `char` `of` text) { |'
  id: totrans-108
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for`(`const` `char` `of` text) { |'
- en: 如果当前字符是一个开括号，我们将它推入栈中：
  id: totrans-109
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果当前字符是一个开括号，我们将它推入栈中：
- en: '| ​  | `if`(`matchingBraces[`char`]) { |'
  id: totrans-110
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if`(`matchingBraces[`char`]) { |'
- en: '| ​  | `this`.stack.push(`char`); |'
  id: totrans-111
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `this`.stack.push(`char`); |'
- en: '| ​  | } |'
  id: totrans-112
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 如果当前字符不是一个开括号，我们接着检查它是否可能是一个闭括号：
  id: totrans-113
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果当前字符不是一个开括号，我们接着检查它是否可能是一个闭括号：
- en: '| ​  | `else` `if` (Object.values(matchingBraces).includes(`char`)) { |'
  id: totrans-114
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `else` `if` (Object.values(matchingBraces).includes(`char`)) { |'
- en: '`Object.values` 方法给我们提供了一个包含 `matchingBraces` 对象所有值的数组（即一个哈希表），不包含键。在我们的例子中，这些值都是闭括号。'
  id: totrans-115
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Object.values` 方法给我们提供了一个包含 `matchingBraces` 对象所有值的数组（即一个哈希表），不包含键。在我们的例子中，这些值都是闭括号。'
- en: 'If the current character is a closing brace, we then consider a couple of possibilities.
    We first check to see if there’s anything on the stack. If there isn’t, we trigger
    `Syntax Error #2`:'
  id: totrans-116
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '如果当前字符是一个闭括号，我们将考虑几种可能性。我们首先检查栈中是否有任何内容。如果没有，我们触发`语法错误 #2`：'
- en: '| ​  | `if`​ (!​`this`.stack.read()) { |'
  id: totrans-117
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if`​ (!​`this`.stack.read()) { |'
- en: '| ​  | `return` ​*`*​${​`char`​}​ *does not have opening brace`*​; |'
  id: totrans-118
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` ​*`*​${​`char`​}​ *does not have opening brace`*​; |'
- en: '| ​  | } |'
  id: totrans-119
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 'If there is something on the stack, we pop it off and check to see if it’s
    a matching opening brace. If it isn’t, we trigger `Syntax Error #3`:'
  id: totrans-120
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '如果栈中有内容，我们将其弹出并检查它是否是匹配的开括号。如果不是，我们触发`语法错误 #3`：'
- en: '| ​  | `else`​ { |'
  id: totrans-121
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `else`​ { |'
- en: '| ​  | `const`​ `poppedOpeningBrace` = `this`.stack.pop(); |'
  id: totrans-122
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const`​ `poppedOpeningBrace` = `this`.stack.pop(); |'
- en: '| ​  |  |'
  id: totrans-123
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `if`​ (`char` !== `matchingBraces[poppedOpeningBrace]`) { |'
  id: totrans-124
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if`​ (`char` !== `matchingBraces[poppedOpeningBrace]`) { |'
- en: '| ​  | `return` ​*`*​${​`char`​}​ *has mismatched opening brace`*​; |'
  id: totrans-125
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` ​*`*​${​`char`​}​ *has mismatched opening brace`*​; |'
- en: '| ​  | } |'
  id: totrans-126
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-127
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: The loop continues this way until it processes the entire text.
  id: totrans-128
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 循环以这种方式继续，直到处理整个文本。
- en: 'However, we’re not quite done. We still have to check whether the stack contains
    anything, because if it does, it means we have a stray opening brace that was
    never closed. This, again, is `Syntax Error #1`:'
  id: totrans-129
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '然而，我们还没有完全完成。我们仍然需要检查栈中是否包含任何内容，因为如果有，说明我们有一个未关闭的孤立开括号。这同样是`语法错误 #1`：'
- en: '| ​  | `if`​ (`this`.stack.read()) { |'
  id: totrans-130
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if`​ (`this`.stack.read()) { |'
- en: '| ​  | `return` ​*`*​${​`this`​.stack.read()}​ *does not have closing brace`*​;
    |'
  id: totrans-131
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` ​*`*​${​`this`​.stack.read()}​ *does not have closing brace`*​;
    |'
- en: '| ​  | } |'
  id: totrans-132
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: At the end of our method we return `true` if we process the entire text and
    don’t encounter any errors.
  id: totrans-133
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在我们的方法结束时，如果处理了整个文本且未遇到任何错误，我们将返回`true`。
- en: 'Here’s some sample code to run our linter:'
  id: totrans-134
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里有一些示例代码来运行我们的 linter：
- en: '| ​  | `const`​ `linter` = `new`​ `Linter();` |'
  id: totrans-135
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const`​ `linter` = `new`​ `Linter();` |'
- en: '| ​  | `linter.lint(​*''(let x = 2;''*​)` |'
  id: totrans-136
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `linter.lint(​*''(let x = 2;''*​)` |'
- en: 'This example will trigger `Syntax Error #1` since the opening parenthesis has
    no closing parenthesis.'
  id: totrans-137
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '这个例子将会触发 `Syntax Error #1`，因为左括号没有配对的右括号。'
- en: In this example, we used a stack to implement our linter with a neat algorithm.
    But if a stack actually uses an array under the hood, why bother with a stack?
    Couldn’t we have accomplished the same task using an array?
  id: totrans-138
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用栈来实现我们的 linter，采用了一个简洁的算法。但是，如果栈的底层实际上使用了数组，那为什么还要使用栈呢？难道我们不能用数组完成同样的任务吗？
