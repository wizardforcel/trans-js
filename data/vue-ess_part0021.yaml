- en: 'Module 16:'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 模块16：
- en: '|'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Vue.js and Web Accessibility
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js与网页可访问性
- en: '|'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'In the contemporary landscape of web development, creating applications that
    are inclusive and accessible to users of all abilities is not just a best practice
    but a moral imperative. The module "Vue.js and Web Accessibility" takes a central
    role in the book "Vue.js Essentials: For Responsive Web Development," guiding
    readers through the intricate process of incorporating web accessibility features
    into Vue.js applications. Within these pages, developers will gain comprehensive
    insights into accessibility principles, techniques, and best practices, empowering
    them to build web applications that are user-friendly and cater to a diverse audience.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '在当代的网页开发领域，创建对所有能力用户都具有包容性和可访问性的应用程序不仅是一种最佳实践，更是一项道德义务。模块《Vue.js与网页可访问性》在《Vue.js
    Essentials: For Responsive Web Development》一书中占据了核心位置，指导读者将网页可访问性功能整合到Vue.js应用程序中的复杂过程。在这些页面中，开发者将全面了解可访问性原则、技巧和最佳实践，从而使他们能够构建既用户友好又能满足多样化受众需求的网页应用程序。'
- en: Recognizing the Importance of Web Accessibility in Vue.js Development
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 认识到Vue.js开发中网页可访问性的重要性
- en: Before delving into the specifics of web accessibility in Vue.js, it is essential
    to recognize the importance of this aspect in modern web development. This module
    initiates by highlighting the challenges faced by users with diverse abilities
    and the impact of inaccessible applications. Readers will gain an understanding
    of how web accessibility not only complies with legal requirements but also enhances
    the overall user experience, extending the reach of applications to individuals
    with disabilities.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨Vue.js中的网页可访问性之前，必须认识到这一方面在现代网页开发中的重要性。本模块首先强调了具有不同能力的用户所面临的挑战以及不可访问应用程序的影响。读者将理解网页可访问性不仅是法律要求的遵循，更能提升整体用户体验，扩大应用程序的受众群体，包括残障人士。
- en: 'Vue.js and ARIA: Leveraging Accessible Rich Internet Applications Techniques'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js与ARIA：利用可访问富互联网应用技术
- en: Central to the success of web accessibility in Vue.js is the implementation
    of Accessible Rich Internet Applications (ARIA) techniques. This segment explores
    the integration of ARIA attributes into Vue.js components, guiding readers through
    the principles of making dynamic content more accessible. By mastering ARIA techniques,
    developers can ensure that their Vue.js applications provide meaningful information
    to assistive technologies and enhance the navigability and usability for users
    with disabilities.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js中网页可访问性的成功关键在于实施可访问富互联网应用（ARIA）技术。本节内容探讨了将ARIA属性集成到Vue.js组件中的方法，引导读者掌握如何使动态内容变得更加可访问。通过精通ARIA技术，开发者能够确保其Vue.js应用程序向辅助技术提供有意义的信息，增强残障用户的可导航性和可用性。
- en: 'Semantic HTML and Vue.js: Enhancing Structure for Accessibility'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 语义化HTML与Vue.js：提升可访问性的结构
- en: This module delves into the importance of using semantic HTML elements to enhance
    the structure of Vue.js applications for accessibility. Readers will explore strategies
    for choosing appropriate HTML elements, ensuring meaningful content and context,
    and optimizing the document outline. By incorporating semantic HTML, developers
    can create Vue.js applications that are inherently accessible, forming a solid
    foundation for assistive technologies and users relying on screen readers or other
    accessibility tools.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本模块深入探讨了使用语义化 HTML 元素在增强 Vue.js 应用程序结构方面对可访问性的意义。读者将探索选择合适 HTML 元素、确保内容和上下文具有意义、以及优化文档大纲的策略。通过结合语义化
    HTML，开发者能够创建天生可访问的 Vue.js 应用，为辅助技术和依赖屏幕阅读器或其他可访问性工具的用户奠定坚实的基础。
- en: Keyboard Navigation and Focus Management in Vue.js Components
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 组件中的键盘导航与焦点管理
- en: Building on the basics, this part of the module addresses advanced accessibility
    concepts related to keyboard navigation and focus management in Vue.js components.
    Developers will gain insights into strategies for managing keyboard interactions,
    ensuring that all interactive elements are navigable and operable using the keyboard
    alone. The segment covers techniques for managing focus, handling focus traps,
    and optimizing the user experience for keyboard and screen reader users.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在基础知识的基础上，本模块的这一部分讨论了与 Vue.js 组件中的键盘导航和焦点管理相关的高级可访问性概念。开发者将深入了解管理键盘交互的策略，确保所有互动元素都能仅使用键盘进行导航和操作。本部分涵盖了焦点管理、处理焦点陷阱和优化键盘及屏幕阅读器用户体验的技术。
- en: '"Vue.js and Web Accessibility" stands as a central module within "Vue.js Essentials:
    For Responsive Web Development," providing readers with a comprehensive guide
    to implementing accessibility features in Vue.js applications. By unraveling the
    importance of web accessibility, exploring ARIA techniques, emphasizing semantic
    HTML, and addressing advanced concepts like keyboard navigation, developers gain
    the knowledge and skills needed to create web applications that prioritize inclusivity
    and user-friendliness. This module serves as an indispensable resource for developers
    committed to building Vue.js applications that are not only visually appealing
    but also accessible and usable by individuals of all abilities.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 《Vue.js 和网页可访问性》是《Vue.js 精要：响应式网页开发》中的核心模块，向读者提供了在 Vue.js 应用程序中实现可访问性功能的全面指南。通过揭示网页可访问性的意义、探索
    ARIA 技术、强调语义化 HTML，并讨论像键盘导航这样的高级概念，开发者获得了创建优先考虑包容性和用户友好的网页应用所需的知识和技能。本模块为那些致力于构建不仅外观吸引而且对所有能力的用户都可访问和可用的
    Vue.js 应用的开发者提供了不可或缺的资源。
- en: Understanding Web Accessibility
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解网页可访问性
- en: 'The module "Vue.js and Web Accessibility" in the book "Vue.js Essentials: For
    Responsive Web Development" delves into the imperative realm of creating Vue.js
    applications that prioritize inclusivity and usability. The section on "Understanding
    Web Accessibility" serves as a foundational guide for developers, emphasizing
    the significance of accessibility in web development and providing insights into
    integrating accessibility features seamlessly into Vue.js projects.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '书籍《Vue.js Essentials: For Responsive Web Development》中的模块“Vue.js 和 Web 可访问性”深入探讨了创建注重包容性和可用性的
    Vue.js 应用程序的必要领域。章节“理解 Web 可访问性”作为开发者的基础指南，强调了 Web 开发中可访问性的重要性，并提供了将可访问性功能无缝集成到
    Vue.js 项目中的见解。'
- en: '1\. Vue.js and ARIA Roles: Enhancing Semantic Structure'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. Vue.js 和 ARIA 角色：增强语义结构
- en: <!-- Utilizing ARIA roles in Vue.js components -->
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- 在 Vue.js 组件中使用 ARIA 角色 -->
- en: <template>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div :role="ariaRole" :aria-label="ariaLabel">
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: <div :role="ariaRole" :aria-label="ariaLabel">
- en: <!-- Vue.js component content -->
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- Vue.js 组件内容 -->
- en: </div>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'ariaRole: ''button'', // Set dynamically based on component purpose'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 'ariaRole: ''button'', // 根据组件的用途动态设置'
- en: 'ariaLabel: ''Click me'', // Set dynamically based on component purpose'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 'ariaLabel: ''点击我'', // 根据组件的用途动态设置'
- en: '};'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: Accessible Rich Internet Applications (ARIA) roles play a pivotal role in enhancing
    the semantic structure of Vue.js components. By dynamically assigning ARIA roles
    and labels based on the purpose of each component, developers can ensure that
    assistive technologies interpret and convey the interface meaningfully to users
    with disabilities.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 可访问的富互联网应用（ARIA）角色在增强 Vue.js 组件的语义结构中起着至关重要的作用。通过根据每个组件的目的动态分配 ARIA 角色和标签，开发者可以确保辅助技术能够有意义地解释和传达界面信息，帮助残障用户。
- en: '2\. Vue.js Focus Management: Navigating User Interactions'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. Vue.js 焦点管理：导航用户交互
- en: <!-- Managing focus in Vue.js for enhanced accessibility -->
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- 在 Vue.js 中管理焦点以增强可访问性 -->
- en: <template>
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div>
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <button @click="openModal">Open Modal</button>
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="openModal">打开模态框</button>
- en: <div v-if="isModalOpen" @keydown.escape="closeModal" ref="modal" tabindex="-1">
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <div v-if="isModalOpen" @keydown.escape="closeModal" ref="modal" tabindex="-1">
- en: <!-- Modal content -->
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- 模态框内容 -->
- en: </div>
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </div>
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'isModalOpen: false,'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 'isModalOpen: false,'
- en: '};'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: openModal() {
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: openModal() {
- en: this.isModalOpen = true;
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: this.isModalOpen = true;
- en: this.$nextTick(() => this.$refs.modal.focus());
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: this.$nextTick(() => this.$refs.modal.focus());
- en: '},'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: closeModal() {
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: closeModal() {
- en: this.isModalOpen = false;
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: this.isModalOpen = false;
- en: '},'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: Effective focus management is integral to a positive user experience for individuals
    navigating a Vue.js application using assistive technologies. In this example,
    the openModal method sets focus to the modal when it opens, ensuring that users
    can seamlessly interact with modal content using keyboard controls. The closeModal
    method gracefully handles modal closure, enhancing the overall accessibility of
    the component.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的焦点管理对使用辅助技术浏览 Vue.js 应用的用户体验至关重要。在这个例子中，openModal 方法在模态框打开时将焦点设置到模态框，确保用户可以通过键盘控制无缝交互模态框内容。closeModal
    方法优雅地处理模态框关闭，提升了组件的整体可访问性。
- en: '3\. Vue.js Accessibility Plugin Integration: Streamlining Compliance'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 3. Vue.js 无障碍插件集成：简化合规性
- en: // Integrating Vue.js accessibility plugin for enhanced compliance
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: // 集成 Vue.js 无障碍插件以增强合规性
- en: import VueA11yPlugin from 'vue-a11y-plugin';
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 VueA11yPlugin 插件 from 'vue-a11y-plugin';
- en: Vue.use(VueA11yPlugin);
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.use(VueA11yPlugin);
- en: new Vue({
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 新建 Vue 实例({
- en: // ...
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: // ...
- en: '});'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: Vue.js offers accessibility plugins that streamline the process of enhancing
    accessibility in applications. By integrating such plugins, developers gain access
    to pre-built functionalities and optimizations that align with best practices,
    promoting compliance with accessibility standards.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 提供了无障碍插件，简化了在应用中增强无障碍性的过程。通过集成这些插件，开发者可以访问预构建的功能和优化，这些功能与最佳实践相一致，促进遵守无障碍标准。
- en: 'Conclusion: Fostering Inclusive Vue.js Experiences'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 结论：促进包容性 Vue.js 体验
- en: The "Understanding Web Accessibility" section underscores the pivotal role of
    accessibility in Vue.js development. By embracing ARIA roles, managing focus effectively,
    and integrating accessibility plugins, developers can create Vue.js applications
    that cater to a diverse user base, including those with disabilities. This section
    not only imparts technical skills but fosters a mindset that prioritizes inclusivity,
    ensuring that Vue.js applications contribute to a web landscape that is accessible
    and usable for everyone.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '"理解网页无障碍"部分强调了无障碍在 Vue.js 开发中的关键作用。通过采用 ARIA 角色、有效管理焦点并集成无障碍插件，开发者可以创建面向广泛用户群体的
    Vue.js 应用，包括有障碍的用户。此部分不仅传授了技术技能，还培养了一种以包容性为优先的思维方式，确保 Vue.js 应用有助于创建一个对所有人都可访问且可用的网页环境。'
- en: Building Accessible Vue.js Components
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建可访问的 Vue.js 组件
- en: 'Web accessibility is a crucial aspect of modern web development, ensuring that
    websites and applications are usable by everyone, including individuals with disabilities.
    In the module "Vue.js and Web Accessibility" from the book "Vue.js Essentials:
    For Responsive Web Development," a significant emphasis is placed on creating
    accessible Vue.js components. This section delves into best practices and techniques
    for enhancing the accessibility of your Vue.js applications.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Web 可访问性是现代 Web 开发中的一个关键方面，确保网站和应用程序对所有人都可用，包括残障人士。在《Vue.js 精要：响应式 Web 开发》一书中的“Vue.js
    与 Web 可访问性”模块中，着重强调了创建可访问的 Vue.js 组件。本节深入探讨了增强 Vue.js 应用程序可访问性的最佳实践和技术。
- en: Understanding Accessibility in Vue.js
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Vue.js 中理解可访问性
- en: Before diving into building accessible Vue.js components, it's essential to
    grasp the fundamentals of web accessibility. The module starts by emphasizing
    the importance of adhering to accessibility standards, such as the Web Content
    Accessibility Guidelines (WCAG). It provides a comprehensive overview of the key
    principles, including perceivability, operability, understandability, and robustness,
    which form the foundation for creating accessible user interfaces.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入构建可访问的 Vue.js 组件之前，掌握 Web 可访问性的基础知识至关重要。本模块首先强调遵循可访问性标准的重要性，例如 Web 内容可访问性指南（WCAG）。它全面概述了包括可感知性、可操作性、可理解性和稳健性在内的关键原则，这些原则构成了创建可访问用户界面的基础。
- en: Semantic HTML and ARIA Roles in Vue.js Components
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 组件中的语义 HTML 和 ARIA 角色
- en: The module emphasizes the use of semantic HTML and ARIA (Accessible Rich Internet
    Applications) roles to enhance the accessibility of Vue.js components. By utilizing
    semantic tags and ARIA roles appropriately, developers can ensure that screen
    readers and other assistive technologies can interpret and convey the content
    effectively. Code snippets within this section illustrate how to implement these
    concepts in Vue.js templates, demonstrating the integration of semantic elements
    like <nav>, <button>, and ARIA roles such as role="menu".
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 本模块强调使用语义 HTML 和 ARIA（可访问富互联网应用程序）角色，以增强 Vue.js 组件的可访问性。通过适当地使用语义标签和 ARIA 角色，开发人员可以确保屏幕阅读器和其他辅助技术能够有效地解释和传达内容。本节中的代码片段展示了如何在
    Vue.js 模板中实现这些概念，演示了如何集成语义元素，如 <nav>、<button> 和 ARIA 角色，例如 role="menu"。
- en: <template>
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <nav role="navigation">
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: <nav role="navigation">
- en: <ul>
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: <ul>
- en: <li><a href="#" role="menuitem">Home</a></li>
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: <li><a href="#" role="menuitem">首页</a></li>
- en: <li><a href="#" role="menuitem">About</a></li>
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: <li><a href="#" role="menuitem">关于</a></li>
- en: <li><a href="#" role="menuitem">Contact</a></li>
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: <li><a href="#" role="menuitem">联系方式</a></li>
- en: </ul>
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: </ul>
- en: </nav>
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: </nav>
- en: </template>
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: Keyboard Navigation and Focus Management
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 键盘导航和焦点管理
- en: Another crucial aspect covered in this module is keyboard navigation. Ensuring
    that Vue.js components can be navigated and interacted with using only a keyboard
    is fundamental for users who rely on keyboard navigation or other alternative
    input methods. The module guides developers on implementing keyboard event handlers
    and managing focus appropriately within Vue.js components. Practical code examples
    showcase the integration of @keyup and @keydown directives to handle keyboard
    events effectively.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 本模块覆盖的另一个关键方面是键盘导航。确保 Vue.js 组件可以仅通过键盘进行导航和交互，这对依赖键盘导航或其他替代输入方法的用户至关重要。本模块指导开发者实现键盘事件处理器，并在
    Vue.js 组件中适当地管理焦点。实际的代码示例展示了如何有效地使用@keyup和@keydown指令处理键盘事件。
- en: <template>
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <button @click="openModal" @keydown.enter="openModal" ref="modalButton">
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: <button @click="openModal" @keydown.enter="openModal" ref="modalButton">
- en: Open Modal
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 打开模态框
- en: </button>
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: </button>
- en: </template>
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: 'methods: {'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: openModal() {
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: openModal() {
- en: this.$refs.modalButton.focus();
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: this.$refs.modalButton.focus();
- en: // Additional logic for opening the modal
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: // 打开模态框的附加逻辑
- en: '},'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: Testing and Auditing for Accessibility
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 无障碍测试与审计
- en: To ensure the effectiveness of accessibility enhancements, the module introduces
    testing methodologies and tools for auditing Vue.js components. It discusses the
    integration of automated testing frameworks and tools like Axe Accessibility Checker,
    providing developers with the means to assess their applications for accessibility
    issues systematically.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为确保无障碍增强功能的有效性，本模块介绍了Vue.js组件审计的测试方法和工具。它讨论了自动化测试框架和工具（如Axe Accessibility Checker）的集成，为开发者提供了系统性评估应用程序无障碍问题的手段。
- en: The "Building Accessible Vue.js Components" section of the "Vue.js and Web Accessibility"
    module equips developers with the knowledge and practical skills needed to create
    inclusive and accessible Vue.js applications. By adhering to these principles
    and implementing the suggested techniques, developers can contribute to a web
    ecosystem that prioritizes accessibility for all users.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: “构建可访问的 Vue.js 组件”部分是“Vue.js 与 Web 无障碍”模块的一部分，旨在为开发者提供创建包容性和可访问性 Vue.js 应用程序所需的知识和实际技能。通过遵循这些原则并实施建议的技术，开发者可以为优先考虑所有用户无障碍的
    Web 生态系统做出贡献。
- en: Testing for Accessibility
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无障碍测试
- en: 'In the realm of web development, ensuring accessibility is a paramount concern.
    The module "Vue.js and Web Accessibility" within the book "Vue.js Essentials:
    For Responsive Web Development" dedicates a section to exploring the critical
    process of testing for accessibility in Vue.js applications. This section delves
    into the methodologies and tools that developers can leverage to assess the accessibility
    of their Vue.js components comprehensively.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '在网页开发领域，确保无障碍性是至关重要的关注点。书籍《Vue.js Essentials: For Responsive Web Development》中的“Vue.js
    与 Web 无障碍性”模块，专门探讨了在 Vue.js 应用程序中进行无障碍性测试的关键过程。本节深入介绍了开发人员可以利用的各种方法和工具，以全面评估 Vue.js
    组件的无障碍性。'
- en: Automated Testing with Vue Test Utils and Jest
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Vue Test Utils 和 Jest 进行自动化测试
- en: The module begins by highlighting the importance of incorporating automated
    testing into the development workflow. It emphasizes the synergy between Vue Test
    Utils and Jest for creating robust test suites that evaluate the accessibility
    of Vue.js components. Code examples illustrate how to write unit tests that specifically
    target accessibility concerns, covering scenarios such as keyboard navigation,
    ARIA attributes, and focus management.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 本模块首先强调了将自动化测试集成到开发工作流程中的重要性。它强调了 Vue Test Utils 和 Jest 在创建强大的测试套件方面的协同作用，这些测试套件用于评估
    Vue.js 组件的无障碍性。代码示例展示了如何编写专门针对无障碍性问题的单元测试，涵盖了键盘导航、ARIA 属性和焦点管理等场景。
- en: import { shallowMount } from '@vue/test-utils';
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: import { shallowMount } from '@vue/test-utils';
- en: import MyAccessibleComponent from '@/components/MyAccessibleComponent.vue';
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: import MyAccessibleComponent from '@/components/MyAccessibleComponent.vue';
- en: describe('MyAccessibleComponent', () => {
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: describe('MyAccessibleComponent', () => {
- en: it('should have proper ARIA attributes', () => {
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: it('应该具有正确的 ARIA 属性', () => {
- en: const wrapper = shallowMount(MyAccessibleComponent);
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: const wrapper = shallowMount(MyAccessibleComponent);
- en: expect(wrapper.attributes('role')).toBe('button');
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: expect(wrapper.attributes('role')).toBe('button');
- en: expect(wrapper.attributes('aria-label')).toBe('Accessible Button');
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: expect(wrapper.attributes('aria-label')).toBe('可访问按钮');
- en: '});'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: it('should handle keyboard navigation correctly', () => {
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: it('应该正确处理键盘导航', () => {
- en: const wrapper = shallowMount(MyAccessibleComponent);
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: const wrapper = shallowMount(MyAccessibleComponent);
- en: wrapper.trigger('keydown.enter');
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: wrapper.trigger('keydown.enter');
- en: // Assert additional keyboard navigation logic here
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: // 在此处断言额外的键盘导航逻辑
- en: '});'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '});'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: Integration of Axe Accessibility Checker
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Axe 无障碍检查器的集成
- en: A key focus of this section is the integration of external tools for more thorough
    accessibility testing. The module introduces the Axe Accessibility Checker as
    a powerful ally in identifying and addressing potential accessibility issues.
    Developers are guided through the process of incorporating Axe into their testing
    suite, allowing for automated and continuous accessibility assessments.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的一个关键重点是集成外部工具，以进行更全面的无障碍性测试。本模块介绍了 Axe 无障碍检查器，作为一个强大的工具，帮助识别和解决潜在的无障碍性问题。开发人员将学习如何将
    Axe 集成到测试套件中，从而实现自动化和持续的无障碍性评估。
- en: import { configureAxe, runAxe } from 'vue-axe';
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: import { configureAxe, runAxe } from 'vue-axe';
- en: import MyAccessibleComponent from '@/components/MyAccessibleComponent.vue';
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: import MyAccessibleComponent from '@/components/MyAccessibleComponent.vue';
- en: describe('Accessibility tests', () => {
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: describe('可访问性测试', () => {
- en: const axe = configureAxe({
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: const axe = configureAxe({
- en: 'rules: {'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 'rules: {'
- en: '''label'': { enabled: false }, // Example rule customization'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '''label'': { enabled: false }, // 规则自定义示例'
- en: '},'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '});'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: it('should pass accessibility tests', async () => {
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: it('应通过可访问性测试', async () => {
- en: const wrapper = mount(MyAccessibleComponent);
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: const wrapper = mount(MyAccessibleComponent);
- en: await runAxe(wrapper);
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: await runAxe(wrapper);
- en: expect(wrapper.html()).toMatchSnapshot();
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: expect(wrapper.html()).toMatchSnapshot();
- en: '});'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '});'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: User Testing and Assistive Technologies
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 用户测试与辅助技术
- en: While automated testing is a valuable component of an accessibility strategy,
    the module underscores the importance of user testing. Developers are encouraged
    to engage individuals with diverse abilities to interact with Vue.js applications
    using various assistive technologies. This hands-on approach ensures a more nuanced
    understanding of the user experience and helps identify potential issues that
    automated tools might overlook.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然自动化测试是可访问性策略中的重要组成部分，但该模块强调了用户测试的重要性。鼓励开发者让不同能力的用户使用各种辅助技术与 Vue.js 应用程序进行互动。这种实践方法能够更深入地了解用户体验，并帮助发现自动化工具可能忽略的问题。
- en: The "Testing for Accessibility" section provides developers with a comprehensive
    toolkit for evaluating the accessibility of Vue.js applications. By integrating
    automated testing tools like Vue Test Utils, Jest, and the Axe Accessibility Checker,
    coupled with user testing, developers can create web applications that prioritize
    inclusivity and usability for all individuals, regardless of their abilities or
    disabilities.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: “可访问性测试”部分为开发者提供了一个全面的工具包，用于评估 Vue.js 应用程序的可访问性。通过整合自动化测试工具，如 Vue Test Utils、Jest
    和 Axe 可访问性检查器，并结合用户测试，开发者可以创建优先考虑包容性和可用性的 web 应用，确保所有用户，无论是否有障碍，都能顺利使用。
- en: ARIA Roles and Attributes in Vue.js
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Vue.js 中的 ARIA 角色与属性
- en: 'In the module "Vue.js and Web Accessibility" from the book "Vue.js Essentials:
    For Responsive Web Development," the section dedicated to ARIA (Accessible Rich
    Internet Applications) roles and attributes in Vue.js explores the pivotal role
    these play in enhancing accessibility. This segment emphasizes the significance
    of using ARIA attributes judiciously to augment the user experience for individuals
    with disabilities and ensure a more inclusive web environment.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '在《Vue.js Essentials: For Responsive Web Development》一书的“Vue.js 与 Web 可访问性”模块中，专门讲解了
    Vue.js 中 ARIA（可访问的富互联网应用）角色和属性的章节，深入探讨了它们在增强可访问性方面的关键作用。该部分强调了谨慎使用 ARIA 属性的重要性，以提升残障人士的用户体验，确保一个更具包容性的网络环境。'
- en: Understanding ARIA Roles and Attributes
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 理解 ARIA 角色与属性
- en: The section commences with a foundational understanding of ARIA roles and attributes.
    It elucidates how these elements can be integrated seamlessly into Vue.js components
    to provide additional information to assistive technologies. ARIA roles define
    the purpose of an element, while attributes convey specific properties, both contributing
    to a richer, more accessible user interface. Developers are guided on selecting
    appropriate roles and attributes based on the nature and functionality of their
    Vue.js components.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 本节从ARIA角色和属性的基础知识开始。它阐明了如何将这些元素无缝地集成到Vue.js组件中，以便为辅助技术提供额外的信息。ARIA角色定义了元素的目的，而属性则传达了特定的属性，两者共同帮助构建一个更加丰富且可访问的用户界面。开发者将在选择适当的角色和属性时，根据Vue.js组件的性质和功能进行指导。
- en: <template>
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <button aria-label="Close" @click="closeModal">X</button>
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: <button aria-label="Close" @click="closeModal">X</button>
- en: </template>
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: In the above code snippet, the aria-label attribute ensures that a button, typically
    recognized by sighted users through its 'X' label, is also identifiable by screen
    readers with the label "Close."
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码片段中，aria-label属性确保了一个按钮，通常通过其"X"标签被有视力的用户识别，同时也能通过屏幕阅读器识别为"Close"（关闭）。
- en: Dynamic ARIA Binding in Vue.js Components
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js组件中的动态ARIA绑定
- en: The section delves into the dynamic nature of Vue.js components and how ARIA
    attributes can be bound dynamically based on component state or user interactions.
    Through reactive data properties and computed values, developers can ensure that
    ARIA roles and attributes adapt in real-time, providing a seamless and contextually
    relevant experience for users of assistive technologies.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 本节深入探讨了Vue.js组件的动态特性，以及如何根据组件的状态或用户交互动态绑定ARIA属性。通过响应式数据属性和计算值，开发者可以确保ARIA角色和属性实时适应，为辅助技术用户提供无缝且具有上下文相关性的体验。
- en: <template>
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: <template>
- en: <div :aria-hidden="!isModalOpen" aria-modal="true">
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: <div :aria-hidden="!isModalOpen" aria-modal="true">
- en: <!-- Modal content -->
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- 模态框内容 -->
- en: </div>
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </template>
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: </template>
- en: <script>
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: export default {
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: export default {
- en: data() {
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: data() {
- en: return {
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'isModalOpen: false,'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 'isModalOpen: false,'
- en: '};'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '},'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'methods: {'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 'methods: {'
- en: openModal() {
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: openModal() {
- en: this.isModalOpen = true;
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: this.isModalOpen = true;
- en: '},'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: closeModal() {
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: closeModal() {
- en: this.isModalOpen = false;
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: this.isModalOpen = false;
- en: '},'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '},'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '};'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: </script>
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: In this example, the aria-hidden and aria-modal attributes are bound dynamically
    to the component's state, ensuring that screen readers are informed of the modal's
    visibility and its role as a modal dialog.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，aria-hidden和aria-modal属性动态绑定到组件的状态，确保屏幕阅读器能够获得模态框的可见性信息，并了解它作为模态对话框的角色。
- en: Best Practices for ARIA Implementation in Vue.js
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js中ARIA实现的最佳实践
- en: The section concludes by presenting best practices for ARIA implementation in
    Vue.js components. It highlights the importance of consistency, ensuring that
    ARIA roles and attributes align with the expected behavior of each component.
    Developers are encouraged to refer to the ARIA specification and guidelines to
    make informed decisions about the appropriate use of roles and attributes in different
    scenarios.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 本节通过介绍在 Vue.js 组件中实现 ARIA 的最佳实践进行总结。强调了一致性的重要性，确保 ARIA 角色和属性与每个组件的预期行为保持一致。鼓励开发者参考
    ARIA 规范和指南，以便在不同场景中做出关于角色和属性使用的明智决策。
- en: By comprehensively covering ARIA roles and attributes in Vue.js, this section
    equips developers with the knowledge and tools necessary to create accessible
    web applications. By integrating ARIA seamlessly into Vue.js components, developers
    contribute to a digital landscape that prioritizes inclusivity and provides an
    optimal user experience for all.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 通过全面涵盖 Vue.js 中的 ARIA 角色和属性，本节为开发者提供了创建可访问网页应用所需的知识和工具。通过将 ARIA 无缝集成到 Vue.js
    组件中，开发者为优先考虑包容性的数字环境做出了贡献，并为所有用户提供了最佳的用户体验。
