- en: 'Chapter 11: Object-Oriented Programming in JavaScript'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章：JavaScript中的面向对象编程
- en: In this chapter, we will explore object-oriented programming (OOP) in JavaScript.
    Object-oriented programming is a powerful paradigm that allows us to model real-world
    entities as objects, encapsulate data and behavior within those objects, and interact
    between them. JavaScript supports OOP principles through its prototype-based inheritance
    system.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将探讨JavaScript中的面向对象编程（OOP）。面向对象编程是一种强大的范式，它使我们能够将现实世界中的实体建模为对象，将数据和行为封装在这些对象中，并在它们之间进行交互。JavaScript通过其基于原型的继承系统支持面向对象编程原则。
- en: 11.1 Introduction to Object-Oriented Programming
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11.1 面向对象编程简介
- en: Object-oriented programming is a programming paradigm centered around the concept
    of objects. An object is an instance of a class, which serves as a blueprint defining
    the properties and behaviors of objects belonging to that class.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程是一种围绕对象概念展开的编程范式。对象是类的一个实例，类作为蓝图定义了属于该类的对象的属性和行为。
- en: 'The key principles of object-oriented programming are:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程的关键原则包括：
- en: '- Encapsulation: Encapsulation allows us to encapsulate related data (properties)
    and functionality (methods) within an object, preventing direct access from outside
    and providing controlled access through defined interfaces.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '- 封装：封装使我们能够将相关数据（属性）和功能（方法）封装在对象内部，防止外部直接访问，并通过定义的接口提供受控的访问。'
- en: '- Inheritance: Inheritance enables objects to inherit properties and methods
    from other objects. It promotes code reuse and hierarchical relationships between
    classes.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '- 继承：继承使对象能够从其他对象继承属性和方法。它促进了代码重用以及类之间的层级关系。'
- en: '- Polymorphism: Polymorphism allows objects of different classes to be treated
    as objects of a common superclass. It enables flexible and interchangeable usage
    of objects based on their shared behaviors.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '- 多态：多态允许不同类的对象作为同一父类的对象进行处理。它使得基于共享行为的对象可以灵活且可互换地使用。'
- en: 11.2 Creating Objects in JavaScript
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11.2 在JavaScript中创建对象
- en: In JavaScript, objects can be created using object literals or constructor functions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，可以使用对象字面量或构造函数来创建对象。
- en: 'Object literals are a convenient way to create objects by defining their properties
    and methods directly. Here''s an example:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对象字面量是通过直接定义属性和方法来创建对象的一种便捷方式。以下是一个示例：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Constructor functions provide a way to create objects based on a blueprint
    (class) using the `new` keyword. Here''s an example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数提供了一种基于蓝图（类）使用`new`关键字创建对象的方法。以下是一个示例：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, we define a `Person` constructor function that takes `name`
    and `age` as parameters. We assign these values to the object using the `this`
    keyword. The `greet()` method is added to the prototype of the `Person` constructor
    function for shared functionality among all instances.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们定义了一个`Person`构造函数，接收`name`和`age`作为参数。我们使用`this`关键字将这些值分配给对象。`greet()`方法被添加到`Person`构造函数的原型中，以便所有实例共享该功能。
- en: 11.3 Inheritance and Prototypes in JavaScript
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11.3 JavaScript中的继承与原型
- en: JavaScript uses prototypal inheritance to implement inheritance between objects.
    Each object has an internal property called `[[Prototype]]` that points to its
    prototype object. Prototypes are used to inherit properties and methods from other
    objects.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript通过原型继承实现对象之间的继承。每个对象都有一个名为`[[Prototype]]`的内部属性，指向其原型对象。原型用于继承其他对象的属性和方法。
- en: We can create an inheritance relationship between objects using the `Object.create()`
    method or the `class` syntax introduced in ECMAScript 2015 (ES6).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`Object.create()`方法或ECMAScript 2015（ES6）中引入的`class`语法，在对象之间创建继承关系。
- en: 'Here''s an example using `Object.create()`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用`Object.create()`的示例：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, we create a `personPrototype` object that serves as the prototype
    for our `person` object. The `person` object inherits the `greet()` method from
    the `personPrototype` object.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们创建了一个`personPrototype`对象，它作为我们`person`对象的原型。`person`对象从`personPrototype`对象继承了`greet()`方法。
- en: 'Alternatively, we can use the `class` syntax to define classes and create inheritance
    relationships. Here''s an example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们也可以使用`class`语法来定义类并创建继承关系。以下是一个示例：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example, we define a `Person` class with a constructor and a `greet()`
    method. We then create a `Student` class that extends the `Person` class using
    the `extends` keyword. The `Student` class has its own constructor that invokes
    the `super()` method to call the constructor of the parent class. It also has
    a `study()` method specific to students.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们定义了一个`Person`类，其中有一个构造函数和一个`greet()`方法。然后，我们创建了一个`Student`类，使用`extends`关键字继承`Person`类。`Student`类有自己的构造函数，并调用`super()`方法来调用父类的构造函数。它还有一个专属于学生的`study()`方法。
- en: By utilizing inheritance, we can create a hierarchy of objects that share common
    properties and behaviors, while also extending and customizing them for specific
    purposes.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用继承，我们可以创建一个对象层级，其中的对象共享共同的属性和行为，同时也可以根据具体需求扩展和定制这些属性和行为。
- en: 11.4 Polymorphism in JavaScript
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11.4 JavaScript中的多态
- en: Polymorphism allows objects of different classes to be treated as objects of
    a common superclass. In JavaScript, polymorphism can be achieved by defining methods
    with the same name in different classes.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 多态允许不同类的对象被视为共同超类的对象。在JavaScript中，可以通过在不同类中定义同名的方法来实现多态。
- en: 'Here''s an example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this example, we define a `Shape` class with a `draw()` method. We then create
    `Circle` and `Square` classes that extend the `Shape` class and override the `draw()`
    method with their own implementations. Despite calling the same method name, each
    object behaves differently based on its specific class.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们定义了一个`Shape`类，并包含一个`draw()`方法。然后我们创建了`Circle`和`Square`类，它们扩展了`Shape`类，并用各自的实现重写了`draw()`方法。尽管调用了相同的方法名，但每个对象根据其具体类的不同而表现出不同的行为。
- en: Polymorphism allows us to write code that can work with objects of different
    classes interchangeably, promoting flexibility and extensibility.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 多态性使我们能够编写能够与不同类的对象互换使用的代码，促进了灵活性和可扩展性。
- en: 11.5 Conclusion
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 11.5 结论
- en: Object-oriented programming in JavaScript provides a powerful way to structure
    and organize our code by utilizing objects, encapsulation, inheritance, and polymorphism.
    By understanding the principles and techniques of OOP, we can create more modular,
    reusable, and maintainable JavaScript applications.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的面向对象编程提供了一种强大的方法来通过利用对象、封装、继承和多态性来构建和组织我们的代码。通过理解面向对象编程的原理和技巧，我们可以创建更模块化、可重用和可维护的JavaScript应用。
- en: In this chapter, we explored the basics of object-oriented programming in JavaScript,
    including creating objects, inheritance, and polymorphism. We also discussed how
    to use constructor functions and the `class` syntax introduced in ES6.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了JavaScript面向对象编程的基础，包括创建对象、继承和多态性。我们还讨论了如何使用构造函数和ES6中引入的`class`语法。
- en: 'In the next chapter, we will dive into another essential aspect of JavaScript
    programming: error handling and debugging techniques. Understanding how to handle
    errors and effectively debug our code will greatly enhance our development process
    and help us build robust JavaScript applications.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将深入探讨JavaScript编程的另一个重要方面：错误处理和调试技巧。了解如何处理错误并有效地调试代码，将极大提升我们的开发流程，并帮助我们构建健壮的JavaScript应用。
