- en: '`Chapter 5: JavaScript: The Language of the Web`'
  id: totrans-0
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: '`第 5 章：JavaScript：网页的语言`'
- en: '`5.1 From Simple Scripts to Rich Web Applications`'
  id: totrans-1
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`5.1 从简单脚本到丰富的网页应用`'
- en: '`JavaScript is a dynamic and versatile programming language that plays a pivotal
    role in modern web development. In this section, we’ll explore JavaScript’s journey
    from its origins as a simple scripting language to its current status as a powerful
    tool for building rich web applications.`'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`JavaScript 是一种动态且多功能的编程语言，在现代网页开发中扮演着至关重要的角色。在本节中，我们将探讨 JavaScript 从一个简单脚本语言到如今成为构建丰富网页应用的强大工具的历程。`'
- en: '`1\. A Brief History:`'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`1\. 简史：`'
- en: '`JavaScript was created by Brendan Eich in 1995 while he was working at Netscape
    Communications. Initially named “LiveScript,” it was later renamed “JavaScript”
    to leverage the popularity of Java. JavaScript’s early days were focused on enhancing
    the interactivity of web pages through client-side scripting.`'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`JavaScript 由 Brendan Eich 于 1995 年在 Netscape Communications 工作时创建。最初命名为 “LiveScript”，后来更名为
    “JavaScript” 以利用 Java 的流行。JavaScript 的早期重点是通过客户端脚本增强网页的互动性。`'
- en: '`// An early JavaScript example`'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 一个早期的 JavaScript 示例`'
- en: '`function  greet(name) {`'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`function  greet(name) {`'
- en: '`return  "Hello, "  + name +  "!";`'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return  "Hello, "  + name +  "!";`'
- en: '`}`'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`2\. DOM Manipulation:`'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`2\. DOM 操作：`'
- en: '`One of JavaScript’s initial use cases was manipulating the Document Object
    Model (DOM) to interact with web page elements dynamically. Developers could now
    change content, style, and behavior without requiring a full page reload.`'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`JavaScript 的早期应用之一是操作文档对象模型（DOM），以动态地与网页元素交互。开发者现在可以改变内容、样式和行为，而无需完全重新加载页面。`'
- en: '`// Changing the text content of an HTML element`'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 更改 HTML 元素的文本内容`'
- en: '`document.getElementById("greeting").textContent  =  "Welcome!";`'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`document.getElementById("greeting").textContent  =  "欢迎！";`'
- en: '`3\. Rise of AJAX:`'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`3\. AJAX 的兴起：`'
- en: '`In the early 2000s, JavaScript played a crucial role in the rise of Asynchronous
    JavaScript and XML (AJAX). This technology allowed web applications to fetch data
    from the server without reloading the entire page, leading to more responsive
    and interactive web experiences.`'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`在 2000 年代初期，JavaScript 在异步 JavaScript 和 XML（AJAX）的兴起中发挥了关键作用。这项技术使得网页应用能够在不重新加载整个页面的情况下从服务器获取数据，从而带来了更加响应迅速和互动性强的网页体验。`'
- en: '`// Making an AJAX request with XMLHttpRequest`'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 使用 XMLHttpRequest 发起 AJAX 请求`'
- en: '`var xhr =  new  XMLHttpRequest();`'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`var xhr =  new  XMLHttpRequest();`'
- en: '`xhr.open("GET",  "https://api.example.com/data",  true);`'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`xhr.open("GET",  "https://api.example.com/data",  true);`'
- en: '`xhr.onreadystatechange  =  function() {`'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`xhr.onreadystatechange  =  function() {`'
- en: '`if (xhr.readyState  ===  4  && xhr.status  ===  200) {`'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`if (xhr.readyState  ===  4  && xhr.status  ===  200) {`'
- en: '`var data =  JSON.parse(xhr.responseText);`'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`var data =  JSON.parse(xhr.responseText);`'
- en: '`console.log(data);`'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.log(data);`'
- en: '`}`'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`};`'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`};`'
- en: '`xhr.send();`'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`xhr.send();`'
- en: '`4\. The Birth of Libraries and Frameworks:`'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`4\. 库与框架的诞生：`'
- en: '`As web applications became more complex, JavaScript libraries and frameworks
    emerged to simplify development. jQuery, released in 2006, gained immense popularity
    for its DOM manipulation capabilities and cross-browser compatibility.`'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`随着网页应用变得越来越复杂，JavaScript 库和框架应运而生，简化了开发过程。2006 年发布的 jQuery 因其出色的 DOM 操作能力和跨浏览器兼容性而获得了极大的欢迎。`'
- en: '`// jQuery example: toggling a CSS class`'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// jQuery 示例：切换 CSS 类`'
- en: '`$("#myButton").click(function() {`'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`$("#myButton").click(function() {`'
- en: '`$("#myElement").toggleClass("highlight");`'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`$("#myElement").toggleClass("highlight");`'
- en: '`});`'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`5\. Server-Side JavaScript with Node.js:`'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`5\. 使用 Node.js 的服务器端 JavaScript：`'
- en: '`Node.js, introduced in 2009, brought JavaScript to the server-side, allowing
    developers to use a single language for both client and server applications. This
    unified approach led to significant advancements in full-stack development.`'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Node.js 于 2009 年推出，将 JavaScript 引入了服务器端，使得开发者可以使用同一种语言来编写客户端和服务器端的应用程序。这种统一的开发方式推动了全栈开发的显著进展。`'
- en: '`// A simple Node.js server`'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 一个简单的 Node.js 服务器`'
- en: '`const http =  require("http");`'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const http =  require("http");`'
- en: '`const server = http.createServer((req, res) => {`'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const server = http.createServer((req, res) => {`'
- en: '`res.writeHead(200, { "Content-Type":  "text/plain" });`'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`res.writeHead(200, { "Content-Type":  "text/plain" });`'
- en: '`res.end("Hello, Node.js!");`'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`res.end("Hello, Node.js!");`'
- en: '`});`'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`server.listen(8080,  "localhost");`'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`server.listen(8080,  "localhost");`'
- en: '`6\. Front-End Frameworks and Single-Page Applications (SPAs):`'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`6\. 前端框架与单页应用（SPA）：`'
- en: '`The emergence of front-end frameworks like Angular, React, and Vue.js transformed
    JavaScript into a key player in building SPAs. These frameworks offer component-based
    architecture and improved state management.`'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`前端框架如 Angular、React 和 Vue.js 的出现，将 `JavaScript` 转变为构建 SPA 的关键角色。这些框架提供了基于组件的架构和改进的状态管理。`'
- en: '`// React component example`'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// React 组件示例`'
- en: '`import React from  "react";`'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`import React from  "react";`'
- en: '`function Greeting(props) {`'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`function Greeting(props) {`'
- en: return  `<h1>Hello, {props.name}!</h1>`;
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: return  `<h1>你好, {props.name}!</h1>`;
- en: '`}`'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '7. The Modern Web Ecosystem:'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 7. 现代 Web 生态系统：
- en: Today, `JavaScript` is an integral part of the modern web ecosystem. It powers
    not only web applications but also mobile app development through technologies
    like `React Native` and progressive web apps (`PWAs`).
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 今天，`JavaScript` 已成为现代 Web 生态系统的一个重要组成部分。它不仅驱动 Web 应用程序，还通过像 `React Native` 和渐进式
    Web 应用程序（`PWAs`）等技术推动移动应用开发。
- en: '8. Beyond the Browser:'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 8. 超越浏览器：
- en: '`JavaScript`’s versatility extends beyond web development. It is used in robotics,
    `IoT`, serverless computing, and more, thanks to projects like `Node.js` and `Electron`.'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`JavaScript` 的多功能性超越了 Web 开发。它在机器人技术、`IoT`、无服务器计算等领域得到应用，得益于像 `Node.js` 和 `Electron`
    这样的项目。'
- en: '`// Building a desktop application with Electron`'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 使用 Electron 构建桌面应用程序`'
- en: '`const { app, BrowserWindow } = require("electron");`'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const { app, BrowserWindow } = require("electron");`'
- en: '`app.on("ready", () => {`'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`app.on("ready", () => {`'
- en: '`const mainWindow = new BrowserWindow({ width: 800, height: 600 });`'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const mainWindow = new BrowserWindow({ width: 800, height: 600 });`'
- en: '`mainWindow.loadFile("index.html");`'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`mainWindow.loadFile("index.html");`'
- en: '`});`'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`JavaScript` has evolved from a simple scripting language to a powerful and
    ubiquitous tool in the world of web development and beyond. Its continuous growth
    and adaptability make it a compelling choice for developers looking to create
    dynamic and interactive applications.'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`JavaScript` 从一个简单的脚本语言发展成了 Web 开发领域乃至其他领域的强大而无处不在的工具。它的持续增长和适应能力使其成为开发者创建动态和互动应用程序的有力选择。'
- en: '* * *'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '* * *'
- en: 5.2 Understanding the `DOM` and Browser Rendering
  id: totrans-59
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 5.2 理解 `DOM` 和浏览器渲染
- en: To work effectively with `JavaScript` in web development, it’s crucial to understand
    the Document Object Model (`DOM`) and how the browser renders web pages. In this
    section, we’ll explore the `DOM` and the rendering process, which are fundamental
    to `JavaScript`’s role in enhancing web interactivity.
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要有效地在 Web 开发中使用 `JavaScript`，理解文档对象模型（`DOM`）及浏览器渲染网页的过程至关重要。在本节中，我们将探索 `DOM`
    和渲染过程，这些都是 `JavaScript` 在增强 Web 互动性中的基础作用。
- en: 1. What Is the `DOM`?
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 1. 什么是 `DOM`？
- en: The `DOM` is a programming interface for web documents. It represents the structure
    of a web page, allowing scripts (like `JavaScript`) to access and manipulate the
    content, structure, and style of a document. The `DOM` is a tree-like structure
    where each element in an HTML document is represented as a node, and elements
    are organized hierarchically.
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`DOM` 是一种用于 Web 文档的编程接口。它表示网页的结构，允许脚本（如 `JavaScript`）访问和操作文档的内容、结构和样式。`DOM`
    是一种树状结构，HTML 文档中的每个元素都表示为一个节点，元素按层次结构组织。'
- en: '`<!DOCTYPE html>`'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<!DOCTYPE html>`'
- en: '`<html>`'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<html>`'
- en: '`<head>`'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<head>`'
- en: '`<title>DOM Example</title>`'
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<title>DOM 示例</title>`'
- en: '`</head>`'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`</head>`'
- en: '`<body>`'
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<body>`'
- en: '`<h1>Welcome to the DOM</h1>`'
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<h1>欢迎来到 DOM</h1>`'
- en: '`<p>This is a paragraph.</p>`'
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`<p>这是一个段落。</p>`'
- en: '`</body>`'
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`</body>`'
- en: '`</html>`'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`</html>`'
- en: In this HTML example, the `DOM` representation would consist of nodes like `<html>`,
    `<head>`, `<title>`, `<body>`, `<h1>`, and `<p>`.
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个 HTML 示例中，`DOM` 表示由像 `<html>`、`<head>`、`<title>`、`<body>`、`<h1>` 和 `<p>`
    等节点组成。
- en: '2. How `JavaScript` Interacts with the `DOM`:'
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 2. `JavaScript` 如何与 `DOM` 互动：
- en: '`JavaScript` can interact with the `DOM` through a set of APIs provided by
    the browser. These APIs allow you to:'
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`JavaScript` 可以通过浏览器提供的一组 API 与 `DOM` 进行交互。这些 API 允许你：'
- en: •            `Access and manipulate` HTML `elements`.
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: •            `访问和操作` HTML `元素`。
- en: •            `Change element attributes and content.`
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: •            `更改元素属性和内容。`
- en: •            `Add or remove` elements.
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: •            `添加或移除` 元素。
- en: •            `Respond to user events like clicks and keypresses.`
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: •            `响应用户事件，如点击和按键。`
- en: 'Here’s a simple example of how `JavaScript` can change the text of an HTML
    element:'
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是一个简单的示例，展示了 `JavaScript` 如何更改 HTML 元素的文本：
- en: '`// Get the element with the ID "myElement"`'
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 获取 ID 为 "myElement" 的元素`'
- en: '`var element = document.getElementById("myElement");`'
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`var element = document.getElementById("myElement");`'
- en: '`// Change its text content`'
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 更改它的文本内容`'
- en: '`element.textContent = "New Text";`'
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`element.textContent = "新文本";`'
- en: '3. Browser Rendering Process:'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 3. 浏览器渲染过程：
- en: 'Understanding how the browser renders a web page is essential when working
    with `JavaScript`. The rendering process involves several steps:'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 理解浏览器如何渲染网页对于使用 `JavaScript` 非常重要。渲染过程包括几个步骤：
- en: 'Parsing HTML: The browser parses the HTML document to create a `DOM` tree.'
  id: totrans-87
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 解析 HTML：浏览器解析 HTML 文档以创建 `DOM` 树。
- en: 'Constructing the Render Tree: The browser combines the DOM tree with the CSSOM
    (CSS Object Model) to create a render tree, which represents what should be displayed
    on the screen.'
  id: totrans-88
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 构建渲染树：浏览器将 DOM 树与 CSSOM（CSS 对象模型）结合，创建渲染树，该树表示应显示在屏幕上的内容。
- en: 'Layout: The browser calculates the layout of each element, determining their
    size and position on the screen.'
  id: totrans-89
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 布局：浏览器计算每个元素的布局，确定它们在屏幕上的大小和位置。
- en: 'Painting: Finally, the browser paints the elements on the screen according
    to their layout information.'
  id: totrans-90
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 绘制：最后，浏览器根据布局信息将元素绘制到屏幕上。
- en: '4. Efficient DOM Manipulation:'
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 4. 高效的 DOM 操作：
- en: 'Efficiency is crucial when working with the DOM. Excessive DOM manipulation
    can lead to performance issues, especially on large web pages. To optimize DOM
    manipulation:'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在操作 DOM 时，效率至关重要。过度的 DOM 操作可能会导致性能问题，尤其是在大型网页上。为了优化 DOM 操作：
- en: •            Minimize direct DOM access and manipulation in loops.
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: •            在循环中最小化对 DOM 的直接访问和操作。
- en: •            Use event delegation to handle events efficiently on parent elements.
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: •            使用事件委托在父元素上高效处理事件。
- en: •            Cache DOM references for elements you frequently interact with.
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: •            缓存常用元素的 DOM 引用，以提高效率。
- en: •            Use libraries like jQuery or modern frameworks to simplify DOM
    manipulation.
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: •            使用像 jQuery 这样的库或现代框架来简化 DOM 操作。
- en: '5. Asynchronous JavaScript:'
  id: totrans-97
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 5. 异步 JavaScript：
- en: JavaScript’s asynchronous nature is fundamental for web interactivity. Functions
    like `setTimeout` and `addEventListener` allow you to schedule code execution
    and respond to user interactions without blocking the main thread, ensuring a
    smooth user experience.
  id: totrans-98
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: JavaScript 的异步特性是 Web 互动性的基础。像 `setTimeout` 和 `addEventListener` 这样的函数允许你安排代码的执行并响应用户的互动，而不会阻塞主线程，从而确保平滑的用户体验。
- en: // Execute a function after a delay
  id: totrans-99
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: // 延迟执行一个函数
- en: '`setTimeout(function() {`'
  id: totrans-100
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`setTimeout(function() {`'
- en: '`console.log("Delayed code execution");`'
  id: totrans-101
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.log("延迟代码执行");`'
- en: '},  2000);'
  id: totrans-102
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '},  2000);'
- en: Understanding the DOM and the browser rendering process is crucial for effective
    web development with JavaScript. By manipulating the DOM and optimizing your code,
    you can create dynamic and interactive web applications that provide a seamless
    user experience.
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 理解 DOM 和浏览器渲染过程对于使用 JavaScript 进行有效的 Web 开发至关重要。通过操作 DOM 和优化代码，您可以创建动态和互动性强的
    Web 应用程序，为用户提供无缝的体验。
- en: '* * *'
  id: totrans-104
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '* * *'
- en: 5.3 Event-Driven Programming in JavaScript
  id: totrans-105
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 5.3 JavaScript 中的事件驱动编程
- en: Event-driven programming is a core concept in JavaScript, allowing developers
    to create interactive and responsive web applications. In this section, we’ll
    delve into event-driven programming in JavaScript, explaining how events work,
    how to handle them, and their significance in modern web development.
  id: totrans-106
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 事件驱动编程是 JavaScript 中的核心概念，它允许开发者创建互动性强且响应迅速的 Web 应用程序。在本节中，我们将深入探讨 JavaScript
    中的事件驱动编程，解释事件是如何工作的，如何处理事件，以及它们在现代 Web 开发中的重要性。
- en: '1. Understanding Events:'
  id: totrans-107
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 1. 理解事件：
- en: In JavaScript, an event is an action or occurrence that can be detected and
    responded to by code. Examples of events include user interactions like clicks,
    keyboard input, mouse movements, and window resizing. Events are generated by
    various sources, including the user, the browser, or external devices.
  id: totrans-108
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，事件是可以被代码检测和响应的动作或发生的事情。事件的例子包括用户交互，如点击、键盘输入、鼠标移动和窗口调整大小。事件由多种来源生成，包括用户、浏览器或外部设备。
- en: // Adding a click event listener to a button element
  id: totrans-109
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: // 向按钮元素添加点击事件监听器
- en: '`var button = document.getElementById("myButton");`'
  id: totrans-110
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`var button = document.getElementById("myButton");`'
- en: '`button.addEventListener("click", function() {`'
  id: totrans-111
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`button.addEventListener("click", function() {`'
- en: '`console.log("Button clicked!");`'
  id: totrans-112
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.log("按钮被点击了！");`'
- en: '});'
  id: totrans-113
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '});'
- en: In this example, we attach a click event listener to a button element. When
    the button is clicked, the provided function is executed.
  id: totrans-114
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个示例中，我们为按钮元素附加了一个点击事件监听器。当按钮被点击时，提供的函数将被执行。
- en: '2. Event Handling:'
  id: totrans-115
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 2. 事件处理：
- en: 'Event handling in JavaScript involves:'
  id: totrans-116
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: JavaScript 中的事件处理包括：
- en: •            Registering an event listener on an HTML element.
  id: totrans-117
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: •            在 HTML 元素上注册事件监听器。
- en: •            Specifying the event type (e.g., “click,” “keydown”).
  id: totrans-118
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: •            指定事件类型（例如，“click”，“keydown”）。
- en: •            Providing a callback function that executes when the event occurs.
  id: totrans-119
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: •            提供一个回调函数，当事件发生时执行。
- en: // Handling a keyboard event
  id: totrans-120
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: // 处理键盘事件
- en: '`document.addEventListener("keydown", function(event) {`'
  id: totrans-121
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`document.addEventListener("keydown", function(event) {`'
- en: '`console.log("Key pressed: " + event.key);`'
  id: totrans-122
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.log("按键： " + event.key);`'
- en: '});'
  id: totrans-123
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '});'
- en: 在这里，我们在整个文档上注册了一个`keydown`事件监听器。当按下某个键时，回调函数将按下的键记录到控制台。
  id: totrans-124
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这里，我们在整个文档上注册了一个`keydown`事件监听器。当按下某个键时，回调函数将按下的键记录到控制台。
- en: '`3\. Event Propagation:`'
  id: totrans-125
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`3\. 事件传播：`'
- en: DOM中的事件遵循一种传播模型，包括两个阶段：捕获阶段和冒泡阶段。捕获阶段从根节点开始，向下移动到目标元素，而冒泡阶段则从目标元素开始，向上移动到根节点。
  id: totrans-126
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: DOM中的事件遵循一种传播模型，包括两个阶段：捕获阶段和冒泡阶段。捕获阶段从根节点开始，向下移动到目标元素，而冒泡阶段则从目标元素开始，向上移动到根节点。
- en: '`// Event propagation example`'
  id: totrans-127
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 事件传播示例`'
- en: '`var container = document.getElementById("container");`'
  id: totrans-128
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`var container = document.getElementById("container");`'
- en: '`var button = document.getElementById("myButton");`'
  id: totrans-129
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`var button = document.getElementById("myButton");`'
- en: '`container.addEventListener("click", function() {`'
  id: totrans-130
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`container.addEventListener("click", function() {`'
- en: '`console.log("Container clicked");`'
  id: totrans-131
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.log("容器被点击");`'
- en: '`}, true);  // Capturing phase`'
  id: totrans-132
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}, true);  // 捕获阶段`'
- en: '`button.addEventListener("click", function() {`'
  id: totrans-133
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`button.addEventListener("click", function() {`'
- en: '`console.log("Button clicked");`'
  id: totrans-134
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.log("按钮被点击");`'
- en: '`});  // Bubbling phase`'
  id: totrans-135
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`});  // 冒泡阶段`'
- en: 在这个例子中，当按钮被点击时，容器和按钮的点击事件处理器都会被触发。捕获阶段的处理器首先运行，然后是冒泡阶段的处理器。
  id: totrans-136
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个例子中，当按钮被点击时，容器和按钮的点击事件处理器都会被触发。捕获阶段的处理器首先运行，然后是冒泡阶段的处理器。
- en: '`4\. Preventing Default Behavior:`'
  id: totrans-137
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`4\. 阻止默认行为：`'
- en: 许多DOM事件都有默认的行为。例如，点击链接默认会导航到新页面。JavaScript允许你在需要时阻止事件的默认行为。
  id: totrans-138
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 许多DOM事件都有默认的行为。例如，点击链接默认会导航到新页面。JavaScript允许你在需要时阻止事件的默认行为。
- en: '`// Preventing the default behavior of a link`'
  id: totrans-139
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 阻止链接的默认行为`'
- en: '`var link = document.getElementById("myLink");`'
  id: totrans-140
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`var link = document.getElementById("myLink");`'
- en: '`link.addEventListener("click", function(event) {`'
  id: totrans-141
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`link.addEventListener("click", function(event) {`'
- en: '`event.preventDefault();`'
  id: totrans-142
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`event.preventDefault();`'
- en: '`console.log("Link click prevented");`'
  id: totrans-143
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.log("链接点击已阻止");`'
- en: '`});`'
  id: totrans-144
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`});`'
- en: 在这个例子中，点击链接会阻止默认的导航行为，并且事件的传播被停止。
  id: totrans-145
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个例子中，点击链接会阻止默认的导航行为，并且事件的传播被停止。
- en: '`5\. Event Delegation:`'
  id: totrans-146
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`5\. 事件委托：`'
- en: 事件委托是一种技术，通过将单个事件监听器附加到父元素上，以处理多个子元素的事件。这在处理动态生成的内容时尤其有用。
  id: totrans-147
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 事件委托是一种技术，通过将单个事件监听器附加到父元素上，以处理多个子元素的事件。这在处理动态生成的内容时尤其有用。
- en: '`// Event delegation example`'
  id: totrans-148
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 事件委托示例`'
- en: '`var container = document.getElementById("container");`'
  id: totrans-149
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`var container = document.getElementById("container");`'
- en: '`container.addEventListener("click", function(event) {`'
  id: totrans-150
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`container.addEventListener("click", function(event) {`'
- en: '`if (event.target.tagName === "LI") {`'
  id: totrans-151
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`if (event.target.tagName === "LI") {`'
- en: '`console.log("List item clicked");`'
  id: totrans-152
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.log("列表项被点击");`'
- en: '`}`'
  id: totrans-153
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`});`'
  id: totrans-154
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`});`'
- en: 在这个例子中，我们监听容器元素上的点击事件，并检查被点击的元素是否是一个`<li>`（列表项）。这使我们能够使用单个事件监听器处理多个列表项的点击。
  id: totrans-155
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个例子中，我们监听容器元素上的点击事件，并检查被点击的元素是否是一个`<li>`（列表项）。这使我们能够使用单个事件监听器处理多个列表项的点击。
- en: '`6\. Asynchronous Event Handling:`'
  id: totrans-156
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`6\. 异步事件处理：`'
- en: JavaScript的异步特性非常适合事件驱动编程。事件可以用来触发异步操作，比如进行AJAX请求、更新UI元素或处理用户交互，而不阻塞主线程。
  id: totrans-157
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: JavaScript的异步特性非常适合事件驱动编程。事件可以用来触发异步操作，比如进行AJAX请求、更新UI元素或处理用户交互，而不阻塞主线程。
- en: 事件驱动编程是现代web开发的核心。JavaScript响应用户操作和外部事件的能力，使得动态和交互式web应用的创建成为可能。理解事件处理和传播对于构建响应迅速、用户友好的浏览器界面至关重要。
  id: totrans-158
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 事件驱动编程是现代web开发的核心。JavaScript响应用户操作和外部事件的能力，使得动态和交互式web应用的创建成为可能。理解事件处理和传播对于构建响应迅速、用户友好的浏览器界面至关重要。
- en: '`* * *`'
  id: totrans-159
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`* * *`'
- en: '`5.4 Asynchronous Programming and Callbacks`'
  id: totrans-160
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`5.4 异步编程和回调`'
- en: 异步编程是JavaScript的一个关键方面，允许开发人员在不阻塞主线程的情况下执行任务，确保用户界面的响应性。回调函数是处理异步操作的基础。在本节中，我们将探讨使用回调的JavaScript异步编程。
  id: totrans-161
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 异步编程是JavaScript的一个关键方面，允许开发人员在不阻塞主线程的情况下执行任务，确保用户界面的响应性。回调函数是处理异步操作的基础。在本节中，我们将探讨使用回调的JavaScript异步编程。
- en: 1\. 异步操作：
  id: totrans-162
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 1\. 异步操作：
- en: JavaScript经常遇到需要时间完成的任务，例如从服务器获取数据或读取文件。同步执行这些任务会冻结用户界面，使应用程序无响应。异步编程通过允许任务在后台运行来解决这个问题。
  id: totrans-163
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: JavaScript经常遇到需要时间完成的任务，例如从服务器获取数据或读取文件。同步执行这些任务会冻结用户界面，使应用程序无响应。异步编程通过允许任务在后台运行来解决这个问题。
- en: 2\. 回调函数：
  id: totrans-164
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 2\. 回调函数：
- en: 回调是作为参数传递给其他函数的函数。它们在特定任务完成后执行。回调通常用于处理JavaScript中的异步操作。
  id: totrans-165
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 回调是作为参数传递给其他函数的函数。它们在特定任务完成后执行。回调通常用于处理JavaScript中的异步操作。
- en: '`// Example of a callback function`'
  id: totrans-166
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 回调函数的示例`'
- en: '`function  fetchData(url, callback) {`'
  id: totrans-167
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`function  fetchData(url, callback) {`'
- en: '`// Simulate fetching data`'
  id: totrans-168
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 模拟获取数据`'
- en: '`setTimeout(function() {`'
  id: totrans-169
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`setTimeout(function() {`'
- en: '`var data =  "Data fetched from "  + url;`'
  id: totrans-170
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`var data =  "从 "  + url + " 获取的数据";`'
- en: '`callback(data);`'
  id: totrans-171
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`callback(data);`'
- en: '`},  1000);`'
  id: totrans-172
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`},  1000);`'
- en: '`}`'
  id: totrans-173
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`// Using the callback`'
  id: totrans-174
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 使用回调`'
- en: '`fetchData("https://example.com/api/data",  function(result) {`'
  id: totrans-175
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`fetchData("https://example.com/api/data",  function(result) {`'
- en: '`console.log(result);`'
  id: totrans-176
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.log(result);`'
- en: '`});`'
  id: totrans-177
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`});`'
- en: 在这个例子中，`fetchData`函数模拟数据获取，并在数据准备好时执行提供的回调函数。
  id: totrans-178
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个例子中，`fetchData`函数模拟数据获取，并在数据准备好时执行提供的回调函数。
- en: 3\. 回调地狱（诡异金字塔）：
  id: totrans-179
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 3\. 回调地狱（诡异金字塔）：
- en: 回调函数在处理多个嵌套的异步操作时可能导致称为“回调地狱”或“诡异金字塔”的问题。这会导致代码难以阅读和维护。
  id: totrans-180
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 回调函数在处理多个嵌套的异步操作时可能导致称为“回调地狱”或“诡异金字塔”的问题。这会导致代码难以阅读和维护。
- en: '`// Example of callback hell`'
  id: totrans-181
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 回调地狱的示例`'
- en: '`asyncFunc1(function(result1) {`'
  id: totrans-182
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`asyncFunc1(function(result1) {`'
- en: '`asyncFunc2(result1,  function(result2) {`'
  id: totrans-183
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`asyncFunc2(result1,  function(result2) {`'
- en: '`asyncFunc3(result2,  function(result3) {`'
  id: totrans-184
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`asyncFunc3(result2,  function(result3) {`'
- en: '`// More nested callbacks...`'
  id: totrans-185
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 更多嵌套的回调...`'
- en: '`});`'
  id: totrans-186
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`});`'
  id: totrans-187
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`});`'
  id: totrans-188
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`});`'
- en: 4\. `Promises`：
  id: totrans-189
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 4\. `Promises`：
- en: 为了缓解回调地狱的问题，JavaScript引入了`Promises`。一个`Promise`表示一个可能尚不可用但将来某个时候会可用的值。`Promises`提供了一种更清晰的方式来处理异步操作。
  id: totrans-190
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为了缓解回调地狱的问题，JavaScript引入了`Promises`。一个`Promise`表示一个可能尚不可用但将来某个时候会可用的值。`Promises`提供了一种更清晰的方式来处理异步操作。
- en: '`// Example using Promises`'
  id: totrans-191
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 使用 Promises 的示例`'
- en: '`function  fetchData(url) {`'
  id: totrans-192
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`function  fetchData(url) {`'
- en: '`return  new  Promise(function(resolve, reject) {`'
  id: totrans-193
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return  new  Promise(function(resolve, reject) {`'
- en: '`setTimeout(function() {`'
  id: totrans-194
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`setTimeout(function() {`'
- en: '`var data =  "Data fetched from "  + url;`'
  id: totrans-195
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`var data =  "从 "  + url + " 获取的数据";`'
- en: '`resolve(data);  // Resolve the Promise with data`'
  id: totrans-196
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`resolve(data);  // 使用数据解析 Promise`'
- en: '`},  1000);`'
  id: totrans-197
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`},  1000);`'
- en: '`});`'
  id: totrans-198
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`}`'
  id: totrans-199
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`// Using Promises`'
  id: totrans-200
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 使用 Promises`'
- en: '`fetchData("https://example.com/api/data")`'
  id: totrans-201
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`fetchData("https://example.com/api/data")`'
- en: '`.then(function(result) {`'
  id: totrans-202
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`.then(function(result) {`'
- en: '`console.log(result);`'
  id: totrans-203
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.log(result);`'
- en: '`})`'
  id: totrans-204
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`})`'
- en: '`.catch(function(error) {`'
  id: totrans-205
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`.catch(function(error) {`'
- en: '`console.error(error);`'
  id: totrans-206
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.error(error);`'
- en: '`});`'
  id: totrans-207
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`Promises`允许你为成功链式调用`.then()`处理程序，为错误链式调用`.catch()`处理程序，使代码更具可读性和可维护性。'
  id: totrans-208
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Promises`允许你为成功链式调用`.then()`处理程序，为错误链式调用`.catch()`处理程序，使代码更具可读性和可维护性。'
- en: 5\. `Async/Await`：
  id: totrans-209
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 5\. `Async/Await`：
- en: ES2017引入了`async`和`await`关键字，进一步简化了异步代码。一个`async`函数返回一个`Promise`，`await`可以在其中使用，以暂停执行直到等待的`Promise`被解决。
  id: totrans-210
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: ES2017引入了`async`和`await`关键字，进一步简化了异步代码。一个`async`函数返回一个`Promise`，`await`可以在其中使用，以暂停执行直到等待的`Promise`被解决。
- en: '`// Example using async/await`'
  id: totrans-211
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 使用 async/await 示例`'
- en: '`async  function  fetchData(url) {`'
  id: totrans-212
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`async  function  fetchData(url) {`'
- en: '`return  new  Promise(function(resolve, reject) {`'
  id: totrans-213
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return  new  Promise(function(resolve, reject) {`'
- en: '`setTimeout(function() {`'
  id: totrans-214
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`setTimeout(function() {`'
- en: '`var data =  "Data fetched from "  + url;`'
  id: totrans-215
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`var data =  "从 "  + url + " 获取的数据";`'
- en: resolve(data);  // Resolve the `Promise` with data
  id: totrans-216
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: resolve(data);  // 使用数据解析`Promise`
- en: '}, 1000);'
  id: totrans-217
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '}, 1000);'
- en: '});'
  id: totrans-218
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-219
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '}'
- en: // Using `async/await`
  id: totrans-220
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: // 使用 `async/await`
- en: async function `getData`() {
  id: totrans-221
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: async function `getData`() {
- en: try {
  id: totrans-222
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: try {
- en: const `result` = await `fetchData`("https://example.com/api/data");
  id: totrans-223
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: const `result` = await `fetchData`("https://example.com/api/data");
- en: '`console.log(result);`'
  id: totrans-224
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.log(result);`'
- en: '} catch (error) {'
  id: totrans-225
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '} catch (error) {'
- en: '`console.error(error);`'
  id: totrans-226
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.error(error);`'
- en: '}'
  id: totrans-227
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-228
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '}'
- en: '`getData();`'
  id: totrans-229
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`getData();`'
- en: '`Async/await`语法使异步代码看起来更像同步代码，从而提高可读性。'
  id: totrans-230
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Async/await`语法使异步代码看起来更像同步代码，从而提高可读性。'
- en: 理解异步编程和回调函数对于构建响应式和高效的`JavaScript`应用至关重要。虽然回调是一个基本概念，但`Promises`和`async/await`已成为管理异步操作和减少回调地狱的标准实践。
  id: totrans-231
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 理解异步编程和回调函数对于构建响应式和高效的`JavaScript`应用至关重要。虽然回调是一个基本概念，但`Promises`和`async/await`已成为管理异步操作和减少回调地狱的标准实践。
- en: '* * *'
  id: totrans-232
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '* * *'
- en: 5.5 `The Rise of Node.js` and `Server-Side JavaScript`
  id: totrans-233
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 5.5 `Node.js的崛起` 和 `服务器端JavaScript`
- en: '`Node.js`在服务器端开发领域已经成为一个颠覆者，允许`JavaScript`超越浏览器的范围。在这一部分，我们将探讨`Node.js`的崛起、它的架构以及在现代网络开发中的重要性。'
  id: totrans-234
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Node.js`在服务器端开发领域已经成为一个颠覆者，允许`JavaScript`超越浏览器的范围。在这一部分，我们将探讨`Node.js`的崛起、它的架构以及在现代网络开发中的重要性。'
- en: '1\. `Introduction to Node.js`:'
  id: totrans-235
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 1\. `Node.js简介`：
- en: '`Node.js`，最初由`Ryan Dahl`于2009年发布，是一个开源的跨平台运行时环境，允许开发者在服务器端运行`JavaScript`。它利用了`Google`的`V8`
    JavaScript引擎进行快速代码执行，并提供了一组丰富的内置库和模块用于服务器端任务。'
  id: totrans-236
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Node.js`，最初由`Ryan Dahl`于2009年发布，是一个开源的跨平台运行时环境，允许开发者在服务器端运行`JavaScript`。它利用了`Google`的`V8`
    JavaScript引擎进行快速代码执行，并提供了一组丰富的内置库和模块用于服务器端任务。'
- en: // A simple HTTP server using `Node.js`
  id: totrans-237
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: // 使用 `Node.js` 创建一个简单的 HTTP 服务器
- en: const `http` = require('http');
  id: totrans-238
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: const `http` = require('http');
- en: const `server` = `http.createServer`((req, res) => {
  id: totrans-239
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: const `server` = `http.createServer`((req, res) => {
- en: '`res.statusCode` = 200;'
  id: totrans-240
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`res.statusCode` = 200;'
- en: '`res.setHeader`(''Content-Type'', ''text/plain'');'
  id: totrans-241
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`res.setHeader`(''Content-Type'', ''text/plain'');'
- en: '`res.end`(''Hello, `Node.js`!'');'
  id: totrans-242
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`res.end`(''你好，`Node.js`!'');'
- en: '});'
  id: totrans-243
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '});'
- en: '`server.listen`(8080, ''localhost'', () => {'
  id: totrans-244
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`server.listen`(8080, ''localhost'', () => {'
- en: '`console.log`(''Server running at http://localhost:8080/'');'
  id: totrans-245
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.log`(''服务器正在运行在 http://localhost:8080/'');'
- en: '});'
  id: totrans-246
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '});'
- en: '2\. `Event-Driven` and `Non-Blocking Architecture`:'
  id: totrans-247
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 2\. `事件驱动` 和 `非阻塞架构`：
- en: '`Node.js`遵循事件驱动的非阻塞I/O模型，使其在处理并发连接时非常高效。这种架构允许`Node.js`同时处理多个请求，而无需基于线程的并发。相反，它依赖回调和事件循环进行异步操作。'
  id: totrans-248
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Node.js`遵循事件驱动的非阻塞I/O模型，使其在处理并发连接时非常高效。这种架构允许`Node.js`同时处理多个请求，而无需基于线程的并发。相反，它依赖回调和事件循环进行异步操作。'
- en: // Asynchronous file read in `Node.js`
  id: totrans-249
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: // `Node.js`中的异步文件读取
- en: const `fs` = require('fs');
  id: totrans-250
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: const `fs` = require('fs');
- en: '`fs.readFile`(''file.txt'', ''utf8'', (err, data) => {'
  id: totrans-251
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`fs.readFile`(''file.txt'', ''utf8'', (err, data) => {'
- en: if (err) throw err;
  id: totrans-252
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: if (err) throw err;
- en: '`console.log(data);`'
  id: totrans-253
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.log(data);`'
- en: '});'
  id: totrans-254
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '});'
- en: '3\. `npm` (`Node Package Manager`):'
  id: totrans-255
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 3\. `npm`（`Node包管理器`）：
- en: '`npm`是`Node.js`的包管理器，提供访问大量开源库和模块的途径。开发者可以轻松安装、管理和共享包，以扩展其`Node.js`应用的功能。'
  id: totrans-256
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`npm`是`Node.js`的包管理器，提供访问大量开源库和模块的途径。开发者可以轻松安装、管理和共享包，以扩展其`Node.js`应用的功能。'
- en: Installing a package using `npm`
  id: totrans-257
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 安装一个包使用 `npm`
- en: '`npm install package-name`'
  id: totrans-258
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`npm install package-name`'
- en: '4\. `Full-Stack JavaScript Development`:'
  id: totrans-259
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 4\. `全栈JavaScript开发`：
- en: 通过在服务器端使用`Node.js`和在浏览器中使用`JavaScript`，开发者可以采用全栈`JavaScript`方法，使用同一种语言进行客户端和服务器端应用的开发。这种统一简化了开发过程，减少了上下文切换的需要。
  id: totrans-260
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 通过在服务器端使用`Node.js`和在浏览器中使用`JavaScript`，开发者可以采用全栈`JavaScript`方法，使用同一种语言进行客户端和服务器端应用的开发。这种统一简化了开发过程，减少了上下文切换的需要。
- en: '5\. `Real-Time Applications`:'
  id: totrans-261
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 5\. `实时应用`：
- en: Node.js在构建实时应用程序方面表现出色，如聊天应用、在线游戏平台和协作工具。其事件驱动特性和低延迟性能使其适合处理多个同时连接。
  id: totrans-262
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: Node.js在构建实时应用程序方面表现出色，如聊天应用、在线游戏平台和协作工具。其事件驱动特性和低延迟性能使其适合处理多个同时连接。
- en: 6\. RESTful APIs 和微服务：
  id: totrans-263
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 6\. RESTful APIs 和微服务：
- en: Node.js通常用于开发RESTful APIs和微服务，因为其轻量和快速的特性。开发者可以为Web和移动应用创建可扩展和响应迅速的API。
  id: totrans-264
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: Node.js通常用于开发RESTful APIs和微服务，因为其轻量和快速的特性。开发者可以为Web和移动应用创建可扩展和响应迅速的API。
- en: '`// Creating a simple RESTful API with Express.js (a Node.js framework)`'
  id: totrans-265
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 使用 Express.js 创建一个简单的 RESTful API (一个 Node.js 框架)`'
- en: '`const express = require(''express'');`'
  id: totrans-266
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const express = require(''express'');`'
- en: '`const app = express();`'
  id: totrans-267
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const app = express();`'
- en: '`const port = 3000;`'
  id: totrans-268
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const port = 3000;`'
- en: '`app.get(''/api/users'', (req, res) => {`'
  id: totrans-269
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`app.get(''/api/users'', (req, res) => {`'
- en: '`res.json({ users: [''Alice'', ''Bob'', ''Charlie''] });`'
  id: totrans-270
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`res.json({ users: [''Alice'', ''Bob'', ''Charlie''] });`'
- en: '`});`'
  id: totrans-271
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`app.listen(port, () => {`'
  id: totrans-272
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`app.listen(port, () => {`'
- en: '`console.log(`Server is listening at http://localhost:${port}`);`'
  id: totrans-273
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.log(`服务器正在监听 http://localhost:${port}`);`'
- en: '`});`'
  id: totrans-274
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`});`'
- en: 7\. 可扩展性和性能：
  id: totrans-275
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 7\. 可扩展性和性能：
- en: Node.js的能力处理高并发和其非阻塞架构使其适合构建可扩展和高性能的应用程序。它被Netflix、LinkedIn和PayPal等科技巨头广泛用于其后端服务。
  id: totrans-276
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: Node.js的能力处理高并发和其非阻塞架构使其适合构建可扩展和高性能的应用程序。它被Netflix、LinkedIn和PayPal等科技巨头广泛用于其后端服务。
- en: 8\. 无服务器计算：
  id: totrans-277
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 8\. 无服务器计算：
- en: Node.js在无服务器计算平台中扮演着重要角色，如`AWS Lambda`和`Azure Functions`。开发者可以用JavaScript编写无服务器函数，实现自动扩展和成本优化。
  id: totrans-278
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: Node.js在无服务器计算平台中扮演着重要角色，如`AWS Lambda`和`Azure Functions`。开发者可以用JavaScript编写无服务器函数，实现自动扩展和成本优化。
- en: Node.js通过将JavaScript引入这个领域，彻底改变了服务器端开发。其事件驱动、非阻塞架构，以及`npm`生态系统，使其成为构建实时应用、RESTful
    APIs和可扩展微服务的首选。使用Node.js，JavaScript的多样性超越了浏览器，塑造了网络开发的未来。
  id: totrans-279
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: Node.js通过将JavaScript引入这个领域，彻底改变了服务器端开发。其事件驱动、非阻塞架构，以及`npm`生态系统，使其成为构建实时应用、RESTful
    API和可扩展微服务的首选。使用Node.js，JavaScript的多样性超越了浏览器，塑造了网络开发的未来。
- en: '* * *'
  id: totrans-280
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-281
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '* * *'
