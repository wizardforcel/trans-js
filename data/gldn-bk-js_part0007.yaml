- en: Chapter 4
  id: totrans-0
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 第4章
- en: Control Structures
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 控制结构
- en: 'Let''s address one of the pillars of programming: control structures. They
    are fundamental to the logic of any programming language, allowing you to direct
    the flow of execution of your code in an intelligent and efficient way. In JavaScript,
    we have several control structures that help us make decisions and repeat actions
    according to specific conditions. Today, we''ll explore conditional structures,
    repetition structures, functions, and scope. Deepening our understanding of these
    topics is essential to writing clean, efficient code.'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们谈谈编程的一个支柱：控制结构。它们是任何编程语言逻辑的基础，允许你以智能和高效的方式引导代码的执行流。在 JavaScript 中，我们有几种控制结构，帮助我们根据特定条件做出决策和重复动作。今天，我们将探索条件结构、重复结构、函数和作用域。深入理解这些主题对于编写干净、高效的代码至关重要。
- en: Conditional structures (`if`, `else`, `switch`)
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 条件结构（`if`、`else`、`switch`）
- en: Conditional structures are used to make decisions in code. They allow different
    blocks of code to be executed based on specific conditions.
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 条件结构用于在代码中做出决策。它们允许根据特定条件执行不同的代码块。
- en: 'if, else if, else:  These are the most basic and widely used conditional structures
    in JavaScript. They allow a block of code to be executed if a condition is true.'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: if、else if、else：这些是 JavaScript 中最基本和最常用的条件结构。它们允许在条件为真时执行代码块。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, we verify age and print an appropriate message based on age
    range.
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个示例中，我们验证年龄并根据年龄范围打印相应的消息。
- en: 'switch:  The `switch` is an alternative to `if-else`, especially useful when
    you have several conditions to check. It compares an expression with multiple
    cases and executes the corresponding block of code.'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: switch：`switch` 是 `if-else` 的一种替代，尤其在你有多个条件需要检查时非常有用。它将一个表达式与多个案例进行比较，并执行相应的代码块。
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the example above, the `switch` checks the value of `dayWeek` and prints
    the corresponding day. If no cases are matched, the default block is executed.
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在上面的示例中，`switch` 检查 `dayWeek` 的值并打印相应的日期。如果没有匹配的情况，则执行默认块。
- en: Repetition structures (`for`, `while`, `do-while`)
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 重复结构（`for`、`while`、`do-while`）
- en: Repetition structures are used to execute a block of code multiple times, based
    on a condition. JavaScript offers several options for this, each suitable for
    different scenarios.
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 重复结构用于根据条件多次执行一个代码块。JavaScript 提供了几种选项，每种选项适合不同的场景。
- en: 'for:  The `for` loop is one of the most common and versatile repetition structures.
    It is used when we know the exact number of iterations we want to perform.'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: for：`for` 循环是最常见和多用途的重复结构之一。它在我们知道想要执行的确切迭代次数时使用。
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, the `for` loop runs the code block five times, printing the
    iteration number each time.
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个示例中，`for` 循环运行代码块五次，每次打印迭代次数。
- en: 'while:  The `while` loop is used when we don''t know the exact number of iterations
    beforehand, but want to continue executing the block of code as long as a condition
    is true.'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: while：`while` 循环用于当我们不知道确切的迭代次数时，但希望在条件为真的情况下继续执行代码块。
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The above `while` loop continues to execute until the value of `counter` is
    equal to or greater than 5.
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 上面的 `while` 循环会一直执行，直到 `counter` 的值等于或大于 5。
- en: 'do-while:  The `do-while` loop is similar to the `while` loop, but it ensures
    that the code block is executed at least once before checking the condition.'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: do-while：`do-while` 循环类似于 `while` 循环，但它确保在检查条件之前至少执行一次代码块。
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Even if the condition is false at the beginning, the block of code in the `do-while`
    loop is executed at least once.
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 即使在开始时条件为假，`do-while` 循环中的代码块也至少会执行一次。
- en: Functions and scope
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数与作用域
- en: Functions are blocks of code that perform a specific task and can be called
    repeatedly in different parts of the program. They are essential for code modularization
    and reuse.
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数是执行特定任务的代码块，可以在程序的不同部分重复调用。它们对于代码的模块化和重用至关重要。
- en: 'Function declaration: Functions can be declared using the `function` keyword.'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数声明：函数可以使用 `function` 关键字声明。
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this example, the `saudacao` function takes a `name` parameter and returns
    a personalized greeting.
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个示例中，`saudacao` 函数接受一个 `name` 参数并返回个性化的问候。
- en: 'Function expressions:  Functions can also be defined as expressions and assigned
    to variables.'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数表达式：函数也可以定义为表达式并赋值给变量。
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Arrow functions:  Introduced in ES6, arrow functions offer a shorter syntax
    and are especially useful for callback functions.'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 箭头函数：箭头函数在 ES6 中引入，提供了更简洁的语法，特别适用于回调函数。
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Scope:  Scope determines the accessibility of variables in different parts
    of the code. In JavaScript, we have two main types of scope: global and local.'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 作用域：作用域决定了变量在代码不同部分的可访问性。在 JavaScript 中，我们有两种主要的作用域：全局作用域和局部作用域。
- en: 'Global scope:  Variables declared outside of any function have global scope
    and can be accessed from anywhere in the code.'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 全局作用域：在任何函数外声明的变量具有全局作用域，可以在代码的任何地方访问。
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Local scope:  Variables declared within a function have local scope and can
    only be accessed within that function.'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 局部作用域：在函数内声明的变量具有局部作用域，仅能在该函数内部访问。
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Block scope:  With the introduction of `let` and `const` in ES6, block scope
    was added to JavaScript. Variables declared with `let` or `const` are limited
    to the block where they were defined, as in loops or conditionals.'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 块级作用域：随着 ES6 中 `let` 和 `const` 的引入，JavaScript 增加了块级作用域。用 `let` 或 `const` 声明的变量仅限于其定义的块，例如在循环或条件语句中。
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Closures:  One of the powerful features of functions in JavaScript is the closure.
    A closure is a function that remembers the scope where it was created, even after
    that scope has been closed.'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 闭包：JavaScript 中函数的强大特性之一是闭包。闭包是一个函数，它记住了创建时的作用域，即使该作用域已经关闭。
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the example above, each instance of `criarCounter` creates a new scope for
    the variable `counter`, and the returned function remembers this scope, allowing
    independent manipulation of the variable `counter`.
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在上面的例子中，每个 `criarCounter` 的实例为变量 `counter` 创建了一个新的作用域，返回的函数记住了这个作用域，从而允许独立操作变量
    `counter`。
- en: We explore the control structures in JavaScript, from conditionals and loops
    to functions and scope. Each of these tools is essential for writing efficient,
    modular, and maintainable code. Understanding and mastering these structures will
    allow you to create more complex and robust programs, facing any challenge that
    arises. As we move forward, we will continue to build on these foundations, exploring
    even more advanced applications of JavaScript. Be ready to turn every line of
    code into an opportunity for learning and innovation.
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们探索 JavaScript 中的控制结构，从条件语句和循环到函数和作用域。这些工具对于编写高效、模块化和可维护的代码至关重要。理解和掌握这些结构将使你能够创建更复杂和强大的程序，面对任何挑战。在接下来的学习中，我们将继续在这些基础上发展，探索
    JavaScript 的更高级应用。准备好将每一行代码变成学习和创新的机会吧。
