- en: Chapter 2
  id: totrans-0
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第二章
- en: Programming with Variables
  id: totrans-1
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 使用变量进行编程
- en: IN THIS CHAPTER
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 本章内容
- en: '![Bullet](images/check.png) `Understanding variables`'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) `理解变量`'
- en: '![Bullet](images/check.png) `Assigning names to variables`'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) `为变量指定名称`'
- en: '![Bullet](images/check.png) `Introducing JavaScript data types`'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) `介绍 JavaScript 数据类型`'
- en: '![Bullet](images/check.png) `Figuring out numbers`'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) `计算数字`'
- en: '![Bullet](images/check.png) `Stringing strings together`'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) `将字符串串联在一起`'
- en: 'By default, JavaScript programs live a life without short-term memory. The
    web browser executes your code one statement at a time until there are no more
    statements left to process. It all happens in the perpetual present. Ah, but notice
    that I refer to this lack of short-term memory as the “default” state of your
    scripts. It’s not the only state, so that means things can be different. You have
    the power to give your scripts the gift of short-term memory, and you do that
    by using handy little chunks of code called variables. In this chapter, you delve
    into variables, which is a fundamental and crucial programming topic. You investigate
    what variables are, what you can do with them, and how to wield them in your JavaScript
    code.  ## Getting Your Head around Variables'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 默认情况下，JavaScript 程序的生命周期没有短期记忆。网页浏览器一次执行你的代码中的一条语句，直到没有更多的语句需要处理。这一切都发生在永恒的“现在”中。啊，但请注意，我把这种没有短期记忆的状态称为脚本的“默认”状态。它并不是唯一的状态，这意味着情况是可以不同的。你有能力赋予你的脚本短期记忆的能力，你可以通过使用被称为变量的小段代码来做到这一点。在本章中，你将深入了解变量，这是一个基本且至关重要的编程主题。你将探讨变量是什么、你可以用它们做什么，以及如何在你的
    JavaScript 代码中使用它们。## 理解变量
- en: Why would a script need short-term memory? Because one of the most common concepts
    that crops up when coding is the need to store a temporary value for use later
    on. In most cases, you want to use that value a bit later in the same script.
    However, you may also need to use it in some other script, to populate an HTML
    form, or as part of a larger or more complex calculation.
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为什么脚本需要短期记忆？因为编程时最常遇到的概念之一就是需要存储一个临时值以供以后使用。在大多数情况下，你希望稍后在同一个脚本中使用该值。然而，你也可能需要在其他脚本中使用它，填充
    HTML 表单，或者作为更大或更复杂计算的一部分。
- en: For example, your page may have a button that toggles the page text between
    a larger font size and the regular font size, so you need some way to “remember”
    that choice. Similarly, if your script performs calculations, you may need to
    set aside one or more calculated values to use later. For example, if you’re constructing
    a shopping cart script, you may need to calculate taxes on the order. To do that,
    you must first calculate the total value of the order, store that value, and then
    later take a percentage of it to work out the tax.
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，你的页面可能有一个按钮，可以在较大的字体和常规字体大小之间切换，因此你需要某种方法来“记住”这个选择。类似地，如果你的脚本执行计算，你可能需要为后续使用保留一个或多个计算值。例如，如果你正在编写一个购物车脚本，你可能需要计算订单的税额。为此，你必须先计算订单的总价值，存储该值，然后再取其百分比来计算税费。
- en: 'In programming, the way you save a value for later use is by storing it in
    a variable. A `variable` is a small area of computer memory that’s set aside for
    holding a chunk of program data. The good news is that the specifics of how the
    data is stored and retrieved from memory happen well behind the scenes, so it
    isn’t something you ever have to worry about. As a coder, working with variables
    involves just three things:'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在编程中，保存一个值以供后续使用的方法是将其存储在变量中。`变量`是计算机内存中的一个小区域，用于存放一块程序数据。好消息是，数据如何存储和从内存中检索的具体方式都发生在幕后，因此这不是你需要担心的问题。作为一名程序员，使用变量只需要关注三件事：
- en: Creating (or `declaring`) variables
  id: totrans-12
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 创建（或 `声明`）变量
- en: Assigning values to those variables
  id: totrans-13
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 为这些变量赋值
- en: Including the variables in other statements in your code
  id: totrans-14
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 在代码中的其他语句中包含变量
- en: The next three sections fill in the details.
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 接下来的三个部分将详细讲解。
- en: '### Declaring a variable with `let`'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '### 使用 `let` 声明变量'
- en: 'The process of creating a variable is called `declaring` in programming terms.
    All declaring really means is that you’re supplying the variable with a name and
    telling the browser to set aside a bit of room in memory to hold whatever value
    you end up storing in the variable. To declare a variable in JavaScript, you use
    the `let` keyword, followed by a space, the name of the variable, and the usual
    line-ending semicolon. For example, to declare a variable named `interestRate`,
    you use the following statement:'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 创建变量的过程在编程术语中称为`声明`。声明的真正含义是你为变量提供了一个名称，并告诉浏览器在内存中为存储变量值预留一个位置。要在JavaScript中声明变量，你使用`let`关键字，后跟一个空格、变量名和通常的行结束分号。例如，声明一个名为`interestRate`的变量，你可以使用以下语句：
- en: '`let interestRate;`'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`let interestRate;`'
- en: '![Remember](images/remember.png) Here are a few things to bear in mind when
    you’re declaring variables in your scripts:'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![记住](images/remember.png) 在声明变量时，你需要记住一些事项：'
- en: '**Declare a variable only once:** Although you’re free to use a variable as
    many times as you need to within a script, you declare the variable only once.
    Trying to declare a variable more than once will cause an error.'
  id: totrans-20
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '**每个变量只声明一次：** 虽然你可以在脚本中多次使用一个变量，但每个变量只需声明一次。尝试多次声明同一个变量会导致错误。'
- en: '**Use a comment to describe each variable:** Variables tend to proliferate
    to the point where it often becomes hard to remember what each variable represents.
    You can make the purpose of each variable clear by adding a comment right after
    the variable declaration, like so: `let interestRate; // Annual interest rate
    for loan calculation`'
  id: totrans-21
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '**使用注释描述每个变量：** 变量往往会大量增加，导致很难记住每个变量代表的含义。你可以通过在变量声明后面添加注释来明确每个变量的用途，例如：`let
    interestRate; // 用于贷款计算的年利率`'
- en: '**Declare each variable before you use it:** If you use a variable before you
    declare it, you’ll get an error.'
  id: totrans-22
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '**在使用变量之前声明它：** 如果在声明之前使用了一个变量，你会遇到错误。'
- en: '![Remember](images/remember.png) In the first two items here, when I say that
    you’ll “get an error,” I don’t mean that an error message will pop up on the screen.
    The only thing you’ll notice is that your script doesn’t run. To read the error
    message, you need to access your browser’s web development tools, a task I go
    into in satisfying detail in `Chapter 9`(`c09.xhtml`).'
  id: totrans-23
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: '![记住](images/remember.png) 在前面两项中，当我说你会“遇到错误”时，我并不是指屏幕上会弹出错误信息。你唯一会注意到的是脚本没有运行。要查看错误信息，你需要访问浏览器的网页开发工具，这是我在`第9章`（`c09.xhtml`）中详细讲解的内容。'
- en: '**Declare each variable right before you first use it:** You’ll make your programming
    and debugging (refer to `Chapter 9`)(`c09.xhtml`) life much easier if you follow
    this one simple rule: Declare each variable just before (or as close as possible
    to) the first use of the variable.'
  id: totrans-24
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '**在首次使用变量之前声明它：** 如果你遵循这个简单的规则：在第一次使用变量之前（或尽可能接近第一次使用时）声明它，你的编程和调试（参见`第9章`）（`c09.xhtml`）将变得更加轻松。'
- en: '![Remember](images/remember.png) The `let` keyword was introduced in ECMAScript
    2015 (ES6). If you need to support really old browsers — I’m looking at `you,`
    Internet Explorer 11 and earlier — then use the `var` keyword instead.  ### Storing
    a value in a variable'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![记住](images/remember.png) `let`关键字是在ECMAScript 2015（ES6）中引入的。如果你需要支持非常老旧的浏览器——我指的是`你，`Internet
    Explorer 11及更早版本——那么请改用`var`关键字。 ### 将值存储在变量中'
- en: 'After your variable is declared, your next task is to give it a value. You
    use the assignment operator — the equals (`=`) sign — to store a value in a variable,
    as in this general statement:'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在声明变量之后，接下来的任务是给它赋值。你使用赋值运算符——等号（`=`）——来将值存储到变量中，如下面这个通用语句所示：
- en: '``variableName = value;``'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '``variableName = value;``'
- en: 'Here’s an example that assigns the value `0.06` to a variable named `interestRate`:'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是一个示例，它将值`0.06`赋给一个名为`interestRate`的变量：
- en: '`interestRate = 0.06;`'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`interestRate = 0.06;`'
- en: 'Note, too, that if you know the initial value of the variable in advance, you
    can combine the declaration and initial assignment into a single statement, like
    this:'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 另外，如果你事先知道变量的初始值，可以将声明和初始赋值合并为一个语句，例如：
- en: '`let interestRate = 0.06;`'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`let interestRate = 0.06;`'
- en: 'It’s important to remember that, given a variable declared with the `let` keyword,
    you’re free to change that variable’s value any time you want. For example, if
    the value you assign to the `interestRate` variable is an annual rate, later on
    your code may need to work with a monthly rate, which is the annual rate divided
    by `12`。Rather than calculate that by hand, just put it in your code using the
    division operator (`/`):'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 需要记住的是，使用`let`关键字声明的变量，你可以随时更改该变量的值。例如，如果你为`interestRate`变量赋予的是年利率，那么稍后在你的代码中可能需要使用月利率，这就是将年利率除以`12`。与其手动计算，不如直接在代码中使用除法运算符（`/`）：
- en: '`interestRate = 0.06 / 12;`'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`interestRate = 0.06 / 12;`'
- en: 'As a final note about using a variable assignment, take a look at a variation
    that often causes some confusion among new programmers. Specifically, you can
    set up a statement that assigns a new value to a variable by changing its existing
    value. Here’s an example:'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 关于使用变量赋值的最后一点，来看一个常常让新程序员感到困惑的变体。具体来说，你可以设置一个语句，通过修改现有值来给变量赋一个新值。下面是一个例子：
- en: '`interestRate = interestRate / 12;`'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`interestRate = interestRate / 12;`'
- en: If you’ve never come across this kind of statement before, it probably looks
    a bit illogical. How can something equal itself divided by `12`？The secret to
    understanding such a statement is to remember that the browser always evaluates
    the right side of the statement — that is, the expression to the right of the
    equals sign (`=`) — first. In other words, it takes the current value of `interestRate`，which
    is `0.06`，and divides it by `12`。The resulting value is what’s stored in `interestRate`
    when all is said and done. For a more in-depth discussion of operators and expressions,
    head over to [Chapter 3](c03.xhtml).
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你从未见过这种语句，它可能看起来有些不合逻辑。怎么会有东西等于自己除以`12`呢？理解这种语句的关键是记住浏览器总是先计算语句右侧的表达式——即等号右边的表达式（`=`）。换句话说，它先取`interestRate`当前的值`0.06`，然后除以`12`。最终的结果是存储在`interestRate`中的值。想了解更多关于运算符和表达式的讨论，请参考[第3章](c03.xhtml)。
- en: '![Remember](images/remember.png) Because of this evaluate-the-expression-and-`then`-store-the-result
    behavior, JavaScript assignment statements shouldn’t be read as “variable `equals`
    expression.” Instead, it makes more sense to think of them as “variable `is set
    to` expression” or “variable `assumes the value given by` expression.” Reading
    assignment statements this way helps to reinforce the important concept that the
    expression result is being stored in the variable. ### Checking out another way
    to declare a variable: `const`'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![记住](images/remember.png) 由于这种“先计算表达式然后存储结果”的行为，JavaScript的赋值语句不应被理解为“变量`等于`表达式”。相反，更合理的理解是“变量`被设置为`表达式”或“变量`取值为`表达式”。这样理解赋值语句有助于强调一个重要的概念：表达式的结果被存储在变量中。###
    另一种声明变量的方式：`const`'
- en: The word `variable` implies that the value assigned to a variable is allowed
    to `vary`，which is the case for most variables you declare. Most, but not all.
    Sometimes your scripts will need to use a value that remains constant. For example,
    suppose you’re building a calculator that converts miles to kilometers. The conversion
    factor is `1.60934`，and that value will remain constant throughout your script.
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: “变量”一词意味着赋值给变量的值是可以“变化”的，这对于大多数你声明的变量是成立的。大多数，但不是全部。有时你的脚本需要使用一个保持不变的值。例如，假设你正在构建一个将英里转换为公里的计算器。转换因子是`1.60934`，这个值在你的脚本中将始终保持不变。
- en: It’s good programming practice to store such values in a variable for easier
    reading. However, if you use `let` for this declaration, you run the risk of accidentally
    changing the value somewhere in your code because variables declared with `let`
    can change.
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 将此类值存储在变量中以便更易于阅读是良好的编程实践。然而，如果你使用`let`进行声明，你就有可能在代码的其他地方不小心更改该值，因为用`let`声明的变量是可以修改的。
- en: 'To avoid accidentally changing a value that you want to remain constant, you
    can declare the variable using the `const` keyword instead. Here’s the general
    syntax:'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为了避免不小心更改你希望保持不变的值，你可以使用`const`关键字声明变量。下面是一般语法：
- en: '`const variableName = value;`'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const variableName = value;`'
- en: 'Note that, unlike with `let`，you must assign a value to the variable when you
    declare it with `const`. Here’s an example that declares a variable named `milesToKilometers`
    and assigns it the value `1.60934`:'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 请注意，与`let`不同，使用`const`声明变量时，必须在声明时为变量赋值。这里有一个例子，声明一个名为`milesToKilometers`的变量，并将其值设为`1.60934`：
- en: '`const milesToKilometers = 1.60934;`'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`const milesToKilometers = 1.60934;`'
- en: '![Remember](images/remember.png) 在变量的值必须永远不变的情况下，使用`const`而不是`let`是否有实际优势？是的，有两个相当不错的理由：'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![记住](images/remember.png) 在变量的值必须永远不变的情况下，使用`const`而不是`let`是否有实际优势？是的，有两个相当不错的理由：'
- en: 使用`const`关键字提醒您正在处理一个不可更改的值，这有助于您记住不为该变量分配新值。
  id: totrans-45
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 使用`const`关键字提醒您正在处理一个不可更改的值，这有助于您记住不为该变量分配新值。
- en: 如果您尝试更改用`const`声明的变量的值，您将产生一个错误，这也是提醒您该变量的值不应被更改的另一种方式。
  id: totrans-46
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 如果您尝试更改用`const`声明的变量的值，您将产生一个错误，这也是提醒您该变量的值不应被更改的另一种方式。
- en: '![Tip](images/tip.png) 鉴于这些优势，许多JavaScript程序员用`const`声明每个变量，仅在知道变量会变化时使用`let`。随着代码的进展，如果您发现`const`变量需要更改，您可以回去将`const`改为`let`。
    ### 在语句中使用变量'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![提示](images/tip.png) 鉴于这些优势，许多JavaScript程序员用`const`声明每个变量，仅在知道变量会变化时使用`let`。随着代码的进展，如果您发现`const`变量需要更改，您可以回去将`const`改为`let`。
    ### 在语句中使用变量'
- en: 在声明并赋值变量后，您可以在其他语句中使用该变量。当浏览器遇到该变量时，它会访问计算机的内存，检索变量的当前值，然后将该值替换到语句中。以下代码提供了一个示例：
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在声明并赋值变量后，您可以在其他语句中使用该变量。当浏览器遇到该变量时，它会访问计算机的内存，检索变量的当前值，然后将该值替换到语句中。以下代码提供了一个示例：
- en: '`let interestRate = 0.06; interestRate = interestRate / 12; document.write(interestRate);`'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`let interestRate = 0.06; interestRate = interestRate / 12; document.write(interestRate);`'
- en: 该代码声明了一个名为`interestRate`的变量，值为`0.06`；然后将该值除以12并将结果存储在变量中。`document.write()`语句随后显示该变量的当前值，如[图
    2-1](#c02-fig-0001)所示。
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 该代码声明了一个名为`interestRate`的变量，值为`0.06`；然后将该值除以12并将结果存储在变量中。`document.write()`语句随后显示该变量的当前值，如[图
    2-1](#c02-fig-0001)所示。
- en: '![A snapshot displays the browser substituting the current value of a variable.
    The value given is, 0.005.](images/9781394263219-fg0201.png)'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![一张快照显示浏览器替换当前变量的值。给定的值是，0.005。](images/9781394263219-fg0201.png)'
- en: '[FIGURE 2-1:](#rc02-fig-0001) 浏览器替换当前变量的值。'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[图 2-1:](#rc02-fig-0001) 浏览器替换当前变量的值。'
- en: 以下代码展示了一个略微不同的示例：
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下代码展示了一个略微不同的示例：
- en: '`let firstName; firstName = prompt("Please tell me your first name:"); document.write("Welcome
    to my website, " + firstName);`'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`let firstName; firstName = prompt("Please tell me your first name:"); document.write("Welcome
    to my website, " + firstName);`'
- en: 该脚本使用`prompt()`方法（稍后会解释）询问用户输入他们的名字，如[图 2-2](#c02-fig-0002)所示。当用户点击确定时，他们的名字存储在`firstName`变量中。该脚本随后使用`document.write()`语句显示一条个性化的欢迎消息，使用`firstName`变量的值，如[图
    2-3](#c02-fig-0003)所示。
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 该脚本使用`prompt()`方法（稍后会解释）询问用户输入他们的名字，如[图 2-2](#c02-fig-0002)所示。当用户点击确定时，他们的名字存储在`firstName`变量中。该脚本随后使用`document.write()`语句显示一条个性化的欢迎消息，使用`firstName`变量的值，如[图
    2-3](#c02-fig-0003)所示。
- en: '![A snapshot displays the script first prompts for the user’s first name. The
    name given is, Alphonse.](images/9781394263219-fg0202.png)'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![一张快照显示脚本首先提示用户输入他们的名字。给定的名字是，Alphonse。](images/9781394263219-fg0202.png)'
- en: '[FIGURE 2-2:](#rc02-fig-0002) 该脚本首先提示用户输入他们的名字。'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[图 2-2:](#rc02-fig-0002) 该脚本首先提示用户输入他们的名字。'
- en: '![A snapshot displays the script uses the name to display a personalized welcome
    message. The message reads, welcome to my website, Alphonse.](images/9781394263219-fg0203.png)'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![一张快照显示脚本使用名字来显示个性化的欢迎消息。消息内容是，欢迎来到我的网站，Alphonse。](images/9781394263219-fg0203.png)'
- en: '[FIGURE 2-3:](#rc02-fig-0003) 该脚本然后使用该名字显示个性化的欢迎消息。'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[图 2-3:](#rc02-fig-0003) 该脚本然后使用该名字显示个性化的欢迎消息。'
- en: '![Remember](images/remember.png) 当您需要从用户那里获取数据时，运行`prompt()`方法：'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![记住](images/remember.png) 当您需要从用户那里获取数据时，运行`prompt()`方法：'
- en: '`prompt(string, default);`'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`prompt(string, default);`'
- en: 'Here’s what the various parts are:'
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下是各个部分的解释：
- en: '`string`: A string that instructs the user what to enter into the prompt box.'
  id: totrans-63
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`string`：一个字符串，提示用户在提示框中输入内容。'
- en: '`default`: An optional string that specifies the initial value that appears
    in the prompt box.'
  id: totrans-64
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`default`：一个可选的字符串，指定提示框中显示的初始值。'
- en: 'The `prompt()` method always returns a value:'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`prompt()` 方法总是返回一个值：'
- en: If the user clicks OK, `prompt()` returns the value entered into the prompt
    text box.
  id: totrans-66
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 如果用户点击确定，`prompt()` 返回输入的值。
- en: 'If the user clicks Cancel, `prompt()` returns `null`.  ## Naming Variables:
    Rules and Best Practices'
  id: totrans-67
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '如果用户点击取消，`prompt()` 返回 `null`。 ## 命名变量：规则和最佳实践'
- en: If you want to write clear, easy-to-follow, and easy-to-debug scripts (and who
    doesn’t?), you can go a long way toward that goal by giving careful thought to
    the names you use for your variables. This section helps by running through the
    rules you need to follow and by giving you some tips and guidelines for creating
    good variable names.
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果您想编写清晰、易于跟踪和调试的脚本（谁不想呢？），通过仔细考虑变量名称，您可以在很大程度上朝着这一目标迈进。本节通过列出您需要遵循的规则，并为您提供一些创建良好变量名称的技巧和指南，帮助您实现这一目标。
- en: '### Rules for naming variables'
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '### 变量命名规则'
- en: 'JavaScript has only a few rules for variable names:'
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: JavaScript 对变量名称只有少数几个规则：
- en: The first character must be a letter or an underscore (`_`). You can’t use a
    number as the first character.
  id: totrans-71
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 第一个字符必须是字母或下划线（`_`）。不能使用数字作为第一个字符。
- en: The rest of the variable name can include any letter, any number, or the underscore.
    You can’t use any other characters, including spaces, symbols, and punctuation
    marks.
  id: totrans-72
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 变量名称的其余部分可以包含任何字母、数字或下划线。不能使用其他字符，包括空格、符号和标点符号。
- en: As with the rest of JavaScript, variable names are case sensitive. That is,
    a variable named `InterestRate` is treated as an entirely different variable than
    one named `interestRate`.
  id: totrans-73
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 与 JavaScript 其他部分一样，变量名是区分大小写的。也就是说，名为`InterestRate`的变量被视为与名为`interestRate`的变量完全不同。
- en: There’s no limit to the length of the variable name.
  id: totrans-74
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 变量名的长度没有限制。
- en: 'You can’t use one of JavaScript’s `reserved words` as a variable name (such
    as `let`, `const`, `var`, `alert`, or `prompt`). All programming languages have
    a supply of words that are used internally by the language and that can’t be used
    for variable names, because doing so would cause confusion (or worse).  ### Ideas
    for good variable names'
  id: totrans-75
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 你不能将 JavaScript 的`reserved words`（保留字）用作变量名（例如`let`、`const`、`var`、`alert`或`prompt`）。所有编程语言都有一组由语言内部使用的词汇，不能用作变量名，因为这样做会引起混淆（甚至更糟）。###
    好的变量名建议
- en: 'The process of declaring a variable doesn’t take much thought, but that doesn’t
    mean you should just type in any old variable name that comes to mind. Take a
    few extra seconds to come up with a good name by following these guidelines:'
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 声明变量的过程不需要太多思考，但这并不意味着你可以随便输入任何一个想到的变量名。花几秒钟按照以下准则为变量起个好名字：
- en: Make your names descriptive. Sure, using names that are just a few characters
    long makes them easier to type, but I guarantee you that you won’t remember what
    the variables represent when you look at the script down the road. For example,
    if you want a variable to represent an account number, use `accountNumber` or
    `accountNum` instead of, say, `acnm` or `accnum`.
  id: totrans-77
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 使变量名具有描述性。当然，使用几个字符的变量名让它们更容易输入，但我敢保证，当你以后回看脚本时，你不会记得这些变量代表的是什么意思。例如，如果你希望一个变量代表账户号码，使用`accountNumber`或`accountNum`而不是`acnm`或`accnum`。
- en: '![Remember](images/remember.png)Mostly avoid single-letter names. Although
    it’s best to avoid single-letter variable names, such short names are accepted
    in some places, such as when constructing loops, as described in [Chapter 4](c04.xhtml).'
  id: totrans-78
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '![记住](images/remember.png)尽量避免使用单个字母的变量名。虽然最好避免使用单个字母的变量名，但在某些情况下，这样的短变量名是可以接受的，例如在构建循环时，如[第4章](c04.xhtml)中所描述的。'
- en: Use multiple words with no spaces. The best way to create a descriptive variable
    name is to use multiple words. However, because JavaScript doesn’t take kindly
    to spaces in names, you need some way of separating the words to keep the name
    readable. The two standard conventions for using multi-word variable names are
    `camelCase` where you cram the words together and capitalize all but the first
    word (for example, `lastName`), or to separate each word with an underscore (for
    example, `last_name`). I prefer the former style, so I use it throughout this
    book.
  id: totrans-79
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 使用多个单词且不含空格。创建描述性变量名的最佳方法是使用多个单词。然而，由于 JavaScript 不允许变量名中包含空格，你需要某种方式来分隔单词，以保持名称的可读性。使用多个单词的标准约定有两种：一种是`camelCase`，将单词组合在一起并将除了第一个单词外的所有单词首字母大写（例如，`lastName`）；另一种是用下划线分隔每个单词（例如，`last_name`）。我更喜欢前者，因此在本书中我采用了这种风格。
- en: Use separate naming conventions. Use one naming convention for JavaScript variables
    and a different one for HTML identifiers and CSS classes. For example, if you
    use `camelCase` for multiword JavaScript variables, use dashes to separate words
    for `id` values and class names.
  id: totrans-80
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 使用不同的命名约定。为 JavaScript 变量使用一种命名约定，为 HTML 标识符和 CSS 类使用另一种命名约定。例如，如果你为 JavaScript
    变量使用`camelCase`，那么对于`id`值和类名应使用连字符分隔单词。
- en: Differentiate your variable names from JavaScript keywords. Try to make your
    variable names look as different from JavaScript’s keywords and other built-in
    terms (such as `alert`) as possible. Differentiating variable names helps avoid
    the confusion that can arise when you look at a term and you can’t remember if
    it’s a variable or a JavaScript word.
  id: totrans-81
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 将你的变量名与 JavaScript 的关键字区分开。尽量让你的变量名与 JavaScript 的关键字和其他内置术语（如`alert`）看起来尽可能不同。区分变量名有助于避免当你看到某个词时，记不清它是变量名还是
    JavaScript 关键字的困惑。
- en: 'Don’t make your names too long. Although short, cryptic variable names are
    to be shunned in favor of longer, descriptive names, that doesn’t mean you should
    be using entire sentences. Extremely long names are inefficient because they take
    so long to type, and they’re dangerous because the longer the name, the more likely
    you are to make a typo. Names of 2 to 4 words and 8 to 20 characters should be
    all you need.  '
  id: totrans-82
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 不要让你的变量名过长。虽然应该避免使用简短且晦涩的变量名，倾向于使用较长且描述性强的变量名，但这并不意味着你应该使用完整的句子。极长的变量名效率低，因为输入起来需要很长时间，而且它们也更容易出错，因为变量名越长，出错的可能性越大。2到4个单词，8到20个字符的名字应该足够了。
- en: 'In programming, a variable’s `data type` specifies what kind of data is stored
    within the variable. The data type is a crucial idea because it determines not
    only how two or more variables are combined (for example, mathematically), but
    also whether they can be combined at all. `Literals` are a special class of data
    type, and they cover those values that are fixed (even if only temporarily). For
    example, consider the following variable assignment statement:'
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在编程中，变量的`数据类型`指定了变量中存储的数据类型。数据类型是一个至关重要的概念，因为它不仅决定了如何组合两个或多个变量（例如数学运算），还决定了它们是否可以组合在一起。`字面量`是数据类型中的一种特殊类别，它表示那些固定的值（即使是暂时固定的）。例如，考虑以下的变量赋值语句：
- en: '`let todaysQuestion = "What color is your parachute?";`'
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`let todaysQuestion = "你的降落伞是什么颜色？";`'
- en: 'Here, the text `"What color is your parachute?"` is a literal string value.
    JavaScript supports three kinds of literal data types: numeric, string, and Boolean.
    The next three sections discuss each type.'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里，文本`"你的降落伞是什么颜色？"`是一个字面量字符串值。JavaScript 支持三种类型的字面量数据类型：数值型、字符串型和布尔型。接下来的三个部分将讨论每种类型。
- en: '### Working with numeric literals'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '### 使用数值字面量'
- en: 'Unlike many other programming languages, JavaScript treats all numbers the
    same, so you don’t have to do anything special when working with the two basic
    numeric literals, which are integers and floating-point numbers:'
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 与许多其他编程语言不同，JavaScript 将所有数字视为相同，因此在处理两种基本数值字面量（整数和浮动点数）时，无需做任何特殊处理：
- en: '**Integers:** These are numbers that don’t have a fractional or decimal part.
    So, you represent an integer using a sequence of one or more digits, as in these
    examples: `0`, `42`, `2001`, `-20`'
  id: totrans-88
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '**整数：** 这些是没有小数部分的数字。因此，你通过一串一个或多个数字来表示整数，如下例所示：`0`，`42`，`2001`，`-20`'
- en: '**Floating-point numbers:** These are numbers that do have a fractional or
    decimal part. Therefore, you represent a floating-point number by first writing
    the integer part, followed by a decimal point, followed by the fractional or decimal
    part, as in these examples: `0.07 3.14159 -16.6666667 7.6543e+21 1.234567E-89`'
  id: totrans-89
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '**浮动点数：** 这些是具有小数部分的数字。因此，你可以通过先写整数部分，接着写一个小数点，然后写小数部分来表示浮动点数，例如：`0.07 3.14159
    -16.6666667 7.6543e+21 1.234567E-89`'
- en: '#### Exponential notation'
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '#### 指数表示法'
- en: The last two floating-point examples require a bit more explanation. These two
    use `exponential notation`，which is an efficient way to represent really large
    or really small floating-point numbers. `Exponential notation` uses an `e` (or
    `E`) followed by the `exponent`，which is a number preceded by a plus sign (`+`)
    or a minus sign (`-`)。
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 最后两个浮动点数的例子需要进一步解释。这两个例子使用了`指数表示法`，它是一种有效表示非常大或非常小的浮动点数的方法。`指数表示法`使用一个`e`（或`E`），后跟一个`指数`，该指数是一个数字，前面可以有加号（`+`）或减号（`-`）。
- en: 'You multiply the first part of the number (that is, the part before the `e`
    or `E`) by `10` to the power of the exponent. Here’s an example:'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你将数字的第一部分（即在`e`或`E`之前的部分）乘以`10`的指数次方。以下是一个例子：
- en: '`9.87654e+5;`'
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`9.87654e+5;`'
- en: The exponent is `5`，and `10` to the power of `5` is `100,000`。So, multiplying
    `9.87654` by `100,000` results in the value `987,654`。
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 指数是`5`，`10`的5次方是`100,000`。所以，将`9.87654`乘以`100,000`得到的值是`987,654`。
- en: 'Here’s another example:'
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里是另一个例子：
- en: '`3.4567e-4;`'
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`3.4567e-4;`'
- en: 'The exponent is `-4`，and `10` to the power of `-4` is `0.0001`。So, multiplying
    `3.4567` by `0.0001` results in the value `.00034567`。  #### Hexadecimal integer
    values'
  id: totrans-97
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '指数是`-4`，`10`的`-4`次方是`0.0001`。所以，将`3.4567`乘以`0.0001`得到的值是`.00034567`。 #### 十六进制整数值'
- en: You’ll likely deal with the usual decimal (base-10) number system throughout
    most of your JavaScript career. However, just in case you have cause to work with
    hexadecimal (base-16) numbers, this section shows you how JavaScript deals with
    them.
  id: totrans-98
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你在 JavaScript 编程过程中可能会大多数时间使用常规的十进制（基数为 10）数字系统。然而，万一你需要处理十六进制（基数为 16）数字，本节会介绍
    JavaScript 如何处理它们。
- en: 'The hexadecimal number system uses the digits `0` through `9` and the letters
    `A` through `F` (or `a` through `f`)，where these letters represent the decimal
    numbers `10` through `15`。So, what in the decimal system would be `16` is actually
    `10` in hexadecimal。To specify a hexadecimal number in JavaScript，begin the number
    with a `0x` (or `0X`)，as shown in the following examples:'
  id: totrans-99
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 十六进制数字系统使用数字`0`到`9`和字母`A`到`F`（或`a`到`f`），其中这些字母代表十进制的`10`到`15`。因此，在十进制系统中表示的`16`在十六进制中实际上是`10`。要在
    JavaScript 中指定一个十六进制数，需以`0x`（或`0X`）开头，例子如下：
- en: '`0x23; 0xff; 0X10ce;`  ### Working with string literals'
  id: totrans-100
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`0x23; 0xff; 0X10ce;`  ### 使用字符串字面量'
- en: 'A `string literal` is a sequence of one or more letters, numbers, or punctuation
    marks, enclosed either in double quotation marks (`"`) or single quotation marks
    (`''`)。Here are some examples:'
  id: totrans-101
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`string literal` 是由一个或多个字母、数字或标点符号组成的序列，通常被双引号（`"`）或单引号（`''`）括起来。以下是一些示例：'
- en: '`"JavaScript Essentials"; ''August 23, 1959''; ""; "What''s the good word?";`'
  id: totrans-102
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`"JavaScript Essentials"; ''August 23, 1959''; ""; "What''s the good word?";`'
- en: '![Remember](images/remember.png) The string `""` (or `''''` — two consecutive
    single quotation marks) is called the `null string`。It represents a string that
    doesn’t contain any characters。'
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![记住](images/remember.png) 字符串 `""`（或 `''''` — 两个连续的单引号）被称为 `null string`（空字符串）。它表示一个不包含任何字符的字符串。'
- en: '#### Using quotation marks within strings'
  id: totrans-104
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '#### 在字符串中使用引号'
- en: 'The final example in the previous section shows that it’s okay to insert one
    or more instances of one of the quotation marks (such as `''`) inside a string
    that’s enclosed by the other quotation mark (such as `"`). Being able to nest
    quotation marks comes in handy when you need to embed one string inside another，which
    is very common (particularly when using bits of JavaScript within HTML tags)。Here’s
    an example:'
  id: totrans-105
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 上一节的最终示例表明，在一个由某种引号（如 `"`）括起来的字符串内部，插入另一个引号（如 `'`）是可以的。能够嵌套引号在需要将一个字符串嵌入到另一个字符串中的时候非常有用，这种情况非常常见（尤其是在HTML标签中使用JavaScript代码时）。以下是一个示例：
- en: '`onsubmit="processForm(''testing'')";`'
  id: totrans-106
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`onsubmit="processForm(''testing'')";`'
- en: 'However, it’s illegal to insert in a string one or more instances of the same
    quotation mark that encloses the string, as in this example:'
  id: totrans-107
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，在字符串中插入一个或多个与字符串所使用的引号相同的引号是非法的，如下例所示：
- en: '`"This is "illegal" in JavaScript.";`  #### Understanding escape sequences'
  id: totrans-108
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`"This is "illegal" in JavaScript.";`  #### 理解转义序列'
- en: 'What if you must include, say, a double quotation mark within a string that’s
    enclosed by double quotation marks? Having to nest the same type of quotation
    mark is rare, but it is possible if you precede the double quotation mark with
    a backslash (`\`), like this:'
  id: totrans-109
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你必须在一个由双引号括起来的字符串中插入一个双引号，怎么办呢？虽然这种嵌套相同类型引号的情况很少，但如果你在双引号前加上反斜杠（`\`），这种情况是可能的，像这样：
- en: '`"The double quotation mark (\") encloses this string.";`'
  id: totrans-110
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`"The double quotation mark (\") encloses this string.";`'
- en: The `\"` combination is called an `escape sequence.` You can combine the backslash
    with a number of other characters to form other escape sequences, and each one
    enables the browser to represent a character that, by itself, would be illegal
    or not representable otherwise. [Table 2-1](#c02-tbl-0001) lists the most commonly
    used escape sequences.
  id: totrans-111
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`\"` 组合被称为 `escape sequence`（转义序列）。你可以将反斜杠与其他多个字符组合，形成其他转义序列，每个转义序列使浏览器能够表示一个字符，这个字符本身如果单独存在，将是非法的或无法表示的。[表
    2-1](#c02-tbl-0001)列出了最常用的转义序列。'
- en: '[TABLE 2-1](#rc02-tbl-0001) Common JavaScript Escape Sequences'
  id: totrans-112
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[表 2-1](#rc02-tbl-0001) 常见的 JavaScript 转义序列'
- en: '| **Escape Sequence** | **Character It Represents** |'
  id: totrans-113
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| **转义序列** | **表示的字符** |'
- en: '| --- | --- |'
  id: totrans-114
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `\''` | Single quotation mark |'
  id: totrans-115
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `\''` | 单引号 |'
- en: '| `\"` | Double quotation mark |'
  id: totrans-116
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `\"` | 双引号 |'
- en: '| `\b` | Backspace |'
  id: totrans-117
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `\b` | 退格符 |'
- en: '| `\f` | Form feed |'
  id: totrans-118
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `\f` | 换页符 |'
- en: '| `\n` | New line |'
  id: totrans-119
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `\n` | 新行 |'
- en: '| `\r` | Carriage return |'
  id: totrans-120
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `\r` | 回车符 |'
- en: '| `\t` | Tab |'
  id: totrans-121
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `\t` | 制表符 |'
- en: '| `\\` | Backslash |'
  id: totrans-122
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| `\\` | 反斜杠 |'
- en: The following code shows an example script that uses the `\n` escape sequence
    to display text on multiple lines with an alert box.
  id: totrans-123
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下代码展示了一个示例脚本，使用 `\n` 转义序列在警告框中显示多行文本。
- en: '`alert("This is line 1.\nSo what. This is line 2.");`'
  id: totrans-124
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`alert("This is line 1.\nSo what. This is line 2.");`'
- en: '[Figure 2-4](#c02-fig-0004) shows the result.'
  id: totrans-125
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[图 2-4](#c02-fig-0004) 展示了结果。'
- en: '![A snapshot of the webpage of paulmcfederies. The message box reads, This
    is line 1\. So what. This is line 2.](images/9781394263219-fg0204.png)'
  id: totrans-126
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![paulmcfederies 网站的快照。消息框显示：这是第1行。那又怎样。这是第2行。](images/9781394263219-fg0204.png)'
- en: '[FIGURE 2-4:](#rc02-fig-0004) Using the `\n` escape sequence enables you to
    format text so that it displays on different lines.'
  id: totrans-127
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[图 2-4:](#rc02-fig-0004) 使用 `\n` 转义序列可以使文本按不同的行显示。'
- en: 'To learn how to combine two or more string literals, check out [Chapter 3](c03.xhtml).
    Also, JavaScript has a nice collection of string manipulation features, which
    I discuss in [Chapter 8](c08.xhtml).  ### Working with Boolean literals'
  id: totrans-128
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '要学习如何将两个或更多的字符串字面量结合起来，请查看[第3章](c03.xhtml)。此外，JavaScript 还提供了丰富的字符串操作功能，详细内容请参见[第8章](c08.xhtml)。  ###
    使用布尔字面量'
- en: 'Booleans are the simplest of all the literal data types because they can assume
    only one of two values: `true` or `false`. That simplicity may make it seem as
    though Booleans aren’t particularly useful, but the capability to test whether
    a particular variable or condition is true or false is invaluable in JavaScript
    programming.'
  id: totrans-129
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 布尔值是所有字面量数据类型中最简单的一种，因为它们只能取两种值之一：`true`或`false`。这种简单性可能让人觉得布尔值并不特别有用，但在JavaScript编程中，能够测试某个变量或条件是否为真或假是非常宝贵的能力。
- en: 'You can assign Boolean literals directly to a variable, like this:'
  id: totrans-130
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你可以像这样直接将布尔字面量赋值给变量：
- en: '`taskCompleted = true;`'
  id: totrans-131
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`taskCompleted = true;`'
- en: 'Alternatively, you can work with Boolean values implicitly using expressions:'
  id: totrans-132
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 或者，你可以通过表达式隐式地使用布尔值：
- en: '`currentMonth === "August"`'
  id: totrans-133
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`currentMonth === "August"`'
- en: 'The comparison expression `currentMonth === "August"` asks the following: Does
    the value of the `currentMonth` variable equal the string `"August"`? If it does,
    the expression evaluates to the Boolean value `true`; if it doesn’t, the expression
    evaluates to `false`. I discuss much more about comparison expressions in [Chapter
    3](c03.xhtml).'
  id: totrans-134
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 比较表达式`currentMonth === "August"`问的是：`currentMonth`变量的值是否等于字符串`"August"`？如果相等，表达式的结果为布尔值`true`；如果不相等，表达式的结果为`false`。我在[第3章](c03.xhtml)中详细讨论了更多关于比较表达式的内容。
