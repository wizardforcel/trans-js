- en: Big O of Space Complexity
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 空间复杂度的大O
- en: Interestingly, computer scientists use Big O notation to describe space complexity
    just as they do for time complexity.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 有趣的是，计算机科学家使用大O符号来描述空间复杂度，就像他们描述时间复杂度一样。
- en: 'Back when I introduced Big O notation in Chapter 3, [*O Yes! Big O Notation*](f_0031.xhtml#chp.big_o_notation),
    I described Big O in terms of what I called the “key question.” For time complexity,
    the key question was this: if there are `N` data elements, how many steps will
    the algorithm take?'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当我在第三章介绍大O符号时，[*O Yes! 大O符号*](f_0031.xhtml#chp.big_o_notation)，我通过我所称之为“关键问题”来描述大O。对于时间复杂度，关键问题是：如果有`N`个数据元素，算法将需要多少步？
- en: To use Big O for space complexity, we just need to reframe the key question.
    When it comes to memory consumption, the key question becomes if there are `N`
    data elements, how many units of memory will the algorithm consume?
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为了使用大O表示空间复杂度，我们只需重新框定关键问题。当涉及到内存消耗时，关键问题变成：如果有`N`个数据元素，算法将消耗多少单位的内存？
- en: Here’s a simple example.
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是一个简单的例子。
- en: 'Let’s say we’re writing a function that accepts an array of strings and returns
    an array of those strings in ALL CAPS. For example, the function would accept
    an array like `["tuvi", "leah", "shaya", "rami", "yechiel"]` and return `["TUVI",
    "LEAH", "SHAYA", "RAMI", "YECHIEL"]`. Here’s one way we can write this function:'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 假设我们正在编写一个接受字符串数组并返回该数组所有字符串为大写的函数。例如，该函数接受数组`["tuvi", "leah", "shaya", "rami",
    "yechiel"]`，并返回`["TUVI", "LEAH", "SHAYA", "RAMI", "YECHIEL"]`。以下是我们可以编写该函数的一种方式：
- en: '| ​  | `function` makeUppercase(array) { |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` makeUppercase(array) { |'
- en: '| ​  | `const` newArray = []; |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` newArray = []; |'
- en: '| ​  |  |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `for` (`const` string `of` array) { |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`const` string `of` array) { |'
- en: '| ​  | `newArray.push(string.toUpperCase());` |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `newArray.push(string.toUpperCase());` |'
- en: '| ​  | `}` |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `}` |'
- en: '| ​  |  |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return` newArray; |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` newArray; |'
- en: '| ​  | `}` |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `}` |'
- en: In this `makeUppercase` function, we accept an array. We then create a brand-new
    array called `newArray` and fill it with uppercase versions of each string from
    the original array.
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个`makeUppercase`函数中，我们接受一个数组。然后我们创建一个全新的数组`newArray`，并用原数组中每个字符串的大写版本填充它。
- en: By the time this function is complete, we’ll have two arrays floating around
    in our computer’s memory. We have the original array, which contains `["tuvi",
    "leah", "shaya", "rami", "yechiel"]`, and we have `newArray`, which contains `["TUVI",
    "LEAH", "SHAYA", "RAMI", "YECHIEL"]`.
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当这个函数完成时，我们的计算机内存中将有两个数组。我们有原始数组，它包含`["tuvi", "leah", "shaya", "rami", "yechiel"]`，还有`newArray`，它包含`["TUVI",
    "LEAH", "SHAYA", "RAMI", "YECHIEL"]`。
- en: When we analyze this function in terms of space complexity, we can see that
    this function creates a brand-new array that contains `N` elements. This is in
    addition to the original array which also holds `N` elements.
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当我们从空间复杂度的角度分析这个函数时，可以看到这个函数创建了一个包含`N`个元素的全新数组。这是除了原始数组外的额外开销，原始数组也包含`N`个元素。
- en: 'So let’s return to our key question: if there are `N` data elements, how many
    units of memory will the algorithm consume?'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 所以让我们回到我们的关键问题：如果有`N`个数据元素，算法将消耗多少单位的内存？
- en: Because our function generated an additional `N` data elements (in the form
    of `newArray`), we’d say that this function has a space efficiency of `O(N)`.
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因为我们的函数生成了额外的`N`个数据元素（以`newArray`的形式），所以我们会说这个函数的空间效率是`O(N)`。
- en: 'The way this appears on the following graph should look familiar:'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在以下图表中，这种表现方式应该很熟悉：
- en: '![images/dealing_with_space_constraints/space_graph.png](images/dealing_with_space_constraints/space_graph.png)'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/dealing_with_space_constraints/space_graph.png](images/dealing_with_space_constraints/space_graph.png)'
- en: Note that this graph is identical to the way we’ve depicted `O(N)` in graphs
    in previous chapters, with the exception that the vertical axis now represents
    memory consumed rather than time.
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 请注意，这个图表与我们在前几章中描绘的`O(N)`图表是相同的，唯一的例外是垂直轴现在表示消耗的内存，而不是时间。
- en: 'Now, let’s present an alternative `makeUppercase` function that is more memory-efficient:'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，让我们展示一个更节省内存的`makeUppercase`函数：
- en: '| ​  | `function` makeUppercase(array) { |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` makeUppercase(array) { |'
- en: '| ​  | `for` (`let` index = 0; index < array.length; index += 1) { |'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`let` index = 0; index < array.length; index += 1) { |'
- en: '| ​  | `array[index] = array[index].toUpperCase();` |'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `array[index] = array[index].toUpperCase();` |'
- en: '| ​  | `}` |'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `}` |'
- en: '| ​  |  |'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return` array; |'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` array; |'
- en: '| ​  | `}` |'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `}` |'
- en: In this second version, we don’t create any new arrays. Instead, we modify each
    value within the original array in place, replacing each string with an uppercase
    version of that string. We then return the modified array.
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个第二个版本中，我们不创建任何新的数组。相反，我们直接在原始数组中修改每个值，用该字符串的 uppercase 版本替换每个字符串。然后我们返回修改后的数组。
- en: This is a drastic improvement in terms of memory consumption since our new function
    doesn’t consume any additional memory at all.
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 从内存消耗的角度来看，这是一个显著的改进，因为我们新的函数根本不消耗任何额外内存。
- en: How do we describe this in terms of `Big O` notation?
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们如何用 `Big O` 符号来描述这一点呢？
- en: Recall that with time complexity, an `O(1)` algorithm was one whose speed remained
    constant no matter how large the data. Similarly, with space complexity, `O(1)`
    means that the memory consumed by an algorithm is constant no matter how large
    the data.
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 回想一下，在时间复杂度中，`O(1)` 的算法是指无论数据多大，其速度保持不变。同样，在空间复杂度中，`O(1)` 意味着算法消耗的内存在数据大小变化时是恒定的。
- en: Our revised `makeUppercase` function consumes a constant amount of additional
    space (zero!) no matter whether the original array contains four elements or one
    hundred. Because of this, this function is said to have a space efficiency of
    `O(1)`.
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们修订后的 `makeUppercase` 函数在原始数组包含四个元素或一百个元素时，消耗的额外空间是一个恒定的量（零！）。因此，这个函数被认为具有
    `O(1)` 的空间效率。
- en: It’s worth emphasizing that when using `Big O` to describe space complexity,
    we’re only counting the new data the algorithm is generating. Even our second
    `makeUppercase` function deals with `N` elements of data in the form of the array
    passed into the function. However, we’re not factoring those `N` elements into
    our `Big O` description, since the original array exists in any case and we’re
    only focused on the extra space the algorithm consumes. This extra space is more
    formally known as auxiliary space.
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 值得强调的是，在使用 `Big O` 描述空间复杂度时，我们只计算算法生成的新数据。即使我们的第二个 `makeUppercase` 函数处理 `N`
    个元素的数据，这些数据以传入函数的数组形式存在。然而，我们并没有将这些 `N` 个元素纳入我们的 `Big O` 描述，因为原始数组无论如何都是存在的，我们只关注算法消耗的额外空间。这额外的空间更正式地称为辅助空间。
- en: However, it’s good to know that there are some references that include the original
    input when calculating the space complexity, and that’s fine. We’re not including
    it, and whenever you see space complexity described in another resource, you need
    to determine whether it’s including the original input.
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，值得注意的是，有些参考文献在计算空间复杂度时会包括原始输入，这也是可以的。我们没有包括它，每当你看到其他资源中描述空间复杂度时，你需要判断它是否包括原始输入。
- en: 'Let’s now compare the two versions of `makeUppercase` in both time and space
    complexity:'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在我们来比较两个 `makeUppercase` 版本在时间和空间复杂度上的表现：
- en: '| Version | Time Complexity | Space Complexity |'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 版本 | 时间复杂度 | 空间复杂度 |'
- en: '| --- | --- | --- |'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Version #1 | `O(N)` | `O(N)` |'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 版本 #1 | `O(N)` | `O(N)` |'
- en: '| Version #2 | `O(N)` | `O(1)` |'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 版本 #2 | `O(N)` | `O(1)` |'
- en: Both versions are `O(N)` in time complexity, since they take `N` steps for `N`
    data elements. However, the second version is more memory-efficient, as it is
    `O(1)` in space complexity compared to the first version’s `O(N)`.
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 两个版本的时间复杂度都是 `O(N)`，因为它们对 `N` 个数据元素需要 `N` 步。然而，第二个版本在内存使用上更为高效，相较于第一个版本的 `O(N)`，它的空间复杂度是
    `O(1)`。
- en: 'It turns out that Version #2 is more efficient than Version #1 in terms of
    space while not sacrificing any speed, which is a nice win.'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '结果是，版本 #2 在空间上比版本 #1 更高效，同时没有牺牲任何速度，这是一个不错的胜利。'
