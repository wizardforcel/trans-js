- en: '| Recipe 58 | Validating Canadian Postal Codes |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: '| 配方58 | 验证加拿大邮政编码 |'
- en: Task
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务
- en: Let’s suppose you have a specialized shop catering to your Canadian customers,
    and you want to ensure that the postal code entered by users is a valid Canadian
    postal code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一家专门面向加拿大客户的商店，你希望确保用户输入的邮政编码是有效的加拿大邮政编码。
- en: In Canada, a postal code is a combination of six characters that includes both
    letters and digits. The format of the code follows A1A 1A1, where the letter A
    represents any letter of the alphabet and the number 1 represents any digit. The
    third and fourth characters are separated by a single space.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在加拿大，邮政编码由六个字符组成，包含字母和数字。编码的格式为A1A 1A1，其中字母A代表字母表中的任意字母，数字1代表任意数字。第三个和第四个字符之间由一个空格隔开。
- en: For example, the postal code for the CN Tower in Toronto is M5V 1J2\. You want
    to create a regex matching the format of that postal code, but not invalid patterns
    like A1A 1A1A, 111 111, A1A1A1, A1A-A1A, or 12A 1B1.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，多伦多CN塔的邮政编码是M5V 1J2。你希望创建一个正则表达式来匹配这种格式的邮政编码，但不包括无效的模式，如A1A 1A1A、111 111、A1A1A1、A1A-A1A或12A
    1B1。
- en: Solution
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use the following function:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下函数：
- en: '[part_3/validating_ca_postal/ca_postal_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_3/validating_ca_postal/ca_postal_ex1.js)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_3/validating_ca_postal/ca_postal_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_3/validating_ca_postal/ca_postal_ex1.js)'
- en: '|   | **function** isValidPostalCode(postalCode) { |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '|   | **function** isValidPostalCode(postalCode) { |'
- en: '|   | **const** re = */^**(?!**.***[**DFIOQU**])[**A-VXY**][**0-9**][**A-Z**]\s[**0-9**][**A-Z**][**0-9**]**$/*;
    |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** re = */^**(?!**.***[**DFIOQU**])[**A-VXY**][**0-9**][**A-Z**]\s[**0-9**][**A-Z**][**0-9**]**$/*;
    |'
- en: '|   | **return** re.test(postalCode); |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '|   | **return** re.test(postalCode); |'
- en: '|   | } |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '|   | } |'
- en: '|   |  |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | isValidPostalCode(*"A1A 1A1A"*); *// → false* |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '|   | isValidPostalCode(*"A1A 1A1A"*); *// → false* |'
- en: '|   | isValidPostalCode(*"111 111"*); *// → false* |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '|   | isValidPostalCode(*"111 111"*); *// → false* |'
- en: '|   | isValidPostalCode(*"A1A1A1"*); *// → false* |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '|   | isValidPostalCode(*"A1A1A1"*); *// → false* |'
- en: '|   | isValidPostalCode(*"A1A-A1A"*); *// → false* |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '|   | isValidPostalCode(*"A1A-A1A"*); *// → false* |'
- en: '|   | isValidPostalCode(*"12A 1B1"*); *// → false* |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '|   | isValidPostalCode(*"12A 1B1"*); *// → false* |'
- en: '|   | isValidPostalCode(*"M5V 1J2"*); *// → true* |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '|   | isValidPostalCode(*"M5V 1J2"*); *// → true* |'
- en: This code enables you to confirm whether a provided input conforms to the Canadian
    postal code format.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码帮助你确认提供的输入是否符合加拿大邮政编码格式。
- en: Discussion
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论
- en: The regex in this recipe begins with a negative lookahead that prohibits the
    occurrence of D, F, I, O, Q, or U at any position within the string. Because of
    their resemblance to other characters, the letters D, F, I, O, Q, and U are excluded
    from Canadian postal codes. This is because D, I, and O can be confused with 0,
    1, and 0 respectively, while F, Q, and U can be mistaken for E, 0, and V.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方中的正则表达式首先使用了一个负向前瞻，禁止在字符串中的任何位置出现D、F、I、O、Q或U。因为这些字母与其他字符相似，所以在加拿大邮政编码中排除了D、F、I、O、Q和U。这是因为D、I和O可能与0、1和0混淆，而F、Q和U可能与E、0和V混淆。
- en: The pattern .* at the beginning of the negative lookahead tells the regex engine
    that the character type being sought can appear anywhere in the string, not just
    at the beginning.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式中的模式 .* 位于负向前瞻的开头，告诉正则引擎，所寻求的字符类型可以出现在字符串的任何位置，而不仅仅是在开头。
- en: Canadian postal codes cannot start with the letters W or Z. To ensure that the
    first character of the string is not W or Z, we use the character class [A-VXY].
    This tells the regex engine that the character must be any letter from A to V
    or X or Y, but not W or Z.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 加拿大邮政编码不能以字母 W 或 Z 开头。为了确保字符串的第一个字符不是 W 或 Z，我们使用字符类 [A-VXY]。这告诉正则引擎，字符必须是 A
    到 V、X 或 Y 中的任何字母，但不能是 W 或 Z。
- en: With the exception of the two aforementioned cases, Canadian postal codes follow
    a straightforward pattern of six alternating alphanumeric characters, with the
    option of a single space in the middle.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面提到的两种情况，加拿大的邮政编码遵循一个简单的模式，由六个交替的字母数字字符组成，中间可以有一个空格。
- en: 'Let’s dig a bit deeper into the pattern:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地分析这个模式：
- en: '|   | /^(?!.*[DFIOQU])[A-VXY][0-9][A-Z]\s[0-9][A-Z][0-9]$/ |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '|   | /^(?!.*[DFIOQU])[A-VXY][0-9][A-Z]\s[0-9][A-Z][0-9]$/ |'
- en: '|   |  |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | ● ^ asserts the position at start of the string |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '|   | ● ^ 确定字符串开始位置 |'
- en: '|   | ● (?!.*[DFIOQU]) negative lookahead: asserts the regex below doesn''t
    match |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '|   | ● (?!.*[DFIOQU]) 负向前瞻：确认以下正则表达式不匹配 |'
- en: '|   | ○ . matches any character (except for line terminators) |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ . 匹配任何字符（除了行终止符） |'
- en: '|   | ○ * matches the previous token between zero and unlimited times, as many
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ * 匹配前一个符号零次或无限次 |'
- en: '|   | times as possible |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '|   | 尽可能多次 |'
- en: '|   | ○ [DFIOQU] matches a single character in the list DFIOQU |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ [DFIOQU] 匹配列表 DFIOQU 中的单个字符 |'
- en: '|   | ● [A-VXY] matches a single character present in the list below |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '|   | ● [A-VXY] 匹配列表中存在的单个字符 |'
- en: '|   | ○ A-V matches a single character in the range between A and V |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ A-V 匹配 A 到 V 范围内的单个字符 |'
- en: '|   | ○ XY matches a single character in the list XY |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '|   | ○ XY 匹配列表 XY 中的单个字符 |'
- en: '|   | ● [0-9] matches a single character in the range between 0 and 9 |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '|   | ● [0-9] 匹配 0 到 9 范围内的单个字符 |'
- en: '|   | ● [A-Z] matches a single character in the range between A and Z |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '|   | ● [A-Z] 匹配 A 到 Z 范围内的单个字符 |'
- en: '|   | ● \s matches any whitespace character |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '|   | ● \s 匹配任何空白字符 |'
- en: '|   | ● [0-9] matches a single character in the range between 0 and 9 |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '|   | ● [0-9] 匹配 0 到 9 范围内的单个字符 |'
- en: '|   | ● [A-Z] matches a single character in the range between A and Z |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '|   | ● [A-Z] 匹配 A 到 Z 范围内的单个字符 |'
- en: '|   | ● [0-9] matches a single character in the range between 0 and 9 |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '|   | ● [0-9] 匹配 0 到 9 范围内的单个字符 |'
- en: '|   | ● $ asserts the position at the end of the string |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '|   | ● $ 确定字符串的结尾位置 |'
- en: 'To locate a Canadian postal code in a string, substitute ^ and $ with word
    boundaries (\b): /\b(?!.*[DFIOQU])[A-VXY][0-9][A-Z]\s[0-9][A-Z][0-9]\b/.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要在字符串中定位加拿大邮政编码，将 ^ 和 $ 替换为单词边界（\b）：/\b(?!.*[DFIOQU])[A-VXY][0-9][A-Z]\s[0-9][A-Z][0-9]\b/。
- en: By validating postal codes, you can avoid errors in address data, resulting
    in more efficient and reliable delivery of goods or services to the intended recipient.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过验证邮政编码，您可以避免地址数据中的错误，从而提高货物或服务交付到预期收件人的效率和可靠性。
