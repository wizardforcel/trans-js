- en: '`Chapter 19`'
  id: totrans-0
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: '`第19章`'
- en: '`Dealing with Space Constraints`'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`处理空间限制`'
- en: When analyzing the efficiency of various algorithms throughout this book, we’ve
    focused exclusively on how fast they run—that is, their `time complexity`. However,
    another measure of efficiency can be useful as well, which is how much memory
    an algorithm consumes. This measure is known as `space complexity`.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在本书中分析各种算法的效率时，我们专注于它们的运行速度——即它们的`时间复杂度`。然而，另一个效率的衡量标准也很有用，那就是算法消耗的内存量。这个标准被称为`空间复杂度`。
- en: '`Space complexity` becomes an important factor when memory is limited. If you
    have an enormous amount of data, or are programming for a small device with limited
    memory, `space complexity` can matter a lot.'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当内存有限时，`空间复杂度`成为一个重要因素。如果你有大量的数据，或者是在内存有限的小设备上编程，`空间复杂度`就显得尤为重要。
- en: In a perfect world, we’d always use algorithms that are both fast and memory-efficient.
    However, sometimes we can’t have both and we need to choose between the two. Each
    situation requires a careful analysis to know when we need to prioritize `speed`
    over `memory`, and `memory` over `speed`.
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在一个完美的世界里，我们总是会使用既快速又节省内存的算法。然而，有时候我们无法兼顾两者，需要在两者之间做出选择。每种情况都需要仔细分析，以了解何时需要优先考虑`速度`而不是`内存`，以及`内存`而不是`速度`。
