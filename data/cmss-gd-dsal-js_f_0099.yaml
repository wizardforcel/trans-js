- en: Reading Recursive Code
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 阅读递归代码
- en: 'It takes time and practice to get used to recursion, and you’ll ultimately
    learn two sets of skills: reading recursive code and writing recursive code. Reading
    recursive code is somewhat easier, so let’s get some practice with that first.'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 习惯于递归需要时间和练习，最终你会学会两套技能：阅读递归代码和编写递归代码。阅读递归代码相对简单，因此我们先来练习这个。
- en: 'We’ll do this by looking at another example: calculating factorials.'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们将通过看另一个例子来做这个：计算阶乘。
- en: A factorial is best illustrated with some examples.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 阶乘最好通过一些例子来说明。
- en: 'This is the factorial of 3:'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是3的阶乘：
- en: 3 * 2 * 1 = 6
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 3 * 2 * 1 = 6
- en: 'This is the factorial of 5:'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是5的阶乘：
- en: 5 * 4 * 3 * 2 * 1 = 120
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 5 * 4 * 3 * 2 * 1 = 120
- en: And so on and so forth.
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以此类推。
- en: 'Here’s a recursive implementation that returns a number’s factorial:'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是一个递归实现，它返回一个数的阶乘：
- en: '| ​  | `function` `factorial`(number) { |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` `factorial`(number) { |'
- en: '| ​  | `if` (number <= 1) { |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (number <= 1) { |'
- en: '| ​  | `return` 1; |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` 1; |'
- en: '| ​  | } `else` { |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } `else` { |'
- en: '| ​  | `return` number * `factorial`(number - 1); |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` number * `factorial`(number - 1); |'
- en: '| ​  | } |'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 'This code can look somewhat confusing at first glance. To walk through the
    code to see what it does, here’s the process I recommend:'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这段代码初看起来可能有些混乱。为了走查代码以查看它的功能，以下是我推荐的过程：
- en: Identify the base case.
  id: totrans-18
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 确定基本情况。
- en: Walk through the function for the base case.
  id: totrans-19
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 遍历基本情况的函数。
- en: Identify the next-to-last case. This is the case just before the base case,
    as I’ll demonstrate momentarily.
  id: totrans-20
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 确定倒数第二个情况。这是刚好在基本情况之前的情况，如我稍后将演示的那样。
- en: Walk through the function for the next-to-last case.
  id: totrans-21
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 遍历倒数第二个情况的函数。
- en: Repeat this process by identifying the case before the one you just analyzed
    and walking through the function for that case.
  id: totrans-22
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 通过识别你刚分析的情况之前的情况，并遍历该情况的函数，重复这个过程。
- en: 'Let’s apply this process to the preceding code. If we analyze the code, we’ll
    quickly notice that there are two paths. One path is where number is less than
    or equal to 1, and the other path is where number is greater than 1:'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们将这个过程应用到前面的代码。如果我们分析代码，会很快注意到有两条路径。一条路径是当number小于或等于1时，另一条路径是当number大于1时：
- en: '| ​  | `if` (number <= 1) { `// Path 1` |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (number <= 1) { `// Path 1` |'
- en: '| ​  | ... |'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ... |'
- en: '| ​  | } `else` { `// Path 2: number is greater than 1` |'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } `else` { `// Path 2: number is greater than 1` |'
- en: '| ​  | ... |'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ... |'
- en: '| ​  | } |'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 'We can see that the recursion happens inside the `else` path, since `factorial`
    calls itself:'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们可以看到递归发生在`else`路径中，因为`factorial`调用了自身：
- en: '| ​  | `else` { |'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `else` { |'
- en: '| ​  | `return` number * `factorial`(number - 1); |'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` number * `factorial`(number - 1); |'
- en: '| ​  | } |'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 'So it must be that the base case is the first path, since it’s the path where
    no recursion is taking place:'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 所以基本情况必须是第一条路径，因为这是没有发生递归的路径：
- en: '| ​  | `if` (number <= 1) { |'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (number <= 1) { |'
- en: '| ​  | `return` 1; |'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` 1; |'
- en: '| ​  | } |'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: We can conclude, then, that the base case is when number is less than or equal
    to 1.
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然后我们可以得出结论，基本情况是当number小于或等于1时。
- en: 'Next, let’s walk through the `factorial` method assuming it’s dealing with
    a base case, such as `factorial`(1). Again, the relevant code from our method
    is the following:'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 接下来，让我们逐步分析`factorial`方法，假设它处理的是一个基本情况，例如`factorial`(1)。再次提醒，相关的代码如下：
- en: '| ​  | `if` (number <= 1) { |'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (number <= 1) { |'
- en: '| ​  | `return` 1; |'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` 1; |'
- en: '| ​  | } |'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 'Well, that’s pretty simple—it’s the base case, so no recursion actually happens.
    If we call `factorial`(1), the method simply returns 1. Okay, so grab a napkin
    and write this fact down:'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 好吧，这很简单——这是基本情况，所以实际上没有发生递归。如果我们调用`factorial`(1)，该方法简单地返回1。好的，拿张纸巾把这个事实写下来：
- en: '![images/recursively_recurse_with_recursion/napkin_1.png](images/recursively_recurse_with_recursion/napkin_1.png)'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/recursively_recurse_with_recursion/napkin_1.png](images/recursively_recurse_with_recursion/napkin_1.png)'
- en: 'Next, let’s move up to the next case, which would be `factorial`(2). The relevant
    line of code from our method is this:'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 接下来，让我们上升到下一个情况，即`factorial`(2)。我们方法中相关的代码行是：
- en: '| ​  | `else` { |'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `else` { |'
- en: '| ​  | `return` number * `factorial`(number - 1); |'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` number * `factorial`(number - 1); |'
- en: '| ​  | } |'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 所以调用`factorial(2)`将返回`2 * factorial(1)`。要计算`2 * factorial(1)`，我们需要知道`factorial(1)`返回什么。如果你查看你的便签，你会看到它返回`1`。所以`2
    * factorial(1)`将返回`2 * 1`，正好是`2`。
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 所以调用`factorial(2)`将返回`2 * factorial(1)`。要计算`2 * factorial(1)`，我们需要知道`factorial(1)`返回什么。如果你查看你的便签，你会看到它返回`1`。所以`2
    * factorial(1)`将返回`2 * 1`，正好是`2`。
- en: 把这个事实添加到你的便签上：
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 把这个事实添加到你的便签上：
- en: '![images/recursively_recurse_with_recursion/napkin_2.png](images/recursively_recurse_with_recursion/napkin_2.png)'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/recursively_recurse_with_recursion/napkin_2.png](images/recursively_recurse_with_recursion/napkin_2.png)'
- en: 现在，如果我们调用`factorial(3)`会发生什么？再次，这里是相关的代码行：
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，如果我们调用`factorial(3)`会发生什么？再次，这里是相关的代码行：
- en: '| ​  | `**else**`​ { |'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `**否则**`​ { |'
- en: '| ​  | `**return**`​ `number * factorial(number - 1);` |'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `**返回**`​ `number * factorial(number - 1);` |'
- en: '| ​  | } |'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 所以这可以转化为`return 3 * factorial(2)`。`factorial(2)`返回什么？你不必再重新思考，因为它在你的便签上！它返回`2`。所以，`factorial(3)`将返回`6`（因为`3
    * 2 = 6`）。继续将这个精彩的事实添加到你的便签上：
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 所以这可以转化为`return 3 * factorial(2)`。`factorial(2)`返回什么？你不必再重新思考，因为它在你的便签上！它返回`2`。所以，`factorial(3)`将返回`6`（因为`3
    * 2 = 6`）。继续将这个精彩的事实添加到你的便签上：
- en: '![images/recursively_recurse_with_recursion/napkin_3.png](images/recursively_recurse_with_recursion/napkin_3.png)'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/recursively_recurse_with_recursion/napkin_3.png](images/recursively_recurse_with_recursion/napkin_3.png)'
- en: 花点时间自己想一想`factorial(4)`将返回什么。
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 花点时间自己想一想`factorial(4)`将返回什么。
- en: 正如你所看到的，从基本情况开始分析并逐步构建是一种很好的推理递归代码的方法。
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 正如你所看到的，从基本情况开始分析并逐步构建是一种很好的推理递归代码的方法。
