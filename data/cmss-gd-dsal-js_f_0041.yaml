- en: '`Bubble Sort`'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`冒泡排序`'
- en: Before jumping into our practical problem, though, we need to first look at
    a new category of algorithmic efficiency in the world of `Big O`. To demonstrate
    it, we’ll get to use one of the classic algorithms of computer-science lore.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 不过，在进入我们的实际问题之前，我们需要首先看看`Big O`世界中算法效率的新类别。为了说明这一点，我们将使用计算机科学经典算法之一。
- en: 'Sorting algorithms have been the subject of extensive research in computer
    science, and tens of such algorithms have been developed over the years. They
    all solve the following problem:'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 排序算法在计算机科学中一直是广泛研究的主题，多年来开发了数十种此类算法。它们都解决了以下问题：
- en: Given an array of unsorted values, how can we sort them so that they end up
    in ascending order?
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 给定一个未排序值的数组，我们如何对其进行排序，使其按升序排列？
- en: In this chapter and those following, we’re going to encounter a number of these
    sorting algorithms. Some of the first ones you’ll learn about are known as simple
    sorts, in that they are easy to understand but are not as efficient as some of
    the faster sorting algorithms out there.
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在本章及随后的章节中，我们将遇到许多这些排序算法。您将首先学习到的一些算法被称为简单排序，因为它们易于理解，但不如一些更快速的排序算法高效。
- en: '`Bubble Sort` follows these steps:'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`冒泡排序`遵循以下步骤：'
- en: 'Point to two consecutive values in the array. (Initially, we start by pointing
    to the array’s first two values.) Compare the first item with the second one:'
  id: totrans-6
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 指向数组中的两个连续值。（最初，我们开始时指向数组的前两个值。）将第一个项与第二个项进行比较：
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_1.png](images/speeding_up_your_code_with_big_o/bubble_sort_1.png)'
  id: totrans-7
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_IMG
  zh: '![images/speeding_up_your_code_with_big_o/bubble_sort_1.png](images/speeding_up_your_code_with_big_o/bubble_sort_1.png)'
- en: 'If the two items are out of order (in other words, the left value is greater
    than the right value), swap them (if they already happen to be in the correct
    order, do nothing for this step):'
  id: totrans-8
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 如果两个项的顺序错误（换句话说，左侧的值大于右侧的值），则交换它们（如果它们已经是正确顺序，则在此步骤中不做任何操作）：
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_2.png](images/speeding_up_your_code_with_big_o/bubble_sort_2.png)![images/speeding_up_your_code_with_big_o/bubble_sort_3.png](images/speeding_up_your_code_with_big_o/bubble_sort_3.png)'
  id: totrans-9
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_IMG
  zh: '![images/speeding_up_your_code_with_big_o/bubble_sort_2.png](images/speeding_up_your_code_with_big_o/bubble_sort_2.png)![images/speeding_up_your_code_with_big_o/bubble_sort_3.png](images/speeding_up_your_code_with_big_o/bubble_sort_3.png)'
- en: 'Move the “pointers” one cell to the right:'
  id: totrans-10
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 将“指针”向右移动一个单元：
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_4.png](images/speeding_up_your_code_with_big_o/bubble_sort_4.png)'
  id: totrans-11
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_IMG
  zh: '![images/speeding_up_your_code_with_big_o/bubble_sort_4.png](images/speeding_up_your_code_with_big_o/bubble_sort_4.png)'
- en: Repeat `Steps 1 through 3` until we reach the end of the array, or if we reach
    the values that have already been sorted. (This will make more sense in the walk-through
    that follows.) At this point, we’ve completed our first pass-through of the array—we
    “passed through” the array by pointing to each of its values until we reached
    the end.
  id: totrans-12
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 重复`步骤 1 到 3`，直到到达数组的末尾，或遇到已经排序的值。（在随后的逐步演示中，这会更加清晰。）此时，我们已经完成了对数组的第一次遍历——我们通过指向每个值来“遍历”数组，直到到达末尾。
- en: We then move the two pointers back to the first two values of the array and
    execute another pass-through of the array by running `Steps 1 through 4` again.
    We keep on executing these pass-throughs until we have a pass-through in which
    we did not perform any swaps. When this happens, it means our array is fully sorted
    and our work is done.
  id: totrans-13
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 然后，我们将两个指针移动回数组的前两个值，并再次执行数组的遍历，运行`步骤 1 到 4`。我们继续执行这些遍历，直到有一次遍历中没有进行任何交换。当这种情况发生时，意味着我们的数组已经完全排序，工作完成。
