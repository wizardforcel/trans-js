- en: '`Selection Sort` in Action'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`选择排序`的实际操作'
- en: Let’s walk through the steps of `Selection Sort` using the example array `[4,
    2, 7, 1, 3]`。
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们通过示例数组`[4, 2, 7, 1, 3]`来逐步演示`选择排序`：
- en: 'We begin our first pass-through:'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们开始第一次遍历：
- en: 'We set things up by inspecting the value at index `0`。By definition, it’s the
    lowest value in the array we’ve encountered so far (as it’s the only value we’ve
    encountered so far)，so we keep track of its index in a variable:'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们通过检查索引`0`的值来进行设置。根据定义，它是我们迄今为止遇到的数组中的最低值（因为它是我们遇到的唯一值），所以我们在一个变量中跟踪它的索引：
- en: '![`images/optimizing_code_with_and_without_big_o/selection_sort_1.png`](images/optimizing_code_with_and_without_big_o/selection_sort_1.png)'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/optimizing_code_with_and_without_big_o/selection_sort_1.png`](images/optimizing_code_with_and_without_big_o/selection_sort_1.png)'
- en: 'Step `1`: We compare the `2` with the lowest value so far (which happens to
    be `4`):'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 步骤`1`：我们将`2`与目前为止的最低值（恰好是`4`）进行比较：
- en: '![`images/optimizing_code_with_and_without_big_o/selection_sort_2.png`](images/optimizing_code_with_and_without_big_o/selection_sort_2.png)'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/optimizing_code_with_and_without_big_o/selection_sort_2.png`](images/optimizing_code_with_and_without_big_o/selection_sort_2.png)'
- en: 'The `2` is even less than the `4`，so it becomes the lowest value so far:'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`2`的值甚至小于`4`，因此它成为目前为止的最低值：'
- en: '![`images/optimizing_code_with_and_without_big_o/selection_sort_3.png`](images/optimizing_code_with_and_without_big_o/selection_sort_3.png)'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/optimizing_code_with_and_without_big_o/selection_sort_3.png`](images/optimizing_code_with_and_without_big_o/selection_sort_3.png)'
- en: 'Step `2`: We compare the next value—the `7`—with the lowest value so far. The
    `7` is greater than the `2`，so `2` remains our lowest value:'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 步骤`2`：我们将下一个值`7`与目前为止的最低值进行比较。`7`大于`2`，因此`2`仍然是我们的最低值：
- en: '![`images/optimizing_code_with_and_without_big_o/selection_sort_4.png`](images/optimizing_code_with_and_without_big_o/selection_sort_4.png)'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/optimizing_code_with_and_without_big_o/selection_sort_4.png`](images/optimizing_code_with_and_without_big_o/selection_sort_4.png)'
- en: 'Step `3`: We compare the `1` with the lowest value so far:'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 步骤`3`：我们将`1`与目前为止的最低值进行比较：
- en: '![`images/optimizing_code_with_and_without_big_o/selection_sort_5.png`](images/optimizing_code_with_and_without_big_o/selection_sort_5.png)'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/optimizing_code_with_and_without_big_o/selection_sort_5.png`](images/optimizing_code_with_and_without_big_o/selection_sort_5.png)'
- en: 'Because the `1` is even less than the `2`，`1` becomes our new lowest value:'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因为`1`甚至小于`2`，所以`1`成为我们新的最低值：
- en: '![`images/optimizing_code_with_and_without_big_o/selection_sort_6.png`](images/optimizing_code_with_and_without_big_o/selection_sort_6.png)'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/optimizing_code_with_and_without_big_o/selection_sort_6.png`](images/optimizing_code_with_and_without_big_o/selection_sort_6.png)'
- en: 'Step `4`: We compare the `3` to the lowest value so far, which is the `1`。We’ve
    reached the end of the array，and we’ve determined that `1` is the lowest value
    out of the entire array:'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 步骤`4`：我们将`3`与目前为止的最低值`1`进行比较。我们已经到达数组的末尾，确认`1`是整个数组中的最低值：
- en: '![`images/optimizing_code_with_and_without_big_o/selection_sort_7.png`](images/optimizing_code_with_and_without_big_o/selection_sort_7.png)'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/optimizing_code_with_and_without_big_o/selection_sort_7.png`](images/optimizing_code_with_and_without_big_o/selection_sort_7.png)'
- en: 'Step `5`: Because `1` is the lowest value，we swap it with whatever value is
    at index `0`—the index we began this pass-through with:'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 步骤`5`：因为`1`是最低值，我们将其与索引`0`的值进行交换——这是我们开始此次遍历时的索引：
- en: '![`images/optimizing_code_with_and_without_big_o/selection_sort_8.png`](images/optimizing_code_with_and_without_big_o/selection_sort_8.png)'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/optimizing_code_with_and_without_big_o/selection_sort_8.png`](images/optimizing_code_with_and_without_big_o/selection_sort_8.png)'
- en: 'Since we’ve moved the lowest value to the beginning of the array，that means
    the lowest value is now in its correct spot:'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 由于我们已将最低值移动到数组的开头，这意味着最低值现在在正确的位置：
- en: '![`images/optimizing_code_with_and_without_big_o/selection_sort_9.png`](images/optimizing_code_with_and_without_big_o/selection_sort_9.png)'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/optimizing_code_with_and_without_big_o/selection_sort_9.png`](images/optimizing_code_with_and_without_big_o/selection_sort_9.png)'
- en: We’re now ready to begin our second pass-through.
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们现在准备开始第二次遍历。
- en: 'Setup: The first cell—index `0`—is already sorted, so this pass-through begins
    at the next cell, which is index `1`。The value at index `1` is the number `2`，and
    it’s the lowest value we’ve encountered in this pass-through so far:'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 设置：第一个单元——索引`0`——已经排序，因此此次遍历从下一个单元开始，即索引`1`。索引`1`的值是数字`2`，而且它是我们在此次遍历中遇到的最低值：
- en: '![`images/optimizing_code_with_and_without_big_o/selection_sort_10.png`](images/optimizing_code_with_and_without_big_o/selection_sort_10.png)'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/optimizing_code_with_and_without_big_o/selection_sort_10.png`](images/optimizing_code_with_and_without_big_o/selection_sort_10.png)'
- en: 'Step `6`: We compare the `7` with the lowest value so far. The `2` is less
    than the `7`，so `2` remains our lowest value:'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第`6`步：我们将`7`与目前为止的最低值进行比较。`2`小于`7`，因此`2`仍然是我们的最低值：
- en: '![images/optimizing_code_with_and_without_big_o/selection_sort_11.png](images/optimizing_code_with_and_without_big_o/selection_sort_11.png)'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/optimizing_code_with_and_without_big_o/selection_sort_11.png](images/optimizing_code_with_and_without_big_o/selection_sort_11.png)'
- en: 'Step 7: We compare the `4` with the lowest value so far. The `2` is less than
    the `4`， so `2` remains our lowest value:'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第7步：我们将`4`与目前为止的最低值进行比较。`2`小于`4`，因此`2`仍然是我们最低的值：
- en: '![images/optimizing_code_with_and_without_big_o/selection_sort_12.png](images/optimizing_code_with_and_without_big_o/selection_sort_12.png)'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/optimizing_code_with_and_without_big_o/selection_sort_12.png](images/optimizing_code_with_and_without_big_o/selection_sort_12.png)'
- en: 'Step 8: We compare the `3` with the lowest value so far. The `2` is less than
    the `3`, so `2` remains our lowest value:'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第8步：我们将`3`与目前为止的最低值进行比较。`2`小于`3`，因此`2`仍然是我们目前的最低值：
- en: '![images/optimizing_code_with_and_without_big_o/selection_sort_13.png](images/optimizing_code_with_and_without_big_o/selection_sort_13.png)'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/optimizing_code_with_and_without_big_o/selection_sort_13.png](images/optimizing_code_with_and_without_big_o/selection_sort_13.png)'
- en: 'We’ve reached the end of the array. Since the lowest value from this pass-through
    was already in its correct spot, we don’t need to perform a swap. This ends our
    second pass-through, leaving us with this:'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们已到达数组的末尾。由于这一轮中最低的值已经在正确的位置，我们无需进行交换。这结束了我们的第二次遍历，结果如下：
- en: '![images/optimizing_code_with_and_without_big_o/selection_sort_14.png](images/optimizing_code_with_and_without_big_o/selection_sort_14.png)'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/optimizing_code_with_and_without_big_o/selection_sort_14.png](images/optimizing_code_with_and_without_big_o/selection_sort_14.png)'
- en: We now begin the third pass-through.
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在我们开始第三次遍历。
- en: 'Setup: We begin at index `2`， which contains the value `7`。 The `7` is the
    lowest value we’ve encountered so far in this pass-through:'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 设置：我们从索引`2`开始，该位置包含值`7`。`7`是我们在这次遍历中遇到的最低值：
- en: '![images/optimizing_code_with_and_without_big_o/selection_sort_15.png](images/optimizing_code_with_and_without_big_o/selection_sort_15.png)'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/optimizing_code_with_and_without_big_o/selection_sort_15.png](images/optimizing_code_with_and_without_big_o/selection_sort_15.png)'
- en: 'Step 9: We compare the `4` with the `7`:'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第9步：我们将`4`与`7`进行比较：
- en: '![images/optimizing_code_with_and_without_big_o/selection_sort_16.png](images/optimizing_code_with_and_without_big_o/selection_sort_16.png)'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/optimizing_code_with_and_without_big_o/selection_sort_16.png](images/optimizing_code_with_and_without_big_o/selection_sort_16.png)'
- en: 'We note that `4` is our new lowest value:'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们注意到`4`是我们新的最低值：
- en: '![images/optimizing_code_with_and_without_big_o/selection_sort_17.png](images/optimizing_code_with_and_without_big_o/selection_sort_17.png)'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/optimizing_code_with_and_without_big_o/selection_sort_17.png](images/optimizing_code_with_and_without_big_o/selection_sort_17.png)'
- en: 'Step 10: We encounter the `3` which is even lower than the `4`:'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第10步：我们遇到了`3`，它比`4`还要小：
- en: '![images/optimizing_code_with_and_without_big_o/selection_sort_18.png](images/optimizing_code_with_and_without_big_o/selection_sort_18.png)'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/optimizing_code_with_and_without_big_o/selection_sort_18.png](images/optimizing_code_with_and_without_big_o/selection_sort_18.png)'
- en: 'The `3` becomes our new lowest value:'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`3`成为我们新的最低值：'
- en: '![images/optimizing_code_with_and_without_big_o/selection_sort_19.png](images/optimizing_code_with_and_without_big_o/selection_sort_19.png)'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/optimizing_code_with_and_without_big_o/selection_sort_19.png](images/optimizing_code_with_and_without_big_o/selection_sort_19.png)'
- en: 'Step 11: We’ve reached the end of the array, so we swap the `3` with the value
    we started our pass-through with, which is the `7`:'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第11步：我们已到达数组的末尾，因此我们将`3`与开始遍历时的值`7`进行交换：
- en: '![images/optimizing_code_with_and_without_big_o/selection_sort_20.png](images/optimizing_code_with_and_without_big_o/selection_sort_20.png)'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/optimizing_code_with_and_without_big_o/selection_sort_20.png](images/optimizing_code_with_and_without_big_o/selection_sort_20.png)'
- en: 'We now know that the `3` is in the correct place within the array:'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们现在知道`3`在数组中处于正确的位置：
- en: '![images/optimizing_code_with_and_without_big_o/selection_sort_21.png](images/optimizing_code_with_and_without_big_o/selection_sort_21.png)'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/optimizing_code_with_and_without_big_o/selection_sort_21.png](images/optimizing_code_with_and_without_big_o/selection_sort_21.png)'
- en: While you and I can both see that the entire array is correctly sorted at this
    point, the computer doesn’t know this yet, so it must begin a fourth pass-through.
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 虽然你我都可以看到此时整个数组已正确排序，但计算机还不知道这一点，因此必须开始第四次遍历。
- en: 'Setup: We begin the pass-through with index `3`。 The `4` is the lowest value
    so far:'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 设置：我们从索引`3`开始遍历。`4`是目前为止的最低值：
- en: '![images/optimizing_code_with_and_without_big_o/selection_sort_22.png](images/optimizing_code_with_and_without_big_o/selection_sort_22.png)'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/optimizing_code_with_and_without_big_o/selection_sort_22.png](images/optimizing_code_with_and_without_big_o/selection_sort_22.png)'
- en: 'Step 12: We compare the `7` with the `4`:'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第12步：我们将`7`与`4`进行比较：
- en: '![`images/optimizing_code_with_and_without_big_o/selection_sort_23.png`](images/optimizing_code_with_and_without_big_o/selection_sort_23.png)'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/optimizing_code_with_and_without_big_o/selection_sort_23.png`](images/optimizing_code_with_and_without_big_o/selection_sort_23.png)'
- en: The 4 remains the lowest value we’ve encountered in this pass-through so far,
    so we don’t need to swap it, since it’s already in the correct place.
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 4仍然是我们在这一轮遍历中遇到的最低值，因此我们不需要交换它，因为它已经在正确的位置。
- en: 'Because all the cells besides the last one are correctly sorted, that must
    mean the last cell is also in the correct order, and our entire array is properly
    sorted:'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因为除了最后一个单元格外，所有单元格都是正确排序的，这必然意味着最后一个单元格也是按正确顺序排列的，因此我们的整个数组是正确排序的：
- en: '![`images/optimizing_code_with_and_without_big_o/selection_sort_24.png`](images/optimizing_code_with_and_without_big_o/selection_sort_24.png)'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![`images/optimizing_code_with_and_without_big_o/selection_sort_24.png`](images/optimizing_code_with_and_without_big_o/selection_sort_24.png)'
- en: 'Code Implementation: Selection Sort'
  id: totrans-55
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 代码实现：选择排序
- en: 'Here’s an implementation of Selection Sort in JavaScript:'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是一个JavaScript中选择排序的实现：
- en: '| ​  | `function` selectionSort(`array`) { |'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` selectionSort(`array`) { |'
- en: '| ​  | `for` (`let` `i` = 0; `i` < `array.length` - 1; `i` += 1) { |'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`let` `i` = 0; `i` < `array.length` - 1; `i` += 1) { |'
- en: '| ​  | `let` `lowestNumberIndex` = `i`; |'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` `lowestNumberIndex` = `i`; |'
- en: '| ​  |  |'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `for` (`let` `j` = `i` + 1; `j` < `array.length`; `j` += 1) { |'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`let` `j` = `i` + 1; `j` < `array.length`; `j` += 1) { |'
- en: '| ​  | `if` (`array[j]` < `array[lowestNumberIndex]`) { |'
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (`array[j]` < `array[lowestNumberIndex]`) { |'
- en: '| ​  | `lowestNumberIndex` = `j`; |'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `lowestNumberIndex` = `j`; |'
- en: '| ​  | } |'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `if` (`lowestNumberIndex` !== `i`) { |'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (`lowestNumberIndex` !== `i`) { |'
- en: '| ​  | [`array[i]`, `array[lowestNumberIndex]`] = |'
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | [`array[i]`, `array[lowestNumberIndex]`] = |'
- en: '| ​  | [`array[lowestNumberIndex]`, `array[i]`]; |'
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | [`array[lowestNumberIndex]`, `array[i]`]; |'
- en: '| ​  | } |'
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return` `array`; |'
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` `array`; |'
- en: '| ​  | } |'
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: Let’s break this down line by line.
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们逐行分析一下。
- en: 'We begin a loop that represents each pass-through. It uses the variable `i`
    to point to each index of the array and goes up through the second-to-last value:'
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们开始一个循环，表示每次遍历。它使用变量`i`指向数组的每个索引，并一直到倒数第二个值：
- en: '| ​  | `for` (`let` `i` = 0; `i` < `array.length` - 1; `i` += 1) { |'
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`let` `i` = 0; `i` < `array.length` - 1; `i` += 1) { |'
- en: It doesn’t need to run for the last value itself, since the array will be fully
    sorted by that point.
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 它不需要对最后一个值本身进行运行，因为到那时数组将完全排序。
- en: 'Next, begin keeping track of the index containing the lowest value we encounter
    so far:'
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 接下来，开始跟踪我们遇到的最低值的索引：
- en: '| ​  | `let` `lowestNumberIndex` = `i`; |'
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` `lowestNumberIndex` = `i`; |'
- en: This `lowestNumberIndex` will be 0 at the beginning of the first pass-through,
    1 at the beginning of the second, and so on.
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这个`lowestNumberIndex`在第一次遍历开始时为0，在第二次遍历开始时为1，依此类推。
- en: The reason we specifically keep track of the index is because we’ll need access
    to both the lowest value and its index in the rest of our code, and we can use
    the index to reference both. (We can check the lowest value by calling `array[lowestNumberIndex]`).
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们特别跟踪索引的原因是因为我们需要在其余代码中同时访问最低值及其索引，并且可以使用该索引引用两者。（我们可以通过调用`array[lowestNumberIndex]`来检查最低值）。
- en: 'Within each pass-through, we check the remaining values of the array to see
    if there might be a lower value than the current lowest value:'
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在每一次遍历中，我们检查数组中剩余的值，以查看是否可能存在比当前最低值更低的值：
- en: '| ​  | `for` (`let` `j` = `i` + 1; `j` < `array.length`; `j` += 1) { |'
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`let` `j` = `i` + 1; `j` < `array.length`; `j` += 1) { |'
- en: 'Indeed, if we find a lower value, we store this new value’s index in `lowestNumberIndex`:'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 的确，如果我们找到一个更低的值，我们就把这个新值的索引存储在`lowestNumberIndex`中：
- en: '| ​  | `if` (`array[j]` < `array[lowestNumberIndex]`) { |'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (`array[j]` < `array[lowestNumberIndex]`) { |'
- en: '| ​  | `lowestNumberIndex` = `j`; |'
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `lowestNumberIndex` = `j`; |'
- en: '| ​  | } |'
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: By the end of the inner loop, we’ll have found the index of the lowest number
    from this pass-through.
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 到了内循环结束时，我们将找到这一轮遍历中最低数字的索引。
- en: 如果在这一轮遍历中，最低值已经在其正确的位置（当最低值是我们在遍历中遇到的第一个值时会发生这种情况），我们就不需要做任何事情。但如果最低值不在其正确的位置，我们需要进行交换。具体来说，我们将最低值与索引为`i`的值交换，`i`是我们开始遍历时的索引：
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果在这一轮遍历中，最低值已经在其正确的位置（当最低值是我们在遍历中遇到的第一个值时会发生这种情况），我们就不需要做任何事情。但如果最低值不在其正确的位置，我们需要进行交换。具体来说，我们将最低值与索引为`i`的值交换，`i`是我们开始遍历时的索引：
- en: '| ​  | `if` (lowestNumberIndex !== i) { |'
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (lowestNumberIndex !== i) { |'
- en: '| ​  | `[array[i], array[lowestNumberIndex]] = [array[lowestNumberIndex], array[i]];`
    |'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `[array[i], array[lowestNumberIndex]] = [array[lowestNumberIndex], array[i]];`
    |'
- en: '| ​  | `}` |'
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `}` |'
- en: 最后，我们返回已排序的数组：
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 最后，我们返回已排序的数组：
- en: '| ​  | `return` array; |'
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` array; |'
