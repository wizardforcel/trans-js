- en: Exercises
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 练习
- en: The following exercises provide you with the opportunity to practice with `tries`.
    The solutions to these exercises are found in the section [​*Chapter 17*​](f_0222.xhtml#tries.solutions).
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下练习为您提供了与`tries`练习的机会。这些练习的解决方案在章节 [​*第17章*​](f_0222.xhtml#tries.solutions)中可以找到。
- en: 'List all the words stored in the following `trie`:'
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 列出存储在以下`trie`中的所有单词：
- en: '![images/tries/exercise_1.png](images/tries/exercise_1.png)'
  id: totrans-3
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_IMG
  zh: '![images/tries/exercise_1.png](images/tries/exercise_1.png)'
- en: 'Draw a `trie` that stores the following words: `“get”`, `“go”`, `“got”`, `“gotten”`,
    `“hall”`, `“ham”`, `“hammer”`, `“hill”`, and `“zebra”`.'
  id: totrans-4
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 绘制一个存储以下单词的`trie`：`“get”`、`“go”`、`“got”`、`“gotten”`、`“hall”`、`“ham”`、`“hammer”`、`“hill”`和`“zebra”`。
- en: Write a function that traverses each node of a `trie` and prints each key, including
    all `"*"` keys.
  id: totrans-5
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 编写一个遍历`trie`每个节点并打印每个键的函数，包括所有`"*"`键。
- en: Write an `autocorrect` function that attempts to replace a user’s typo with
    a correct word. The function should accept a string that represents text a user
    typed in. If the user’s string is not in the `trie`, the function should return
    an alternative word that shares the longest possible prefix with the user’s string.
  id: totrans-6
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 编写一个`autocorrect`函数，尝试用一个正确的单词替换用户的拼写错误。该函数应接受一个表示用户输入文本的字符串。如果用户的字符串不在`trie`中，函数应返回一个与用户字符串共享最长前缀的替代单词。
- en: For example, let’s say our `trie` contained the words `“cat”`, `“catnap”`, and
    `“catnip”`. If the user accidentally types in `“catnar”`, our function should
    return `“catnap”` since that’s the word from the `trie` that shares the longest
    prefix with `“catnar”`. This is because both `“catnar”` and `“catnap”` share a
    prefix of `“catna”`, which is five characters long. The word `“catnip”` isn’t
    as good, since it only shares the shorter, four-character prefix of `“catn”` with
    `“catnar”`.
  id: totrans-7
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，假设我们的`trie`包含单词`“cat”`、`“catnap”`和`“catnip”`。如果用户不小心输入`“catnar”`，我们的函数应返回`“catnap”`，因为这是与`“catnar”`共享最长前缀的`trie`中的单词。这是因为`“catnar”`和`“catnap”`共享的前缀是`“catna”`，长度为五个字符。单词`“catnip”`不如它，因为它只与`“catnar”`共享四个字符的较短前缀`“catn”`。
- en: 'One more example: if the user types in `“caxasfdij”`, the words `“cat”`, `“catnap”`,
    and `“catnip”` are all valid replacements since they share the same prefix of
    `“ca”` with the user’s typo. Our function just needs to return one valid option—it
    doesn’t matter which.'
  id: totrans-8
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 另一个例子：如果用户输入`“caxasfdij”`，那么单词`“cat”`、`“catnap”`和`“catnip”`都是有效的替代，因为它们与用户的拼写错误共享相同的前缀`“ca”`。我们的函数只需要返回一个有效选项——返回哪个都无所谓。
- en: If the user’s string is found in the `trie`, the function should just return
    the word itself. This should be true even if the user’s text isn’t a complete
    word, as we’re only trying to correct typos, not suggest endings to the user’s
    prefix.
  id: totrans-9
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 如果用户的字符串在`trie`中找到，函数应直接返回该单词。这一点即使用户的文本不是完整单词也应成立，因为我们只是试图纠正拼写错误，而不是给用户的前缀建议结尾。
- en: Copyright © 2024, The Pragmatic Bookshelf.
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 版权所有 © 2024, The Pragmatic Bookshelf。
