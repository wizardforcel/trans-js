- en: Exercises
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 练习
- en: The following exercises provide you with the opportunity to practice with space
    constraints. The solutions to these exercises are found in the section [`Chapter
    19`](f_0224.xhtml#dealing.with.space.constraints.solutions).
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 以下练习为您提供在空间限制下练习的机会。这些练习的解决方案在[`第19章`](f_0224.xhtml#dealing.with.space.constraints.solutions)中可以找到。
- en: 'Following is the word builder algorithm we encountered in [`Word Builder`](f_0066.xhtml#sect.word-builder).
    Describe its space complexity in terms of Big O:'
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 以下是我们在[`单词生成器`](f_0066.xhtml#sect.word-builder)中遇到的单词生成算法。用大O符号描述其空间复杂度：
- en: '| ​  | ​`function`​ `wordBuilder(array)` { |'
  id: totrans-3
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`function`​ `wordBuilder(array)` { |'
- en: '| ​  | ​`const`​ `collection` = []; |'
  id: totrans-4
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`const`​ `collection` = []; |'
- en: '| ​  |  |'
  id: totrans-5
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | ​`for`​ (​`const`​ `[indexI, valueI]` ​`of`​ `array.entries()`) { |'
  id: totrans-6
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`for`​ (​`const`​ `[indexI, valueI]` ​`of`​ `array.entries()`) { |'
- en: '| ​  | ​`for`​ (​`const`​ `[indexJ, valueJ]` ​`of`​ `array.entries()`) { |'
  id: totrans-7
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`for`​ (​`const`​ `[indexJ, valueJ]` ​`of`​ `array.entries()`) { |'
- en: '| ​  | ​`if`​ (`indexI !== indexJ`) { |'
  id: totrans-8
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`if`​ (`indexI !== indexJ`) { |'
- en: '| ​  | `collection.push(valueI + valueJ);` |'
  id: totrans-9
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `collection.push(valueI + valueJ);` |'
- en: '| ​  | } |'
  id: totrans-10
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-11
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-12
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-13
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | ​`return`​ `collection`; |'
  id: totrans-14
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`return`​ `collection`; |'
- en: '| ​  | } |'
  id: totrans-15
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 'Following is a function that reverses an array. Describe its space complexity
    in terms of Big O:'
  id: totrans-16
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 以下是一个反转数组的函数。用大O符号描述其空间复杂度：
- en: '| ​  | ​`function`​ `reverse(array)` { |'
  id: totrans-17
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`function`​ `reverse(array)` { |'
- en: '| ​  | ​`const`​ `newArray` = []; |'
  id: totrans-18
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`const`​ `newArray` = []; |'
- en: '| ​  |  |'
  id: totrans-19
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | ​`for`​ (​`const`​ `value` ​`of`​ `array`) { |'
  id: totrans-20
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`for`​ (​`const`​ `value` ​`of`​ `array`) { |'
- en: '| ​  | `newArray.unshift(value);` |'
  id: totrans-21
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `newArray.unshift(value);` |'
- en: '| ​  | } |'
  id: totrans-22
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-23
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | ​`return`​ `newArray`; |'
  id: totrans-24
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`return`​ `newArray`; |'
- en: '| ​  | } |'
  id: totrans-25
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: Create a new function to reverse an array that takes up just O(1) extra space.
  id: totrans-26
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 创建一个新的函数来反转数组，仅占用O(1)的额外空间。
- en: Following are three different implementations of a function that accepts an
    array of numbers and returns an array containing those numbers multiplied by 2\.
    For example, if the input is `[5, 4, 3, 2, 1]`, the output will be `[10, 8, 6,
    4, 2]`.
  id: totrans-27
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 以下是三个不同的实现，它们接受一个数字数组并返回一个包含这些数字乘以2的数组。例如，如果输入是`[5, 4, 3, 2, 1]`，输出将是`[10, 8,
    6, 4, 2]`。
- en: '| ​  | ​`function`​ `doubleArray1(array)` { |'
  id: totrans-28
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`function`​ `doubleArray1(array)` { |'
- en: '| ​  | ​`const`​ `newArray` = []; |'
  id: totrans-29
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`const`​ `newArray` = []; |'
- en: '| ​  |  |'
  id: totrans-30
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | ​`for`​ (​`const`​ `value` ​`of`​ `array`) { |'
  id: totrans-31
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`for`​ (​`const`​ `value` ​`of`​ `array`) { |'
- en: '| ​  | `newArray.push(value * 2);` |'
  id: totrans-32
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `newArray.push(value * 2);` |'
- en: '| ​  | } |'
  id: totrans-33
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-34
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | ​`return`​ `newArray`; |'
  id: totrans-35
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`return`​ `newArray`; |'
- en: '| ​  | } |'
  id: totrans-36
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-37
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | ​`function`​ `doubleArray2(array)` { |'
  id: totrans-38
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`function`​ `doubleArray2(array)` { |'
- en: '| ​  | ​`for`​ (​`let`​ `i = 0; i < array.length; i += 1`) { |'
  id: totrans-39
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`for`​ (​`let`​ `i = 0; i < array.length; i += 1`) { |'
- en: '| ​  | `array[i] *= 2;` |'
  id: totrans-40
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `array[i] *= 2;` |'
- en: '| ​  | } |'
  id: totrans-41
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-42
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | ​`return`​ `array`; |'
  id: totrans-43
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`return`​ `array`; |'
- en: '| ​  | } |'
  id: totrans-44
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-45
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | ​`function`​ `doubleArray3(array, index = 0)` { |'
  id: totrans-46
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`function`​ `doubleArray3(array, index = 0)` { |'
- en: '| ​  | ​`if`​ (`index >= array.length`) { ​`return`; } |'
  id: totrans-47
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`if`​ (`index >= array.length`) { ​`return`; } |'
- en: '| ​  |  |'
  id: totrans-48
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `array[index] *= 2;` |'
  id: totrans-49
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `array[index] *= 2;` |'
- en: '| ​  | `doubleArray3(array, index + 1);` |'
  id: totrans-50
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `doubleArray3(array, index + 1);` |'
- en: '| ​  |  |'
  id: totrans-51
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | ​`return`​ `array`; |'
  id: totrans-52
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ​`return`​ `array`; |'
- en: '| ​  | } |'
  id: totrans-53
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 'Fill in the table that follows to describe the efficiency of these three versions
    in terms of both time and space:'
  id: totrans-54
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 填写下表，以描述这三个版本在时间和空间效率方面的表现：
- en: '| Version | Time Complexity | Space Complexity |'
  id: totrans-55
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| 版本 | 时间复杂度 | 空间复杂度 |'
- en: '| --- | --- | --- |'
  id: totrans-56
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Version #1 | ? | ? |'
  id: totrans-57
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| 版本 #1 | ? | ? |'
- en: '| Version #2 | ? | ? |'
  id: totrans-58
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| 版本 #2 | ? | ? |'
- en: '| Version #3 | ? | ? |'
  id: totrans-59
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| 版本 #3 | ? | ? |'
- en: Copyright © 2024, The Pragmatic Bookshelf.
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 版权所有 © 2024, The Pragmatic Bookshelf.
