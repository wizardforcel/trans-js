- en: © The Author(s), under exclusive license to Springer Fachmedien Wiesbaden GmbH,
    part of Springer Nature 2024J. L. ZuckarelliLearn coding with Python and JavaScript
    [https://doi.org/10.1007/978-3-658-42912-6_6](https://doi.org/10.1007/978-3-658-42912-6_6)
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: © 作者，独家授权给Springer Fachmedien Wiesbaden GmbH，Springer Nature旗下公司 2024 J. L.
    Zuckarelli《用 Python 和 JavaScript 学习编码》[https://doi.org/10.1007/978-3-658-42912-6_6](https://doi.org/10.1007/978-3-658-42912-6_6)
- en: 6. Some Tips
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6. 一些建议
- en: Joachim L. Zuckarelli^([1](#Aff2)  )(1)München, GermanyOverview
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Joachim L. Zuckarelli^([1](#Aff2) )(1) 慕尼黑，德国概述
- en: Before we get into the basic concepts of programming in the next part of the
    book, you’ll find some encouraging tips for getting started in the fascinating
    world of programming in this chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入本书下一部分的编程基本概念之前，本章将为你提供一些关于如何开始进入迷人的编程世界的鼓舞人心的建议。
- en: 6.1 Learn the Basics First!
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.1 首先学习基础知识！
- en: Start small when learning a new language. With very few basic elements you can
    usually already develop executable programs. You don’t have to know every detail.
    You will never know the language “completely” anyway, there are always more features,
    more libraries. That you don’t know yet. The important thing is to gain a basic
    understanding of the language, and this is usually much easier than it first appears.
    Therefore, focus your efforts on the central concepts of the language first. The
    basic questions we cover in Part II of this book will help with this. Don’t try
    to read tons of literature to theoretically understand every aspect of the language
    before you venture into your first program. Quite the opposite! Start writing
    your own small programs as early as possible. Your knowledge will expand naturally
    over time.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 学习一门新语言时从小做起。使用非常少的基本元素，你通常就可以开发出可执行的程序。你不必了解每个细节。反正你也永远无法“完全”掌握一门语言，总会有更多的功能、更多的库，而这些你还不知道。重要的是要获得对这门语言的基本理解，而这通常比最初看起来的要容易得多。因此，首先将精力集中在语言的核心概念上。本书第二部分涵盖的基本问题将有助于你理解这一点。在你开始编写第一个程序之前，不要试图阅读大量文献，理论上理解语言的每一个方面。恰恰相反！尽早开始编写你自己的小程序。随着时间的推移，你的知识会自然而然地扩展。
- en: 6.2 Play!
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.2 玩！
- en: Dare to try things out. Unlike in driving school, nothing can break in programming
    if you play around a bit. When you try things out, you quickly learn what works
    and what doesn’t. As we all know, we learn especially well from mistakes. By trying
    things out, you learn things that are not described in any book.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 敢于尝试。与驾校不同，编程时你玩得越多，什么也不会坏。当你尝试一些东西时，你会很快了解哪些有效，哪些无效。我们都知道，我们尤其从错误中学得最好。通过尝试，你会学到书中没有描述的内容。
- en: 6.3 Don’t Lose Heart!
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.3 不要灰心丧气！
- en: Don’t be discouraged if your program doesn’t do what it’s supposed to do at
    the beginning, or if you keep getting an error message and haven’t the slightest
    idea what the problem might be. Of course, we try to avoid that sort of thing
    with the approach we take in this book. But the truth is, the best programmers
    make mistakes all the time. Ever wonder why the apps on your phone update so often?
    Many of those updates are just bug fixes. Making, finding, and ironing out bugs
    is part of the craft of programming, and by no means the least important. This
    is sometimes tedious and nerve-wracking, but no reason to throw in the towel.
    By the way, a little break sometimes works wonders.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的程序一开始没有按预期工作，或者你一直收到错误消息，根本不知道问题出在哪里，不要气馁。当然，我们在本书中所采取的方法尽量避免这种情况。但事实是，最优秀的程序员经常犯错。你有没有想过为什么手机上的应用程序更新这么频繁？许多更新只是修复了
    bug。编写、发现和解决 bug 是编程的一部分，而且绝不是最不重要的一部分。这有时是很繁琐和让人紧张的，但没有理由放弃。顺便说一句，偶尔休息一下有时也能起到奇效。
- en: 6.4 Start Small, and Let Your Program Grow Incrementally!
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.4 从小做起，让你的程序逐步成长！
- en: When writing a program, think about what the actual task is that the program
    should accomplish, and what features your program really needs to accomplish it.
    Develop these first. Once the basic functionality is in place, you can add more
    complexity, step by step, to increase usability or to make the program more robust
    against user input errors.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 编写程序时，首先要考虑的是程序应该完成的实际任务是什么，程序实现这些任务真正需要哪些功能。先开发这些基本功能。一旦基本功能就绪，你可以逐步增加更多复杂性，以提高可用性或增强程序对用户输入错误的容错性。
- en: 6.5 Let Beauty Be Beauty!
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.5 让美丽成为美丽！
- en: It is important that your program works, that it does what it is supposed to
    do, and that it is robust, that it is not easily upset if, for example, the user
    makes an entry error. Far less important is that the program is a model of elegance
    and efficiency. You sometimes hear programmers talk about a piece of code being
    “elegant” or “beautiful.” Such epicurean statements are expressions of the commonly
    held view that programming is both a science and a (craft) art. Don’t go overboard
    with the art, though. A professional with years of experience may find your programs
    a bit clumsy and see some room for optimization. That’s not a bad thing, though.
    It’s better to try something new than to fiddle around with an already functional
    program to make it even more elegant. That way you learn a lot more!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你的程序是否能够正常运行、是否能够完成它应该完成的任务、是否足够稳健（例如，用户输入错误时不会轻易崩溃）是非常重要的。相对来说，程序是否优雅、高效则重要性较低。你有时会听到程序员谈论某段代码“优雅”或“美丽”。这些类似的表述反映了编程既是科学也是一门（工艺）艺术的普遍看法。不过，别过于沉迷于艺术。拥有多年经验的专业人士可能会觉得你的程序有些笨拙，并认为还有优化的空间。但这并不是什么坏事。尝试新东西总比在一个已经能正常工作的程序上纠结，使其更为优雅来得好。通过这种方式，你能学到更多！
- en: 6.6 Document!
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.6 文档化！
- en: Right at the beginning of your programmer life, get into the habit of documenting
    your program code, especially by annotating it with comments that explain how
    the code works. This is important so that you can understand your program later.
    Commenting is probably the most hated but at the same time one of the most valuable
    activities in programming. We will look at commenting in more detail in ► Chap.
    [10](474412_1_En_10_Chapter.xhtml).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在你作为程序员的职业生涯初期，就要养成为程序代码编写文档的习惯，尤其是通过注释来解释代码的工作原理。这一点非常重要，因为它能帮助你日后理解自己的程序。写注释可能是编程中最让人讨厌但同时又最有价值的活动之一。我们将在►
    第[10](474412_1_En_10_Chapter.xhtml)章中详细讨论注释。
