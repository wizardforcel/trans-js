- en: 数组示例
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 数组示例
- en: 在下一个示例中，我们创建一个函数，该函数从数组中提取一个小样本。我们期望有非常大的数组，因此我们的样本只是数组中的第一个、中间和最后一个值。
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在下一个示例中，我们创建一个函数，该函数从数组中提取一个小样本。我们期望有非常大的数组，因此我们的样本只是数组中的第一个、中间和最后一个值。
- en: 这是此函数的实现。看看你能否识别其在大`O`中的效率：
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是此函数的实现。看看你能否识别其在大`O`中的效率：
- en: '| ​  | `function` sample(array) { |'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` sample(array) { |'
- en: '| ​  | `if` (array.length === 0) { `return` `null`; } |'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (array.length === 0) { `return` `null`; } |'
- en: '| ​  |  |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `const` first = array[0]; |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` first = array[0]; |'
- en: '| ​  | `const` middle = array[Math.floor(array.length / 2)]; |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` middle = array[Math.floor(array.length / 2)]; |'
- en: '| ​  | `const` last = array[array.length - 1]; |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` last = array[array.length - 1]; |'
- en: '| ​  |  |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return` [first, middle, last]; |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` [first, middle, last]; |'
- en: '| ​  | } |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 在这种情况下，传入此函数的数组是主要数据，因此我们可以说`N`是此数组中的元素数量。
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这种情况下，传入此函数的数组是主要数据，因此我们可以说`N`是此数组中的元素数量。
- en: 然而，我们的函数在步骤数量上与`N`无关。读取数组的开头、中点和最后索引每次都只需一步，无论数组的大小如何。同样，找出数组的长度并将其除以`2`也只需一步。
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，我们的函数在步骤数量上与`N`无关。读取数组的开头、中点和最后索引每次都只需一步，无论数组的大小如何。同样，找出数组的长度并将其除以`2`也只需一步。
- en: 由于步骤数量是恒定的——也就是说，无论`N`是什么，它保持不变——因此此算法被视为`O(1)`。
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 由于步骤数量是恒定的——也就是说，无论`N`是什么，它保持不变——因此此算法被视为`O(1)`。
