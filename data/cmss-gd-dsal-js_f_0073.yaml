- en: Password Cracker
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 密码破解器
- en: 'You’re a hacker (an ethical one, of course) who’s trying to figure out someone’s
    password. You decide on a brute-force approach and write some code that produces
    every possible string of a given length. Here’s the code you whipped up:'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你是一个黑客（当然是道德黑客），正在试图破解某人的密码。你决定采用暴力破解的方法，编写一些代码来生成给定长度的所有可能字符串。下面是你写的代码：
- en: '| ​  | `function` everyPassword(length) { |'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` everyPassword(length) { |'
- en: '| ​  | `let` string = `''a''`.repeat(length); |'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` string = `''a''`.repeat(length); |'
- en: '| ​  | `console.log(string);` |'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `console.log(string);` |'
- en: '| ​  |  |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `while` (string !== `''z''`.repeat(length)) { |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while` (string !== `''z''`.repeat(length)) { |'
- en: '| ​  | `let` stringToBase36 = parseInt(string, 36); |'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` stringToBase36 = parseInt(string, 36); |'
- en: '| ​  | `stringToBase36 += 1;` |'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `stringToBase36 += 1;` |'
- en: '| ​  | `string = (stringToBase36.toString(36)).replace(/0/g, ''a'');` |'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `string = (stringToBase36.toString(36)).replace(/0/g, ''a'');` |'
- en: '| ​  | `console.log(string);` |'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `console.log(string);` |'
- en: '| ​  | `}` |'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `}` |'
- en: '| ​  | `}` |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `}` |'
- en: There’s a bit of complicated magic in this code, which thankfully, we don’t
    need to understand at this time. That’s because we’re not going to focus on how
    this code works, but rather what this code does.
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这段代码中有一些复杂的魔法，幸好我们目前不需要理解。这是因为我们不关注这段代码如何工作，而是关注这段代码的作用。
- en: When we call the `everyPassword` function, we pass in an integer, which becomes
    the variable length.
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当我们调用`everyPassword`函数时，我们传入一个整数，这个整数成为变量长度。
- en: 'If length is `3`，the code will return all possible strings within the range
    of `"aaa"` and `"zzz"`。 Running this code will print the following:'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果长度是`3`，代码将返回范围内的所有可能字符串，介于`"aaa"`和`"zzz"`之间。运行这段代码将打印以下内容：
- en: '| ​  | `aaa` |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `aaa` |'
- en: '| ​  | `aab` |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `aab` |'
- en: '| ​  | `aac` |'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `aac` |'
- en: '| ​  | `aad` |'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `aad` |'
- en: '| ​  | `aae` |'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `aae` |'
- en: '| ​  |  |'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | ... |'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ... |'
- en: '| ​  |  |'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `zzx` |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `zzx` |'
- en: '| ​  | `zzy` |'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `zzy` |'
- en: '| ​  | `zzz` |'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `zzz` |'
- en: 'If length is `4`，your code will print all possible strings of length `4`:'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果长度是`4`，你的代码将打印所有长度为`4`的可能字符串：
- en: '| ​  | `aaaa` |'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `aaaa` |'
- en: '| ​  | `aaab` |'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `aaab` |'
- en: '| ​  | `aaac` |'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `aaac` |'
- en: '| ​  | `aaad` |'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `aaad` |'
- en: '| ​  | `aaae` |'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `aaae` |'
- en: '| ​  |  |'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | ... |'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | ... |'
- en: '| ​  |  |'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `zzzx` |'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `zzzx` |'
- en: '| ​  | `zzzy` |'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `zzzy` |'
- en: '| ​  | `zzzz` |'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `zzzz` |'
- en: If you try running this code even for a mere length of `5`，you may be waiting
    some time for it to finish. This is a slow algorithm! But how do we express it
    in terms of Big O?
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你尝试运行这段代码，即使长度仅为`5`，你可能需要等待一段时间才能完成。这是一个慢算法！那么我们如何用大 O 表示它呢？
- en: Let’s break it down.
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们来分析一下。
- en: If we simply print each letter from the alphabet once, it will take `26` steps.
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果我们只打印字母表中的每个字母一次，将需要`26`步。
- en: When we print every two-character combination, we end up with `26` characters
    multiplied by `26` characters.
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当我们打印每个二字符组合时，我们得到了`26`个字符乘以`26`个字符。
- en: When printing every three-character combination, we end up with `26 * 26 * 26`
    combinations.
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在打印每个三字符组合时，我们得到了`26 * 26 * 26`个组合。
- en: Do you see the pattern?
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你看到了这个模式吗？
- en: '| Length | Combinations |'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 长度 | 组合 |'
- en: '| --- | --- |'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 1 | `26` |'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 1 | `26` |'
- en: '| 2 | `26²` |'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 2 | `26²` |'
- en: '| 3 | `26³` |'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 3 | `26³` |'
- en: '| 4 | `26⁴` |'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| 4 | `26⁴` |'
- en: If we look at this in terms of `N`，it emerges that if `N` is the length of each
    string, the number of combinations is `26^N`。
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果我们从`N`的角度来看，如果`N`是每个字符串的长度，组合的数量就是`26^N`。
- en: 'Therefore, in Big O notation, we express this as `O(26^N)`。 This is an utterly
    glacial algorithm! The truth is that even an algorithm that is a “mere” `O(2^N)`
    is incredibly slow. Let’s see how it looks on a graph compared to some of the
    other algorithms we’ve seen so far:'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因此，在大 O 表示法中，我们将其表示为`O(26^N)`。这是一个极其缓慢的算法！事实上，即使是一个“仅仅是”`O(2^N)`的算法也是非常慢的。让我们看看与我们目前看到的其他算法相比，它在图表上是怎样的：
- en: '![images/big_o_in_everyday_code/different_big_os.png](images/big_o_in_everyday_code/different_big_os.png)'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/big_o_in_everyday_code/different_big_os.png](images/big_o_in_everyday_code/different_big_os.png)'
- en: As you can see, `O(2^N)` gets even slower than `O(N³)` at a point.
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 正如你所看到的，`O(2^N)`在某一点上甚至比`O(N³)`更慢。
- en: In a certain sense, `O(2^N)` is the opposite of `O(log N)`。 With an algorithm
    of `O(log N)` (like binary search), each time the data is doubled, the algorithm
    takes one additional step. With an algorithm of `O(2^N)`，each time we add one
    element of data, the algorithm doubles in steps!
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 从某种意义上说，`O(2^N)`正好与`O(log N)`相反。在`O(log N)`（比如二分搜索）算法中，每次数据翻倍，算法会多一步。而在`O(2^N)`算法中，每次添加一个数据元素，算法的步骤会翻倍！
- en: In our password cracker, each time we increase `N` by one, the number of steps
    get multiplied by `26`. This takes an incredible amount of time, which is why
    brute force is such an inefficient way to crack a password.
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在我们的密码破解器中，每次我们将`N`增加一时，步骤数会乘以`26`。这需要耗费大量时间，这也是暴力破解密码如此低效的原因。
