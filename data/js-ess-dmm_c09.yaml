- en: '`Chapter 9`'
  id: totrans-0
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`第9章`'
- en: '`Debugging JavaScript`'
  id: totrans-1
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: '`调试JavaScript`'
- en: '`IN THIS CHAPTER`'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`本章内容`'
- en: '![Bullet](images/check.png) `Debugging errors using the Console`'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) `使用控制台调试错误`'
- en: '![Bullet](images/check.png) `Setting breakpoints`'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) `设置断点`'
- en: '![Bullet](images/check.png) `Stepping through JavaScript code`'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Bullet](images/check.png) `逐步调试JavaScript代码`'
- en: '`JavaScript` and modern web browsers offer a ton of top-notch debugging tools
    that can remove some of the burden of program problem solving. In this chapter,
    you delve into these tools to explore how they can help you find and fix most
    programming errors. You also investigate a number of tips and techniques that
    can go a long way in helping you avoid coding errors in the first place.  '
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`JavaScript`和现代网页浏览器提供了大量顶级的调试工具，可以减少程序问题解决的负担。在本章中，你将深入了解这些工具，探索它们如何帮助你发现并修复大多数编程错误。你还将研究一些技巧和方法，这些方法能帮助你在编写代码时避免错误。'
- en: All the major web browsers come with a sophisticated set of debugging tools
    that can make your life as a web developer much easier and much saner. Most web
    developers debug their scripts using `Google Chrome`, so I focus on that browser
    in this chapter. But in this section, I give you an overview of the tools that
    are available in all the major browsers and how to get at them.
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 所有主要的网页浏览器都配备了复杂的调试工具，可以让你的网页开发工作变得更加轻松和理智。大多数网页开发者使用`Google Chrome`来调试脚本，因此在本章中，我将重点介绍该浏览器。但在本节中，我会给你概述所有主要浏览器中可用的工具，并介绍如何使用这些工具。
- en: 'Here’s how you open the web development tools in `Chrome`, `Firefox`, `Microsoft
    Edge`, and `Safari`:'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 下面是如何在`Chrome`、`Firefox`、`Microsoft Edge`和`Safari`中打开网页开发工具：
- en: '`Chrome for Windows:` Click `Customize and Control Google Chrome` (the three
    vertical dots to the right of the address bar) and then select `More Tools ⇒ Developer
    Tools`. Shortcut: `Ctrl+Shift+I`.'
  id: totrans-9
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`Windows版Chrome:` 点击`自定义和控制Google Chrome`（地址栏右侧的三个垂直点），然后选择`更多工具 ⇒ 开发者工具`。快捷键：`Ctrl+Shift+I`。'
- en: '`Chrome for Mac:` Select `View ⇒ Developer ⇒ Developer Tools`. Shortcut: `Option+⌘    +I`.'
  id: totrans-10
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`Mac版Chrome:` 选择`查看 ⇒ 开发者 ⇒ 开发者工具`。快捷键：`Option+⌘    +I`。'
- en: '`Firefox for Windows:` Click `Open Application Menu` (the three horizontal
    lines on the far right of the toolbar) and then select `More Tools ⇒ Web Developer
    Tools`. Shortcut: `Ctrl+Shift+I`.'
  id: totrans-11
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`Windows版Firefox:` 点击`打开应用菜单`（工具栏右侧的三个横线），然后选择`更多工具 ⇒ Web开发者工具`。快捷键：`Ctrl+Shift+I`。'
- en: '`Firefox for Mac:` Select `Tools ⇒ Browser Tools ⇒ Web Developer Tools`. Shortcut:
    `Option+⌘    +I`.'
  id: totrans-12
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`Mac版Firefox:` 选择`工具 ⇒ 浏览器工具 ⇒ Web开发者工具`。快捷键：`Option+⌘    +I`。'
- en: '`Microsoft Edge:` Click `Settings and More` (the three vertical dots to the
    right of the address bar) and then select `More Tools ⇒ Developer Tools`. Shortcut:
    `Ctrl+Shift+I`.'
  id: totrans-13
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`Microsoft Edge:` 点击`设置与更多`（地址栏右侧的三个垂直点），然后选择`更多工具 ⇒ 开发者工具`。快捷键：`Ctrl+Shift+I`。'
- en: '`Safari:` Select `Develop ⇒ Show Web Inspector`. Shortcut: `Option+⌘    +I`.
    If you don’t have the Develop menu, select `Safari ⇒ Settings`, click the `Advanced`
    tab, and then select the `Show Develop Menu in Menu Bar` checkbox.'
  id: totrans-14
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`Safari:` 选择`开发 ⇒ 显示Web检查器`。快捷键：`Option+⌘    +I`。如果没有开发菜单，选择`Safari ⇒ 设置`，点击`高级`标签页，然后勾选`在菜单栏中显示开发菜单`复选框。'
- en: 'These development tools vary in the features they offer, but each one provides
    the same set of basic tools, which are the tools you’ll use most often. These
    basic web development tools include the following:'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这些开发工具的功能有所不同，但每个工具都提供了一组基本工具，这些工具是你最常使用的。以下是这些基本网页开发工具：
- en: '`HTML viewer:` This tab (called `Inspector` in Firefox and `Elements` in the
    other browsers) shows the HTML source code used in the web page. When you hover
    the mouse pointer over a tag, the browser highlights the element in the displayed
    page and shows its width and height, as shown in [Figure 9-1](#c09-fig-0001).
    When you click a tag, the browser shows the CSS styles applied with the tag, as
    well as the tag’s box dimensions (again, refer to [Figure 9-1](#c09-fig-0001)).'
  id: totrans-16
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`HTML查看器:` 这个标签页（在Firefox中叫做`Inspector`，在其他浏览器中叫做`Elements`）显示了网页使用的HTML源代码。当你将鼠标悬停在某个标签上时，浏览器会高亮显示该元素，并显示它的宽度和高度，如[图9-1](#c09-fig-0001)所示。当你点击某个标签时，浏览器会显示与该标签应用的CSS样式，以及标签的框尺寸（同样，请参考[图9-1](#c09-fig-0001)）。'
- en: '`Console:` This tab enables you to view error messages, log messages, test
    expressions, and execute statements. I cover the `Console` in more detail in the
    next section.'
  id: totrans-17
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`控制台:` 这个标签页让你查看错误消息、日志消息、测试表达式和执行语句。我将在下一节中更详细地介绍`控制台`。'
- en: '`Debugging tool:` 这个选项卡（在Firefox中称为`Debugger`，在其他浏览器中称为`Sources`）使你能够暂停代码执行、逐步执行代码、观察变量和属性的值等等。这是最重要的JavaScript调试工具，因此我在本章后面详细介绍它。'
  id: totrans-18
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`调试工具:` 这个选项卡（在Firefox中称为`Debugger`，在其他浏览器中称为`Sources`）使你能够暂停代码执行、逐步执行代码、观察变量和属性的值等等。这是最重要的JavaScript调试工具，因此我在本章后面详细介绍它。'
- en: '`Network:` 这个选项卡告诉你加载网页中引用的每个文件需要多长时间。如果你发现页面加载缓慢，这个选项卡可以帮助你找到瓶颈。'
  id: totrans-19
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`Network:` 这个选项卡告诉你加载网页中引用的每个文件需要多长时间。如果你发现页面加载缓慢，这个选项卡可以帮助你找到瓶颈。'
- en: '`Web storage:` 这个选项卡（在Chrome和Edge中称为`Application`，在Firefox和Safari中称为`Storage`）使你能够检查存储在浏览器中的数据。'
  id: totrans-20
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`Web storage:` 这个选项卡（在Chrome和Edge中称为`Application`，在Firefox和Safari中称为`Storage`）使你能够检查存储在浏览器中的数据。'
- en: '![A snapshot of the Chrome’s Elements tab. The selected element is highlighted
    and the elements width and height are mentioned.](images/9781394263219-fg0901.png)'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![Chrome的Elements选项卡的快照。选中的元素被突出显示，并且提到了元素的宽度和高度。](images/9781394263219-fg0901.png)'
- en: '[FIGURE 9-1:](#rc09-fig-0001) HTML查看器，例如Chrome的`Elements`选项卡，使你能够检查每个元素的样式和框
    dimensions。  ## 调试101：使用控制台'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[图9-1:](#rc09-fig-0001) HTML查看器，例如Chrome的`Elements`选项卡，使你能够检查每个元素的样式和框架尺寸。  ##
    调试101：使用控制台'
- en: 如果你的网页行为异常——例如，页面为空或缺少元素——你应该首先检查HTML代码以确保它是正确的。（常见的HTML错误包括未用大于号（`>`）结束标签、未包含结束标签，以及缺少属性值的结束引号。）如果你的HTML检查通过，很有可能你的JavaScript代码存在问题。你怎么知道？首先要去控制台窗口查看。
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你的网页行为异常——例如，页面为空或缺少元素——你应该首先检查HTML代码以确保它是正确的。（常见的HTML错误包括未用大于号（`>`）结束标签、未包含结束标签，以及缺少属性值的结束引号。）如果你的HTML检查通过，很有可能你的JavaScript代码存在问题。你怎么知道？首先要去控制台窗口查看。
- en: 控制台是一个交互式浏览器窗口，显示警告和错误，显示`console.log()`语句的输出，并使你能够执行表达式和语句，而不必运行整个脚本。控制台是最方便的网页浏览器调试工具之一，因此你需要熟悉它。
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 控制台是一个交互式浏览器窗口，显示警告和错误，显示`console.log()`语句的输出，并使你能够执行表达式和语句，而不必运行整个脚本。控制台是最方便的网页浏览器调试工具之一，因此你需要熟悉它。
- en: '### 获取控制台显示'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '### 获取控制台显示'
- en: 要显示控制台，打开你网页浏览器的开发工具，然后点击控制台选项卡。你还可以使用以下键盘快捷键：
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要显示控制台，打开你网页浏览器的开发工具，然后点击控制台选项卡。你还可以使用以下键盘快捷键：
- en: '`Chrome for Windows:` 按`Ctrl+Shift+J`。'
  id: totrans-27
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`Chrome for Windows:` 按`Ctrl+Shift+J`。'
- en: '`Chrome for Mac:` 按`Option+⌘    +J`。'
  id: totrans-28
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`Chrome for Mac:` 按`Option+⌘    +J`。'
- en: '`Firefox for Windows:` 按`Ctrl+Shift+K`。'
  id: totrans-29
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`Firefox for Windows:` 按`Ctrl+Shift+K`。'
- en: '`Firefox for Mac:` 按`Option+⌘    +K`。'
  id: totrans-30
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`Firefox for Mac:` 按`Option+⌘    +K`。'
- en: '`Microsoft Edge:` 按`Ctrl+Shift+J`。'
  id: totrans-31
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`Microsoft Edge:` 按`Ctrl+Shift+J`。'
- en: '`Safari:` 按`Option+⌘    +C`。  ### 在控制台中打印程序数据'
  id: totrans-32
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`Safari:` 按`Option+⌘    +C`。  ### 在控制台中打印程序数据'
- en: 你可以使用`console.log()`方法的特殊`Console`对象在控制台中打印文本和表达式值：
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你可以使用`console.log()`方法的特殊`Console`对象在控制台中打印文本和表达式值：
- en: '`console.log(output)`'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.log(output)`'
- en: '`Note:` `output`是你想在控制台中打印的表达式。'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`注意:` `output`是你想在控制台中打印的表达式。'
- en: '`output`表达式可以是文本字符串、变量、对象属性、函数结果或这些的任何组合。'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`output`表达式可以是文本字符串、变量、对象属性、函数结果或这些的任何组合。'
- en: '![Tip](images/tip.png) 你还可以使用方便的`console.table()`方法以易于阅读的表格格式输出数组或对象的值：'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![提示](images/tip.png) 你还可以使用方便的`console.table()`方法以易于阅读的表格格式输出数组或对象的值：'
- en: '`console.table(output)`'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.table(output)`'
- en: '`Note:` `output`是你想在控制台中查看的数组或对象（作为变量或字面量）。'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`注意:` `output`是你想在控制台中查看的数组或对象（作为变量或字面量）。'
- en: 出于调试目的，您最常使用`Console`来监视变量、对象属性和表达式的值。也就是说，当您的代码设置或更改某个值时，您插入一个`console.log()`（或`console.table()`）语句来输出新值。当脚本执行完成后，您可以打开`Console`，然后查看记录的值。
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 出于调试目的，你最常使用`Console`来监视变量、对象属性和表达式的值。也就是说，当你的代码设置或更改某个值时，你插入一个`console.log()`（或`console.table()`）语句来输出新值。当脚本执行完成后，你可以打开`Console`，然后查看记录的值。
- en: '`Console`的一个伟大特性是它是交互式的，这意味着您不仅可以阅读浏览器或您的`console.log()`语句生成的消息，还可以直接在`Console`中输入代码。也就是说，您可以使用`Console`执行表达式和语句。这个特性的用途很多：'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Console`的一个伟大特性是它是交互式的，这意味着你不仅可以阅读浏览器或你的`console.log()`语句生成的消息，还可以直接在`Console`中输入代码。也就是说，你可以使用`Console`执行表达式和语句。这个特性的用途很多：'
- en: 您可以尝试一些实验性的表达式或语句，以确定它们对脚本的影响。
  id: totrans-42
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 你可以尝试一些实验性的表达式或语句，以确定它们对脚本的影响。
- en: 当脚本暂停时，您可以输出变量或属性的当前值。
  id: totrans-43
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 当脚本暂停时，你可以输出变量或属性的当前值。
- en: 当脚本暂停时，您可以更改变量或属性的值。例如，如果您注意到一个值为零的变量即将用作除数，您可以将该变量更改为非零值，以避免脚本崩溃。
  id: totrans-44
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 当脚本暂停时，你可以更改变量或属性的值。例如，如果你注意到某个值为零的变量即将用作除数，你可以将该变量更改为非零值，以避免脚本崩溃。
- en: 当脚本暂停时，您可以运行一个函数或方法，以确定它在当前条件下是否按预期工作。
  id: totrans-45
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 当脚本暂停时，你可以运行一个函数或方法，以确认它在当前条件下是否按预期工作。
- en: 每个浏览器的`Console`标签都包含一个文本框（通常由大于号`>`提示标记），您可以在其中输入表达式或语句。
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 每个浏览器的`Console`标签都包含一个文本框（通常由大于号`>`提示标记），你可以在其中输入表达式或语句。
- en: '![Tip](images/tip.png) 您可以通过用分号分隔每个语句来在`Console`中执行多个语句。例如，您可以通过输入类似于以下的语句来测试`for…`循环：'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![提示](images/tip.png) 你可以通过用分号分隔每个语句来在`Console`中执行多个语句。例如，你可以通过输入类似于以下的语句来测试`for…`循环：'
- en: '``for (let i=1; i < 10; i += 1){console.log(i**2); console.log(i**3);}``'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '``for (let i=1; i < 10; i += 1){console.log(i**2); console.log(i**3);}``'
- en: '![Tip](images/tip.png) 如果您想在`Console`中重复先前的代码执行，或者如果您想运行一些与您之前运行的代码非常相似的代码，您可以回忆起当前浏览器会话中使用的语句和表达式。按`Up
    Arrow`键可以向后滚动查看之前执行的代码；按`Down Arrow`键可以向前滚动查看您的代码。 ## Putting Your Code into Break
    Mode'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![提示](images/tip.png) 如果你想在`Console`中重复先前的代码执行，或者如果你想运行一些与之前执行的代码非常相似的代码，你可以回顾当前浏览器会话中使用的语句和表达式。按`Up
    Arrow`键可以向后滚动查看之前执行的代码；按`Down Arrow`键可以向前滚动查看你的代码。 ## 将代码置于断点模式'
- en: 在代码中途暂停可以让您检查某些元素，例如变量和属性的当前值。它还允许您逐条执行程序代码，以便监控脚本的流程。
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在代码中途暂停可以让你检查某些元素，例如变量和属性的当前值。它还允许你逐条执行程序代码，以便监控脚本的流程。
- en: When you pause your code, JavaScript enters `break mode`，这意味着浏览器显示其调试工具并高亮当前语句（JavaScript将要执行的下一条语句）。`[Figure
    9-2](#c09-fig-0002)`显示了Chrome调试器（`Sources`标签）中的`break mode`脚本。
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当你暂停代码时，JavaScript进入`break mode`，这意味着浏览器显示其调试工具并高亮当前语句（JavaScript将要执行的下一条语句）。`[图9-2](#c09-fig-0002)`显示了Chrome调试器（`Sources`标签）中的`break
    mode`脚本。
- en: '![A snapshot of the web browser displays its debugging tool and highlights
    the statement that it will execute next.](images/9781394263219-fg0902.png)'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![网页浏览器的快照，显示其调试工具并突出显示将要执行的语句。](images/9781394263219-fg0902.png)'
- en: '[FIGURE 9-2:](#rc09-fig-0002) When you invoke break mode, the web browser displays
    its debugging tool and highlights the statement that it will execute next.'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[图9-2:](#rc09-fig-0002) 当你调用断点模式时，网页浏览器显示其调试工具并突出显示将要执行的下一条语句。'
- en: '### Invoking break mode'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '### 调用断点模式'
- en: '`JavaScript` gives you two ways to enter break mode:'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`JavaScript`为你提供了两种进入断点模式的方法：'
- en: By setting breakpoints
  id: totrans-56
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 通过设置断点
- en: By using a `debugger` statement
  id: totrans-57
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 通过使用`debugger`语句
- en: '#### Setting a breakpoint'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '#### 设置断点'
- en: 'If you know approximately where an error or logic flaw is occurring, you can
    enter break mode at a specific statement in the script by setting up a `breakpoint`.
    Here are the steps to set up a breakpoint:'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 如果你大致知道错误或逻辑缺陷发生的位置，可以通过设置`断点`来在脚本中的特定语句处进入断点模式。设置断点的步骤如下：
- en: Display your web browser’s developer tools and switch to the debugging tool
    (such as the `Sources` tab in `Chrome`).
  id: totrans-60
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 显示你网页浏览器的开发者工具，并切换到调试工具（例如`Chrome`中的`Sources`标签）。
- en: Open the file that contains the `JavaScript` code you want to debug.
  id: totrans-61
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 打开包含你想调试的`JavaScript`代码的文件。
- en: 'How you do this depends on the browser: in `Chrome` (and most browsers), you
    have two choices:'
  id: totrans-62
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 如何操作取决于浏览器：在`Chrome`（以及大多数浏览器）中，你有两种选择：
- en: In the left pane, click the `HTML` file (if your `JavaScript` code is within
    a `script` element in your `HTML` file) or the `JavaScript` (`.js`) file (if your
    code resides in an external `JavaScript` file).
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 在左侧窗格中，点击`HTML`文件（如果你的`JavaScript`代码位于`HTML`文件中的`script`元素内）或`JavaScript`（`.js`）文件（如果你的代码位于外部`JavaScript`文件中）。
- en: Press `Ctrl+P` (Windows) or `⌘    +P` (macOS) and then click the file in the
    list that appears.
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 按`Ctrl+P`（Windows）或`⌘+P`（macOS），然后点击弹出列表中的文件。
- en: Locate the statement where you want to enter break mode.
  id: totrans-65
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 定位到你希望进入断点模式的语句。
- en: '`JavaScript` will run every line of code up to, but not including, this statement.'
  id: totrans-66
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: '`JavaScript`会执行每一行代码，直到但不包括该语句。'
- en: Click the line number to the left of the statement to set the breakpoint, as
    shown in [Figure 9-3](#c09-fig-0003).
  id: totrans-67
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 点击语句左侧的行号设置断点，如[图9-3](#c09-fig-0003)所示。
- en: '![A snapshot of the browser’s debugging tool, click a line number to set a
    breakpoint on that statement.](images/9781394263219-fg0903.png)'
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![浏览器调试工具的截图，点击行号为该语句设置断点。](images/9781394263219-fg0903.png)'
- en: '[FIGURE 9-3:](#rc09-fig-0003) In the browser’s debugging tool, click a line
    number to set a breakpoint on that statement.'
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '[图9-3：](#rc09-fig-0003) 在浏览器的调试工具中，点击行号为该语句设置断点。'
- en: 'To remove a breakpoint, most browsers give you three choices:'
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要删除一个断点，大多数浏览器提供三种选择：
- en: To disable a breakpoint temporarily, deselect the breakpoint’s checkbox in the
    `Breakpoints` list.
  id: totrans-71
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 要暂时禁用一个断点，可以在`断点`列表中取消勾选该断点的复选框。
- en: '![9781394263219-ma0901](images/9781394263219-ma0901.png)To disable all your
    breakpoints temporarily, click the `Deactivate Breakpoint` button. `Chrome`’s
    version of this button is shown here in the margin. Click this button again to
    reactivate all the breakpoints.'
  id: totrans-72
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '![9781394263219-ma0901](images/9781394263219-ma0901.png)要暂时禁用所有断点，点击`停用断点`按钮。`Chrome`版本的此按钮如图所示，位于边栏。再次点击此按钮可重新启用所有断点。'
- en: 'To remove a breakpoint completely, click the statement’s line number.  ####
    Adding a `debugger` statement'
  id: totrans-73
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '要完全删除断点，点击该语句的行号。  #### 添加`debugger`语句'
- en: When developing your web pages, you’ll often test the robustness of a script
    by sending it various test values or by trying it out under different conditions.
    In many cases, you’ll want to enter break mode to make sure things appear okay.
    You could set breakpoints at specific statements, but you lose them if you close
    the file. For something a little more permanent, you can include a `debugger`
    statement in a script. `JavaScript` automatically enters break mode whenever it
    encounters a `debugger` statement.
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在开发网页时，你经常会通过发送不同的测试值或在不同条件下测试脚本的鲁棒性。在很多情况下，你可能希望进入断点模式，确保一切正常。你可以在特定的语句处设置断点，但如果关闭文件，断点会丢失。为了更持久一点，你可以在脚本中包含一个`debugger`语句。每当`JavaScript`遇到`debugger`语句时，它会自动进入断点模式。
- en: 'Here’s a bit of code that includes a `debugger` statement:'
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 下面是一段包含`debugger`语句的代码：
- en: '`// Add the sentence to the <div> document.querySelector(''div'').innerHTML
    = sentence; // Generate random colors (use values < 128 to keep the text dark)
    const randomRed = parseInt(Math.random() * 128); const randomGreen = parseInt(Math.random()
    * 128); const randomBlue = parseInt(Math.random() * 128); debugger;`  ### Getting
    out of break mode'
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// 将语句添加到 <div> document.querySelector(''div'').innerHTML = sentence; // 生成随机颜色（使用小于128的值保持文字颜色较深）
    const randomRed = parseInt(Math.random() * 128); const randomGreen = parseInt(Math.random()
    * 128); const randomBlue = parseInt(Math.random() * 128); debugger;`  ### 退出断点模式'
- en: 'To exit break mode, you can use either of the following methods in the browser’s
    debugging tool:'
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要退出断点模式，你可以在浏览器的调试工具中使用以下任意方法：
- en: '![9781394263219-ma0902](images/9781394263219-ma0902.png) Click the `Resume`
    button. Chrome’s version of this button is shown here in the margin.'
  id: totrans-78
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '![9781394263219-ma0902](images/9781394263219-ma0902.png) 点击`继续`按钮。Chrome版本的此按钮如图所示，位于边栏。'
- en: 'Press the browser’s `Resume` keyboard shortcut. In `Chrome` (and most browsers),
    either press `F8` or press `Ctrl+\` (Windows) or `⌘    +\` (macOS).  ## Stepping
    Through Your Code'
  id: totrans-79
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '按下浏览器的`Resume`快捷键。在`Chrome`（以及大多数浏览器）中，可以按`F8`，或者按`Ctrl+\`（Windows）或`⌘    +\`（macOS）。
    ## 逐步执行你的代码'
- en: 'One of the most common (and most useful) debugging techniques is to step through
    the code one statement at a time. Doing so lets you get a feel for the program
    flow to make sure that things such as loops and function calls are executing properly.
    You can use four techniques:'
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 最常见（且最有用）的调试技巧之一是逐语句执行代码。这样可以让你更好地理解程序流，确保诸如循环和函数调用等部分能够正确执行。你可以使用四种技巧：
- en: Stepping one statement at a time
  id: totrans-81
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 一次执行一个语句
- en: Stepping into some code
  id: totrans-82
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 进入一些代码
- en: Stepping over some code
  id: totrans-83
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 跳过某些代码
- en: Stepping out of some code
  id: totrans-84
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 跳出某些代码
- en: '### Stepping one statement at a time'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '### 一次执行一个语句'
- en: 'The most common way of stepping through your code is to step one statement
    at a time. In break mode, stepping one statement at a time means two things:'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 最常见的逐步执行代码的方式是逐条执行语句。在断点模式下，逐条执行语句意味着两件事：
- en: You execute the current statement and then pause on the next statement.
  id: totrans-87
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 执行当前语句，然后在下一个语句处暂停。
- en: If the current statement to run is a function call, stepping takes you into
    the function and pauses at the function’s first statement. You can then continue
    to step through the function until you execute the last statement, at which point
    the browser returns you to the statement after the function call.
  id: totrans-88
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 如果当前要执行的语句是一个函数调用，逐步执行会将你带入该函数并在函数的第一条语句处暂停。然后你可以继续逐步执行函数，直到执行完最后一条语句，浏览器会将你带回函数调用后的语句。
- en: 'To step through your code one statement at a time, set a breakpoint and then,
    after your code is in break mode, do one of the following to step through a single
    statement:'
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要逐语句执行代码，请设置一个断点，然后在代码进入断点模式后，执行以下任一操作来逐个执行语句：
- en: '![9781394263219-ma0903](images/9781394263219-ma0903.png) Click the `Step` button.
    Chrome’s version of this button is shown here in the margin.'
  id: totrans-90
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '![9781394263219-ma0903](images/9781394263219-ma0903.png) 点击`Step`按钮。Chrome版本的此按钮显示在边栏中。'
- en: Press the browser’s `Step` keyboard shortcut. In `Chrome` (and most browsers,
    except `Firefox`, which doesn’t support `Step` as of this writing; use the `Step
    Into` button, instead), press `F9`.
  id: totrans-91
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: 按下浏览器的`Step`快捷键。在`Chrome`（以及大多数浏览器，除了`Firefox`，在本篇写作时不支持`Step`，请改用`Step Into`按钮）中，按`F9`。
- en: 'Keep stepping through until the script ends or until you’re ready to resume
    normal execution (by clicking `Resume`).  ### Stepping into some code'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '持续逐步执行直到脚本结束，或者直到你准备好恢复正常执行（通过点击`Resume`）。 ### 进入一些代码'
- en: In all the major browsers (except `Firefox`), stepping into some code is exactly
    the same as stepping through the code one statement at a time. The difference
    comes when a statement executes asynchronously (that is, it performs its operation
    after some delay rather than right away).
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在所有主流浏览器中（除了`Firefox`），进入一些代码与逐语句执行代码是完全相同的。差别出现在语句异步执行时（即，它在一些延迟后执行操作，而不是立刻执行）。
- en: 'To understand the difference, consider the following code (I’ve added line
    numbers to the left; they’re not part of the code):'
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为了理解其区别，考虑以下代码（我在左侧添加了行号；这些不是代码的一部分）：
- en: '`1 setTimeout(() => { 2 console.log(''Inside the setTimeout() block!''); 3
    }, 5000); 4 console.log(''Outside the setTimeout) block!'');`'
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`1 setTimeout(() => { 2 console.log(''Inside the setTimeout() block!''); 3
    }, 5000); 4 console.log(''Outside the setTimeout) block!'');`'
- en: 这段代码使用`setTimeout()`在五秒后执行一个匿名函数。假设你在`setTimeout()`语句（第1行）处进入了断点模式。如果在这里使用`Step`与`Step
    Into`，会发生什么呢？看看吧：
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这段代码使用`setTimeout()`在五秒后执行一个匿名函数。假设你在`setTimeout()`语句（第1行）处进入了断点模式。如果在这里使用`Step`与`Step
    Into`，会发生什么呢？看看吧：
- en: '`Step:` 点击`Step`按钮不会将你带到第2行，正如你可能期望的那样。相反，由于`setTimeout()`是异步的，`Step`本质上忽略了匿名函数，直接跳转到第4行。'
  id: totrans-97
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`Step:` 点击`Step`按钮不会将你带到第2行，正如你可能期望的那样。相反，由于`setTimeout()`是异步的，`Step`本质上忽略了匿名函数，直接跳转到第4行。'
- en: '`Step Into:` 点击`Step Into`按钮`确实`将你带到第2行，但仅在指定的延迟（此情况下为五秒）之后。然后你可以根据需要逐步进入匿名函数。'
  id: totrans-98
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`Step Into:` 点击`Step Into`按钮`确实`将你带到第2行，但仅在指定的延迟（此情况下为五秒）之后。然后你可以根据需要逐步进入匿名函数。'
- en: 要进入你的代码，设置一个断点，然后在你的代码处于断点模式后，执行以下任一操作：
  id: totrans-99
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要进入你的代码，设置一个断点，然后在代码进入断点模式后，执行以下任一操作：
- en: '![9781394263219-ma0904](images/9781394263219-ma0904.png) `Click the Step Into
    button.` Chrome的这个按钮在边栏中显示。'
  id: totrans-100
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '![9781394263219-ma0904](images/9781394263219-ma0904.png) `点击Step Into按钮。` Chrome的这个按钮在边栏中显示。'
- en: '`Press the browser’s Step Into keyboard shortcut.` 在Chrome（以及大多数浏览器）中，可以按`F11`或者按`Ctrl+;`（Windows）或`⌘    +;`（macOS）。'
  id: totrans-101
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`按下浏览器的Step Into快捷键。` 在Chrome（以及大多数浏览器）中，可以按`F11`或者按`Ctrl+;`（Windows）或`⌘    +;`（macOS）。'
- en: '![Remember](images/remember.png) 我在这里对`Step Into`的描述并不适用于Firefox（至少在我写这篇时如此）。相反，Firefox的`Step
    Into`功能类似于我在上一节中描述的`Step`功能。 ### 跳过一些代码'
  id: totrans-102
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '![Remember](images/remember.png) 我在这里对`Step Into`的描述并不适用于Firefox（至少在我写这篇时如此）。相反，Firefox的`Step
    Into`功能类似于我在上一节中描述的`Step`功能。 ### 跳过一些代码'
- en: 一些语句调用其他函数。如果你不想逐步进入被调用的函数，你可以跳过它。跳过一个函数意味着JavaScript正常执行该函数，然后在下一个语句`之后`恢复断点模式。
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 一些语句调用其他函数。如果你不想逐步进入被调用的函数，你可以跳过它。跳过一个函数意味着 JavaScript 正常执行该函数，然后在下一个语句`之后`恢复断点模式。
- en: 要跳过一个函数，首先可以逐行执行代码直到到达你想跳过的函数调用，或者在函数调用上设置一个断点并刷新网页。当你处于断点模式时，可以使用以下任一技术来跳过函数：
  id: totrans-104
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要跳过一个函数，首先可以逐行执行代码直到到达你想跳过的函数调用，或者在函数调用上设置一个断点并刷新网页。当你处于断点模式时，可以使用以下任一技术来跳过函数：
- en: '![9781394263219-ma0905](images/9781394263219-ma0905.png) `Click the Step Over
    button.` Chrome的这个按钮在边栏中显示。'
  id: totrans-105
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '![9781394263219-ma0905](images/9781394263219-ma0905.png) `点击 Step Over 按钮`。Chrome
    的这个按钮在边栏中显示。'
- en: '`Press the browser’s Step Over keyboard shortcut.` 在Chrome（以及大多数浏览器）中，可以按`F10`或者按`Ctrl+''`（Windows）或`⌘    +''`（macOS）。
    ### 跳出一些代码'
  id: totrans-106
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`按浏览器的 Step Over 快捷键`。在 Chrome（以及大多数浏览器）中，可以按 `F10` 或者按 `Ctrl+''`（Windows）或
    `⌘    +''`（macOS）。 ### 跳出一些代码'
- en: 我总是意外地进入我宁愿跳过的函数。如果函数很短，我就逐步执行它直到回到原始代码。如果函数很长，我不想浪费时间逐行执行每个语句。相反，我使用以下任一方法调用`Step
    Out`功能：
  id: totrans-107
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我总是意外地进入我宁愿跳过的函数。如果函数很短，我就逐步执行它直到回到原始代码。如果函数很长，我不想浪费时间逐行执行每个语句。相反，我使用以下任一方法调用
    `Step Out` 功能：
- en: '![9781394263219-ma0906](images/9781394263219-ma0906.png) `Click the Step Out
    button.` Chrome的这个按钮在边栏中显示。'
  id: totrans-108
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '![9781394263219-ma0906](images/9781394263219-ma0906.png) `点击 Step Out 按钮`。Chrome
    的这个按钮在边栏中显示。'
- en: '`Press the browser’s Step Out keyboard shortcut.` 在Chrome（以及大多数浏览器）中，可以按`Shift+F11`或者按`Ctrl+Shift+;`（Windows）或`⌘    +Shift+;`（macOS）。'
  id: totrans-109
  prefs:
  - PREF_UL
  stylish: true
  type: TYPE_NORMAL
  zh: '`按浏览器的 Step Out 快捷键`。在 Chrome（以及大多数浏览器）中，可以按 `Shift+F11` 或者按 `Ctrl+Shift+;`（Windows）或
    `⌘    +Shift+;`（macOS）。'
- en: JavaScript执行函数的其余部分，然后在函数调用后的第一行重新进入断点模式。
  id: totrans-110
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: JavaScript 执行函数的其余部分，然后在函数调用后的第一行重新进入断点模式。
