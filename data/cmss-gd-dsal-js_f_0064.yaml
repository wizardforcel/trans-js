- en: 第7章
  id: totrans-0
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 第7章
- en: 日常代码中的`Big O`
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 日常代码中的`Big O`
- en: 在之前的章节中，你学习了如何使用`Big O`符号来表达代码的时间复杂度。正如你所看到的，`Big O`分析涉及许多细节。在这一章中，我们将利用你迄今为止学到的所有知识来分析可能出现在真实世界代码库中的实际代码示例的效率。
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在之前的章节中，你学习了如何使用`Big O`符号来表达代码的时间复杂度。正如你所看到的，`Big O`分析涉及许多细节。在这一章中，我们将利用你迄今为止学到的所有知识来分析可能出现在真实世界代码库中的实际代码示例的效率。
- en: 确定我们代码的效率是优化的第一步。毕竟，如果我们不知道代码的执行速度，那么我们怎么能知道我们的修改是否会让它更快呢？
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 确定我们代码的效率是优化的第一步。毕竟，如果我们不知道代码的执行速度，那么我们怎么能知道我们的修改是否会让它更快呢？
- en: 此外，一旦我们知道我们的代码在`Big O`符号中的分类，我们就可以判断它是否可能需要优化。例如，一个算法是`O(N²)`通常被认为是一个慢算法。因此，如果我们确定我们的算法属于这样的类别，我们应该停下来想想是否有优化它的方法。
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 此外，一旦我们知道我们的代码在`Big O`符号中的分类，我们就可以判断它是否可能需要优化。例如，一个算法是`O(N²)`通常被认为是一个慢算法。因此，如果我们确定我们的算法属于这样的类别，我们应该停下来想想是否有优化它的方法。
- en: 当然，对于给定的问题，`O(N²)`可能是我们能做到的最好表现。然而，知道我们的算法被认为是慢的，可以提醒我们深入挖掘并分析是否有更快的替代方案可用。
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 当然，对于给定的问题，`O(N²)`可能是我们能做到的最好表现。然而，知道我们的算法被认为是慢的，可以提醒我们深入挖掘并分析是否有更快的替代方案可用。
- en: 在本书的未来章节中，你将学习许多优化代码速度的技术。但优化的第一步是能够确定我们当前代码的执行速度。
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在本书的未来章节中，你将学习许多优化代码速度的技术。但优化的第一步是能够确定我们当前代码的执行速度。
- en: 所以让我们开始吧。
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 所以让我们开始吧。
