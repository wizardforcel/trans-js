- en: 'Chapter 1: Understanding the Basics of React JS'
  id: totrans-0
  prefs:
  - PREF_H1
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章：理解 React JS 的基础
- en: Welcome to the world of React JS, an exciting journey into the realm of web
    development where dynamic user interfaces come to life with elegance and efficiency.
    In this chapter, we will embark on a comprehensive exploration of React JS, from
    its origins and core concepts to its practical applications. By the end of this
    chapter, you will have a solid foundation in understanding what React JS is and
    why it has become a staple in modern web development.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到 React JS 的世界，这是一段令人兴奋的旅程，带你进入 Web 开发的领域，在这里动态的用户界面将优雅且高效地呈现。在这一章中，我们将全面探索
    React JS，从它的起源和核心概念到实际应用。到本章结束时，你将对 React JS 有一个坚实的基础，理解它是什么以及为何它已成为现代 Web 开发中的重要组成部分。
- en: The Genesis of React JS
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: React JS 的诞生
- en: Let's begin our journey by stepping back in time to understand the origins of
    React JS. React, also known as React.js or ReactJS, was born at Facebook, one
    of the world's leading social media giants. In 2011, Jordan Walke, a software
    engineer at Facebook, created the first version of React. His initial goal was
    to address the challenges of developing large-scale, high-traffic web applications,
    which were becoming increasingly common in the digital landscape.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从回顾历史开始，了解 React JS 的起源。React，也被称为 React.js 或 ReactJS，诞生于 Facebook 这家全球领先的社交媒体巨头。2011年，Facebook
    的软件工程师乔丹·沃尔克（Jordan Walke）创建了 React 的第一个版本。他最初的目标是解决开发大规模、高流量 web 应用程序时面临的挑战，这类应用在数字化环境中变得越来越普遍。
- en: The traditional approach to web development involved manipulating the Document
    Object Model (DOM) directly. While this approach worked, it often led to complex
    and error-prone code. Updates to the DOM were sluggish, resulting in a less responsive
    user experience. Facebook needed a better solution to meet its growing demands,
    and React emerged as the answer.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的 Web 开发方法是直接操作文档对象模型（DOM）。虽然这种方法可行，但它往往导致代码复杂且容易出错。对 DOM 的更新较为缓慢，导致用户体验不够流畅。Facebook
    需要一个更好的解决方案来应对日益增长的需求，而 React 正是这一解决方案的答案。
- en: Component-Based Architecture
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于组件的架构
- en: At the heart of React lies its component-based architecture. Imagine a user
    interface as a puzzle, where each piece represents a self-contained unit responsible
    for a specific part of the user interface. These puzzle pieces are React components.
    They encapsulate both the visual elements and the logic behind them, making it
    easier to reason about and manage your UI.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 React 的核心是其基于组件的架构。可以将用户界面想象成一个拼图，每个拼图块代表一个独立的单元，负责用户界面的某一特定部分。这些拼图块就是 React
    组件。它们封装了视觉元素和背后的逻辑，使得管理和推理你的 UI 变得更加容易。
- en: In the React world, components are king. They are reusable, composable, and
    maintainable. This component-centric approach aligns perfectly with the way developers
    think about building user interfaces. Instead of dealing with sprawling, interconnected
    code, React encourages breaking your UI into discrete, manageable components.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在 React 的世界里，组件是王者。它们是可重用、可组合和可维护的。这种以组件为中心的方法与开发者构建用户界面的思维方式完全契合。React 鼓励将
    UI 拆分为离散、易于管理的组件，而不是处理庞大、互相交织的代码。
- en: 'Here''s a critical concept to grasp: a React component can be a function or
    a class in JavaScript. These components define what should be rendered to the
    screen. Components can be as simple as a button or as complex as an entire user
    profile with multiple interactive elements.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个关键概念：React 组件可以是 JavaScript 中的函数或类。这些组件定义了应渲染到屏幕上的内容。组件可以简单到一个按钮，也可以复杂到包含多个交互元素的完整用户个人资料。
- en: 'JSX: JavaScript and XML'
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JSX：JavaScript 和 XML
- en: To build user interfaces with React, developers use JSX, which stands for JavaScript
    XML. JSX is an extension of JavaScript that allows you to write HTML-like code
    within your JavaScript files. This may seem unconventional at first, but it has
    significant advantages.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 React 构建用户界面，开发者使用 JSX，JSX 代表 JavaScript XML。JSX 是 JavaScript 的一个扩展，允许你在
    JavaScript 文件中编写类似 HTML 的代码。起初，这可能显得不太传统，但它具有显著的优势。
- en: 'Consider this JSX code snippet:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请看这个 JSX 代码片段：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we define a constant `element` that represents an `<h1>` HTML element.
    Notice that we're using HTML-like syntax within JavaScript. This blending of HTML
    and JavaScript not only makes your code more expressive but also simplifies the
    process of describing how your UI should look.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了一个常量 `element`，它表示一个 `<h1>` HTML 元素。请注意，我们在 JavaScript 中使用了类似 HTML
    的语法。这种 HTML 和 JavaScript 的结合不仅使代码更具表现力，还简化了描述 UI 应该如何呈现的过程。
- en: Under the hood, React transforms JSX into plain JavaScript that the browser
    can understand. This transformation process is essential for React to work its
    magic. It allows React to efficiently update and render components.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 React 的底层，React 会将 JSX 转换成浏览器可以理解的普通 JavaScript。这一转换过程对于 React 的工作至关重要，它使得
    React 能够高效地更新和渲染组件。
- en: 'Virtual DOM: The Secret Sauce'
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 虚拟 DOM：秘诀
- en: React's efficiency and performance shine thanks to its ingenious use of the
    Virtual DOM. The Virtual DOM is a lightweight, in-memory representation of the
    actual DOM. Whenever a change occurs in your application, React first updates
    the Virtual DOM rather than the real DOM.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: React 的高效性和性能得益于其巧妙使用的虚拟 DOM。虚拟 DOM 是实际 DOM 的轻量级内存表示。每当应用程序发生变化时，React 会首先更新虚拟
    DOM，而不是直接更新真实的 DOM。
- en: Why is this important? The DOM is the browser's internal representation of your
    web page. Manipulating the DOM is relatively slow, especially when dealing with
    complex and frequently changing UIs. By introducing a layer of abstraction called
    the Virtual DOM, React minimizes the number of actual DOM manipulations, which
    can be resource-intensive.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这很重要？DOM是浏览器内部的网页表示。操作DOM相对较慢，特别是在处理复杂且频繁变化的UI时。通过引入一种叫做虚拟DOM的抽象层，React减少了实际DOM操作的次数，从而减少了资源消耗。
- en: 'Here''s how it works in a nutshell:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，它是这样工作的：
- en: 1\. You make changes to your React components.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 你对React组件进行更改。
- en: 2\. React updates the Virtual DOM to reflect these changes.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. React更新虚拟DOM以反映这些更改。
- en: 3\. React then compares the new Virtual DOM with the previous one.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 然后，React将新的虚拟DOM与之前的进行比较。
- en: 4\. It identifies the minimal set of changes needed to update the actual DOM.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 它识别出更新实际DOM所需的最小更改集。
- en: 5\. Finally, React updates the real DOM with these minimal changes, resulting
    in a highly optimized process.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 最后，React通过这些最小的更改更新真实DOM，从而实现高度优化的过程。
- en: This approach dramatically improves the performance and responsiveness of your
    web applications. Even when dealing with large and complex UIs, React's Virtual
    DOM ensures that updates are fast and efficient.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法显著提高了网页应用程序的性能和响应速度。即使处理大型和复杂的UI，React的虚拟DOM也能确保更新快速且高效。
- en: The Role of Components in React
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件在React中的作用
- en: Now that we've introduced you to the core concepts of React, let's delve deeper
    into the role of components. Components are the building blocks of any React application,
    and understanding them is pivotal to mastering React.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了React的核心概念，让我们深入探讨组件的作用。组件是任何React应用的构建块，理解它们是掌握React的关键。
- en: Functional Components
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数组件
- en: Functional components are the simplest form of components in React. They are,
    as the name suggests, JavaScript functions. These functions take in an optional
    set of inputs called "props" (short for properties) and return a React element.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 函数组件是React中最简单的组件形式。顾名思义，它们是JavaScript函数。这些函数接受一个可选的输入集，称为"props"（属性的简称），并返回一个React元素。
- en: 'Here''s an example of a functional component:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个函数组件的例子：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this code, we define a `Greeting` component that accepts a `name` prop and
    renders a greeting message. Functional components are an excellent choice for
    simple UI elements that don't require internal state or complex logic.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们定义了一个`Greeting`组件，它接受一个`name`属性并渲染问候消息。函数组件是处理简单UI元素的绝佳选择，这些元素不需要内部状态或复杂逻辑。
- en: Class Components
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类组件
- en: While functional components are sufficient for many scenarios, React also provides
    class components for more advanced use cases. Class components are JavaScript
    classes that extend the `React.Component` class. They offer additional features
    such as managing component state and lifecycle methods.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然函数组件适用于许多场景，但 React 也提供了类组件，以满足更高级的使用需求。类组件是扩展了`React.Component` 类的 JavaScript
    类，它们提供了额外的功能，如管理组件状态和生命周期方法。
- en: 'Here''s an example of a class component:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个类组件的示例：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, the `Counter` class component maintains a count in its internal
    state. When the button is clicked, the `setState` method is called to update the
    count and trigger a re-render of the component.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`Counter` 类组件在其内部状态中维护一个计数。当按钮被点击时，`setState` 方法会被调用，以更新计数并触发组件的重新渲染。
- en: Composing Components
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件组合
- en: One of the strengths of React's component-based architecture is the ability
    to compose components into more complex structures. You can nest components inside
    other components, creating a hierarchy that mirrors your UI's structure.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: React 的组件化架构的一个优点是能够将组件组合成更复杂的结构。你可以将组件嵌套在其他组件内部，创建一个反映 UI 结构的层级关系。
- en: Consider a scenario where you're building a blog post. You might have individual
    components for the post title, author, content, and comments. By composing these
    components together, you can construct a complete blog post.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在构建一个博客文章，你可能会为文章标题、作者、内容和评论分别创建组件。通过将这些组件组合在一起，你可以构建出一篇完整的博客文章。
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example, the `BlogPost` component encapsulates the entire blog post,
    but it delegates the rendering of specific parts, such as the author information
    and comments section, to other components.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`BlogPost` 组件封装了整个博客文章，但它将特定部分的渲染（如作者信息和评论区）委托给其他组件。
- en: This composability not only makes your code more organized but also encourages
    reusability. You can use the same `AuthorInfo` component elsewhere in your application
    without duplicating code.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这种组件化的方式不仅让你的代码更有组织性，而且还鼓励代码的重用。你可以在应用的其他地方使用相同的`AuthorInfo` 组件，而无需重复代码。
- en: Building a Simple React App
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建一个简单的 React 应用
- en: To solidify your understanding of React basics, let's build a simple React application
    together. We'll create a "To-Do List" app, a classic example for learning React.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了巩固你对 React 基础的理解，让我们一起构建一个简单的 React 应用。我们将创建一个“待办事项”应用，这是学习 React 的经典示例。
- en: Setting Up Your Development Environment
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置开发环境
- en: Before we start coding, you'll need to set up your development environment.
    You can use
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编写代码之前，你需要设置开发环境。你可以使用
- en: tools like Create React App, which is a convenient way to bootstrap a new React
    project with minimal configuration.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 工具如 Create React App，是一种便捷的方式，可以以最小的配置启动一个新的 React 项目。
- en: 'Once you have your development environment ready, create a new React app using
    the following command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你准备好开发环境，使用以下命令创建一个新的 React 应用：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This command will create a new directory called `todo-list` with a basic React
    project structure.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将创建一个名为`todo-list`的新目录，并生成一个基本的React项目结构。
- en: Creating a To-Do List Component
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建待办事项列表组件
- en: Inside your project directory, navigate to the `src` folder and open the `App.js`
    file. This is where our application's main component resides.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的项目目录中，导航到`src`文件夹并打开`App.js`文件。这里是我们应用程序的主要组件所在。
- en: Let's start by creating a simple `ToDoList` component. This component will render
    a list of to-do items.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个简单的`ToDoList`组件开始。这个组件将渲染一个待办事项列表。
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this code, we've defined a functional component called `ToDoList` that renders
    a list of to-do items. These items are hard-coded for simplicity, but in a real
    application, they would typically come from dynamic data.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们定义了一个名为`ToDoList`的函数组件，它渲染一个待办事项列表。这些事项是硬编码的，目的是为了简化演示，但在真实的应用中，它们通常来自动态数据。
- en: Using the To-Do List Component
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用待办事项列表组件
- en: Now that we have our `ToDoList` component, let's use it in our `App.js` file
    to render it within our application.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了`ToDoList`组件，接下来让我们在`App.js`文件中使用它，将其渲染到应用程序中。
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this code, we import the `ToDoList` component and render it within the `App`
    component. When you run your React app (you can do this with the `npm start` command),
    you'll see your to-do list displayed in the browser.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们导入了`ToDoList`组件，并在`App`组件中渲染它。当你运行React应用程序时（可以使用`npm start`命令），你将在浏览器中看到待办事项列表。
- en: Wrapping Up
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we've covered the fundamental concepts of React JS, from its
    origins at Facebook to its core principles. We explored the concept of component-based
    architecture, JSX, and the Virtual DOM. You've learned the difference between
    functional and class components and how to compose components to build complex
    user interfaces.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们介绍了React JS的基本概念，从其在Facebook的起源到核心原则。我们探索了基于组件的架构、JSX和虚拟DOM的概念。你已经了解了函数组件和类组件之间的区别，以及如何组合组件来构建复杂的用户界面。
- en: As you continue your journey into the world of React, remember that practice
    is key to mastery. Experiment with building your own components, explore React's
    rich ecosystem of libraries and tools, and keep pushing your skills to new heights.
    React's versatility and efficiency make it an excellent choice for building modern
    web applications, and the knowledge you gain in this chapter is just the beginning
    of your React adventure.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当你继续深入React的世界时，请记住，实践是通向精通的关键。尝试自己构建组件，探索React丰富的库和工具生态系统，不断提升你的技能。React的多样性和高效性使其成为构建现代Web应用程序的绝佳选择，而你在这一章中学到的知识只是你React冒险旅程的开始。
