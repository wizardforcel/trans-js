- en: Practical Examples
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 实用示例
- en: '-   Here’s some typical JavaScript code that prints all the items from a list:'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '-   这是一些典型的 JavaScript 代码，用于打印列表中的所有项目：'
- en: '| ​  | `let` things = [`''apples''`, `''baboons''`, `''cribs''`, `''dulcimers''`];
    |'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` things = [`''apples''`, `''baboons''`, `''cribs''`, `''dulcimers''`];
    |'
- en: '| ​  |  |'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `for` (`const` thing `of` things) { |'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`const` thing `of` things) { |'
- en: '| ​  | `console.log(`Here''s a thing: ${thing}`);` |'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `console.log(`Here''s a thing: ${thing}`);` |'
- en: '| ​  | } |'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '-   How would we describe the efficiency of this algorithm in Big O notation?'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '-   我们如何用大 O 表示法来描述这个算法的效率？'
- en: '-   The first thing to realize is that this is an example of an algorithm.
    While it may not be fancy, any code that does anything at all is technically an
    algorithm—it’s a particular process for solving a problem. In this case, the problem
    is that we want to print all the items from a list. The algorithm we use to solve
    this problem is a for loop containing a `console.log` statement.'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '-   首先需要认识到这是一个算法的例子。虽然它可能不复杂，但任何执行操作的代码在技术上都是一个算法——它是一种解决问题的特定过程。在这种情况下，问题是我们想打印列表中的所有项目。我们用来解决这个问题的算法是一个包含
    `console.log` 语句的 for 循环。'
- en: '-   To break this down, we need to analyze how many steps this algorithm takes.
    In this case, the main part of the algorithm—the for loop—takes four steps. In
    this example, there are four things in the list, and we print each one out a single
    time.'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '-   为了详细分析，我们需要研究这个算法需要多少步。在这种情况下，算法的主要部分——for 循环——需要四步。在这个例子中，列表中有四个项目，我们打印每个项目一次。'
- en: '-   However, the number of steps isn’t constant. If the list contained ten
    elements, the for loop would take ten steps. Since this for loop takes as many
    steps as there are elements, we’d say that this algorithm has an efficiency of
    O(N).'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '-   然而，步骤的数量并不是恒定的。如果列表包含十个元素，for 循环将进行十步。由于这个 for 循环的步数与元素数量相同，我们会说这个算法的效率是
    O(N)。'
- en: '-   The next example is a simple JavaScript-based algorithm for determining
    whether a number is prime:'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '-   下一个示例是一个简单的基于 JavaScript 的算法，用于确定一个数字是否是质数：'
- en: '| ​  | `function` isPrime(number) { |'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` isPrime(number) { |'
- en: '| ​  | `for` (`let` i = 2; i < number; i += 1) { |'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`let` i = 2; i < number; i += 1) { |'
- en: '| ​  | `if` (number % i === 0) { |'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (number % i === 0) { |'
- en: '| ​  | `return false;` |'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return false;` |'
- en: '| ​  | } |'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | `return true;` |'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return true;` |'
- en: '| ​  | } |'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '-   The preceding code accepts a number as an argument and begins a for loop
    in which we divide the number by every integer from 2 up to (but not including)
    that number and see if there’s a remainder. If there’s no remainder, we know that
    the number is not prime and we immediately return `false`. If we make it all the
    way up to the number and always find a remainder, then we know that the number
    is prime and we return `true`.'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '-   前面的代码接受一个数字作为参数，并开始一个 for 循环，在这个循环中我们将数字除以从 2 到（但不包括）该数字的每个整数，并查看是否有余数。如果没有余数，我们知道这个数字不是质数，并立即返回
    `false`。如果我们一直检查到这个数字并始终发现有余数，那么我们知道这个数字是质数，并返回 `true`。'
- en: '-   In this case, the key question is slightly different than in the previous
    examples. In the previous examples, our key question asked how many steps the
    algorithm would take if there were N data elements in an array. Here, we’re not
    dealing with an array, but we are dealing with a number that we pass into this
    function. Depending on the number we pass in, this will affect how many times
    the function’s loop runs.'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '-   在这种情况下，关键问题与之前的示例略有不同。在之前的示例中，我们的关键问题询问如果数组中有 N 个数据元素，算法将需要多少步。这里，我们不处理数组，而是处理我们传入这个函数的数字。根据我们传入的数字，这将影响函数的循环运行多少次。'
- en: '-   In this case, then, our key question will be this: when passing in the
    number N, how many steps will the algorithm take?'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '-   在这种情况下，我们的关键问题将是：传入数字 N 时，算法需要多少步？'
- en: '-   If we pass the number 7 into `isPrime`，the for loop runs about 7 times.
    (It technically runs 5 times, since it starts at 2 and ends right before the actual
    number.) For the number 101, the loop runs about 101 times. Because the number
    of steps increases in lockstep with the number passed into the function, this
    is a classic example of O(N).'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '-   如果我们将数字 7 传入 `isPrime`，则 for 循环大约运行 7 次。（技术上讲，它运行 5 次，因为它从 2 开始，并在实际数字之前结束。）对于数字
    101，循环大约运行 101 次。由于步骤数量与传入函数的数字成正比增加，这是 O(N) 的经典例子。'
- en: Again, the key question here dealt with a different kind of `N`，since our primary
    piece of data was a `number` rather than an `array`。We’ll get more practice in
    identifying our `Ns` as we progress through the future chapters。
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 再次强调，这里关键的问题涉及到另一种类型的`N`，因为我们主要的数据是一个`number`而不是一个`array`。随着我们在未来的章节中逐步深入，我们将会更多地练习识别我们的`Ns`。
