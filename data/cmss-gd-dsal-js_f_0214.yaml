- en: '`Chapter 9`'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`第 9 章`'
- en: These are the solutions to the exercises found in the section [`Exercises`](f_0095.xhtml#stacks.and.queues.exercises).
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这些是[`练习`](f_0095.xhtml#stacks.and.queues.exercises)部分中找到的习题的解决方案。
- en: Presumably, we’d want to be nice to the callers and answer their phone calls
    in the order in which they were received. For this we’d use a queue, which processes
    data FIFO (first in, first out)。
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 可以推测，我们希望对来电者友好，并按接收顺序接听他们的电话。为此，我们会使用队列，以FIFO（先进先出）方式处理数据。
- en: We’d be able to read the `4`，which is now the top element in the stack. This
    is because we’ll have popped the `6` and the `5`，which were previously sitting
    on top of the `4`。
  id: totrans-3
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 我们能够读取`4`，它现在是栈中的顶部元素。这是因为我们已经弹出了之前位于`4`上方的`6`和`5`。
- en: We’d be able to read the `3`，which is now at the front of the queue，after having
    dequeued the `1` and the `2`。
  id: totrans-4
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 我们能够读取`3`，它现在位于队列的前面，在将`1`和`2`出队之后。
- en: 'We can take advantage of the stack because of the fact that we pop each item
    in the reverse order of which they were pushed onto the stack. So we’ll first
    push each character of the string onto the stack. Then we’ll pop each one off
    while adding them to the end of a new string:'
  id: totrans-5
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 我们可以利用栈的特性，因为我们以与推入栈的顺序相反的顺序弹出每个项目。因此，我们将首先将字符串的每个字符推入栈中。然后，我们在将它们添加到新字符串的末尾时弹出每一个：
- en: '| ​  | `import` Stack `from` *''./stack.js''*; |'
  id: totrans-6
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `import` Stack `from` *''./stack.js''*; |'
- en: '| ​  |  |'
  id: totrans-7
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `function` reverse(string) { |'
  id: totrans-8
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` reverse(string) { |'
- en: '| ​  | `const` stack = `new` Stack(); |'
  id: totrans-9
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` stack = `new` Stack(); |'
- en: '| ​  | `let` newString = *''''*; |'
  id: totrans-10
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` newString = *''''*; |'
- en: '| ​  |  |'
  id: totrans-11
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `for` (`const` **char** `of` string) { |'
  id: totrans-12
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`const` **char** `of` string) { |'
- en: '| ​  | `stack.push(`**char**`);` |'
  id: totrans-13
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `stack.push(`**char**`);` |'
- en: '| ​  | } |'
  id: totrans-14
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-15
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `while` (stack.read()) { |'
  id: totrans-16
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while` (stack.read()) { |'
- en: '| ​  | newString += stack.pop(); |'
  id: totrans-17
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | newString += stack.pop(); |'
- en: '| ​  | } |'
  id: totrans-18
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-19
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return` newString; |'
  id: totrans-20
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` newString; |'
- en: '| ​  | } |'
  id: totrans-21
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: The Stack class imported at the beginning of our code is our homegrown Stack
    implementation from `Chapter 9`，which we’ve saved in a file called `stack.js`。
  id: totrans-22
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 在我们代码开头导入的 Stack 类是我们自己实现的 Stack，来自`第 9 章`，我们将其保存在名为`stack.js`的文件中。
