- en: 'Chapter 4: State and Props in React'
  id: totrans-0
  prefs:
  - PREF_H1
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章：React 中的 State 和 Props
- en: In the previous chapter, you gained a foundational understanding of React components,
    how to create them, and how to pass data via props and manage state. In this chapter,
    we will delve deeper into the concepts of state and props in React, exploring
    their roles, differences, and best practices for using them effectively. By mastering
    state and props, you'll be well-equipped to build dynamic and interactive user
    interfaces with React.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章，你对 React 组件有了基础的理解，学习了如何创建组件，以及如何通过 props 传递数据和管理状态。在本章中，我们将更深入地探讨 React
    中的 state 和 props，探索它们的作用、区别以及如何有效使用它们的最佳实践。通过掌握 state 和 props，你将能够构建动态和交互式的用户界面。
- en: 'Understanding Props: Data Flow from Parent to Child'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 Props：数据从父组件流向子组件
- en: 'Props, short for "properties," serve as the primary mechanism for passing data
    from a parent component to a child component in React. They allow you to make
    your components dynamic by providing external data and configuration. Here''s
    an overview of how props work:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Props，简称“属性”，是 React 中从父组件传递数据到子组件的主要机制。它们通过提供外部数据和配置，使你的组件变得动态。以下是 props 工作原理的概述：
- en: '1\. **Parent Component**: Props originate in a parent component. The parent
    component defines the data or values it wants to pass to its child component(s).'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. **父组件**：Props 起源于父组件。父组件定义它希望传递给子组件的数据或值。
- en: '2\. **Child Component**: The child component receives the props passed down
    by its parent. These props are essentially read-only and cannot be modified within
    the child component.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. **子组件**：子组件接收父组件传递下来的 props。这些 props 本质上是只读的，不能在子组件内部修改。
- en: '3\. **Rendering with Props**: Inside the child component''s rendering logic,
    you can access and use the props to display data, customize behavior, or structure
    the component''s UI.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. **使用 Props 渲染**：在子组件的渲染逻辑中，你可以访问并使用 props 来显示数据、定制行为或构建组件的 UI。
- en: Passing Props
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 传递 Props
- en: 'Let''s explore how to pass props from a parent component to a child component.
    Consider a scenario where you have a parent component called `Parent` and a child
    component called `Child`. Here''s how you can pass props:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探讨如何将 props 从父组件传递到子组件。假设你有一个名为 `Parent` 的父组件和一个名为 `Child` 的子组件。以下是如何传递 props
    的方式：
- en: 'Parent Component (`Parent.js`):'
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 父组件（`Parent.js`）：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the parent component (`Parent.js`), we define a variable `greeting` and then
    pass it as a prop called `message` to the `Child` component.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在父组件（`Parent.js`）中，我们定义一个变量 `greeting`，然后将其作为名为 `message` 的 prop 传递给 `Child`
    组件。
- en: 'Child Component (`Child.js`):'
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 子组件（`Child.js`）：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the child component (`Child.js`), we receive the `message` prop and use it
    to display the greeting message.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在子组件（`Child.js`）中，我们接收 `message` prop 并用它来显示问候信息。
- en: Using Props
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Props
- en: Using props is straightforward within a child component. You access props as
    properties of the `props` object. In the example above, we used `props.message`
    to access the `message` prop passed from the parent component.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在子组件中使用 props 非常简单。你可以将 props 当作 `props` 对象的属性来访问。在上面的示例中，我们使用 `props.message`
    来访问从父组件传递过来的 `message` prop。
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Props are immutable within the child component, meaning you cannot change their
    values directly. They serve as a way to communicate data from a parent to a child,
    allowing you to build reusable and composable components.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在子组件中，Props 是不可变的，这意味着你不能直接改变它们的值。Props 作为父组件与子组件之间传递数据的方式，允许你构建可重用和可组合的组件。
- en: 'Understanding State: Managing Component Data'
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解状态：管理组件数据
- en: 'While props facilitate data flow from parent to child components, state is
    a crucial concept that allows components to manage and maintain their own data.
    State represents the dynamic and changeable information within a component, such
    as user input, application data, or UI state. Here are the key aspects of state:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 props 促进了父组件向子组件的数据流动，但状态是一个至关重要的概念，它使组件能够管理和维护自己的数据。状态代表了组件中的动态和可变信息，比如用户输入、应用数据或
    UI 状态。以下是状态的关键方面：
- en: '1\. **Local to a Component**: Each component can have its own state, independent
    of other components. This enables encapsulation and isolation of data within components.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. **局部于组件**：每个组件可以拥有自己的状态，独立于其他组件。这使得组件内部的数据能够实现封装和隔离。
- en: '2\. **Mutable**: Unlike props, which are immutable, state is mutable. You can
    change the state''s values over time, triggering component updates and re-renders.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. **可变的**：与不可变的 props 不同，状态是可变的。你可以随着时间改变状态的值，从而触发组件更新和重新渲染。
- en: '3\. **Managed by Class Components**: State is primarily used in class components.
    Functional components can use state through React''s `useState` hook, introduced
    in React 16.8 and later.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. **由类组件管理**：状态主要在类组件中使用。函数组件可以通过 React 的 `useState` 钩子来使用状态，该钩子是在 React 16.8
    及之后的版本中引入的。
- en: Using State in Class Components
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在类组件中使用状态
- en: 'To work with state in class components, you need to understand the following
    key concepts:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要在类组件中使用状态（state），你需要理解以下几个关键概念：
- en: Initializing State
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 初始化状态
- en: 'You initialize a component''s state in the constructor method using `this.state`.
    Typically, state properties are defined within the component''s constructor. For
    example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在构造函数中使用 `this.state` 来初始化组件的状态。通常，状态属性会在组件的构造函数中定义。例如：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In this example, we define three state properties: `count`, `isActive`, and
    `inputValue`, each with its initial value.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们定义了三个状态属性：`count`、`isActive` 和 `inputValue`，每个属性都有其初始值。
- en: Accessing State
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 访问状态
- en: 'You access state properties using `this.state`. For instance, to access the
    `count` state, you would use `this.state.count`. Here''s an example of rendering
    a component''s state:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `this.state` 来访问状态属性。例如，要访问 `count` 状态，你可以使用 `this.state.count`。以下是渲染组件状态的示例：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this `render` method, we access the `count`, `isActive`, and `inputValue`
    state properties.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`render`方法中，我们访问`count`、`isActive`和`inputValue`状态属性。
- en: Updating State
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新状态
- en: 'To update a component''s state, you should use `this.setState()`. This method
    is used to update state properties and trigger a component re-render. Here''s
    an example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新组件的状态，你应该使用`this.setState()`。此方法用于更新状态属性并触发组件重新渲染。以下是一个示例：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In these examples, we define functions that use `this.setState()` to update
    the `count`, `isActive`, and `inputValue` state properties in response to various
    events.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些示例中，我们定义了使用`this.setState()`来响应各种事件更新`count`、`isActive`和`inputValue`状态属性的函数。
- en: Asynchronous Updates
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 异步更新
- en: 'Keep in mind that `this.setState()` may update state asynchronously. React
    batches state updates for performance reasons. If you need to access the updated
    state immediately after calling `this.setState()`, you can provide a callback
    function as the second argument:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`this.setState()`可能会异步更新状态。为了性能考虑，React 会批量处理状态更新。如果你需要在调用`this.setState()`后立即访问更新后的状态，你可以将回调函数作为第二个参数传递：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This ensures that the callback function is called after the state has been updated.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这确保了回调函数会在状态更新后被调用。
- en: Using State in Functional Components with `useState`
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在函数组件中使用状态与`useState`
- en: 'With the introduction of hooks in React 16.8, functional components can also
    manage state using the `useState` hook. Hooks allow you to use state and other
    React features without writing a class. Here''s how you can use `useState` in
    a functional component:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 React 16.8 引入了 hooks，函数组件也可以使用`useState`钩子来管理状态。Hooks 允许你在不编写类的情况下使用状态和其他
    React 特性。以下是如何在函数组件中使用`useState`：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this functional component, we use `useState` to initialize the `count` state
    and a `setCount` function to update it. The `setCount` function automatically
    triggers re-renders when the state changes.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数组件中，我们使用`useState`初始化`count`状态，并使用`setCount`函数更新它。`setCount`函数在状态变化时会自动触发重新渲染。
- en: 'Props vs. State: When to Use Each'
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Props 与 State：何时使用哪一个
- en: 'Understanding when to use props and when to use state is essential for building
    React applications efficiently. Here are guidelines on when to choose each:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 理解何时使用 props 和何时使用 state 对于高效构建 React 应用程序至关重要。以下是选择每种情况的指南：
- en: Props
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Props
- en: 'Use props when:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要使用 props 时：
- en: 1\. You need to pass data from a parent component to a child component.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 1. 你需要将数据从父组件传递到子组件。
- en: 2\. The data is read-only within the child component.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 2. 数据在子组件中是只读的。
- en: 3\. You want to configure and customize child components.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 3. 你希望配置和定制子组件。
- en: 4\. You aim for component reusability and composability.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 4. 你希望组件具有可重用性和可组合性。
- en: 5\. You want to ensure predictable data flow in your application.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 5. 你希望确保应用程序中的数据流是可预测的。
- en: State
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 状态
- en: 'Use state when:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要使用状态时：
- en: 1\. You need to manage and update data within a component.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 1. 你需要在组件内部管理和更新数据。
- en: 2\. The data is specific to the component and not shared with other components.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 数据特定于该组件，并未与其他组件共享。
- en: 3\. You want to reflect changes in data by re-rendering the component.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 你希望通过重新渲染组件来反映数据的变化。
- en: 4\. You're working with user input or UI interactions.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 你正在处理用户输入或 UI 交互。
- en: 5\. You need to maintain UI-related information, such as toggles, form inputs,
    or component visibility.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 你需要维护与 UI 相关的信息，例如切换开关、表单输入或组件可见性。
- en: Understanding these distinctions helps you design React components that are
    modular, maintainable, and performant.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这些区别有助于你设计出模块化、可维护且高效的 React 组件。
- en: Best Practices for Working with Props and State
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作 Props 和 State 的最佳实践
- en: 'To ensure your React components are well-structured and maintainable, consider
    the following best practices when working with props and state:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保你的 React 组件结构良好且易于维护，在处理 props 和 state 时，可以考虑以下最佳实践：
- en: Props Best Practices
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Props 最佳实践
- en: '1\. **Keep Props Immutable**: Props should be treated as immutable within a
    component. Avoid modifying props directly; instead, rely on props for read-only
    data.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. **保持 Props 不可变**：Props 应在组件内部视为不可变。避免直接修改 props；应依赖 props 来获取只读数据。
- en: '2\. **Document Props**: Document the expected props for your components, including
    their types and default values. You can use PropTypes or TypeScript for this purpose.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. **记录 Props**：记录组件预期的 props，包括其类型和默认值。你可以使用 PropTypes 或 TypeScript 来实现这一点。
- en: '3\. **Default Prop Values**: When appropriate, provide default values for props
    using default function parameters or defaultProps for class components.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. **默认 Prop 值**：在合适的情况下，使用默认函数参数或类组件的 defaultProps 为 props 提供默认值。
- en: '4\. **Destructure Props**: Destructuring props within a functional component''s
    argument or within the component body can improve code readability.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. **解构 Props**：在函数组件的参数中或组件体内解构 props 可以提高代码的可读性。
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '5\. **Use Prop Validation**: When building reusable components, consider using
    prop validation libraries like PropTypes or TypeScript to ensure the correct types
    and shapes of props.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. **使用 Prop 校验**：在构建可重用组件时，考虑使用 Prop 校验库，如 PropTypes 或 TypeScript，以确保 props
    的类型和形状正确。
- en: State Best Practices
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 状态最佳实践
- en: '1\. **Initialize State Properly**: Initialize state in the constructor (for
    class components) or using the `useState` hook (for functional components). Ensure
    that the initial state reflects the component''s starting state.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. **正确初始化 State**：在构造函数中初始化 state（用于类组件）或使用 `useState` 钩子（用于函数组件）。确保初始状态反映组件的起始状态。
- en: '2\. **Avoid Direct State Mutations**: Never modify state directly; use `this.setState`
    (for class components) or the updater function returned by `useState` (for functional
    components) to update state.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. **避免直接修改状态**：永远不要直接修改状态；使用`this.setState`（用于类组件）或`useState`返回的更新函数（用于函数组件）来更新状态。
- en: '3\. **Functional State Updates**: When updating state based on its previous
    value, use the functional form of `this.setState` (for class components) or the
    updater function (for functional components) to ensure accurate updates, especially
    in asynchronous scenarios.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. **功能性状态更新**：当根据之前的值更新状态时，使用`this.setState`的函数式形式（适用于类组件）或更新函数（适用于函数组件），以确保更新的准确性，尤其是在异步场景中。
- en: '4\. **Stateless Components**: Whenever possible, prefer stateless functional
    components over class components for rendering UI based on props. Reserve class
    components for components that require state management and lifecycle methods.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. **无状态组件**：尽可能偏好无状态的函数组件，而不是类组件，用于根据props渲染UI。将类组件保留给那些需要状态管理和生命周期方法的组件。
- en: '5\. **Lift State Up**: When multiple components need access to the same state
    or need to synchronize their state, lift the state up to a common ancestor component
    and pass it down as props.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. **提升状态**：当多个组件需要访问相同的状态或需要同步它们的状态时，将状态提升到一个共同的父组件，并通过props将其传递下去。
- en: '6\. **Use Controlled Components**: For form elements like input fields, use
    controlled components. Bind the value of the input to a state property and handle
    changes via state updates.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. **使用受控组件**：对于表单元素如输入框，使用受控组件。将输入框的值绑定到一个状态属性，并通过状态更新处理变化。
- en: Conclusion
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter, you've deepened your understanding of state and props in React,
    two fundamental concepts that drive dynamic and interactive user interfaces. Props
    enable data flow from parent to child components, while state empowers components
    to manage their own dynamic data.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你加深了对React中状态（state）和属性（props）的理解，这两个基本概念驱动着动态和交互式的用户界面。Props使得数据可以从父组件流向子组件，而state赋予组件管理自身动态数据的能力。
- en: By choosing the right tool for the job—props for data flow and configuration,
    and state for managing component-specific data—you'll create well-structured,
    maintainable, and efficient React applications. You've also learned best practices
    for working with props and state, ensuring your code remains readable and reliable.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择适合的工具—使用props进行数据流和配置，使用state管理组件特定的数据—you'll create well-structured, maintainable,
    and efficient React applications. 你还学习了使用props和state的最佳实践，确保你的代码保持可读性和可靠性。
