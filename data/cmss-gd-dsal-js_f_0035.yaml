- en: '`Logarithms`'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`对数`'
- en: Let’s examine why algorithms such as `binary search` are described as `O(log
    N)`. What is a log, anyway?
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们看看为什么像`二分搜索`这样的算法被描述为`O(log N)`。究竟什么是对数？
- en: '`Log` is shorthand for `logarithm`. The first thing to note is that the word
    `logarithm` has nothing to do with `algorithm`, even though the two words look
    and sound so similar.'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Log`是`对数`的缩写。首先要注意的是，`logarithm`这个词与`algorithm`没有任何关系，尽管这两个词看起来和听起来非常相似。'
- en: '`Logarithms` are the inverse of exponents. Here’s a quick refresher on what
    exponents are:'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`对数`是指数的逆。下面是关于指数的快速复习：'
- en: '`2³` is the equivalent of'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`2³`相当于'
- en: '`2 * 2 * 2`.'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`2 * 2 * 2`。'
- en: This just happens to be `8`.
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这正好是`8`。
- en: 'Now, `log[2] 8` is the converse. It means: how many times do you have to multiply
    `2` by itself to get a result of `8`?'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在，`log[2] 8`是反向的。它的意思是：你需要多少次将`2`自乘才能得到`8`的结果？
- en: Because you have to multiply `2` by itself three times to get `8`, `log[2] 8
    = 3`.
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因为你需要将`2`自乘三次才能得到`8`，所以`log[2] 8 = 3`。
- en: 'Here’s another example:'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里还有一个例子：
- en: '`2⁶` translates to'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`2⁶`可以转化为'
- en: '`2 * 2 * 2 * 2 * 2 * 2 = 64`.'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`2 * 2 * 2 * 2 * 2 * 2 = 64`。'
- en: Because we had to multiply `2` by itself six times to get `64`, we have, therefore,
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因为我们需要将`2`自乘六次才能得到`64`，因此我们有，
- en: '`log[2] 64 = 6`.'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`log[2] 64 = 6`。'
- en: While the preceding explanation is the “textbook” definition of logarithms,
    I like to use an alternative way of describing the same concept because many people
    find that they can wrap their heads around it more easily, especially when it
    comes to `Big O` notation.
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 虽然前面的解释是对数的“教科书”定义，但我喜欢用另一种方式描述同一概念，因为很多人发现这样更容易理解，尤其是在涉及`大 O`记号时。
- en: 'Another way of explaining `log[2] 8` is this: if we kept dividing `8` by `2`
    until we ended up with `1`, how many `2`s would we have in our equation?'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 解释`log[2] 8`的另一种方法是：如果我们不断将`8`除以`2`直到结果为`1`，我们的方程中有多少个`2`？
- en: '`8 / 2 / 2 / 2 = 1`'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`8 / 2 / 2 / 2 = 1`'
- en: In other words, how many times do we need to halve `8` until we end up with
    `1`? In this example, it takes us three times. Therefore,
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 换句话说，我们需要将`8`减半多少次才能得到`1`？在这个例子中，我们需要三次。因此，
- en: '`log[2] 8 = 3`.'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`log[2] 8 = 3`。'
- en: 'Similarly, we could explain `log[2] 64` like this: how many times do we need
    to halve `64` until we end up with `1`?'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 同样，我们可以这样解释`log[2] 64`：我们需要将`64`减半多少次才能得到`1`？
- en: '`64 / 2 / 2 / 2 / 2 / 2 / 2 = 1`'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`64 / 2 / 2 / 2 / 2 / 2 / 2 = 1`'
- en: Since there are six `2`s, `log[2] 64 = 6`.
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 由于有六个`2`，所以`log[2] 64 = 6`。
- en: Now that you understand what logarithms are, the meaning behind `O(log N)` will
    become clear.
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在你明白了对数的含义，`O(log N)`背后的意义就会变得清晰。
