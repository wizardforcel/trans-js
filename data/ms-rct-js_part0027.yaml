- en: 'Chapter 6: Arrays and Array Methods'
  id: totrans-0
  prefs:
  - PREF_H1
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章：数组与数组方法
- en: In Chapter 5, we explored objects and prototypes, which allowed us to represent
    and organize data and behavior effectively. Now, we will dive into arrays, another
    essential data structure in JavaScript. Arrays are collections of elements that
    can hold different data types, enabling us to work with lists of items efficiently.
    JavaScript provides a variety of array methods that make it easy to manipulate
    and transform array data. Understanding arrays and their methods is crucial for
    becoming a proficient JavaScript developer. Let's dive in and explore the world
    of arrays and array methods!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在第五章中，我们探讨了对象和原型，它们帮助我们有效地表示和组织数据与行为。现在，我们将深入了解数组，这是 JavaScript 中另一个重要的数据结构。数组是元素的集合，可以包含不同数据类型的元素，使我们能够高效地处理项目列表。JavaScript
    提供了多种数组方法，使得操作和转换数组数据变得更加简便。理解数组及其方法对于成为一名熟练的 JavaScript 开发者至关重要。让我们深入探讨数组及数组方法的世界吧！
- en: 'Arrays: Collections of Elements'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组：元素集合
- en: In JavaScript, arrays are used to store multiple values in a single variable.
    Arrays can hold elements of different data types, including numbers, strings,
    objects, and even other arrays. Arrays are versatile and provide numerous ways
    to access, modify, and manipulate their elements.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，数组用于在一个变量中存储多个值。数组可以包含不同数据类型的元素，包括数字、字符串、对象，甚至其他数组。数组具有很大的灵活性，提供了多种方式来访问、修改和操作其元素。
- en: 'Creating Arrays:'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建数组：
- en: Arrays can be created using array literals, denoted by square brackets `[]`,
    or the `Array` constructor.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 数组可以通过数组字面量（用方括号 `[]` 表示）或 `Array` 构造函数来创建。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In Example 1, we create arrays `fruits` and `numbers` using both array literals
    and the `Array` constructor.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 1 中，我们通过数组字面量和 `Array` 构造函数创建了 `fruits` 和 `numbers` 数组。
- en: 'Accessing Array Elements:'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问数组元素：
- en: Array elements can be accessed using their index, with the index starting from
    0 for the first element.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 数组元素可以通过其索引来访问，索引从 0 开始，表示第一个元素。
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In Example 2, we access the elements of the `fruits` array using their respective
    indices.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 2 中，我们通过各自的索引访问 `fruits` 数组的元素。
- en: 'Modifying Array Elements:'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改数组元素：
- en: Array elements can be modified using their index.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 数组元素可以通过其索引进行修改。
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In Example 3, we modify the second element of the `fruits` array from "banana"
    to "grape".
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 3 中，我们将 `fruits` 数组的第二个元素从“香蕉”修改为“葡萄”。
- en: 'Array Length:'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组长度：
- en: The `length` property of an array gives the number of elements in the array.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的 `length` 属性表示数组中元素的个数。
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In Example 4, we get the length of the `fruits` array, which is 3.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 4 中，我们获取了 `fruits` 数组的长度，它是 3。
- en: 'Iterating through Arrays:'
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 遍历数组：
- en: Arrays can be iterated using loops, such as `for` loop or `for...of` loop.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 数组可以使用循环进行遍历，例如 `for` 循环或 `for...of` 循环。
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In Example 5, we use a `for` loop to iterate through the `fruits` array, while
    in Example 6, we use a `for...of` loop.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 5 中，我们使用 `for` 循环遍历 `fruits` 数组，而在示例 6 中，我们使用 `for...of` 循环。
- en: 'Array Methods: Manipulating Arrays'
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组方法：操作数组
- en: JavaScript provides a variety of built-in array methods that allow us to manipulate
    array elements easily. These methods enable us to add, remove, search, and modify
    array elements efficiently.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 提供了多种内建的数组方法，使我们能够轻松地操作数组元素。这些方法使我们能够高效地添加、删除、查找和修改数组元素。
- en: 'Adding Elements:'
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加元素：
- en: '- `push()`: Adds one or more elements to the end of the array.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '- `push()`: 将一个或多个元素添加到数组的末尾。'
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '- `unshift()`: Adds one or more elements to the beginning of the array.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '- `unshift()`: 将一个或多个元素添加到数组的开头。'
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In Examples 7 and 8, we use `push()` and `unshift()` to add elements to the
    `fruits` array.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 7 和 8 中，我们使用 `push()` 和 `unshift()` 向 `fruits` 数组添加元素。
- en: 'Removing Elements:'
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除元素：
- en: '- `pop()`: Removes the last element from the array and returns it.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '- `pop()`: 删除并返回数组的最后一个元素。'
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '- `shift()`: Removes the first element from the array and returns it.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '- `shift()`: 删除并返回数组的第一个元素。'
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In Examples 9 and 10, we use `pop()` and `shift()` to remove elements from the
    `fruits` array.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 9 和 10 中，我们使用 `pop()` 和 `shift()` 从 `fruits` 数组中删除元素。
- en: 'Modifying Elements:'
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改元素：
- en: '- `splice()`: Adds or removes elements from the array at a specific index.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '- `splice()`: 在指定索引处添加或删除数组元素。'
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In Example 11, we use `splice()` to remove one element at index 1 and add "grape"
    and "kiwi" at that index.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 11 中，我们使用 `splice()` 在索引 1 处删除一个元素，并在该索引处添加 "grape" 和 "kiwi"。
- en: 'Searching for Elements:'
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找元素：
- en: '- `indexOf()`: Returns the index of the first occurrence of a specified element
    in the array.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '- `indexOf()`: 返回数组中指定元素第一次出现的索引。'
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '- `lastIndexOf()`: Returns the index of the last occurrence of a specified
    element in the array.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '- `lastIndexOf()`: 返回数组中指定元素最后一次出现的索引。'
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In Examples 12 and 13, we use `indexOf()` and `lastIndexOf()` to search for
    elements in the `fruits` array.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 12 和 13 中，我们使用 `indexOf()` 和 `lastIndexOf()` 在 `fruits` 数组中查找元素。
- en: 'Slicing Arrays:'
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 切割数组：
- en: '- `slice()`: Returns a new array containing elements from the original array,
    specified by a start and end index (end index not included).'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '- `slice()`: 返回一个包含原数组中指定起始和结束索引（不包含结束索引）元素的新数组。'
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In Example 14, we use `slice()` to create a new array containing elements from
    index 1 to index 3 (end index not included).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 14 中，我们使用 `slice()` 创建一个新数组，包含从索引 1 到索引 3（不包含结束索引）的元素。
- en: 'Concatenating Arrays:'
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接数组：
- en: '- `concat()`: Concatenates two or more arrays, returning a new array.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '- `concat()`: 连接两个或更多数组，并返回一个新数组。'
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In Example 15, we use `concat()` to combine the `fruits` and `vegetables` arrays
    into a new array.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 15 中，我们使用 `concat()` 将 `fruits` 和 `vegetables` 数组合并为一个新数组。
- en: 'Mapping Array Elements:'
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 映射数组元素：
- en: '- `map()`: Creates a new array with the results of calling a provided function
    on every element in the array.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '- `map()`: 创建一个新数组，其中包含对数组中每个元素调用提供的函数后的结果。'
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In Example 16, we use `map()` to create a new array containing the square of
    each element in the `numbers` array.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 16 中，我们使用 `map()` 创建一个新数组，包含 `numbers` 数组中每个元素的平方值。
- en: 'Filtering Array Elements:'
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 过滤数组元素：
- en: '- `filter()`: Creates a new array with all elements that pass the test implemented
    by the provided function.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '- `filter()`：创建一个包含所有通过提供函数测试的元素的新数组。'
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In Example 17, we use `filter()` to create a new array containing only the even
    numbers from the `numbers` array.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 17 中，我们使用 `filter()` 创建一个新数组，该数组仅包含 `numbers` 数组中的偶数。
- en: 'Reducing Array Elements:'
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组元素的归约：
- en: '- `reduce()`: Executes a reducer function on each element of the array, resulting
    in a single output value.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '- `reduce()`：对数组中的每个元素执行一个归约函数，最终得到一个单一的输出值。'
- en: '[PRE17]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In Example 18, we use `reduce()` to calculate the sum of all elements in the
    `numbers` array.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 18 中，我们使用 `reduce()` 计算 `numbers` 数组中所有元素的和。
- en: 'Conclusion:'
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论：
- en: In this chapter, we explored arrays and array methods in JavaScript. Arrays
    are collections of elements that can hold different data types, providing a versatile
    way to work with lists of items. We learned how to create arrays, access and modify
    their elements, and iterate through them using loops. Additionally, we explored
    various array methods, including adding and removing elements, searching for elements,
    slicing arrays, concatenating arrays, mapping and filtering array elements, and
    reducing array elements.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 JavaScript 中的数组和数组方法。数组是可以存储不同数据类型的元素的集合，提供了一种灵活的方式来处理项目列表。我们学习了如何创建数组、访问和修改其元素，并使用循环遍历它们。此外，我们还探讨了各种数组方法，包括添加和删除元素、查找元素、切割数组、连接数组、映射和过滤数组元素，以及归约数组元素。
- en: Arrays and array methods are powerful tools in JavaScript that allow us to handle
    and manipulate data efficiently. With arrays, we can organize data in structured
    lists, making it easier to work with collections of items. The array methods enable
    us to perform complex operations on arrays and transform data to meet our specific
    needs.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 数组和数组方法是 JavaScript 中强大的工具，允许我们高效地处理和操作数据。通过数组，我们可以将数据组织成结构化的列表，使得处理集合变得更加容易。数组方法使我们能够对数组执行复杂的操作，并转换数据以满足我们的特定需求。
