- en: Chapter 1
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章
- en: 'Part I: Text Processing with Built-in JavaScript Methods'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分：使用内建 JavaScript 方法进行文本处理
- en: Many regard regular expressions as the holy grail of text processing—a tool
    that can simplify numerous programming tasks and provide a compact, effective
    solution to various text processing problems. But should you shoehorn regular
    expressions into situations where standard built-in solutions already exist?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人将正则表达式视为文本处理的圣杯——一种可以简化许多编程任务，并为各种文本处理问题提供紧凑、高效解决方案的工具。但你是否应该在已经存在标准内建解决方案的情况下，硬生生地将正则表达式强行套用进去呢？
- en: Of course not. Regular expressions can be tricky to get right, and it’s too
    easy to end up with a pattern that accepts more input than intended. Code collaboration
    may also become an issue, as the cryptic nature of regular expressions may discourage
    your fellow programmers from reviewing or debugging your code. After all, nobody
    wants to spend a week trying to understand a twenty-line enigmatic string made
    of magical symbols.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当然不行。正则表达式有时很难正确编写，容易导致出现接受过多输入的模式。代码协作也可能成为问题，因为正则表达式的晦涩特性可能会使你的同事不愿意审查或调试你的代码。毕竟，没有人愿意花一周时间去理解一个由神秘符号组成的二十行的难解字符串。
- en: In part one of the book, we’ll delve into a collection of tiny programs demonstrating
    built-in string manipulation methods in JavaScript. You’ll discover what problems
    each method is designed to solve, and in doing so, you’ll learn in what situations
    they’re preferable to regular expressions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的第一部分，我们将深入探讨一系列展示 JavaScript 内建字符串处理方法的小程序。你将了解每个方法旨在解决的问题，并由此学习在什么情况下它们比正则表达式更为优选。
