- en: 'Chapter 5: Objects and Prototypes'
  id: totrans-0
  prefs:
  - PREF_H1
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章：对象与原型
- en: In Chapter 4, we explored functions and scope, which are essential building
    blocks of JavaScript programming. Now, we will delve into objects and prototypes,
    another fundamental aspect of JavaScript. Objects allow us to group related data
    and functions together, providing a more organized way to represent real-world
    entities. Prototypes enable object inheritance, facilitating code reusability
    and maintaining a clear structure. Understanding objects and prototypes is crucial
    for becoming a proficient JavaScript developer. Let's dive in and explore the
    world of objects and prototypes!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在第四章中，我们探讨了函数和作用域，这是 JavaScript 编程的基本构建块。现在，我们将深入研究对象和原型，这是 JavaScript 的另一个基础概念。对象允许我们将相关数据和函数组织在一起，提供了一种更加有序的方式来表示现实世界中的实体。原型支持对象继承，促进了代码的重用并保持清晰的结构。理解对象和原型对于成为一名熟练的
    JavaScript 开发者至关重要。让我们深入了解对象和原型的世界吧！
- en: 'Objects: Bundling Data and Functions'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象：将数据和函数捆绑在一起
- en: In JavaScript, objects are composite data types that allow us to represent entities
    with properties (data) and methods (functions) associated with them. Objects provide
    an excellent way to organize related data and behavior together, making the code
    more structured and readable.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，对象是复合数据类型，允许我们表示具有属性（数据）和与之关联的方法（函数）的实体。对象提供了一种出色的方式来将相关数据和行为组织在一起，使代码更加结构化和易读。
- en: 'Object Literals:'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对象字面量：
- en: The simplest way to create an object is by using object literals, denoted by
    curly braces `{}`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 创建对象的最简单方法是使用对象字面量，用大括号 `{}` 表示。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In Example 1, we define an object `person` with properties `name`, `age`, and
    `occupation`, along with a method `greet()` that prints a greeting.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 1 中，我们定义了一个 `person` 对象，具有 `name`、`age` 和 `occupation` 属性，并且包含一个方法 `greet()`
    用于打印问候语。
- en: 'Accessing Object Properties:'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问对象属性：
- en: We can access object properties using dot notation or square brackets notation.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用点符号或方括号符号访问对象属性。
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In Example 2, we access the `name` property using dot notation and the `age`
    property using square brackets notation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 2 中，我们使用点符号访问 `name` 属性，并使用方括号符号访问 `age` 属性。
- en: 'Adding and Modifying Object Properties:'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加和修改对象属性：
- en: We can add new properties or modify existing properties of an object at runtime.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在运行时向对象添加新属性或修改现有属性。
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In Example 3, we add the `location` property and modify the `age` property of
    the `person` object.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 3 中，我们添加了 `location` 属性并修改了 `person` 对象的 `age` 属性。
- en: 'Object Methods:'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对象方法：
- en: Objects can also contain methods, which are functions associated with the object.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对象也可以包含方法，即与对象关联的函数。
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In Example 4, we add a new method `sayHello()` to the `person` object and call
    it to print a greeting.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 4 中，我们向 `person` 对象添加了一个新的方法 `sayHello()` 并调用它来打印问候语。
- en: 'Prototypes: Inheriting and Sharing Behavior'
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原型：继承和共享行为
- en: Prototypes play a significant role in JavaScript's object-oriented nature. They
    allow objects to inherit properties and methods from other objects, enabling code
    reusability and a clear inheritance structure.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 原型在 JavaScript 面向对象特性中起着重要作用。它们允许对象从其他对象继承属性和方法，从而实现代码的重用和清晰的继承结构。
- en: 'Prototype Chain:'
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 原型链：
- en: Every object in JavaScript has a prototype, which is another object from which
    it inherits properties and methods. This forms a chain of prototypes, known as
    the prototype chain.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中的每个对象都有一个原型，原型是另一个对象，从中继承属性和方法。这形成了一个原型链，称为原型链。
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In Example 5, we create two objects, `parent` and `child`. By using `Object.setPrototypeOf()`,
    we set the prototype of `child` to `parent`, forming a prototype chain. Now, `child`
    can access properties from `parent`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 5 中，我们创建了两个对象，`parent` 和 `child`。通过使用 `Object.setPrototypeOf()`，我们将 `child`
    的原型设置为 `parent`，从而形成了原型链。现在，`child` 可以访问 `parent` 的属性。
- en: 'The `__proto__` Property:'
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__proto__` 属性：'
- en: Each object in JavaScript has a `__proto__` property that points to its prototype.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中的每个对象都有一个 `__proto__` 属性，该属性指向其原型。
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In Example 6, we set the `__proto__` property of `child` to `parent`, creating
    the prototype chain.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 6 中，我们将 `child` 的 `__proto__` 属性设置为 `parent`，从而创建了原型链。
- en: 'Creating Objects with Prototypes:'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用原型创建对象：
- en: We can create objects with a shared prototype using constructors or classes.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过构造函数或类来创建具有共享原型的对象。
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In Example 7, we define a constructor function `Person` to create `Person` objects.
    We add a method `sayHello()` to the prototype of `Person`, which can be accessed
    by all `Person` objects.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 7 中，我们定义了一个构造函数 `Person` 来创建 `Person` 对象。我们向 `Person` 的原型添加了一个方法 `sayHello()`，所有
    `Person` 对象都可以访问该方法。
- en: 'ES6 Classes:'
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ES6 类：
- en: With the introduction of ES6, JavaScript provides a more intuitive way to create
    objects with shared prototypes using classes.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 ES6 的引入，JavaScript 提供了一种更直观的方法，使用类来创建具有共享原型的对象。
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In Example 8, we define a class `Animal` with a constructor and a method `makeSound()`.
    We then create an object `cat` based on this class.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 8 中，我们定义了一个类 `Animal`，它有一个构造函数和一个方法 `makeSound()`。然后，我们基于这个类创建了一个对象 `cat`。
- en: 'Inheritance with Prototypes:'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用原型的继承：
- en: We can achieve inheritance by setting the prototype of one object to be another
    object, creating a parent-child relationship.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将一个对象的原型设置为另一个对象，从而实现继承，建立父子关系。
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In Example 9, we create a `Shape` constructor and a `Circle` constructor. We
    set the prototype of `Circle` to be an instance of `Shape`, establishing inheritance.
    We then override the `draw()` method for the `Circle` prototype.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 9 中，我们创建了一个 `Shape` 构造函数和一个 `Circle` 构造函数。我们将 `Circle` 的原型设置为 `Shape` 的实例，从而建立了继承关系。然后，我们重写了
    `Circle` 原型的 `draw()` 方法。
- en: 'Conclusion:'
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论：
- en: In this chapter, we explored objects and prototypes in JavaScript. Objects allow
    us to bundle related data and functions together, providing a more structured
    way to represent entities in code. We learned how to create objects using object
    literals, add properties and methods, and access them. Additionally, we examined
    prototypes, which enable object inheritance, allowing objects to share behavior
    and properties, enhancing code reusability.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 JavaScript 中的对象和原型。对象使我们能够将相关数据和函数捆绑在一起，提供了一种更结构化的方式来表示代码中的实体。我们学习了如何使用对象字面量创建对象，添加属性和方法，并访问它们。此外，我们还研究了原型，它使对象继承成为可能，允许对象共享行为和属性，从而提高代码的可重用性。
- en: Understanding objects and prototypes is crucial for mastering JavaScript's object-oriented
    capabilities. With objects, we can organize data and behavior efficiently, while
    prototypes allow us to establish clear inheritance relationships and share code
    across objects.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 理解对象和原型是掌握 JavaScript 面向对象功能的关键。通过对象，我们可以高效地组织数据和行为，而原型则使我们能够建立清晰的继承关系，并在对象之间共享代码。
