- en: '| Recipe 20 | Counting the Number of a Specific Word with split() |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: '| Recipe 20 | 使用 split() 计数特定单词的数量 |'
- en: Task
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务
- en: Suppose you want to add search functionality to your application that provides
    information on how many times a word has appeared in a text. You can use the includes()
    method to determine whether the word exists within the string. But it doesn’t
    tell you the frequency of the word’s appearance.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想为应用程序添加搜索功能，提供一个单词在文本中出现多少次的信息。你可以使用 `includes()` 方法来判断单词是否存在于字符串中。但它并不会告诉你单词出现的频率。
- en: You want to create a function that counts the number of a specified word (in
    this case, “cougar”) and returns the total number it finds.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你想创建一个函数，统计指定单词（在本例中是 "cougar"）的出现次数，并返回它找到的总数。
- en: Solution
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Divide the string into an array of substrings with the split() method, count
    the number of items in the array by reading its length property, and return the
    result:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `split()` 方法将字符串分割为子字符串数组，通过读取数组的长度属性来计算数组中的项数，并返回结果：
- en: '[part_1/counting_a_specific_word/split_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/counting_a_specific_word/split_ex1.js)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_1/counting_a_specific_word/split_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/counting_a_specific_word/split_ex1.js)'
- en: '|   | **const** str = *`Cougar is an adaptable, generalist species, occurring
    in most* |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** str = *`Cougar 是一种适应性强的通用物种，分布于大多数* |'
- en: '|   | *American habitat types. Secretive and largely solitary by nature, the
    cougar* |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '|   | *美国栖息地类型。猫科动物本性上较为神秘且通常孤独， cougar* |'
- en: '|   | *is properly considered both nocturnal and crepuscular. Primary food
    sources* |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '|   | *是典型的夜行性和黎明性动物。主要的食物来源* |'
- en: '|   | *are ungulates, particularly deer, but cougars also hunt smaller prey
    such as* |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '|   | *它们是偶蹄目动物，尤其是鹿，但 cougar 也会捕猎较小的猎物，如* |'
- en: '|   | *rodents.`*; |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '|   | *啮齿动物。`*; |'
- en: '|   |  |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | **function** countWord(str, word, caseSensitivity) { |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '|   | **function** countWord(str, word, caseSensitivity) { |'
- en: '|   | **if** (caseSensitivity) { |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '|   | **如果** (caseSensitivity) { |'
- en: '|   | **return** str.split(word).length - 1; |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '|   | **return** str.split(word).length - 1; |'
- en: '|   | } **else** { |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '|   | } **else** { |'
- en: '|   | **return** str.toLowerCase().split(word).length - 1; |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '|   | **return** str.toLowerCase().split(word).length - 1; |'
- en: '|   | } |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '|   | } |'
- en: '|   | } |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '|   | } |'
- en: '|   |  |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | console.log(countWord(str, *"cougar"*, **true**)); *// → 2* |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '|   | console.log(countWord(str, *"cougar"*, **true**)); *// → 2* |'
- en: '|   | console.log(countWord(str, *"cougar"*, **false**)); *// → 3* |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '|   | console.log(countWord(str, *"cougar"*, **false**)); *// → 3* |'
- en: The countWord() function returns the total number of occurrences of the word
    in the str string.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: countWord() 函数返回单词在 str 字符串中出现的总次数。
- en: Discussion
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论
- en: 'The countWord() function accepts three arguments:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: countWord() 函数接受三个参数：
- en: 'str: A string containing the text to search for a word'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'str: 包含要搜索单词的文本的字符串'
- en: 'word: A string representing the word to count in the text'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'word: 表示要在文本中计数的单词的字符串'
- en: 'caseSensitivity: A Boolean value indicating whether the search should be case
    insensitive'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'caseSensitivity: 一个布尔值，指示搜索是否应区分大小写'
- en: Inside the function, we check the value of caseSensitivity. If it has a value
    of false, we first convert the string to lowercase with the toLowerCase() method.
    Then we split the str input string at each occurrence of word and return the number
    of resulting substrings, which is equal to the number of times word appears in str.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数内部，我们检查 caseSensitivity 的值。如果它是 false，我们首先使用 toLowerCase() 方法将字符串转换为小写字母。然后，我们在每次出现单词时用
    split() 方法分割 str 输入字符串，并返回由此产生的子字符串数量，这个数量等于 word 在 str 中出现的次数。
- en: 'Notice the subtraction at the end of the statement. If we pass a string having
    one instance of “cougar” to split(), it returns an array with two items. The subtraction
    is necessary to offset one item and get the correct count:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意语句末尾的减法。如果我们传递一个包含一个实例“cougar”的字符串给 split()，它会返回一个包含两个项目的数组。这个减法是必要的，用来偏移一个项目，以便得到正确的计数：
- en: '[part_1/counting_a_specific_word/split_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/counting_a_specific_word/split_ex2.js)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_1/counting_a_specific_word/split_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/counting_a_specific_word/split_ex2.js)'
- en: '|   | **const** str = *"The word cougar is borrowed from the Portuguese çuçuarana."*;
    |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** str = *"单词 cougar 源自葡萄牙语 çuçuarana。"*; |'
- en: '|   | **const** word = *"cougar"*; |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** word = *"cougar"*; |'
- en: '|   |  |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | str.split(word); |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '|   | str.split(word); |'
- en: '|   | *// → ["The word ", " is borrowed from the Portuguese çuçuarana."]* |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '|   | *// → ["单词 ", " 源自葡萄牙语 çuçuarana。"]* |'
- en: split() is one of those versatile JavaScript tools that come in handy in so
    many different situations. In this recipe, we incorporated split() in a function
    to count the number of occurrences of a specific word. But as you’ve seen in recipes
    like Recipe 3, [*Matching the Beginning or End of a String with startsWith() and
    endsWith()*](f_0013.xhtml#rcp.start_end) and Recipe 4, [*Extracting Lists from
    Text with slice()*](f_0014.xhtml#rcp.slice), you can take advantage of split()
    to solve other text-processing problems as well.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: split() 是一个多功能的 JavaScript 工具，在许多不同的场景中都能派上用场。在这个示例中，我们将 split() 集成到一个函数中，用来计算特定单词出现的次数。但是正如你在示例
    3 [*使用 startsWith() 和 endsWith() 匹配字符串的开始或结尾*](f_0013.xhtml#rcp.start_end) 和示例
    4 [*使用 slice() 从文本中提取列表*](f_0014.xhtml#rcp.slice) 中看到的，你也可以利用 split() 来解决其他文本处理问题。
