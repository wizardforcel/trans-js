- en: Graphs
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 图
- en: A graph is a data structure that specializes in relationships, as it easily
    conveys how data is connected.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 图是一种专注于关系的数据结构，因为它可以轻松传达数据是如何连接的。
- en: 'Here’s a visualization of our social network, displayed as a graph:'
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是我们社交网络的可视化，显示为图：
- en: '`![images/graphs/graph_1.png](images/graphs/graph_1.png)`'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '`![images/graphs/graph_1.png](images/graphs/graph_1.png)`'
- en: Each person is represented by a node, and each line indicates a friendship with
    another person. If you look at `Alice`, for example, you can see that she is friends
    with `Bob`, `Diana`, and `Fred` since her node has lines that connect to their
    nodes.
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 每个人都由一个节点表示，每条线表示与另一个人的友谊。例如，如果你看看`Alice`，你可以看到她与`Bob`、`Diana`和`Fred`是朋友，因为她的节点有与他们节点连接的线。
- en: Graphs vs. Trees
  id: totrans-5
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 图与树
- en: You might have noticed that graphs look similar to trees, which we’ve dealt
    with in the past few chapters. Indeed, trees are a type of graph. Both data structures
    consist of nodes connected to each other.
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 你可能注意到图看起来与树相似，我们在过去的几章中已经处理过树。实际上，树是一种图。两种数据结构都由相互连接的节点组成。
- en: So what’s the difference between a graph and a tree?
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 那么图和树之间的区别是什么？
- en: 'Here’s the deal: while all trees are graphs, not all graphs are trees.'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 事情是这样的：虽然所有的树都是图，但并不是所有的图都是树。
- en: Specifically, for a graph to be considered a tree, it cannot have cycles, and
    all nodes must be connected. Let’s see what that means.
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 具体而言，为了使一个图被视为树，它不能有循环，并且所有节点必须是连接的。让我们看看这意味着什么。
- en: A graph may have nodes that form what is known as a cycle—that is, nodes that
    reference each other circularly. In the previous example, `Alice` is friends with
    `Diana`, and `Diana` is connected to `Bob`, and `Bob` is connected…to `Alice`.
    These three nodes form a cycle.
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 一个图可能有形成循环的节点——即相互循环引用的节点。在之前的例子中，`Alice`与`Diana`是朋友，`Diana`与`Bob`相连，而`Bob`又与……`Alice`相连。这三个节点形成了一个循环。
- en: Trees, on the other hand, are not “allowed” to have cycles. If a graph has a
    cycle, then it’s not a tree.
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 另一方面，树是不“允许”有循环的。如果一个图有循环，那么它就不是树。
- en: Another characteristic specific to trees is that every node is somehow connected
    to every other node, even if the connections are indirect. However, it’s possible
    for a graph to not be fully connected.
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 树的另一个特征是每个节点在某种程度上都与其他节点相连，即使连接是间接的。然而，一个图可能并不是完全连通的。
- en: 'See the following graph:'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 请查看以下图：
- en: '`![images/graphs/disconnected_graph.png](images/graphs/disconnected_graph.png)`'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '`![images/graphs/disconnected_graph.png](images/graphs/disconnected_graph.png)`'
- en: In this social network, we have two pairs of friends. However, no one from either
    pair is friends with anyone from the other pair. Additionally, we can see that
    `Vicky` has no friends yet, as perhaps she signed up for this social network just
    minutes ago. With trees, however, there’s never a node that’s disconnected from
    the rest of the tree.
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个社交网络中，我们有两对朋友。然而，这两对朋友中的任何人都没有与另一对的任何人交朋友。此外，我们可以看到`Vicky`还没有朋友，因为她可能是几分钟前刚注册这个社交网络的。然而，在树中，永远不会有一个节点与树的其余部分断开连接。
- en: Graph Jargon
  id: totrans-16
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 图的术语
- en: Graphs have a bit of their own technical jargon. We’re used to calling each
    piece of data a node, but in “graph-speak,” each node is called a `vertex`. The
    lines between nodes, um—`vertices`, have their own name as well and are called
    `edges`. And `vertices` that are connected by an `edge` are said to be adjacent
    to each other. Some computer scientists also refer to adjacent `vertices` as `neighbors`.
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 图有自己的一些技术术语。我们习惯称每个数据片段为节点，但在“图语言”中，每个节点被称为`vertex`。节点之间的线，嗯——`vertices`，也有自己的名称，称为`edges`。被`edge`连接的`vertices`被称为彼此相邻。一些计算机科学家也将相邻的`vertices`称为`neighbors`。
- en: In our first graph, then, the vertices of `Alice` and `Bob` are adjacent to
    each other since they share an edge.
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在我们的第一个图中，`Alice`和`Bob`的`vertices`是相邻的，因为它们共享一条边。
- en: I mentioned earlier that it’s possible for a graph to have a `vertex` that isn’t
    connected at all to other `vertices`. However, a graph where all the `vertices`
    are connected in some way is said to be a connected graph.
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我之前提到过，一个图可能有一个与其他`vertices`完全不连接的`vertex`。然而，所有`vertices`以某种方式相连的图被称为连通图。
- en: The Bare-Bones Graph Implementation
  id: totrans-20
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 简单图的实现
- en: 为了代码组织的考虑，我们将使用面向对象的类来表示我们的图，但值得注意的是，我们也可以使用基本的哈希表（参见第 8 章，[`“Blazing Fast Lookup
    with Hash Tables”`](f_0076.xhtml#chp.hashes)）来表示一个初步的图。以下是使用哈希表的社交网络的基本实现：
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 为了代码组织的考虑，我们将使用面向对象的类来表示我们的图，但值得注意的是，我们也可以使用基本的哈希表（参见第 8 章，[`“使用哈希表实现快速查找”`](f_0076.xhtml#chp.hashes)）来表示一个初步的图。以下是使用哈希表的社交网络的基本实现：
- en: '| ​  | `friends = {` |'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `friends = {` |'
- en: '| ​  | `“Alice”`: [`“Bob”`, `“Diana”`, `“Fred”`], |'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `“Alice”`: [`“Bob”`, `“Diana”`, `“Fred”`], |'
- en: '| ​  | `“Bob”`: [`“Alice”`, `“Cynthia”`, `“Diana”`], |'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `“Bob”`: [`“Alice”`, `“Cynthia”`, `“Diana”`], |'
- en: '| ​  | `“Cynthia”`: [`“Bob”`], |'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `“Cynthia”`: [`“Bob”`], |'
- en: '| ​  | `“Diana”`: [`“Alice”`, `“Bob”`, `“Fred”`], |'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `“Diana”`: [`“Alice”`, `“Bob”`, `“Fred”`], |'
- en: '| ​  | `“Elise”`: [`“Fred”`], |'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `“Elise”`: [`“Fred”`], |'
- en: '| ​  | `“Fred”`: [`“Alice”`, `“Diana”`, `“Elise”`] |'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `“Fred”`: [`“Alice”`, `“Diana”`, `“Elise”`] |'
- en: '| ​  | `}` |'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `}` |'
- en: 有了图，我们可以在 O(1) 中查找 Alice 的朋友，因为我们可以在哈希表中用一步查找任何键的值：
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 有了图，我们可以在 O(1) 中查找 **Alice** 的朋友，因为我们可以在哈希表中用一步查找任何键的值：
- en: '| ​  | `friends["Alice"]` |'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `friends["Alice"]` |'
- en: 这立即返回包含所有 Alice 的朋友的数组。
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这立即返回包含所有 **Alice** 的朋友的数组。
