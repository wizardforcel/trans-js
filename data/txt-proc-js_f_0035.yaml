- en: '| Recipe 24 | Asserting the Start or End of a String with ^ and $ |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: 配方 24 | 使用 ^ 和 $ 断言字符串的开始或结束 |
- en: Task
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务
- en: 'Suppose you have an input field in your app that allows customers to enter
    their order number and track their package. You want to ensure the user input
    is a number before searching it in your database. If you are a bit familiar with
    regex, you know that to match a digit with regex, you can use \d. And to match
    one or more digits, you can put a plus sign right after it like this:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你在应用程序中有一个输入字段，允许客户输入他们的订单号并跟踪包裹。你想确保用户输入的是数字，然后再在数据库中查询。如果你对正则表达式稍微熟悉，你会知道，要匹配数字，可以使用
    \d。而要匹配一个或多个数字，可以在其后加上加号，像这样：
- en: '[part_2/caret_and_dollar/cnd_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/caret_and_dollar/cnd_ex1.js)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/caret_and_dollar/cnd_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/caret_and_dollar/cnd_ex1.js)'
- en: '|   | **const** input = *"8751409"*; |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '|   | **常量** input = *"8751409"*; |'
- en: '|   |  |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | **function** verifyDigits(input) { |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '|   | **函数** verifyDigits(input) { |'
- en: '|   | **const** re = */**\d**+/*; |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '|   | **常量** re = */**\d**+/*; |'
- en: '|   | **return** re.test(input); |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '|   | **返回** re.test(input); |'
- en: '|   | } |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '|   | } |'
- en: '|   |  |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | verifyDigits(input); *// → true* |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '|   | verifyDigits(input); *// → true* |'
- en: 'This regex matches “8751409” as you intended. But it also matches a string
    like “123abc” or “abc123abc”:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个正则表达式会像你预期的那样匹配“8751409”。但是它也会匹配像“123abc”或“abc123abc”这样的字符串：
- en: '[part_2/caret_and_dollar/cnd_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/caret_and_dollar/cnd_ex2.js)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/caret_and_dollar/cnd_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/caret_and_dollar/cnd_ex2.js)'
- en: '|   | **const** input = *"abc123abc"*; |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '|   | **常量** input = *"abc123abc"*; |'
- en: '|   |  |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | **function** verifyDigits(input) { |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '|   | **函数** verifyDigits(input) { |'
- en: '|   | **const** re = */**\d**+/*; |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '|   | **常量** re = */**\d**+/*; |'
- en: '|   | **return** re.test(input); |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '|   | **返回** re.test(input); |'
- en: '|   | } |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '|   | } |'
- en: '|   |  |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | verifyDigits(input); *// → true* |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '|   | verifyDigits(input); *// → true* |'
- en: So what happened here? Your pattern tells the regex engine to match one or more
    digits, but it doesn’t tell it where. So, it successfully matches the digits in
    the middle of the string and returns true even though there are other non-matching
    characters in the string.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 那么发生了什么呢？你的模式告诉正则表达式引擎匹配一个或多个数字，但它没有告诉它在哪个位置匹配。所以，它成功地匹配了字符串中间的数字，并返回true，即使字符串中还有其他不匹配的字符。
- en: What you need is a way to specify the beginning and end of the string in your
    regex so it won’t match other characters.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要的是一种方法，来指定正则表达式中字符串的开始和结束位置，以便它不会匹配其他字符。
- en: Solution
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Place a caret (^) at the beginning and a dollar symbol ($) at the end of the
    pattern, like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在模式的开头加上插入符号（^），在结尾加上美元符号（$），像这样：
- en: '[part_2/caret_and_dollar/cnd_ex3.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/caret_and_dollar/cnd_ex3.js)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_2/caret_and_dollar/cnd_ex3.js](http://media.pragprog.com/titles/fkjavascript/code/part_2/caret_and_dollar/cnd_ex3.js)'
- en: '|   | **const** digits = *"8757409"*; |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '|   | **常量** digits = *"8757409"*; |'
- en: '|   | **const** digits_and_letters = *"875abc"*; |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '|   | **常量** digits_and_letters = *"875abc"*; |'
- en: '|   |  |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | **function** verifyDigits(input) { |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '|   | **函数** verifyDigits(input) { |'
- en: '|   | **const** re = */^**\d**+$/*; |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '|   | **const** re = */^**\d**+$/*; |'
- en: '|   | **return** re.test(input); |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '|   | **return** re.test(input); |'
- en: '|   | } |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '|   | } |'
- en: '|   |  |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | console.log(verifyDigits(digits)); *// → true* |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '|   | console.log(verifyDigits(digits)); *// → true* |'
- en: '|   | console.log(verifyDigits(digits_and_letters)); *// → false* |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '|   | console.log(verifyDigits(digits_and_letters)); *// → false* |'
- en: The regex now matches the exact phrase you’re looking for! The caret (^) asserts
    the position at the start of the string, and a dollar symbol ($) asserts the position
    at the end of the string.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式现在可以精确匹配你所寻找的短语！插入符号（`^`）断言字符串的开始位置，美元符号（`$`）断言字符串的结束位置。
- en: Discussion
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论
- en: Don’t confuse ^ and $ with startsWith() and endsWith(). ^ and $ are known as
    zero-width assertions, which means they don’t match actual characters, but rather
    positions in the text. So, the caret symbol in /^Hello$/ doesn’t match “H” in
    the input. Instead, it asserts that no other character comes before the literal
    characters “Hello.”
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 不要将 `^` 和 `$` 与 startsWith() 和 endsWith() 混淆。`^` 和 `$` 被称为零宽度断言，这意味着它们不匹配实际字符，而是匹配文本中的位置。因此，`/^Hello$/`
    中的插入符号并不会匹配输入中的 "H"，而是断言在文字 "Hello" 之前没有其他字符。
- en: Similarly, the dollar symbol doesn’t match any character, it just ensures that
    the position is the end of the string. If you want to match specific characters
    at the beginning or end of a string, you should use JavaScript’s startsWith()
    and endsWith() methods (see Recipe 3, [*Matching the Beginning or End of a String
    with startsWith() and endsWith()*](f_0013.xhtml#rcp.start_end)).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，美元符号（`$`）并不匹配任何字符，它只是确保位置是在字符串的末尾。如果你想匹配字符串开头或结尾的特定字符，你应该使用 JavaScript 的
    startsWith() 和 endsWith() 方法（参见配方 3，[*使用 startsWith() 和 endsWith() 匹配字符串的开始或结束*](f_0013.xhtml#rcp.start_end)）。
- en: '| The Multiline Flag Changes the Rules |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 多行标志改变规则 |'
- en: '| --- |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| ![images/aside-icons/warning.png](images/aside-icons/warning.png) | If you
    use a multiline flag, $ also matches the point before a line break character,
    and ^ also matches the point after a line break character. We’ll cover the multiline
    flag in Recipe 41, [*Forcing ^ and $ to Match at the Start and End of a Line with
    the m Flag*](f_0052.xhtml#rcp.flag_m). |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| ![images/aside-icons/warning.png](images/aside-icons/warning.png) | 如果你使用多行标志，`$`
    还会匹配换行符前的位置，而 `^` 也会匹配换行符后的位置。我们将在配方 41 中讲解多行标志，[*强制 `^` 和 `$` 匹配行的开始和结束位置，使用
    m 标志*](f_0052.xhtml#rcp.flag_m)。 |'
- en: Use ^ and $ to assert a position at the beginning or end of a string, but be
    careful when using the multiline flag as it changes how these symbols work.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `^` 和 `$` 来断言字符串的开始或结束位置，但在使用多行标志时要小心，因为它会改变这些符号的工作方式。
- en: 'Regex also comes with a syntax for matching whole words only: \b. This syntax,
    along with ^ and $, are known as boundaries. The next recipe tells you all about
    the word boundary (\b).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式还提供了一种语法用于匹配整个单词：`\b`。这种语法与 `^` 和 `$` 一起被称为边界。接下来的配方会告诉你有关单词边界（`\b`）的所有信息。
