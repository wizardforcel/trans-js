- en: '`Bubble Sort` in Action'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`冒泡排序` 实际运行'
- en: Let’s walk through a complete example of `Bubble Sort`.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们完整地演示一次 `冒泡排序`。
- en: Assume we want to sort the array `[4, 2, 7, 1, 3]`. It’s currently out of order,
    and we want to produce an array that contains the same values in ascending order.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 假设我们想对数组 `[4, 2, 7, 1, 3]` 进行排序。它目前的顺序不对，我们希望生成一个包含相同值的升序数组。
- en: 'Let’s begin the first pass-through. This is our starting array:'
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们开始第一次遍历。这是我们的初始数组：
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_5.png](images/speeding_up_your_code_with_big_o/bubble_sort_5.png)'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/speeding_up_your_code_with_big_o/bubble_sort_5.png](images/speeding_up_your_code_with_big_o/bubble_sort_5.png)'
- en: 'Step 1: First, we compare the 4 and the 2:'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第 1 步：首先，我们比较 4 和 2：
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_6.png](images/speeding_up_your_code_with_big_o/bubble_sort_6.png)'
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/speeding_up_your_code_with_big_o/bubble_sort_6.png](images/speeding_up_your_code_with_big_o/bubble_sort_6.png)'
- en: 'Step 2: They’re out of order, so we swap them:'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第 2 步：它们的顺序不对，所以我们交换它们：
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_7.png](images/speeding_up_your_code_with_big_o/bubble_sort_7.png)![images/speeding_up_your_code_with_big_o/bubble_sort_8.png](images/speeding_up_your_code_with_big_o/bubble_sort_8.png)'
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/speeding_up_your_code_with_big_o/bubble_sort_7.png](images/speeding_up_your_code_with_big_o/bubble_sort_7.png)![images/speeding_up_your_code_with_big_o/bubble_sort_8.png](images/speeding_up_your_code_with_big_o/bubble_sort_8.png)'
- en: 'Step 3: Next, we compare the 4 and the 7:'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第 3 步：接下来，我们比较 4 和 7：
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_9.png](images/speeding_up_your_code_with_big_o/bubble_sort_9.png)'
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/speeding_up_your_code_with_big_o/bubble_sort_9.png](images/speeding_up_your_code_with_big_o/bubble_sort_9.png)'
- en: They’re in the correct order, so we don’t need to perform a swap.
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 它们的顺序是正确的，所以我们不需要交换。
- en: 'Step 4: We now compare the 7 and the 1:'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第 4 步：我们现在比较 7 和 1：
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_10.png](images/speeding_up_your_code_with_big_o/bubble_sort_10.png)'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/speeding_up_your_code_with_big_o/bubble_sort_10.png](images/speeding_up_your_code_with_big_o/bubble_sort_10.png)'
- en: 'Step 5: They’re out of order, so we swap them:'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第 5 步：它们的顺序不对，所以我们交换它们：
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_11.png](images/speeding_up_your_code_with_big_o/bubble_sort_11.png)![images/speeding_up_your_code_with_big_o/bubble_sort_12.png](images/speeding_up_your_code_with_big_o/bubble_sort_12.png)'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/speeding_up_your_code_with_big_o/bubble_sort_11.png](images/speeding_up_your_code_with_big_o/bubble_sort_11.png)![images/speeding_up_your_code_with_big_o/bubble_sort_12.png](images/speeding_up_your_code_with_big_o/bubble_sort_12.png)'
- en: 'Step 6: We compare the 7 and the 3:'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第 6 步：我们比较 7 和 3：
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_13.png](images/speeding_up_your_code_with_big_o/bubble_sort_13.png)'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/speeding_up_your_code_with_big_o/bubble_sort_13.png](images/speeding_up_your_code_with_big_o/bubble_sort_13.png)'
- en: 'Step 7: They’re out of order, so we swap them:'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第 7 步：它们的顺序不对，所以我们交换它们：
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_14.png](images/speeding_up_your_code_with_big_o/bubble_sort_14.png)![images/speeding_up_your_code_with_big_o/bubble_sort_15.png](images/speeding_up_your_code_with_big_o/bubble_sort_15.png)'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/speeding_up_your_code_with_big_o/bubble_sort_14.png](images/speeding_up_your_code_with_big_o/bubble_sort_14.png)![images/speeding_up_your_code_with_big_o/bubble_sort_15.png](images/speeding_up_your_code_with_big_o/bubble_sort_15.png)'
- en: We now know for a fact that the 7 is in its correct position within the array
    because we kept moving it along to the right until it reached its proper place.
    The previous diagram has little lines surrounding the 7 to indicate that the 7
    is officially in its correct position.
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们现在可以确定 7 在数组中处于正确的位置，因为我们一直将它向右移动，直到它达到合适的位置。前面的图示中有小线条围绕着 7，以表明 7 确实在正确的位置上。
- en: 'This is actually the reason why this algorithm is called `Bubble Sort`: in
    each pass-through, the highest unsorted value “bubbles” up to its correct position.'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这实际上就是为什么这个算法被称为`冒泡排序`的原因：在每次遍历中，最大的未排序值会“冒泡”到它正确的位置。
- en: Because we made at least one swap during this pass-through, we need to conduct
    another pass-through.
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因为在这一轮中我们至少进行了一次交换，所以需要再进行一轮遍历。
- en: 'We begin the second pass-through:'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们开始第二轮遍历：
- en: 'Step 8: We compare the 2 and the 4:'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第 8 步：我们比较 2 和 4：
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_17.png](images/speeding_up_your_code_with_big_o/bubble_sort_17.png)'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/speeding_up_your_code_with_big_o/bubble_sort_17.png](images/speeding_up_your_code_with_big_o/bubble_sort_17.png)'
- en: They’re in the correct order, so we can move on.
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 它们的顺序是正确的，所以我们可以继续。
- en: 'Step 9: We compare the 4 and the 1:'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第 9 步：我们比较 4 和 1：
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_18.png](images/speeding_up_your_code_with_big_o/bubble_sort_18.png)'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/speeding_up_your_code_with_big_o/bubble_sort_18.png](images/speeding_up_your_code_with_big_o/bubble_sort_18.png)'
- en: 'Step 10: They’re out of order, so we swap them:'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 第 10 步：它们的顺序不对，所以我们交换它们：
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_19.png](images/speeding_up_your_code_with_big_o/bubble_sort_19.png)![images/speeding_up_your_code_with_big_o/bubble_sort_20.png](images/speeding_up_your_code_with_big_o/bubble_sort_20.png)'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/speeding_up_your_code_with_big_o/bubble_sort_19.png](images/speeding_up_your_code_with_big_o/bubble_sort_19.png)![images/speeding_up_your_code_with_big_o/bubble_sort_20.png](images/speeding_up_your_code_with_big_o/bubble_sort_20.png)'
- en: 'Step 11: We compare the 4 and the 3:'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 步骤11：我们比较4和3：
- en: '![images/speeding_up_your_code_with_big_o/step_11.png](images/speeding_up_your_code_with_big_o/step_11.png)'
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/speeding_up_your_code_with_big_o/step_11.png](images/speeding_up_your_code_with_big_o/step_11.png)'
- en: 'Step 12: They’re out of order, so we swap them:'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 步骤12：它们是错序的，所以我们交换它们：
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_21.png](images/speeding_up_your_code_with_big_o/bubble_sort_21.png)![images/speeding_up_your_code_with_big_o/bubble_sort_22.png](images/speeding_up_your_code_with_big_o/bubble_sort_22.png)'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/speeding_up_your_code_with_big_o/bubble_sort_21.png](images/speeding_up_your_code_with_big_o/bubble_sort_21.png)![images/speeding_up_your_code_with_big_o/bubble_sort_22.png](images/speeding_up_your_code_with_big_o/bubble_sort_22.png)'
- en: We don’t have to compare the 4 and the 7, because we know that the 7 is already
    in its correct position from the previous pass-through. And now we also know that
    the 4 has bubbled up to its correct position as well. This concludes our second
    pass-through.
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们不需要比较4和7，因为我们知道7已经在前一次遍历中处于正确的位置。现在我们也知道4已经上升到了正确的位置。这结束了我们的第二次遍历。
- en: Because we made at least one swap during this pass-through, we need to conduct
    another pass-through.
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因为我们在这次遍历中至少进行了一个交换，我们需要再进行一次遍历。
- en: 'We begin the third pass-through:'
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们开始第三次遍历：
- en: 'Step 13: We compare the 2 and the 1:'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 步骤13：我们比较2和1：
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_23.png](images/speeding_up_your_code_with_big_o/bubble_sort_23.png)'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/speeding_up_your_code_with_big_o/bubble_sort_23.png](images/speeding_up_your_code_with_big_o/bubble_sort_23.png)'
- en: 'Step 14: They’re out of order, so we swap them:'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 步骤14：它们是错序的，所以我们交换它们：
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_24.png](images/speeding_up_your_code_with_big_o/bubble_sort_24.png)![images/speeding_up_your_code_with_big_o/bubble_sort_24b.png](images/speeding_up_your_code_with_big_o/bubble_sort_24b.png)'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/speeding_up_your_code_with_big_o/bubble_sort_24.png](images/speeding_up_your_code_with_big_o/bubble_sort_24.png)![images/speeding_up_your_code_with_big_o/bubble_sort_24b.png](images/speeding_up_your_code_with_big_o/bubble_sort_24b.png)'
- en: 'Step 15: We compare the 2 and the 3:'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 步骤15：我们比较2和3：
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_25.png](images/speeding_up_your_code_with_big_o/bubble_sort_25.png)'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/speeding_up_your_code_with_big_o/bubble_sort_25.png](images/speeding_up_your_code_with_big_o/bubble_sort_25.png)'
- en: They’re in the correct order, so we don’t need to swap them.
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 它们是有序的，所以我们不需要交换。
- en: 'We now know that the 3 has bubbled up to its correct spot:'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们现在知道3已经上升到它的正确位置：
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_26.png](images/speeding_up_your_code_with_big_o/bubble_sort_26.png)'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/speeding_up_your_code_with_big_o/bubble_sort_26.png](images/speeding_up_your_code_with_big_o/bubble_sort_26.png)'
- en: Since we made at least one swap during this pass-through, we need to perform
    another one.
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 由于我们在这次遍历中至少进行了一个交换，我们需要再进行一次遍历。
- en: 'And so begins the fourth pass-through:'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 于是第四次遍历开始：
- en: 'Step 16: We compare the 1 and the 2:'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 步骤16：我们比较1和2：
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_27.png](images/speeding_up_your_code_with_big_o/bubble_sort_27.png)'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/speeding_up_your_code_with_big_o/bubble_sort_27.png](images/speeding_up_your_code_with_big_o/bubble_sort_27.png)'
- en: Because they’re in order, we don’t need to swap. We can end this pass-through,
    since all the remaining values are already correctly sorted.
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因为它们是有序的，我们不需要交换。我们可以结束这次遍历，因为所有剩余的值已经正确排序。
- en: 'Now that we’ve made a pass-through that didn’t require any swaps, we know that
    our array is completely sorted:'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在我们已经进行了不需要任何交换的遍历，我们知道我们的数组已经完全排序：
- en: '![images/speeding_up_your_code_with_big_o/bubble_sort_28.png](images/speeding_up_your_code_with_big_o/bubble_sort_28.png)'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_IMG
  zh: '![images/speeding_up_your_code_with_big_o/bubble_sort_28.png](images/speeding_up_your_code_with_big_o/bubble_sort_28.png)'
- en: 'Code Implementation: Bubble Sort'
  id: totrans-54
  prefs:
  - PREF_H3
  stylish: true
  type: TYPE_NORMAL
  zh: 代码实现：冒泡排序
- en: 'Here’s an implementation of Bubble Sort in JavaScript:'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是一个用JavaScript实现的冒泡排序：
- en: '| ​  | `function` bubbleSort(array) { |'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` bubbleSort(array) { |'
- en: '| ​  | `let` unsortedUntilIndex = array.length - 1; |'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` unsortedUntilIndex = array.length - 1; |'
- en: '| ​  | `let` sorted = `false`; |'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` sorted = `false`; |'
- en: '| ​  |  |'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `while` (!sorted) { |'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while` (!sorted) { |'
- en: '| ​  | sorted = `true`; |'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | sorted = `true`; |'
- en: '| ​  |  |'
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `for` (`let` i = 0; i < unsortedUntilIndex; i++) { |'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`let` i = 0; i < unsortedUntilIndex; i++) { |'
- en: '| ​  | `if` (array[i] > array[i + 1]) { |'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (array[i] > array[i + 1]) { |'
- en: '| ​  | [array[i], array[i + 1]] = [array[i + 1], array[i]]; |'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | [array[i], array[i + 1]] = [array[i + 1], array[i]]; |'
- en: '| ​  | `sorted` = `false`; |'
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `sorted` = `false`; |'
- en: '| ​  | } |'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | `unsortedUntilIndex` -= 1; |'
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `unsortedUntilIndex` -= 1; |'
- en: '| ​  | } |'
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return` array; |'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` array; |'
- en: '| ​  | } |'
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 'To use this function, we can pass an unsorted array to it, like so:'
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 要使用这个函数，我们可以将一个未排序的数组传递给它，如下所示：
- en: '| ​  | `console.log(bubbleSort([65, 55, 45, 35, 25, 15, 10]));` |'
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `console.log(bubbleSort([65, 55, 45, 35, 25, 15, 10]));` |'
- en: This function will then return the sorted array.
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这个函数将返回排序后的数组。
- en: Let’s break the function down line by line to see how it works. I’ll explain
    each line by first providing the explanation, followed by the line of code itself.
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们逐行分析这个函数，看看它是如何工作的。我将先提供解释，然后给出代码行。
- en: 'The first thing we do is create a variable called `unsortedUntilIndex`. This
    keeps track of the rightmost index of the array that has not yet been sorted.
    When we first start the algorithm, the array is completely unsorted, so we initialize
    this variable to be the final index in the array:'
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们首先创建一个名为 `unsortedUntilIndex` 的变量。它跟踪尚未排序的数组的最右索引。当我们首次启动算法时，数组是完全未排序的，因此我们将该变量初始化为数组的最后一个索引：
- en: '| ​  | `let` `unsortedUntilIndex` = array.length - 1; |'
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` `unsortedUntilIndex` = array.length - 1; |'
- en: 'We also create a variable called `sorted` that will keep track of whether the
    array is fully sorted. Of course, when our code first runs, it isn’t, so we set
    it to `false`:'
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们还创建了一个名为 `sorted` 的变量，用于跟踪数组是否完全排序。当然，当我们的代码首次运行时，数组并没有排序，所以我们将其设置为 `false`：
- en: '| ​  | `let` `sorted` = `false`; |'
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` `sorted` = `false`; |'
- en: 'We begin a `while` loop that continues to run as long as the array is not sorted.
    Each round of this loop represents a pass-through of the array:'
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 我们开始一个 `while` 循环，只要数组未排序，它就会继续运行。每次循环代表一次对数组的遍历：
- en: '| ​  | `while` (!`sorted`) { |'
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while` (!`sorted`) { |'
- en: 'Next, we preliminarily establish `sorted` to be `true`:'
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 接下来，我们初步将 `sorted` 设置为 `true`：
- en: '| ​  | `sorted` = `true`; |'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `sorted` = `true`; |'
- en: The approach here is that in each pass-through, we’ll assume the array is sorted
    until we encounter a swap, in which case we’ll change the variable back to `false`.
    If we get through an entire pass-through without having to make any swaps, `sorted`
    will remain `true`, and we’ll know that the array is completely sorted.
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这里的方法是，在每次遍历中，我们假设数组是已排序的，直到遇到交换，这时我们会将变量改回 `false`。如果我们在一次完整的遍历中没有进行任何交换，`sorted`
    将保持为 `true`，我们就知道数组已经完全排序。
- en: 'Within the `while` loop, we begin a `for` loop in which we point to each pair
    of values in the array. We use the variable `i` as our first pointer, and it starts
    from the beginning of the array and goes until the index that hasn’t yet been
    sorted:'
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在 `while` 循环中，我们开始一个 `for` 循环，指向数组中的每对值。我们使用变量 `i` 作为第一个指针，它从数组的开始处开始，直到尚未排序的索引：
- en: '| ​  | `for` (`let` i = 0; i < `unsortedUntilIndex`; i += 1) { |'
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`let` i = 0; i < `unsortedUntilIndex`; i += 1) { |'
- en: 'Within this loop, we compare each pair of adjacent values and swap those values
    if they’re out of order. We also change `sorted` to `false` if we have to make
    a swap:'
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在这个循环中，我们比较每对相邻值，如果它们的顺序不对，就交换这些值。如果我们进行了交换，还会将 `sorted` 改为 `false`：
- en: '| ​  | `if` (array[i] > array[i + 1]) { |'
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (array[i] > array[i + 1]) { |'
- en: '| ​  | [array[i], array[i + 1]] = [array[i + 1], array[i]]; |'
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | [array[i], array[i + 1]] = [array[i + 1], array[i]]; |'
- en: '| ​  | `sorted` = `false`; |'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `sorted` = `false`; |'
- en: '| ​  | } |'
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: 'At the end of each pass-through, we know that the value we bubbled up all the
    way to the right is now in its correct position. Because of this, we decrement
    the `unsortedUntilIndex` by 1 since the index it was already pointing to is now
    sorted:'
  id: totrans-94
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在每次遍历结束时，我们知道我们冒泡到右边的值现在已在正确的位置。因此，我们将 `unsortedUntilIndex` 减少 1，因为它之前指向的索引现在已排序：
- en: '| ​  | `unsortedUntilIndex` -= 1; |'
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `unsortedUntilIndex` -= 1; |'
- en: 'The `while` loop ends once `sorted` is `true`, meaning the array is completely
    sorted. Once this is the case, we return the sorted array:'
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`while` 循环在 `sorted` 为 `true` 时结束，这意味着数组已完全排序。一旦满足这个条件，我们返回排序后的数组：'
- en: '| ​  | `return` array; |'
  id: totrans-97
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` array; |'
