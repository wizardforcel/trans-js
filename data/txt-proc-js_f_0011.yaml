- en: '| Recipe 1 | Determining If a Value Is a String with the typeof Operator |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: '| 食谱 1 | 使用 `typeof` 操作符确定一个值是否是字符串 |'
- en: Task
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务
- en: In Javascript, you will often need to validate that a value is a string. For
    example, in the next recipe, we’ll build a function that searches for multiple
    words in a string. Before you pass a value to the function, you’d want to check
    if it’s a string. Any other data type, like a number or Boolean, would cause your
    function to throw an error.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，你经常需要验证一个值是否为字符串。例如，在下一个食谱中，我们将构建一个函数，用来搜索字符串中的多个单词。在将值传递给函数之前，你需要检查它是否是字符串。任何其他数据类型，如数字或布尔值，都会导致函数抛出错误。
- en: Throughout this book, you will see functions of this sort repeatedly, so it’s
    a good place to start.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，你会多次看到类似的函数，因此这是一个很好的起点。
- en: Solution
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Use the typeof operator:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `typeof` 操作符：
- en: '[part_1/determining_valid_strings/typeof_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/determining_valid_strings/typeof_ex1.js)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_1/determining_valid_strings/typeof_ex1.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/determining_valid_strings/typeof_ex1.js)'
- en: '|   | **function** isString(value) { |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '|   | **function** isString(value) { |'
- en: '|   | **return** **typeof** value === *"string"*; |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '|   | **return** **typeof** value === *"string"*; |'
- en: '|   | } |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '|   | } |'
- en: '|   |  |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | isString(123); *// → false* |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '|   | isString(123); *// → false* |'
- en: '|   | isString(*"abc"*); *// → true* |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '|   | isString(*"abc"*); *// → true* |'
- en: The typeof operator returns a string indicating a value’s type.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`typeof` 操作符返回一个字符串，表示值的类型。'
- en: Discussion
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论
- en: 'In JavaScript, you can create a string literal with single or double quotes
    or the backticks:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，你可以使用单引号、双引号或反引号来创建字符串字面量：
- en: '[part_1/determining_valid_strings/typeof_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/determining_valid_strings/typeof_ex2.js)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_1/determining_valid_strings/typeof_ex2.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/determining_valid_strings/typeof_ex2.js)'
- en: '|   | **let** str1 = *"string"*; |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '|   | **let** str1 = *"string"*; |'
- en: '|   | **let** str2 = *''string''*; |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '|   | **let** str2 = *''string''*; |'
- en: '|   | **let** str3 = *`string`*; |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '|   | **let** str3 = *`string`*; |'
- en: 'So, a number enclosed in quotation marks or backticks is not a number anymore
    but a string. You can also create a string with the String() constructor if you
    call it without the new keyword:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，用引号或反引号括起来的数字不再是数字，而是字符串。如果你不使用 `new` 关键字，还可以使用 `String()` 构造函数来创建字符串：
- en: '[part_1/determining_valid_strings/typeof_ex3.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/determining_valid_strings/typeof_ex3.js)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_1/determining_valid_strings/typeof_ex3.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/determining_valid_strings/typeof_ex3.js)'
- en: '|   | String(123); *// → "123"* |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '|   | String(123); *// → "123"* |'
- en: 'In a string, each character occupies a position. Index 0 corresponds to the
    first character, index 1 to the second character, and so on. So, to get the second
    character in a string, you can type str[1]:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在字符串中，每个字符占据一个位置。索引 0 对应第一个字符，索引 1 对应第二个字符，依此类推。所以，要获取字符串中的第二个字符，可以输入 `str[1]`：
- en: '[part_1/determining_valid_strings/typeof_ex4.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/determining_valid_strings/typeof_ex4.js)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[part_1/determining_valid_strings/typeof_ex4.js](http://media.pragprog.com/titles/fkjavascript/code/part_1/determining_valid_strings/typeof_ex4.js)'
- en: '|   | **let** str = *"string"*; |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '|   | **let** str = *"string"*; |'
- en: '|   |  |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '|   |  |'
- en: '|   | console.log(str[1]); *// → t* |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '|   | console.log(str[1]); *// → t* |'
- en: Up next, we’ll begin our journey into the realm of JavaScript text processing
    methods by building a function that checks whether a string contains a list of
    words.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过构建一个函数，开始探索 JavaScript 文本处理方法的领域，该函数检查一个字符串是否包含一组单词。
