- en: Heaps as Priority Queues
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 堆作为优先队列
- en: Now that you understand how heaps work, we can circle back to our old friend,
    the priority queue.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 现在你已经理解了堆的工作原理，我们可以回到我们的老朋友——优先队列。
- en: Again, the primary function of a priority queue is to allow us immediate access
    to the highest-priority item in the queue. In our emergency room example, we want
    to first address the person with the most serious problem.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 再次强调，优先队列的主要功能是让我们能够立即访问队列中最高优先级的项目。在我们的急诊室示例中，我们希望首先处理最严重的问题。
- en: It’s for this reason that a heap is a natural fit for priority queue implementations.
    The heap gives us immediate access to the highest-priority item, which can always
    be found at the root node. Each time we take care of the highest-priority item
    (and then remove it from the heap), the next-highest item floats to the top of
    the heap and is on deck to be addressed next. And the heap accomplishes this while
    maintaining very fast insertions and deletions, both of which are `O(log N)`.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 正因如此，堆非常适合优先队列的实现。堆使我们能够立即访问最高优先级的项目，该项目总是位于根节点。每当我们处理最高优先级的项目（然后将其从堆中移除）时，下一个最高优先级的项目会浮到堆的顶部，准备好被处理。而且，堆在保持非常快速的插入和删除操作（均为`O(log
    N)`）的同时完成这一点。
- en: Contrast this to the ordered array, which requires much slower insertions of
    `O(N)` to ensure that each new value is in its proper place.
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 与需要较慢的插入时间`O(N)`以确保每个新值在其正确位置的有序数组相比。
- en: It turns out that the heap’s weak ordering is its very advantage. The fact that
    it doesn’t have to be perfectly ordered allows us to insert new values in `O(log
    N)` time. At the same time, the heap is ordered just enough so that we can always
    access the one item we need at any given time, namely, the heap’s greatest value.
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 事实证明，堆的弱排序正是它的优势。由于不必完全有序，我们可以在`O(log N)`时间内插入新值。同时，堆的排序足够好，以便我们始终可以访问到任意时刻所需的一个项目，即堆的最大值。
