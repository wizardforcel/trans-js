- en: JAVASCRIPT
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JAVASCRIPT
- en: 'Chapter 1: Introduction to JavaScript'
  id: totrans-1
  prefs:
  - PREF_H1
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章：JavaScript简介
- en: What is JavaScript?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是JavaScript？
- en: JavaScript, often abbreviated as JS, is a high-level, dynamic, and versatile
    programming language used for building interactive web applications. Created by
    Brendan Eich in 1995, it quickly became one of the most popular programming languages
    on the web. Initially designed to add interactivity to static web pages, it has
    evolved over the years into a full-fledged programming language capable of handling
    complex tasks.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript，通常缩写为JS，是一种高级的、动态的、功能多样的编程语言，用于构建互动型网页应用程序。由布伦丹·艾克（Brendan Eich）于1995年创建，它迅速成为网页上最流行的编程语言之一。最初旨在为静态网页添加交互性，它经过多年的发展，已经演变成一门可以处理复杂任务的完整编程语言。
- en: JavaScript is a core component of web development, allowing developers to enhance
    the user experience by creating interactive and dynamic elements on websites.
    From simple form validations to sophisticated web applications, JavaScript empowers
    developers to bring their ideas to life and engage users in meaningful ways.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是网页开发的核心组成部分，允许开发者通过在网站上创建互动和动态元素来增强用户体验。从简单的表单验证到复杂的网页应用程序，JavaScript使开发者能够将他们的创意变为现实，并以有意义的方式与用户互动。
- en: The Role of JavaScript in Web Development
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript在网页开发中的作用
- en: 'Web development involves creating websites and web applications that can be
    accessed through the internet. It encompasses two primary components: frontend
    development and backend development. JavaScript plays a pivotal role in frontend
    development, while backend development is often supported by other languages like
    Python, Ruby, or Java.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 网页开发涉及创建可以通过互联网访问的网站和网页应用程序。它包括两个主要组成部分：前端开发和后端开发。JavaScript在前端开发中扮演着关键角色，而后端开发则通常由其他语言如Python、Ruby或Java来支持。
- en: Frontend Development
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 前端开发
- en: 'Frontend development focuses on building the user interface and user experience
    of a website. It deals with everything the user interacts with directly, such
    as buttons, menus, forms, and animations. JavaScript is the backbone of frontend
    development, enabling developers to:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 前端开发专注于构建网站的用户界面和用户体验。它涉及到用户直接互动的所有内容，如按钮、菜单、表单和动画。JavaScript是前端开发的基石，使开发者能够：
- en: '1\. Enhance Interactivity:'
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 1. 增强互动性：
- en: JavaScript allows developers to add interactivity to web pages, making them
    more engaging and user-friendly. For example, you can create drop-down menus,
    sliders, and image carousels that respond to user actions, providing a seamless
    and interactive browsing experience.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript使开发者能够为网页添加互动性，使其更加吸引人和易于使用。例如，你可以创建下拉菜单、滑块和响应用户操作的图片轮播，提供无缝的互动浏览体验。
- en: '2\. Validate Form Input:'
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2. 验证表单输入：
- en: Form validation is essential for ensuring that users provide valid and accurate
    information. With JavaScript, you can validate user input in real-time, giving
    immediate feedback on errors and improving data integrity.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 表单验证对于确保用户提供有效和准确的信息至关重要。通过 JavaScript，你可以实时验证用户输入，立即反馈错误并提高数据的完整性。
- en: '3\. Manipulate DOM Elements:'
  id: totrans-13
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 3. 操作 DOM 元素：
- en: The Document Object Model (DOM) represents the structure of a web page and allows
    developers to access and modify its elements. JavaScript empowers developers to
    manipulate DOM elements dynamically, changing content, styles, and layouts on
    the fly.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 文档对象模型（DOM）表示网页的结构，允许开发者访问并修改其元素。JavaScript 使开发者能够动态操作 DOM 元素，实时更改内容、样式和布局。
- en: '4\. Handle Events:'
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 4. 处理事件：
- en: Events are actions or occurrences that happen in the browser, such as clicking
    a button or scrolling a page. JavaScript enables developers to respond to these
    events and trigger appropriate actions, such as displaying a message or loading
    additional content.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 事件是在浏览器中发生的动作或事件，如点击按钮或滚动页面。JavaScript 使开发者能够响应这些事件并触发适当的动作，如显示消息或加载更多内容。
- en: '5\. Implement Animations:'
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 5. 实现动画：
- en: Animations can add flair and visual appeal to a website. JavaScript, along with
    CSS, allows developers to create stunning animations that captivate users and
    improve the overall user experience.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 动画可以为网站增添亮点和视觉吸引力。JavaScript 和 CSS 使开发者能够创建令人惊叹的动画，吸引用户并改善整体用户体验。
- en: Backend Development
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 后端开发
- en: While JavaScript is mainly associated with frontend development, it has also
    gained popularity in backend development, thanks to the introduction of Node.js.
    Node.js is a runtime environment that allows JavaScript to be executed on the
    server-side, enabling developers to build robust and scalable backend applications
    using the same language they use on the frontend.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 JavaScript 主要与前端开发相关，但由于引入了 Node.js，它在后端开发中也变得越来越流行。Node.js 是一个运行时环境，使 JavaScript
    可以在服务器端执行，从而允许开发者使用与前端相同的语言构建强大且可扩展的后端应用程序。
- en: Setting Up the Development Environment
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置开发环境
- en: 'Before diving into JavaScript programming, it''s essential to set up a suitable
    development environment. Here''s a step-by-step guide to getting started:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始 JavaScript 编程之前，必须先设置一个合适的开发环境。以下是一步一步的入门指南：
- en: '1\. Choose a Text Editor:'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1. 选择一个文本编辑器：
- en: A text editor is where you write and edit your JavaScript code. There are numerous
    options available, such as Visual Studio Code, Sublime Text, Atom, and Notepad++.
    Choose one that suits your preferences and offers helpful features like syntax
    highlighting and code suggestions.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 文本编辑器是编写和编辑 JavaScript 代码的工具。市面上有许多选择，如 Visual Studio Code、Sublime Text、Atom
    和 Notepad++。选择一个符合你偏好且提供诸如语法高亮和代码建议等有用功能的编辑器。
- en: '2\. Install a Web Browser:'
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2. 安装一个网页浏览器：
- en: A web browser is necessary for testing and running your JavaScript code. Popular
    browsers like Google Chrome, Mozilla Firefox, and Microsoft Edge support developer
    tools that allow you to debug and inspect your code.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 测试和运行 JavaScript 代码需要一个 web 浏览器。像 Google Chrome、Mozilla Firefox 和 Microsoft
    Edge 这样的流行浏览器都支持开发者工具，允许你调试和检查代码。
- en: '3\. Set Up a Local Server (Optional):'
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3\. 设置本地服务器（可选）：
- en: For certain advanced tasks, such as making API calls or handling server-side
    code using Node.js, setting up a local server might be necessary. Tools like Node.js
    and Express can help you set up a local server for testing and development purposes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某些高级任务，比如进行 API 调用或使用 Node.js 处理服务器端代码，可能需要设置本地服务器。像 Node.js 和 Express 这样的工具可以帮助你设置一个用于测试和开发目的的本地服务器。
- en: Once your development environment is set up, you are ready to start writing
    JavaScript code and bring your ideas to life on the web.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的开发环境设置好，就可以开始编写 JavaScript 代码，并将你的创意在 web 上实现。
- en: Your First JavaScript Program
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你的第一个 JavaScript 程序
- en: Let's waste no time and write our first JavaScript program. We'll start with
    a simple "Hello, World!" example to get familiar with the basic syntax and structure
    of a JavaScript program.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们不浪费时间，写下第一个 JavaScript 程序。我们将从一个简单的“Hello, World!”示例开始，以熟悉 JavaScript 程序的基本语法和结构。
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, we use the `console.log()` function to print the "Hello, World!"
    message to the browser's console. The `console.log()` function is a useful tool
    for displaying output and debugging JavaScript code. It allows developers to inspect
    variables, objects, and messages in the browser's developer tools.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用 `console.log()` 函数将“Hello, World!”消息打印到浏览器的控制台。`console.log()` 函数是一个有用的工具，用于显示输出和调试
    JavaScript 代码。它允许开发者在浏览器的开发者工具中检查变量、对象和消息。
- en: To see the result of this code, open your web browser, right-click on the page,
    select "Inspect" or "Inspect Element" from the context menu, and navigate to the
    "Console" tab. You should see the "Hello, World!" message displayed in the console.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看这段代码的结果，请打开你的 web 浏览器，右键点击页面，从上下文菜单中选择“检查”或“检查元素”，然后导航到“控制台”选项卡。你应该能在控制台中看到“Hello,
    World!”消息。
- en: Congratulations! You've just executed your first JavaScript program successfully.
    Now, let's explore more about variables and data types in JavaScript.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你！你刚刚成功运行了第一个 JavaScript 程序。现在，让我们进一步探索 JavaScript 中的变量和数据类型。
- en: Variables and Data Types
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量和数据类型
- en: Variables are fundamental in any programming language, as they allow us to store
    and manipulate data. In JavaScript, variables can hold different types of data,
    such as numbers, strings, booleans, arrays, objects, and more. Before using a
    variable, it must be declared using the `var`, `let`, or `const` keyword.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 变量是任何编程语言中的基础，因为它们允许我们存储和操作数据。在 JavaScript 中，变量可以保存不同类型的数据，如数字、字符串、布尔值、数组、对象等。在使用变量之前，必须通过
    `var`、`let` 或 `const` 关键字进行声明。
- en: '1\. `var` Keyword (Legacy Approach):'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1\. `var` 关键字（传统方法）：
- en: In older versions of JavaScript, the `var` keyword was commonly used to declare
    variables. However, it has some limitations, such as hoisting and scope-related
    issues.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 的早期版本中，`var` 关键字通常用于声明变量。然而，它有一些局限性，比如变量提升和作用域相关的问题。
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '2\. `let` and `const` Keywords (Modern Approach):'
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2\. `let` 和 `const` 关键字（现代方法）：
- en: With the introduction of ECMAScript 6 (ES6) in 2015, two new keywords, `let`
    and `const`, were added to declare variables. These keywords offer block-scoping,
    which addresses the scope-related problems of `var`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 ECMAScript 6（ES6）在 2015 年的推出，添加了两个新的关键字，`let` 和 `const`，用于声明变量。这些关键字提供了块级作用域，解决了
    `var` 的作用域问题。
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In Example 3, we use `let` to declare a variable `count` and `const` to declare
    a constant `PI`. The value of a variable declared with `let` can be changed, while
    the value of a constant declared with `const` remains fixed throughout the program
    execution.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 3 中，我们使用 `let` 声明了变量 `count`，使用 `const` 声明了常量 `PI`。通过 `let` 声明的变量值可以改变，而通过
    `const` 声明的常量在程序执行过程中其值始终保持不变。
- en: 'Data Types in JavaScript:'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JavaScript 中的数据类型：
- en: 'JavaScript has several built-in data types, each serving different purposes.
    The primary data types in JavaScript are:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 有几种内置的数据类型，每种数据类型都有不同的用途。JavaScript 的主要数据类型包括：
- en: 1\. **Number:** Represents numeric values, both integers and floating-point
    numbers.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. **Number（数字）：**表示数值，包括整数和浮点数。
- en: 2\. **String:** Represents textual data, enclosed in single ('') or double ("")
    quotes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. **String（字符串）：**表示文本数据，通常用单引号（''）或双引号（""）括起来。
- en: 3\. **Boolean:** Represents a logical value, either `true` or `false`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. **Boolean（布尔）：**表示一个逻辑值，可以是 `true` 或 `false`。
- en: 4\. **Null:** Represents an intentional absence of any value.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. **Null（空）：**表示故意缺失的值。
- en: 5\. **Undefined:** Represents a declared variable with no assigned value.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. **Undefined（未定义）：**表示已声明但没有赋值的变量。
- en: 6\. **Object:** Represents a collection of key-value pairs or complex data structures.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. **Object（对象）：**表示一组键值对或复杂的数据结构。
- en: 7\. **Array:** Represents a list-like collection of elements.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. **Array（数组）：**表示一个类列表的元素集合。
- en: 8\. **Function:** Represents reusable blocks of code that perform a specific
    task.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. **Function（函数）：**表示可重用的代码块，执行特定任务。
- en: 'Let''s see some examples of working with different data types in JavaScript:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一些在 JavaScript 中使用不同数据类型的示例：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In Example 4, we declare variables of different data types and demonstrate how
    to access and use them. As you can see, JavaScript is a loosely typed language,
    meaning you don't need to specify the data type explicitly when declaring a variable.
    The data type is determined based on the value assigned to the variable.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 4 中，我们声明了不同数据类型的变量，并演示了如何访问和使用它们。如你所见，JavaScript 是一种宽松类型语言，这意味着在声明变量时，你不需要明确指定数据类型。数据类型是根据赋给变量的值来确定的。
- en: Operators and Expressions
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运算符与表达式
- en: In JavaScript, operators are symbols used to perform operations on values. Expressions
    are combinations of values, variables, and operators that result in a single value.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，运算符是用于对值进行操作的符号。表达式是由值、变量和运算符组合而成，结果是一个单一的值。
- en: 'Arithmetic Operators:'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 算术运算符：
- en: 'Arithmetic operators perform basic mathematical operations on numeric values.
    The most common arithmetic operators in JavaScript are:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 算术运算符对数值进行基本的数学运算。JavaScript 中最常见的算术运算符有：
- en: 1\. **Addition (+):** Adds two values together.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. **加法（+）：** 将两个值相加。
- en: 2\. **Subtraction (-):** Subtracts the second value from the first.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. **减法（-）：** 从第一个值中减去第二个值。
- en: 3\. **Multiplication (*):** Multiplies two values.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. **乘法（*）：** 将两个值相乘。
- en: 4\. **Division (/):** Divides the first value by the second.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. **除法（/）：** 将第一个值除以第二个值。
- en: 5\. **Modulus (%):** Returns the remainder of the division.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. **取模（%）：** 返回除法的余数。
- en: 'Let''s look at some examples:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些例子：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Assignment Operators:'
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 赋值运算符：
- en: Assignment operators are used to assign values to variables. The most common
    assignment operator is the equals sign (=).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 赋值运算符用于将值赋给变量。最常见的赋值运算符是等号（=）。
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In Example 6, we assign the value of `y` to the variable `x` using the assignment
    operator (=).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在例子 6 中，我们使用赋值运算符（=）将`y`的值赋给变量`x`。
- en: 'Comparison Operators:'
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较运算符：
- en: Comparison operators are used to compare two values and return a Boolean value
    (true or false) based on the comparison's result.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 比较运算符用于比较两个值，并根据比较结果返回布尔值（真或假）。
- en: 1\. **Equal to (==):** Checks if two values are equal, irrespective of their
    data types.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. **等于（==）：** 检查两个值是否相等，忽略数据类型。
- en: 2\. **Not equal to (!=):** Checks if two values are not equal.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. **不等于（!=）：** 检查两个值是否不相等。
- en: 3\. **Strict equal to (===):** Checks if two values are equal and have the same
    data type.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. **严格等于（===）：** 检查两个值是否相等，并且具有相同的数据类型。
- en: 4\. **Strict not equal to (!==):** Checks if two values are not equal or have
    different data types.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. **严格不等于（!==）：** 检查两个值是否不相等或数据类型不同。
- en: 5\. **Greater than (>):** Checks if the value on the left is greater than the
    value on the right.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. **大于（>）：** 检查左边的值是否大于右边的值。
- en: 6\. **Less than (<):** Checks if the value on the left is less than the value
    on the right.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. **小于（<）：** 检查左边的值是否小于右边的值。
- en: 7\. **Greater than or equal to (>=):** Checks if the value on the left is greater
    than or equal to the value on the right.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. **大于或等于（>=）：** 检查左边的值是否大于或等于右边的值。
- en: 8\. **Less than or equal to (<=):** Checks if the value on the left is less
    than or equal to the value on the right.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. **小于或等于（<=）：** 检查左边的值是否小于或等于右边的值。
- en: 'Let''s explore some examples:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一些例子：
- en: '[PRE6]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Logical Operators:'
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 逻辑运算符：
- en: Logical operators are used to combine multiple conditions and return a Boolean
    value based on the result.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑运算符用于组合多个条件，并根据结果返回布尔值。
- en: 1\. **Logical AND (&&):** Returns true if both conditions are true.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. **逻辑与（&&）：** 如果两个条件都为真，返回true。
- en: 2\. **Logical OR (||):** Returns true if at least one of the conditions is true.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. **逻辑或（||）：** 如果至少有一个条件为真，返回true。
- en: 3\. **Logical NOT (!):** Reverses the result, turning true to false and false
    to true.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. **逻辑非（!）：** 反转结果，将true变为false，false变为true。
- en: 'Let''s see some examples:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些示例：
- en: '[PRE7]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'String Concatenation:'
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符串连接：
- en: In JavaScript, you can concatenate (combine) strings using the `+` operator.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，你可以使用`+`运算符来连接（合并）字符串。
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In Example 9, we concatenate the `firstName`, a space, and the `lastName` to
    create the `fullName` variable.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例9中，我们将`firstName`、一个空格和`lastName`连接起来，创建`fullName`变量。
- en: Control Flow and Conditional Statements
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制流与条件语句
- en: Control flow allows us to control the order in which statements are executed
    in a program. Conditional statements help us make decisions based on certain conditions,
    executing different blocks of code accordingly.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 控制流允许我们控制程序中语句执行的顺序。条件语句帮助我们根据特定条件做出决策，执行不同的代码块。
- en: 'if Statement:'
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: if 语句：
- en: The `if` statement is a fundamental conditional statement that allows us to
    execute a block of code if a given condition is true.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句是基本的条件语句，允许我们在给定条件为真时执行一块代码。'
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In Example 10, the code checks if the `age` is greater than or equal to 18\.
    If the condition is true, it prints "You are an adult."
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例10中，代码检查`age`是否大于或等于18。如果条件为真，它打印"你是成年人"。
- en: 'else Statement:'
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: else 语句：
- en: The `else` statement works in conjunction with the `if` statement. It allows
    us to specify an alternative block of code to execute when the `if` condition
    is false.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`else`语句与`if`语句配合使用。它允许我们在`if`条件为假时指定另一个代码块进行执行。'
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In Example 11, the code checks if the `age` is greater than or equal to 18\.
    If the condition is true, it prints "You are an adult." Otherwise, it prints "You
    are a minor."
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例11中，代码检查`age`是否大于或等于18。如果条件为真，它打印"你是成年人"。否则，它打印"你是未成年人"。
- en: 'else if Statement:'
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: else if 语句：
- en: The `else if` statement can be used when multiple conditions need to be checked
    sequentially. It provides
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`else if`语句可以在需要依次检查多个条件时使用。它提供了'
- en: an alternative set of conditions to test if the previous `if` and `else` conditions
    are false.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一组替代条件，用于测试前面的`if`和`else`条件是否为假。
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In Example 12, the code checks the value of `time` and prints different greetings
    based on the time of day.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例12中，代码检查`time`的值，并根据一天中的时间打印不同的问候语。
- en: 'Nested if Statements:'
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 嵌套if语句：
- en: You can nest conditional statements inside each other to create complex decision-making
    logic.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将条件语句嵌套在一起，创建复杂的决策逻辑。
- en: '[PRE12]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In Example 13, the code checks if the `age` is greater than or equal to 18 and
    then checks if the person is a student or not.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例13中，代码检查`age`是否大于或等于18，然后检查该人是否是学生。
- en: 'The ternary Operator (?):'
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 三元运算符（?）：
- en: The ternary operator provides a shorthand way to write simple if-else statements.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 三元运算符提供了一种简洁的方式来编写简单的 if-else 语句。
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In Example 14, the ternary operator checks if the `age` is greater than or equal
    to 18\. If true, it assigns "You are an adult." to the `message` variable; otherwise,
    it assigns "You are a minor."
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 14 中，三元运算符检查 `age` 是否大于或等于 18。如果条件为真，它会将 "You are an adult." 赋值给 `message`
    变量；否则，它将 "You are a minor." 赋值给 `message` 变量。
- en: 'Loops: Iterating with JavaScript'
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环：使用 JavaScript 进行迭代
- en: Loops provide a way to execute a block of code repeatedly until a specific condition
    is met. There are several types of loops in JavaScript, but the most commonly
    used ones are the `for` loop and the `while` loop.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 循环提供了一种方法，可以反复执行一段代码，直到满足特定条件为止。JavaScript 中有几种类型的循环，最常用的是 `for` 循环和 `while`
    循环。
- en: 'for Loop:'
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: for 循环：
- en: The `for` loop is useful when you know the exact number of iterations you want
    to perform.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`for` 循环在你知道确切的迭代次数时非常有用。'
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In Example 15, the `for` loop executes the code inside the curly braces five
    times, as `i` starts at 1 and increments by 1 in each iteration until it reaches
    5.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 15 中，`for` 循环会执行大括号内的代码五次，因为 `i` 从 1 开始，在每次迭代时递增 1，直到它达到 5。
- en: 'while Loop:'
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: while 循环：
- en: The `while` loop is used when you want to repeat a block of code until a specific
    condition becomes false.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`while` 循环用于当你想要重复一段代码块，直到某个特定条件变为假时。'
- en: '[PRE15]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In Example 16, the `while` loop executes the code inside the curly braces until
    the `count` becomes 5, as it increments by 1 in each iteration.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 16 中，`while` 循环会执行大括号内的代码，直到 `count` 变为 5，因为它在每次迭代时都会递增 1。
- en: 'do...while Loop:'
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: do...while 循环：
- en: The `do...while` loop is similar to the `while` loop, but it ensures that the
    code inside the loop block is executed at least once before checking the condition.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`do...while` 循环与 `while` 循环类似，但它确保在检查条件之前，循环体内的代码至少执行一次。'
- en: '[PRE16]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In Example 17, the `do...while` loop executes the code inside the curly braces
    at least once because the condition is checked after the first iteration.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 17 中，`do...while` 循环至少执行一次大括号内的代码，因为条件是在第一次迭代后进行检查的。
- en: 'break and continue Statements:'
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: break 和 continue 语句：
- en: The `break` statement allows you to exit a loop prematurely if a certain condition
    is met. The `continue` statement allows you to skip the rest of the current iteration
    and move to the next iteration.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`break` 语句允许你在满足某个条件时提前退出循环。`continue` 语句允许你跳过当前迭代的其余部分，直接进入下一次迭代。'
- en: '[PRE17]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In Example 18, the `break` statement is used to exit the loop when `i` is equal
    to 5, and the `continue` statement is used to skip the rest of the code for the
    current iteration when `i` is equal to 3.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例 18 中，`break` 语句用于当 `i` 等于 5 时退出循环，而 `continue` 语句用于当 `i` 等于 3 时跳过当前迭代的其余代码。
- en: Conclusion
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter, we've covered the basics of JavaScript, exploring its role
    in web development, setting up the development environment, writing your first
    JavaScript program, working with variables and data types, using operators and
    expressions, and implementing control flow and conditional statements. You now
    have a solid foundation to build upon as we delve into more advanced topics in
    the following chapters.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 JavaScript 的基础知识，探讨了它在 web 开发中的作用，设置开发环境，编写你的第一个 JavaScript 程序，处理变量和数据类型，使用运算符和表达式，以及实现控制流和条件语句。你现在已经打下了坚实的基础，接下来我们将在后续章节中深入探讨更多高级主题。
- en: JavaScript is a powerful language that empowers developers to create interactive
    and dynamic web applications. By mastering its fundamentals, you'll be well on
    your way to becoming an intermediate-level programmer and excelling in web development.
    In the upcoming chapters, we will explore more advanced concepts and delve into
    specific areas of JavaScript to enhance your skills further.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是一种强大的语言，使开发者能够创建互动性和动态性的 web 应用程序。通过掌握其基础知识，你将迈向成为中级程序员的道路，并在 web
    开发领域取得优异成绩。在接下来的章节中，我们将探索更多高级概念，并深入研究 JavaScript 的特定领域，进一步提升你的技能。
- en: Remember to practice regularly and experiment with code examples to reinforce
    your understanding. Happy coding!
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 记得定期练习，并通过代码示例进行实验，以巩固你的理解。祝你编程愉快！
