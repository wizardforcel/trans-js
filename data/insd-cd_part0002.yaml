- en: 'Chapter 1: The Essence of Programming Languages'
  id: totrans-0
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 第一章：编程语言的本质
- en: 1.1 Understanding Programming Language Fundamentals
  id: totrans-1
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 1.1 理解编程语言基础
- en: Programming languages are the foundation of software development, enabling us
    to communicate our intentions to computers effectively. They serve as a bridge
    between human-readable code and machine-executable instructions. In this section,
    we’ll explore the fundamental concepts that underpin all programming languages.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 编程语言是软件开发的基础，使我们能够有效地与计算机沟通。它们作为人类可读代码与机器可执行指令之间的桥梁。在本节中，我们将探讨所有编程语言背后的基本概念。
- en: At its core, a programming language is a formalized set of rules and syntax
    that allows developers to give instructions to a computer. These instructions
    can range from simple arithmetic calculations to complex data manipulations and
    control flow.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 从本质上讲，编程语言是一组正式的规则和语法，允许开发者向计算机发出指令。这些指令可以是简单的算术计算，也可以是复杂的数据处理和控制流。
- en: 'Syntax and Semantics: The two key aspects of any programming language are syntax
    and semantics. Syntax defines the structure and grammar of the language, specifying
    how code should be written to be considered valid. Semantics, on the other hand,
    dictate the meaning of the code and how it should be executed. Understanding and
    mastering both syntax and semantics are crucial for effective programming.'
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 语法和语义：任何编程语言的两个关键方面是语法和语义。语法定义了语言的结构和语法规则，规定了代码应如何编写才能被视为有效。语义则规定了代码的含义以及如何执行代码。理解并掌握语法和语义对于有效编程至关重要。
- en: 'Variables and Data Types: In programming, variables are used to store and manipulate
    data. Data types define the kind of data a variable can hold, such as integers,
    floating-point numbers, strings, or custom-defined types. For example, in Python:'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 变量和数据类型：在编程中，变量用于存储和操作数据。数据类型定义了变量可以保存的数据类型，例如整数、浮点数、字符串或自定义类型。例如，在 Python 中：
- en: '`Variable declaration`'
  id: totrans-6
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: '`变量声明`'
- en: '`age =  25`'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`age =  25`'
- en: 'Data type: `integer`'
  id: totrans-8
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 数据类型：`整数`
- en: '`name =  "John"`'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`name =  "John"`'
- en: 'Data type: `string`'
  id: totrans-10
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 数据类型：`字符串`
- en: 'Operators: Operators are symbols or keywords that perform operations on data.
    Common operators include addition (`+`), subtraction (`-`), multiplication (`*`),
    and division (`/`). They allow you to perform calculations and make decisions
    based on data values.'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 运算符：运算符是对数据执行操作的符号或关键字。常见的运算符包括加法（`+`）、减法（`-`）、乘法（`*`）和除法（`/`）。它们允许你进行计算，并根据数据值做出决策。
- en: '`// Arithmetic operators in Java`'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// Java中的算术运算符`'
- en: '`int result =  10  +  5;  // Addition`'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int result =  10  +  5;  // 加法`'
- en: '`int difference =  15  -  7;  // Subtraction`'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int difference =  15  -  7;  // 减法`'
- en: '`int product =  6  *  4;  // Multiplication`'
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int product =  6  *  4;  // 乘法`'
- en: '`float quotient =  20  /  3.0;  // Division`'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`float quotient =  20  /  3.0;  // 除法`'
- en: 'Control Flow: Programming languages provide control structures like conditionals
    (`if-else` statements), loops (`for`, `while`), and branching mechanisms to control
    the flow of a program. These constructs enable developers to create decision-making
    logic and execute code repeatedly.'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 控制流：编程语言提供了控制结构，如条件语句（`if-else` 语句）、循环（`for`、`while`）和分支机制，以控制程序的流程。这些结构使开发者能够创建决策逻辑并重复执行代码。
- en: '`// Conditional statement in JavaScript`'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// JavaScript中的条件语句`'
- en: '`if (age >=  18) {`'
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`if (age >=  18) {`'
- en: '`console.log("You are an adult.");`'
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.log("你是成年人。");`'
- en: '`} else {`'
  id: totrans-21
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`} else {`'
- en: '`console.log("You are a minor.");`'
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`console.log("你是未成年。");`'
- en: '`}`'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: 'Functions and Procedures: Functions are reusable blocks of code that perform
    specific tasks. They encapsulate functionality and can accept input parameters
    and return values. Functions are essential for modularizing code and promoting
    code reusability.'
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 函数和过程：函数是可重用的代码块，用于执行特定任务。它们封装了功能，可以接受输入参数并返回值。函数对于模块化代码和促进代码重用至关重要。
- en: '`// Function definition in C++`'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`// C++中的函数定义`'
- en: '`int add(int a,  int b)  {`'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int add(int a,  int b)  {`'
- en: '`return a + b;`'
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return a + b;`'
- en: '`}`'
  id: totrans-28
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: 'Comments: Comments are non-executable lines of code that provide explanations
    or annotations within the source code. They are essential for documenting code,
    making it more understandable for developers and maintainers.'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 注释：注释是不可执行的代码行，用于在源代码中提供解释或注释。它们对于文档化代码至关重要，能够让开发者和维护者更易理解代码。
- en: This is a single-line comment in Python
  id: totrans-30
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
  zh: 这是 Python 中的一行注释
- en: '`"""`'
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`"""`'
- en: This is a
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这是一个
- en: '`multi-line comment`'
  id: totrans-33
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`多行注释`'
- en: in Python.
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在 Python 中。
- en: '`"""`'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`"""`'
- en: 'Code Structure: 程序的结构由其组织为函数、类和模块决定。良好结构化的代码更容易阅读、维护和调试。通常遵循代码缩进和格式约定，以增强代码的可读性。'
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 代码结构：程序的结构由其组织为函数、类和模块决定。良好结构化的代码更容易阅读、维护和调试。通常遵循代码缩进和格式约定，以增强代码的可读性。
- en: 理解这些基本概念是精通任何编程语言的第一步。当我们深入探讨本书中讨论的特定语言时，你将看到这些概念是如何被应用和扩展，以创造多样化和强大的软件解决方案。
  id: totrans-37
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 理解这些基本概念是精通任何编程语言的第一步。当我们深入探讨本书中讨论的特定语言时，你将看到这些概念是如何被应用和扩展，以创造多样化和强大的软件解决方案。
- en: '* * *'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '* * *'
- en: 1.2 Evolution of Programming Languages
  id: totrans-39
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 1.2 编程语言的演变
- en: 编程语言自计算机早期以来已显著演变。这种演变是由于对更具表现力、高效和用户友好软件开发工具的需求。在本节中，我们将探索编程语言的历史发展，强调关键的里程碑和创新。
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 编程语言自计算机早期以来已显著演变。这种演变是由于对更具表现力、高效和用户友好软件开发工具的需求。在本节中，我们将探索编程语言的历史发展，强调关键的里程碑和创新。
- en: 'Machine Language: 最早的计算机使用机器语言编程，机器语言由二进制代码指令组成，直接控制硬件。在机器语言中编程是一个乏味且容易出错的过程，因为它需要对计算机架构有深入的了解。'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 机器语言：最早的计算机使用机器语言编程，机器语言由二进制代码指令组成，直接控制硬件。在机器语言中编程是一个乏味且容易出错的过程，因为它需要对计算机架构有深入的了解。
- en: 'Assembly Language: 为了简化编程，引入了汇编语言。这些语言使用符号名称表示机器级指令，使程序员编写代码变得相对容易一些。然而，汇编语言仍然与底层硬件紧密相关。'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 汇编语言：为了简化编程，引入了汇编语言。这些语言使用符号名称表示机器级指令，使程序员编写代码变得相对容易一些。然而，汇编语言仍然与底层硬件紧密相关。
- en: '`MOV AL, 10` ; Move the value 10 into the `AL` register'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`MOV AL, 10` ; 将值10存入`AL`寄存器'
- en: '`ADD AL, 5` ; Add 5 to the `AL` register'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`ADD AL, 5` ; 将5加到`AL`寄存器'
- en: 'High-Level Languages: 高级编程语言在20世纪中期出现，旨在提供一种更抽象和人类可读的编码方式。`FORTRAN`，开发于1950年代末，是第一个高级语言之一，旨在进行科学和工程计算。'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 高级语言：高级编程语言在20世纪中期出现，旨在提供一种更抽象和人类可读的编码方式。`FORTRAN`，开发于1950年代末，是第一个高级语言之一，旨在进行科学和工程计算。
- en: '`PROGRAM HelloWorld`'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`PROGRAM HelloWorld`'
- en: '`PRINT *, "Hello, World!"`'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`PRINT *, "Hello, World!"`'
- en: '`END PROGRAM HelloWorld`'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`END PROGRAM HelloWorld`'
- en: '`ALGOL`: 在1950年代末和1960年代初，`ALGOL`（算法语言）被开发，介绍了诸如循环和条件等结构化编程概念。`ALGOL`的影响可以在后续语言如`Pascal`和`C`中看到。'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`ALGOL`：在1950年代末和1960年代初，`ALGOL`（算法语言）被开发，介绍了诸如循环和条件等结构化编程概念。`ALGOL`的影响可以在后续语言如`Pascal`和`C`中看到。'
- en: '`COBOL`: `COBOL`（通用商业导向语言）于1960年代初为商业数据处理而创建。它引入了类似英语的语法，并在商业领域广泛使用。'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`COBOL`：`COBOL`（通用商业导向语言）于1960年代初为商业数据处理而创建。它引入了类似英语的语法，并在商业领域广泛使用。'
- en: '`IDENTIFICATION DIVISION.`'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`IDENTIFICATION DIVISION.`'
- en: '`PROGRAM-ID. HelloWorld.`'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`PROGRAM-ID. HelloWorld.`'
- en: '`PROCEDURE DIVISION.` '
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`PROCEDURE DIVISION.` '
- en: '`DISPLAY "Hello, World!".`'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`DISPLAY "Hello, World!".`'
- en: '`STOP RUN.` '
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`STOP RUN.` '
- en: 'C Programming Language: `C`编程语言于1970年代初由`Dennis Ritchie`在`Bell Labs`开发，是一次重大突破。它提供了低级控制、可移植性和简单的语法，使其在系统编程中广受欢迎，并对许多其他语言产生了影响。'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: C 编程语言：`C`编程语言于1970年代初由`Dennis Ritchie`在`Bell Labs`开发，是一次重大突破。它提供了低级控制、可移植性和简单的语法，使其在系统编程中广受欢迎，并对许多其他语言产生了影响。
- en: '`#include <stdio.h>`'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`#include <stdio.h>`'
- en: '`int main() {`'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int main() {`'
- en: '`printf("Hello, World!\n");`'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`printf("Hello, World!\n");`'
- en: '`return 0;`'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return 0;`'
- en: '`}`'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`Object-Oriented Programming (OOP)`: 1980年代，出现了像`C++`和`Smalltalk`这样的`OOP`语言，引入了对象和类的概念，以更好地组织和模块化代码。'
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`面向对象编程（OOP）`：1980年代，出现了像`C++`和`Smalltalk`这样的`OOP`语言，引入了对象和类的概念，以更好地组织和模块化代码。'
- en: '`Java`: 在1990年代中期，`Java`由`Sun Microsystems`推出。它强调可移植性和安全性，通过在`Java Virtual
    Machine (JVM)`上运行来实现。`Java`的“`Write Once, Run Anywhere`”理念使其成为跨平台开发的热门选择。'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`Java`：在1990年代中期，`Java`由`Sun Microsystems`推出。它强调可移植性和安全性，通过在`Java Virtual Machine
    (JVM)`上运行来实现。`Java`的“`Write Once, Run Anywhere`”理念使其成为跨平台开发的热门选择。'
- en: '`public class HelloWorld {`'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public class HelloWorld {`'
- en: '`public static void main(String[] args) {`'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`public static void main(String[] args) {`'
- en: '`System.out.println("Hello, World!");`'
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`System.out.println("Hello, World!");`'
- en: '}'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '}'
- en: '`Scripting Languages`: 像`Perl`、`Python`和`Ruby`这样的语言在20世纪晚期因其易用性和快速开发能力而受到欢迎。它们特别适合用于网络脚本和自动化任务。'
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`脚本语言`：像`Perl`、`Python`和`Ruby`这样的语言在20世纪晚期因其易用性和快速开发能力而受到欢迎。它们特别适合用于网络脚本和自动化任务。'
- en: 编程语言的演变仍在继续，不断有新语言涌现，以满足软件开发行业中特定的需求和趋势。理解这一历史背景对于欣赏当今可用的多样化编程语言格局至关重要。
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 编程语言的演变仍在继续，不断有新语言涌现，以满足软件开发行业中特定的需求和趋势。理解这一历史背景对于欣赏当今可用的多样化编程语言格局至关重要。
- en: '* * *'
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '* * *'
- en: 1.3 `Common Features of C, C++, Java, JavaScript, and Python`
  id: totrans-72
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 1.3 `C`、`C++`、`Java`、`JavaScript`和`Python`的共同特征
- en: 虽然存在无数种编程语言，每种语言都有自己独特的特性和用例，但一些语言共享共同的特征和原则。在本节中，我们将探索五种广泛使用的编程语言的共同特征：`C`、`C++`、`Java`、`JavaScript`和`Python`。
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 虽然存在无数种编程语言，每种语言都有自己独特的特性和用例，但一些语言共享共同的特征和原则。在本节中，我们将探索五种广泛使用的编程语言的共同特征：`C`、`C++`、`Java`、`JavaScript`和`Python`。
- en: '1\. `Compiled vs. Interpreted`: `C`和`C++`是编译语言，这意味着源代码在执行前由编译器翻译成机器代码。这使得程序运行更快、更高效，但需要为不同的平台进行单独编译。相反，`Java`、`JavaScript`和`Python`是解释语言。它们在运行时由解释器执行，允许更大的可移植性，但可能牺牲一些性能。'
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 1\. `编译与解释`：`C`和`C++`是编译语言，这意味着源代码在执行前由编译器翻译成机器代码。这使得程序运行更快、更高效，但需要为不同的平台进行单独编译。相反，`Java`、`JavaScript`和`Python`是解释语言。它们在运行时由解释器执行，允许更大的可移植性，但可能牺牲一些性能。
- en: '2\. `Syntax and Control Structures`: 所有五种语言都使用`C`风格的语法，以大括号`{}`来表示代码块，以分号`;`来结束语句。它们支持常见的控制结构，如条件语句（`if-else`语句）和循环（`for`、`while`）以控制程序流。'
  id: totrans-75
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 2\. `语法和控制结构`：所有五种语言都使用`C`风格的语法，以大括号`{}`来表示代码块，以分号`;`来结束语句。它们支持常见的控制结构，如条件语句（`if-else`语句）和循环（`for`、`while`）以控制程序流。
- en: '3\. `Strong Typing`: `C`、`C++`、`Java`、`JavaScript`和`Python`都是静态类型语言，意味着变量类型在编译时被显式声明和检查。这有助于在开发过程中尽早捕捉类型相关的错误，确保代码更安全、更可靠。'
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 3\. `强类型`：`C`、`C++`、`Java`、`JavaScript`和`Python`都是静态类型语言，意味着变量类型在编译时被显式声明和检查。这有助于在开发过程中尽早捕捉类型相关的错误，确保代码更安全、更可靠。
- en: '4\. `Support for Functions/Methods`: 每种语言都允许开发人员定义和使用函数或方法。在`C`和`C++`中，函数是独立的，而`Java`、`JavaScript`和`Python`支持独立函数和类或对象中的方法。'
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 4\. `支持函数/方法`：每种语言都允许开发人员定义和使用函数或方法。在`C`和`C++`中，函数是独立的，而`Java`、`JavaScript`和`Python`支持独立函数和类或对象中的方法。
- en: '`5.` Libraries and Standard Libraries: They all come with extensive standard
    libraries that provide pre-built functions and classes for common tasks. These
    libraries simplify development by offering a wealth of functionality, from file
    handling to networking.'
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`5.` 库和标准库：它们都附带了大量的标准库，提供了用于常见任务的预构建函数和类。这些库通过提供从文件处理到网络通信等丰富的功能，简化了开发工作。'
- en: '`6.` Memory Management: `C` and `C++` provide manual memory management, giving
    developers control over memory allocation and deallocation. `Java`，`JavaScript`，和`Python`，另一方面，通过垃圾回收实现自动内存管理，简化了与内存相关的任务。'
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`6.` 内存管理：`C`和`C++`提供手动内存管理，允许开发人员控制内存分配和回收。`Java`、`JavaScript`和`Python`则通过垃圾回收机制实现自动内存管理，简化了内存相关的任务。'
- en: '`7.` Object-Oriented Programming (OOP): `C++`，`Java`和`Python`是面向对象的语言，促进使用类和对象来编写模块化和有组织的代码。`JavaScript`虽然不严格遵循OOP，但通过原型和对象字面量支持基于对象的编程。'
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`7.` 面向对象编程（OOP）：`C++`、`Java`和`Python`是面向对象的语言，鼓励使用类和对象编写模块化和有组织的代码。尽管`JavaScript`不严格遵循OOP，但通过原型和对象字面量支持面向对象的编程。'
- en: '`8.` Portability: `Java` is known for its “Write Once, Run Anywhere” portability
    due to the `Java Virtual Machine (JVM)`。`JavaScript`，由于主要用于Web脚本，能够在不同的浏览器间高度可移植。`Python`因其跨平台兼容性而备受推崇，而`C`和`C++`可以为各种平台编译。'
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`8.` 可移植性：`Java`因其“编写一次，随处运行”的可移植性而闻名，这得益于`Java虚拟机（JVM）`。`JavaScript`由于主要用于Web脚本，能够在不同的浏览器之间高度可移植。`Python`因其跨平台兼容性而备受推崇，而`C`和`C++`可以为各种平台编译。'
- en: '`9.` Popular Use Cases:'
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`9.` 常见的使用场景：'
- en: • `C` and `C++` are favored for systems programming, game development, and applications
    where performance and low-level control are crucial.
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: • `C`和`C++`在系统编程、游戏开发以及对性能和底层控制要求较高的应用程序中更为常用。
- en: • `Java` is commonly used in enterprise software, Android app development, and
    server-side applications.
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: • `Java`常用于企业软件、Android应用开发和服务器端应用。
- en: • `JavaScript` is the language of the web, used for client-side scripting and
    building interactive web applications.
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: • `JavaScript`是Web的语言，主要用于客户端脚本和构建交互式Web应用程序。
- en: • `Python` excels in data science, machine learning, web development, scripting,
    and automation.
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: • `Python`在数据科学、机器学习、Web开发、脚本编写和自动化方面表现突出。
- en: '`10.` Community and Ecosystem: All these languages have active and thriving
    communities, which means ample resources, libraries, and frameworks are available
    for developers to leverage in their projects.'
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`10.` 社区与生态系统：所有这些语言都有活跃且蓬勃发展的社区，这意味着开发者可以利用大量资源、库和框架来支持他们的项目。'
- en: Understanding these common features can help developers make informed choices
    when selecting the most suitable programming language for their specific project
    requirements. Each language has its strengths and weaknesses, making them better
    suited for different tasks and domains.
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 理解这些常见特性可以帮助开发者在选择最适合其项目需求的编程语言时做出明智的决策。每种语言都有其优点和缺点，使它们更适用于不同的任务和领域。
- en: '* * *'
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '* * *'
- en: '`1.4` High-Level vs. Low-Level Languages'
  id: totrans-90
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`1.4` 高级语言与低级语言'
- en: 'Programming languages can be broadly categorized into two main groups: high-level
    languages and low-level languages. These categories refer to the level of abstraction
    and proximity to the hardware that a language operates at. In this section, we’ll
    explore the distinctions between high-level and low-level languages and their
    respective advantages and trade-offs.'
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 编程语言可以大致分为两大类：高级语言和低级语言。这些分类指的是语言操作的抽象层次和与硬件的接近程度。在本节中，我们将探讨高级语言与低级语言之间的区别及其各自的优缺点。
- en: 'High-Level Languages:'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 高级语言：
- en: 'High-level languages are designed with a focus on human readability and ease
    of programming. They offer a high level of abstraction, meaning that developers
    can write code that is closer to natural language and less concerned with the
    intricacies of the underlying hardware. Some key characteristics of high-level
    languages include:'
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 高级语言的设计重点是人类可读性和编程的简便性。它们提供了较高的抽象层次，这意味着开发者可以编写更接近自然语言的代码，而不必过多关注底层硬件的复杂性。高级语言的一些关键特性包括：
- en: 'Abstraction: High-level languages provide abstractions that simplify complex
    tasks. Developers can work with data structures, libraries, and functions that
    are closer to the problem domain they are addressing, rather than worrying about
    memory management or low-level operations.'
  id: totrans-94
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 抽象：高级语言提供了简化复杂任务的抽象。开发者可以使用接近他们所解决问题领域的数据结构、库和函数，而无需担心内存管理或低级操作。
- en: 'Portability: Code written in high-level languages is generally more portable
    because it is less tied to specific hardware or operating systems. This makes
    it easier to write cross-platform software.'
  id: totrans-95
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 可移植性：用高级语言编写的代码通常更具可移植性，因为它不太依赖于特定的硬件或操作系统。这使得编写跨平台软件变得更加容易。
- en: 'Productivity: High-level languages often enable faster development due to their
    concise syntax and rich set of built-in functions and libraries. Developers can
    focus on solving problems rather than dealing with low-level details.'
  id: totrans-96
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 生产力：高级语言通常由于其简洁的语法和丰富的内置函数和库，使得开发速度更快。开发者可以专注于解决问题，而不是处理低级细节。
- en: 'Readability: High-level code is typically more readable and easier to understand
    for programmers, making it easier to maintain and collaborate on projects.'
  id: totrans-97
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 可读性：高级代码通常更易于阅读和理解，使程序员更容易维护和协作开发项目。
- en: 'Examples of High-Level Languages:'
  id: totrans-98
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 高级语言示例：
- en: • `Python`
  id: totrans-99
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: • `Python`
- en: • `Java`
  id: totrans-100
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: • `Java`
- en: • `JavaScript`
  id: totrans-101
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: • `JavaScript`
- en: • `Ruby`
  id: totrans-102
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: • `Ruby`
- en: • `Swift`
  id: totrans-103
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: • `Swift`
- en: 'Low-Level Languages:'
  id: totrans-104
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 低级语言：
- en: 'Low-level languages, in contrast, provide minimal abstraction and are closer
    to the hardware. They allow for fine-grained control over a computer’s resources
    but require more effort and attention to detail from the programmer. Key characteristics
    of low-level languages include:'
  id: totrans-105
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 相比之下，低级语言提供的抽象较少，接近硬件。它们允许对计算机资源进行精细控制，但需要程序员付出更多的努力和关注细节。低级语言的主要特点包括：
- en: 'Control: Low-level languages offer precise control over hardware resources
    such as memory and registers. This level of control is essential for systems programming
    and tasks where efficiency is critical.'
  id: totrans-106
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 控制：低级语言提供对硬件资源如内存和寄存器的精确控制。这种控制对系统编程及对效率要求极高的任务至关重要。
- en: 'Performance: Code written in low-level languages can be highly optimized for
    performance, as developers have direct control over memory allocation and CPU
    operations. This makes low-level languages suitable for tasks like writing operating
    systems or device drivers.'
  id: totrans-107
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 性能：用低级语言编写的代码可以针对性能进行高度优化，因为开发者可以直接控制内存分配和CPU操作。这使得低级语言适合用于编写操作系统或设备驱动程序等任务。
- en: 'Hardware Dependence: Programs written in low-level languages are often specific
    to a particular hardware architecture and operating system. Porting such code
    to different platforms can be challenging.'
  id: totrans-108
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 硬件依赖性：用低级语言编写的程序通常特定于某种硬件架构和操作系统。将这些代码移植到不同平台上可能会面临挑战。
- en: 'Complexity: Writing code in low-level languages is generally more complex and
    error-prone due to the lack of high-level abstractions. Developers need to manage
    memory manually and handle many low-level details.'
  id: totrans-109
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 复杂性：用低级语言编写代码通常更加复杂且容易出错，因为缺乏高级抽象。开发者需要手动管理内存并处理许多低级细节。
- en: 'Examples of Low-Level Languages:'
  id: totrans-110
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 低级语言的示例：
- en: • `Assembly language`
  id: totrans-111
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: • `汇编语言`
- en: • `C`
  id: totrans-112
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: • `C`
- en: • `C++`
  id: totrans-113
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: • `C++`
- en: 'Choosing Between High-Level and Low-Level Languages:'
  id: totrans-114
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 高级语言与低级语言的选择：
- en: The choice between high-level and low-level languages depends on the specific
    requirements of a project. High-level languages are well-suited for most software
    development tasks, including web development, data analysis, and application development,
    where productivity and portability are crucial.
  id: totrans-115
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 高级语言和低级语言的选择取决于项目的具体需求。高级语言非常适合大多数软件开发任务，包括Web开发、数据分析和应用程序开发，在这些领域中，生产力和可移植性至关重要。
- en: On the other hand, low-level languages are preferred for tasks that demand maximum
    performance, such as embedded systems programming, real-time systems, and writing
    system-level software.
  id: totrans-116
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 另一方面，低级语言适用于对性能要求极高的任务，如嵌入式系统编程、实时系统以及编写系统级软件。
- en: In practice, many modern software systems combine both high-level and low-level
    languages. High-level languages are used for the majority of the application code,
    while critical performance-critical sections may be implemented in low-level languages
    or through language extensions like `C/C++` bindings in `Python` or `Java`’s `Native
    Interface (JNI)`.
  id: totrans-117
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 实际上，许多现代软件系统结合了高级语言和低级语言。高级语言用于大多数应用程序代码，而关键的性能瓶颈部分可能会用低级语言实现，或者通过像`Python`中的`C/C++`绑定或`Java`的`Native
    Interface (JNI)`等语言扩展来实现。
- en: Understanding the trade-offs between high-level and low-level languages allows
    developers to make informed decisions about which language to use for a given
    project, balancing ease of development with performance requirements.
  id: totrans-118
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 理解高级语言和低级语言之间的权衡，可以帮助开发者在给定项目中做出明智的决策，平衡开发的简易性与性能需求。
- en: '* * *'
  id: totrans-119
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '* * *'
- en: '`1.5 The Role of a Compiler and Interpreter`'
  id: totrans-120
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`1.5 编译器与解释器的作用`'
- en: In the world of programming languages, compilers and interpreters play crucial
    roles in transforming human-readable code into machine-executable instructions.
    These tools are fundamental to the execution of code written in programming languages.
    Let’s delve into the roles of compilers and interpreters and how they differ.
  id: totrans-121
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在编程语言的世界中，编译器和解释器在将人类可读的代码转化为机器可执行的指令方面发挥着至关重要的作用。这些工具对编程语言中代码的执行是基础性的。让我们深入了解编译器和解释器的角色以及它们的区别。
- en: 'Compilers:'
  id: totrans-122
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 编译器：
- en: 'A compiler is a tool that translates the entire source code of a program into
    an equivalent set of machine code instructions. This translation is performed
    in a one-time process called compilation. Once the source code is compiled, it
    generates an executable binary file that can be run independently. Some key characteristics
    of compilers include:'
  id: totrans-123
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 编译器是一种将程序的整个源代码翻译成等效的机器代码指令的工具。这一翻译过程是一次性的，称为编译。一旦源代码被编译，它会生成一个可独立运行的可执行二进制文件。编译器的一些关键特性包括：
- en: 'Compilation: The source code is transformed into machine code before execution.
    This results in faster execution since there is no need to re-translate the code
    each time it runs.'
  id: totrans-124
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 编译：源代码在执行前被转换成机器代码。这使得执行速度更快，因为每次运行时无需重新翻译代码。
- en: 'Efficiency: Compiled programs are typically more efficient in terms of runtime
    performance because the code is optimized during compilation. This makes compilers
    well-suited for performance-critical applications.'
  id: totrans-125
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 效率：编译程序通常在运行时性能方面更高效，因为代码在编译期间经过优化。这使得编译器非常适合性能关键的应用。
- en: 'Static Typing: Compilers often enforce strict static typing, catching type-related
    errors at compile-time. This can lead to more robust and reliable code.'
  id: totrans-126
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 静态类型：编译器通常强制执行严格的静态类型检查，在编译时捕获类型相关的错误。这有助于生成更加稳健和可靠的代码。
- en: 'Examples: Languages like `C`, `C++`, and `Rust` are typically compiled languages.
    Here’s a simple example of a `C` program:'
  id: totrans-127
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 示例：像`C`、`C++`和`Rust`这样的语言通常是编译型语言。以下是一个简单的`C`程序示例：
- en: '`#include <stdio.h>`'
  id: totrans-128
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`#include <stdio.h>`'
- en: '`int main() {`'
  id: totrans-129
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`int main() {`'
- en: '`printf("Hello, World!\n");`'
  id: totrans-130
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`printf("Hello, World!\n");`'
- en: '`return 0;`'
  id: totrans-131
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`return 0;`'
- en: '`}`'
  id: totrans-132
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`}`'
- en: 'Interpreters:'
  id: totrans-133
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 解释器：
- en: 'An interpreter, on the other hand, processes the source code line by line or
    statement by statement, executing it directly without creating a separate compiled
    binary. Interpreters read the source code, parse it, and execute it on the fly.
    Key characteristics of interpreters include:'
  id: totrans-134
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 另一方面，解释器逐行或逐语句处理源代码，直接执行它，而不创建单独的编译二进制文件。解释器读取源代码，解析它，并动态执行。解释器的关键特性包括：
- en: 'Dynamic Execution: Interpreters execute code dynamically, which means the source
    code can be modified and executed without recompilation. This flexibility is useful
    for rapid development and scripting.'
  id: totrans-135
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 动态执行：解释器动态执行代码，这意味着源代码可以在不重新编译的情况下被修改和执行。这种灵活性对于快速开发和脚本编写非常有用。
- en: 'Portability: Since interpreters don’t generate machine code binaries, the same
    source code can often run on different platforms with the corresponding interpreter
    installed.'
  id: totrans-136
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 可移植性：由于解释器不会生成机器代码二进制文件，因此相同的源代码通常可以在不同的平台上运行，只要安装了相应的解释器。
- en: 'Dynamic Typing: Interpreted languages often use dynamic typing, allowing for
    more flexibility in variable type handling. Type-related errors may only surface
    during runtime.'
  id: totrans-137
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 动态类型：解释型语言通常使用动态类型，允许在变量类型处理上有更多灵活性。类型相关的错误可能仅在运行时出现。
- en: 示例：像`Python`、`JavaScript`和`Ruby`这样的语言通常是解释型语言。这里有一个简单的`Python`代码示例：
  id: totrans-138
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 示例：像`Python`、`JavaScript`和`Ruby`这样的语言通常是解释型语言。这里有一个简单的`Python`代码示例：
- en: '`print("Hello, World!")`'
  id: totrans-139
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '`print("Hello, World!")`'
- en: 混合方法：
  id: totrans-140
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 混合方法：
- en: 一些语言，如`Java`，采用混合方法。`Java`源代码首先由`Java`编译器编译成中间字节码。然后，这个字节码在运行时被`Java Virtual
    Machine (JVM)`解释，从而在编译和解释的优点之间提供了一种折衷。
  id: totrans-141
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 一些语言，如`Java`，采用混合方法。`Java`源代码首先由`Java`编译器编译成中间字节码。然后，这个字节码在运行时被`Java虚拟机 (JVM)`解释，从而在编译和解释的优点之间提供了一种折衷。
- en: 选择编译与解释之间：
  id: totrans-142
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 选择编译与解释之间：
- en: 在编译与解释之间的选择取决于各种因素，包括项目的性质、性能要求和开发速度。编译语言适合性能关键的应用，而解释语言通常更适合原型设计、网页脚本和快速开发。
  id: totrans-143
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 在编译与解释之间的选择取决于各种因素，包括项目的性质、性能要求和开发速度。编译语言适合性能关键的应用，而解释语言通常更适合原型设计、网页脚本和快速开发。
- en: 总之，编译器和解释器是编程语言世界中不可或缺的工具，各自具有优点和权衡。选择它们取决于编程项目的具体需求和目标。
  id: totrans-144
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 总之，编译器和解释器是编程语言世界中不可或缺的工具，各自具有优点和权衡。选择它们取决于编程项目的具体需求和目标。
- en: '* * *'
  id: totrans-145
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '* * *'
