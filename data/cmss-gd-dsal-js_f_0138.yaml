- en: '`Linked Lists in Action`'
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: '`链表的实际应用`'
- en: One case where linked lists shine is when we examine a single list and delete
    many elements from it. Let’s say, for example, we’re building an application that
    combs through existing lists of email addresses and removes any email address
    that has an invalid format.
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 链表表现突出的一个场景是当我们检查一个单一列表并从中删除多个元素时。举个例子，我们正在构建一个应用程序，它遍历现有的电子邮件地址列表并删除任何格式无效的电子邮件地址。
- en: No matter whether the list is an array or a linked list, we need to comb through
    the entire list one element at a time to inspect each email address. This, naturally,
    takes `N` steps. However, let’s examine what happens when we actually delete each
    email address.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 无论列表是数组还是链表，我们都需要逐个检查整个列表中的每个电子邮件地址。这自然需要`N`步。然而，让我们来看看每次实际删除电子邮件地址时会发生什么。
- en: With an array, each time we delete an email address, we need another `O(N)`
    steps to shift the remaining data to the left to close the gap. All this shifting
    will happen before we can even inspect the next email address.
  id: totrans-3
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 使用数组时，每次删除电子邮件地址，我们需要额外的`O(N)`步将剩余数据向左移动以填补空缺。在我们检查下一个电子邮件地址之前，所有这些移动操作都必须先完成。
- en: Let’s assume that `1 in 10` email addresses are invalid. If we had a list of
    `1,000` email addresses, we’d have about `100` invalid ones. Our algorithm, then,
    would take `1,000` steps to read all `1,000` email addresses. On top of that,
    though, it might take up to an additional `100,000` steps for deletion, as for
    each of the `100` deleted addresses, we might shift up to `1,000` other elements.
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 假设`10`个电子邮件地址中有`1`个是无效的。如果我们有一个`1,000`个电子邮件地址的列表，那么大约会有`100`个无效地址。因此，我们的算法将需要`1,000`步来读取所有`1,000`个电子邮件地址。除此之外，删除可能需要额外的`100,000`步，因为对于每个被删除的`100`个地址，我们可能需要将多达`1,000`个其他元素向上移动。
- en: With a linked list, however, as we comb through the list, each deletion takes
    just one step, as we can simply change a node’s link to point to the appropriate
    node and move on. For our `1,000` emails, then, our algorithm would take just
    `1,100` steps, as there are `1,000` reading steps and `100` deletion steps.
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 然而，使用链表时，当我们浏览列表时，每次删除只需要一步，因为我们可以简单地改变节点的链接指向适当的节点，然后继续前进。因此，对于我们的`1,000`封电子邮件，我们的算法只需`1,100`步，因为有`1,000`次读取步骤和`100`次删除步骤。
- en: It turns out, then, that linked lists are an amazing data structure for moving
    through an entire list while making insertions or deletions, as we never have
    to worry about shifting other data as we make an insertion or deletion.
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 因此，链表被证明是一种出色的数据结构，可以在进行插入或删除时遍历整个列表，因为我们在进行插入或删除时从不需要担心移动其他数据。
