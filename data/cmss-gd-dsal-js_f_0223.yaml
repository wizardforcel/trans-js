- en: Chapter 18
  id: totrans-0
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
  zh: 第18章
- en: These are the solutions to the exercises found in the section [Exercises](f_0188.xhtml#graphs.exercises).
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: 这些是“[练习](f_0188.xhtml#graphs.exercises)”部分中的习题解决方案。
- en: If a user is browsing “nails”, the website will recommend “nail polish”, “needles”,
    “pins”, and “hammer”.
  id: totrans-2
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 如果用户正在浏览“指甲”，网站会推荐“指甲油”、“针”、“别针”和“锤子”。
- en: 'The order of depth-first search would be A-B-E-J-F-O-C-G-K-D-H-L-M-I-N-P, as
    seen in the following image:'
  id: totrans-3
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 深度优先搜索的顺序为A-B-E-J-F-O-C-G-K-D-H-L-M-I-N-P，如下图所示：
- en: '![images/graphs/solution_2_graph.png](images/graphs/solution_2_graph.png)'
  id: totrans-4
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_IMG
  zh: '![images/graphs/solution_2_graph.png](images/graphs/solution_2_graph.png)'
- en: 'The order of breadth-first search would be A-B-C-D-E-F-G-H-I-J-K-L-M-N-O-P,
    as seen in the following image:'
  id: totrans-5
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 广度优先搜索的顺序为A-B-C-D-E-F-G-H-I-J-K-L-M-N-O-P，如下图所示：
- en: '![images/graphs/solution_3_graph.png](images/graphs/solution_3_graph.png)'
  id: totrans-6
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_IMG
  zh: '![images/graphs/solution_3_graph.png](images/graphs/solution_3_graph.png)'
- en: 'Following is an implementation of breadth-first search:'
  id: totrans-7
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 以下是广度优先搜索的实现：
- en: '| ​  | `import` Queue `from` `./queue_implementation.js`; |'
  id: totrans-8
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `import` Queue `from` `./queue_implementation.js`; |'
- en: '| ​  |  |'
  id: totrans-9
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `function` bfs(startingVertex, searchValue) { |'
  id: totrans-10
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` bfs(startingVertex, searchValue) { |'
- en: '| ​  | `const` queue = `new` Queue(); |'
  id: totrans-11
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` queue = `new` Queue(); |'
- en: '| ​  | `const` visitedVertices = {}; |'
  id: totrans-12
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` visitedVertices = {}; |'
- en: '| ​  | visitedVertices[startingVertex.value] = `true`; |'
  id: totrans-13
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | visitedVertices[startingVertex.value] = `true`; |'
- en: '| ​  | queue.enqueue(startingVertex); |'
  id: totrans-14
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | queue.enqueue(startingVertex); |'
- en: '| ​  |  |'
  id: totrans-15
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `while` (queue.read()) { |'
  id: totrans-16
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while` (queue.read()) { |'
- en: '| ​  | `const` currentVertex = queue.dequeue(); |'
  id: totrans-17
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` currentVertex = queue.dequeue(); |'
- en: '| ​  | `if` (currentVertex.value === searchValue) { |'
  id: totrans-18
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (currentVertex.value === searchValue) { |'
- en: '| ​  | `return` currentVertex; |'
  id: totrans-19
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` currentVertex; |'
- en: '| ​  | } |'
  id: totrans-20
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-21
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `for` (`const` adjacentVertex `of` currentVertex.adjacentVertices) {
    |'
  id: totrans-22
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`const` adjacentVertex `of` currentVertex.adjacentVertices) {
    |'
- en: '| ​  | `if` (!visitedVertices[adjacentVertex.value]) { |'
  id: totrans-23
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (!visitedVertices[adjacentVertex.value]) { |'
- en: '| ​  | visitedVertices[adjacentVertex.value] = `true`; |'
  id: totrans-24
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | visitedVertices[adjacentVertex.value] = `true`; |'
- en: '| ​  | queue.enqueue(adjacentVertex); |'
  id: totrans-25
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | queue.enqueue(adjacentVertex); |'
- en: '| ​  | } |'
  id: totrans-26
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-27
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-28
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-29
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return`​ `null`; |'
  id: totrans-30
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return`​ `null`; |'
- en: '| ​  | } |'
  id: totrans-31
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: To find the shortest path in an unweighted graph, we’re going to use breadth-first
    search. The main feature of breadth-first search is that it stays close to the
    starting vertex as long as possible. This feature will serve as the key to finding
    the shortest path.
  id: totrans-32
  prefs:
  - PREF_OL
  stylish: true
  type: TYPE_NORMAL
  zh: 在无权图中寻找最短路径，我们将使用广度优先搜索。广度优先搜索的主要特点是尽可能长时间保持靠近起始顶点。这个特点将作为找到最短路径的关键。
- en: Let’s apply this to our social-networking example. Because breadth-first search
    stays close to Idris as long as possible, we’ll end up finding Lina first through
    the shortest possible path. Only later on in the search would we end up finding
    Lina through longer paths. In fact, we can even stop the search as soon as we
    find Lina. (Our implementation that follows doesn’t end early, but you can modify
    it to do so.)
  id: totrans-33
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 让我们将其应用于我们的社交网络示例。由于广度优先搜索尽可能长时间保持靠近Idris，我们最终会通过最短路径首先找到Lina。只有在搜索的后期，我们才会通过较长的路径找到Lina。实际上，我们甚至可以在找到Lina后立即停止搜索。（以下实现并不会提前结束，但你可以修改它以实现这一点。）
- en: As we visit each vertex for the first time, then, we know that the current vertex
    is always part of the shortest path from the starting vertex to the vertex we’re
    visiting. (Remember, with BFS, the current vertex and the vertex we’re visiting
    aren’t necessarily the same.)
  id: totrans-34
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 当我们第一次访问每个顶点时，我们知道当前顶点始终是从起始顶点到我们正在访问的顶点的最短路径的一部分。（记住，对于广度优先搜索，当前顶点和我们正在访问的顶点不一定相同。）
- en: For example, when we visit Lina for the first time, Kamil will be the current
    vertex. This is because in BFS, we’ll get to Lisa first through Kamil before we
    get to her through Sasha. When we do visit Lina (through Kamil), we can store
    in a table that the shortest path from Idris to Lina will be through Kamil. This
    table is similar to the `cheapestPreviousStopoverCityTable` from Dijkstra’s algorithm.
  id: totrans-35
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: 例如，当我们第一次访问Lina时，Kamil将是当前顶点。这是因为在广度优先搜索中，我们将通过Kamil先到达Lisa，然后才通过Sasha到达她。当我们访问Lina（通过Kamil）时，我们可以在表中记录从Idris到Lina的最短路径将通过Kamil。这个表类似于Dijkstra算法中的`cheapestPreviousStopoverCityTable`。
- en: '- In fact, whenever we visit any vertex, the shortest path from Idris to that
    vertex will be through the current vertex. We’ll store all of this data in a table
    called `previousVertexTable`.'
  id: totrans-36
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: '- 实际上，每当我们访问任何顶点时，从伊德里斯到该顶点的最短路径将经过当前顶点。我们会将所有这些数据存储在一个名为`previousVertexTable`的表中。'
- en: '- Finally, we can then use this data to work backward from Lina to Idris to
    build the precise shortest path between the two of them.'
  id: totrans-37
  prefs:
  - PREF_IND
  stylish: true
  type: TYPE_NORMAL
  zh: '- 最后，我们可以使用这些数据从莉娜回溯到伊德里斯，构建两者之间的精确最短路径。'
- en: '- Here’s our implementation:'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
  zh: '- 这是我们的实现：'
- en: '| ​  | `import` Queue `from` *''./queue_implementation.js''*; |'
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `import` Queue `from` *''./queue_implementation.js''*; |'
- en: '| ​  |  |'
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `function` findShortestPath(`firstVertex`, `secondVertex`, `visitedVertices`)
    { |'
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `function` findShortestPath(`firstVertex`, `secondVertex`, `visitedVertices`)
    { |'
- en: '| ​  | `const` queue = `new` Queue(); |'
  id: totrans-42
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` queue = `new` Queue(); |'
- en: '| ​  | `const` previousVertexTable = {}; |'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` previousVertexTable = {}; |'
- en: '| ​  |  |'
  id: totrans-44
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | visitedVertices[`firstVertex.value`] = `true`; |'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | visitedVertices[`firstVertex.value`] = `true`; |'
- en: '| ​  | queue.enqueue(`firstVertex`); |'
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | queue.enqueue(`firstVertex`); |'
- en: '| ​  |  |'
  id: totrans-47
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `while` (queue.read()) { |'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while` (queue.read()) { |'
- en: '| ​  | `const` currentVertex = queue.dequeue(); |'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` currentVertex = queue.dequeue(); |'
- en: '| ​  |  |'
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `for` (`const` adjacentVertex `of` `currentVertex.adjacentVertices`)
    { |'
  id: totrans-51
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `for` (`const` adjacentVertex `of` `currentVertex.adjacentVertices`)
    { |'
- en: '| ​  | `if` (!visitedVertices[`adjacentVertex.value`]) { |'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `if` (!visitedVertices[`adjacentVertex.value`]) { |'
- en: '| ​  | visitedVertices[`adjacentVertex.value`] = `true`; |'
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | visitedVertices[`adjacentVertex.value`] = `true`; |'
- en: '| ​  | queue.enqueue(`adjacentVertex`); |'
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | queue.enqueue(`adjacentVertex`); |'
- en: '| ​  | previousVertexTable[`adjacentVertex.value`] = `currentVertex.value`;
    |'
  id: totrans-55
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | previousVertexTable[`adjacentVertex.value`] = `currentVertex.value`;
    |'
- en: '| ​  | } |'
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  | } |'
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-59
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `const` shortestPath = []; |'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `const` shortestPath = []; |'
- en: '| ​  | `let` currentVertexValue = `secondVertex.value`; |'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `let` currentVertexValue = `secondVertex.value`; |'
- en: '| ​  |  |'
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `while` (currentVertexValue !== `firstVertex.value`) { |'
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `while` (currentVertexValue !== `firstVertex.value`) { |'
- en: '| ​  | shortestPath.unshift(`currentVertexValue`); |'
  id: totrans-64
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | shortestPath.unshift(`currentVertexValue`); |'
- en: '| ​  | `currentVertexValue` = previousVertexTable[`currentVertexValue`]; |'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `currentVertexValue` = previousVertexTable[`currentVertexValue`]; |'
- en: '| ​  | } |'
  id: totrans-66
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
- en: '| ​  |  |'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | shortestPath.unshift(`firstVertex.value`); |'
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | shortestPath.unshift(`firstVertex.value`); |'
- en: '| ​  |  |'
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  |  |'
- en: '| ​  | `return` shortestPath; |'
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | `return` shortestPath; |'
- en: '| ​  | } |'
  id: totrans-71
  prefs: []
  stylish: true
  type: TYPE_TB
  zh: '| ​  | } |'
